
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  08010010  08010010  00020010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108cc  080108cc  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080108cc  080108cc  000208cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108d4  080108d4  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108d4  080108d4  000208d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108d8  080108d8  000208d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080108dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052f8  20000078  08010954  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005370  08010954  00035370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ed47  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dc7  00000000  00000000  0005edef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002538  00000000  00000000  00065bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002258  00000000  00000000  000680f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a0e  00000000  00000000  0006a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003bca3  00000000  00000000  0008bd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b60e8  00000000  00000000  000c79f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017dae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b70  00000000  00000000  0017db34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fff8 	.word	0x0800fff8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800fff8 	.word	0x0800fff8

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <BtcRxVal>:
	return E_OK;

}

StdReturnType BtcRxVal()
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

	if(BtcReceivedDataOnBluetooth >= 116 && BtcReceivedDataOnBluetooth <= 132)
 8000cc4:	4bec      	ldr	r3, [pc, #944]	; (8001078 <BtcRxVal+0x3b8>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b73      	cmp	r3, #115	; 0x73
 8000cca:	d90a      	bls.n	8000ce2 <BtcRxVal+0x22>
 8000ccc:	4bea      	ldr	r3, [pc, #936]	; (8001078 <BtcRxVal+0x3b8>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b84      	cmp	r3, #132	; 0x84
 8000cd2:	d806      	bhi.n	8000ce2 <BtcRxVal+0x22>
	{

		Btc_TemperatureValue = BtcReceivedDataOnBluetooth - 100;
 8000cd4:	4be8      	ldr	r3, [pc, #928]	; (8001078 <BtcRxVal+0x3b8>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	3b64      	subs	r3, #100	; 0x64
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4be7      	ldr	r3, [pc, #924]	; (800107c <BtcRxVal+0x3bc>)
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e00d      	b.n	8000cfe <BtcRxVal+0x3e>

	}
	else if(BtcReceivedDataOnBluetooth >= 150 && BtcReceivedDataOnBluetooth <= 157)
 8000ce2:	4be5      	ldr	r3, [pc, #916]	; (8001078 <BtcRxVal+0x3b8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b95      	cmp	r3, #149	; 0x95
 8000ce8:	d909      	bls.n	8000cfe <BtcRxVal+0x3e>
 8000cea:	4be3      	ldr	r3, [pc, #908]	; (8001078 <BtcRxVal+0x3b8>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b9d      	cmp	r3, #157	; 0x9d
 8000cf0:	d805      	bhi.n	8000cfe <BtcRxVal+0x3e>
	{

		Btc_FanValue = BtcReceivedDataOnBluetooth - 150;
 8000cf2:	4be1      	ldr	r3, [pc, #900]	; (8001078 <BtcRxVal+0x3b8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	336a      	adds	r3, #106	; 0x6a
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4be1      	ldr	r3, [pc, #900]	; (8001080 <BtcRxVal+0x3c0>)
 8000cfc:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
 8000cfe:	4bde      	ldr	r3, [pc, #888]	; (8001078 <BtcRxVal+0x3b8>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	2bd5      	cmp	r3, #213	; 0xd5
 8000d06:	f200 8297 	bhi.w	8001238 <BtcRxVal+0x578>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <BtcRxVal+0x50>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	080010a9 	.word	0x080010a9
 8000d14:	080010b1 	.word	0x080010b1
 8000d18:	080010b9 	.word	0x080010b9
 8000d1c:	080010c7 	.word	0x080010c7
 8000d20:	080010cf 	.word	0x080010cf
 8000d24:	080010dd 	.word	0x080010dd
 8000d28:	080010e5 	.word	0x080010e5
 8000d2c:	080010f3 	.word	0x080010f3
 8000d30:	080010fb 	.word	0x080010fb
 8000d34:	08001109 	.word	0x08001109
 8000d38:	08001111 	.word	0x08001111
 8000d3c:	08001119 	.word	0x08001119
 8000d40:	08001121 	.word	0x08001121
 8000d44:	08001129 	.word	0x08001129
 8000d48:	08001131 	.word	0x08001131
 8000d4c:	08001139 	.word	0x08001139
 8000d50:	08001141 	.word	0x08001141
 8000d54:	08001149 	.word	0x08001149
 8000d58:	08001151 	.word	0x08001151
 8000d5c:	08001159 	.word	0x08001159
 8000d60:	08001069 	.word	0x08001069
 8000d64:	08001071 	.word	0x08001071
 8000d68:	08001239 	.word	0x08001239
 8000d6c:	08001239 	.word	0x08001239
 8000d70:	08001239 	.word	0x08001239
 8000d74:	08001239 	.word	0x08001239
 8000d78:	08001239 	.word	0x08001239
 8000d7c:	08001239 	.word	0x08001239
 8000d80:	08001239 	.word	0x08001239
 8000d84:	08001239 	.word	0x08001239
 8000d88:	08001239 	.word	0x08001239
 8000d8c:	08001239 	.word	0x08001239
 8000d90:	08001239 	.word	0x08001239
 8000d94:	08001239 	.word	0x08001239
 8000d98:	08001239 	.word	0x08001239
 8000d9c:	08001239 	.word	0x08001239
 8000da0:	08001239 	.word	0x08001239
 8000da4:	08001239 	.word	0x08001239
 8000da8:	08001239 	.word	0x08001239
 8000dac:	08001239 	.word	0x08001239
 8000db0:	08001239 	.word	0x08001239
 8000db4:	08001239 	.word	0x08001239
 8000db8:	08001239 	.word	0x08001239
 8000dbc:	08001239 	.word	0x08001239
 8000dc0:	08001239 	.word	0x08001239
 8000dc4:	08001239 	.word	0x08001239
 8000dc8:	08001239 	.word	0x08001239
 8000dcc:	08001239 	.word	0x08001239
 8000dd0:	08001239 	.word	0x08001239
 8000dd4:	08001239 	.word	0x08001239
 8000dd8:	08001239 	.word	0x08001239
 8000ddc:	08001239 	.word	0x08001239
 8000de0:	08001239 	.word	0x08001239
 8000de4:	08001239 	.word	0x08001239
 8000de8:	08001239 	.word	0x08001239
 8000dec:	08001239 	.word	0x08001239
 8000df0:	08001239 	.word	0x08001239
 8000df4:	08001239 	.word	0x08001239
 8000df8:	08001239 	.word	0x08001239
 8000dfc:	08001239 	.word	0x08001239
 8000e00:	08001239 	.word	0x08001239
 8000e04:	08001239 	.word	0x08001239
 8000e08:	08001239 	.word	0x08001239
 8000e0c:	08001239 	.word	0x08001239
 8000e10:	08001239 	.word	0x08001239
 8000e14:	08001239 	.word	0x08001239
 8000e18:	08001239 	.word	0x08001239
 8000e1c:	08001239 	.word	0x08001239
 8000e20:	08001239 	.word	0x08001239
 8000e24:	08001239 	.word	0x08001239
 8000e28:	08001239 	.word	0x08001239
 8000e2c:	08001239 	.word	0x08001239
 8000e30:	08001239 	.word	0x08001239
 8000e34:	08001239 	.word	0x08001239
 8000e38:	08001239 	.word	0x08001239
 8000e3c:	08001239 	.word	0x08001239
 8000e40:	08001239 	.word	0x08001239
 8000e44:	08001239 	.word	0x08001239
 8000e48:	08001239 	.word	0x08001239
 8000e4c:	08001239 	.word	0x08001239
 8000e50:	08001239 	.word	0x08001239
 8000e54:	08001239 	.word	0x08001239
 8000e58:	08001239 	.word	0x08001239
 8000e5c:	08001239 	.word	0x08001239
 8000e60:	08001239 	.word	0x08001239
 8000e64:	08001239 	.word	0x08001239
 8000e68:	08001239 	.word	0x08001239
 8000e6c:	08001239 	.word	0x08001239
 8000e70:	08001239 	.word	0x08001239
 8000e74:	08001239 	.word	0x08001239
 8000e78:	08001239 	.word	0x08001239
 8000e7c:	08001239 	.word	0x08001239
 8000e80:	08001239 	.word	0x08001239
 8000e84:	08001239 	.word	0x08001239
 8000e88:	08001239 	.word	0x08001239
 8000e8c:	08001239 	.word	0x08001239
 8000e90:	08001239 	.word	0x08001239
 8000e94:	08001239 	.word	0x08001239
 8000e98:	08001239 	.word	0x08001239
 8000e9c:	08001089 	.word	0x08001089
 8000ea0:	08001091 	.word	0x08001091
 8000ea4:	08001099 	.word	0x08001099
 8000ea8:	080010a1 	.word	0x080010a1
 8000eac:	08001239 	.word	0x08001239
 8000eb0:	08001239 	.word	0x08001239
 8000eb4:	08001239 	.word	0x08001239
 8000eb8:	08001239 	.word	0x08001239
 8000ebc:	08001239 	.word	0x08001239
 8000ec0:	08001239 	.word	0x08001239
 8000ec4:	08001239 	.word	0x08001239
 8000ec8:	08001239 	.word	0x08001239
 8000ecc:	08001239 	.word	0x08001239
 8000ed0:	08001239 	.word	0x08001239
 8000ed4:	08001239 	.word	0x08001239
 8000ed8:	08001239 	.word	0x08001239
 8000edc:	08001239 	.word	0x08001239
 8000ee0:	08001239 	.word	0x08001239
 8000ee4:	08001239 	.word	0x08001239
 8000ee8:	08001239 	.word	0x08001239
 8000eec:	08001239 	.word	0x08001239
 8000ef0:	08001239 	.word	0x08001239
 8000ef4:	08001239 	.word	0x08001239
 8000ef8:	08001239 	.word	0x08001239
 8000efc:	08001239 	.word	0x08001239
 8000f00:	08001239 	.word	0x08001239
 8000f04:	08001239 	.word	0x08001239
 8000f08:	08001239 	.word	0x08001239
 8000f0c:	08001239 	.word	0x08001239
 8000f10:	08001239 	.word	0x08001239
 8000f14:	08001239 	.word	0x08001239
 8000f18:	08001239 	.word	0x08001239
 8000f1c:	08001239 	.word	0x08001239
 8000f20:	08001239 	.word	0x08001239
 8000f24:	08001239 	.word	0x08001239
 8000f28:	08001239 	.word	0x08001239
 8000f2c:	08001239 	.word	0x08001239
 8000f30:	08001239 	.word	0x08001239
 8000f34:	08001239 	.word	0x08001239
 8000f38:	08001239 	.word	0x08001239
 8000f3c:	08001239 	.word	0x08001239
 8000f40:	08001239 	.word	0x08001239
 8000f44:	08001239 	.word	0x08001239
 8000f48:	08001239 	.word	0x08001239
 8000f4c:	08001239 	.word	0x08001239
 8000f50:	08001239 	.word	0x08001239
 8000f54:	08001239 	.word	0x08001239
 8000f58:	08001239 	.word	0x08001239
 8000f5c:	08001239 	.word	0x08001239
 8000f60:	08001239 	.word	0x08001239
 8000f64:	08001239 	.word	0x08001239
 8000f68:	08001239 	.word	0x08001239
 8000f6c:	08001239 	.word	0x08001239
 8000f70:	08001239 	.word	0x08001239
 8000f74:	08001239 	.word	0x08001239
 8000f78:	08001239 	.word	0x08001239
 8000f7c:	08001239 	.word	0x08001239
 8000f80:	08001239 	.word	0x08001239
 8000f84:	08001239 	.word	0x08001239
 8000f88:	08001239 	.word	0x08001239
 8000f8c:	08001239 	.word	0x08001239
 8000f90:	08001239 	.word	0x08001239
 8000f94:	08001239 	.word	0x08001239
 8000f98:	08001239 	.word	0x08001239
 8000f9c:	08001239 	.word	0x08001239
 8000fa0:	08001239 	.word	0x08001239
 8000fa4:	08001239 	.word	0x08001239
 8000fa8:	08001239 	.word	0x08001239
 8000fac:	08001239 	.word	0x08001239
 8000fb0:	08001239 	.word	0x08001239
 8000fb4:	08001239 	.word	0x08001239
 8000fb8:	08001239 	.word	0x08001239
 8000fbc:	08001239 	.word	0x08001239
 8000fc0:	08001239 	.word	0x08001239
 8000fc4:	08001239 	.word	0x08001239
 8000fc8:	08001239 	.word	0x08001239
 8000fcc:	08001239 	.word	0x08001239
 8000fd0:	08001239 	.word	0x08001239
 8000fd4:	08001239 	.word	0x08001239
 8000fd8:	08001239 	.word	0x08001239
 8000fdc:	08001239 	.word	0x08001239
 8000fe0:	08001239 	.word	0x08001239
 8000fe4:	08001239 	.word	0x08001239
 8000fe8:	08001239 	.word	0x08001239
 8000fec:	08001239 	.word	0x08001239
 8000ff0:	08001239 	.word	0x08001239
 8000ff4:	08001239 	.word	0x08001239
 8000ff8:	08001239 	.word	0x08001239
 8000ffc:	08001239 	.word	0x08001239
 8001000:	08001239 	.word	0x08001239
 8001004:	08001239 	.word	0x08001239
 8001008:	08001239 	.word	0x08001239
 800100c:	08001239 	.word	0x08001239
 8001010:	08001239 	.word	0x08001239
 8001014:	08001239 	.word	0x08001239
 8001018:	08001239 	.word	0x08001239
 800101c:	08001239 	.word	0x08001239
 8001020:	08001239 	.word	0x08001239
 8001024:	08001239 	.word	0x08001239
 8001028:	08001239 	.word	0x08001239
 800102c:	08001161 	.word	0x08001161
 8001030:	08001169 	.word	0x08001169
 8001034:	08001177 	.word	0x08001177
 8001038:	0800119d 	.word	0x0800119d
 800103c:	080011a5 	.word	0x080011a5
 8001040:	08001211 	.word	0x08001211
 8001044:	08001231 	.word	0x08001231
 8001048:	080011ad 	.word	0x080011ad
 800104c:	080011b5 	.word	0x080011b5
 8001050:	080011bd 	.word	0x080011bd
 8001054:	080011d1 	.word	0x080011d1
 8001058:	080011d9 	.word	0x080011d9
 800105c:	080011ed 	.word	0x080011ed
 8001060:	080011f5 	.word	0x080011f5
 8001064:	08001209 	.word	0x08001209
	{

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			Btc_ReverseLight = BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <BtcRxVal+0x3c4>)
 800106a:	2215      	movs	r2, #21
 800106c:	701a      	strb	r2, [r3, #0]

			break;
 800106e:	e0e4      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			Btc_ReverseLight = BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <BtcRxVal+0x3c4>)
 8001072:	2216      	movs	r2, #22
 8001074:	701a      	strb	r2, [r3, #0]

			break;
 8001076:	e0e0      	b.n	800123a <BtcRxVal+0x57a>
 8001078:	20000094 	.word	0x20000094
 800107c:	200000cb 	.word	0x200000cb
 8001080:	200000cc 	.word	0x200000cc
 8001084:	200000bf 	.word	0x200000bf

		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8001088:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <BtcRxVal+0x588>)
 800108a:	2264      	movs	r2, #100	; 0x64
 800108c:	701a      	strb	r2, [r3, #0]

			break;
 800108e:	e0d4      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8001090:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <BtcRxVal+0x588>)
 8001092:	2265      	movs	r2, #101	; 0x65
 8001094:	701a      	strb	r2, [r3, #0]

			break;
 8001096:	e0d0      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8001098:	4b6b      	ldr	r3, [pc, #428]	; (8001248 <BtcRxVal+0x588>)
 800109a:	2266      	movs	r2, #102	; 0x66
 800109c:	701a      	strb	r2, [r3, #0]

			break;
 800109e:	e0cc      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80010a0:	4b69      	ldr	r3, [pc, #420]	; (8001248 <BtcRxVal+0x588>)
 80010a2:	2267      	movs	r2, #103	; 0x67
 80010a4:	701a      	strb	r2, [r3, #0]

			break;
 80010a6:	e0c8      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <BtcRxVal+0x58c>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]

			break;
 80010ae:	e0c4      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80010b0:	4b66      	ldr	r3, [pc, #408]	; (800124c <BtcRxVal+0x58c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]

			break;
 80010b6:	e0c0      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80010b8:	4b65      	ldr	r3, [pc, #404]	; (8001250 <BtcRxVal+0x590>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
			Btc_FlashHighBeam = STD_LOW;
 80010be:	4b65      	ldr	r3, [pc, #404]	; (8001254 <BtcRxVal+0x594>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]

			break;
 80010c4:	e0b9      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80010c6:	4b62      	ldr	r3, [pc, #392]	; (8001250 <BtcRxVal+0x590>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]

			break;
 80010cc:	e0b5      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80010ce:	4b61      	ldr	r3, [pc, #388]	; (8001254 <BtcRxVal+0x594>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
			Btc_HighBeam = STD_LOW;
 80010d4:	4b5e      	ldr	r3, [pc, #376]	; (8001250 <BtcRxVal+0x590>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]

			break;
 80010da:	e0ae      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 80010dc:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <BtcRxVal+0x594>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]

			break;
 80010e2:	e0aa      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 80010e4:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <BtcRxVal+0x598>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalRight = STD_LOW;
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <BtcRxVal+0x59c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]

			break;
 80010f0:	e0a3      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 80010f2:	4b59      	ldr	r3, [pc, #356]	; (8001258 <BtcRxVal+0x598>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]

			break;
 80010f8:	e09f      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 80010fa:	4b58      	ldr	r3, [pc, #352]	; (800125c <BtcRxVal+0x59c>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalLeft = STD_LOW;
 8001100:	4b55      	ldr	r3, [pc, #340]	; (8001258 <BtcRxVal+0x598>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]

			break;
 8001106:	e098      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 8001108:	4b54      	ldr	r3, [pc, #336]	; (800125c <BtcRxVal+0x59c>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]

			break;
 800110e:	e094      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 8001110:	4b53      	ldr	r3, [pc, #332]	; (8001260 <BtcRxVal+0x5a0>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]

			break;
 8001116:	e090      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 8001118:	4b51      	ldr	r3, [pc, #324]	; (8001260 <BtcRxVal+0x5a0>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]

			break;
 800111e:	e08c      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 8001120:	4b50      	ldr	r3, [pc, #320]	; (8001264 <BtcRxVal+0x5a4>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]

			break;
 8001126:	e088      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 8001128:	4b4e      	ldr	r3, [pc, #312]	; (8001264 <BtcRxVal+0x5a4>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]

			break;
 800112e:	e084      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 8001130:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <BtcRxVal+0x5a8>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]

			break;
 8001136:	e080      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 8001138:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <BtcRxVal+0x5a8>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]

			break;
 800113e:	e07c      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 8001140:	4b4a      	ldr	r3, [pc, #296]	; (800126c <BtcRxVal+0x5ac>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]

			break;
 8001146:	e078      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 8001148:	4b48      	ldr	r3, [pc, #288]	; (800126c <BtcRxVal+0x5ac>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]

			break;
 800114e:	e074      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 8001150:	4b47      	ldr	r3, [pc, #284]	; (8001270 <BtcRxVal+0x5b0>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]

			break;
 8001156:	e070      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 8001158:	4b45      	ldr	r3, [pc, #276]	; (8001270 <BtcRxVal+0x5b0>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]

			break;
 800115e:	e06c      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_NORMALMODE_ON:

			Btc_NormalMode = STD_HIGH;
 8001160:	4b44      	ldr	r3, [pc, #272]	; (8001274 <BtcRxVal+0x5b4>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]

			break;
 8001166:	e068      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_RECIRCULATIONMODE_ON:

			Btc_NormalMode 			= STD_LOW;
 8001168:	4b42      	ldr	r3, [pc, #264]	; (8001274 <BtcRxVal+0x5b4>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode 	= STD_HIGH;
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <BtcRxVal+0x5b8>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]

			break;
 8001174:	e061      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AUTOMATICMODE_ON:

			Btc_NormalMode 			= STD_LOW;
 8001176:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <BtcRxVal+0x5b4>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode 	= STD_LOW;
 800117c:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <BtcRxVal+0x5b8>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
			Btc_LegVents 			= STD_LOW;
 8001182:	4b3e      	ldr	r3, [pc, #248]	; (800127c <BtcRxVal+0x5bc>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
			Btc_MidVents 			= STD_LOW;
 8001188:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <BtcRxVal+0x5c0>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldVents 	= STD_LOW;
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <BtcRxVal+0x5c4>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_HIGH;
 8001194:	4b3c      	ldr	r3, [pc, #240]	; (8001288 <BtcRxVal+0x5c8>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]

			break;
 800119a:	e04e      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTON:

			Btc_BackwindowDefrost = STD_HIGH;
 800119c:	4b3b      	ldr	r3, [pc, #236]	; (800128c <BtcRxVal+0x5cc>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]

			break;
 80011a2:	e04a      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTOFF:

			Btc_BackwindowDefrost = STD_LOW;
 80011a4:	4b39      	ldr	r3, [pc, #228]	; (800128c <BtcRxVal+0x5cc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]

			break;
 80011aa:	e046      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AC_ON:

			Btc_AC = STD_HIGH;
 80011ac:	4b38      	ldr	r3, [pc, #224]	; (8001290 <BtcRxVal+0x5d0>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]

			break;
 80011b2:	e042      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AC_OFF:

			Btc_AC = STD_LOW;
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <BtcRxVal+0x5d0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]

			break;
 80011ba:	e03e      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_LEGVENT_ON:

			Btc_LegVents 			= STD_HIGH;
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <BtcRxVal+0x5bc>)
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80011c2:	4b34      	ldr	r3, [pc, #208]	; (8001294 <BtcRxVal+0x5d4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <BtcRxVal+0x5c8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]

			break;
 80011ce:	e034      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_LEGVENT_OFF:

			Btc_LegVents = STD_LOW;
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <BtcRxVal+0x5bc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]

			break;
 80011d6:	e030      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_MIDVENT_ON:

			Btc_MidVents 			= STD_HIGH;
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <BtcRxVal+0x5c0>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <BtcRxVal+0x5d4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <BtcRxVal+0x5c8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]

			break;
 80011ea:	e026      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_MIDVENT_OFF:

			Btc_MidVents = STD_LOW;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <BtcRxVal+0x5c0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]

			break;
 80011f2:	e022      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDVENT_ON:

			Btc_WindshieldVents 	= STD_HIGH;
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <BtcRxVal+0x5c4>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <BtcRxVal+0x5d4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <BtcRxVal+0x5c8>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]

			break;
 8001206:	e018      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDVENT_OFF:

			Btc_WindshieldVents = STD_LOW;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <BtcRxVal+0x5c4>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]

			break;
 800120e:	e014      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:

			Btc_WindshieldDefrost	= STD_HIGH;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <BtcRxVal+0x5d4>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
			Btc_LegVents 			= STD_LOW;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <BtcRxVal+0x5bc>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
			Btc_MidVents 			= STD_LOW;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <BtcRxVal+0x5c0>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldVents 	= STD_LOW;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <BtcRxVal+0x5c4>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <BtcRxVal+0x5c8>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]

			break;
 800122e:	e004      	b.n	800123a <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:

			Btc_WindshieldDefrost = STD_LOW;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <BtcRxVal+0x5d4>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]


			break;
 8001236:	e000      	b.n	800123a <BtcRxVal+0x57a>

		default:

			break;
 8001238:	bf00      	nop

	}

	return 1;
 800123a:	2301      	movs	r3, #1

}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200000b6 	.word	0x200000b6
 800124c:	2000009f 	.word	0x2000009f
 8001250:	200000b7 	.word	0x200000b7
 8001254:	200000b8 	.word	0x200000b8
 8001258:	200000ba 	.word	0x200000ba
 800125c:	200000bb 	.word	0x200000bb
 8001260:	200000bc 	.word	0x200000bc
 8001264:	200000b9 	.word	0x200000b9
 8001268:	200000be 	.word	0x200000be
 800126c:	200000bd 	.word	0x200000bd
 8001270:	200000f5 	.word	0x200000f5
 8001274:	200000d5 	.word	0x200000d5
 8001278:	200000d4 	.word	0x200000d4
 800127c:	200000cd 	.word	0x200000cd
 8001280:	200000ce 	.word	0x200000ce
 8001284:	200000cf 	.word	0x200000cf
 8001288:	200000d3 	.word	0x200000d3
 800128c:	200000d1 	.word	0x200000d1
 8001290:	200000d2 	.word	0x200000d2
 8001294:	200000d0 	.word	0x200000d0

08001298 <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 80012a2:	2201      	movs	r2, #1
 80012a4:	490e      	ldr	r1, [pc, #56]	; (80012e0 <BtcEnableUart+0x48>)
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <BtcEnableUart+0x4c>)
 80012a8:	f00a fe06 	bl	800beb8 <HAL_UART_Receive_IT>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d007      	beq.n	80012c2 <BtcEnableUart+0x2a>
	{
		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 80012b2:	2201      	movs	r2, #1
 80012b4:	490a      	ldr	r1, [pc, #40]	; (80012e0 <BtcEnableUart+0x48>)
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <BtcEnableUart+0x4c>)
 80012b8:	f00a fdfe 	bl	800beb8 <HAL_UART_Receive_IT>
		status = E_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	e009      	b.n	80012d6 <BtcEnableUart+0x3e>
	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 80012c2:	2201      	movs	r2, #1
 80012c4:	4906      	ldr	r1, [pc, #24]	; (80012e0 <BtcEnableUart+0x48>)
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <BtcEnableUart+0x4c>)
 80012c8:	f00a fdf6 	bl	800beb8 <HAL_UART_Receive_IT>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <BtcEnableUart+0x3e>
	{
		status = E_NOT_OK;
 80012d2:	2301      	movs	r3, #1
 80012d4:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 80012d6:	79fb      	ldrb	r3, [r7, #7]

}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000094 	.word	0x20000094
 80012e4:	200008b8 	.word	0x200008b8

080012e8 <BtcMainFunction>:

void BtcMainFunction()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	BtcEnableUart();
 80012ec:	f7ff ffd4 	bl	8001298 <BtcEnableUart>
	BtcRxVal();
 80012f0:	f7ff fce6 	bl	8000cc0 <BtcRxVal>

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <CenLocState>:

	return E_OK;
}

StdReturnType CenLocState()
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <CenLocState+0x5c>)
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <CenLocState+0x60>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d01b      	beq.n	8001346 <CenLocState+0x4e>
	{

		CenLoc_ExtLights_LockedState 	= CenLoc_PreviousState;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <CenLocState+0x5c>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <CenLocState+0x64>)
 8001314:	701a      	strb	r2, [r3, #0]
		CenLoc_ExtLights_UnlockedState 	= CenLoc_CurrentState;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <CenLocState+0x60>)
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <CenLocState+0x68>)
 800131c:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 			= CenLoc_CurrentState;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <CenLocState+0x60>)
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <CenLocState+0x5c>)
 8001324:	701a      	strb	r2, [r3, #0]
		CenLoc_LockUnlockFlag 			= !CenLoc_CurrentState;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <CenLocState+0x60>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <CenLocState+0x6c>)
 8001338:	701a      	strb	r2, [r3, #0]
		CenLoc_LockCounter 				= STD_LOW;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <CenLocState+0x70>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
		CenLoc_UnlockCounter 			= STD_LOW;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <CenLocState+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	return status;
 8001346:	79fb      	ldrb	r3, [r7, #7]

}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000096 	.word	0x20000096
 8001358:	20000095 	.word	0x20000095
 800135c:	20000099 	.word	0x20000099
 8001360:	20000098 	.word	0x20000098
 8001364:	20000097 	.word	0x20000097
 8001368:	2000009c 	.word	0x2000009c
 800136c:	2000009d 	.word	0x2000009d

08001370 <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <CenLocSecAlmStateToOff+0x1c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d102      	bne.n	8001382 <CenLocSecAlmStateToOff+0x12>
	{

		SecAlm_Trigger = STD_LOW;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <CenLocSecAlmStateToOff+0x20>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	20000095 	.word	0x20000095
 8001390:	20000106 	.word	0x20000106

08001394 <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

	if(Btc_CenLoc == STD_HIGH)
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <CenLocRxBtcState+0x30>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d104      	bne.n	80013aa <CenLocRxBtcState+0x16>
	{

		CenLoc_CurrentState = Btc_CenLoc;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <CenLocRxBtcState+0x30>)
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <CenLocRxBtcState+0x34>)
 80013a6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80013a8:	e007      	b.n	80013ba <CenLocRxBtcState+0x26>
	else if(Btc_CenLoc == STD_LOW)
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <CenLocRxBtcState+0x30>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <CenLocRxBtcState+0x26>
		CenLoc_CurrentState = Btc_CenLoc;
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <CenLocRxBtcState+0x30>)
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <CenLocRxBtcState+0x34>)
 80013b8:	701a      	strb	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	2000009f 	.word	0x2000009f
 80013c8:	20000095 	.word	0x20000095

080013cc <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	461a      	mov	r2, r3
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <CenLocToggleDoorLED+0x20>)
 80013de:	f005 f8d9 	bl	8006594 <HAL_GPIO_WritePin>

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40020400 	.word	0x40020400

080013f0 <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0


	CenLoc_Timer5Value = __HAL_TIM_GET_COUNTER(&htim5);
 80013f4:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <CenLocFollowMeHome+0xe4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	4a37      	ldr	r2, [pc, #220]	; (80014d8 <CenLocFollowMeHome+0xe8>)
 80013fc:	6013      	str	r3, [r2, #0]

	if(CenLoc_ExtLights_LockedState == STD_LOW && CenLoc_ExtLights_UnlockedState == STD_HIGH && CenLoc_Timer5StartStopFlag == 0)
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <CenLocFollowMeHome+0xec>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d115      	bne.n	8001432 <CenLocFollowMeHome+0x42>
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <CenLocFollowMeHome+0xf0>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d111      	bne.n	8001432 <CenLocFollowMeHome+0x42>
 800140e:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <CenLocFollowMeHome+0xf4>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <CenLocFollowMeHome+0x42>
	{

		CenLoc_Timer5StartStopFlag = 1;
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <CenLocFollowMeHome+0xf4>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 800141c:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <CenLocFollowMeHome+0xe4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2200      	movs	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim5);
 8001424:	482b      	ldr	r0, [pc, #172]	; (80014d4 <CenLocFollowMeHome+0xe4>)
 8001426:	f009 fc25 	bl	800ac74 <HAL_TIM_Base_Start>
		Timer5ChangeState = 1;
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <CenLocFollowMeHome+0xf8>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e018      	b.n	8001464 <CenLocFollowMeHome+0x74>

	}
	else if(CenLoc_ExtLights_LockedState == STD_HIGH && CenLoc_ExtLights_UnlockedState == STD_LOW && CenLoc_Timer5StartStopFlag == 1)
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <CenLocFollowMeHome+0xec>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d114      	bne.n	8001464 <CenLocFollowMeHome+0x74>
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <CenLocFollowMeHome+0xf0>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d110      	bne.n	8001464 <CenLocFollowMeHome+0x74>
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <CenLocFollowMeHome+0xf4>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d10c      	bne.n	8001464 <CenLocFollowMeHome+0x74>
	{

		CenLoc_Timer5StartStopFlag = 0;
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <CenLocFollowMeHome+0xf4>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <CenLocFollowMeHome+0xe4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim5);
 8001458:	481e      	ldr	r0, [pc, #120]	; (80014d4 <CenLocFollowMeHome+0xe4>)
 800145a:	f009 fc0b 	bl	800ac74 <HAL_TIM_Base_Start>
		Timer5ChangeState = 0;
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <CenLocFollowMeHome+0xf8>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(__HAL_TIM_GET_COUNTER(&htim5) < 100000 && (Timer5ChangeState == 1 || Timer5ChangeState == 0))
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <CenLocFollowMeHome+0xe4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	4a20      	ldr	r2, [pc, #128]	; (80014ec <CenLocFollowMeHome+0xfc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d80b      	bhi.n	8001488 <CenLocFollowMeHome+0x98>
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <CenLocFollowMeHome+0xf8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d003      	beq.n	8001480 <CenLocFollowMeHome+0x90>
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <CenLocFollowMeHome+0xf8>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d103      	bne.n	8001488 <CenLocFollowMeHome+0x98>
	{

		CenLoc_FollowMeHomeState = STD_HIGH;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <CenLocFollowMeHome+0x100>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	e00e      	b.n	80014a6 <CenLocFollowMeHome+0xb6>

	}
	else if(__HAL_TIM_GET_COUNTER(&htim5) >= 100000)
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <CenLocFollowMeHome+0xe4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <CenLocFollowMeHome+0xfc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d908      	bls.n	80014a6 <CenLocFollowMeHome+0xb6>
	{

		CenLoc_FollowMeHomeState = STD_LOW;
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <CenLocFollowMeHome+0x100>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
		Timer5ChangeState = 2;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <CenLocFollowMeHome+0xf8>)
 800149c:	2202      	movs	r2, #2
 800149e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop(&htim5);
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <CenLocFollowMeHome+0xe4>)
 80014a2:	f009 fc71 	bl	800ad88 <HAL_TIM_Base_Stop>

	}

	ExtLightsFrontFogLight(CenLoc_FollowMeHomeState);
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <CenLocFollowMeHome+0x100>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fcce 	bl	8001e4c <ExtLightsFrontFogLight>
	ExtLightsDayTimeRunningLight(CenLoc_FollowMeHomeState);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <CenLocFollowMeHome+0x100>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fcb7 	bl	8001e28 <ExtLightsDayTimeRunningLight>
	ExtLightsLowBeam(CenLoc_FollowMeHomeState);
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <CenLocFollowMeHome+0x100>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fc8e 	bl	8001de0 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(CenLoc_FollowMeHomeState);
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <CenLocFollowMeHome+0x100>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fcf5 	bl	8001eb8 <ExtLightsRearPositionLight>

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000069c 	.word	0x2000069c
 80014d8:	200000a8 	.word	0x200000a8
 80014dc:	20000099 	.word	0x20000099
 80014e0:	20000098 	.word	0x20000098
 80014e4:	2000009e 	.word	0x2000009e
 80014e8:	20000000 	.word	0x20000000
 80014ec:	0001869f 	.word	0x0001869f
 80014f0:	2000009a 	.word	0x2000009a

080014f4 <CenLocBlinkSignals>:

void CenLocBlinkSignals()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0

	ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <CenLocBlinkSignals+0x1c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fcb7 	bl	8001e70 <ExtLightsTurnSignalLeft>
	ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8001502:	4b03      	ldr	r3, [pc, #12]	; (8001510 <CenLocBlinkSignals+0x1c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fcc4 	bl	8001e94 <ExtLightsTurnSignalRight>

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000009b 	.word	0x2000009b

08001514 <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

	uint8 status = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 800151e:	4b96      	ldr	r3, [pc, #600]	; (8001778 <CenLocLockUnlockStates+0x264>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	f040 8094 	bne.w	8001650 <CenLocLockUnlockStates+0x13c>
 8001528:	4b94      	ldr	r3, [pc, #592]	; (800177c <CenLocLockUnlockStates+0x268>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 808f 	bne.w	8001650 <CenLocLockUnlockStates+0x13c>
	{

		HAL_TIM_Base_Stop(&htim3);
 8001532:	4893      	ldr	r0, [pc, #588]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 8001534:	f009 fc28 	bl	800ad88 <HAL_TIM_Base_Stop>
		CenLocToggleDoorLED(CenLoc_CurrentState);
 8001538:	4b8f      	ldr	r3, [pc, #572]	; (8001778 <CenLocLockUnlockStates+0x264>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff45 	bl	80013cc <CenLocToggleDoorLED>
		SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8001542:	4b8d      	ldr	r3, [pc, #564]	; (8001778 <CenLocLockUnlockStates+0x264>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf0c      	ite	eq
 800154a:	2301      	moveq	r3, #1
 800154c:	2300      	movne	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fa17 	bl	8002984 <SecAlmToggleAlarmLed>
		CenLocFollowMeHome();
 8001556:	f7ff ff4b 	bl	80013f0 <CenLocFollowMeHome>

		if(CenLoc_LockCounter < 4)
 800155a:	4b8a      	ldr	r3, [pc, #552]	; (8001784 <CenLocLockUnlockStates+0x270>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d86c      	bhi.n	800163c <CenLocLockUnlockStates+0x128>
		{

			HAL_TIM_Base_Start(&htim2);
 8001562:	4889      	ldr	r0, [pc, #548]	; (8001788 <CenLocLockUnlockStates+0x274>)
 8001564:	f009 fb86 	bl	800ac74 <HAL_TIM_Base_Start>
			CenLoc_Timer2Value = __HAL_TIM_GET_COUNTER(&htim2);
 8001568:	4b87      	ldr	r3, [pc, #540]	; (8001788 <CenLocLockUnlockStates+0x274>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4a87      	ldr	r2, [pc, #540]	; (800178c <CenLocLockUnlockStates+0x278>)
 8001570:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <CenLocLockUnlockStates+0x274>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800157c:	4293      	cmp	r3, r2
 800157e:	d80a      	bhi.n	8001596 <CenLocLockUnlockStates+0x82>
			{

				CenLoc_BlinkState = STD_HIGH;
 8001580:	4b83      	ldr	r3, [pc, #524]	; (8001790 <CenLocLockUnlockStates+0x27c>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8001586:	4b82      	ldr	r3, [pc, #520]	; (8001790 <CenLocLockUnlockStates+0x27c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f93e 	bl	800180c <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8001590:	f7ff ffb0 	bl	80014f4 <CenLocBlinkSignals>
		if(CenLoc_LockCounter < 4)
 8001594:	e12b      	b.n	80017ee <CenLocLockUnlockStates+0x2da>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001596:	4b7c      	ldr	r3, [pc, #496]	; (8001788 <CenLocLockUnlockStates+0x274>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d911      	bls.n	80015c8 <CenLocLockUnlockStates+0xb4>
 80015a4:	4b78      	ldr	r3, [pc, #480]	; (8001788 <CenLocLockUnlockStates+0x274>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f241 3287 	movw	r2, #4999	; 0x1387
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d80a      	bhi.n	80015c8 <CenLocLockUnlockStates+0xb4>
			{

				CenLoc_BlinkState = STD_LOW;
 80015b2:	4b77      	ldr	r3, [pc, #476]	; (8001790 <CenLocLockUnlockStates+0x27c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 80015b8:	4b75      	ldr	r3, [pc, #468]	; (8001790 <CenLocLockUnlockStates+0x27c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 f925 	bl	800180c <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 80015c2:	f7ff ff97 	bl	80014f4 <CenLocBlinkSignals>
 80015c6:	e042      	b.n	800164e <CenLocLockUnlockStates+0x13a>

			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80015c8:	4b6f      	ldr	r3, [pc, #444]	; (8001788 <CenLocLockUnlockStates+0x274>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d911      	bls.n	80015fa <CenLocLockUnlockStates+0xe6>
 80015d6:	4b6c      	ldr	r3, [pc, #432]	; (8001788 <CenLocLockUnlockStates+0x274>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d80a      	bhi.n	80015fa <CenLocLockUnlockStates+0xe6>
			{

				CenLoc_BlinkState = STD_HIGH;
 80015e4:	4b6a      	ldr	r3, [pc, #424]	; (8001790 <CenLocLockUnlockStates+0x27c>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 80015ea:	4b69      	ldr	r3, [pc, #420]	; (8001790 <CenLocLockUnlockStates+0x27c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f90c 	bl	800180c <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 80015f4:	f7ff ff7e 	bl	80014f4 <CenLocBlinkSignals>
 80015f8:	e029      	b.n	800164e <CenLocLockUnlockStates+0x13a>

			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80015fa:	4b63      	ldr	r3, [pc, #396]	; (8001788 <CenLocLockUnlockStates+0x274>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001604:	4293      	cmp	r3, r2
 8001606:	f240 80f2 	bls.w	80017ee <CenLocLockUnlockStates+0x2da>
 800160a:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <CenLocLockUnlockStates+0x274>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	f242 720f 	movw	r2, #9999	; 0x270f
 8001614:	4293      	cmp	r3, r2
 8001616:	f200 80ea 	bhi.w	80017ee <CenLocLockUnlockStates+0x2da>
			{

				CenLoc_BlinkState = STD_LOW;
 800161a:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <CenLocLockUnlockStates+0x27c>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8001620:	4b5b      	ldr	r3, [pc, #364]	; (8001790 <CenLocLockUnlockStates+0x27c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f8f1 	bl	800180c <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 800162a:	f7ff ff63 	bl	80014f4 <CenLocBlinkSignals>
				CenLoc_LockCounter = CenLoc_LockCounter + 1;
 800162e:	4b55      	ldr	r3, [pc, #340]	; (8001784 <CenLocLockUnlockStates+0x270>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <CenLocLockUnlockStates+0x270>)
 8001638:	701a      	strb	r2, [r3, #0]
		if(CenLoc_LockCounter < 4)
 800163a:	e0d8      	b.n	80017ee <CenLocLockUnlockStates+0x2da>

				/* do nothing */

			}
		}
		else if(CenLoc_LockCounter >= 4)
 800163c:	4b51      	ldr	r3, [pc, #324]	; (8001784 <CenLocLockUnlockStates+0x270>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b03      	cmp	r3, #3
 8001642:	f240 80d4 	bls.w	80017ee <CenLocLockUnlockStates+0x2da>
		{

			HAL_TIM_Base_Stop(&htim2);
 8001646:	4850      	ldr	r0, [pc, #320]	; (8001788 <CenLocLockUnlockStates+0x274>)
 8001648:	f009 fb9e 	bl	800ad88 <HAL_TIM_Base_Stop>
		if(CenLoc_LockCounter < 4)
 800164c:	e0cf      	b.n	80017ee <CenLocLockUnlockStates+0x2da>
 800164e:	e0ce      	b.n	80017ee <CenLocLockUnlockStates+0x2da>
			/* do nothing */

		}

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8001650:	4b49      	ldr	r3, [pc, #292]	; (8001778 <CenLocLockUnlockStates+0x264>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 80cd 	bne.w	80017f4 <CenLocLockUnlockStates+0x2e0>
 800165a:	4b48      	ldr	r3, [pc, #288]	; (800177c <CenLocLockUnlockStates+0x268>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80c8 	bne.w	80017f4 <CenLocLockUnlockStates+0x2e0>
	{

		CenLocToggleDoorLED(CenLoc_CurrentState);
 8001664:	4b44      	ldr	r3, [pc, #272]	; (8001778 <CenLocLockUnlockStates+0x264>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff feaf 	bl	80013cc <CenLocToggleDoorLED>
		HAL_TIM_Base_Start(&htim3);
 800166e:	4844      	ldr	r0, [pc, #272]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 8001670:	f009 fb00 	bl	800ac74 <HAL_TIM_Base_Start>
		CenLoc_Timer3Value = __HAL_TIM_GET_COUNTER(&htim3);
 8001674:	4b42      	ldr	r3, [pc, #264]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	4a46      	ldr	r2, [pc, #280]	; (8001794 <CenLocLockUnlockStates+0x280>)
 800167c:	6013      	str	r3, [r2, #0]
		CenLocFollowMeHome();
 800167e:	f7ff feb7 	bl	80013f0 <CenLocFollowMeHome>

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 8001682:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f649 4240 	movw	r2, #40000	; 0x9c40
 800168c:	4293      	cmp	r3, r2
 800168e:	d911      	bls.n	80016b4 <CenLocLockUnlockStates+0x1a0>
 8001690:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	f24a 1221 	movw	r2, #41249	; 0xa121
 800169a:	4293      	cmp	r3, r2
 800169c:	d80a      	bhi.n	80016b4 <CenLocLockUnlockStates+0x1a0>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <CenLocLockUnlockStates+0x264>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bf0c      	ite	eq
 80016a6:	2301      	moveq	r3, #1
 80016a8:	2300      	movne	r3, #0
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 f969 	bl	8002984 <SecAlmToggleAlarmLed>
 80016b2:	e03f      	b.n	8001734 <CenLocLockUnlockStates+0x220>

		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f24a 1222 	movw	r2, #41250	; 0xa122
 80016be:	4293      	cmp	r3, r2
 80016c0:	d90c      	bls.n	80016dc <CenLocLockUnlockStates+0x1c8>
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	f24a 6203 	movw	r2, #42499	; 0xa603
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d805      	bhi.n	80016dc <CenLocLockUnlockStates+0x1c8>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <CenLocLockUnlockStates+0x264>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 f955 	bl	8002984 <SecAlmToggleAlarmLed>
 80016da:	e02b      	b.n	8001734 <CenLocLockUnlockStates+0x220>

		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	f24a 6204 	movw	r2, #42500	; 0xa604
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d911      	bls.n	800170e <CenLocLockUnlockStates+0x1fa>
 80016ea:	4b25      	ldr	r3, [pc, #148]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d80a      	bhi.n	800170e <CenLocLockUnlockStates+0x1fa>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <CenLocLockUnlockStates+0x264>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f001 f93c 	bl	8002984 <SecAlmToggleAlarmLed>
 800170c:	e012      	b.n	8001734 <CenLocLockUnlockStates+0x220>

		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 8001718:	4293      	cmp	r3, r2
 800171a:	d90b      	bls.n	8001734 <CenLocLockUnlockStates+0x220>
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <CenLocLockUnlockStates+0x26c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001726:	4293      	cmp	r3, r2
 8001728:	d804      	bhi.n	8001734 <CenLocLockUnlockStates+0x220>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <CenLocLockUnlockStates+0x264>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f001 f928 	bl	8002984 <SecAlmToggleAlarmLed>

			/* do nothing */

		}

		if(CenLoc_UnlockCounter < 2 && CenLoc_LockUnlockFlag == STD_HIGH)
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <CenLocLockUnlockStates+0x284>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d850      	bhi.n	80017de <CenLocLockUnlockStates+0x2ca>
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <CenLocLockUnlockStates+0x288>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d14c      	bne.n	80017de <CenLocLockUnlockStates+0x2ca>
		{

			HAL_TIM_Base_Start(&htim2);
 8001744:	4810      	ldr	r0, [pc, #64]	; (8001788 <CenLocLockUnlockStates+0x274>)
 8001746:	f009 fa95 	bl	800ac74 <HAL_TIM_Base_Start>
			CenLoc_Timer2Value = __HAL_TIM_GET_COUNTER(&htim2);
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <CenLocLockUnlockStates+0x274>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <CenLocLockUnlockStates+0x278>)
 8001752:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <CenLocLockUnlockStates+0x274>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800175e:	4293      	cmp	r3, r2
 8001760:	d81e      	bhi.n	80017a0 <CenLocLockUnlockStates+0x28c>
			{

				CenLoc_BlinkState = STD_HIGH;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <CenLocLockUnlockStates+0x27c>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <CenLocLockUnlockStates+0x27c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f84d 	bl	800180c <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8001772:	f7ff febf 	bl	80014f4 <CenLocBlinkSignals>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8001776:	e03c      	b.n	80017f2 <CenLocLockUnlockStates+0x2de>
 8001778:	20000095 	.word	0x20000095
 800177c:	20000106 	.word	0x20000106
 8001780:	20000534 	.word	0x20000534
 8001784:	2000009c 	.word	0x2000009c
 8001788:	20000480 	.word	0x20000480
 800178c:	200000a0 	.word	0x200000a0
 8001790:	2000009b 	.word	0x2000009b
 8001794:	200000a4 	.word	0x200000a4
 8001798:	2000009d 	.word	0x2000009d
 800179c:	20000097 	.word	0x20000097

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <CenLocLockUnlockStates+0x2ec>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d921      	bls.n	80017f2 <CenLocLockUnlockStates+0x2de>
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <CenLocLockUnlockStates+0x2ec>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f241 3287 	movw	r2, #4999	; 0x1387
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d81a      	bhi.n	80017f2 <CenLocLockUnlockStates+0x2de>
			{

				CenLoc_BlinkState = STD_LOW;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <CenLocLockUnlockStates+0x2f0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <CenLocLockUnlockStates+0x2f0>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f820 	bl	800180c <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 80017cc:	f7ff fe92 	bl	80014f4 <CenLocBlinkSignals>
				CenLoc_UnlockCounter = CenLoc_UnlockCounter + 1;
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <CenLocLockUnlockStates+0x2f4>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <CenLocLockUnlockStates+0x2f4>)
 80017da:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 80017dc:	e009      	b.n	80017f2 <CenLocLockUnlockStates+0x2de>
				/* do nothing */

			}

		}
		else if(CenLoc_UnlockCounter >= 2)
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <CenLocLockUnlockStates+0x2f4>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d906      	bls.n	80017f4 <CenLocLockUnlockStates+0x2e0>
		{

			HAL_TIM_Base_Stop(&htim2);
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <CenLocLockUnlockStates+0x2ec>)
 80017e8:	f009 face 	bl	800ad88 <HAL_TIM_Base_Stop>
 80017ec:	e002      	b.n	80017f4 <CenLocLockUnlockStates+0x2e0>
		if(CenLoc_LockCounter < 4)
 80017ee:	bf00      	nop
 80017f0:	e000      	b.n	80017f4 <CenLocLockUnlockStates+0x2e0>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 80017f2:	bf00      	nop

		/* do nothing */

	}

	return status;
 80017f4:	79fb      	ldrb	r3, [r7, #7]

}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000480 	.word	0x20000480
 8001804:	2000009b 	.word	0x2000009b
 8001808:	2000009d 	.word	0x2000009d

0800180c <CenLocToggleBuzzer>:

void CenLocToggleBuzzer(uint8 PinState)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	461a      	mov	r2, r3
 800181a:	2110      	movs	r1, #16
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <CenLocToggleBuzzer+0x20>)
 800181e:	f004 feb9 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40020800 	.word	0x40020800

08001830 <CenLocMainFunction>:

void CenLocMainFunction()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 8001834:	f7ff fdae 	bl	8001394 <CenLocRxBtcState>
	CenLocSecAlmStateToOff();
 8001838:	f7ff fd9a 	bl	8001370 <CenLocSecAlmStateToOff>
	CenLocState();
 800183c:	f7ff fd5c 	bl	80012f8 <CenLocState>
	CenLocLockUnlockStates();
 8001840:	f7ff fe68 	bl	8001514 <CenLocLockUnlockStates>

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <ExtLightsMainFunction>:
void ExtLightsLightState();
StdReturnType ExtLightsInit();
uint32 ExtLightsLightReadSensorValue();

void ExtLightsMainFunction()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

	ExtLightsRxBtcState();
 800184c:	f000 f9f8 	bl	8001c40 <ExtLightsRxBtcState>
	ExtLightsLightState();
 8001850:	f000 f802 	bl	8001858 <ExtLightsLightState>

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <ExtLightsLightState>:
	return E_OK;

}

void ExtLightsLightState()
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0

	uint8 lightSensorState = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	71fb      	strb	r3, [r7, #7]

	ExtLightsHighBeam(ExtLights_HighBeam_CurrentState);
 8001862:	4ba0      	ldr	r3, [pc, #640]	; (8001ae4 <ExtLightsLightState+0x28c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 facc 	bl	8001e04 <ExtLightsHighBeam>
	ExtLightsHighBeam(ExtLights_FlashHighBeam_CurrentState);
 800186c:	4b9e      	ldr	r3, [pc, #632]	; (8001ae8 <ExtLightsLightState+0x290>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fac7 	bl	8001e04 <ExtLightsHighBeam>
	ExtLightsFrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8001876:	4b9d      	ldr	r3, [pc, #628]	; (8001aec <ExtLightsLightState+0x294>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fae6 	bl	8001e4c <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(ExtLights_RearFogLight_CurrentState);
 8001880:	4b9b      	ldr	r3, [pc, #620]	; (8001af0 <ExtLightsLightState+0x298>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fb29 	bl	8001edc <ExtLightsRearFogLight>
	ExtLightsReverseLight(ExtLights_ReverseLight_CurrentState);
 800188a:	4b9a      	ldr	r3, [pc, #616]	; (8001af4 <ExtLightsLightState+0x29c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fb36 	bl	8001f00 <ExtLightsReverseLight>

	if(Btc_ReverseLight == STD_HIGH)
 8001894:	4b98      	ldr	r3, [pc, #608]	; (8001af8 <ExtLightsLightState+0x2a0>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d104      	bne.n	80018a6 <ExtLightsLightState+0x4e>
	{

		ExtLights_ReverseLight_CurrentState = Btc_ReverseLight;
 800189c:	4b96      	ldr	r3, [pc, #600]	; (8001af8 <ExtLightsLightState+0x2a0>)
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	4b94      	ldr	r3, [pc, #592]	; (8001af4 <ExtLightsLightState+0x29c>)
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	e007      	b.n	80018b6 <ExtLightsLightState+0x5e>

	}
	else if(Btc_ReverseLight == STD_HIGH)
 80018a6:	4b94      	ldr	r3, [pc, #592]	; (8001af8 <ExtLightsLightState+0x2a0>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d103      	bne.n	80018b6 <ExtLightsLightState+0x5e>
	{

		ExtLights_ReverseLight_CurrentState = Btc_ReverseLight;
 80018ae:	4b92      	ldr	r3, [pc, #584]	; (8001af8 <ExtLightsLightState+0x2a0>)
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	4b90      	ldr	r3, [pc, #576]	; (8001af4 <ExtLightsLightState+0x29c>)
 80018b4:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 80018b6:	4b91      	ldr	r3, [pc, #580]	; (8001afc <ExtLightsLightState+0x2a4>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d10c      	bne.n	80018d8 <ExtLightsLightState+0x80>
	{

		ExtLightsLowBeam(STD_LOW);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 fa8e 	bl	8001de0 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_LOW);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f000 faaf 	bl	8001e28 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_LOW);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 faf4 	bl	8001eb8 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_LOW);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 fb27 	bl	8001f24 <ExtLightsLicensePlateLight>
 80018d6:	e048      	b.n	800196a <ExtLightsLightState+0x112>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 80018d8:	4b88      	ldr	r3, [pc, #544]	; (8001afc <ExtLightsLightState+0x2a4>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b65      	cmp	r3, #101	; 0x65
 80018de:	d123      	bne.n	8001928 <ExtLightsLightState+0xd0>
	{

		lightSensorState = ExtLightsLightReadSensorValue();
 80018e0:	f000 fa6c 	bl	8001dbc <ExtLightsLightReadSensorValue>
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]

		if(lightSensorState < EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b95      	cmp	r3, #149	; 0x95
 80018ec:	d80c      	bhi.n	8001908 <ExtLightsLightState+0xb0>
		{

			ExtLightsLowBeam(STD_HIGH);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f000 fa76 	bl	8001de0 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f000 fa97 	bl	8001e28 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f000 fadc 	bl	8001eb8 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 8001900:	2001      	movs	r0, #1
 8001902:	f000 fb0f 	bl	8001f24 <ExtLightsLicensePlateLight>
 8001906:	e030      	b.n	800196a <ExtLightsLightState+0x112>

		}
		else if(lightSensorState > EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b96      	cmp	r3, #150	; 0x96
 800190c:	d92d      	bls.n	800196a <ExtLightsLightState+0x112>
		{

			ExtLightsLowBeam(STD_LOW);
 800190e:	2000      	movs	r0, #0
 8001910:	f000 fa66 	bl	8001de0 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 8001914:	2001      	movs	r0, #1
 8001916:	f000 fa87 	bl	8001e28 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_LOW);
 800191a:	2000      	movs	r0, #0
 800191c:	f000 facc 	bl	8001eb8 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_LOW);
 8001920:	2000      	movs	r0, #0
 8001922:	f000 faff 	bl	8001f24 <ExtLightsLicensePlateLight>
 8001926:	e020      	b.n	800196a <ExtLightsLightState+0x112>

		}

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 8001928:	4b74      	ldr	r3, [pc, #464]	; (8001afc <ExtLightsLightState+0x2a4>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b66      	cmp	r3, #102	; 0x66
 800192e:	d10c      	bne.n	800194a <ExtLightsLightState+0xf2>
	{

		ExtLightsLowBeam(STD_LOW);
 8001930:	2000      	movs	r0, #0
 8001932:	f000 fa55 	bl	8001de0 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 8001936:	2001      	movs	r0, #1
 8001938:	f000 fa76 	bl	8001e28 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 800193c:	2001      	movs	r0, #1
 800193e:	f000 fabb 	bl	8001eb8 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 8001942:	2001      	movs	r0, #1
 8001944:	f000 faee 	bl	8001f24 <ExtLightsLicensePlateLight>
 8001948:	e00f      	b.n	800196a <ExtLightsLightState+0x112>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 800194a:	4b6c      	ldr	r3, [pc, #432]	; (8001afc <ExtLightsLightState+0x2a4>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b67      	cmp	r3, #103	; 0x67
 8001950:	d10b      	bne.n	800196a <ExtLightsLightState+0x112>
	{

		ExtLightsLowBeam(STD_HIGH);
 8001952:	2001      	movs	r0, #1
 8001954:	f000 fa44 	bl	8001de0 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 8001958:	2001      	movs	r0, #1
 800195a:	f000 fa65 	bl	8001e28 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 800195e:	2001      	movs	r0, #1
 8001960:	f000 faaa 	bl	8001eb8 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 8001964:	2001      	movs	r0, #1
 8001966:	f000 fadd 	bl	8001f24 <ExtLightsLicensePlateLight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 800196a:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <ExtLightsLightState+0x2a8>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d155      	bne.n	8001a1e <ExtLightsLightState+0x1c6>
	{

		HAL_TIM_Base_Start(&htim2);
 8001972:	4864      	ldr	r0, [pc, #400]	; (8001b04 <ExtLightsLightState+0x2ac>)
 8001974:	f009 f97e 	bl	800ac74 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8001978:	4b62      	ldr	r3, [pc, #392]	; (8001b04 <ExtLightsLightState+0x2ac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001982:	4293      	cmp	r3, r2
 8001984:	d805      	bhi.n	8001992 <ExtLightsLightState+0x13a>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001986:	4b5e      	ldr	r3, [pc, #376]	; (8001b00 <ExtLightsLightState+0x2a8>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fa70 	bl	8001e70 <ExtLightsTurnSignalLeft>
 8001990:	e04e      	b.n	8001a30 <ExtLightsLightState+0x1d8>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001992:	4b5c      	ldr	r3, [pc, #368]	; (8001b04 <ExtLightsLightState+0x2ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800199c:	4293      	cmp	r3, r2
 800199e:	d911      	bls.n	80019c4 <ExtLightsLightState+0x16c>
 80019a0:	4b58      	ldr	r3, [pc, #352]	; (8001b04 <ExtLightsLightState+0x2ac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f241 3287 	movw	r2, #4999	; 0x1387
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d80a      	bhi.n	80019c4 <ExtLightsLightState+0x16c>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 80019ae:	4b54      	ldr	r3, [pc, #336]	; (8001b00 <ExtLightsLightState+0x2a8>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fa57 	bl	8001e70 <ExtLightsTurnSignalLeft>
 80019c2:	e035      	b.n	8001a30 <ExtLightsLightState+0x1d8>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <ExtLightsLightState+0x2ac>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d90c      	bls.n	80019ec <ExtLightsLightState+0x194>
 80019d2:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <ExtLightsLightState+0x2ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80019dc:	4293      	cmp	r3, r2
 80019de:	d805      	bhi.n	80019ec <ExtLightsLightState+0x194>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <ExtLightsLightState+0x2a8>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fa43 	bl	8001e70 <ExtLightsTurnSignalLeft>
 80019ea:	e021      	b.n	8001a30 <ExtLightsLightState+0x1d8>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80019ec:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <ExtLightsLightState+0x2ac>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d91a      	bls.n	8001a30 <ExtLightsLightState+0x1d8>
 80019fa:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <ExtLightsLightState+0x2ac>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d813      	bhi.n	8001a30 <ExtLightsLightState+0x1d8>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 8001a08:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <ExtLightsLightState+0x2a8>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fa2a 	bl	8001e70 <ExtLightsTurnSignalLeft>
 8001a1c:	e008      	b.n	8001a30 <ExtLightsLightState+0x1d8>
			/* do nothing */

		}

	}
	else if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <ExtLightsLightState+0x2a8>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d104      	bne.n	8001a30 <ExtLightsLightState+0x1d8>
	{

		ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <ExtLightsLightState+0x2a8>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 fa20 	bl	8001e70 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8001a30:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <ExtLightsLightState+0x2b0>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d169      	bne.n	8001b0c <ExtLightsLightState+0x2b4>
	{

		HAL_TIM_Base_Start(&htim2);
 8001a38:	4832      	ldr	r0, [pc, #200]	; (8001b04 <ExtLightsLightState+0x2ac>)
 8001a3a:	f009 f91b 	bl	800ac74 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <ExtLightsLightState+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d805      	bhi.n	8001a58 <ExtLightsLightState+0x200>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <ExtLightsLightState+0x2b0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fa1f 	bl	8001e94 <ExtLightsTurnSignalRight>
 8001a56:	e062      	b.n	8001b1e <ExtLightsLightState+0x2c6>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <ExtLightsLightState+0x2ac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d911      	bls.n	8001a8a <ExtLightsLightState+0x232>
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <ExtLightsLightState+0x2ac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d80a      	bhi.n	8001a8a <ExtLightsLightState+0x232>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <ExtLightsLightState+0x2b0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fa06 	bl	8001e94 <ExtLightsTurnSignalRight>
 8001a88:	e049      	b.n	8001b1e <ExtLightsLightState+0x2c6>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <ExtLightsLightState+0x2ac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d90c      	bls.n	8001ab2 <ExtLightsLightState+0x25a>
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <ExtLightsLightState+0x2ac>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d805      	bhi.n	8001ab2 <ExtLightsLightState+0x25a>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <ExtLightsLightState+0x2b0>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f9f2 	bl	8001e94 <ExtLightsTurnSignalRight>
 8001ab0:	e035      	b.n	8001b1e <ExtLightsLightState+0x2c6>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <ExtLightsLightState+0x2ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d92e      	bls.n	8001b1e <ExtLightsLightState+0x2c6>
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <ExtLightsLightState+0x2ac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d827      	bhi.n	8001b1e <ExtLightsLightState+0x2c6>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <ExtLightsLightState+0x2b0>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf0c      	ite	eq
 8001ad6:	2301      	moveq	r3, #1
 8001ad8:	2300      	movne	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f9d9 	bl	8001e94 <ExtLightsTurnSignalRight>
 8001ae2:	e01c      	b.n	8001b1e <ExtLightsLightState+0x2c6>
 8001ae4:	200000b0 	.word	0x200000b0
 8001ae8:	200000ae 	.word	0x200000ae
 8001aec:	200000b1 	.word	0x200000b1
 8001af0:	200000b5 	.word	0x200000b5
 8001af4:	200000ac 	.word	0x200000ac
 8001af8:	200000bf 	.word	0x200000bf
 8001afc:	200000af 	.word	0x200000af
 8001b00:	200000b2 	.word	0x200000b2
 8001b04:	20000480 	.word	0x20000480
 8001b08:	200000b3 	.word	0x200000b3

			/* do nothing */

		}
	}
	else if(ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <ExtLightsLightState+0x3dc>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d104      	bne.n	8001b1e <ExtLightsLightState+0x2c6>
	{

		ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001b14:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <ExtLightsLightState+0x3dc>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f9bb 	bl	8001e94 <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001b1e:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d173      	bne.n	8001c0e <ExtLightsLightState+0x3b6>
	{

		HAL_TIM_Base_Start(&htim2);
 8001b26:	4845      	ldr	r0, [pc, #276]	; (8001c3c <ExtLightsLightState+0x3e4>)
 8001b28:	f009 f8a4 	bl	800ac74 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001b2c:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <ExtLightsLightState+0x3e4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d80a      	bhi.n	8001b50 <ExtLightsLightState+0x2f8>
		{

			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f9a8 	bl	8001e94 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001b44:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f991 	bl	8001e70 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

}
 8001b4e:	e06d      	b.n	8001c2c <ExtLightsLightState+0x3d4>
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001b50:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <ExtLightsLightState+0x3e4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d91b      	bls.n	8001b96 <ExtLightsLightState+0x33e>
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <ExtLightsLightState+0x3e4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	f241 3287 	movw	r2, #4999	; 0x1387
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d814      	bhi.n	8001b96 <ExtLightsLightState+0x33e>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f98a 	bl	8001e94 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f96e 	bl	8001e70 <ExtLightsTurnSignalLeft>
 8001b94:	e04a      	b.n	8001c2c <ExtLightsLightState+0x3d4>
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <ExtLightsLightState+0x3e4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d911      	bls.n	8001bc8 <ExtLightsLightState+0x370>
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <ExtLightsLightState+0x3e4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d80a      	bhi.n	8001bc8 <ExtLightsLightState+0x370>
			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f96c 	bl	8001e94 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f955 	bl	8001e70 <ExtLightsTurnSignalLeft>
 8001bc6:	e031      	b.n	8001c2c <ExtLightsLightState+0x3d4>
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <ExtLightsLightState+0x3e4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d92a      	bls.n	8001c2c <ExtLightsLightState+0x3d4>
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <ExtLightsLightState+0x3e4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d823      	bhi.n	8001c2c <ExtLightsLightState+0x3d4>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f94e 	bl	8001e94 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f932 	bl	8001e70 <ExtLightsTurnSignalLeft>
}
 8001c0c:	e00e      	b.n	8001c2c <ExtLightsLightState+0x3d4>
	else if(ExtLights_HazardLight_CurrentState == STD_LOW)
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10a      	bne.n	8001c2c <ExtLightsLightState+0x3d4>
		ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f93a 	bl	8001e94 <ExtLightsTurnSignalRight>
		ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <ExtLightsLightState+0x3e0>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f923 	bl	8001e70 <ExtLightsTurnSignalLeft>
}
 8001c2a:	e7ff      	b.n	8001c2c <ExtLightsLightState+0x3d4>
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200000b3 	.word	0x200000b3
 8001c38:	200000b4 	.word	0x200000b4
 8001c3c:	20000480 	.word	0x20000480

08001c40 <ExtLightsRxBtcState>:

void ExtLightsRxBtcState()
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

	if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 8001c44:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <ExtLightsRxBtcState+0x13c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b64      	cmp	r3, #100	; 0x64
 8001c4a:	d103      	bne.n	8001c54 <ExtLightsRxBtcState+0x14>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEZERO;
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <ExtLightsRxBtcState+0x140>)
 8001c4e:	2264      	movs	r2, #100	; 0x64
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	e016      	b.n	8001c82 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 8001c54:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <ExtLightsRxBtcState+0x13c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b65      	cmp	r3, #101	; 0x65
 8001c5a:	d103      	bne.n	8001c64 <ExtLightsRxBtcState+0x24>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEONE;
 8001c5c:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <ExtLightsRxBtcState+0x140>)
 8001c5e:	2265      	movs	r2, #101	; 0x65
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e00e      	b.n	8001c82 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 8001c64:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <ExtLightsRxBtcState+0x13c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b66      	cmp	r3, #102	; 0x66
 8001c6a:	d103      	bne.n	8001c74 <ExtLightsRxBtcState+0x34>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETWO;
 8001c6c:	4b44      	ldr	r3, [pc, #272]	; (8001d80 <ExtLightsRxBtcState+0x140>)
 8001c6e:	2266      	movs	r2, #102	; 0x66
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	e006      	b.n	8001c82 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 8001c74:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <ExtLightsRxBtcState+0x13c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b67      	cmp	r3, #103	; 0x67
 8001c7a:	d102      	bne.n	8001c82 <ExtLightsRxBtcState+0x42>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETHREE;
 8001c7c:	4b40      	ldr	r3, [pc, #256]	; (8001d80 <ExtLightsRxBtcState+0x140>)
 8001c7e:	2267      	movs	r2, #103	; 0x67
 8001c80:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HighBeam == STD_HIGH)
 8001c82:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <ExtLightsRxBtcState+0x144>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d104      	bne.n	8001c94 <ExtLightsRxBtcState+0x54>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <ExtLightsRxBtcState+0x144>)
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <ExtLightsRxBtcState+0x148>)
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e007      	b.n	8001ca4 <ExtLightsRxBtcState+0x64>

	}
	else if(Btc_HighBeam == STD_LOW)
 8001c94:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <ExtLightsRxBtcState+0x144>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d103      	bne.n	8001ca4 <ExtLightsRxBtcState+0x64>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 8001c9c:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <ExtLightsRxBtcState+0x144>)
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <ExtLightsRxBtcState+0x148>)
 8001ca2:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FrontFogLight == STD_HIGH)
 8001ca4:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <ExtLightsRxBtcState+0x14c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d104      	bne.n	8001cb6 <ExtLightsRxBtcState+0x76>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 8001cac:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <ExtLightsRxBtcState+0x14c>)
 8001cae:	781a      	ldrb	r2, [r3, #0]
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <ExtLightsRxBtcState+0x150>)
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e007      	b.n	8001cc6 <ExtLightsRxBtcState+0x86>

	}
	else if(Btc_FrontFogLight == STD_LOW)
 8001cb6:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <ExtLightsRxBtcState+0x14c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <ExtLightsRxBtcState+0x86>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 8001cbe:	4b33      	ldr	r3, [pc, #204]	; (8001d8c <ExtLightsRxBtcState+0x14c>)
 8001cc0:	781a      	ldrb	r2, [r3, #0]
 8001cc2:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <ExtLightsRxBtcState+0x150>)
 8001cc4:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_RearFogLight == STD_HIGH)
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <ExtLightsRxBtcState+0x154>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d104      	bne.n	8001cd8 <ExtLightsRxBtcState+0x98>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001cce:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <ExtLightsRxBtcState+0x154>)
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <ExtLightsRxBtcState+0x158>)
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	e007      	b.n	8001ce8 <ExtLightsRxBtcState+0xa8>

	}
	else if(Btc_RearFogLight == STD_LOW)
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <ExtLightsRxBtcState+0x154>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d103      	bne.n	8001ce8 <ExtLightsRxBtcState+0xa8>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <ExtLightsRxBtcState+0x154>)
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <ExtLightsRxBtcState+0x158>)
 8001ce6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_BrakeLight == STD_HIGH)
 8001ce8:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <ExtLightsRxBtcState+0x15c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d104      	bne.n	8001cfa <ExtLightsRxBtcState+0xba>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <ExtLightsRxBtcState+0x15c>)
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <ExtLightsRxBtcState+0x160>)
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e007      	b.n	8001d0a <ExtLightsRxBtcState+0xca>

	}
	else if(Btc_BrakeLight == STD_LOW)
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <ExtLightsRxBtcState+0x15c>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d103      	bne.n	8001d0a <ExtLightsRxBtcState+0xca>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <ExtLightsRxBtcState+0x15c>)
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <ExtLightsRxBtcState+0x160>)
 8001d08:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalLeft == STD_HIGH)
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <ExtLightsRxBtcState+0x164>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d104      	bne.n	8001d1c <ExtLightsRxBtcState+0xdc>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <ExtLightsRxBtcState+0x164>)
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <ExtLightsRxBtcState+0x168>)
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	e007      	b.n	8001d2c <ExtLightsRxBtcState+0xec>

	}
	else if(Btc_TurnSignalLeft == STD_LOW)
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <ExtLightsRxBtcState+0x164>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <ExtLightsRxBtcState+0xec>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <ExtLightsRxBtcState+0x164>)
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <ExtLightsRxBtcState+0x168>)
 8001d2a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalRight == STD_HIGH)
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <ExtLightsRxBtcState+0x16c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d104      	bne.n	8001d3e <ExtLightsRxBtcState+0xfe>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <ExtLightsRxBtcState+0x16c>)
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <ExtLightsRxBtcState+0x170>)
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	e007      	b.n	8001d4e <ExtLightsRxBtcState+0x10e>

	}
	else if(Btc_TurnSignalRight == STD_LOW)
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <ExtLightsRxBtcState+0x16c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <ExtLightsRxBtcState+0x10e>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <ExtLightsRxBtcState+0x16c>)
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <ExtLightsRxBtcState+0x170>)
 8001d4c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HazardLight == STD_HIGH)
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <ExtLightsRxBtcState+0x174>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d104      	bne.n	8001d60 <ExtLightsRxBtcState+0x120>
	{

		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <ExtLightsRxBtcState+0x174>)
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <ExtLightsRxBtcState+0x178>)
 8001d5c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001d5e:	e007      	b.n	8001d70 <ExtLightsRxBtcState+0x130>
	else if(Btc_HazardLight == STD_LOW)
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <ExtLightsRxBtcState+0x174>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d103      	bne.n	8001d70 <ExtLightsRxBtcState+0x130>
		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <ExtLightsRxBtcState+0x174>)
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <ExtLightsRxBtcState+0x178>)
 8001d6e:	701a      	strb	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	200000b6 	.word	0x200000b6
 8001d80:	200000af 	.word	0x200000af
 8001d84:	200000b7 	.word	0x200000b7
 8001d88:	200000b0 	.word	0x200000b0
 8001d8c:	200000b9 	.word	0x200000b9
 8001d90:	200000b1 	.word	0x200000b1
 8001d94:	200000be 	.word	0x200000be
 8001d98:	200000b5 	.word	0x200000b5
 8001d9c:	200000bd 	.word	0x200000bd
 8001da0:	200000ad 	.word	0x200000ad
 8001da4:	200000ba 	.word	0x200000ba
 8001da8:	200000b2 	.word	0x200000b2
 8001dac:	200000bb 	.word	0x200000bb
 8001db0:	200000b3 	.word	0x200000b3
 8001db4:	200000bc 	.word	0x200000bc
 8001db8:	200000b4 	.word	0x200000b4

08001dbc <ExtLightsLightReadSensorValue>:

uint32 ExtLightsLightReadSensorValue()
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0

	uint8 sensorValue = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	71fb      	strb	r3, [r7, #7]

	sensorValue = ADC_BUFFER[2];
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <ExtLightsLightReadSensorValue+0x20>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	71fb      	strb	r3, [r7, #7]

	return sensorValue;
 8001dcc:	79fb      	ldrb	r3, [r7, #7]

}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	200000dc 	.word	0x200000dc

08001de0 <ExtLightsLowBeam>:

void ExtLightsLowBeam(uint8 PinState)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	461a      	mov	r2, r3
 8001dee:	2110      	movs	r1, #16
 8001df0:	4803      	ldr	r0, [pc, #12]	; (8001e00 <ExtLightsLowBeam+0x20>)
 8001df2:	f004 fbcf 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40020000 	.word	0x40020000

08001e04 <ExtLightsHighBeam>:

void ExtLightsHighBeam(uint8 PinState)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	461a      	mov	r2, r3
 8001e12:	2101      	movs	r1, #1
 8001e14:	4803      	ldr	r0, [pc, #12]	; (8001e24 <ExtLightsHighBeam+0x20>)
 8001e16:	f004 fbbd 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40020400 	.word	0x40020400

08001e28 <ExtLightsDayTimeRunningLight>:

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	461a      	mov	r2, r3
 8001e36:	2102      	movs	r1, #2
 8001e38:	4803      	ldr	r0, [pc, #12]	; (8001e48 <ExtLightsDayTimeRunningLight+0x20>)
 8001e3a:	f004 fbab 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40020000 	.word	0x40020000

08001e4c <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	4803      	ldr	r0, [pc, #12]	; (8001e6c <ExtLightsFrontFogLight+0x20>)
 8001e5e:	f004 fb99 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40020800 	.word	0x40020800

08001e70 <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e82:	4803      	ldr	r0, [pc, #12]	; (8001e90 <ExtLightsTurnSignalLeft+0x20>)
 8001e84:	f004 fb86 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40020800 	.word	0x40020800

08001e94 <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea6:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <ExtLightsTurnSignalRight+0x20>)
 8001ea8:	f004 fb74 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40020800 	.word	0x40020800

08001eb8 <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eca:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <ExtLightsRearPositionLight+0x20>)
 8001ecc:	f004 fb62 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40020800 	.word	0x40020800

08001edc <ExtLightsRearFogLight>:

void ExtLightsRearFogLight(uint8 PinState)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eee:	4803      	ldr	r0, [pc, #12]	; (8001efc <ExtLightsRearFogLight+0x20>)
 8001ef0:	f004 fb50 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40020800 	.word	0x40020800

08001f00 <ExtLightsReverseLight>:
	HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);

}

void ExtLightsReverseLight(uint8 PinState)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f12:	4803      	ldr	r0, [pc, #12]	; (8001f20 <ExtLightsReverseLight+0x20>)
 8001f14:	f004 fb3e 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40020800 	.word	0x40020800

08001f24 <ExtLightsLicensePlateLight>:

void ExtLightsLicensePlateLight(uint8 PinState)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	461a      	mov	r2, r3
 8001f32:	2101      	movs	r1, #1
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <ExtLightsLicensePlateLight+0x20>)
 8001f36:	f004 fb2d 	bl	8006594 <HAL_GPIO_WritePin>

}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40020000 	.word	0x40020000

08001f48 <HVACTemSenReturnTemperatureValue>:
//	tempStatus = HVACTemSenAdcReceivedValues();

}

float HVACTemSenReturnTemperatureValue(float TemSenVal)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	ed87 0a01 	vstr	s0, [r7, #4]

	/* redo */

	return 1;
 8001f52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f56:	ee07 3a90 	vmov	s15, r3

}
 8001f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HVACTemSenAdcReceivedValues>:

float HVACTemSenAdcReceivedValues()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0

	uint32 RxTem = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 6);
 8001f72:	2206      	movs	r2, #6
 8001f74:	490f      	ldr	r1, [pc, #60]	; (8001fb4 <HVACTemSenAdcReceivedValues+0x4c>)
 8001f76:	4810      	ldr	r0, [pc, #64]	; (8001fb8 <HVACTemSenAdcReceivedValues+0x50>)
 8001f78:	f002 fb60 	bl	800463c <HAL_ADC_Start_DMA>
	RxTem = HVACTemSenReturnTemperatureValue(ADC_BUFFER[0]);
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HVACTemSenAdcReceivedValues+0x4c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f88:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8c:	f7ff ffdc 	bl	8001f48 <HVACTemSenReturnTemperatureValue>
 8001f90:	eef0 7a40 	vmov.f32	s15, s0
 8001f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f98:	ee17 3a90 	vmov	r3, s15
 8001f9c:	607b      	str	r3, [r7, #4]

	return RxTem;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 8001fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200000dc 	.word	0x200000dc
 8001fb8:	20000118 	.word	0x20000118

08001fbc <HVACMainFunction>:


}

void HVACMainFunction()
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0

	//HVACI2cTxToLcd();
	HVAC_TemSenRxTemperature = HVACTemSenAdcReceivedValues();
 8001fc0:	f7ff ffd2 	bl	8001f68 <HVACTemSenAdcReceivedValues>
 8001fc4:	eef0 7a40 	vmov.f32	s15, s0
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <HVACMainFunction+0x1c>)
 8001fca:	edc3 7a00 	vstr	s15, [r3]
	HVACState();
 8001fce:	f000 f805 	bl	8001fdc <HVACState>

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200000d8 	.word	0x200000d8

08001fdc <HVACState>:

void HVACState()
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0

	HVAC_BackwindowDefrost_CurrentState 	= Btc_BackwindowDefrost;
 8001fe0:	4b72      	ldr	r3, [pc, #456]	; (80021ac <HVACState+0x1d0>)
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	4b72      	ldr	r3, [pc, #456]	; (80021b0 <HVACState+0x1d4>)
 8001fe6:	701a      	strb	r2, [r3, #0]
	HVAC_AC_CurrentState 					= Btc_AC;
 8001fe8:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <HVACState+0x1d8>)
 8001fea:	781a      	ldrb	r2, [r3, #0]
 8001fec:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <HVACState+0x1dc>)
 8001fee:	701a      	strb	r2, [r3, #0]
	HVAC_FanValue 							= Btc_FanValue;
 8001ff0:	4b72      	ldr	r3, [pc, #456]	; (80021bc <HVACState+0x1e0>)
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	4b72      	ldr	r3, [pc, #456]	; (80021c0 <HVACState+0x1e4>)
 8001ff6:	701a      	strb	r2, [r3, #0]
	HVAC_TemperatureValue 					= Btc_TemperatureValue;
 8001ff8:	4b72      	ldr	r3, [pc, #456]	; (80021c4 <HVACState+0x1e8>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	4b72      	ldr	r3, [pc, #456]	; (80021c8 <HVACState+0x1ec>)
 8001ffe:	701a      	strb	r2, [r3, #0]

	if(Btc_NormalMode == STD_HIGH)
 8002000:	4b72      	ldr	r3, [pc, #456]	; (80021cc <HVACState+0x1f0>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <HVACState+0x3a>
	{

		Btc_RecirculationMode = STD_LOW;
 8002008:	4b71      	ldr	r3, [pc, #452]	; (80021d0 <HVACState+0x1f4>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
		HVAC_RecirculationMode_CurrentState = STD_LOW;
 800200e:	4b71      	ldr	r3, [pc, #452]	; (80021d4 <HVACState+0x1f8>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e007      	b.n	8002026 <HVACState+0x4a>

	}
	else if(Btc_NormalMode == STD_LOW)
 8002016:	4b6d      	ldr	r3, [pc, #436]	; (80021cc <HVACState+0x1f0>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d103      	bne.n	8002026 <HVACState+0x4a>
	{

		HVAC_RecirculationMode_CurrentState = Btc_RecirculationMode;
 800201e:	4b6c      	ldr	r3, [pc, #432]	; (80021d0 <HVACState+0x1f4>)
 8002020:	781a      	ldrb	r2, [r3, #0]
 8002022:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <HVACState+0x1f8>)
 8002024:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FanValue == 0 && Btc_TemperatureValue == 0 && HVAC_FanValue == 0 && HVAC_TemperatureValue == 0)
 8002026:	4b65      	ldr	r3, [pc, #404]	; (80021bc <HVACState+0x1e0>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d119      	bne.n	8002062 <HVACState+0x86>
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HVACState+0x1e8>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HVACState+0x86>
 8002036:	4b62      	ldr	r3, [pc, #392]	; (80021c0 <HVACState+0x1e4>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d111      	bne.n	8002062 <HVACState+0x86>
 800203e:	4b62      	ldr	r3, [pc, #392]	; (80021c8 <HVACState+0x1ec>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HVACState+0x86>
	{

		Btc_FanValue 							= 1;
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HVACState+0x1e0>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
		Btc_TemperatureValue 					= 22;
 800204c:	4b5d      	ldr	r3, [pc, #372]	; (80021c4 <HVACState+0x1e8>)
 800204e:	2216      	movs	r2, #22
 8002050:	701a      	strb	r2, [r3, #0]
		HVAC_FanValue 							= Btc_FanValue;
 8002052:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <HVACState+0x1e0>)
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <HVACState+0x1e4>)
 8002058:	701a      	strb	r2, [r3, #0]
		HVAC_TemperatureValue 					= Btc_TemperatureValue;
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HVACState+0x1e8>)
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	4b5a      	ldr	r3, [pc, #360]	; (80021c8 <HVACState+0x1ec>)
 8002060:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(HVAC_FanValue == STD_LOW)
 8002062:	4b57      	ldr	r3, [pc, #348]	; (80021c0 <HVACState+0x1e4>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d103      	bne.n	8002072 <HVACState+0x96>
	{

		HVAC_CurrentState = STD_LOW;
 800206a:	4b5b      	ldr	r3, [pc, #364]	; (80021d8 <HVACState+0x1fc>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	e006      	b.n	8002080 <HVACState+0xa4>

	}
	else if(HVAC_FanValue != STD_LOW)
 8002072:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HVACState+0x1e4>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HVACState+0xa4>
	{

		HVAC_CurrentState = STD_HIGH;
 800207a:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HVACState+0x1fc>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_LegVents == STD_HIGH)
 8002080:	4b56      	ldr	r3, [pc, #344]	; (80021dc <HVACState+0x200>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HVACState+0xbc>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8002088:	4b55      	ldr	r3, [pc, #340]	; (80021e0 <HVACState+0x204>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 800208e:	4b53      	ldr	r3, [pc, #332]	; (80021dc <HVACState+0x200>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	4b54      	ldr	r3, [pc, #336]	; (80021e4 <HVACState+0x208>)
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e007      	b.n	80020a8 <HVACState+0xcc>

	}
	else if(Btc_LegVents == STD_LOW)
 8002098:	4b50      	ldr	r3, [pc, #320]	; (80021dc <HVACState+0x200>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <HVACState+0xcc>
	{

		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 80020a0:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <HVACState+0x200>)
 80020a2:	781a      	ldrb	r2, [r3, #0]
 80020a4:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <HVACState+0x208>)
 80020a6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_MidVents == STD_HIGH)
 80020a8:	4b4f      	ldr	r3, [pc, #316]	; (80021e8 <HVACState+0x20c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d107      	bne.n	80020c0 <HVACState+0xe4>
	{

		Btc_AutomaticMode 			= STD_LOW;
 80020b0:	4b4b      	ldr	r3, [pc, #300]	; (80021e0 <HVACState+0x204>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 80020b6:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HVACState+0x20c>)
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <HVACState+0x210>)
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e007      	b.n	80020d0 <HVACState+0xf4>

	}
	else if(Btc_MidVents == STD_LOW)
 80020c0:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <HVACState+0x20c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <HVACState+0xf4>
	{

		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 80020c8:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HVACState+0x20c>)
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HVACState+0x210>)
 80020ce:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldVents == STD_HIGH)
 80020d0:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HVACState+0x214>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d107      	bne.n	80020e8 <HVACState+0x10c>
	{

		Btc_AutomaticMode 					= STD_LOW;
 80020d8:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <HVACState+0x204>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 80020de:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <HVACState+0x214>)
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HVACState+0x218>)
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e007      	b.n	80020f8 <HVACState+0x11c>

	}
	else if(Btc_WindshieldVents == STD_LOW)
 80020e8:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HVACState+0x214>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <HVACState+0x11c>
	{

		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HVACState+0x214>)
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HVACState+0x218>)
 80020f6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldDefrost == STD_HIGH)
 80020f8:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <HVACState+0x21c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d110      	bne.n	8002122 <HVACState+0x146>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 8002100:	4b37      	ldr	r3, [pc, #220]	; (80021e0 <HVACState+0x204>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8002106:	4b3c      	ldr	r3, [pc, #240]	; (80021f8 <HVACState+0x21c>)
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <HVACState+0x220>)
 800210c:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 800210e:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <HVACState+0x208>)
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <HVACState+0x210>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 800211a:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <HVACState+0x218>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	e013      	b.n	800214a <HVACState+0x16e>

	}
	else if(Btc_WindshieldDefrost == STD_LOW)
 8002122:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HVACState+0x21c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10f      	bne.n	800214a <HVACState+0x16e>
	{

		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 800212a:	4b33      	ldr	r3, [pc, #204]	; (80021f8 <HVACState+0x21c>)
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HVACState+0x220>)
 8002130:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8002132:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <HVACState+0x200>)
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HVACState+0x208>)
 8002138:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 800213a:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HVACState+0x20c>)
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HVACState+0x210>)
 8002140:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HVACState+0x214>)
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HVACState+0x218>)
 8002148:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_AutomaticMode == STD_HIGH)
 800214a:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HVACState+0x204>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10f      	bne.n	8002172 <HVACState+0x196>
	{

		HVAC_AutomaticMode_CurrentState 		= STD_HIGH;
 8002152:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HVACState+0x224>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HVACState+0x220>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 800215e:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HVACState+0x218>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HVACState+0x210>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HVACState+0x208>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8002170:	e016      	b.n	80021a0 <HVACState+0x1c4>
	else if(Btc_NormalMode == STD_HIGH)
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HVACState+0x1f0>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d112      	bne.n	80021a0 <HVACState+0x1c4>
		HVAC_AutomaticMode_CurrentState 		= STD_LOW;
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HVACState+0x224>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HVACState+0x21c>)
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HVACState+0x220>)
 8002186:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HVACState+0x214>)
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HVACState+0x218>)
 800218e:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HVACState+0x20c>)
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HVACState+0x210>)
 8002196:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HVACState+0x200>)
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HVACState+0x208>)
 800219e:	701a      	strb	r2, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	200000d1 	.word	0x200000d1
 80021b0:	200000ca 	.word	0x200000ca
 80021b4:	200000d2 	.word	0x200000d2
 80021b8:	200000c7 	.word	0x200000c7
 80021bc:	200000cc 	.word	0x200000cc
 80021c0:	200000c2 	.word	0x200000c2
 80021c4:	200000cb 	.word	0x200000cb
 80021c8:	200000c1 	.word	0x200000c1
 80021cc:	200000d5 	.word	0x200000d5
 80021d0:	200000d4 	.word	0x200000d4
 80021d4:	200000c9 	.word	0x200000c9
 80021d8:	200000c0 	.word	0x200000c0
 80021dc:	200000cd 	.word	0x200000cd
 80021e0:	200000d3 	.word	0x200000d3
 80021e4:	200000c3 	.word	0x200000c3
 80021e8:	200000ce 	.word	0x200000ce
 80021ec:	200000c4 	.word	0x200000c4
 80021f0:	200000cf 	.word	0x200000cf
 80021f4:	200000c5 	.word	0x200000c5
 80021f8:	200000d0 	.word	0x200000d0
 80021fc:	200000c6 	.word	0x200000c6
 8002200:	200000c8 	.word	0x200000c8

08002204 <IntLightsRxBtcState>:
void IntLightsMainFunction();
void IntLightsToggleIntLights(uint8 PinState);
void IntLightsRxBtcState();

void IntLightsRxBtcState()
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand = BtcReceivedDataOnBluetooth;
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <IntLightsRxBtcState+0x98>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	71fb      	strb	r3, [r7, #7]

	switch(lightsStateFromBtcCommand)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	3b01      	subs	r3, #1
 8002214:	2b13      	cmp	r3, #19
 8002216:	d83b      	bhi.n	8002290 <IntLightsRxBtcState+0x8c>
 8002218:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <IntLightsRxBtcState+0x1c>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002271 	.word	0x08002271
 8002224:	08002279 	.word	0x08002279
 8002228:	08002291 	.word	0x08002291
 800222c:	08002291 	.word	0x08002291
 8002230:	08002291 	.word	0x08002291
 8002234:	08002291 	.word	0x08002291
 8002238:	08002291 	.word	0x08002291
 800223c:	08002291 	.word	0x08002291
 8002240:	08002291 	.word	0x08002291
 8002244:	08002291 	.word	0x08002291
 8002248:	08002291 	.word	0x08002291
 800224c:	08002291 	.word	0x08002291
 8002250:	08002291 	.word	0x08002291
 8002254:	08002291 	.word	0x08002291
 8002258:	08002291 	.word	0x08002291
 800225c:	08002291 	.word	0x08002291
 8002260:	08002291 	.word	0x08002291
 8002264:	08002291 	.word	0x08002291
 8002268:	08002281 	.word	0x08002281
 800226c:	08002289 	.word	0x08002289
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <IntLightsRxBtcState+0x9c>)
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]

			break;
 8002276:	e00b      	b.n	8002290 <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <IntLightsRxBtcState+0x9c>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]

			break;
 800227e:	e007      	b.n	8002290 <IntLightsRxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <IntLightsRxBtcState+0x9c>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]

			break;
 8002286:	e003      	b.n	8002290 <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <IntLightsRxBtcState+0x9c>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]

			break;
 800228e:	bf00      	nop

	}

}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	20000094 	.word	0x20000094
 80022a0:	200000f4 	.word	0x200000f4

080022a4 <IntLightsMainFunction>:

void IntLightsMainFunction()
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0

	IntLightsRxBtcState();
 80022a8:	f7ff ffac 	bl	8002204 <IntLightsRxBtcState>
	IntLightsToggleIntLights(IntLights_CurrentState);
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <IntLightsMainFunction+0x18>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f805 	bl	80022c0 <IntLightsToggleIntLights>

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200000f4 	.word	0x200000f4

080022c0 <IntLightsToggleIntLights>:
	return E_OK;

}

void IntLightsToggleIntLights(uint8 PinState)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	461a      	mov	r2, r3
 80022ce:	2104      	movs	r1, #4
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <IntLightsToggleIntLights+0x20>)
 80022d2:	f004 f95f 	bl	8006594 <HAL_GPIO_WritePin>

}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40020800 	.word	0x40020800

080022e4 <PdcRearGenerateDelay>:
void PdcRearBuzzerControl();
void PdcFrontStatus();
void PdcRearStatus();

void PdcRearGenerateDelay()
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

	Pdc_RearGenerateDelayFlag = STD_LOW;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <PdcRearGenerateDelay+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
	Pdc_SecondRearGenerateDelayFlag = STD_LOW;
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <PdcRearGenerateDelay+0x5c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]

	if(Pdc_RearGenerateDelayFlag == STD_HIGH)
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <PdcRearGenerateDelay+0x58>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d103      	bne.n	8002304 <PdcRearGenerateDelay+0x20>
	{

		Pdc_RearDelayStatus = STD_HIGH;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <PdcRearGenerateDelay+0x60>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	e006      	b.n	8002312 <PdcRearGenerateDelay+0x2e>

	}
	else if(Pdc_RearGenerateDelayFlag == STD_LOW)
 8002304:	4b0d      	ldr	r3, [pc, #52]	; (800233c <PdcRearGenerateDelay+0x58>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <PdcRearGenerateDelay+0x2e>
	{

		Pdc_RearDelayStatus = STD_LOW;
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <PdcRearGenerateDelay+0x60>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Pdc_SecondRearGenerateDelayFlag == STD_HIGH)
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <PdcRearGenerateDelay+0x5c>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d103      	bne.n	8002322 <PdcRearGenerateDelay+0x3e>
	{

		Pdc_SecondRearDelayStatus = STD_HIGH;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <PdcRearGenerateDelay+0x64>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8002320:	e006      	b.n	8002330 <PdcRearGenerateDelay+0x4c>
	else if(Pdc_SecondRearGenerateDelayFlag == STD_LOW)
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <PdcRearGenerateDelay+0x5c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <PdcRearGenerateDelay+0x4c>
		Pdc_SecondRearDelayStatus = STD_LOW;
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <PdcRearGenerateDelay+0x64>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	200000fe 	.word	0x200000fe
 8002340:	20000102 	.word	0x20000102
 8002344:	20000101 	.word	0x20000101
 8002348:	20000105 	.word	0x20000105

0800234c <PdcFrontGenerateDelay>:

void PdcFrontGenerateDelay()
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

	Pdc_FrontGenerateDelayFlag 			= STD_LOW;
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <PdcFrontGenerateDelay+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
	Pdc_SecondFrontGenerateDelayFlag 	= STD_LOW;
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <PdcFrontGenerateDelay+0x5c>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]

	if(Pdc_FrontGenerateDelayFlag == STD_HIGH)
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <PdcFrontGenerateDelay+0x58>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d103      	bne.n	800236c <PdcFrontGenerateDelay+0x20>
	{

		Pdc_FrontDelayStatus = STD_HIGH;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <PdcFrontGenerateDelay+0x60>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e006      	b.n	800237a <PdcFrontGenerateDelay+0x2e>

	}
	else if(Pdc_FrontGenerateDelayFlag == STD_LOW)
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <PdcFrontGenerateDelay+0x58>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <PdcFrontGenerateDelay+0x2e>
	{

		Pdc_FrontDelayStatus = STD_LOW;
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <PdcFrontGenerateDelay+0x60>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Pdc_SecondFrontGenerateDelayFlag == STD_HIGH)
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <PdcFrontGenerateDelay+0x5c>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d103      	bne.n	800238a <PdcFrontGenerateDelay+0x3e>
	{

		Pdc_SecondFrontDelayStatus = STD_HIGH;
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <PdcFrontGenerateDelay+0x64>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8002388:	e006      	b.n	8002398 <PdcFrontGenerateDelay+0x4c>
	else if(Pdc_SecondFrontGenerateDelayFlag == STD_LOW)
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <PdcFrontGenerateDelay+0x5c>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <PdcFrontGenerateDelay+0x4c>
		Pdc_SecondFrontDelayStatus = STD_LOW;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <PdcFrontGenerateDelay+0x64>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	200000ff 	.word	0x200000ff
 80023a8:	20000103 	.word	0x20000103
 80023ac:	20000100 	.word	0x20000100
 80023b0:	20000104 	.word	0x20000104

080023b4 <PdcFrontStatus>:

void PdcFrontStatus()
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af02      	add	r7, sp, #8

	TickType_t expiry_time 	= 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
	uint8 echoValue 		= 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	70fb      	strb	r3, [r7, #3]

	osTimerStart(PdcFrontGlobalTimerHandle, 10000);
 80023c2:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <PdcFrontStatus+0x10c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f242 7110 	movw	r1, #10000	; 0x2710
 80023ca:	4618      	mov	r0, r3
 80023cc:	f00a ff2a 	bl	800d224 <osTimerStart>
	xTimerStart(PdcFrontGlobalTimerHandle, 0);
 80023d0:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <PdcFrontStatus+0x10c>)
 80023d2:	681c      	ldr	r4, [r3, #0]
 80023d4:	f00c fca4 	bl	800ed20 <xTaskGetTickCount>
 80023d8:	4602      	mov	r2, r0
 80023da:	2300      	movs	r3, #0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2300      	movs	r3, #0
 80023e0:	2101      	movs	r1, #1
 80023e2:	4620      	mov	r0, r4
 80023e4:	f00d f99e 	bl	800f724 <xTimerGenericCommand>
	PdcToggleFrontTriggerPin(STD_LOW);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f000 f911 	bl	8002610 <PdcToggleFrontTriggerPin>
	PdcToggleFrontTriggerPin(STD_HIGH);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f000 f90e 	bl	8002610 <PdcToggleFrontTriggerPin>
	osTimerStart(PdcFrontDelayTimerHandle, PDC_DELAY_VALUE_TEN);
 80023f4:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <PdcFrontStatus+0x110>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	210a      	movs	r1, #10
 80023fa:	4618      	mov	r0, r3
 80023fc:	f00a ff12 	bl	800d224 <osTimerStart>
	PdcFrontGenerateDelay();
 8002400:	f7ff ffa4 	bl	800234c <PdcFrontGenerateDelay>

	if(Pdc_FrontDelayStatus == STD_HIGH)
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <PdcFrontStatus+0x114>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d107      	bne.n	800241c <PdcFrontStatus+0x68>
	{

		PdcToggleFrontTriggerPin(STD_LOW);
 800240c:	2000      	movs	r0, #0
 800240e:	f000 f8ff 	bl	8002610 <PdcToggleFrontTriggerPin>
		osTimerStop(PdcFrontDelayTimerHandle);
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <PdcFrontStatus+0x110>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f00a ff32 	bl	800d280 <osTimerStop>

		/* do nothing */

	}

	echoValue = PdcReadFrontEchoPin();
 800241c:	f000 f91c 	bl	8002658 <PdcReadFrontEchoPin>
 8002420:	4603      	mov	r3, r0
 8002422:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d11e      	bne.n	8002468 <PdcFrontStatus+0xb4>
	{

		Pdc_FrontRxDelay = HAL_GetTick();
 800242a:	f001 fe37 	bl	800409c <HAL_GetTick>
 800242e:	4603      	mov	r3, r0
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <PdcFrontStatus+0x118>)
 8002434:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondFrontDelayTimerHandle, Pdc_FrontRxDelay + 10);
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <PdcFrontStatus+0x11c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a24      	ldr	r2, [pc, #144]	; (80024cc <PdcFrontStatus+0x118>)
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	320a      	adds	r2, #10
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f00a feee 	bl	800d224 <osTimerStart>
		PdcFrontGenerateDelay();
 8002448:	f7ff ff80 	bl	800234c <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <PdcFrontStatus+0x120>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d109      	bne.n	8002468 <PdcFrontStatus+0xb4>
		{

			expiry_time = xTimerGetExpiryTime(PdcFrontGlobalTimerHandle);
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <PdcFrontStatus+0x10c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f00d f9b1 	bl	800f7c0 <xTimerGetExpiryTime>
 800245e:	6078      	str	r0, [r7, #4]
			Pdc_FrontEchoFirstTimeStampValue = expiry_time;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <PdcFrontStatus+0x124>)
 8002466:	701a      	strb	r2, [r3, #0]

		}

	}

	echoValue = PdcReadFrontEchoPin();
 8002468:	f000 f8f6 	bl	8002658 <PdcReadFrontEchoPin>
 800246c:	4603      	mov	r3, r0
 800246e:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d11e      	bne.n	80024b4 <PdcFrontStatus+0x100>
	{

		Pdc_FrontRxDelay = HAL_GetTick();
 8002476:	f001 fe11 	bl	800409c <HAL_GetTick>
 800247a:	4603      	mov	r3, r0
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <PdcFrontStatus+0x118>)
 8002480:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondFrontDelayTimerHandle, Pdc_FrontRxDelay + 50);
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <PdcFrontStatus+0x11c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a11      	ldr	r2, [pc, #68]	; (80024cc <PdcFrontStatus+0x118>)
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	3232      	adds	r2, #50	; 0x32
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f00a fec8 	bl	800d224 <osTimerStart>
		PdcFrontGenerateDelay();
 8002494:	f7ff ff5a 	bl	800234c <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 8002498:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <PdcFrontStatus+0x120>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d109      	bne.n	80024b4 <PdcFrontStatus+0x100>
		{

			expiry_time = xTimerGetExpiryTime(PdcFrontGlobalTimerHandle);
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <PdcFrontStatus+0x10c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00d f98b 	bl	800f7c0 <xTimerGetExpiryTime>
 80024aa:	6078      	str	r0, [r7, #4]
			Pdc_FrontEchoSecondTimeStampValue = expiry_time;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <PdcFrontStatus+0x128>)
 80024b2:	701a      	strb	r2, [r3, #0]

		}

	}

	PdcFrontDistance();
 80024b4:	f000 f8f8 	bl	80026a8 <PdcFrontDistance>

}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	200001f8 	.word	0x200001f8
 80024c4:	200001f0 	.word	0x200001f0
 80024c8:	20000100 	.word	0x20000100
 80024cc:	200000f6 	.word	0x200000f6
 80024d0:	200001f4 	.word	0x200001f4
 80024d4:	20000104 	.word	0x20000104
 80024d8:	200000f7 	.word	0x200000f7
 80024dc:	200000f8 	.word	0x200000f8

080024e0 <PdcRearStatus>:

void PdcRearStatus()
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af02      	add	r7, sp, #8

	TickType_t expiry_time 	= 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
	uint8 echoValue 		= 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	70fb      	strb	r3, [r7, #3]

	osTimerStart(PdcRearGlobalTimerHandle, 10000);
 80024ee:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <PdcRearStatus+0x10c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f242 7110 	movw	r1, #10000	; 0x2710
 80024f6:	4618      	mov	r0, r3
 80024f8:	f00a fe94 	bl	800d224 <osTimerStart>
	xTimerStart(PdcRearGlobalTimerHandle, 0);
 80024fc:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <PdcRearStatus+0x10c>)
 80024fe:	681c      	ldr	r4, [r3, #0]
 8002500:	f00c fc0e 	bl	800ed20 <xTaskGetTickCount>
 8002504:	4602      	mov	r2, r0
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2300      	movs	r3, #0
 800250c:	2101      	movs	r1, #1
 800250e:	4620      	mov	r0, r4
 8002510:	f00d f908 	bl	800f724 <xTimerGenericCommand>
	PdcToggleRearTriggerPin(STD_LOW);
 8002514:	2000      	movs	r0, #0
 8002516:	f000 f88d 	bl	8002634 <PdcToggleRearTriggerPin>
	PdcToggleRearTriggerPin(STD_HIGH);
 800251a:	2001      	movs	r0, #1
 800251c:	f000 f88a 	bl	8002634 <PdcToggleRearTriggerPin>
	osTimerStart(PdcRearDelayTimerHandle, 10);
 8002520:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <PdcRearStatus+0x110>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	210a      	movs	r1, #10
 8002526:	4618      	mov	r0, r3
 8002528:	f00a fe7c 	bl	800d224 <osTimerStart>
	PdcRearGenerateDelay();
 800252c:	f7ff feda 	bl	80022e4 <PdcRearGenerateDelay>

	if(Pdc_RearDelayStatus == STD_HIGH)
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <PdcRearStatus+0x114>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <PdcRearStatus+0x68>
	{

		PdcToggleRearTriggerPin(STD_LOW);
 8002538:	2000      	movs	r0, #0
 800253a:	f000 f87b 	bl	8002634 <PdcToggleRearTriggerPin>
		osTimerStop(PdcRearDelayTimerHandle);
 800253e:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <PdcRearStatus+0x110>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f00a fe9c 	bl	800d280 <osTimerStop>

		/* do nothing */

	}

	echoValue = PdcReadRearEchoPin();
 8002548:	f000 f89a 	bl	8002680 <PdcReadRearEchoPin>
 800254c:	4603      	mov	r3, r0
 800254e:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d11e      	bne.n	8002594 <PdcRearStatus+0xb4>
	{

		Pdc_RearRxDelay = HAL_GetTick();
 8002556:	f001 fda1 	bl	800409c <HAL_GetTick>
 800255a:	4603      	mov	r3, r0
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <PdcRearStatus+0x118>)
 8002560:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondRearDelayTimerHandle, Pdc_RearRxDelay + 10);
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <PdcRearStatus+0x11c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <PdcRearStatus+0x118>)
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	320a      	adds	r2, #10
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f00a fe58 	bl	800d224 <osTimerStart>
		PdcRearGenerateDelay();
 8002574:	f7ff feb6 	bl	80022e4 <PdcRearGenerateDelay>

		if(Pdc_SecondRearDelayStatus == STD_HIGH)
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <PdcRearStatus+0x120>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d109      	bne.n	8002594 <PdcRearStatus+0xb4>
		{

			expiry_time = xTimerGetExpiryTime(PdcRearGlobalTimerHandle);
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <PdcRearStatus+0x10c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f00d f91b 	bl	800f7c0 <xTimerGetExpiryTime>
 800258a:	6078      	str	r0, [r7, #4]
			Pdc_RearEchoFirstTimeStampValue = expiry_time;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <PdcRearStatus+0x124>)
 8002592:	701a      	strb	r2, [r3, #0]

		}

	}

	echoValue = PdcReadRearEchoPin();
 8002594:	f000 f874 	bl	8002680 <PdcReadRearEchoPin>
 8002598:	4603      	mov	r3, r0
 800259a:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d11e      	bne.n	80025e0 <PdcRearStatus+0x100>
	{

		Pdc_RearRxDelay = HAL_GetTick();
 80025a2:	f001 fd7b 	bl	800409c <HAL_GetTick>
 80025a6:	4603      	mov	r3, r0
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <PdcRearStatus+0x118>)
 80025ac:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondRearDelayTimerHandle, Pdc_RearRxDelay + 50);
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <PdcRearStatus+0x11c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <PdcRearStatus+0x118>)
 80025b4:	7812      	ldrb	r2, [r2, #0]
 80025b6:	3232      	adds	r2, #50	; 0x32
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f00a fe32 	bl	800d224 <osTimerStart>
		PdcFrontGenerateDelay();
 80025c0:	f7ff fec4 	bl	800234c <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 80025c4:	4b10      	ldr	r3, [pc, #64]	; (8002608 <PdcRearStatus+0x128>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d109      	bne.n	80025e0 <PdcRearStatus+0x100>
		{

			expiry_time = xTimerGetExpiryTime(PdcRearGlobalTimerHandle);
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <PdcRearStatus+0x10c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f00d f8f5 	bl	800f7c0 <xTimerGetExpiryTime>
 80025d6:	6078      	str	r0, [r7, #4]
			Pdc_RearEchoSecondTimeStampValue = expiry_time;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <PdcRearStatus+0x12c>)
 80025de:	701a      	strb	r2, [r3, #0]

		}

	}

	PdcRearDistance();
 80025e0:	f000 f896 	bl	8002710 <PdcRearDistance>

}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd90      	pop	{r4, r7, pc}
 80025ec:	200001fc 	.word	0x200001fc
 80025f0:	20000200 	.word	0x20000200
 80025f4:	20000101 	.word	0x20000101
 80025f8:	200000fa 	.word	0x200000fa
 80025fc:	20000204 	.word	0x20000204
 8002600:	20000105 	.word	0x20000105
 8002604:	200000fb 	.word	0x200000fb
 8002608:	20000104 	.word	0x20000104
 800260c:	200000fc 	.word	0x200000fc

08002610 <PdcToggleFrontTriggerPin>:

void PdcToggleFrontTriggerPin(uint8 PinState)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PDC_FRONT_TRIGGER_PORT, PDC_FRONT_TRIGGER_PIN, PinState);
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	461a      	mov	r2, r3
 800261e:	2102      	movs	r1, #2
 8002620:	4803      	ldr	r0, [pc, #12]	; (8002630 <PdcToggleFrontTriggerPin+0x20>)
 8002622:	f003 ffb7 	bl	8006594 <HAL_GPIO_WritePin>

}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40020400 	.word	0x40020400

08002634 <PdcToggleRearTriggerPin>:

void PdcToggleRearTriggerPin(uint8 PinState)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PDC_FRONT_TRIGGER_PORT, PDC_FRONT_TRIGGER_PIN, PinState);
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	461a      	mov	r2, r3
 8002642:	2102      	movs	r1, #2
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <PdcToggleRearTriggerPin+0x20>)
 8002646:	f003 ffa5 	bl	8006594 <HAL_GPIO_WritePin>

}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40020400 	.word	0x40020400

08002658 <PdcReadFrontEchoPin>:

StdReturnType PdcReadFrontEchoPin()
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0

	uint8 pinValue = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	71fb      	strb	r3, [r7, #7]

	pinValue = HAL_GPIO_ReadPin(PDC_FRONT_ECHO_PORT, PDC_FRONT_ECHO_PIN);
 8002662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <PdcReadFrontEchoPin+0x24>)
 8002668:	f003 ff6e 	bl	8006548 <HAL_GPIO_ReadPin>
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]

	return pinValue;
 8002670:	79fb      	ldrb	r3, [r7, #7]

}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40020400 	.word	0x40020400

08002680 <PdcReadRearEchoPin>:

StdReturnType PdcReadRearEchoPin()
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0

	uint8 pinValue = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	71fb      	strb	r3, [r7, #7]

	pinValue = HAL_GPIO_ReadPin(PDC_REAR_ECHO_PORT, PDC_REAR_ECHO_PIN);
 800268a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800268e:	4805      	ldr	r0, [pc, #20]	; (80026a4 <PdcReadRearEchoPin+0x24>)
 8002690:	f003 ff5a 	bl	8006548 <HAL_GPIO_ReadPin>
 8002694:	4603      	mov	r3, r0
 8002696:	71fb      	strb	r3, [r7, #7]

	return pinValue;
 8002698:	79fb      	ldrb	r3, [r7, #7]

}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40020000 	.word	0x40020000

080026a8 <PdcFrontDistance>:

void PdcFrontDistance()
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0

	Pdc_FrontDistanceValue = (Pdc_FrontEchoFirstTimeStampValue + Pdc_FrontEchoSecondTimeStampValue) * 0.034 / 2;
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <PdcFrontDistance+0x58>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <PdcFrontDistance+0x5c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd fee3 	bl	8000484 <__aeabi_i2d>
 80026be:	a30e      	add	r3, pc, #56	; (adr r3, 80026f8 <PdcFrontDistance+0x50>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd ff48 	bl	8000558 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026d8:	f7fe f868 	bl	80007ac <__aeabi_ddiv>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe f94a 	bl	800097c <__aeabi_d2uiz>
 80026e8:	4603      	mov	r3, r0
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <PdcFrontDistance+0x60>)
 80026ee:	701a      	strb	r2, [r3, #0]

}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	f3af 8000 	nop.w
 80026f8:	b020c49c 	.word	0xb020c49c
 80026fc:	3fa16872 	.word	0x3fa16872
 8002700:	200000f7 	.word	0x200000f7
 8002704:	200000f8 	.word	0x200000f8
 8002708:	200000f9 	.word	0x200000f9
 800270c:	00000000 	.word	0x00000000

08002710 <PdcRearDistance>:


void PdcRearDistance()
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0

	Pdc_RearDistanceValue = (Pdc_RearEchoFirstTimeStampValue + Pdc_RearEchoSecondTimeStampValue) * 0.034 / 2;
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <PdcRearDistance+0x58>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <PdcRearDistance+0x5c>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd feaf 	bl	8000484 <__aeabi_i2d>
 8002726:	a30e      	add	r3, pc, #56	; (adr r3, 8002760 <PdcRearDistance+0x50>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff14 	bl	8000558 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002740:	f7fe f834 	bl	80007ac <__aeabi_ddiv>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f7fe f916 	bl	800097c <__aeabi_d2uiz>
 8002750:	4603      	mov	r3, r0
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <PdcRearDistance+0x60>)
 8002756:	701a      	strb	r2, [r3, #0]

}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	f3af 8000 	nop.w
 8002760:	b020c49c 	.word	0xb020c49c
 8002764:	3fa16872 	.word	0x3fa16872
 8002768:	200000fb 	.word	0x200000fb
 800276c:	200000fc 	.word	0x200000fc
 8002770:	200000fd 	.word	0x200000fd

08002774 <PdcMainFunction>:
	}

}

void PdcMainFunction()
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0

	PdcFrontStatus();
 8002778:	f7ff fe1c 	bl	80023b4 <PdcFrontStatus>
	PdcRearStatus();
 800277c:	f7ff feb0 	bl	80024e0 <PdcRearStatus>

}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <SecAlmVibeSenReadPin>:
void SecAlmState();
void SecAlmLightsBuzzerControl();
void SecAlmTurnOnExtLights();

StdReturnType SecAlmVibeSenReadPin()
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0

	uint8 PinState = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	71fb      	strb	r3, [r7, #7]

	PinState = HAL_GPIO_ReadPin(SECALM_VIBSEN_PORT, SECALM_VIBSEN_PIN);
 800278e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <SecAlmVibeSenReadPin+0x24>)
 8002794:	f003 fed8 	bl	8006548 <HAL_GPIO_ReadPin>
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]

	return PinState;
 800279c:	79fb      	ldrb	r3, [r7, #7]

}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40020000 	.word	0x40020000

080027ac <SecAlmVibSenStatus>:

StdReturnType SecAlmVibSenStatus()
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	71fb      	strb	r3, [r7, #7]

	SecAlm_VibSenStatusFlag = SecAlmVibeSenReadPin();
 80027b6:	f7ff ffe5 	bl	8002784 <SecAlmVibeSenReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	461a      	mov	r2, r3
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <SecAlmVibSenStatus+0x30>)
 80027c0:	601a      	str	r2, [r3, #0]

	if(SecAlm_VibSenStatusFlag >= 1000)
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <SecAlmVibSenStatus+0x30>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ca:	d301      	bcc.n	80027d0 <SecAlmVibSenStatus+0x24>
	{

		status = STD_HIGH;
 80027cc:	2301      	movs	r3, #1
 80027ce:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 80027d0:	79fb      	ldrb	r3, [r7, #7]

}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000108 	.word	0x20000108

080027e0 <SecAlmState>:

void SecAlmState()
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0

	if(SecAlmVibSenStatus() == STD_HIGH && CenLoc_CurrentState == STD_LOW)
 80027e4:	f7ff ffe2 	bl	80027ac <SecAlmVibSenStatus>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d106      	bne.n	80027fc <SecAlmState+0x1c>
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SecAlmState+0x20>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <SecAlmState+0x1c>
	{

		SecAlm_Trigger = STD_HIGH;
 80027f6:	4b03      	ldr	r3, [pc, #12]	; (8002804 <SecAlmState+0x24>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000095 	.word	0x20000095
 8002804:	20000106 	.word	0x20000106

08002808 <SecAlmTurnOnExtLights>:

void SecAlmTurnOnExtLights()
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

	ExtLightsLowBeam(SecAlm_PinStateChange);
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <SecAlmTurnOnExtLights+0x44>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fae5 	bl	8001de0 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(SecAlm_PinStateChange);
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <SecAlmTurnOnExtLights+0x44>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fb4c 	bl	8001eb8 <ExtLightsRearPositionLight>
	ExtLightsFrontFogLight(SecAlm_PinStateChange);
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <SecAlmTurnOnExtLights+0x44>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fb11 	bl	8001e4c <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(SecAlm_PinStateChange);
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <SecAlmTurnOnExtLights+0x44>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fb54 	bl	8001edc <ExtLightsRearFogLight>
	ExtLightsTurnSignalRight(SecAlm_PinStateChange);
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <SecAlmTurnOnExtLights+0x44>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fb2b 	bl	8001e94 <ExtLightsTurnSignalRight>
	ExtLightsTurnSignalLeft(SecAlm_PinStateChange);
 800283e:	4b03      	ldr	r3, [pc, #12]	; (800284c <SecAlmTurnOnExtLights+0x44>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fb14 	bl	8001e70 <ExtLightsTurnSignalLeft>

}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000010c 	.word	0x2000010c

08002850 <SecAlmLightsBuzzerControl>:

void SecAlmLightsBuzzerControl()
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0

	if(SecAlm_Trigger == STD_HIGH)
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <SecAlmLightsBuzzerControl+0xdc>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d155      	bne.n	8002908 <SecAlmLightsBuzzerControl+0xb8>
	{

		if(SecAlm_Timer5Value > 100000)
 800285c:	4b34      	ldr	r3, [pc, #208]	; (8002930 <SecAlmLightsBuzzerControl+0xe0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a34      	ldr	r2, [pc, #208]	; (8002934 <SecAlmLightsBuzzerControl+0xe4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d902      	bls.n	800286c <SecAlmLightsBuzzerControl+0x1c>
		{

			HAL_TIM_Base_Stop(&htim5);
 8002866:	4834      	ldr	r0, [pc, #208]	; (8002938 <SecAlmLightsBuzzerControl+0xe8>)
 8002868:	f008 fa8e 	bl	800ad88 <HAL_TIM_Base_Stop>

			/* do nothing */

		}

		HAL_TIM_Base_Start(&htim5);
 800286c:	4832      	ldr	r0, [pc, #200]	; (8002938 <SecAlmLightsBuzzerControl+0xe8>)
 800286e:	f008 fa01 	bl	800ac74 <HAL_TIM_Base_Start>
		SecAlm_Timer5Value = __HAL_TIM_GET_COUNTER(&htim5);
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <SecAlmLightsBuzzerControl+0xe8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	4a2d      	ldr	r2, [pc, #180]	; (8002930 <SecAlmLightsBuzzerControl+0xe0>)
 800287a:	6013      	str	r3, [r2, #0]

		if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <SecAlmLightsBuzzerControl+0xe8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	4a2e      	ldr	r2, [pc, #184]	; (800293c <SecAlmLightsBuzzerControl+0xec>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d832      	bhi.n	80028ee <SecAlmLightsBuzzerControl+0x9e>
		{

			HAL_TIM_Base_Start(&htim4);
 8002888:	482d      	ldr	r0, [pc, #180]	; (8002940 <SecAlmLightsBuzzerControl+0xf0>)
 800288a:	f008 f9f3 	bl	800ac74 <HAL_TIM_Base_Start>
			SecAlm_Timer4Value = __HAL_TIM_GET_COUNTER(&htim4);
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <SecAlmLightsBuzzerControl+0xf0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	4a2b      	ldr	r2, [pc, #172]	; (8002944 <SecAlmLightsBuzzerControl+0xf4>)
 8002896:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim4) < 5000)
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <SecAlmLightsBuzzerControl+0xf0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	f241 3287 	movw	r2, #4999	; 0x1387
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d80a      	bhi.n	80028bc <SecAlmLightsBuzzerControl+0x6c>
			{

				SecAlm_PinStateChange = STD_HIGH;
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <SecAlmLightsBuzzerControl+0xf8>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
				SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
 80028ac:	4b26      	ldr	r3, [pc, #152]	; (8002948 <SecAlmLightsBuzzerControl+0xf8>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 f855 	bl	8002960 <SecAlmToggleAlarmBuzzer>
				SecAlmTurnOnExtLights();
 80028b6:	f7ff ffa7 	bl	8002808 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

}
 80028ba:	e034      	b.n	8002926 <SecAlmLightsBuzzerControl+0xd6>
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim4) && __HAL_TIM_GET_COUNTER(&htim4) < 10000)
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <SecAlmLightsBuzzerControl+0xf0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d92d      	bls.n	8002926 <SecAlmLightsBuzzerControl+0xd6>
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <SecAlmLightsBuzzerControl+0xf0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d826      	bhi.n	8002926 <SecAlmLightsBuzzerControl+0xd6>
				SecAlm_PinStateChange = STD_LOW;
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <SecAlmLightsBuzzerControl+0xf8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
				SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <SecAlmLightsBuzzerControl+0xf8>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f83c 	bl	8002960 <SecAlmToggleAlarmBuzzer>
				SecAlmTurnOnExtLights();
 80028e8:	f7ff ff8e 	bl	8002808 <SecAlmTurnOnExtLights>
}
 80028ec:	e01b      	b.n	8002926 <SecAlmLightsBuzzerControl+0xd6>
		else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <SecAlmLightsBuzzerControl+0xe8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <SecAlmLightsBuzzerControl+0xe4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d915      	bls.n	8002926 <SecAlmLightsBuzzerControl+0xd6>
			SecAlm_Trigger = STD_LOW;
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <SecAlmLightsBuzzerControl+0xdc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5);
 8002900:	480d      	ldr	r0, [pc, #52]	; (8002938 <SecAlmLightsBuzzerControl+0xe8>)
 8002902:	f008 fa41 	bl	800ad88 <HAL_TIM_Base_Stop>
}
 8002906:	e00e      	b.n	8002926 <SecAlmLightsBuzzerControl+0xd6>
	else if(SecAlm_Trigger == STD_LOW)
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <SecAlmLightsBuzzerControl+0xdc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <SecAlmLightsBuzzerControl+0xd6>
		HAL_TIM_Base_Stop(&htim4);
 8002910:	480b      	ldr	r0, [pc, #44]	; (8002940 <SecAlmLightsBuzzerControl+0xf0>)
 8002912:	f008 fa39 	bl	800ad88 <HAL_TIM_Base_Stop>
		SecAlm_PinStateChange = STD_LOW;
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <SecAlmLightsBuzzerControl+0xf8>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
		SecAlm_VibSenStatusFlag = STD_LOW;
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <SecAlmLightsBuzzerControl+0xfc>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
		SecAlmTurnOnExtLights();
 8002922:	f7ff ff71 	bl	8002808 <SecAlmTurnOnExtLights>
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000106 	.word	0x20000106
 8002930:	20000110 	.word	0x20000110
 8002934:	000186a0 	.word	0x000186a0
 8002938:	2000069c 	.word	0x2000069c
 800293c:	0001869f 	.word	0x0001869f
 8002940:	200005e8 	.word	0x200005e8
 8002944:	20000114 	.word	0x20000114
 8002948:	2000010c 	.word	0x2000010c
 800294c:	20000108 	.word	0x20000108

08002950 <SecAlmMainFunction>:

void SecAlmMainFunction()
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0

	SecAlmState();
 8002954:	f7ff ff44 	bl	80027e0 <SecAlmState>
	SecAlmLightsBuzzerControl();
 8002958:	f7ff ff7a 	bl	8002850 <SecAlmLightsBuzzerControl>

}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}

08002960 <SecAlmToggleAlarmBuzzer>:
	return E_OK;

}

void SecAlmToggleAlarmBuzzer(uint8 PinState)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	461a      	mov	r2, r3
 800296e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002972:	4803      	ldr	r0, [pc, #12]	; (8002980 <SecAlmToggleAlarmBuzzer+0x20>)
 8002974:	f003 fe0e 	bl	8006594 <HAL_GPIO_WritePin>

}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40020400 	.word	0x40020400

08002984 <SecAlmToggleAlarmLed>:

void SecAlmToggleAlarmLed(uint8 PinState)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	461a      	mov	r2, r3
 8002992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <SecAlmToggleAlarmLed+0x20>)
 8002998:	f003 fdfc 	bl	8006594 <HAL_GPIO_WritePin>

}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40020000 	.word	0x40020000

080029a8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029ae:	463b      	mov	r3, r7
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029ba:	4b3e      	ldr	r3, [pc, #248]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029bc:	4a3e      	ldr	r2, [pc, #248]	; (8002ab8 <MX_ADC1_Init+0x110>)
 80029be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029c0:	4b3c      	ldr	r3, [pc, #240]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029c8:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80029ce:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80029d4:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029e2:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029e8:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029ea:	4a34      	ldr	r2, [pc, #208]	; (8002abc <MX_ADC1_Init+0x114>)
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029ee:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80029f4:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029f6:	2205      	movs	r2, #5
 80029f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029fa:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a02:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a08:	482a      	ldr	r0, [pc, #168]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 8002a0a:	f001 fb53 	bl	80040b4 <HAL_ADC_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002a14:	f000 fc7a 	bl	800330c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a24:	463b      	mov	r3, r7
 8002a26:	4619      	mov	r1, r3
 8002a28:	4822      	ldr	r0, [pc, #136]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 8002a2a:	f001 ff47 	bl	80048bc <HAL_ADC_ConfigChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a34:	f000 fc6a 	bl	800330c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a40:	463b      	mov	r3, r7
 8002a42:	4619      	mov	r1, r3
 8002a44:	481b      	ldr	r0, [pc, #108]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 8002a46:	f001 ff39 	bl	80048bc <HAL_ADC_ConfigChannel>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002a50:	f000 fc5c 	bl	800330c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002a54:	2303      	movs	r3, #3
 8002a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4814      	ldr	r0, [pc, #80]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 8002a62:	f001 ff2b 	bl	80048bc <HAL_ADC_ConfigChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002a6c:	f000 fc4e 	bl	800330c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002a70:	2309      	movs	r3, #9
 8002a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002a74:	2304      	movs	r3, #4
 8002a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a78:	463b      	mov	r3, r7
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 8002a7e:	f001 ff1d 	bl	80048bc <HAL_ADC_ConfigChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002a88:	f000 fc40 	bl	800330c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <MX_ADC1_Init+0x118>)
 8002a8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002a90:	2305      	movs	r3, #5
 8002a92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002a94:	2307      	movs	r3, #7
 8002a96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a98:	463b      	mov	r3, r7
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_ADC1_Init+0x10c>)
 8002a9e:	f001 ff0d 	bl	80048bc <HAL_ADC_ConfigChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8002aa8:	f000 fc30 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000118 	.word	0x20000118
 8002ab8:	40012000 	.word	0x40012000
 8002abc:	0f000001 	.word	0x0f000001
 8002ac0:	10000012 	.word	0x10000012

08002ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	; 0x30
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a4d      	ldr	r2, [pc, #308]	; (8002c18 <HAL_ADC_MspInit+0x154>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f040 8094 	bne.w	8002c10 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	4a4a      	ldr	r2, [pc, #296]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af6:	6453      	str	r3, [r2, #68]	; 0x44
 8002af8:	4b48      	ldr	r3, [pc, #288]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	4b44      	ldr	r3, [pc, #272]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a43      	ldr	r2, [pc, #268]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002b0e:	f043 0304 	orr.w	r3, r3, #4
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	4a3c      	ldr	r2, [pc, #240]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b30:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002b46:	f043 0302 	orr.w	r3, r3, #2
 8002b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4c:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_ADC_MspInit+0x158>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002b58:	2307      	movs	r3, #7
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	4619      	mov	r1, r3
 8002b6a:	482d      	ldr	r0, [pc, #180]	; (8002c20 <HAL_ADC_MspInit+0x15c>)
 8002b6c:	f003 fa52 	bl	8006014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002b70:	230e      	movs	r3, #14
 8002b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b74:	2303      	movs	r3, #3
 8002b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	f107 031c 	add.w	r3, r7, #28
 8002b80:	4619      	mov	r1, r3
 8002b82:	4828      	ldr	r0, [pc, #160]	; (8002c24 <HAL_ADC_MspInit+0x160>)
 8002b84:	f003 fa46 	bl	8006014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4823      	ldr	r0, [pc, #140]	; (8002c28 <HAL_ADC_MspInit+0x164>)
 8002b9c:	f003 fa3a 	bl	8006014 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002ba2:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <HAL_ADC_MspInit+0x16c>)
 8002ba4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ba6:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bac:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002bc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002be4:	4811      	ldr	r0, [pc, #68]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002be6:	f002 fab5 	bl	8005154 <HAL_DMA_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002bf0:	f000 fb8c 	bl	800330c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002bf8:	639a      	str	r2, [r3, #56]	; 0x38
 8002bfa:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <HAL_ADC_MspInit+0x168>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2105      	movs	r1, #5
 8002c04:	2012      	movs	r0, #18
 8002c06:	f002 fa37 	bl	8005078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c0a:	2012      	movs	r0, #18
 8002c0c:	f002 fa60 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002c10:	bf00      	nop
 8002c12:	3730      	adds	r7, #48	; 0x30
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40012000 	.word	0x40012000
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020800 	.word	0x40020800
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	2000017c 	.word	0x2000017c
 8002c30:	40026410 	.word	0x40026410

08002c34 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <MX_CRC_Init+0x20>)
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <MX_CRC_Init+0x24>)
 8002c3c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002c3e:	4805      	ldr	r0, [pc, #20]	; (8002c54 <MX_CRC_Init+0x20>)
 8002c40:	f002 fa5e 	bl	8005100 <HAL_CRC_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002c4a:	f000 fb5f 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200001dc 	.word	0x200001dc
 8002c58:	40023000 	.word	0x40023000

08002c5c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <HAL_CRC_MspInit+0x3c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10d      	bne.n	8002c8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_CRC_MspInit+0x40>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <HAL_CRC_MspInit+0x40>)
 8002c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_CRC_MspInit+0x40>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023000 	.word	0x40023000
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <MX_DMA_Init+0x3c>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a0b      	ldr	r2, [pc, #44]	; (8002cdc <MX_DMA_Init+0x3c>)
 8002cb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <MX_DMA_Init+0x3c>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2105      	movs	r1, #5
 8002cc6:	2038      	movs	r0, #56	; 0x38
 8002cc8:	f002 f9d6 	bl	8005078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ccc:	2038      	movs	r0, #56	; 0x38
 8002cce:	f002 f9ff 	bl	80050d0 <HAL_NVIC_EnableIRQ>

}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PdcFrontDelayTimer */
  PdcFrontDelayTimerHandle = osTimerNew(PdcFrontDelayCallback, osTimerPeriodic, NULL, &PdcFrontDelayTimer_attributes);
 8002ce4:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <MX_FREERTOS_Init+0x94>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4823      	ldr	r0, [pc, #140]	; (8002d78 <MX_FREERTOS_Init+0x98>)
 8002cec:	f00a fa1e 	bl	800d12c <osTimerNew>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <MX_FREERTOS_Init+0x9c>)
 8002cf4:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondFrontDelayTimer */
  PdcSecondFrontDelayTimerHandle = osTimerNew(PdcSecondFrontDelayCallback, osTimerPeriodic, NULL, &PdcSecondFrontDelayTimer_attributes);
 8002cf6:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <MX_FREERTOS_Init+0xa0>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4821      	ldr	r0, [pc, #132]	; (8002d84 <MX_FREERTOS_Init+0xa4>)
 8002cfe:	f00a fa15 	bl	800d12c <osTimerNew>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a20      	ldr	r2, [pc, #128]	; (8002d88 <MX_FREERTOS_Init+0xa8>)
 8002d06:	6013      	str	r3, [r2, #0]

  /* creation of PdcFrontGlobalTimer */
  PdcFrontGlobalTimerHandle = osTimerNew(PdcFrontGlobalTimerCallback, osTimerPeriodic, NULL, &PdcFrontGlobalTimer_attributes);
 8002d08:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <MX_FREERTOS_Init+0xac>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4820      	ldr	r0, [pc, #128]	; (8002d90 <MX_FREERTOS_Init+0xb0>)
 8002d10:	f00a fa0c 	bl	800d12c <osTimerNew>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <MX_FREERTOS_Init+0xb4>)
 8002d18:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearGlobalTimer */
  PdcRearGlobalTimerHandle = osTimerNew(PdcRearGlobalCallback, osTimerPeriodic, NULL, &PdcRearGlobalTimer_attributes);
 8002d1a:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <MX_FREERTOS_Init+0xb8>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2101      	movs	r1, #1
 8002d20:	481e      	ldr	r0, [pc, #120]	; (8002d9c <MX_FREERTOS_Init+0xbc>)
 8002d22:	f00a fa03 	bl	800d12c <osTimerNew>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <MX_FREERTOS_Init+0xc0>)
 8002d2a:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearDelayTimer */
  PdcRearDelayTimerHandle = osTimerNew(PdcRearDelayCallback, osTimerPeriodic, NULL, &PdcRearDelayTimer_attributes);
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <MX_FREERTOS_Init+0xc4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2101      	movs	r1, #1
 8002d32:	481d      	ldr	r0, [pc, #116]	; (8002da8 <MX_FREERTOS_Init+0xc8>)
 8002d34:	f00a f9fa 	bl	800d12c <osTimerNew>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <MX_FREERTOS_Init+0xcc>)
 8002d3c:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondRearDelayTimer */
  PdcSecondRearDelayTimerHandle = osTimerNew(PdcSecondRearDelayCallback, osTimerPeriodic, NULL, &PdcSecondRearDelayTimer_attributes);
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	; (8002db0 <MX_FREERTOS_Init+0xd0>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	2101      	movs	r1, #1
 8002d44:	481b      	ldr	r0, [pc, #108]	; (8002db4 <MX_FREERTOS_Init+0xd4>)
 8002d46:	f00a f9f1 	bl	800d12c <osTimerNew>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <MX_FREERTOS_Init+0xd8>)
 8002d4e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002d50:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <MX_FREERTOS_Init+0xdc>)
 8002d52:	2100      	movs	r1, #0
 8002d54:	481a      	ldr	r0, [pc, #104]	; (8002dc0 <MX_FREERTOS_Init+0xe0>)
 8002d56:	f00a f927 	bl	800cfa8 <osThreadNew>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <MX_FREERTOS_Init+0xe4>)
 8002d5e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002d60:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <MX_FREERTOS_Init+0xe8>)
 8002d62:	2100      	movs	r1, #0
 8002d64:	4819      	ldr	r0, [pc, #100]	; (8002dcc <MX_FREERTOS_Init+0xec>)
 8002d66:	f00a f91f 	bl	800cfa8 <osThreadNew>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <MX_FREERTOS_Init+0xf0>)
 8002d6e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	080107ec 	.word	0x080107ec
 8002d78:	08002e21 	.word	0x08002e21
 8002d7c:	200001f0 	.word	0x200001f0
 8002d80:	080107fc 	.word	0x080107fc
 8002d84:	08002e41 	.word	0x08002e41
 8002d88:	200001f4 	.word	0x200001f4
 8002d8c:	0801080c 	.word	0x0801080c
 8002d90:	08002e61 	.word	0x08002e61
 8002d94:	200001f8 	.word	0x200001f8
 8002d98:	0801081c 	.word	0x0801081c
 8002d9c:	08002e75 	.word	0x08002e75
 8002da0:	200001fc 	.word	0x200001fc
 8002da4:	0801082c 	.word	0x0801082c
 8002da8:	08002e89 	.word	0x08002e89
 8002dac:	20000200 	.word	0x20000200
 8002db0:	0801083c 	.word	0x0801083c
 8002db4:	08002ea9 	.word	0x08002ea9
 8002db8:	20000204 	.word	0x20000204
 8002dbc:	080107a4 	.word	0x080107a4
 8002dc0:	08002dd5 	.word	0x08002dd5
 8002dc4:	200001e8 	.word	0x200001e8
 8002dc8:	080107c8 	.word	0x080107c8
 8002dcc:	08002e01 	.word	0x08002e01
 8002dd0:	200001ec 	.word	0x200001ec

08002dd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  CenLocMainFunction();
 8002ddc:	f7fe fd28 	bl	8001830 <CenLocMainFunction>
	  BtcMainFunction();
 8002de0:	f7fe fa82 	bl	80012e8 <BtcMainFunction>
	  ExtLightsMainFunction();
 8002de4:	f7fe fd30 	bl	8001848 <ExtLightsMainFunction>
	  IntLightsMainFunction();
 8002de8:	f7ff fa5c 	bl	80022a4 <IntLightsMainFunction>
	  SecAlmMainFunction();
 8002dec:	f7ff fdb0 	bl	8002950 <SecAlmMainFunction>
	  HVACMainFunction();
 8002df0:	f7ff f8e4 	bl	8001fbc <HVACMainFunction>
	  PdcMainFunction();
 8002df4:	f7ff fcbe 	bl	8002774 <PdcMainFunction>
    osDelay(1);
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f00a f967 	bl	800d0cc <osDelay>
	  CenLocMainFunction();
 8002dfe:	e7ed      	b.n	8002ddc <StartDefaultTask+0x8>

08002e00 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  OS_Counter++;
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <StartTask02+0x1c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	4a03      	ldr	r2, [pc, #12]	; (8002e1c <StartTask02+0x1c>)
 8002e10:	6013      	str	r3, [r2, #0]
    osDelay(1);
 8002e12:	2001      	movs	r0, #1
 8002e14:	f00a f95a 	bl	800d0cc <osDelay>
	  OS_Counter++;
 8002e18:	e7f6      	b.n	8002e08 <StartTask02+0x8>
 8002e1a:	bf00      	nop
 8002e1c:	200001e4 	.word	0x200001e4

08002e20 <PdcFrontDelayCallback>:
  /* USER CODE END StartTask02 */
}

/* PdcFrontDelayCallback function */
void PdcFrontDelayCallback(void *argument)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontDelayCallback */
	Pdc_FrontGenerateDelayFlag = STD_HIGH;
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <PdcFrontDelayCallback+0x1c>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcFrontDelayCallback */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	200000ff 	.word	0x200000ff

08002e40 <PdcSecondFrontDelayCallback>:

/* PdcSecondFrontDelayCallback function */
void PdcSecondFrontDelayCallback(void *argument)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondFrontDelayCallback */
	Pdc_SecondFrontGenerateDelayFlag = STD_HIGH;
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <PdcSecondFrontDelayCallback+0x1c>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondFrontDelayCallback */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000103 	.word	0x20000103

08002e60 <PdcFrontGlobalTimerCallback>:

/* PdcFrontGlobalTimerCallback function */
void PdcFrontGlobalTimerCallback(void *argument)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontGlobalTimerCallback */

  /* USER CODE END PdcFrontGlobalTimerCallback */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <PdcRearGlobalCallback>:

/* PdcRearGlobalCallback function */
void PdcRearGlobalCallback(void *argument)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearGlobalCallback */

  /* USER CODE END PdcRearGlobalCallback */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <PdcRearDelayCallback>:

/* PdcRearDelayCallback function */
void PdcRearDelayCallback(void *argument)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearDelayCallback */
	Pdc_RearGenerateDelayFlag = STD_HIGH;
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <PdcRearDelayCallback+0x1c>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcRearDelayCallback */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	200000fe 	.word	0x200000fe

08002ea8 <PdcSecondRearDelayCallback>:

/* PdcSecondRearDelayCallback function */
void PdcSecondRearDelayCallback(void *argument)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondRearDelayCallback */
	Pdc_SecondRearGenerateDelayFlag = STD_HIGH;
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <PdcSecondRearDelayCallback+0x1c>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondRearDelayCallback */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000102 	.word	0x20000102

08002ec8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	607b      	str	r3, [r7, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	6313      	str	r3, [r2, #48]	; 0x30
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <MX_GPIO_Init+0x84>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]

}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800

08002f50 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <MX_I2C1_Init+0x50>)
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <MX_I2C1_Init+0x54>)
 8002f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <MX_I2C1_Init+0x50>)
 8002f5c:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <MX_I2C1_Init+0x58>)
 8002f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f60:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <MX_I2C1_Init+0x50>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <MX_I2C1_Init+0x50>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <MX_I2C1_Init+0x50>)
 8002f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <MX_I2C1_Init+0x50>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_I2C1_Init+0x50>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <MX_I2C1_Init+0x50>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <MX_I2C1_Init+0x50>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f8c:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <MX_I2C1_Init+0x50>)
 8002f8e:	f003 fb33 	bl	80065f8 <HAL_I2C_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f98:	f000 f9b8 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000208 	.word	0x20000208
 8002fa4:	40005400 	.word	0x40005400
 8002fa8:	000186a0 	.word	0x000186a0

08002fac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <MX_I2C3_Init+0x50>)
 8002fb2:	4a13      	ldr	r2, [pc, #76]	; (8003000 <MX_I2C3_Init+0x54>)
 8002fb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <MX_I2C3_Init+0x50>)
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <MX_I2C3_Init+0x58>)
 8002fba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <MX_I2C3_Init+0x50>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <MX_I2C3_Init+0x50>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <MX_I2C3_Init+0x50>)
 8002fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <MX_I2C3_Init+0x50>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <MX_I2C3_Init+0x50>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <MX_I2C3_Init+0x50>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <MX_I2C3_Init+0x50>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002fe8:	4804      	ldr	r0, [pc, #16]	; (8002ffc <MX_I2C3_Init+0x50>)
 8002fea:	f003 fb05 	bl	80065f8 <HAL_I2C_Init>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002ff4:	f000 f98a 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002ff8:	bf00      	nop
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	2000028c 	.word	0x2000028c
 8003000:	40005c00 	.word	0x40005c00
 8003004:	000186a0 	.word	0x000186a0

08003008 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	; 0x30
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 031c 	add.w	r3, r7, #28
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a4a      	ldr	r2, [pc, #296]	; (8003150 <HAL_I2C_MspInit+0x148>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d13d      	bne.n	80030a6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	4b49      	ldr	r3, [pc, #292]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a48      	ldr	r2, [pc, #288]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b46      	ldr	r3, [pc, #280]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003046:	f44f 7310 	mov.w	r3, #576	; 0x240
 800304a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800304c:	2312      	movs	r3, #18
 800304e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003054:	2303      	movs	r3, #3
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003058:	2304      	movs	r3, #4
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305c:	f107 031c 	add.w	r3, r7, #28
 8003060:	4619      	mov	r1, r3
 8003062:	483d      	ldr	r0, [pc, #244]	; (8003158 <HAL_I2C_MspInit+0x150>)
 8003064:	f002 ffd6 	bl	8006014 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	4a38      	ldr	r2, [pc, #224]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 8003072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003076:	6413      	str	r3, [r2, #64]	; 0x40
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003084:	2200      	movs	r2, #0
 8003086:	2105      	movs	r1, #5
 8003088:	201f      	movs	r0, #31
 800308a:	f001 fff5 	bl	8005078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800308e:	201f      	movs	r0, #31
 8003090:	f002 f81e 	bl	80050d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2105      	movs	r1, #5
 8003098:	2020      	movs	r0, #32
 800309a:	f001 ffed 	bl	8005078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800309e:	2020      	movs	r0, #32
 80030a0:	f002 f816 	bl	80050d0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80030a4:	e050      	b.n	8003148 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C3)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2c      	ldr	r2, [pc, #176]	; (800315c <HAL_I2C_MspInit+0x154>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d14b      	bne.n	8003148 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	6313      	str	r3, [r2, #48]	; 0x30
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6313      	str	r3, [r2, #48]	; 0x30
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ee:	2312      	movs	r3, #18
 80030f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030fa:	2304      	movs	r3, #4
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	4816      	ldr	r0, [pc, #88]	; (8003160 <HAL_I2C_MspInit+0x158>)
 8003106:	f002 ff85 	bl	8006014 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800310a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003110:	2312      	movs	r3, #18
 8003112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800311c:	2304      	movs	r3, #4
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f107 031c 	add.w	r3, r7, #28
 8003124:	4619      	mov	r1, r3
 8003126:	480f      	ldr	r0, [pc, #60]	; (8003164 <HAL_I2C_MspInit+0x15c>)
 8003128:	f002 ff74 	bl	8006014 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800312c:	2300      	movs	r3, #0
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 8003136:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800313a:	6413      	str	r3, [r2, #64]	; 0x40
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_I2C_MspInit+0x14c>)
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
}
 8003148:	bf00      	nop
 800314a:	3730      	adds	r7, #48	; 0x30
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40005400 	.word	0x40005400
 8003154:	40023800 	.word	0x40023800
 8003158:	40020400 	.word	0x40020400
 800315c:	40005c00 	.word	0x40005c00
 8003160:	40020800 	.word	0x40020800
 8003164:	40020000 	.word	0x40020000

08003168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800316c:	f000 ff60 	bl	8004030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003170:	f000 f82c 	bl	80031cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003174:	f7ff fea8 	bl	8002ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003178:	f7ff fd92 	bl	8002ca0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800317c:	f000 fdfa 	bl	8003d74 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003180:	f000 fbb4 	bl	80038ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8003184:	f000 fc00 	bl	8003988 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003188:	f000 fc9a 	bl	8003ac0 <MX_TIM5_Init>
  MX_TIM4_Init();
 800318c:	f000 fc4a 	bl	8003a24 <MX_TIM4_Init>
  MX_ADC1_Init();
 8003190:	f7ff fc0a 	bl	80029a8 <MX_ADC1_Init>
  MX_CRC_Init();
 8003194:	f7ff fd4e 	bl	8002c34 <MX_CRC_Init>
  MX_RTC_Init();
 8003198:	f000 f8c8 	bl	800332c <MX_RTC_Init>
  MX_I2C1_Init();
 800319c:	f7ff fed8 	bl	8002f50 <MX_I2C1_Init>
  MX_TIM9_Init();
 80031a0:	f000 fcde 	bl	8003b60 <MX_TIM9_Init>
  MX_I2C3_Init();
 80031a4:	f7ff ff02 	bl	8002fac <MX_I2C3_Init>
  MX_SPI1_Init();
 80031a8:	f000 f9a6 	bl	80034f8 <MX_SPI1_Init>
  MX_MBEDTLS_Init();
 80031ac:	f009 fe66 	bl	800ce7c <MX_MBEDTLS_Init>
  MX_TIM11_Init();
 80031b0:	f000 fd10 	bl	8003bd4 <MX_TIM11_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 80031b4:	f009 fe62 	bl	800ce7c <MX_MBEDTLS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80031b8:	f000 f872 	bl	80032a0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80031bc:	f009 feaa 	bl	800cf14 <osKernelInitialize>
  MX_FREERTOS_Init();
 80031c0:	f7ff fd8e 	bl	8002ce0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80031c4:	f009 feca 	bl	800cf5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <main+0x60>
	...

080031cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b094      	sub	sp, #80	; 0x50
 80031d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031d2:	f107 0320 	add.w	r3, r7, #32
 80031d6:	2230      	movs	r2, #48	; 0x30
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f00c fe42 	bl	800fe64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031e0:	f107 030c 	add.w	r3, r7, #12
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f0:	2300      	movs	r3, #0
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	4b28      	ldr	r3, [pc, #160]	; (8003298 <SystemClock_Config+0xcc>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	4a27      	ldr	r2, [pc, #156]	; (8003298 <SystemClock_Config+0xcc>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <SystemClock_Config+0xcc>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800320c:	2300      	movs	r3, #0
 800320e:	607b      	str	r3, [r7, #4]
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <SystemClock_Config+0xd0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a21      	ldr	r2, [pc, #132]	; (800329c <SystemClock_Config+0xd0>)
 8003216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b1f      	ldr	r3, [pc, #124]	; (800329c <SystemClock_Config+0xd0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003228:	2309      	movs	r3, #9
 800322a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800322c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003232:	2301      	movs	r3, #1
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003236:	2302      	movs	r3, #2
 8003238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800323a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003240:	2304      	movs	r3, #4
 8003242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003244:	2364      	movs	r3, #100	; 0x64
 8003246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003248:	2302      	movs	r3, #2
 800324a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800324c:	2304      	movs	r3, #4
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003250:	f107 0320 	add.w	r3, r7, #32
 8003254:	4618      	mov	r0, r3
 8003256:	f005 f8e9 	bl	800842c <HAL_RCC_OscConfig>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003260:	f000 f854 	bl	800330c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003264:	230f      	movs	r3, #15
 8003266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003268:	2302      	movs	r3, #2
 800326a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800327a:	f107 030c 	add.w	r3, r7, #12
 800327e:	2103      	movs	r1, #3
 8003280:	4618      	mov	r0, r3
 8003282:	f005 fbfb 	bl	8008a7c <HAL_RCC_ClockConfig>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800328c:	f000 f83e 	bl	800330c <Error_Handler>
  }
}
 8003290:	bf00      	nop
 8003292:	3750      	adds	r7, #80	; 0x50
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	40007000 	.word	0x40007000

080032a0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80032a4:	2200      	movs	r2, #0
 80032a6:	2105      	movs	r1, #5
 80032a8:	2004      	movs	r0, #4
 80032aa:	f001 fee5 	bl	8005078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80032ae:	2004      	movs	r0, #4
 80032b0:	f001 ff0e 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80032b4:	2200      	movs	r2, #0
 80032b6:	2105      	movs	r1, #5
 80032b8:	201c      	movs	r0, #28
 80032ba:	f001 fedd 	bl	8005078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032be:	201c      	movs	r0, #28
 80032c0:	f001 ff06 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80032c4:	2200      	movs	r2, #0
 80032c6:	2105      	movs	r1, #5
 80032c8:	201d      	movs	r0, #29
 80032ca:	f001 fed5 	bl	8005078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032ce:	201d      	movs	r0, #29
 80032d0:	f001 fefe 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2105      	movs	r1, #5
 80032d8:	2051      	movs	r0, #81	; 0x51
 80032da:	f001 fecd 	bl	8005078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80032de:	2051      	movs	r0, #81	; 0x51
 80032e0:	f001 fef6 	bl	80050d0 <HAL_NVIC_EnableIRQ>
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032fa:	f000 febb 	bl	8004074 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000

0800330c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003310:	b672      	cpsid	i
}
 8003312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003314:	e7fe      	b.n	8003314 <Error_Handler+0x8>

08003316 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b090      	sub	sp, #64	; 0x40
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003342:	2300      	movs	r3, #0
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003346:	463b      	mov	r3, r7
 8003348:	2228      	movs	r2, #40	; 0x28
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f00c fd89 	bl	800fe64 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003352:	4b46      	ldr	r3, [pc, #280]	; (800346c <MX_RTC_Init+0x140>)
 8003354:	4a46      	ldr	r2, [pc, #280]	; (8003470 <MX_RTC_Init+0x144>)
 8003356:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003358:	4b44      	ldr	r3, [pc, #272]	; (800346c <MX_RTC_Init+0x140>)
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800335e:	4b43      	ldr	r3, [pc, #268]	; (800346c <MX_RTC_Init+0x140>)
 8003360:	227f      	movs	r2, #127	; 0x7f
 8003362:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003364:	4b41      	ldr	r3, [pc, #260]	; (800346c <MX_RTC_Init+0x140>)
 8003366:	22ff      	movs	r2, #255	; 0xff
 8003368:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800336a:	4b40      	ldr	r3, [pc, #256]	; (800346c <MX_RTC_Init+0x140>)
 800336c:	2200      	movs	r2, #0
 800336e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003370:	4b3e      	ldr	r3, [pc, #248]	; (800346c <MX_RTC_Init+0x140>)
 8003372:	2200      	movs	r2, #0
 8003374:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003376:	4b3d      	ldr	r3, [pc, #244]	; (800346c <MX_RTC_Init+0x140>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800337c:	483b      	ldr	r0, [pc, #236]	; (800346c <MX_RTC_Init+0x140>)
 800337e:	f006 f88d 	bl	800949c <HAL_RTC_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003388:	f7ff ffc0 	bl	800330c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8003392:	2300      	movs	r3, #0
 8003394:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8003398:	2300      	movs	r3, #0
 800339a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800339e:	2300      	movs	r3, #0
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80033a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033aa:	2201      	movs	r2, #1
 80033ac:	4619      	mov	r1, r3
 80033ae:	482f      	ldr	r0, [pc, #188]	; (800346c <MX_RTC_Init+0x140>)
 80033b0:	f006 f978 	bl	80096a4 <HAL_RTC_SetTime>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80033ba:	f7ff ffa7 	bl	800330c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80033d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033da:	2201      	movs	r2, #1
 80033dc:	4619      	mov	r1, r3
 80033de:	4823      	ldr	r0, [pc, #140]	; (800346c <MX_RTC_Init+0x140>)
 80033e0:	f006 faa8 	bl	8009934 <HAL_RTC_SetDate>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80033ea:	f7ff ff8f 	bl	800330c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800341e:	463b      	mov	r3, r7
 8003420:	2201      	movs	r2, #1
 8003422:	4619      	mov	r1, r3
 8003424:	4811      	ldr	r0, [pc, #68]	; (800346c <MX_RTC_Init+0x140>)
 8003426:	f006 fb91 	bl	8009b4c <HAL_RTC_SetAlarm>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003430:	f7ff ff6c 	bl	800330c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8003434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800343a:	463b      	mov	r3, r7
 800343c:	2201      	movs	r2, #1
 800343e:	4619      	mov	r1, r3
 8003440:	480a      	ldr	r0, [pc, #40]	; (800346c <MX_RTC_Init+0x140>)
 8003442:	f006 fb83 	bl	8009b4c <HAL_RTC_SetAlarm>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800344c:	f7ff ff5e 	bl	800330c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003450:	2200      	movs	r2, #0
 8003452:	2100      	movs	r1, #0
 8003454:	4805      	ldr	r0, [pc, #20]	; (800346c <MX_RTC_Init+0x140>)
 8003456:	f006 ff33 	bl	800a2c0 <HAL_RTCEx_SetWakeUpTimer>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8003460:	f7ff ff54 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003464:	bf00      	nop
 8003466:	3740      	adds	r7, #64	; 0x40
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000310 	.word	0x20000310
 8003470:	40002800 	.word	0x40002800

08003474 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800347c:	f107 0308 	add.w	r3, r7, #8
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
 800348c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <HAL_RTC_MspInit+0x50>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d111      	bne.n	80034bc <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003498:	2302      	movs	r3, #2
 800349a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800349c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	4618      	mov	r0, r3
 80034a8:	f005 fde2 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80034b2:	f7ff ff2b 	bl	800330c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <HAL_RTC_MspInit+0x54>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80034bc:	bf00      	nop
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40002800 	.word	0x40002800
 80034c8:	42470e3c 	.word	0x42470e3c

080034cc <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a05      	ldr	r2, [pc, #20]	; (80034f0 <HAL_RTC_MspDeInit+0x24>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d102      	bne.n	80034e4 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RTC_MspDeInit+0x28>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40002800 	.word	0x40002800
 80034f4:	42470e3c 	.word	0x42470e3c

080034f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80034fc:	4b17      	ldr	r3, [pc, #92]	; (800355c <MX_SPI1_Init+0x64>)
 80034fe:	4a18      	ldr	r2, [pc, #96]	; (8003560 <MX_SPI1_Init+0x68>)
 8003500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <MX_SPI1_Init+0x64>)
 8003504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <MX_SPI1_Init+0x64>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <MX_SPI1_Init+0x64>)
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <MX_SPI1_Init+0x64>)
 8003518:	2200      	movs	r2, #0
 800351a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <MX_SPI1_Init+0x64>)
 800351e:	2200      	movs	r2, #0
 8003520:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <MX_SPI1_Init+0x64>)
 8003524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003528:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <MX_SPI1_Init+0x64>)
 800352c:	2200      	movs	r2, #0
 800352e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <MX_SPI1_Init+0x64>)
 8003532:	2200      	movs	r2, #0
 8003534:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <MX_SPI1_Init+0x64>)
 8003538:	2200      	movs	r2, #0
 800353a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800353c:	4b07      	ldr	r3, [pc, #28]	; (800355c <MX_SPI1_Init+0x64>)
 800353e:	2200      	movs	r2, #0
 8003540:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <MX_SPI1_Init+0x64>)
 8003544:	220a      	movs	r2, #10
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003548:	4804      	ldr	r0, [pc, #16]	; (800355c <MX_SPI1_Init+0x64>)
 800354a:	f006 ff8d 	bl	800a468 <HAL_SPI_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003554:	f7ff feda 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}
 800355c:	2000034c 	.word	0x2000034c
 8003560:	40013000 	.word	0x40013000

08003564 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <HAL_SPI_MspInit+0x94>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d133      	bne.n	80035ee <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_SPI_MspInit+0x98>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a1b      	ldr	r2, [pc, #108]	; (80035fc <HAL_SPI_MspInit+0x98>)
 8003590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_SPI_MspInit+0x98>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_SPI_MspInit+0x98>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a14      	ldr	r2, [pc, #80]	; (80035fc <HAL_SPI_MspInit+0x98>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_SPI_MspInit+0x98>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035be:	23e0      	movs	r3, #224	; 0xe0
 80035c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035ce:	2305      	movs	r3, #5
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	4809      	ldr	r0, [pc, #36]	; (8003600 <HAL_SPI_MspInit+0x9c>)
 80035da:	f002 fd1b 	bl	8006014 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2105      	movs	r1, #5
 80035e2:	2023      	movs	r0, #35	; 0x23
 80035e4:	f001 fd48 	bl	8005078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80035e8:	2023      	movs	r0, #35	; 0x23
 80035ea:	f001 fd71 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80035ee:	bf00      	nop
 80035f0:	3728      	adds	r7, #40	; 0x28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40013000 	.word	0x40013000
 80035fc:	40023800 	.word	0x40023800
 8003600:	40020000 	.word	0x40020000

08003604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_MspInit+0x74>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_MspInit+0x74>)
 8003614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003618:	6453      	str	r3, [r2, #68]	; 0x44
 800361a:	4b17      	ldr	r3, [pc, #92]	; (8003678 <HAL_MspInit+0x74>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003622:	607b      	str	r3, [r7, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_MspInit+0x74>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	4a12      	ldr	r2, [pc, #72]	; (8003678 <HAL_MspInit+0x74>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	6413      	str	r3, [r2, #64]	; 0x40
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <HAL_MspInit+0x74>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003642:	2200      	movs	r2, #0
 8003644:	210f      	movs	r1, #15
 8003646:	f06f 0001 	mvn.w	r0, #1
 800364a:	f001 fd15 	bl	8005078 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2105      	movs	r1, #5
 8003652:	2001      	movs	r0, #1
 8003654:	f001 fd10 	bl	8005078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003658:	2001      	movs	r0, #1
 800365a:	f001 fd39 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800365e:	2200      	movs	r2, #0
 8003660:	2105      	movs	r1, #5
 8003662:	2005      	movs	r0, #5
 8003664:	f001 fd08 	bl	8005078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003668:	2005      	movs	r0, #5
 800366a:	f001 fd31 	bl	80050d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	; 0x30
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_InitTick+0xd0>)
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	4a2d      	ldr	r2, [pc, #180]	; (800374c <HAL_InitTick+0xd0>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6453      	str	r3, [r2, #68]	; 0x44
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_InitTick+0xd0>)
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036a8:	f107 020c 	add.w	r2, r7, #12
 80036ac:	f107 0310 	add.w	r3, r7, #16
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f005 fcaa 	bl	800900c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80036b8:	f005 fc94 	bl	8008fe4 <HAL_RCC_GetPCLK2Freq>
 80036bc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	4a23      	ldr	r2, [pc, #140]	; (8003750 <HAL_InitTick+0xd4>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0c9b      	lsrs	r3, r3, #18
 80036c8:	3b01      	subs	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_InitTick+0xd8>)
 80036ce:	4a22      	ldr	r2, [pc, #136]	; (8003758 <HAL_InitTick+0xdc>)
 80036d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_InitTick+0xd8>)
 80036d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_InitTick+0xd8>)
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <HAL_InitTick+0xd8>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_InitTick+0xd8>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_InitTick+0xd8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80036f2:	4818      	ldr	r0, [pc, #96]	; (8003754 <HAL_InitTick+0xd8>)
 80036f4:	f007 f9ec 	bl	800aad0 <HAL_TIM_Base_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80036fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003702:	2b00      	cmp	r3, #0
 8003704:	d11b      	bne.n	800373e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003706:	4813      	ldr	r0, [pc, #76]	; (8003754 <HAL_InitTick+0xd8>)
 8003708:	f007 fba0 	bl	800ae4c <HAL_TIM_Base_Start_IT>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003716:	2b00      	cmp	r3, #0
 8003718:	d111      	bne.n	800373e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800371a:	2019      	movs	r0, #25
 800371c:	f001 fcd8 	bl	80050d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b0f      	cmp	r3, #15
 8003724:	d808      	bhi.n	8003738 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003726:	2200      	movs	r2, #0
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	2019      	movs	r0, #25
 800372c:	f001 fca4 	bl	8005078 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003730:	4a0a      	ldr	r2, [pc, #40]	; (800375c <HAL_InitTick+0xe0>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e002      	b.n	800373e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800373e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003742:	4618      	mov	r0, r3
 8003744:	3730      	adds	r7, #48	; 0x30
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800
 8003750:	431bde83 	.word	0x431bde83
 8003754:	200003cc 	.word	0x200003cc
 8003758:	40010000 	.word	0x40010000
 800375c:	20000008 	.word	0x20000008

08003760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003764:	e7fe      	b.n	8003764 <NMI_Handler+0x4>

08003766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800376a:	e7fe      	b.n	800376a <HardFault_Handler+0x4>

0800376c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003770:	e7fe      	b.n	8003770 <MemManage_Handler+0x4>

08003772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003776:	e7fe      	b.n	8003776 <BusFault_Handler+0x4>

08003778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800377c:	e7fe      	b.n	800377c <UsageFault_Handler+0x4>

0800377e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003790:	f004 fe32 	bl	80083f8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003794:	bf00      	nop
 8003796:	bd80      	pop	{r7, pc}

08003798 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800379c:	f002 fa64 	bl	8005c68 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80037a0:	bf00      	nop
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <ADC_IRQHandler+0x10>)
 80037ba:	f000 fdfd 	bl	80043b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000118 	.word	0x20000118

080037c8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80037ce:	f007 fbcf 	bl	800af70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000750 	.word	0x20000750

080037dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80037e2:	f007 fbc5 	bl	800af70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200003cc 	.word	0x200003cc

080037f0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80037f6:	f007 fbbb 	bl	800af70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000804 	.word	0x20000804

08003804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003808:	4802      	ldr	r0, [pc, #8]	; (8003814 <TIM2_IRQHandler+0x10>)
 800380a:	f007 fbb1 	bl	800af70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000480 	.word	0x20000480

08003818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800381c:	4802      	ldr	r0, [pc, #8]	; (8003828 <TIM3_IRQHandler+0x10>)
 800381e:	f007 fba7 	bl	800af70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000534 	.word	0x20000534

0800382c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003830:	4802      	ldr	r0, [pc, #8]	; (800383c <TIM4_IRQHandler+0x10>)
 8003832:	f007 fb9d 	bl	800af70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200005e8 	.word	0x200005e8

08003840 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003844:	4802      	ldr	r0, [pc, #8]	; (8003850 <I2C1_EV_IRQHandler+0x10>)
 8003846:	f003 f8e1 	bl	8006a0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000208 	.word	0x20000208

08003854 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <I2C1_ER_IRQHandler+0x10>)
 800385a:	f003 fa48 	bl	8006cee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000208 	.word	0x20000208

08003868 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <SPI1_IRQHandler+0x10>)
 800386e:	f006 ffc9 	bl	800a804 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	2000034c 	.word	0x2000034c

0800387c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <USART1_IRQHandler+0x10>)
 8003882:	f008 fb49 	bl	800bf18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200008b8 	.word	0x200008b8

08003890 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <TIM5_IRQHandler+0x10>)
 8003896:	f007 fb6b 	bl	800af70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	2000069c 	.word	0x2000069c

080038a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <DMA2_Stream0_IRQHandler+0x10>)
 80038aa:	f001 ff65 	bl	8005778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2000017c 	.word	0x2000017c

080038b8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <SystemInit+0x20>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <SystemInit+0x20>)
 80038d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038f2:	f107 0308 	add.w	r3, r7, #8
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003900:	463b      	mov	r3, r7
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003908:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <MX_TIM2_Init+0x98>)
 800390a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800390e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8003910:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <MX_TIM2_Init+0x98>)
 8003912:	f242 720f 	movw	r2, #9999	; 0x270f
 8003916:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <MX_TIM2_Init+0x98>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <MX_TIM2_Init+0x98>)
 8003920:	f242 720f 	movw	r2, #9999	; 0x270f
 8003924:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <MX_TIM2_Init+0x98>)
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800392c:	4b15      	ldr	r3, [pc, #84]	; (8003984 <MX_TIM2_Init+0x98>)
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003932:	4814      	ldr	r0, [pc, #80]	; (8003984 <MX_TIM2_Init+0x98>)
 8003934:	f007 f8cc 	bl	800aad0 <HAL_TIM_Base_Init>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800393e:	f7ff fce5 	bl	800330c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003946:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003948:	f107 0308 	add.w	r3, r7, #8
 800394c:	4619      	mov	r1, r3
 800394e:	480d      	ldr	r0, [pc, #52]	; (8003984 <MX_TIM2_Init+0x98>)
 8003950:	f007 fc36 	bl	800b1c0 <HAL_TIM_ConfigClockSource>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800395a:	f7ff fcd7 	bl	800330c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003966:	463b      	mov	r3, r7
 8003968:	4619      	mov	r1, r3
 800396a:	4806      	ldr	r0, [pc, #24]	; (8003984 <MX_TIM2_Init+0x98>)
 800396c:	f008 f904 	bl	800bb78 <HAL_TIMEx_MasterConfigSynchronization>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003976:	f7ff fcc9 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000480 	.word	0x20000480

08003988 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800398e:	f107 0308 	add.w	r3, r7, #8
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800399c:	463b      	mov	r3, r7
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039a4:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <MX_TIM3_Init+0x94>)
 80039a6:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <MX_TIM3_Init+0x98>)
 80039a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 80039aa:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <MX_TIM3_Init+0x94>)
 80039ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80039b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b2:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <MX_TIM3_Init+0x94>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80039b8:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <MX_TIM3_Init+0x94>)
 80039ba:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80039be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c0:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <MX_TIM3_Init+0x94>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <MX_TIM3_Init+0x94>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039cc:	4813      	ldr	r0, [pc, #76]	; (8003a1c <MX_TIM3_Init+0x94>)
 80039ce:	f007 f87f 	bl	800aad0 <HAL_TIM_Base_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80039d8:	f7ff fc98 	bl	800330c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039e2:	f107 0308 	add.w	r3, r7, #8
 80039e6:	4619      	mov	r1, r3
 80039e8:	480c      	ldr	r0, [pc, #48]	; (8003a1c <MX_TIM3_Init+0x94>)
 80039ea:	f007 fbe9 	bl	800b1c0 <HAL_TIM_ConfigClockSource>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80039f4:	f7ff fc8a 	bl	800330c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f8:	2300      	movs	r3, #0
 80039fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a00:	463b      	mov	r3, r7
 8003a02:	4619      	mov	r1, r3
 8003a04:	4805      	ldr	r0, [pc, #20]	; (8003a1c <MX_TIM3_Init+0x94>)
 8003a06:	f008 f8b7 	bl	800bb78 <HAL_TIMEx_MasterConfigSynchronization>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003a10:	f7ff fc7c 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a14:	bf00      	nop
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000534 	.word	0x20000534
 8003a20:	40000400 	.word	0x40000400

08003a24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a2a:	f107 0308 	add.w	r3, r7, #8
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a38:	463b      	mov	r3, r7
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <MX_TIM4_Init+0x94>)
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <MX_TIM4_Init+0x98>)
 8003a44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8003a46:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <MX_TIM4_Init+0x94>)
 8003a48:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <MX_TIM4_Init+0x94>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8003a54:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <MX_TIM4_Init+0x94>)
 8003a56:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <MX_TIM4_Init+0x94>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a62:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <MX_TIM4_Init+0x94>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a68:	4813      	ldr	r0, [pc, #76]	; (8003ab8 <MX_TIM4_Init+0x94>)
 8003a6a:	f007 f831 	bl	800aad0 <HAL_TIM_Base_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003a74:	f7ff fc4a 	bl	800330c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a7e:	f107 0308 	add.w	r3, r7, #8
 8003a82:	4619      	mov	r1, r3
 8003a84:	480c      	ldr	r0, [pc, #48]	; (8003ab8 <MX_TIM4_Init+0x94>)
 8003a86:	f007 fb9b 	bl	800b1c0 <HAL_TIM_ConfigClockSource>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003a90:	f7ff fc3c 	bl	800330c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a94:	2300      	movs	r3, #0
 8003a96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a9c:	463b      	mov	r3, r7
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <MX_TIM4_Init+0x94>)
 8003aa2:	f008 f869 	bl	800bb78 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003aac:	f7ff fc2e 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ab0:	bf00      	nop
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200005e8 	.word	0x200005e8
 8003abc:	40000800 	.word	0x40000800

08003ac0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <MX_TIM5_Init+0x94>)
 8003ade:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <MX_TIM5_Init+0x98>)
 8003ae0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <MX_TIM5_Init+0x94>)
 8003ae4:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ae8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aea:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <MX_TIM5_Init+0x94>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 110000-1;
 8003af0:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <MX_TIM5_Init+0x94>)
 8003af2:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <MX_TIM5_Init+0x9c>)
 8003af4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af6:	4b17      	ldr	r3, [pc, #92]	; (8003b54 <MX_TIM5_Init+0x94>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003afc:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <MX_TIM5_Init+0x94>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003b02:	4814      	ldr	r0, [pc, #80]	; (8003b54 <MX_TIM5_Init+0x94>)
 8003b04:	f006 ffe4 	bl	800aad0 <HAL_TIM_Base_Init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003b0e:	f7ff fbfd 	bl	800330c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003b18:	f107 0308 	add.w	r3, r7, #8
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	480d      	ldr	r0, [pc, #52]	; (8003b54 <MX_TIM5_Init+0x94>)
 8003b20:	f007 fb4e 	bl	800b1c0 <HAL_TIM_ConfigClockSource>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003b2a:	f7ff fbef 	bl	800330c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b36:	463b      	mov	r3, r7
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4806      	ldr	r0, [pc, #24]	; (8003b54 <MX_TIM5_Init+0x94>)
 8003b3c:	f008 f81c 	bl	800bb78 <HAL_TIMEx_MasterConfigSynchronization>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003b46:	f7ff fbe1 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	2000069c 	.word	0x2000069c
 8003b58:	40000c00 	.word	0x40000c00
 8003b5c:	0001adaf 	.word	0x0001adaf

08003b60 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b66:	463b      	mov	r3, r7
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <MX_TIM9_Init+0x6c>)
 8003b74:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <MX_TIM9_Init+0x70>)
 8003b76:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <MX_TIM9_Init+0x6c>)
 8003b7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b7e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <MX_TIM9_Init+0x6c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <MX_TIM9_Init+0x6c>)
 8003b88:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b8c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <MX_TIM9_Init+0x6c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b94:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <MX_TIM9_Init+0x6c>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003b9a:	480c      	ldr	r0, [pc, #48]	; (8003bcc <MX_TIM9_Init+0x6c>)
 8003b9c:	f006 ff98 	bl	800aad0 <HAL_TIM_Base_Init>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8003ba6:	f7ff fbb1 	bl	800330c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bae:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003bb0:	463b      	mov	r3, r7
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4805      	ldr	r0, [pc, #20]	; (8003bcc <MX_TIM9_Init+0x6c>)
 8003bb6:	f007 fb03 	bl	800b1c0 <HAL_TIM_ConfigClockSource>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8003bc0:	f7ff fba4 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000750 	.word	0x20000750
 8003bd0:	40014000 	.word	0x40014000

08003bd4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <MX_TIM11_Init+0x40>)
 8003bda:	4a0f      	ldr	r2, [pc, #60]	; (8003c18 <MX_TIM11_Init+0x44>)
 8003bdc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <MX_TIM11_Init+0x40>)
 8003be0:	f242 720f 	movw	r2, #9999	; 0x270f
 8003be4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <MX_TIM11_Init+0x40>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <MX_TIM11_Init+0x40>)
 8003bee:	f242 720f 	movw	r2, #9999	; 0x270f
 8003bf2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bf4:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <MX_TIM11_Init+0x40>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <MX_TIM11_Init+0x40>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003c00:	4804      	ldr	r0, [pc, #16]	; (8003c14 <MX_TIM11_Init+0x40>)
 8003c02:	f006 ff65 	bl	800aad0 <HAL_TIM_Base_Init>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8003c0c:	f7ff fb7e 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000804 	.word	0x20000804
 8003c18:	40014800 	.word	0x40014800

08003c1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d10e      	bne.n	8003c4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	4b4a      	ldr	r3, [pc, #296]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a49      	ldr	r2, [pc, #292]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003c4a:	e082      	b.n	8003d52 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM3)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a43      	ldr	r2, [pc, #268]	; (8003d60 <HAL_TIM_Base_MspInit+0x144>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d10e      	bne.n	8003c74 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	4b40      	ldr	r3, [pc, #256]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a3f      	ldr	r2, [pc, #252]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	61bb      	str	r3, [r7, #24]
 8003c70:	69bb      	ldr	r3, [r7, #24]
}
 8003c72:	e06e      	b.n	8003d52 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM4)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a3a      	ldr	r2, [pc, #232]	; (8003d64 <HAL_TIM_Base_MspInit+0x148>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d116      	bne.n	8003cac <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a35      	ldr	r2, [pc, #212]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b33      	ldr	r3, [pc, #204]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2105      	movs	r1, #5
 8003c9e:	201e      	movs	r0, #30
 8003ca0:	f001 f9ea 	bl	8005078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ca4:	201e      	movs	r0, #30
 8003ca6:	f001 fa13 	bl	80050d0 <HAL_NVIC_EnableIRQ>
}
 8003caa:	e052      	b.n	8003d52 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM5)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2d      	ldr	r2, [pc, #180]	; (8003d68 <HAL_TIM_Base_MspInit+0x14c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d116      	bne.n	8003ce4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003cc0:	f043 0308 	orr.w	r3, r3, #8
 8003cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc6:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2105      	movs	r1, #5
 8003cd6:	2032      	movs	r0, #50	; 0x32
 8003cd8:	f001 f9ce 	bl	8005078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003cdc:	2032      	movs	r0, #50	; 0x32
 8003cde:	f001 f9f7 	bl	80050d0 <HAL_NVIC_EnableIRQ>
}
 8003ce2:	e036      	b.n	8003d52 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM9)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a20      	ldr	r2, [pc, #128]	; (8003d6c <HAL_TIM_Base_MspInit+0x150>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d116      	bne.n	8003d1c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfe:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2105      	movs	r1, #5
 8003d0e:	2018      	movs	r0, #24
 8003d10:	f001 f9b2 	bl	8005078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003d14:	2018      	movs	r0, #24
 8003d16:	f001 f9db 	bl	80050d0 <HAL_NVIC_EnableIRQ>
}
 8003d1a:	e01a      	b.n	8003d52 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM11)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <HAL_TIM_Base_MspInit+0x154>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d115      	bne.n	8003d52 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	4a0b      	ldr	r2, [pc, #44]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d34:	6453      	str	r3, [r2, #68]	; 0x44
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_TIM_Base_MspInit+0x140>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2105      	movs	r1, #5
 8003d46:	201a      	movs	r0, #26
 8003d48:	f001 f996 	bl	8005078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003d4c:	201a      	movs	r0, #26
 8003d4e:	f001 f9bf 	bl	80050d0 <HAL_NVIC_EnableIRQ>
}
 8003d52:	bf00      	nop
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40000c00 	.word	0x40000c00
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014800 	.word	0x40014800

08003d74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <MX_USART1_UART_Init+0x50>)
 8003d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d9e:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003daa:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003dac:	f007 ffc0 	bl	800bd30 <HAL_UART_Init>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003db6:	f7ff faa9 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	200008b8 	.word	0x200008b8
 8003dc4:	40011000 	.word	0x40011000

08003dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2c      	ldr	r2, [pc, #176]	; (8003e98 <HAL_UART_MspInit+0xd0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d152      	bne.n	8003e90 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <HAL_UART_MspInit+0xd4>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	4a2a      	ldr	r2, [pc, #168]	; (8003e9c <HAL_UART_MspInit+0xd4>)
 8003df4:	f043 0310 	orr.w	r3, r3, #16
 8003df8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfa:	4b28      	ldr	r3, [pc, #160]	; (8003e9c <HAL_UART_MspInit+0xd4>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_UART_MspInit+0xd4>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	4a23      	ldr	r2, [pc, #140]	; (8003e9c <HAL_UART_MspInit+0xd4>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	6313      	str	r3, [r2, #48]	; 0x30
 8003e16:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <HAL_UART_MspInit+0xd4>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_UART_MspInit+0xd4>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_UART_MspInit+0xd4>)
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <HAL_UART_MspInit+0xd4>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e44:	2302      	movs	r3, #2
 8003e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e50:	2307      	movs	r3, #7
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4811      	ldr	r0, [pc, #68]	; (8003ea0 <HAL_UART_MspInit+0xd8>)
 8003e5c:	f002 f8da 	bl	8006014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e70:	2307      	movs	r3, #7
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	4619      	mov	r1, r3
 8003e7a:	480a      	ldr	r0, [pc, #40]	; (8003ea4 <HAL_UART_MspInit+0xdc>)
 8003e7c:	f002 f8ca 	bl	8006014 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003e80:	2200      	movs	r2, #0
 8003e82:	2105      	movs	r1, #5
 8003e84:	2025      	movs	r0, #37	; 0x25
 8003e86:	f001 f8f7 	bl	8005078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e8a:	2025      	movs	r0, #37	; 0x25
 8003e8c:	f001 f920 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003e90:	bf00      	nop
 8003e92:	3728      	adds	r7, #40	; 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40011000 	.word	0x40011000
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40020000 	.word	0x40020000
 8003ea4:	40020400 	.word	0x40020400

08003ea8 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <HAL_UART_RxCpltCallback+0x24>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d104      	bne.n	8003ec4 <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8003eba:	2201      	movs	r2, #1
 8003ebc:	4904      	ldr	r1, [pc, #16]	; (8003ed0 <HAL_UART_RxCpltCallback+0x28>)
 8003ebe:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <HAL_UART_RxCpltCallback+0x2c>)
 8003ec0:	f007 fffa 	bl	800beb8 <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40011000 	.word	0x40011000
 8003ed0:	20000094 	.word	0x20000094
 8003ed4:	200008b8 	.word	0x200008b8

08003ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003edc:	480d      	ldr	r0, [pc, #52]	; (8003f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ede:	490e      	ldr	r1, [pc, #56]	; (8003f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ee4:	e002      	b.n	8003eec <LoopCopyDataInit>

08003ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eea:	3304      	adds	r3, #4

08003eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ef0:	d3f9      	bcc.n	8003ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ef2:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ef4:	4c0b      	ldr	r4, [pc, #44]	; (8003f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ef8:	e001      	b.n	8003efe <LoopFillZerobss>

08003efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003efc:	3204      	adds	r2, #4

08003efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f00:	d3fb      	bcc.n	8003efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f02:	f7ff fce1 	bl	80038c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f06:	f00b ff7b 	bl	800fe00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f0a:	f7ff f92d 	bl	8003168 <main>
  bx  lr    
 8003f0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f18:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003f1c:	080108dc 	.word	0x080108dc
  ldr r2, =_sbss
 8003f20:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003f24:	20005370 	.word	0x20005370

08003f28 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f28:	e7fe      	b.n	8003f28 <DMA1_Stream0_IRQHandler>

08003f2a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003f38:	b672      	cpsid	i
}
 8003f3a:	bf00      	nop
 8003f3c:	f7ff f9e6 	bl	800330c <Error_Handler>
 8003f40:	e7fe      	b.n	8003f40 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7a1b      	ldrb	r3, [r3, #8]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d904      	bls.n	8003f54 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003f4a:	b672      	cpsid	i
}
 8003f4c:	bf00      	nop
 8003f4e:	f7ff f9dd 	bl	800330c <Error_Handler>
 8003f52:	e7fe      	b.n	8003f52 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7a1b      	ldrb	r3, [r3, #8]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	b2d1      	uxtb	r1, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	7211      	strb	r1, [r2, #8]
 8003f60:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f62:	f3ef 8211 	mrs	r2, BASEPRI
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	60fa      	str	r2, [r7, #12]
 8003f78:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003f98:	b672      	cpsid	i
}
 8003f9a:	bf00      	nop
 8003f9c:	f7ff f9b6 	bl	800330c <Error_Handler>
 8003fa0:	e7fe      	b.n	8003fa0 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7a1b      	ldrb	r3, [r3, #8]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7a1b      	ldrb	r3, [r3, #8]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d904      	bls.n	8003fc0 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb6:	b672      	cpsid	i
}
 8003fb8:	bf00      	nop
 8003fba:	f7ff f9a7 	bl	800330c <Error_Handler>
 8003fbe:	e7fe      	b.n	8003fbe <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	7a1b      	ldrb	r3, [r3, #8]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fcc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fd4:	bf00      	nop
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003fec:	b672      	cpsid	i
}
 8003fee:	bf00      	nop
 8003ff0:	f7ff f98c 	bl	800330c <Error_Handler>
 8003ff4:	e7fe      	b.n	8003ff4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff ff96 	bl	8003f2a <stm32_lock_acquire>
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004014:	b672      	cpsid	i
}
 8004016:	bf00      	nop
 8004018:	f7ff f978 	bl	800330c <Error_Handler>
 800401c:	e7fe      	b.n	800401c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ffb2 	bl	8003f8a <stm32_lock_release>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004034:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <HAL_Init+0x40>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0d      	ldr	r2, [pc, #52]	; (8004070 <HAL_Init+0x40>)
 800403a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800403e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_Init+0x40>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <HAL_Init+0x40>)
 8004046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <HAL_Init+0x40>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a07      	ldr	r2, [pc, #28]	; (8004070 <HAL_Init+0x40>)
 8004052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004058:	2003      	movs	r0, #3
 800405a:	f000 ffed 	bl	8005038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800405e:	200f      	movs	r0, #15
 8004060:	f7ff fb0c 	bl	800367c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004064:	f7ff face 	bl	8003604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023c00 	.word	0x40023c00

08004074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_IncTick+0x20>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_IncTick+0x24>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4413      	add	r3, r2
 8004084:	4a04      	ldr	r2, [pc, #16]	; (8004098 <HAL_IncTick+0x24>)
 8004086:	6013      	str	r3, [r2, #0]
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000000c 	.word	0x2000000c
 8004098:	20000938 	.word	0x20000938

0800409c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return uwTick;
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <HAL_GetTick+0x14>)
 80040a2:	681b      	ldr	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000938 	.word	0x20000938

080040b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e16f      	b.n	80043aa <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a93      	ldr	r2, [pc, #588]	; (800431c <HAL_ADC_Init+0x268>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_ADC_Init+0x2a>
 80040d4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80040d8:	4891      	ldr	r0, [pc, #580]	; (8004320 <HAL_ADC_Init+0x26c>)
 80040da:	f7ff f91c 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d013      	beq.n	800410e <HAL_ADC_Init+0x5a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ee:	d00e      	beq.n	800410e <HAL_ADC_Init+0x5a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f8:	d009      	beq.n	800410e <HAL_ADC_Init+0x5a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004102:	d004      	beq.n	800410e <HAL_ADC_Init+0x5a>
 8004104:	f240 1143 	movw	r1, #323	; 0x143
 8004108:	4885      	ldr	r0, [pc, #532]	; (8004320 <HAL_ADC_Init+0x26c>)
 800410a:	f7ff f904 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d013      	beq.n	800413e <HAL_ADC_Init+0x8a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800411e:	d00e      	beq.n	800413e <HAL_ADC_Init+0x8a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004128:	d009      	beq.n	800413e <HAL_ADC_Init+0x8a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004132:	d004      	beq.n	800413e <HAL_ADC_Init+0x8a>
 8004134:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004138:	4879      	ldr	r0, [pc, #484]	; (8004320 <HAL_ADC_Init+0x26c>)
 800413a:	f7ff f8ec 	bl	8003316 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_ADC_Init+0xa4>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d004      	beq.n	8004158 <HAL_ADC_Init+0xa4>
 800414e:	f240 1145 	movw	r1, #325	; 0x145
 8004152:	4873      	ldr	r0, [pc, #460]	; (8004320 <HAL_ADC_Init+0x26c>)
 8004154:	f7ff f8df 	bl	8003316 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7e1b      	ldrb	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_ADC_Init+0xbe>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7e1b      	ldrb	r3, [r3, #24]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d004      	beq.n	8004172 <HAL_ADC_Init+0xbe>
 8004168:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800416c:	486c      	ldr	r0, [pc, #432]	; (8004320 <HAL_ADC_Init+0x26c>)
 800416e:	f7ff f8d2 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	2b00      	cmp	r3, #0
 8004178:	d054      	beq.n	8004224 <HAL_ADC_Init+0x170>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004182:	d04f      	beq.n	8004224 <HAL_ADC_Init+0x170>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800418c:	d04a      	beq.n	8004224 <HAL_ADC_Init+0x170>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004196:	d045      	beq.n	8004224 <HAL_ADC_Init+0x170>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041a0:	d040      	beq.n	8004224 <HAL_ADC_Init+0x170>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80041aa:	d03b      	beq.n	8004224 <HAL_ADC_Init+0x170>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80041b4:	d036      	beq.n	8004224 <HAL_ADC_Init+0x170>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80041be:	d031      	beq.n	8004224 <HAL_ADC_Init+0x170>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041c8:	d02c      	beq.n	8004224 <HAL_ADC_Init+0x170>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80041d2:	d027      	beq.n	8004224 <HAL_ADC_Init+0x170>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80041dc:	d022      	beq.n	8004224 <HAL_ADC_Init+0x170>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80041e6:	d01d      	beq.n	8004224 <HAL_ADC_Init+0x170>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041f0:	d018      	beq.n	8004224 <HAL_ADC_Init+0x170>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80041fa:	d013      	beq.n	8004224 <HAL_ADC_Init+0x170>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004204:	d00e      	beq.n	8004224 <HAL_ADC_Init+0x170>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800420e:	d009      	beq.n	8004224 <HAL_ADC_Init+0x170>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	4a43      	ldr	r2, [pc, #268]	; (8004324 <HAL_ADC_Init+0x270>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_ADC_Init+0x170>
 800421a:	f240 1147 	movw	r1, #327	; 0x147
 800421e:	4840      	ldr	r0, [pc, #256]	; (8004320 <HAL_ADC_Init+0x26c>)
 8004220:	f7ff f879 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <HAL_ADC_Init+0x18c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004234:	d004      	beq.n	8004240 <HAL_ADC_Init+0x18c>
 8004236:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800423a:	4839      	ldr	r0, [pc, #228]	; (8004320 <HAL_ADC_Init+0x26c>)
 800423c:	f7ff f86b 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_ADC_Init+0x19c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	2b10      	cmp	r3, #16
 800424e:	d904      	bls.n	800425a <HAL_ADC_Init+0x1a6>
 8004250:	f240 1149 	movw	r1, #329	; 0x149
 8004254:	4832      	ldr	r0, [pc, #200]	; (8004320 <HAL_ADC_Init+0x26c>)
 8004256:	f7ff f85e 	bl	8003316 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_ADC_Init+0x1c4>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800426a:	2b01      	cmp	r3, #1
 800426c:	d004      	beq.n	8004278 <HAL_ADC_Init+0x1c4>
 800426e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004272:	482b      	ldr	r0, [pc, #172]	; (8004320 <HAL_ADC_Init+0x26c>)
 8004274:	f7ff f84f 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d00c      	beq.n	800429a <HAL_ADC_Init+0x1e6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_ADC_Init+0x1e6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d004      	beq.n	800429a <HAL_ADC_Init+0x1e6>
 8004290:	f240 114b 	movw	r1, #331	; 0x14b
 8004294:	4822      	ldr	r0, [pc, #136]	; (8004320 <HAL_ADC_Init+0x26c>)
 8004296:	f7ff f83e 	bl	8003316 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d009      	beq.n	80042b8 <HAL_ADC_Init+0x204>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d004      	beq.n	80042b8 <HAL_ADC_Init+0x204>
 80042ae:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80042b2:	481b      	ldr	r0, [pc, #108]	; (8004320 <HAL_ADC_Init+0x26c>)
 80042b4:	f7ff f82f 	bl	8003316 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	4a19      	ldr	r2, [pc, #100]	; (8004324 <HAL_ADC_Init+0x270>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d017      	beq.n	80042f2 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d013      	beq.n	80042f2 <HAL_ADC_Init+0x23e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042d2:	d00e      	beq.n	80042f2 <HAL_ADC_Init+0x23e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042dc:	d009      	beq.n	80042f2 <HAL_ADC_Init+0x23e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042e6:	d004      	beq.n	80042f2 <HAL_ADC_Init+0x23e>
 80042e8:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80042ec:	480c      	ldr	r0, [pc, #48]	; (8004320 <HAL_ADC_Init+0x26c>)
 80042ee:	f7ff f812 	bl	8003316 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d131      	bne.n	800435e <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a0a      	ldr	r2, [pc, #40]	; (8004328 <HAL_ADC_Init+0x274>)
 80042fe:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <HAL_ADC_Init+0x278>)
 8004304:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a09      	ldr	r2, [pc, #36]	; (8004330 <HAL_ADC_Init+0x27c>)
 800430a:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a09      	ldr	r2, [pc, #36]	; (8004334 <HAL_ADC_Init+0x280>)
 8004310:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a08      	ldr	r2, [pc, #32]	; (8004338 <HAL_ADC_Init+0x284>)
 8004316:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	e00f      	b.n	800433c <HAL_ADC_Init+0x288>
 800431c:	40012000 	.word	0x40012000
 8004320:	080100ac 	.word	0x080100ac
 8004324:	0f000001 	.word	0x0f000001
 8004328:	0800486d 	.word	0x0800486d
 800432c:	08004881 	.word	0x08004881
 8004330:	08004895 	.word	0x08004895
 8004334:	080048a9 	.word	0x080048a9
 8004338:	08004ec9 	.word	0x08004ec9
 800433c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_ADC_Init+0x300>)
 8004346:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	d118      	bne.n	800439c <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004372:	f023 0302 	bic.w	r3, r3, #2
 8004376:	f043 0202 	orr.w	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fc12 	bl	8004ba8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
 800439a:	e001      	b.n	80043a0 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	08002ac5 	.word	0x08002ac5

080043b8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	7e1b      	ldrb	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_ADC_IRQHandler+0x3a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	7e1b      	ldrb	r3, [r3, #24]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d004      	beq.n	80043f2 <HAL_ADC_IRQHandler+0x3a>
 80043e8:	f240 41b7 	movw	r1, #1207	; 0x4b7
 80043ec:	4892      	ldr	r0, [pc, #584]	; (8004638 <HAL_ADC_IRQHandler+0x280>)
 80043ee:	f7fe ff92 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_ADC_IRQHandler+0x4a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d904      	bls.n	800440c <HAL_ADC_IRQHandler+0x54>
 8004402:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8004406:	488c      	ldr	r0, [pc, #560]	; (8004638 <HAL_ADC_IRQHandler+0x280>)
 8004408:	f7fe ff85 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d00c      	beq.n	800442e <HAL_ADC_IRQHandler+0x76>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_ADC_IRQHandler+0x76>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d004      	beq.n	800442e <HAL_ADC_IRQHandler+0x76>
 8004424:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8004428:	4883      	ldr	r0, [pc, #524]	; (8004638 <HAL_ADC_IRQHandler+0x280>)
 800442a:	f7fe ff74 	bl	8003316 <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d04a      	beq.n	80044da <HAL_ADC_IRQHandler+0x122>
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d047      	beq.n	80044da <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d12b      	bne.n	80044c8 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004474:	2b00      	cmp	r3, #0
 8004476:	d127      	bne.n	80044c8 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004482:	2b00      	cmp	r3, #0
 8004484:	d006      	beq.n	8004494 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004490:	2b00      	cmp	r3, #0
 8004492:	d119      	bne.n	80044c8 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0220 	bic.w	r2, r2, #32
 80044a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d105      	bne.n	80044c8 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0212 	mvn.w	r2, #18
 80044d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d058      	beq.n	80045a2 <HAL_ADC_IRQHandler+0x1ea>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d055      	beq.n	80045a2 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d105      	bne.n	800450e <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d139      	bne.n	8004590 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004534:	2b00      	cmp	r3, #0
 8004536:	d12b      	bne.n	8004590 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004542:	2b00      	cmp	r3, #0
 8004544:	d124      	bne.n	8004590 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11d      	bne.n	8004590 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004558:	2b00      	cmp	r3, #0
 800455a:	d119      	bne.n	8004590 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800456a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 020c 	mvn.w	r2, #12
 80045a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d018      	beq.n	80045ea <HAL_ADC_IRQHandler+0x232>
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d015      	beq.n	80045ea <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d10e      	bne.n	80045ea <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0201 	mvn.w	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d016      	beq.n	800462e <HAL_ADC_IRQHandler+0x276>
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d013      	beq.n	800462e <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	f043 0202 	orr.w	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f06f 0220 	mvn.w	r2, #32
 800461a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0220 	mvn.w	r2, #32
 800462c:	601a      	str	r2, [r3, #0]
  }
}
 800462e:	bf00      	nop
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	080100ac 	.word	0x080100ac

0800463c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	7e1b      	ldrb	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_ADC_Start_DMA+0x2a>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	7e1b      	ldrb	r3, [r3, #24]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d004      	beq.n	8004666 <HAL_ADC_Start_DMA+0x2a>
 800465c:	f240 515a 	movw	r1, #1370	; 0x55a
 8004660:	487a      	ldr	r0, [pc, #488]	; (800484c <HAL_ADC_Start_DMA+0x210>)
 8004662:	f7fe fe58 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d013      	beq.n	8004696 <HAL_ADC_Start_DMA+0x5a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004676:	d00e      	beq.n	8004696 <HAL_ADC_Start_DMA+0x5a>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004680:	d009      	beq.n	8004696 <HAL_ADC_Start_DMA+0x5a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800468a:	d004      	beq.n	8004696 <HAL_ADC_Start_DMA+0x5a>
 800468c:	f240 515b 	movw	r1, #1371	; 0x55b
 8004690:	486e      	ldr	r0, [pc, #440]	; (800484c <HAL_ADC_Start_DMA+0x210>)
 8004692:	f7fe fe40 	bl	8003316 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_Start_DMA+0x68>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0ce      	b.n	8004842 <HAL_ADC_Start_DMA+0x206>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d018      	beq.n	80046ec <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046ca:	4b61      	ldr	r3, [pc, #388]	; (8004850 <HAL_ADC_Start_DMA+0x214>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a61      	ldr	r2, [pc, #388]	; (8004854 <HAL_ADC_Start_DMA+0x218>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	0c9a      	lsrs	r2, r3, #18
 80046d6:	4613      	mov	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80046de:	e002      	b.n	80046e6 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f9      	bne.n	80046e0 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fa:	d107      	bne.n	800470c <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800470a:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b01      	cmp	r3, #1
 8004718:	f040 8086 	bne.w	8004828 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004746:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	d106      	bne.n	800476a <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	f023 0206 	bic.w	r2, r3, #6
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	645a      	str	r2, [r3, #68]	; 0x44
 8004768:	e002      	b.n	8004770 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004778:	4b37      	ldr	r3, [pc, #220]	; (8004858 <HAL_ADC_Start_DMA+0x21c>)
 800477a:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	4a36      	ldr	r2, [pc, #216]	; (800485c <HAL_ADC_Start_DMA+0x220>)
 8004782:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	4a35      	ldr	r2, [pc, #212]	; (8004860 <HAL_ADC_Start_DMA+0x224>)
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	4a34      	ldr	r2, [pc, #208]	; (8004864 <HAL_ADC_Start_DMA+0x228>)
 8004792:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800479c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80047ac:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047bc:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	334c      	adds	r3, #76	; 0x4c
 80047c8:	4619      	mov	r1, r3
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f000 fedb 	bl	8005588 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10f      	bne.n	80047fe <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d129      	bne.n	8004840 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	e020      	b.n	8004840 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a19      	ldr	r2, [pc, #100]	; (8004868 <HAL_ADC_Start_DMA+0x22c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d11b      	bne.n	8004840 <HAL_ADC_Start_DMA+0x204>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d114      	bne.n	8004840 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004824:	609a      	str	r2, [r3, #8]
 8004826:	e00b      	b.n	8004840 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	f043 0210 	orr.w	r2, r3, #16
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	f043 0201 	orr.w	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	080100ac 	.word	0x080100ac
 8004850:	20000004 	.word	0x20000004
 8004854:	431bde83 	.word	0x431bde83
 8004858:	40012300 	.word	0x40012300
 800485c:	08004dbd 	.word	0x08004dbd
 8004860:	08004e7b 	.word	0x08004e7b
 8004864:	08004e99 	.word	0x08004e99
 8004868:	40012000 	.word	0x40012000

0800486c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b12      	cmp	r3, #18
 80048d0:	d909      	bls.n	80048e6 <HAL_ADC_ConfigChannel+0x2a>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a72      	ldr	r2, [pc, #456]	; (8004aa0 <HAL_ADC_ConfigChannel+0x1e4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_ADC_ConfigChannel+0x2a>
 80048dc:	f240 618b 	movw	r1, #1675	; 0x68b
 80048e0:	4870      	ldr	r0, [pc, #448]	; (8004aa4 <HAL_ADC_ConfigChannel+0x1e8>)
 80048e2:	f7fe fd18 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_ADC_ConfigChannel+0x3a>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d904      	bls.n	8004900 <HAL_ADC_ConfigChannel+0x44>
 80048f6:	f240 618c 	movw	r1, #1676	; 0x68c
 80048fa:	486a      	ldr	r0, [pc, #424]	; (8004aa4 <HAL_ADC_ConfigChannel+0x1e8>)
 80048fc:	f7fe fd0b 	bl	8003316 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d020      	beq.n	800494a <HAL_ADC_ConfigChannel+0x8e>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d01c      	beq.n	800494a <HAL_ADC_ConfigChannel+0x8e>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d018      	beq.n	800494a <HAL_ADC_ConfigChannel+0x8e>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d014      	beq.n	800494a <HAL_ADC_ConfigChannel+0x8e>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d010      	beq.n	800494a <HAL_ADC_ConfigChannel+0x8e>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b05      	cmp	r3, #5
 800492e:	d00c      	beq.n	800494a <HAL_ADC_ConfigChannel+0x8e>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b06      	cmp	r3, #6
 8004936:	d008      	beq.n	800494a <HAL_ADC_ConfigChannel+0x8e>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b07      	cmp	r3, #7
 800493e:	d004      	beq.n	800494a <HAL_ADC_ConfigChannel+0x8e>
 8004940:	f240 618d 	movw	r1, #1677	; 0x68d
 8004944:	4857      	ldr	r0, [pc, #348]	; (8004aa4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004946:	f7fe fce6 	bl	8003316 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x9c>
 8004954:	2302      	movs	r3, #2
 8004956:	e118      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x2ce>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b09      	cmp	r3, #9
 8004966:	d925      	bls.n	80049b4 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68d9      	ldr	r1, [r3, #12]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	4613      	mov	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	4413      	add	r3, r2
 800497c:	3b1e      	subs	r3, #30
 800497e:	2207      	movs	r2, #7
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	43da      	mvns	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	400a      	ands	r2, r1
 800498c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68d9      	ldr	r1, [r3, #12]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	4618      	mov	r0, r3
 80049a0:	4603      	mov	r3, r0
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	4403      	add	r3, r0
 80049a6:	3b1e      	subs	r3, #30
 80049a8:	409a      	lsls	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	60da      	str	r2, [r3, #12]
 80049b2:	e022      	b.n	80049fa <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6919      	ldr	r1, [r3, #16]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	4613      	mov	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4413      	add	r3, r2
 80049c8:	2207      	movs	r2, #7
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43da      	mvns	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	400a      	ands	r2, r1
 80049d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4618      	mov	r0, r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4403      	add	r3, r0
 80049f0:	409a      	lsls	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d824      	bhi.n	8004a4c <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	3b05      	subs	r3, #5
 8004a14:	221f      	movs	r2, #31
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	43da      	mvns	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	400a      	ands	r2, r1
 8004a22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3b05      	subs	r3, #5
 8004a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	635a      	str	r2, [r3, #52]	; 0x34
 8004a4a:	e051      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b0c      	cmp	r3, #12
 8004a52:	d829      	bhi.n	8004aa8 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	3b23      	subs	r3, #35	; 0x23
 8004a66:	221f      	movs	r2, #31
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43da      	mvns	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	400a      	ands	r2, r1
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	4618      	mov	r0, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3b23      	subs	r3, #35	; 0x23
 8004a90:	fa00 f203 	lsl.w	r2, r0, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a9c:	e028      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x234>
 8004a9e:	bf00      	nop
 8004aa0:	10000012 	.word	0x10000012
 8004aa4:	080100ac 	.word	0x080100ac
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3b41      	subs	r3, #65	; 0x41
 8004aba:	221f      	movs	r2, #31
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	43da      	mvns	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	400a      	ands	r2, r1
 8004ac8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3b41      	subs	r3, #65	; 0x41
 8004ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004af0:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <HAL_ADC_ConfigChannel+0x2d8>)
 8004af2:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a27      	ldr	r2, [pc, #156]	; (8004b98 <HAL_ADC_ConfigChannel+0x2dc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10f      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x262>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b12      	cmp	r3, #18
 8004b04:	d10b      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <HAL_ADC_ConfigChannel+0x2dc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d12b      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x2c4>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	; (8004b9c <HAL_ADC_ConfigChannel+0x2e0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <HAL_ADC_ConfigChannel+0x27e>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b11      	cmp	r3, #17
 8004b38:	d122      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <HAL_ADC_ConfigChannel+0x2e0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d111      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <HAL_ADC_ConfigChannel+0x2e4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <HAL_ADC_ConfigChannel+0x2e8>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	0c9a      	lsrs	r2, r3, #18
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b72:	e002      	b.n	8004b7a <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f9      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40012300 	.word	0x40012300
 8004b98:	40012000 	.word	0x40012000
 8004b9c:	10000012 	.word	0x10000012
 8004ba0:	20000004 	.word	0x20000004
 8004ba4:	431bde83 	.word	0x431bde83

08004ba8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bb0:	4b7f      	ldr	r3, [pc, #508]	; (8004db0 <ADC_Init+0x208>)
 8004bb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6859      	ldr	r1, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	021a      	lsls	r2, r3, #8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6859      	ldr	r1, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6899      	ldr	r1, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	4a5e      	ldr	r2, [pc, #376]	; (8004db4 <ADC_Init+0x20c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d022      	beq.n	8004c86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6899      	ldr	r1, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6899      	ldr	r1, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]
 8004c84:	e00f      	b.n	8004ca6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ca4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0202 	bic.w	r2, r2, #2
 8004cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6899      	ldr	r1, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	7e1b      	ldrb	r3, [r3, #24]
 8004cc0:	005a      	lsls	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d028      	beq.n	8004d26 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <ADC_Init+0x13c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d904      	bls.n	8004cee <ADC_Init+0x146>
 8004ce4:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8004ce8:	4833      	ldr	r0, [pc, #204]	; (8004db8 <ADC_Init+0x210>)
 8004cea:	f7fe fb14 	bl	8003316 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cfc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d0c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	035a      	lsls	r2, r3, #13
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
 8004d24:	e007      	b.n	8004d36 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d34:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	051a      	lsls	r2, r3, #20
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6899      	ldr	r1, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d78:	025a      	lsls	r2, r3, #9
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6899      	ldr	r1, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	029a      	lsls	r2, r3, #10
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	609a      	str	r2, [r3, #8]
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40012300 	.word	0x40012300
 8004db4:	0f000001 	.word	0x0f000001
 8004db8:	080100ac 	.word	0x080100ac

08004dbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d13d      	bne.n	8004e52 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d12b      	bne.n	8004e48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d127      	bne.n	8004e48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d006      	beq.n	8004e14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d119      	bne.n	8004e48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0220 	bic.w	r2, r2, #32
 8004e22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d105      	bne.n	8004e48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f043 0201 	orr.w	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e50:	e00f      	b.n	8004e72 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	4798      	blx	r3
}
 8004e66:	e004      	b.n	8004e72 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2240      	movs	r2, #64	; 0x40
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb0:	f043 0204 	orr.w	r2, r3, #4
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004eec:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <__NVIC_SetPriorityGrouping+0x44>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f0e:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <__NVIC_SetPriorityGrouping+0x44>)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	60d3      	str	r3, [r2, #12]
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	e000ed00 	.word	0xe000ed00

08004f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <__NVIC_GetPriorityGrouping+0x18>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	0a1b      	lsrs	r3, r3, #8
 8004f2e:	f003 0307 	and.w	r3, r3, #7
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	e000ed00 	.word	0xe000ed00

08004f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	db0b      	blt.n	8004f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	f003 021f 	and.w	r2, r3, #31
 8004f58:	4907      	ldr	r1, [pc, #28]	; (8004f78 <__NVIC_EnableIRQ+0x38>)
 8004f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	2001      	movs	r0, #1
 8004f62:	fa00 f202 	lsl.w	r2, r0, r2
 8004f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	e000e100 	.word	0xe000e100

08004f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	6039      	str	r1, [r7, #0]
 8004f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	db0a      	blt.n	8004fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	490c      	ldr	r1, [pc, #48]	; (8004fc8 <__NVIC_SetPriority+0x4c>)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	0112      	lsls	r2, r2, #4
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fa4:	e00a      	b.n	8004fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	4908      	ldr	r1, [pc, #32]	; (8004fcc <__NVIC_SetPriority+0x50>)
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	3b04      	subs	r3, #4
 8004fb4:	0112      	lsls	r2, r2, #4
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	440b      	add	r3, r1
 8004fba:	761a      	strb	r2, [r3, #24]
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	e000e100 	.word	0xe000e100
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f1c3 0307 	rsb	r3, r3, #7
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	bf28      	it	cs
 8004fee:	2304      	movcs	r3, #4
 8004ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	2b06      	cmp	r3, #6
 8004ff8:	d902      	bls.n	8005000 <NVIC_EncodePriority+0x30>
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3b03      	subs	r3, #3
 8004ffe:	e000      	b.n	8005002 <NVIC_EncodePriority+0x32>
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005004:	f04f 32ff 	mov.w	r2, #4294967295
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43da      	mvns	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	401a      	ands	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005018:	f04f 31ff 	mov.w	r1, #4294967295
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	fa01 f303 	lsl.w	r3, r1, r3
 8005022:	43d9      	mvns	r1, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005028:	4313      	orrs	r3, r2
         );
}
 800502a:	4618      	mov	r0, r3
 800502c:	3724      	adds	r7, #36	; 0x24
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b07      	cmp	r3, #7
 8005044:	d00f      	beq.n	8005066 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b06      	cmp	r3, #6
 800504a:	d00c      	beq.n	8005066 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b05      	cmp	r3, #5
 8005050:	d009      	beq.n	8005066 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d006      	beq.n	8005066 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b03      	cmp	r3, #3
 800505c:	d003      	beq.n	8005066 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800505e:	2190      	movs	r1, #144	; 0x90
 8005060:	4804      	ldr	r0, [pc, #16]	; (8005074 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005062:	f7fe f958 	bl	8003316 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff ff38 	bl	8004edc <__NVIC_SetPriorityGrouping>
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	08010120 	.word	0x08010120

08005078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b0f      	cmp	r3, #15
 800508e:	d903      	bls.n	8005098 <HAL_NVIC_SetPriority+0x20>
 8005090:	21a8      	movs	r1, #168	; 0xa8
 8005092:	480e      	ldr	r0, [pc, #56]	; (80050cc <HAL_NVIC_SetPriority+0x54>)
 8005094:	f7fe f93f 	bl	8003316 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b0f      	cmp	r3, #15
 800509c:	d903      	bls.n	80050a6 <HAL_NVIC_SetPriority+0x2e>
 800509e:	21a9      	movs	r1, #169	; 0xa9
 80050a0:	480a      	ldr	r0, [pc, #40]	; (80050cc <HAL_NVIC_SetPriority+0x54>)
 80050a2:	f7fe f938 	bl	8003316 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050a6:	f7ff ff3d 	bl	8004f24 <__NVIC_GetPriorityGrouping>
 80050aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	6978      	ldr	r0, [r7, #20]
 80050b2:	f7ff ff8d 	bl	8004fd0 <NVIC_EncodePriority>
 80050b6:	4602      	mov	r2, r0
 80050b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff ff5c 	bl	8004f7c <__NVIC_SetPriority>
}
 80050c4:	bf00      	nop
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	08010120 	.word	0x08010120

080050d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80050da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	da03      	bge.n	80050ea <HAL_NVIC_EnableIRQ+0x1a>
 80050e2:	21bc      	movs	r1, #188	; 0xbc
 80050e4:	4805      	ldr	r0, [pc, #20]	; (80050fc <HAL_NVIC_EnableIRQ+0x2c>)
 80050e6:	f7fe f916 	bl	8003316 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff ff26 	bl	8004f40 <__NVIC_EnableIRQ>
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	08010120 	.word	0x08010120

08005100 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e017      	b.n	8005142 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a0d      	ldr	r2, [pc, #52]	; (800514c <HAL_CRC_Init+0x4c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <HAL_CRC_Init+0x24>
 800511c:	2168      	movs	r1, #104	; 0x68
 800511e:	480c      	ldr	r0, [pc, #48]	; (8005150 <HAL_CRC_Init+0x50>)
 8005120:	f7fe f8f9 	bl	8003316 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	795b      	ldrb	r3, [r3, #5]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d105      	bne.n	800513a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7fd fd91 	bl	8002c5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40023000 	.word	0x40023000
 8005150:	08010198 	.word	0x08010198

08005154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005160:	f7fe ff9c 	bl	800409c <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e203      	b.n	8005578 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a8b      	ldr	r2, [pc, #556]	; (80053a4 <HAL_DMA_Init+0x250>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d04e      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a8a      	ldr	r2, [pc, #552]	; (80053a8 <HAL_DMA_Init+0x254>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d049      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a88      	ldr	r2, [pc, #544]	; (80053ac <HAL_DMA_Init+0x258>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d044      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a87      	ldr	r2, [pc, #540]	; (80053b0 <HAL_DMA_Init+0x25c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d03f      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a85      	ldr	r2, [pc, #532]	; (80053b4 <HAL_DMA_Init+0x260>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d03a      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a84      	ldr	r2, [pc, #528]	; (80053b8 <HAL_DMA_Init+0x264>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d035      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a82      	ldr	r2, [pc, #520]	; (80053bc <HAL_DMA_Init+0x268>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d030      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a81      	ldr	r2, [pc, #516]	; (80053c0 <HAL_DMA_Init+0x26c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d02b      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a7f      	ldr	r2, [pc, #508]	; (80053c4 <HAL_DMA_Init+0x270>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d026      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a7e      	ldr	r2, [pc, #504]	; (80053c8 <HAL_DMA_Init+0x274>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d021      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a7c      	ldr	r2, [pc, #496]	; (80053cc <HAL_DMA_Init+0x278>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01c      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a7b      	ldr	r2, [pc, #492]	; (80053d0 <HAL_DMA_Init+0x27c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d017      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a79      	ldr	r2, [pc, #484]	; (80053d4 <HAL_DMA_Init+0x280>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d012      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a78      	ldr	r2, [pc, #480]	; (80053d8 <HAL_DMA_Init+0x284>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00d      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a76      	ldr	r2, [pc, #472]	; (80053dc <HAL_DMA_Init+0x288>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d008      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a75      	ldr	r2, [pc, #468]	; (80053e0 <HAL_DMA_Init+0x28c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <HAL_DMA_Init+0xc4>
 8005210:	21b7      	movs	r1, #183	; 0xb7
 8005212:	4874      	ldr	r0, [pc, #464]	; (80053e4 <HAL_DMA_Init+0x290>)
 8005214:	f7fe f87f 	bl	8003316 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d026      	beq.n	800526e <HAL_DMA_Init+0x11a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005228:	d021      	beq.n	800526e <HAL_DMA_Init+0x11a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005232:	d01c      	beq.n	800526e <HAL_DMA_Init+0x11a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800523c:	d017      	beq.n	800526e <HAL_DMA_Init+0x11a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005246:	d012      	beq.n	800526e <HAL_DMA_Init+0x11a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005250:	d00d      	beq.n	800526e <HAL_DMA_Init+0x11a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800525a:	d008      	beq.n	800526e <HAL_DMA_Init+0x11a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005264:	d003      	beq.n	800526e <HAL_DMA_Init+0x11a>
 8005266:	21b8      	movs	r1, #184	; 0xb8
 8005268:	485e      	ldr	r0, [pc, #376]	; (80053e4 <HAL_DMA_Init+0x290>)
 800526a:	f7fe f854 	bl	8003316 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <HAL_DMA_Init+0x13a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b40      	cmp	r3, #64	; 0x40
 800527c:	d007      	beq.n	800528e <HAL_DMA_Init+0x13a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b80      	cmp	r3, #128	; 0x80
 8005284:	d003      	beq.n	800528e <HAL_DMA_Init+0x13a>
 8005286:	21b9      	movs	r1, #185	; 0xb9
 8005288:	4856      	ldr	r0, [pc, #344]	; (80053e4 <HAL_DMA_Init+0x290>)
 800528a:	f7fe f844 	bl	8003316 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005296:	d007      	beq.n	80052a8 <HAL_DMA_Init+0x154>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_DMA_Init+0x154>
 80052a0:	21ba      	movs	r1, #186	; 0xba
 80052a2:	4850      	ldr	r0, [pc, #320]	; (80053e4 <HAL_DMA_Init+0x290>)
 80052a4:	f7fe f837 	bl	8003316 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b0:	d007      	beq.n	80052c2 <HAL_DMA_Init+0x16e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_DMA_Init+0x16e>
 80052ba:	21bb      	movs	r1, #187	; 0xbb
 80052bc:	4849      	ldr	r0, [pc, #292]	; (80053e4 <HAL_DMA_Init+0x290>)
 80052be:	f7fe f82a 	bl	8003316 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00d      	beq.n	80052e6 <HAL_DMA_Init+0x192>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d2:	d008      	beq.n	80052e6 <HAL_DMA_Init+0x192>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052dc:	d003      	beq.n	80052e6 <HAL_DMA_Init+0x192>
 80052de:	21bc      	movs	r1, #188	; 0xbc
 80052e0:	4840      	ldr	r0, [pc, #256]	; (80053e4 <HAL_DMA_Init+0x290>)
 80052e2:	f7fe f818 	bl	8003316 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <HAL_DMA_Init+0x1b6>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f6:	d008      	beq.n	800530a <HAL_DMA_Init+0x1b6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005300:	d003      	beq.n	800530a <HAL_DMA_Init+0x1b6>
 8005302:	21bd      	movs	r1, #189	; 0xbd
 8005304:	4837      	ldr	r0, [pc, #220]	; (80053e4 <HAL_DMA_Init+0x290>)
 8005306:	f7fe f806 	bl	8003316 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <HAL_DMA_Init+0x1d8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531a:	d007      	beq.n	800532c <HAL_DMA_Init+0x1d8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2b20      	cmp	r3, #32
 8005322:	d003      	beq.n	800532c <HAL_DMA_Init+0x1d8>
 8005324:	21be      	movs	r1, #190	; 0xbe
 8005326:	482f      	ldr	r0, [pc, #188]	; (80053e4 <HAL_DMA_Init+0x290>)
 8005328:	f7fd fff5 	bl	8003316 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d012      	beq.n	800535a <HAL_DMA_Init+0x206>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533c:	d00d      	beq.n	800535a <HAL_DMA_Init+0x206>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005346:	d008      	beq.n	800535a <HAL_DMA_Init+0x206>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005350:	d003      	beq.n	800535a <HAL_DMA_Init+0x206>
 8005352:	21bf      	movs	r1, #191	; 0xbf
 8005354:	4823      	ldr	r0, [pc, #140]	; (80053e4 <HAL_DMA_Init+0x290>)
 8005356:	f7fd ffde 	bl	8003316 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <HAL_DMA_Init+0x21e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b04      	cmp	r3, #4
 8005368:	d003      	beq.n	8005372 <HAL_DMA_Init+0x21e>
 800536a:	21c0      	movs	r1, #192	; 0xc0
 800536c:	481d      	ldr	r0, [pc, #116]	; (80053e4 <HAL_DMA_Init+0x290>)
 800536e:	f7fd ffd2 	bl	8003316 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d064      	beq.n	8005444 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d032      	beq.n	80053e8 <HAL_DMA_Init+0x294>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	2b01      	cmp	r3, #1
 8005388:	d02e      	beq.n	80053e8 <HAL_DMA_Init+0x294>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	2b02      	cmp	r3, #2
 8005390:	d02a      	beq.n	80053e8 <HAL_DMA_Init+0x294>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	2b03      	cmp	r3, #3
 8005398:	d026      	beq.n	80053e8 <HAL_DMA_Init+0x294>
 800539a:	21c5      	movs	r1, #197	; 0xc5
 800539c:	4811      	ldr	r0, [pc, #68]	; (80053e4 <HAL_DMA_Init+0x290>)
 800539e:	f7fd ffba 	bl	8003316 <assert_failed>
 80053a2:	e021      	b.n	80053e8 <HAL_DMA_Init+0x294>
 80053a4:	40026010 	.word	0x40026010
 80053a8:	40026028 	.word	0x40026028
 80053ac:	40026040 	.word	0x40026040
 80053b0:	40026058 	.word	0x40026058
 80053b4:	40026070 	.word	0x40026070
 80053b8:	40026088 	.word	0x40026088
 80053bc:	400260a0 	.word	0x400260a0
 80053c0:	400260b8 	.word	0x400260b8
 80053c4:	40026410 	.word	0x40026410
 80053c8:	40026428 	.word	0x40026428
 80053cc:	40026440 	.word	0x40026440
 80053d0:	40026458 	.word	0x40026458
 80053d4:	40026470 	.word	0x40026470
 80053d8:	40026488 	.word	0x40026488
 80053dc:	400264a0 	.word	0x400264a0
 80053e0:	400264b8 	.word	0x400264b8
 80053e4:	0801020c 	.word	0x0801020c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d012      	beq.n	8005416 <HAL_DMA_Init+0x2c2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053f8:	d00d      	beq.n	8005416 <HAL_DMA_Init+0x2c2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005402:	d008      	beq.n	8005416 <HAL_DMA_Init+0x2c2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800540c:	d003      	beq.n	8005416 <HAL_DMA_Init+0x2c2>
 800540e:	21c6      	movs	r1, #198	; 0xc6
 8005410:	485b      	ldr	r0, [pc, #364]	; (8005580 <HAL_DMA_Init+0x42c>)
 8005412:	f7fd ff80 	bl	8003316 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	2b00      	cmp	r3, #0
 800541c:	d012      	beq.n	8005444 <HAL_DMA_Init+0x2f0>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005426:	d00d      	beq.n	8005444 <HAL_DMA_Init+0x2f0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005430:	d008      	beq.n	8005444 <HAL_DMA_Init+0x2f0>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800543a:	d003      	beq.n	8005444 <HAL_DMA_Init+0x2f0>
 800543c:	21c7      	movs	r1, #199	; 0xc7
 800543e:	4850      	ldr	r0, [pc, #320]	; (8005580 <HAL_DMA_Init+0x42c>)
 8005440:	f7fd ff69 	bl	8003316 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005464:	e00f      	b.n	8005486 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005466:	f7fe fe19 	bl	800409c <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b05      	cmp	r3, #5
 8005472:	d908      	bls.n	8005486 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2203      	movs	r2, #3
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e078      	b.n	8005578 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e8      	bne.n	8005466 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4b39      	ldr	r3, [pc, #228]	; (8005584 <HAL_DMA_Init+0x430>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d107      	bne.n	80054f0 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	4313      	orrs	r3, r2
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b04      	cmp	r3, #4
 8005518:	d117      	bne.n	800554a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fb1f 	bl	8005b70 <DMA_CheckFifoParam>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2240      	movs	r2, #64	; 0x40
 800553c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005546:	2301      	movs	r3, #1
 8005548:	e016      	b.n	8005578 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fad6 	bl	8005b04 <DMA_CalcBaseAndBitshift>
 8005558:	4603      	mov	r3, r0
 800555a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005560:	223f      	movs	r2, #63	; 0x3f
 8005562:	409a      	lsls	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	0801020c 	.word	0x0801020c
 8005584:	f010803f 	.word	0xf010803f

08005588 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_DMA_Start_IT+0x26>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ac:	d304      	bcc.n	80055b8 <HAL_DMA_Start_IT+0x30>
 80055ae:	f240 11cb 	movw	r1, #459	; 0x1cb
 80055b2:	4827      	ldr	r0, [pc, #156]	; (8005650 <HAL_DMA_Start_IT+0xc8>)
 80055b4:	f7fd feaf 	bl	8003316 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_DMA_Start_IT+0x3e>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e040      	b.n	8005648 <HAL_DMA_Start_IT+0xc0>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d12f      	bne.n	800563a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fa5a 	bl	8005aa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f8:	223f      	movs	r2, #63	; 0x3f
 80055fa:	409a      	lsls	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0216 	orr.w	r2, r2, #22
 800560e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0208 	orr.w	r2, r2, #8
 8005626:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	e005      	b.n	8005646 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005642:	2302      	movs	r3, #2
 8005644:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005646:	7dfb      	ldrb	r3, [r7, #23]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	0801020c 	.word	0x0801020c

08005654 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005660:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005662:	f7fe fd1b 	bl	800409c <HAL_GetTick>
 8005666:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d008      	beq.n	8005686 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2280      	movs	r2, #128	; 0x80
 8005678:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e052      	b.n	800572c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0216 	bic.w	r2, r2, #22
 8005694:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d103      	bne.n	80056b6 <HAL_DMA_Abort+0x62>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0208 	bic.w	r2, r2, #8
 80056c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056d6:	e013      	b.n	8005700 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056d8:	f7fe fce0 	bl	800409c <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b05      	cmp	r3, #5
 80056e4:	d90c      	bls.n	8005700 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2203      	movs	r2, #3
 80056f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e015      	b.n	800572c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e4      	bne.n	80056d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005712:	223f      	movs	r2, #63	; 0x3f
 8005714:	409a      	lsls	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d004      	beq.n	8005752 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2280      	movs	r2, #128	; 0x80
 800574c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e00c      	b.n	800576c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2205      	movs	r2, #5
 8005756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0201 	bic.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005784:	4b8e      	ldr	r3, [pc, #568]	; (80059c0 <HAL_DMA_IRQHandler+0x248>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a8e      	ldr	r2, [pc, #568]	; (80059c4 <HAL_DMA_IRQHandler+0x24c>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	0a9b      	lsrs	r3, r3, #10
 8005790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a2:	2208      	movs	r2, #8
 80057a4:	409a      	lsls	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d01a      	beq.n	80057e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d013      	beq.n	80057e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0204 	bic.w	r2, r2, #4
 80057ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d0:	2208      	movs	r2, #8
 80057d2:	409a      	lsls	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	f043 0201 	orr.w	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e8:	2201      	movs	r2, #1
 80057ea:	409a      	lsls	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d012      	beq.n	800581a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005806:	2201      	movs	r2, #1
 8005808:	409a      	lsls	r2, r3
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	f043 0202 	orr.w	r2, r3, #2
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800581e:	2204      	movs	r2, #4
 8005820:	409a      	lsls	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4013      	ands	r3, r2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d012      	beq.n	8005850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00b      	beq.n	8005850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	2204      	movs	r2, #4
 800583e:	409a      	lsls	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005848:	f043 0204 	orr.w	r2, r3, #4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005854:	2210      	movs	r2, #16
 8005856:	409a      	lsls	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d043      	beq.n	80058e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d03c      	beq.n	80058e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005872:	2210      	movs	r2, #16
 8005874:	409a      	lsls	r2, r3
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d018      	beq.n	80058ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d108      	bne.n	80058a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d024      	beq.n	80058e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	4798      	blx	r3
 80058a6:	e01f      	b.n	80058e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01b      	beq.n	80058e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
 80058b8:	e016      	b.n	80058e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d107      	bne.n	80058d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0208 	bic.w	r2, r2, #8
 80058d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ec:	2220      	movs	r2, #32
 80058ee:	409a      	lsls	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 808f 	beq.w	8005a18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8087 	beq.w	8005a18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590e:	2220      	movs	r2, #32
 8005910:	409a      	lsls	r2, r3
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b05      	cmp	r3, #5
 8005920:	d136      	bne.n	8005990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0216 	bic.w	r2, r2, #22
 8005930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <HAL_DMA_IRQHandler+0x1da>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0208 	bic.w	r2, r2, #8
 8005960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005966:	223f      	movs	r2, #63	; 0x3f
 8005968:	409a      	lsls	r2, r3
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005982:	2b00      	cmp	r3, #0
 8005984:	d07e      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
        }
        return;
 800598e:	e079      	b.n	8005a84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01d      	beq.n	80059da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10d      	bne.n	80059c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d031      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	4798      	blx	r3
 80059bc:	e02c      	b.n	8005a18 <HAL_DMA_IRQHandler+0x2a0>
 80059be:	bf00      	nop
 80059c0:	20000004 	.word	0x20000004
 80059c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d023      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4798      	blx	r3
 80059d8:	e01e      	b.n	8005a18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10f      	bne.n	8005a08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0210 	bic.w	r2, r2, #16
 80059f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d032      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d022      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2205      	movs	r2, #5
 8005a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d307      	bcc.n	8005a60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1f2      	bne.n	8005a44 <HAL_DMA_IRQHandler+0x2cc>
 8005a5e:	e000      	b.n	8005a62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	4798      	blx	r3
 8005a82:	e000      	b.n	8005a86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a84:	bf00      	nop
    }
  }
}
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a9a:	b2db      	uxtb	r3, r3
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ac4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d108      	bne.n	8005ae8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ae6:	e007      	b.n	8005af8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	60da      	str	r2, [r3, #12]
}
 8005af8:	bf00      	nop
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	3b10      	subs	r3, #16
 8005b14:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <DMA_CalcBaseAndBitshift+0x64>)
 8005b16:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b1e:	4a13      	ldr	r2, [pc, #76]	; (8005b6c <DMA_CalcBaseAndBitshift+0x68>)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d909      	bls.n	8005b46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	1d1a      	adds	r2, r3, #4
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	659a      	str	r2, [r3, #88]	; 0x58
 8005b44:	e007      	b.n	8005b56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	aaaaaaab 	.word	0xaaaaaaab
 8005b6c:	08010864 	.word	0x08010864

08005b70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d11f      	bne.n	8005bca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d856      	bhi.n	8005c3e <DMA_CheckFifoParam+0xce>
 8005b90:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <DMA_CheckFifoParam+0x28>)
 8005b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b96:	bf00      	nop
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005bbb 	.word	0x08005bbb
 8005ba0:	08005ba9 	.word	0x08005ba9
 8005ba4:	08005c3f 	.word	0x08005c3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d046      	beq.n	8005c42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb8:	e043      	b.n	8005c42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bc2:	d140      	bne.n	8005c46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bc8:	e03d      	b.n	8005c46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd2:	d121      	bne.n	8005c18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d837      	bhi.n	8005c4a <DMA_CheckFifoParam+0xda>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <DMA_CheckFifoParam+0x70>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005bf1 	.word	0x08005bf1
 8005be4:	08005bf7 	.word	0x08005bf7
 8005be8:	08005bf1 	.word	0x08005bf1
 8005bec:	08005c09 	.word	0x08005c09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf4:	e030      	b.n	8005c58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d025      	beq.n	8005c4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c06:	e022      	b.n	8005c4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c10:	d11f      	bne.n	8005c52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c16:	e01c      	b.n	8005c52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d903      	bls.n	8005c26 <DMA_CheckFifoParam+0xb6>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d003      	beq.n	8005c2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c24:	e018      	b.n	8005c58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2a:	e015      	b.n	8005c58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00e      	beq.n	8005c56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3c:	e00b      	b.n	8005c56 <DMA_CheckFifoParam+0xe6>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e00a      	b.n	8005c58 <DMA_CheckFifoParam+0xe8>
      break;
 8005c42:	bf00      	nop
 8005c44:	e008      	b.n	8005c58 <DMA_CheckFifoParam+0xe8>
      break;
 8005c46:	bf00      	nop
 8005c48:	e006      	b.n	8005c58 <DMA_CheckFifoParam+0xe8>
      break;
 8005c4a:	bf00      	nop
 8005c4c:	e004      	b.n	8005c58 <DMA_CheckFifoParam+0xe8>
      break;
 8005c4e:	bf00      	nop
 8005c50:	e002      	b.n	8005c58 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c52:	bf00      	nop
 8005c54:	e000      	b.n	8005c58 <DMA_CheckFifoParam+0xe8>
      break;
 8005c56:	bf00      	nop
    }
  } 
  
  return status; 
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop

08005c68 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005c72:	4b4b      	ldr	r3, [pc, #300]	; (8005da0 <HAL_FLASH_IRQHandler+0x138>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d020      	beq.n	8005cc0 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005c7e:	4b49      	ldr	r3, [pc, #292]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d107      	bne.n	8005c98 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8005c88:	4b46      	ldr	r3, [pc, #280]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8005c8e:	4b45      	ldr	r3, [pc, #276]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005c90:	f04f 32ff 	mov.w	r2, #4294967295
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	e00b      	b.n	8005cb0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8005c98:	4b42      	ldr	r3, [pc, #264]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d103      	bne.n	8005caa <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8005ca2:	4b40      	ldr	r3, [pc, #256]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	e002      	b.n	8005cb0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8005caa:	4b3e      	ldr	r3, [pc, #248]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005cb0:	f000 f88e 	bl	8005dd0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f881 	bl	8005dbc <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005cba:	4b3a      	ldr	r3, [pc, #232]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005cc0:	4b37      	ldr	r3, [pc, #220]	; (8005da0 <HAL_FLASH_IRQHandler+0x138>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d04a      	beq.n	8005d62 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ccc:	4b34      	ldr	r3, [pc, #208]	; (8005da0 <HAL_FLASH_IRQHandler+0x138>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005cd2:	4b34      	ldr	r3, [pc, #208]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d12d      	bne.n	8005d38 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8005cdc:	4b31      	ldr	r3, [pc, #196]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	4a30      	ldr	r2, [pc, #192]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005ce4:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8005ce6:	4b2f      	ldr	r3, [pc, #188]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d015      	beq.n	8005d1a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8005cee:	4b2d      	ldr	r3, [pc, #180]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f857 	bl	8005da8 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8005cfa:	4b2a      	ldr	r3, [pc, #168]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	4a28      	ldr	r2, [pc, #160]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d02:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8005d04:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8005d0a:	4b26      	ldr	r3, [pc, #152]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d0c:	7a1b      	ldrb	r3, [r3, #8]
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f8c2 	bl	8005e9c <FLASH_Erase_Sector>
 8005d18:	e023      	b.n	8005d62 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8005d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1e:	607b      	str	r3, [r7, #4]
 8005d20:	4a20      	ldr	r2, [pc, #128]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005d26:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005d2c:	f000 f92c 	bl	8005f88 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f839 	bl	8005da8 <HAL_FLASH_EndOfOperationCallback>
 8005d36:	e014      	b.n	8005d62 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8005d38:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d107      	bne.n	8005d52 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005d42:	f000 f921 	bl	8005f88 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8005d46:	4b17      	ldr	r3, [pc, #92]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f82c 	bl	8005da8 <HAL_FLASH_EndOfOperationCallback>
 8005d50:	e004      	b.n	8005d5c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f826 	bl	8005da8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005d5c:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005d62:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d114      	bne.n	8005d96 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <HAL_FLASH_IRQHandler+0x138>)
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <HAL_FLASH_IRQHandler+0x138>)
 8005d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d76:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8005d78:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <HAL_FLASH_IRQHandler+0x138>)
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	4a08      	ldr	r2, [pc, #32]	; (8005da0 <HAL_FLASH_IRQHandler+0x138>)
 8005d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d82:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <HAL_FLASH_IRQHandler+0x138>)
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	4a05      	ldr	r2, [pc, #20]	; (8005da0 <HAL_FLASH_IRQHandler+0x138>)
 8005d8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d8e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005d90:	4b04      	ldr	r3, [pc, #16]	; (8005da4 <HAL_FLASH_IRQHandler+0x13c>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	761a      	strb	r2, [r3, #24]
  }
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	40023c00 	.word	0x40023c00
 8005da4:	2000093c 	.word	0x2000093c

08005da8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005dd4:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005de0:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f043 0310 	orr.w	r3, r3, #16
 8005de8:	4a2b      	ldr	r2, [pc, #172]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005dea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005dec:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005dee:	2210      	movs	r2, #16
 8005df0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005df2:	4b28      	ldr	r3, [pc, #160]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d008      	beq.n	8005e10 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005dfe:	4b26      	ldr	r3, [pc, #152]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f043 0308 	orr.w	r3, r3, #8
 8005e06:	4a24      	ldr	r2, [pc, #144]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005e08:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005e10:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d008      	beq.n	8005e2e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005e1c:	4b1e      	ldr	r3, [pc, #120]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f043 0304 	orr.w	r3, r3, #4
 8005e24:	4a1c      	ldr	r2, [pc, #112]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005e26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005e28:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005e2a:	2240      	movs	r2, #64	; 0x40
 8005e2c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005e2e:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005e3a:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f043 0302 	orr.w	r3, r3, #2
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005e44:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005e46:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005e48:	2280      	movs	r2, #128	; 0x80
 8005e4a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005e4c:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005e58:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	4a0d      	ldr	r2, [pc, #52]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005e62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e6a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005e6c:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d008      	beq.n	8005e8a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005e78:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	f043 0320 	orr.w	r3, r3, #32
 8005e80:	4a05      	ldr	r2, [pc, #20]	; (8005e98 <FLASH_SetErrorCode+0xc8>)
 8005e82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005e84:	4b03      	ldr	r3, [pc, #12]	; (8005e94 <FLASH_SetErrorCode+0xc4>)
 8005e86:	2202      	movs	r2, #2
 8005e88:	60da      	str	r2, [r3, #12]
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	40023c00 	.word	0x40023c00
 8005e98:	2000093c 	.word	0x2000093c

08005e9c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d019      	beq.n	8005ee6 <FLASH_Erase_Sector+0x4a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d016      	beq.n	8005ee6 <FLASH_Erase_Sector+0x4a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d013      	beq.n	8005ee6 <FLASH_Erase_Sector+0x4a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d010      	beq.n	8005ee6 <FLASH_Erase_Sector+0x4a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d00d      	beq.n	8005ee6 <FLASH_Erase_Sector+0x4a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b05      	cmp	r3, #5
 8005ece:	d00a      	beq.n	8005ee6 <FLASH_Erase_Sector+0x4a>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b06      	cmp	r3, #6
 8005ed4:	d007      	beq.n	8005ee6 <FLASH_Erase_Sector+0x4a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b07      	cmp	r3, #7
 8005eda:	d004      	beq.n	8005ee6 <FLASH_Erase_Sector+0x4a>
 8005edc:	f240 31d9 	movw	r1, #985	; 0x3d9
 8005ee0:	4827      	ldr	r0, [pc, #156]	; (8005f80 <FLASH_Erase_Sector+0xe4>)
 8005ee2:	f7fd fa18 	bl	8003316 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <FLASH_Erase_Sector+0x6c>
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d00a      	beq.n	8005f08 <FLASH_Erase_Sector+0x6c>
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d007      	beq.n	8005f08 <FLASH_Erase_Sector+0x6c>
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d004      	beq.n	8005f08 <FLASH_Erase_Sector+0x6c>
 8005efe:	f240 31da 	movw	r1, #986	; 0x3da
 8005f02:	481f      	ldr	r0, [pc, #124]	; (8005f80 <FLASH_Erase_Sector+0xe4>)
 8005f04:	f7fd fa07 	bl	8003316 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d102      	bne.n	8005f14 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	e010      	b.n	8005f36 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d103      	bne.n	8005f22 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e009      	b.n	8005f36 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d103      	bne.n	8005f30 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e002      	b.n	8005f36 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005f30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f34:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <FLASH_Erase_Sector+0xe8>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	4a12      	ldr	r2, [pc, #72]	; (8005f84 <FLASH_Erase_Sector+0xe8>)
 8005f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <FLASH_Erase_Sector+0xe8>)
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	490f      	ldr	r1, [pc, #60]	; (8005f84 <FLASH_Erase_Sector+0xe8>)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <FLASH_Erase_Sector+0xe8>)
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	4a0c      	ldr	r2, [pc, #48]	; (8005f84 <FLASH_Erase_Sector+0xe8>)
 8005f54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005f58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <FLASH_Erase_Sector+0xe8>)
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4313      	orrs	r3, r2
 8005f64:	4a07      	ldr	r2, [pc, #28]	; (8005f84 <FLASH_Erase_Sector+0xe8>)
 8005f66:	f043 0302 	orr.w	r3, r3, #2
 8005f6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <FLASH_Erase_Sector+0xe8>)
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	4a04      	ldr	r2, [pc, #16]	; (8005f84 <FLASH_Erase_Sector+0xe8>)
 8005f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f76:	6113      	str	r3, [r2, #16]
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	08010280 	.word	0x08010280
 8005f84:	40023c00 	.word	0x40023c00

08005f88 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005f8c:	4b20      	ldr	r3, [pc, #128]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d017      	beq.n	8005fc8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005f98:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005f9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fa2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005fa4:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a19      	ldr	r2, [pc, #100]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005faa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	4b17      	ldr	r3, [pc, #92]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a16      	ldr	r2, [pc, #88]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fbc:	4b14      	ldr	r3, [pc, #80]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a13      	ldr	r2, [pc, #76]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fc6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005fc8:	4b11      	ldr	r3, [pc, #68]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d017      	beq.n	8006004 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005fd4:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a0d      	ldr	r2, [pc, #52]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fde:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a0a      	ldr	r2, [pc, #40]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	4b08      	ldr	r3, [pc, #32]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a07      	ldr	r2, [pc, #28]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ff6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a04      	ldr	r2, [pc, #16]	; (8006010 <FLASH_FlushCaches+0x88>)
 8005ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006002:	6013      	str	r3, [r2, #0]
  }
}
 8006004:	bf00      	nop
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40023c00 	.word	0x40023c00

08006014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006022:	2300      	movs	r3, #0
 8006024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006026:	2300      	movs	r3, #0
 8006028:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a33      	ldr	r2, [pc, #204]	; (80060fc <HAL_GPIO_Init+0xe8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d017      	beq.n	8006062 <HAL_GPIO_Init+0x4e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a32      	ldr	r2, [pc, #200]	; (8006100 <HAL_GPIO_Init+0xec>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <HAL_GPIO_Init+0x4e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a31      	ldr	r2, [pc, #196]	; (8006104 <HAL_GPIO_Init+0xf0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00f      	beq.n	8006062 <HAL_GPIO_Init+0x4e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a30      	ldr	r2, [pc, #192]	; (8006108 <HAL_GPIO_Init+0xf4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00b      	beq.n	8006062 <HAL_GPIO_Init+0x4e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2f      	ldr	r2, [pc, #188]	; (800610c <HAL_GPIO_Init+0xf8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <HAL_GPIO_Init+0x4e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2e      	ldr	r2, [pc, #184]	; (8006110 <HAL_GPIO_Init+0xfc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d003      	beq.n	8006062 <HAL_GPIO_Init+0x4e>
 800605a:	21ac      	movs	r1, #172	; 0xac
 800605c:	482d      	ldr	r0, [pc, #180]	; (8006114 <HAL_GPIO_Init+0x100>)
 800605e:	f7fd f95a 	bl	8003316 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <HAL_GPIO_Init+0x64>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	041b      	lsls	r3, r3, #16
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_GPIO_Init+0x6c>
 8006078:	21ad      	movs	r1, #173	; 0xad
 800607a:	4826      	ldr	r0, [pc, #152]	; (8006114 <HAL_GPIO_Init+0x100>)
 800607c:	f7fd f94b 	bl	8003316 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d035      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d031      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b11      	cmp	r3, #17
 8006096:	d02d      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d029      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b12      	cmp	r3, #18
 80060a6:	d025      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80060b0:	d020      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80060ba:	d01b      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80060c4:	d016      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80060ce:	d011      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80060d8:	d00c      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80060e2:	d007      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d003      	beq.n	80060f4 <HAL_GPIO_Init+0xe0>
 80060ec:	21ae      	movs	r1, #174	; 0xae
 80060ee:	4809      	ldr	r0, [pc, #36]	; (8006114 <HAL_GPIO_Init+0x100>)
 80060f0:	f7fd f911 	bl	8003316 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e20c      	b.n	8006514 <HAL_GPIO_Init+0x500>
 80060fa:	bf00      	nop
 80060fc:	40020000 	.word	0x40020000
 8006100:	40020400 	.word	0x40020400
 8006104:	40020800 	.word	0x40020800
 8006108:	40020c00 	.word	0x40020c00
 800610c:	40021000 	.word	0x40021000
 8006110:	40021c00 	.word	0x40021c00
 8006114:	080102f8 	.word	0x080102f8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006118:	2201      	movs	r2, #1
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4013      	ands	r3, r2
 800612a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	429a      	cmp	r2, r3
 8006132:	f040 81ec 	bne.w	800650e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b01      	cmp	r3, #1
 8006140:	d005      	beq.n	800614e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800614a:	2b02      	cmp	r3, #2
 800614c:	d144      	bne.n	80061d8 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00f      	beq.n	8006176 <HAL_GPIO_Init+0x162>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d00b      	beq.n	8006176 <HAL_GPIO_Init+0x162>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d007      	beq.n	8006176 <HAL_GPIO_Init+0x162>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b03      	cmp	r3, #3
 800616c:	d003      	beq.n	8006176 <HAL_GPIO_Init+0x162>
 800616e:	21c0      	movs	r1, #192	; 0xc0
 8006170:	4884      	ldr	r0, [pc, #528]	; (8006384 <HAL_GPIO_Init+0x370>)
 8006172:	f7fd f8d0 	bl	8003316 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	2203      	movs	r2, #3
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	43db      	mvns	r3, r3
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4013      	ands	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4313      	orrs	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061ac:	2201      	movs	r2, #1
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	43db      	mvns	r3, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4013      	ands	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	091b      	lsrs	r3, r3, #4
 80061c2:	f003 0201 	and.w	r2, r3, #1
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	fa02 f303 	lsl.w	r3, r2, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f003 0303 	and.w	r3, r3, #3
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d027      	beq.n	8006234 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <HAL_GPIO_Init+0x1f0>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d007      	beq.n	8006204 <HAL_GPIO_Init+0x1f0>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d003      	beq.n	8006204 <HAL_GPIO_Init+0x1f0>
 80061fc:	21d1      	movs	r1, #209	; 0xd1
 80061fe:	4861      	ldr	r0, [pc, #388]	; (8006384 <HAL_GPIO_Init+0x370>)
 8006200:	f7fd f889 	bl	8003316 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	2203      	movs	r2, #3
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	4313      	orrs	r3, r2
 800622c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b02      	cmp	r3, #2
 800623e:	f040 80a3 	bne.w	8006388 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d077      	beq.n	800633a <HAL_GPIO_Init+0x326>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b09      	cmp	r3, #9
 8006250:	d073      	beq.n	800633a <HAL_GPIO_Init+0x326>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d06f      	beq.n	800633a <HAL_GPIO_Init+0x326>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d06b      	beq.n	800633a <HAL_GPIO_Init+0x326>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d067      	beq.n	800633a <HAL_GPIO_Init+0x326>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d063      	beq.n	800633a <HAL_GPIO_Init+0x326>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d05f      	beq.n	800633a <HAL_GPIO_Init+0x326>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d05b      	beq.n	800633a <HAL_GPIO_Init+0x326>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b02      	cmp	r3, #2
 8006288:	d057      	beq.n	800633a <HAL_GPIO_Init+0x326>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d053      	beq.n	800633a <HAL_GPIO_Init+0x326>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d04f      	beq.n	800633a <HAL_GPIO_Init+0x326>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d04b      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d047      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d043      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	d03f      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b05      	cmp	r3, #5
 80062c0:	d03b      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b05      	cmp	r3, #5
 80062c8:	d037      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b06      	cmp	r3, #6
 80062d0:	d033      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b06      	cmp	r3, #6
 80062d8:	d02f      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d02b      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b06      	cmp	r3, #6
 80062e8:	d027      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b07      	cmp	r3, #7
 80062f0:	d023      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b07      	cmp	r3, #7
 80062f8:	d01f      	beq.n	800633a <HAL_GPIO_Init+0x326>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b07      	cmp	r3, #7
 8006300:	d01b      	beq.n	800633a <HAL_GPIO_Init+0x326>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b08      	cmp	r3, #8
 8006308:	d017      	beq.n	800633a <HAL_GPIO_Init+0x326>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b0a      	cmp	r3, #10
 8006310:	d013      	beq.n	800633a <HAL_GPIO_Init+0x326>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	2b09      	cmp	r3, #9
 8006318:	d00f      	beq.n	800633a <HAL_GPIO_Init+0x326>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b09      	cmp	r3, #9
 8006320:	d00b      	beq.n	800633a <HAL_GPIO_Init+0x326>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b0c      	cmp	r3, #12
 8006328:	d007      	beq.n	800633a <HAL_GPIO_Init+0x326>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	d003      	beq.n	800633a <HAL_GPIO_Init+0x326>
 8006332:	21de      	movs	r1, #222	; 0xde
 8006334:	4813      	ldr	r0, [pc, #76]	; (8006384 <HAL_GPIO_Init+0x370>)
 8006336:	f7fc ffee 	bl	8003316 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	08da      	lsrs	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3208      	adds	r2, #8
 8006342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	220f      	movs	r2, #15
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	43db      	mvns	r3, r3
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	4013      	ands	r3, r2
 800635c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	4313      	orrs	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	08da      	lsrs	r2, r3, #3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3208      	adds	r2, #8
 800637c:	69b9      	ldr	r1, [r7, #24]
 800637e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006382:	e001      	b.n	8006388 <HAL_GPIO_Init+0x374>
 8006384:	080102f8 	.word	0x080102f8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	2203      	movs	r2, #3
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	43db      	mvns	r3, r3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4013      	ands	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f003 0203 	and.w	r2, r3, #3
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80a2 	beq.w	800650e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	4b56      	ldr	r3, [pc, #344]	; (8006528 <HAL_GPIO_Init+0x514>)
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	4a55      	ldr	r2, [pc, #340]	; (8006528 <HAL_GPIO_Init+0x514>)
 80063d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063d8:	6453      	str	r3, [r2, #68]	; 0x44
 80063da:	4b53      	ldr	r3, [pc, #332]	; (8006528 <HAL_GPIO_Init+0x514>)
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063e6:	4a51      	ldr	r2, [pc, #324]	; (800652c <HAL_GPIO_Init+0x518>)
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	089b      	lsrs	r3, r3, #2
 80063ec:	3302      	adds	r3, #2
 80063ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	220f      	movs	r2, #15
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43db      	mvns	r3, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4013      	ands	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a48      	ldr	r2, [pc, #288]	; (8006530 <HAL_GPIO_Init+0x51c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d019      	beq.n	8006446 <HAL_GPIO_Init+0x432>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a47      	ldr	r2, [pc, #284]	; (8006534 <HAL_GPIO_Init+0x520>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d013      	beq.n	8006442 <HAL_GPIO_Init+0x42e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a46      	ldr	r2, [pc, #280]	; (8006538 <HAL_GPIO_Init+0x524>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00d      	beq.n	800643e <HAL_GPIO_Init+0x42a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a45      	ldr	r2, [pc, #276]	; (800653c <HAL_GPIO_Init+0x528>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d007      	beq.n	800643a <HAL_GPIO_Init+0x426>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a44      	ldr	r2, [pc, #272]	; (8006540 <HAL_GPIO_Init+0x52c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d101      	bne.n	8006436 <HAL_GPIO_Init+0x422>
 8006432:	2304      	movs	r3, #4
 8006434:	e008      	b.n	8006448 <HAL_GPIO_Init+0x434>
 8006436:	2307      	movs	r3, #7
 8006438:	e006      	b.n	8006448 <HAL_GPIO_Init+0x434>
 800643a:	2303      	movs	r3, #3
 800643c:	e004      	b.n	8006448 <HAL_GPIO_Init+0x434>
 800643e:	2302      	movs	r3, #2
 8006440:	e002      	b.n	8006448 <HAL_GPIO_Init+0x434>
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <HAL_GPIO_Init+0x434>
 8006446:	2300      	movs	r3, #0
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	f002 0203 	and.w	r2, r2, #3
 800644e:	0092      	lsls	r2, r2, #2
 8006450:	4093      	lsls	r3, r2
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	4313      	orrs	r3, r2
 8006456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006458:	4934      	ldr	r1, [pc, #208]	; (800652c <HAL_GPIO_Init+0x518>)
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	089b      	lsrs	r3, r3, #2
 800645e:	3302      	adds	r3, #2
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006466:	4b37      	ldr	r3, [pc, #220]	; (8006544 <HAL_GPIO_Init+0x530>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	43db      	mvns	r3, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4013      	ands	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800648a:	4a2e      	ldr	r2, [pc, #184]	; (8006544 <HAL_GPIO_Init+0x530>)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006490:	4b2c      	ldr	r3, [pc, #176]	; (8006544 <HAL_GPIO_Init+0x530>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	43db      	mvns	r3, r3
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	4013      	ands	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064b4:	4a23      	ldr	r2, [pc, #140]	; (8006544 <HAL_GPIO_Init+0x530>)
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064ba:	4b22      	ldr	r3, [pc, #136]	; (8006544 <HAL_GPIO_Init+0x530>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	43db      	mvns	r3, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4013      	ands	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064de:	4a19      	ldr	r2, [pc, #100]	; (8006544 <HAL_GPIO_Init+0x530>)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064e4:	4b17      	ldr	r3, [pc, #92]	; (8006544 <HAL_GPIO_Init+0x530>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	43db      	mvns	r3, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4013      	ands	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006508:	4a0e      	ldr	r2, [pc, #56]	; (8006544 <HAL_GPIO_Init+0x530>)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	3301      	adds	r3, #1
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b0f      	cmp	r3, #15
 8006518:	f67f adfe 	bls.w	8006118 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	3720      	adds	r7, #32
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40023800 	.word	0x40023800
 800652c:	40013800 	.word	0x40013800
 8006530:	40020000 	.word	0x40020000
 8006534:	40020400 	.word	0x40020400
 8006538:	40020800 	.word	0x40020800
 800653c:	40020c00 	.word	0x40020c00
 8006540:	40021000 	.word	0x40021000
 8006544:	40013c00 	.word	0x40013c00

08006548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006554:	887b      	ldrh	r3, [r7, #2]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <HAL_GPIO_ReadPin+0x1c>
 800655a:	887b      	ldrh	r3, [r7, #2]
 800655c:	0c1b      	lsrs	r3, r3, #16
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <HAL_GPIO_ReadPin+0x26>
 8006564:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8006568:	4809      	ldr	r0, [pc, #36]	; (8006590 <HAL_GPIO_ReadPin+0x48>)
 800656a:	f7fc fed4 	bl	8003316 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	887b      	ldrh	r3, [r7, #2]
 8006574:	4013      	ands	r3, r2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800657a:	2301      	movs	r3, #1
 800657c:	73fb      	strb	r3, [r7, #15]
 800657e:	e001      	b.n	8006584 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006580:	2300      	movs	r3, #0
 8006582:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	080102f8 	.word	0x080102f8

08006594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	807b      	strh	r3, [r7, #2]
 80065a0:	4613      	mov	r3, r2
 80065a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80065a4:	887b      	ldrh	r3, [r7, #2]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <HAL_GPIO_WritePin+0x20>
 80065aa:	887b      	ldrh	r3, [r7, #2]
 80065ac:	0c1b      	lsrs	r3, r3, #16
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <HAL_GPIO_WritePin+0x2a>
 80065b4:	f240 119d 	movw	r1, #413	; 0x19d
 80065b8:	480e      	ldr	r0, [pc, #56]	; (80065f4 <HAL_GPIO_WritePin+0x60>)
 80065ba:	f7fc feac 	bl	8003316 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80065be:	787b      	ldrb	r3, [r7, #1]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <HAL_GPIO_WritePin+0x40>
 80065c4:	787b      	ldrb	r3, [r7, #1]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d004      	beq.n	80065d4 <HAL_GPIO_WritePin+0x40>
 80065ca:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80065ce:	4809      	ldr	r0, [pc, #36]	; (80065f4 <HAL_GPIO_WritePin+0x60>)
 80065d0:	f7fc fea1 	bl	8003316 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80065d4:	787b      	ldrb	r3, [r7, #1]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065da:	887a      	ldrh	r2, [r7, #2]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065e0:	e003      	b.n	80065ea <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065e2:	887b      	ldrh	r3, [r7, #2]
 80065e4:	041a      	lsls	r2, r3, #16
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	619a      	str	r2, [r3, #24]
}
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	080102f8 	.word	0x080102f8

080065f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e1f7      	b.n	80069fa <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a81      	ldr	r2, [pc, #516]	; (8006814 <HAL_I2C_Init+0x21c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_I2C_Init+0x3a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a7f      	ldr	r2, [pc, #508]	; (8006818 <HAL_I2C_Init+0x220>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_I2C_Init+0x3a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a7e      	ldr	r2, [pc, #504]	; (800681c <HAL_I2C_Init+0x224>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_I2C_Init+0x3a>
 8006628:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800662c:	487c      	ldr	r0, [pc, #496]	; (8006820 <HAL_I2C_Init+0x228>)
 800662e:	f7fc fe72 	bl	8003316 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d004      	beq.n	8006644 <HAL_I2C_Init+0x4c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	4a79      	ldr	r2, [pc, #484]	; (8006824 <HAL_I2C_Init+0x22c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d904      	bls.n	800664e <HAL_I2C_Init+0x56>
 8006644:	f240 11bf 	movw	r1, #447	; 0x1bf
 8006648:	4875      	ldr	r0, [pc, #468]	; (8006820 <HAL_I2C_Init+0x228>)
 800664a:	f7fc fe64 	bl	8003316 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <HAL_I2C_Init+0x72>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800665e:	d004      	beq.n	800666a <HAL_I2C_Init+0x72>
 8006660:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006664:	486e      	ldr	r0, [pc, #440]	; (8006820 <HAL_I2C_Init+0x228>)
 8006666:	f7fc fe56 	bl	8003316 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d004      	beq.n	8006684 <HAL_I2C_Init+0x8c>
 800667a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800667e:	4868      	ldr	r0, [pc, #416]	; (8006820 <HAL_I2C_Init+0x228>)
 8006680:	f7fc fe49 	bl	8003316 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800668c:	d009      	beq.n	80066a2 <HAL_I2C_Init+0xaa>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006696:	d004      	beq.n	80066a2 <HAL_I2C_Init+0xaa>
 8006698:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800669c:	4860      	ldr	r0, [pc, #384]	; (8006820 <HAL_I2C_Init+0x228>)
 800669e:	f7fc fe3a 	bl	8003316 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <HAL_I2C_Init+0xc4>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d004      	beq.n	80066bc <HAL_I2C_Init+0xc4>
 80066b2:	f240 11c3 	movw	r1, #451	; 0x1c3
 80066b6:	485a      	ldr	r0, [pc, #360]	; (8006820 <HAL_I2C_Init+0x228>)
 80066b8:	f7fc fe2d 	bl	8003316 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <HAL_I2C_Init+0xda>
 80066c8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80066cc:	4854      	ldr	r0, [pc, #336]	; (8006820 <HAL_I2C_Init+0x228>)
 80066ce:	f7fc fe22 	bl	8003316 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d008      	beq.n	80066ec <HAL_I2C_Init+0xf4>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	d004      	beq.n	80066ec <HAL_I2C_Init+0xf4>
 80066e2:	f240 11c5 	movw	r1, #453	; 0x1c5
 80066e6:	484e      	ldr	r0, [pc, #312]	; (8006820 <HAL_I2C_Init+0x228>)
 80066e8:	f7fc fe15 	bl	8003316 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d008      	beq.n	8006706 <HAL_I2C_Init+0x10e>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	2b80      	cmp	r3, #128	; 0x80
 80066fa:	d004      	beq.n	8006706 <HAL_I2C_Init+0x10e>
 80066fc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8006700:	4847      	ldr	r0, [pc, #284]	; (8006820 <HAL_I2C_Init+0x228>)
 8006702:	f7fc fe08 	bl	8003316 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d12c      	bne.n	800676c <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a42      	ldr	r2, [pc, #264]	; (8006828 <HAL_I2C_Init+0x230>)
 800671e:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a42      	ldr	r2, [pc, #264]	; (800682c <HAL_I2C_Init+0x234>)
 8006724:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a41      	ldr	r2, [pc, #260]	; (8006830 <HAL_I2C_Init+0x238>)
 800672a:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a41      	ldr	r2, [pc, #260]	; (8006834 <HAL_I2C_Init+0x23c>)
 8006730:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a40      	ldr	r2, [pc, #256]	; (8006838 <HAL_I2C_Init+0x240>)
 8006736:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a40      	ldr	r2, [pc, #256]	; (800683c <HAL_I2C_Init+0x244>)
 800673c:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a3f      	ldr	r2, [pc, #252]	; (8006840 <HAL_I2C_Init+0x248>)
 8006742:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a3f      	ldr	r2, [pc, #252]	; (8006844 <HAL_I2C_Init+0x24c>)
 8006748:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a3e      	ldr	r2, [pc, #248]	; (8006848 <HAL_I2C_Init+0x250>)
 800674e:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a3e      	ldr	r2, [pc, #248]	; (800684c <HAL_I2C_Init+0x254>)
 8006754:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d102      	bne.n	8006764 <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a3b      	ldr	r2, [pc, #236]	; (8006850 <HAL_I2C_Init+0x258>)
 8006762:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2224      	movs	r2, #36	; 0x24
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0201 	bic.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067a4:	f002 fc0a 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 80067a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	4a29      	ldr	r2, [pc, #164]	; (8006854 <HAL_I2C_Init+0x25c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d807      	bhi.n	80067c4 <HAL_I2C_Init+0x1cc>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4a28      	ldr	r2, [pc, #160]	; (8006858 <HAL_I2C_Init+0x260>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	bf94      	ite	ls
 80067bc:	2301      	movls	r3, #1
 80067be:	2300      	movhi	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	e006      	b.n	80067d2 <HAL_I2C_Init+0x1da>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a25      	ldr	r2, [pc, #148]	; (800685c <HAL_I2C_Init+0x264>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	bf94      	ite	ls
 80067cc:	2301      	movls	r3, #1
 80067ce:	2300      	movhi	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e10f      	b.n	80069fa <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a20      	ldr	r2, [pc, #128]	; (8006860 <HAL_I2C_Init+0x268>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	0c9b      	lsrs	r3, r3, #18
 80067e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4a12      	ldr	r2, [pc, #72]	; (8006854 <HAL_I2C_Init+0x25c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d82a      	bhi.n	8006864 <HAL_I2C_Init+0x26c>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	3301      	adds	r3, #1
 8006812:	e031      	b.n	8006878 <HAL_I2C_Init+0x280>
 8006814:	40005400 	.word	0x40005400
 8006818:	40005800 	.word	0x40005800
 800681c:	40005c00 	.word	0x40005c00
 8006820:	0801036c 	.word	0x0801036c
 8006824:	00061a80 	.word	0x00061a80
 8006828:	08006e3d 	.word	0x08006e3d
 800682c:	08006e51 	.word	0x08006e51
 8006830:	08006e65 	.word	0x08006e65
 8006834:	08006e79 	.word	0x08006e79
 8006838:	08006ea9 	.word	0x08006ea9
 800683c:	08006ebd 	.word	0x08006ebd
 8006840:	08006ed1 	.word	0x08006ed1
 8006844:	08006ee5 	.word	0x08006ee5
 8006848:	08006ef9 	.word	0x08006ef9
 800684c:	08006e8d 	.word	0x08006e8d
 8006850:	08003009 	.word	0x08003009
 8006854:	000186a0 	.word	0x000186a0
 8006858:	001e847f 	.word	0x001e847f
 800685c:	003d08ff 	.word	0x003d08ff
 8006860:	431bde83 	.word	0x431bde83
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	4a65      	ldr	r2, [pc, #404]	; (8006a04 <HAL_I2C_Init+0x40c>)
 8006870:	fba2 2303 	umull	r2, r3, r2, r3
 8006874:	099b      	lsrs	r3, r3, #6
 8006876:	3301      	adds	r3, #1
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6812      	ldr	r2, [r2, #0]
 800687c:	430b      	orrs	r3, r1
 800687e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800688a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	495d      	ldr	r1, [pc, #372]	; (8006a08 <HAL_I2C_Init+0x410>)
 8006894:	428b      	cmp	r3, r1
 8006896:	d819      	bhi.n	80068cc <HAL_I2C_Init+0x2d4>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	1e59      	subs	r1, r3, #1
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068ac:	400b      	ands	r3, r1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <HAL_I2C_Init+0x2d0>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	1e59      	subs	r1, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80068c0:	3301      	adds	r3, #1
 80068c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c6:	e051      	b.n	800696c <HAL_I2C_Init+0x374>
 80068c8:	2304      	movs	r3, #4
 80068ca:	e04f      	b.n	800696c <HAL_I2C_Init+0x374>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d111      	bne.n	80068f8 <HAL_I2C_Init+0x300>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	1e58      	subs	r0, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6859      	ldr	r1, [r3, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	440b      	add	r3, r1
 80068e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068e6:	3301      	adds	r3, #1
 80068e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bf0c      	ite	eq
 80068f0:	2301      	moveq	r3, #1
 80068f2:	2300      	movne	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	e012      	b.n	800691e <HAL_I2C_Init+0x326>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	1e58      	subs	r0, r3, #1
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6859      	ldr	r1, [r3, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	0099      	lsls	r1, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	fbb0 f3f3 	udiv	r3, r0, r3
 800690e:	3301      	adds	r3, #1
 8006910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006914:	2b00      	cmp	r3, #0
 8006916:	bf0c      	ite	eq
 8006918:	2301      	moveq	r3, #1
 800691a:	2300      	movne	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_I2C_Init+0x32e>
 8006922:	2301      	movs	r3, #1
 8006924:	e022      	b.n	800696c <HAL_I2C_Init+0x374>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10e      	bne.n	800694c <HAL_I2C_Init+0x354>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1e58      	subs	r0, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6859      	ldr	r1, [r3, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	440b      	add	r3, r1
 800693c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006940:	3301      	adds	r3, #1
 8006942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694a:	e00f      	b.n	800696c <HAL_I2C_Init+0x374>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	1e58      	subs	r0, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6859      	ldr	r1, [r3, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	0099      	lsls	r1, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006962:	3301      	adds	r3, #1
 8006964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	6809      	ldr	r1, [r1, #0]
 8006970:	4313      	orrs	r3, r2
 8006972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69da      	ldr	r2, [r3, #28]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800699a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6911      	ldr	r1, [r2, #16]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68d2      	ldr	r2, [r2, #12]
 80069a6:	4311      	orrs	r1, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6812      	ldr	r2, [r2, #0]
 80069ac:	430b      	orrs	r3, r1
 80069ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695a      	ldr	r2, [r3, #20]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	10624dd3 	.word	0x10624dd3
 8006a08:	000186a0 	.word	0x000186a0

08006a0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d003      	beq.n	8006a44 <HAL_I2C_EV_IRQHandler+0x38>
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
 8006a3e:	2b40      	cmp	r3, #64	; 0x40
 8006a40:	f040 80c1 	bne.w	8006bc6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10d      	bne.n	8006a7a <HAL_I2C_EV_IRQHandler+0x6e>
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a64:	d003      	beq.n	8006a6e <HAL_I2C_EV_IRQHandler+0x62>
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a6c:	d101      	bne.n	8006a72 <HAL_I2C_EV_IRQHandler+0x66>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <HAL_I2C_EV_IRQHandler+0x68>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	f000 8132 	beq.w	8006cde <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <HAL_I2C_EV_IRQHandler+0x92>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	0a5b      	lsrs	r3, r3, #9
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d006      	beq.n	8006a9e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fc95 	bl	80083c0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fd8f 	bl	80075ba <I2C_Master_SB>
 8006a9c:	e092      	b.n	8006bc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	08db      	lsrs	r3, r3, #3
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <HAL_I2C_EV_IRQHandler+0xb2>
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	0a5b      	lsrs	r3, r3, #9
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fe05 	bl	80076c6 <I2C_Master_ADD10>
 8006abc:	e082      	b.n	8006bc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d009      	beq.n	8006ade <HAL_I2C_EV_IRQHandler+0xd2>
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	0a5b      	lsrs	r3, r3, #9
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fe1f 	bl	800771a <I2C_Master_ADDR>
 8006adc:	e072      	b.n	8006bc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	089b      	lsrs	r3, r3, #2
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d03b      	beq.n	8006b62 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af8:	f000 80f3 	beq.w	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	09db      	lsrs	r3, r3, #7
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00f      	beq.n	8006b28 <HAL_I2C_EV_IRQHandler+0x11c>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	0a9b      	lsrs	r3, r3, #10
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d009      	beq.n	8006b28 <HAL_I2C_EV_IRQHandler+0x11c>
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	089b      	lsrs	r3, r3, #2
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d103      	bne.n	8006b28 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f9f3 	bl	8006f0c <I2C_MasterTransmit_TXE>
 8006b26:	e04d      	b.n	8006bc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	089b      	lsrs	r3, r3, #2
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80d6 	beq.w	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	0a5b      	lsrs	r3, r3, #9
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 80cf 	beq.w	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b21      	cmp	r3, #33	; 0x21
 8006b48:	d103      	bne.n	8006b52 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa7d 	bl	800704a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b50:	e0c7      	b.n	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	f040 80c4 	bne.w	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 faee 	bl	800713c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b60:	e0bf      	b.n	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b70:	f000 80b7 	beq.w	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	099b      	lsrs	r3, r3, #6
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00f      	beq.n	8006ba0 <HAL_I2C_EV_IRQHandler+0x194>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	0a9b      	lsrs	r3, r3, #10
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d009      	beq.n	8006ba0 <HAL_I2C_EV_IRQHandler+0x194>
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	089b      	lsrs	r3, r3, #2
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d103      	bne.n	8006ba0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fb64 	bl	8007266 <I2C_MasterReceive_RXNE>
 8006b9e:	e011      	b.n	8006bc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	089b      	lsrs	r3, r3, #2
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 809a 	beq.w	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	0a5b      	lsrs	r3, r3, #9
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 8093 	beq.w	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fc10 	bl	80073e2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bc2:	e08e      	b.n	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006bc4:	e08d      	b.n	8006ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	e007      	b.n	8006be8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d012      	beq.n	8006c1a <HAL_I2C_EV_IRQHandler+0x20e>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	0a5b      	lsrs	r3, r3, #9
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00c      	beq.n	8006c1a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006c10:	69b9      	ldr	r1, [r7, #24]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 ffd2 	bl	8007bbc <I2C_Slave_ADDR>
 8006c18:	e066      	b.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	091b      	lsrs	r3, r3, #4
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d009      	beq.n	8006c3a <HAL_I2C_EV_IRQHandler+0x22e>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	0a5b      	lsrs	r3, r3, #9
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 f80c 	bl	8007c50 <I2C_Slave_STOPF>
 8006c38:	e056      	b.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b21      	cmp	r3, #33	; 0x21
 8006c3e:	d002      	beq.n	8006c46 <HAL_I2C_EV_IRQHandler+0x23a>
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b29      	cmp	r3, #41	; 0x29
 8006c44:	d125      	bne.n	8006c92 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	09db      	lsrs	r3, r3, #7
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00f      	beq.n	8006c72 <HAL_I2C_EV_IRQHandler+0x266>
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	0a9b      	lsrs	r3, r3, #10
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <HAL_I2C_EV_IRQHandler+0x266>
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	089b      	lsrs	r3, r3, #2
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d103      	bne.n	8006c72 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fee6 	bl	8007a3c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c70:	e039      	b.n	8006ce6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	089b      	lsrs	r3, r3, #2
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d033      	beq.n	8006ce6 <HAL_I2C_EV_IRQHandler+0x2da>
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	0a5b      	lsrs	r3, r3, #9
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d02d      	beq.n	8006ce6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 ff14 	bl	8007ab8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c90:	e029      	b.n	8006ce6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	099b      	lsrs	r3, r3, #6
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00f      	beq.n	8006cbe <HAL_I2C_EV_IRQHandler+0x2b2>
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	0a9b      	lsrs	r3, r3, #10
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <HAL_I2C_EV_IRQHandler+0x2b2>
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	089b      	lsrs	r3, r3, #2
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 ff1f 	bl	8007afa <I2C_SlaveReceive_RXNE>
 8006cbc:	e014      	b.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	089b      	lsrs	r3, r3, #2
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	0a5b      	lsrs	r3, r3, #9
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 ff4e 	bl	8007b78 <I2C_SlaveReceive_BTF>
 8006cdc:	e004      	b.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006cde:	bf00      	nop
 8006ce0:	e002      	b.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ce2:	bf00      	nop
 8006ce4:	e000      	b.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ce6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b08a      	sub	sp, #40	; 0x28
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d10:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	0a1b      	lsrs	r3, r3, #8
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00e      	beq.n	8006d3c <HAL_I2C_ER_IRQHandler+0x4e>
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	0a1b      	lsrs	r3, r3, #8
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d3a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	0a5b      	lsrs	r3, r3, #9
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00e      	beq.n	8006d66 <HAL_I2C_ER_IRQHandler+0x78>
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	f043 0302 	orr.w	r3, r3, #2
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006d64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	0a9b      	lsrs	r3, r3, #10
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d03f      	beq.n	8006df2 <HAL_I2C_ER_IRQHandler+0x104>
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	0a1b      	lsrs	r3, r3, #8
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d039      	beq.n	8006df2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006d7e:	7efb      	ldrb	r3, [r7, #27]
 8006d80:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d90:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006d98:	7ebb      	ldrb	r3, [r7, #26]
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d112      	bne.n	8006dc4 <HAL_I2C_ER_IRQHandler+0xd6>
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10f      	bne.n	8006dc4 <HAL_I2C_ER_IRQHandler+0xd6>
 8006da4:	7cfb      	ldrb	r3, [r7, #19]
 8006da6:	2b21      	cmp	r3, #33	; 0x21
 8006da8:	d008      	beq.n	8006dbc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006daa:	7cfb      	ldrb	r3, [r7, #19]
 8006dac:	2b29      	cmp	r3, #41	; 0x29
 8006dae:	d005      	beq.n	8006dbc <HAL_I2C_ER_IRQHandler+0xce>
 8006db0:	7cfb      	ldrb	r3, [r7, #19]
 8006db2:	2b28      	cmp	r3, #40	; 0x28
 8006db4:	d106      	bne.n	8006dc4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b21      	cmp	r3, #33	; 0x21
 8006dba:	d103      	bne.n	8006dc4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 f87b 	bl	8007eb8 <I2C_Slave_AF>
 8006dc2:	e016      	b.n	8006df2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dcc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	f043 0304 	orr.w	r3, r3, #4
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006dd6:	7efb      	ldrb	r3, [r7, #27]
 8006dd8:	2b10      	cmp	r3, #16
 8006dda:	d002      	beq.n	8006de2 <HAL_I2C_ER_IRQHandler+0xf4>
 8006ddc:	7efb      	ldrb	r3, [r7, #27]
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d107      	bne.n	8006df2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	0adb      	lsrs	r3, r3, #11
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00e      	beq.n	8006e1c <HAL_I2C_ER_IRQHandler+0x12e>
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	0a1b      	lsrs	r3, r3, #8
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d008      	beq.n	8006e1c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	f043 0308 	orr.w	r3, r3, #8
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006e1a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d008      	beq.n	8006e34 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 f8b4 	bl	8007f9c <I2C_ITError>
  }
}
 8006e34:	bf00      	nop
 8006e36:	3728      	adds	r7, #40	; 0x28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d153      	bne.n	8006fda <I2C_MasterTransmit_TXE+0xce>
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b21      	cmp	r3, #33	; 0x21
 8006f36:	d150      	bne.n	8006fda <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d01e      	beq.n	8006f7c <I2C_MasterTransmit_TXE+0x70>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d01b      	beq.n	8006f7c <I2C_MasterTransmit_TXE+0x70>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f4a:	d017      	beq.n	8006f7c <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f5a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2211      	movs	r2, #17
 8006f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f7a:	e062      	b.n	8007042 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f8a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	d108      	bne.n	8006fc8 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fc6:	e03c      	b.n	8007042 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fd8:	e033      	b.n	8007042 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	2b21      	cmp	r3, #33	; 0x21
 8006fde:	d005      	beq.n	8006fec <I2C_MasterTransmit_TXE+0xe0>
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d12d      	bne.n	8007042 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	2b22      	cmp	r3, #34	; 0x22
 8006fea:	d12a      	bne.n	8007042 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d108      	bne.n	8007008 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007004:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007006:	e01c      	b.n	8007042 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	d103      	bne.n	800701c <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f891 	bl	800713c <I2C_MemoryTransmit_TXE_BTF>
}
 800701a:	e012      	b.n	8007042 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	781a      	ldrb	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007036:	b29b      	uxth	r3, r3
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007040:	e7ff      	b.n	8007042 <I2C_MasterTransmit_TXE+0x136>
 8007042:	bf00      	nop
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b21      	cmp	r3, #33	; 0x21
 8007062:	d167      	bne.n	8007134 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d012      	beq.n	8007094 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	781a      	ldrb	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007088:	b29b      	uxth	r3, r3
 800708a:	3b01      	subs	r3, #1
 800708c:	b29a      	uxth	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007092:	e04f      	b.n	8007134 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b08      	cmp	r3, #8
 8007098:	d01e      	beq.n	80070d8 <I2C_MasterTransmit_BTF+0x8e>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b20      	cmp	r3, #32
 800709e:	d01b      	beq.n	80070d8 <I2C_MasterTransmit_BTF+0x8e>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070a6:	d017      	beq.n	80070d8 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070b6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2211      	movs	r2, #17
 80070bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
}
 80070d6:	e02d      	b.n	8007134 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070e6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d108      	bne.n	8007124 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
}
 8007122:	e007      	b.n	8007134 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007150:	2b00      	cmp	r3, #0
 8007152:	d11d      	bne.n	8007190 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d10b      	bne.n	8007174 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007160:	b2da      	uxtb	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716c:	1c9a      	adds	r2, r3, #2
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007172:	e074      	b.n	800725e <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007178:	b29b      	uxth	r3, r3
 800717a:	121b      	asrs	r3, r3, #8
 800717c:	b2da      	uxtb	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800718e:	e066      	b.n	800725e <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007194:	2b01      	cmp	r3, #1
 8007196:	d10b      	bne.n	80071b0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800719c:	b2da      	uxtb	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071ae:	e056      	b.n	800725e <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d152      	bne.n	800725e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	2b22      	cmp	r3, #34	; 0x22
 80071bc:	d10d      	bne.n	80071da <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071cc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071d8:	e041      	b.n	800725e <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d015      	beq.n	8007210 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b21      	cmp	r3, #33	; 0x21
 80071e8:	d112      	bne.n	8007210 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	781a      	ldrb	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800720e:	e026      	b.n	800725e <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007214:	b29b      	uxth	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d121      	bne.n	800725e <I2C_MemoryTransmit_TXE_BTF+0x122>
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b21      	cmp	r3, #33	; 0x21
 800721e:	d11e      	bne.n	800725e <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800722e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800723e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b22      	cmp	r3, #34	; 0x22
 8007278:	f040 80af 	bne.w	80073da <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007280:	b29b      	uxth	r3, r3
 8007282:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b03      	cmp	r3, #3
 8007288:	d921      	bls.n	80072ce <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	f040 808f 	bne.w	80073da <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ca:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80072cc:	e085      	b.n	80073da <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d078      	beq.n	80073c8 <I2C_MasterReceive_RXNE+0x162>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d002      	beq.n	80072e2 <I2C_MasterReceive_RXNE+0x7c>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d172      	bne.n	80073c8 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 f83a 	bl	800835c <I2C_WaitOnSTOPRequestThroughIT>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d144      	bne.n	8007378 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800730c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	b2d2      	uxtb	r2, r2
 800731a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b40      	cmp	r3, #64	; 0x40
 8007346:	d10b      	bne.n	8007360 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800735e:	e03c      	b.n	80073da <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2212      	movs	r2, #18
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007376:	e030      	b.n	80073da <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007386:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80073c6:	e008      	b.n	80073da <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d6:	605a      	str	r2, [r3, #4]
}
 80073d8:	e7ff      	b.n	80073da <I2C_MasterReceive_RXNE+0x174>
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d11b      	bne.n	8007432 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007408:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007430:	e0bf      	b.n	80075b2 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b03      	cmp	r3, #3
 800743a:	d129      	bne.n	8007490 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800744a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b04      	cmp	r3, #4
 8007450:	d00a      	beq.n	8007468 <I2C_MasterReceive_BTF+0x86>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b02      	cmp	r3, #2
 8007456:	d007      	beq.n	8007468 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007466:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800748e:	e090      	b.n	80075b2 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d178      	bne.n	800758c <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d002      	beq.n	80074a6 <I2C_MasterReceive_BTF+0xc4>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d108      	bne.n	80074b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	e019      	b.n	80074ec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d002      	beq.n	80074c4 <I2C_MasterReceive_BTF+0xe2>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d108      	bne.n	80074d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e00a      	b.n	80074ec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b10      	cmp	r3, #16
 80074da:	d007      	beq.n	80074ec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007508:	b29b      	uxth	r3, r3
 800750a:	3b01      	subs	r3, #1
 800750c:	b29a      	uxth	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29a      	uxth	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007546:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	d10b      	bne.n	8007574 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4798      	blx	r3
}
 8007572:	e01e      	b.n	80075b2 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2212      	movs	r2, #18
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4798      	blx	r3
}
 800758a:	e012      	b.n	80075b2 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075b2:	bf00      	nop
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b40      	cmp	r3, #64	; 0x40
 80075cc:	d117      	bne.n	80075fe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d109      	bne.n	80075ea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075e6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80075e8:	e067      	b.n	80076ba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	f043 0301 	orr.w	r3, r3, #1
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	611a      	str	r2, [r3, #16]
}
 80075fc:	e05d      	b.n	80076ba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007606:	d133      	bne.n	8007670 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b21      	cmp	r3, #33	; 0x21
 8007612:	d109      	bne.n	8007628 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007618:	b2db      	uxtb	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007624:	611a      	str	r2, [r3, #16]
 8007626:	e008      	b.n	800763a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	b2da      	uxtb	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763e:	2b00      	cmp	r3, #0
 8007640:	d004      	beq.n	800764c <I2C_Master_SB+0x92>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d108      	bne.n	800765e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	2b00      	cmp	r3, #0
 8007652:	d032      	beq.n	80076ba <I2C_Master_SB+0x100>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d02d      	beq.n	80076ba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800766c:	605a      	str	r2, [r3, #4]
}
 800766e:	e024      	b.n	80076ba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10e      	bne.n	8007696 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767c:	b29b      	uxth	r3, r3
 800767e:	11db      	asrs	r3, r3, #7
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f003 0306 	and.w	r3, r3, #6
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f063 030f 	orn	r3, r3, #15
 800768c:	b2da      	uxtb	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	611a      	str	r2, [r3, #16]
}
 8007694:	e011      	b.n	80076ba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769a:	2b01      	cmp	r3, #1
 800769c:	d10d      	bne.n	80076ba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	11db      	asrs	r3, r3, #7
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 0306 	and.w	r3, r3, #6
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f063 030e 	orn	r3, r3, #14
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	611a      	str	r2, [r3, #16]
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d004      	beq.n	80076ec <I2C_Master_ADD10+0x26>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d108      	bne.n	80076fe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00c      	beq.n	800770e <I2C_Master_ADD10+0x48>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d007      	beq.n	800770e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800770c:	605a      	str	r2, [r3, #4]
  }
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800771a:	b480      	push	{r7}
 800771c:	b091      	sub	sp, #68	; 0x44
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007728:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b22      	cmp	r3, #34	; 0x22
 8007742:	f040 8169 	bne.w	8007a18 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10f      	bne.n	800776e <I2C_Master_ADDR+0x54>
 800774e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d10b      	bne.n	800776e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007756:	2300      	movs	r3, #0
 8007758:	633b      	str	r3, [r7, #48]	; 0x30
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	633b      	str	r3, [r7, #48]	; 0x30
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	633b      	str	r3, [r7, #48]	; 0x30
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	e160      	b.n	8007a30 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007772:	2b00      	cmp	r3, #0
 8007774:	d11d      	bne.n	80077b2 <I2C_Master_ADDR+0x98>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800777e:	d118      	bne.n	80077b2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007780:	2300      	movs	r3, #0
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077a4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	651a      	str	r2, [r3, #80]	; 0x50
 80077b0:	e13e      	b.n	8007a30 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d113      	bne.n	80077e4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077bc:	2300      	movs	r3, #0
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	e115      	b.n	8007a10 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	f040 808a 	bne.w	8007904 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077f6:	d137      	bne.n	8007868 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007806:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007816:	d113      	bne.n	8007840 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007826:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007828:	2300      	movs	r3, #0
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	627b      	str	r3, [r7, #36]	; 0x24
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	e0e7      	b.n	8007a10 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007840:	2300      	movs	r3, #0
 8007842:	623b      	str	r3, [r7, #32]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	623b      	str	r3, [r7, #32]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e0d3      	b.n	8007a10 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	2b08      	cmp	r3, #8
 800786c:	d02e      	beq.n	80078cc <I2C_Master_ADDR+0x1b2>
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	2b20      	cmp	r3, #32
 8007872:	d02b      	beq.n	80078cc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007876:	2b12      	cmp	r3, #18
 8007878:	d102      	bne.n	8007880 <I2C_Master_ADDR+0x166>
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	2b01      	cmp	r3, #1
 800787e:	d125      	bne.n	80078cc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	2b04      	cmp	r3, #4
 8007884:	d00e      	beq.n	80078a4 <I2C_Master_ADDR+0x18a>
 8007886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007888:	2b02      	cmp	r3, #2
 800788a:	d00b      	beq.n	80078a4 <I2C_Master_ADDR+0x18a>
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	2b10      	cmp	r3, #16
 8007890:	d008      	beq.n	80078a4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	e007      	b.n	80078b4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078b2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078b4:	2300      	movs	r3, #0
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	61fb      	str	r3, [r7, #28]
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	e0a1      	b.n	8007a10 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078dc:	2300      	movs	r3, #0
 80078de:	61bb      	str	r3, [r7, #24]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	61bb      	str	r3, [r7, #24]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	e085      	b.n	8007a10 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d14d      	bne.n	80079aa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	2b04      	cmp	r3, #4
 8007912:	d016      	beq.n	8007942 <I2C_Master_ADDR+0x228>
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	2b02      	cmp	r3, #2
 8007918:	d013      	beq.n	8007942 <I2C_Master_ADDR+0x228>
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	2b10      	cmp	r3, #16
 800791e:	d010      	beq.n	8007942 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800792e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	e007      	b.n	8007952 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007950:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800795c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007960:	d117      	bne.n	8007992 <I2C_Master_ADDR+0x278>
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007968:	d00b      	beq.n	8007982 <I2C_Master_ADDR+0x268>
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	2b01      	cmp	r3, #1
 800796e:	d008      	beq.n	8007982 <I2C_Master_ADDR+0x268>
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	2b08      	cmp	r3, #8
 8007974:	d005      	beq.n	8007982 <I2C_Master_ADDR+0x268>
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	2b10      	cmp	r3, #16
 800797a:	d002      	beq.n	8007982 <I2C_Master_ADDR+0x268>
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	2b20      	cmp	r3, #32
 8007980:	d107      	bne.n	8007992 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007990:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	e032      	b.n	8007a10 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079b8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c8:	d117      	bne.n	80079fa <I2C_Master_ADDR+0x2e0>
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079d0:	d00b      	beq.n	80079ea <I2C_Master_ADDR+0x2d0>
 80079d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d008      	beq.n	80079ea <I2C_Master_ADDR+0x2d0>
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	2b08      	cmp	r3, #8
 80079dc:	d005      	beq.n	80079ea <I2C_Master_ADDR+0x2d0>
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	2b10      	cmp	r3, #16
 80079e2:	d002      	beq.n	80079ea <I2C_Master_ADDR+0x2d0>
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d107      	bne.n	80079fa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079fa:	2300      	movs	r3, #0
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	613b      	str	r3, [r7, #16]
 8007a0e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007a16:	e00b      	b.n	8007a30 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
}
 8007a2e:	e7ff      	b.n	8007a30 <I2C_Master_ADDR+0x316>
 8007a30:	bf00      	nop
 8007a32:	3744      	adds	r7, #68	; 0x44
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a4a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d02c      	beq.n	8007ab0 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5a:	781a      	ldrb	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d115      	bne.n	8007ab0 <I2C_SlaveTransmit_TXE+0x74>
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	2b29      	cmp	r3, #41	; 0x29
 8007a88:	d112      	bne.n	8007ab0 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a98:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2221      	movs	r2, #33	; 0x21
 8007a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2228      	movs	r2, #40	; 0x28
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d011      	beq.n	8007aee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	781a      	ldrb	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b08:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d02d      	beq.n	8007b70 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691a      	ldr	r2, [r3, #16]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d115      	bne.n	8007b70 <I2C_SlaveReceive_RXNE+0x76>
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b2a      	cmp	r3, #42	; 0x2a
 8007b48:	d112      	bne.n	8007b70 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2222      	movs	r2, #34	; 0x22
 8007b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2228      	movs	r2, #40	; 0x28
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d012      	beq.n	8007bb0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691a      	ldr	r2, [r3, #16]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bd6:	2b28      	cmp	r3, #40	; 0x28
 8007bd8:	d127      	bne.n	8007c2a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	089b      	lsrs	r3, r3, #2
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	09db      	lsrs	r3, r3, #7
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	81bb      	strh	r3, [r7, #12]
 8007c0c:	e002      	b.n	8007c14 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c20:	89ba      	ldrh	r2, [r7, #12]
 8007c22:	7bf9      	ldrb	r1, [r7, #15]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007c28:	e00e      	b.n	8007c48 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c6e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007c70:	2300      	movs	r3, #0
 8007c72:	60bb      	str	r3, [r7, #8]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	60bb      	str	r3, [r7, #8]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c9c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cac:	d172      	bne.n	8007d94 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	2b22      	cmp	r3, #34	; 0x22
 8007cb2:	d002      	beq.n	8007cba <I2C_Slave_STOPF+0x6a>
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb8:	d135      	bne.n	8007d26 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	f043 0204 	orr.w	r2, r3, #4
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fd feca 	bl	8005a8c <HAL_DMA_GetState>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d049      	beq.n	8007d92 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	4a6b      	ldr	r2, [pc, #428]	; (8007eb0 <I2C_Slave_STOPF+0x260>)
 8007d04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fd fd12 	bl	8005734 <HAL_DMA_Abort_IT>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d03d      	beq.n	8007d92 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d20:	4610      	mov	r0, r2
 8007d22:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d24:	e035      	b.n	8007d92 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d005      	beq.n	8007d4a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	f043 0204 	orr.w	r2, r3, #4
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fd fe94 	bl	8005a8c <HAL_DMA_GetState>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d014      	beq.n	8007d94 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6e:	4a50      	ldr	r2, [pc, #320]	; (8007eb0 <I2C_Slave_STOPF+0x260>)
 8007d70:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fd fcdc 	bl	8005734 <HAL_DMA_Abort_IT>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	e000      	b.n	8007d94 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d92:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d03e      	beq.n	8007e1c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d112      	bne.n	8007dd2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691a      	ldr	r2, [r3, #16]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ddc:	2b40      	cmp	r3, #64	; 0x40
 8007dde:	d112      	bne.n	8007e06 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691a      	ldr	r2, [r3, #16]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	1c5a      	adds	r2, r3, #1
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	f043 0204 	orr.w	r2, r3, #4
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8b9 	bl	8007f9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007e2a:	e03c      	b.n	8007ea6 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e30:	d10a      	bne.n	8007e48 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2228      	movs	r2, #40	; 0x28
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b28      	cmp	r3, #40	; 0x28
 8007e52:	d112      	bne.n	8007e7a <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a17      	ldr	r2, [pc, #92]	; (8007eb4 <I2C_Slave_STOPF+0x264>)
 8007e58:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
}
 8007e78:	e015      	b.n	8007ea6 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	2b22      	cmp	r3, #34	; 0x22
 8007e80:	d002      	beq.n	8007e88 <I2C_Slave_STOPF+0x238>
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b22      	cmp	r3, #34	; 0x22
 8007e86:	d10e      	bne.n	8007ea6 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	08008209 	.word	0x08008209
 8007eb4:	ffff0000 	.word	0xffff0000

08007eb8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d002      	beq.n	8007eda <I2C_Slave_AF+0x22>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d12a      	bne.n	8007f30 <I2C_Slave_AF+0x78>
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	2b28      	cmp	r3, #40	; 0x28
 8007ede:	d127      	bne.n	8007f30 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a2d      	ldr	r2, [pc, #180]	; (8007f98 <I2C_Slave_AF+0xe0>)
 8007ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ef4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007efe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007f2e:	e02f      	b.n	8007f90 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b21      	cmp	r3, #33	; 0x21
 8007f34:	d127      	bne.n	8007f86 <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <I2C_Slave_AF+0xe0>)
 8007f3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2221      	movs	r2, #33	; 0x21
 8007f40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f60:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f6a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f7a:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	4798      	blx	r3
}
 8007f84:	e004      	b.n	8007f90 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f8e:	615a      	str	r2, [r3, #20]
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	ffff0000 	.word	0xffff0000

08007f9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007faa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b10      	cmp	r3, #16
 8007fb8:	d002      	beq.n	8007fc0 <I2C_ITError+0x24>
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	d10a      	bne.n	8007fd6 <I2C_ITError+0x3a>
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	2b22      	cmp	r3, #34	; 0x22
 8007fc4:	d107      	bne.n	8007fd6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fd4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fdc:	2b28      	cmp	r3, #40	; 0x28
 8007fde:	d107      	bne.n	8007ff0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2228      	movs	r2, #40	; 0x28
 8007fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007fee:	e015      	b.n	800801c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffe:	d00a      	beq.n	8008016 <I2C_ITError+0x7a>
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	2b60      	cmp	r3, #96	; 0x60
 8008004:	d007      	beq.n	8008016 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800802a:	d162      	bne.n	80080f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800803a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b01      	cmp	r3, #1
 8008048:	d020      	beq.n	800808c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804e:	4a6c      	ldr	r2, [pc, #432]	; (8008200 <I2C_ITError+0x264>)
 8008050:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008056:	4618      	mov	r0, r3
 8008058:	f7fd fb6c 	bl	8005734 <HAL_DMA_Abort_IT>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 808b 	beq.w	800817a <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0201 	bic.w	r2, r2, #1
 8008072:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2220      	movs	r2, #32
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008086:	4610      	mov	r0, r2
 8008088:	4798      	blx	r3
 800808a:	e076      	b.n	800817a <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008090:	4a5b      	ldr	r2, [pc, #364]	; (8008200 <I2C_ITError+0x264>)
 8008092:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008098:	4618      	mov	r0, r3
 800809a:	f7fd fb4b 	bl	8005734 <HAL_DMA_Abort_IT>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d06a      	beq.n	800817a <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ae:	2b40      	cmp	r3, #64	; 0x40
 80080b0:	d10b      	bne.n	80080ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0201 	bic.w	r2, r2, #1
 80080d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	e043      	b.n	800817a <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b60      	cmp	r3, #96	; 0x60
 80080fc:	d126      	bne.n	800814c <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	d10b      	bne.n	8008132 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691a      	ldr	r2, [r3, #16]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	b2d2      	uxtb	r2, r2
 8008126:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0201 	bic.w	r2, r2, #1
 8008140:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	4798      	blx	r3
 800814a:	e016      	b.n	800817a <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008156:	2b40      	cmp	r3, #64	; 0x40
 8008158:	d10b      	bne.n	8008172 <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	691a      	ldr	r2, [r3, #16]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	b2d2      	uxtb	r2, r2
 8008166:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10e      	bne.n	80081a8 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800819a:	2b00      	cmp	r3, #0
 800819c:	d104      	bne.n	80081a8 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d114      	bne.n	80081f6 <I2C_ITError+0x25a>
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
 80081ce:	2b28      	cmp	r3, #40	; 0x28
 80081d0:	d111      	bne.n	80081f6 <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a0b      	ldr	r2, [pc, #44]	; (8008204 <I2C_ITError+0x268>)
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	08008209 	.word	0x08008209
 8008204:	ffff0000 	.word	0xffff0000

08008208 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008220:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008222:	4b4c      	ldr	r3, [pc, #304]	; (8008354 <I2C_DMAAbort+0x14c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	08db      	lsrs	r3, r3, #3
 8008228:	4a4b      	ldr	r2, [pc, #300]	; (8008358 <I2C_DMAAbort+0x150>)
 800822a:	fba2 2303 	umull	r2, r3, r2, r3
 800822e:	0a1a      	lsrs	r2, r3, #8
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	00da      	lsls	r2, r3, #3
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	f043 0220 	orr.w	r2, r3, #32
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800824e:	e00a      	b.n	8008266 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3b01      	subs	r3, #1
 8008254:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008264:	d0ea      	beq.n	800823c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008272:	2200      	movs	r2, #0
 8008274:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	2200      	movs	r2, #0
 8008284:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008294:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2200      	movs	r2, #0
 800829a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a8:	2200      	movs	r2, #0
 80082aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b8:	2200      	movs	r2, #0
 80082ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 0201 	bic.w	r2, r2, #1
 80082ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b60      	cmp	r3, #96	; 0x60
 80082d6:	d10f      	bne.n	80082f8 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2220      	movs	r2, #32
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2200      	movs	r2, #0
 80082ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f2:	6978      	ldr	r0, [r7, #20]
 80082f4:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80082f6:	e028      	b.n	800834a <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80082f8:	7cfb      	ldrb	r3, [r7, #19]
 80082fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082fe:	2b28      	cmp	r3, #40	; 0x28
 8008300:	d117      	bne.n	8008332 <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0201 	orr.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008320:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2200      	movs	r2, #0
 8008326:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2228      	movs	r2, #40	; 0x28
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008330:	e007      	b.n	8008342 <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008346:	6978      	ldr	r0, [r7, #20]
 8008348:	4798      	blx	r3
}
 800834a:	bf00      	nop
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000004 	.word	0x20000004
 8008358:	14f8b589 	.word	0x14f8b589

0800835c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008368:	4b13      	ldr	r3, [pc, #76]	; (80083b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	08db      	lsrs	r3, r3, #3
 800836e:	4a13      	ldr	r2, [pc, #76]	; (80083bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008370:	fba2 2303 	umull	r2, r3, r2, r3
 8008374:	0a1a      	lsrs	r2, r3, #8
 8008376:	4613      	mov	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3b01      	subs	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d107      	bne.n	800839a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	f043 0220 	orr.w	r2, r3, #32
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e008      	b.n	80083ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a8:	d0e9      	beq.n	800837e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	20000004 	.word	0x20000004
 80083bc:	14f8b589 	.word	0x14f8b589

080083c0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80083d0:	d103      	bne.n	80083da <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80083d8:	e007      	b.n	80083ea <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80083e2:	d102      	bne.n	80083ea <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2208      	movs	r2, #8
 80083e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
	...

080083f8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <HAL_PWR_PVD_IRQHandler+0x20>)
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8008408:	f000 f808 	bl	800841c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800840c:	4b02      	ldr	r3, [pc, #8]	; (8008418 <HAL_PWR_PVD_IRQHandler+0x20>)
 800840e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008412:	615a      	str	r2, [r3, #20]
  }
}
 8008414:	bf00      	nop
 8008416:	bd80      	pop	{r7, pc}
 8008418:	40013c00 	.word	0x40013c00

0800841c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8008420:	bf00      	nop
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e314      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b0f      	cmp	r3, #15
 8008444:	d903      	bls.n	800844e <HAL_RCC_OscConfig+0x22>
 8008446:	21e6      	movs	r1, #230	; 0xe6
 8008448:	4897      	ldr	r0, [pc, #604]	; (80086a8 <HAL_RCC_OscConfig+0x27c>)
 800844a:	f7fa ff64 	bl	8003316 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 8088 	beq.w	800856c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00d      	beq.n	8008480 <HAL_RCC_OscConfig+0x54>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800846c:	d008      	beq.n	8008480 <HAL_RCC_OscConfig+0x54>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008476:	d003      	beq.n	8008480 <HAL_RCC_OscConfig+0x54>
 8008478:	21eb      	movs	r1, #235	; 0xeb
 800847a:	488b      	ldr	r0, [pc, #556]	; (80086a8 <HAL_RCC_OscConfig+0x27c>)
 800847c:	f7fa ff4b 	bl	8003316 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008480:	4b8a      	ldr	r3, [pc, #552]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f003 030c 	and.w	r3, r3, #12
 8008488:	2b04      	cmp	r3, #4
 800848a:	d00c      	beq.n	80084a6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800848c:	4b87      	ldr	r3, [pc, #540]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008494:	2b08      	cmp	r3, #8
 8008496:	d112      	bne.n	80084be <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008498:	4b84      	ldr	r3, [pc, #528]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084a4:	d10b      	bne.n	80084be <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084a6:	4b81      	ldr	r3, [pc, #516]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d05b      	beq.n	800856a <HAL_RCC_OscConfig+0x13e>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d157      	bne.n	800856a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e2d4      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c6:	d106      	bne.n	80084d6 <HAL_RCC_OscConfig+0xaa>
 80084c8:	4b78      	ldr	r3, [pc, #480]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a77      	ldr	r2, [pc, #476]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80084ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	e01d      	b.n	8008512 <HAL_RCC_OscConfig+0xe6>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084de:	d10c      	bne.n	80084fa <HAL_RCC_OscConfig+0xce>
 80084e0:	4b72      	ldr	r3, [pc, #456]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a71      	ldr	r2, [pc, #452]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80084e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	4b6f      	ldr	r3, [pc, #444]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a6e      	ldr	r2, [pc, #440]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80084f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	e00b      	b.n	8008512 <HAL_RCC_OscConfig+0xe6>
 80084fa:	4b6c      	ldr	r3, [pc, #432]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a6b      	ldr	r2, [pc, #428]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 8008500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	4b69      	ldr	r3, [pc, #420]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a68      	ldr	r2, [pc, #416]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 800850c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008510:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d013      	beq.n	8008542 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800851a:	f7fb fdbf 	bl	800409c <HAL_GetTick>
 800851e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008520:	e008      	b.n	8008534 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008522:	f7fb fdbb 	bl	800409c <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b64      	cmp	r3, #100	; 0x64
 800852e:	d901      	bls.n	8008534 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e299      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008534:	4b5d      	ldr	r3, [pc, #372]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0f0      	beq.n	8008522 <HAL_RCC_OscConfig+0xf6>
 8008540:	e014      	b.n	800856c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008542:	f7fb fdab 	bl	800409c <HAL_GetTick>
 8008546:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008548:	e008      	b.n	800855c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800854a:	f7fb fda7 	bl	800409c <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	2b64      	cmp	r3, #100	; 0x64
 8008556:	d901      	bls.n	800855c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e285      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800855c:	4b53      	ldr	r3, [pc, #332]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1f0      	bne.n	800854a <HAL_RCC_OscConfig+0x11e>
 8008568:	e000      	b.n	800856c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800856a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d079      	beq.n	800866c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d008      	beq.n	8008592 <HAL_RCC_OscConfig+0x166>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d004      	beq.n	8008592 <HAL_RCC_OscConfig+0x166>
 8008588:	f240 111d 	movw	r1, #285	; 0x11d
 800858c:	4846      	ldr	r0, [pc, #280]	; (80086a8 <HAL_RCC_OscConfig+0x27c>)
 800858e:	f7fa fec2 	bl	8003316 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b1f      	cmp	r3, #31
 8008598:	d904      	bls.n	80085a4 <HAL_RCC_OscConfig+0x178>
 800859a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800859e:	4842      	ldr	r0, [pc, #264]	; (80086a8 <HAL_RCC_OscConfig+0x27c>)
 80085a0:	f7fa feb9 	bl	8003316 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085a4:	4b41      	ldr	r3, [pc, #260]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f003 030c 	and.w	r3, r3, #12
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085b0:	4b3e      	ldr	r3, [pc, #248]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d11c      	bne.n	80085f6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085bc:	4b3b      	ldr	r3, [pc, #236]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d116      	bne.n	80085f6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085c8:	4b38      	ldr	r3, [pc, #224]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d005      	beq.n	80085e0 <HAL_RCC_OscConfig+0x1b4>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d001      	beq.n	80085e0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e243      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085e0:	4b32      	ldr	r3, [pc, #200]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	492f      	ldr	r1, [pc, #188]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085f4:	e03a      	b.n	800866c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d020      	beq.n	8008640 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085fe:	4b2c      	ldr	r3, [pc, #176]	; (80086b0 <HAL_RCC_OscConfig+0x284>)
 8008600:	2201      	movs	r2, #1
 8008602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008604:	f7fb fd4a 	bl	800409c <HAL_GetTick>
 8008608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800860a:	e008      	b.n	800861e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800860c:	f7fb fd46 	bl	800409c <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	2b02      	cmp	r3, #2
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e224      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800861e:	4b23      	ldr	r3, [pc, #140]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0f0      	beq.n	800860c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800862a:	4b20      	ldr	r3, [pc, #128]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	491c      	ldr	r1, [pc, #112]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 800863a:	4313      	orrs	r3, r2
 800863c:	600b      	str	r3, [r1, #0]
 800863e:	e015      	b.n	800866c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008640:	4b1b      	ldr	r3, [pc, #108]	; (80086b0 <HAL_RCC_OscConfig+0x284>)
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008646:	f7fb fd29 	bl	800409c <HAL_GetTick>
 800864a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800864c:	e008      	b.n	8008660 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800864e:	f7fb fd25 	bl	800409c <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	d901      	bls.n	8008660 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e203      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008660:	4b12      	ldr	r3, [pc, #72]	; (80086ac <HAL_RCC_OscConfig+0x280>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1f0      	bne.n	800864e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b00      	cmp	r3, #0
 8008676:	d045      	beq.n	8008704 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_RCC_OscConfig+0x266>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d004      	beq.n	8008692 <HAL_RCC_OscConfig+0x266>
 8008688:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800868c:	4806      	ldr	r0, [pc, #24]	; (80086a8 <HAL_RCC_OscConfig+0x27c>)
 800868e:	f7fa fe42 	bl	8003316 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d01e      	beq.n	80086d8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800869a:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <HAL_RCC_OscConfig+0x288>)
 800869c:	2201      	movs	r2, #1
 800869e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a0:	f7fb fcfc 	bl	800409c <HAL_GetTick>
 80086a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086a6:	e010      	b.n	80086ca <HAL_RCC_OscConfig+0x29e>
 80086a8:	080103e0 	.word	0x080103e0
 80086ac:	40023800 	.word	0x40023800
 80086b0:	42470000 	.word	0x42470000
 80086b4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086b8:	f7fb fcf0 	bl	800409c <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e1ce      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086ca:	4b5e      	ldr	r3, [pc, #376]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80086cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0f0      	beq.n	80086b8 <HAL_RCC_OscConfig+0x28c>
 80086d6:	e015      	b.n	8008704 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086d8:	4b5b      	ldr	r3, [pc, #364]	; (8008848 <HAL_RCC_OscConfig+0x41c>)
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086de:	f7fb fcdd 	bl	800409c <HAL_GetTick>
 80086e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086e4:	e008      	b.n	80086f8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086e6:	f7fb fcd9 	bl	800409c <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d901      	bls.n	80086f8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e1b7      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086f8:	4b52      	ldr	r3, [pc, #328]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80086fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1f0      	bne.n	80086e6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80b0 	beq.w	8008872 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008712:	2300      	movs	r3, #0
 8008714:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00c      	beq.n	8008738 <HAL_RCC_OscConfig+0x30c>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d008      	beq.n	8008738 <HAL_RCC_OscConfig+0x30c>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2b05      	cmp	r3, #5
 800872c:	d004      	beq.n	8008738 <HAL_RCC_OscConfig+0x30c>
 800872e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8008732:	4846      	ldr	r0, [pc, #280]	; (800884c <HAL_RCC_OscConfig+0x420>)
 8008734:	f7fa fdef 	bl	8003316 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008738:	4b42      	ldr	r3, [pc, #264]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 800873a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10f      	bne.n	8008764 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008744:	2300      	movs	r3, #0
 8008746:	60bb      	str	r3, [r7, #8]
 8008748:	4b3e      	ldr	r3, [pc, #248]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 800874a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874c:	4a3d      	ldr	r2, [pc, #244]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 800874e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008752:	6413      	str	r3, [r2, #64]	; 0x40
 8008754:	4b3b      	ldr	r3, [pc, #236]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 8008756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800875c:	60bb      	str	r3, [r7, #8]
 800875e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008760:	2301      	movs	r3, #1
 8008762:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008764:	4b3a      	ldr	r3, [pc, #232]	; (8008850 <HAL_RCC_OscConfig+0x424>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876c:	2b00      	cmp	r3, #0
 800876e:	d118      	bne.n	80087a2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008770:	4b37      	ldr	r3, [pc, #220]	; (8008850 <HAL_RCC_OscConfig+0x424>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a36      	ldr	r2, [pc, #216]	; (8008850 <HAL_RCC_OscConfig+0x424>)
 8008776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800877a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800877c:	f7fb fc8e 	bl	800409c <HAL_GetTick>
 8008780:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008782:	e008      	b.n	8008796 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008784:	f7fb fc8a 	bl	800409c <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d901      	bls.n	8008796 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e168      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008796:	4b2e      	ldr	r3, [pc, #184]	; (8008850 <HAL_RCC_OscConfig+0x424>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0f0      	beq.n	8008784 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d106      	bne.n	80087b8 <HAL_RCC_OscConfig+0x38c>
 80087aa:	4b26      	ldr	r3, [pc, #152]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80087ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ae:	4a25      	ldr	r2, [pc, #148]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80087b0:	f043 0301 	orr.w	r3, r3, #1
 80087b4:	6713      	str	r3, [r2, #112]	; 0x70
 80087b6:	e01c      	b.n	80087f2 <HAL_RCC_OscConfig+0x3c6>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	2b05      	cmp	r3, #5
 80087be:	d10c      	bne.n	80087da <HAL_RCC_OscConfig+0x3ae>
 80087c0:	4b20      	ldr	r3, [pc, #128]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80087c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c4:	4a1f      	ldr	r2, [pc, #124]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80087c6:	f043 0304 	orr.w	r3, r3, #4
 80087ca:	6713      	str	r3, [r2, #112]	; 0x70
 80087cc:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80087ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d0:	4a1c      	ldr	r2, [pc, #112]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80087d2:	f043 0301 	orr.w	r3, r3, #1
 80087d6:	6713      	str	r3, [r2, #112]	; 0x70
 80087d8:	e00b      	b.n	80087f2 <HAL_RCC_OscConfig+0x3c6>
 80087da:	4b1a      	ldr	r3, [pc, #104]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80087dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087de:	4a19      	ldr	r2, [pc, #100]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80087e0:	f023 0301 	bic.w	r3, r3, #1
 80087e4:	6713      	str	r3, [r2, #112]	; 0x70
 80087e6:	4b17      	ldr	r3, [pc, #92]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80087e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ea:	4a16      	ldr	r2, [pc, #88]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 80087ec:	f023 0304 	bic.w	r3, r3, #4
 80087f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d015      	beq.n	8008826 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087fa:	f7fb fc4f 	bl	800409c <HAL_GetTick>
 80087fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008800:	e00a      	b.n	8008818 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008802:	f7fb fc4b 	bl	800409c <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008810:	4293      	cmp	r3, r2
 8008812:	d901      	bls.n	8008818 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e127      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <HAL_RCC_OscConfig+0x418>)
 800881a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0ee      	beq.n	8008802 <HAL_RCC_OscConfig+0x3d6>
 8008824:	e01c      	b.n	8008860 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008826:	f7fb fc39 	bl	800409c <HAL_GetTick>
 800882a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800882c:	e012      	b.n	8008854 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800882e:	f7fb fc35 	bl	800409c <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	f241 3288 	movw	r2, #5000	; 0x1388
 800883c:	4293      	cmp	r3, r2
 800883e:	d909      	bls.n	8008854 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e111      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
 8008844:	40023800 	.word	0x40023800
 8008848:	42470e80 	.word	0x42470e80
 800884c:	080103e0 	.word	0x080103e0
 8008850:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008854:	4b86      	ldr	r3, [pc, #536]	; (8008a70 <HAL_RCC_OscConfig+0x644>)
 8008856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e6      	bne.n	800882e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d105      	bne.n	8008872 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008866:	4b82      	ldr	r3, [pc, #520]	; (8008a70 <HAL_RCC_OscConfig+0x644>)
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	4a81      	ldr	r2, [pc, #516]	; (8008a70 <HAL_RCC_OscConfig+0x644>)
 800886c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008870:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00c      	beq.n	8008894 <HAL_RCC_OscConfig+0x468>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d008      	beq.n	8008894 <HAL_RCC_OscConfig+0x468>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	2b02      	cmp	r3, #2
 8008888:	d004      	beq.n	8008894 <HAL_RCC_OscConfig+0x468>
 800888a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800888e:	4879      	ldr	r0, [pc, #484]	; (8008a74 <HAL_RCC_OscConfig+0x648>)
 8008890:	f7fa fd41 	bl	8003316 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 80e4 	beq.w	8008a66 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800889e:	4b74      	ldr	r3, [pc, #464]	; (8008a70 <HAL_RCC_OscConfig+0x644>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f003 030c 	and.w	r3, r3, #12
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	f000 80a5 	beq.w	80089f6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	f040 8089 	bne.w	80089c8 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <HAL_RCC_OscConfig+0x4a6>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088c6:	d004      	beq.n	80088d2 <HAL_RCC_OscConfig+0x4a6>
 80088c8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80088cc:	4869      	ldr	r0, [pc, #420]	; (8008a74 <HAL_RCC_OscConfig+0x648>)
 80088ce:	f7fa fd22 	bl	8003316 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	2b3f      	cmp	r3, #63	; 0x3f
 80088d8:	d904      	bls.n	80088e4 <HAL_RCC_OscConfig+0x4b8>
 80088da:	f240 11d7 	movw	r1, #471	; 0x1d7
 80088de:	4865      	ldr	r0, [pc, #404]	; (8008a74 <HAL_RCC_OscConfig+0x648>)
 80088e0:	f7fa fd19 	bl	8003316 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	2b31      	cmp	r3, #49	; 0x31
 80088ea:	d904      	bls.n	80088f6 <HAL_RCC_OscConfig+0x4ca>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80088f4:	d904      	bls.n	8008900 <HAL_RCC_OscConfig+0x4d4>
 80088f6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80088fa:	485e      	ldr	r0, [pc, #376]	; (8008a74 <HAL_RCC_OscConfig+0x648>)
 80088fc:	f7fa fd0b 	bl	8003316 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	2b02      	cmp	r3, #2
 8008906:	d010      	beq.n	800892a <HAL_RCC_OscConfig+0x4fe>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	2b04      	cmp	r3, #4
 800890e:	d00c      	beq.n	800892a <HAL_RCC_OscConfig+0x4fe>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	2b06      	cmp	r3, #6
 8008916:	d008      	beq.n	800892a <HAL_RCC_OscConfig+0x4fe>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	2b08      	cmp	r3, #8
 800891e:	d004      	beq.n	800892a <HAL_RCC_OscConfig+0x4fe>
 8008920:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008924:	4853      	ldr	r0, [pc, #332]	; (8008a74 <HAL_RCC_OscConfig+0x648>)
 8008926:	f7fa fcf6 	bl	8003316 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892e:	2b01      	cmp	r3, #1
 8008930:	d903      	bls.n	800893a <HAL_RCC_OscConfig+0x50e>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008936:	2b0f      	cmp	r3, #15
 8008938:	d904      	bls.n	8008944 <HAL_RCC_OscConfig+0x518>
 800893a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800893e:	484d      	ldr	r0, [pc, #308]	; (8008a74 <HAL_RCC_OscConfig+0x648>)
 8008940:	f7fa fce9 	bl	8003316 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008944:	4b4c      	ldr	r3, [pc, #304]	; (8008a78 <HAL_RCC_OscConfig+0x64c>)
 8008946:	2200      	movs	r2, #0
 8008948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800894a:	f7fb fba7 	bl	800409c <HAL_GetTick>
 800894e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008950:	e008      	b.n	8008964 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008952:	f7fb fba3 	bl	800409c <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	2b02      	cmp	r3, #2
 800895e:	d901      	bls.n	8008964 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e081      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008964:	4b42      	ldr	r3, [pc, #264]	; (8008a70 <HAL_RCC_OscConfig+0x644>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1f0      	bne.n	8008952 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	69da      	ldr	r2, [r3, #28]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	431a      	orrs	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	019b      	lsls	r3, r3, #6
 8008980:	431a      	orrs	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	085b      	lsrs	r3, r3, #1
 8008988:	3b01      	subs	r3, #1
 800898a:	041b      	lsls	r3, r3, #16
 800898c:	431a      	orrs	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	061b      	lsls	r3, r3, #24
 8008994:	4936      	ldr	r1, [pc, #216]	; (8008a70 <HAL_RCC_OscConfig+0x644>)
 8008996:	4313      	orrs	r3, r2
 8008998:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800899a:	4b37      	ldr	r3, [pc, #220]	; (8008a78 <HAL_RCC_OscConfig+0x64c>)
 800899c:	2201      	movs	r2, #1
 800899e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089a0:	f7fb fb7c 	bl	800409c <HAL_GetTick>
 80089a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089a6:	e008      	b.n	80089ba <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a8:	f7fb fb78 	bl	800409c <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d901      	bls.n	80089ba <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e056      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089ba:	4b2d      	ldr	r3, [pc, #180]	; (8008a70 <HAL_RCC_OscConfig+0x644>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0f0      	beq.n	80089a8 <HAL_RCC_OscConfig+0x57c>
 80089c6:	e04e      	b.n	8008a66 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089c8:	4b2b      	ldr	r3, [pc, #172]	; (8008a78 <HAL_RCC_OscConfig+0x64c>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089ce:	f7fb fb65 	bl	800409c <HAL_GetTick>
 80089d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089d4:	e008      	b.n	80089e8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089d6:	f7fb fb61 	bl	800409c <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d901      	bls.n	80089e8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e03f      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089e8:	4b21      	ldr	r3, [pc, #132]	; (8008a70 <HAL_RCC_OscConfig+0x644>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f0      	bne.n	80089d6 <HAL_RCC_OscConfig+0x5aa>
 80089f4:	e037      	b.n	8008a66 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e032      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a02:	4b1b      	ldr	r3, [pc, #108]	; (8008a70 <HAL_RCC_OscConfig+0x644>)
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d028      	beq.n	8008a62 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d121      	bne.n	8008a62 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d11a      	bne.n	8008a62 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a32:	4013      	ands	r3, r2
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d111      	bne.n	8008a62 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a48:	085b      	lsrs	r3, r3, #1
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d107      	bne.n	8008a62 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d001      	beq.n	8008a66 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	40023800 	.word	0x40023800
 8008a74:	080103e0 	.word	0x080103e0
 8008a78:	42470060 	.word	0x42470060

08008a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e174      	b.n	8008d7a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <HAL_RCC_ClockConfig+0x24>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b0f      	cmp	r3, #15
 8008a9e:	d904      	bls.n	8008aaa <HAL_RCC_ClockConfig+0x2e>
 8008aa0:	f240 215a 	movw	r1, #602	; 0x25a
 8008aa4:	487b      	ldr	r0, [pc, #492]	; (8008c94 <HAL_RCC_ClockConfig+0x218>)
 8008aa6:	f7fa fc36 	bl	8003316 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d019      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x68>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d016      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x68>
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d013      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x68>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d010      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x68>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d00d      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x68>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	d00a      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x68>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b06      	cmp	r3, #6
 8008ad2:	d007      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x68>
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b07      	cmp	r3, #7
 8008ad8:	d004      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x68>
 8008ada:	f240 215b 	movw	r1, #603	; 0x25b
 8008ade:	486d      	ldr	r0, [pc, #436]	; (8008c94 <HAL_RCC_ClockConfig+0x218>)
 8008ae0:	f7fa fc19 	bl	8003316 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ae4:	4b6c      	ldr	r3, [pc, #432]	; (8008c98 <HAL_RCC_ClockConfig+0x21c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d90c      	bls.n	8008b0c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008af2:	4b69      	ldr	r3, [pc, #420]	; (8008c98 <HAL_RCC_ClockConfig+0x21c>)
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	b2d2      	uxtb	r2, r2
 8008af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008afa:	4b67      	ldr	r3, [pc, #412]	; (8008c98 <HAL_RCC_ClockConfig+0x21c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d001      	beq.n	8008b0c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e136      	b.n	8008d7a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d049      	beq.n	8008bac <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b24:	4b5d      	ldr	r3, [pc, #372]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	4a5c      	ldr	r2, [pc, #368]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0308 	and.w	r3, r3, #8
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b3c:	4b57      	ldr	r3, [pc, #348]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	4a56      	ldr	r2, [pc, #344]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d024      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x11e>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	2b80      	cmp	r3, #128	; 0x80
 8008b56:	d020      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x11e>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2b90      	cmp	r3, #144	; 0x90
 8008b5e:	d01c      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x11e>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	2ba0      	cmp	r3, #160	; 0xa0
 8008b66:	d018      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x11e>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	2bb0      	cmp	r3, #176	; 0xb0
 8008b6e:	d014      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x11e>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2bc0      	cmp	r3, #192	; 0xc0
 8008b76:	d010      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x11e>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	2bd0      	cmp	r3, #208	; 0xd0
 8008b7e:	d00c      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x11e>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	2be0      	cmp	r3, #224	; 0xe0
 8008b86:	d008      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x11e>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	2bf0      	cmp	r3, #240	; 0xf0
 8008b8e:	d004      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x11e>
 8008b90:	f240 217e 	movw	r1, #638	; 0x27e
 8008b94:	483f      	ldr	r0, [pc, #252]	; (8008c94 <HAL_RCC_ClockConfig+0x218>)
 8008b96:	f7fa fbbe 	bl	8003316 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b9a:	4b40      	ldr	r3, [pc, #256]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	493d      	ldr	r1, [pc, #244]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d059      	beq.n	8008c6c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d010      	beq.n	8008be2 <HAL_RCC_ClockConfig+0x166>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d00c      	beq.n	8008be2 <HAL_RCC_ClockConfig+0x166>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d008      	beq.n	8008be2 <HAL_RCC_ClockConfig+0x166>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d004      	beq.n	8008be2 <HAL_RCC_ClockConfig+0x166>
 8008bd8:	f240 2185 	movw	r1, #645	; 0x285
 8008bdc:	482d      	ldr	r0, [pc, #180]	; (8008c94 <HAL_RCC_ClockConfig+0x218>)
 8008bde:	f7fa fb9a 	bl	8003316 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d107      	bne.n	8008bfa <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bea:	4b2c      	ldr	r3, [pc, #176]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d119      	bne.n	8008c2a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e0bf      	b.n	8008d7a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d003      	beq.n	8008c0a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d107      	bne.n	8008c1a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c0a:	4b24      	ldr	r3, [pc, #144]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d109      	bne.n	8008c2a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e0af      	b.n	8008d7a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c1a:	4b20      	ldr	r3, [pc, #128]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e0a7      	b.n	8008d7a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c2a:	4b1c      	ldr	r3, [pc, #112]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f023 0203 	bic.w	r2, r3, #3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	4919      	ldr	r1, [pc, #100]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c3c:	f7fb fa2e 	bl	800409c <HAL_GetTick>
 8008c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c42:	e00a      	b.n	8008c5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c44:	f7fb fa2a 	bl	800409c <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e08f      	b.n	8008d7a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c5a:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <HAL_RCC_ClockConfig+0x220>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 020c 	and.w	r2, r3, #12
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d1eb      	bne.n	8008c44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <HAL_RCC_ClockConfig+0x21c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d212      	bcs.n	8008ca0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c7a:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <HAL_RCC_ClockConfig+0x21c>)
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	b2d2      	uxtb	r2, r2
 8008c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c82:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <HAL_RCC_ClockConfig+0x21c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d007      	beq.n	8008ca0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e072      	b.n	8008d7a <HAL_RCC_ClockConfig+0x2fe>
 8008c94:	080103e0 	.word	0x080103e0
 8008c98:	40023c00 	.word	0x40023c00
 8008c9c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d025      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d018      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x26a>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cbc:	d013      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x26a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008cc6:	d00e      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x26a>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008cd0:	d009      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x26a>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008cda:	d004      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x26a>
 8008cdc:	f240 21c3 	movw	r1, #707	; 0x2c3
 8008ce0:	4828      	ldr	r0, [pc, #160]	; (8008d84 <HAL_RCC_ClockConfig+0x308>)
 8008ce2:	f7fa fb18 	bl	8003316 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ce6:	4b28      	ldr	r3, [pc, #160]	; (8008d88 <HAL_RCC_ClockConfig+0x30c>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	4925      	ldr	r1, [pc, #148]	; (8008d88 <HAL_RCC_ClockConfig+0x30c>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0308 	and.w	r3, r3, #8
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d026      	beq.n	8008d52 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d018      	beq.n	8008d3e <HAL_RCC_ClockConfig+0x2c2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d14:	d013      	beq.n	8008d3e <HAL_RCC_ClockConfig+0x2c2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d1e:	d00e      	beq.n	8008d3e <HAL_RCC_ClockConfig+0x2c2>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008d28:	d009      	beq.n	8008d3e <HAL_RCC_ClockConfig+0x2c2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008d32:	d004      	beq.n	8008d3e <HAL_RCC_ClockConfig+0x2c2>
 8008d34:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008d38:	4812      	ldr	r0, [pc, #72]	; (8008d84 <HAL_RCC_ClockConfig+0x308>)
 8008d3a:	f7fa faec 	bl	8003316 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d3e:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <HAL_RCC_ClockConfig+0x30c>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	00db      	lsls	r3, r3, #3
 8008d4c:	490e      	ldr	r1, [pc, #56]	; (8008d88 <HAL_RCC_ClockConfig+0x30c>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d52:	f000 f821 	bl	8008d98 <HAL_RCC_GetSysClockFreq>
 8008d56:	4602      	mov	r2, r0
 8008d58:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <HAL_RCC_ClockConfig+0x30c>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	091b      	lsrs	r3, r3, #4
 8008d5e:	f003 030f 	and.w	r3, r3, #15
 8008d62:	490a      	ldr	r1, [pc, #40]	; (8008d8c <HAL_RCC_ClockConfig+0x310>)
 8008d64:	5ccb      	ldrb	r3, [r1, r3]
 8008d66:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6a:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <HAL_RCC_ClockConfig+0x314>)
 8008d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d6e:	4b09      	ldr	r3, [pc, #36]	; (8008d94 <HAL_RCC_ClockConfig+0x318>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fa fc82 	bl	800367c <HAL_InitTick>

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	080103e0 	.word	0x080103e0
 8008d88:	40023800 	.word	0x40023800
 8008d8c:	0801084c 	.word	0x0801084c
 8008d90:	20000004 	.word	0x20000004
 8008d94:	20000008 	.word	0x20000008

08008d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d9c:	b094      	sub	sp, #80	; 0x50
 8008d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	647b      	str	r3, [r7, #68]	; 0x44
 8008da4:	2300      	movs	r3, #0
 8008da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008da8:	2300      	movs	r3, #0
 8008daa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008db0:	4b79      	ldr	r3, [pc, #484]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f003 030c 	and.w	r3, r3, #12
 8008db8:	2b08      	cmp	r3, #8
 8008dba:	d00d      	beq.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	f200 80e1 	bhi.w	8008f84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d002      	beq.n	8008dcc <HAL_RCC_GetSysClockFreq+0x34>
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d003      	beq.n	8008dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008dca:	e0db      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008dcc:	4b73      	ldr	r3, [pc, #460]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8008dce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008dd0:	e0db      	b.n	8008f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008dd2:	4b73      	ldr	r3, [pc, #460]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008dd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008dd6:	e0d8      	b.n	8008f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008dd8:	4b6f      	ldr	r3, [pc, #444]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008de0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008de2:	4b6d      	ldr	r3, [pc, #436]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d063      	beq.n	8008eb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dee:	4b6a      	ldr	r3, [pc, #424]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	099b      	lsrs	r3, r3, #6
 8008df4:	2200      	movs	r2, #0
 8008df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008df8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e00:	633b      	str	r3, [r7, #48]	; 0x30
 8008e02:	2300      	movs	r3, #0
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
 8008e06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	f04f 0000 	mov.w	r0, #0
 8008e12:	f04f 0100 	mov.w	r1, #0
 8008e16:	0159      	lsls	r1, r3, #5
 8008e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e1c:	0150      	lsls	r0, r2, #5
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4621      	mov	r1, r4
 8008e24:	1a51      	subs	r1, r2, r1
 8008e26:	6139      	str	r1, [r7, #16]
 8008e28:	4629      	mov	r1, r5
 8008e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e3c:	4659      	mov	r1, fp
 8008e3e:	018b      	lsls	r3, r1, #6
 8008e40:	4651      	mov	r1, sl
 8008e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e46:	4651      	mov	r1, sl
 8008e48:	018a      	lsls	r2, r1, #6
 8008e4a:	4651      	mov	r1, sl
 8008e4c:	ebb2 0801 	subs.w	r8, r2, r1
 8008e50:	4659      	mov	r1, fp
 8008e52:	eb63 0901 	sbc.w	r9, r3, r1
 8008e56:	f04f 0200 	mov.w	r2, #0
 8008e5a:	f04f 0300 	mov.w	r3, #0
 8008e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e6a:	4690      	mov	r8, r2
 8008e6c:	4699      	mov	r9, r3
 8008e6e:	4623      	mov	r3, r4
 8008e70:	eb18 0303 	adds.w	r3, r8, r3
 8008e74:	60bb      	str	r3, [r7, #8]
 8008e76:	462b      	mov	r3, r5
 8008e78:	eb49 0303 	adc.w	r3, r9, r3
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	024b      	lsls	r3, r1, #9
 8008e8e:	4621      	mov	r1, r4
 8008e90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e94:	4621      	mov	r1, r4
 8008e96:	024a      	lsls	r2, r1, #9
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ea2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ea8:	f7f7 fd88 	bl	80009bc <__aeabi_uldivmod>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eb4:	e058      	b.n	8008f68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008eb6:	4b38      	ldr	r3, [pc, #224]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	099b      	lsrs	r3, r3, #6
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008ec6:	623b      	str	r3, [r7, #32]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	627b      	str	r3, [r7, #36]	; 0x24
 8008ecc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	f04f 0000 	mov.w	r0, #0
 8008ed8:	f04f 0100 	mov.w	r1, #0
 8008edc:	0159      	lsls	r1, r3, #5
 8008ede:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ee2:	0150      	lsls	r0, r2, #5
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4641      	mov	r1, r8
 8008eea:	ebb2 0a01 	subs.w	sl, r2, r1
 8008eee:	4649      	mov	r1, r9
 8008ef0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008f00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008f04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008f08:	ebb2 040a 	subs.w	r4, r2, sl
 8008f0c:	eb63 050b 	sbc.w	r5, r3, fp
 8008f10:	f04f 0200 	mov.w	r2, #0
 8008f14:	f04f 0300 	mov.w	r3, #0
 8008f18:	00eb      	lsls	r3, r5, #3
 8008f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f1e:	00e2      	lsls	r2, r4, #3
 8008f20:	4614      	mov	r4, r2
 8008f22:	461d      	mov	r5, r3
 8008f24:	4643      	mov	r3, r8
 8008f26:	18e3      	adds	r3, r4, r3
 8008f28:	603b      	str	r3, [r7, #0]
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	eb45 0303 	adc.w	r3, r5, r3
 8008f30:	607b      	str	r3, [r7, #4]
 8008f32:	f04f 0200 	mov.w	r2, #0
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f3e:	4629      	mov	r1, r5
 8008f40:	028b      	lsls	r3, r1, #10
 8008f42:	4621      	mov	r1, r4
 8008f44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f48:	4621      	mov	r1, r4
 8008f4a:	028a      	lsls	r2, r1, #10
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f52:	2200      	movs	r2, #0
 8008f54:	61bb      	str	r3, [r7, #24]
 8008f56:	61fa      	str	r2, [r7, #28]
 8008f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f5c:	f7f7 fd2e 	bl	80009bc <__aeabi_uldivmod>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4613      	mov	r3, r2
 8008f66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f68:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	0c1b      	lsrs	r3, r3, #16
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	3301      	adds	r3, #1
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008f78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f82:	e002      	b.n	8008f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8008f86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3750      	adds	r7, #80	; 0x50
 8008f90:	46bd      	mov	sp, r7
 8008f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f96:	bf00      	nop
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	00f42400 	.word	0x00f42400
 8008fa0:	007a1200 	.word	0x007a1200

08008fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fa8:	4b03      	ldr	r3, [pc, #12]	; (8008fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008faa:	681b      	ldr	r3, [r3, #0]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	20000004 	.word	0x20000004

08008fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008fc0:	f7ff fff0 	bl	8008fa4 <HAL_RCC_GetHCLKFreq>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	0a9b      	lsrs	r3, r3, #10
 8008fcc:	f003 0307 	and.w	r3, r3, #7
 8008fd0:	4903      	ldr	r1, [pc, #12]	; (8008fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fd2:	5ccb      	ldrb	r3, [r1, r3]
 8008fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	40023800 	.word	0x40023800
 8008fe0:	0801085c 	.word	0x0801085c

08008fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008fe8:	f7ff ffdc 	bl	8008fa4 <HAL_RCC_GetHCLKFreq>
 8008fec:	4602      	mov	r2, r0
 8008fee:	4b05      	ldr	r3, [pc, #20]	; (8009004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	0b5b      	lsrs	r3, r3, #13
 8008ff4:	f003 0307 	and.w	r3, r3, #7
 8008ff8:	4903      	ldr	r1, [pc, #12]	; (8009008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ffa:	5ccb      	ldrb	r3, [r1, r3]
 8008ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009000:	4618      	mov	r0, r3
 8009002:	bd80      	pop	{r7, pc}
 8009004:	40023800 	.word	0x40023800
 8009008:	0801085c 	.word	0x0801085c

0800900c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	220f      	movs	r2, #15
 800901a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800901c:	4b12      	ldr	r3, [pc, #72]	; (8009068 <HAL_RCC_GetClockConfig+0x5c>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f003 0203 	and.w	r2, r3, #3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009028:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <HAL_RCC_GetClockConfig+0x5c>)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009034:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <HAL_RCC_GetClockConfig+0x5c>)
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009040:	4b09      	ldr	r3, [pc, #36]	; (8009068 <HAL_RCC_GetClockConfig+0x5c>)
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	08db      	lsrs	r3, r3, #3
 8009046:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800904e:	4b07      	ldr	r3, [pc, #28]	; (800906c <HAL_RCC_GetClockConfig+0x60>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0207 	and.w	r2, r3, #7
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	601a      	str	r2, [r3, #0]
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	40023800 	.word	0x40023800
 800906c:	40023c00 	.word	0x40023c00

08009070 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b0f      	cmp	r3, #15
 800908e:	d904      	bls.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8009090:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8009094:	4834      	ldr	r0, [pc, #208]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8009096:	f7fa f93e 	bl	8003316 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d105      	bne.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d066      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d903      	bls.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	2b07      	cmp	r3, #7
 80090c0:	d904      	bls.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80090c2:	f640 11de 	movw	r1, #2526	; 0x9de
 80090c6:	4828      	ldr	r0, [pc, #160]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80090c8:	f7fa f925 	bl	8003316 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	2b31      	cmp	r3, #49	; 0x31
 80090d2:	d904      	bls.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80090dc:	d904      	bls.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80090de:	f640 11df 	movw	r1, #2527	; 0x9df
 80090e2:	4821      	ldr	r0, [pc, #132]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80090e4:	f7fa f917 	bl	8003316 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d903      	bls.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	2b3f      	cmp	r3, #63	; 0x3f
 80090f6:	d904      	bls.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x92>
 80090f8:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80090fc:	481a      	ldr	r0, [pc, #104]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80090fe:	f7fa f90a 	bl	8003316 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009102:	4b1a      	ldr	r3, [pc, #104]	; (800916c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8009104:	2200      	movs	r2, #0
 8009106:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009108:	f7fa ffc8 	bl	800409c <HAL_GetTick>
 800910c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800910e:	e008      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009110:	f7fa ffc4 	bl	800409c <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d901      	bls.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e1b3      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009122:	4b13      	ldr	r3, [pc, #76]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1f0      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	019b      	lsls	r3, r3, #6
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	071b      	lsls	r3, r3, #28
 8009140:	490b      	ldr	r1, [pc, #44]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8009142:	4313      	orrs	r3, r2
 8009144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009148:	4b08      	ldr	r3, [pc, #32]	; (800916c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800914a:	2201      	movs	r2, #1
 800914c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800914e:	f7fa ffa5 	bl	800409c <HAL_GetTick>
 8009152:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009154:	e00e      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009156:	f7fa ffa1 	bl	800409c <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	2b02      	cmp	r3, #2
 8009162:	d907      	bls.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e190      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009168:	08010454 	.word	0x08010454
 800916c:	42470068 	.word	0x42470068
 8009170:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009174:	4b88      	ldr	r3, [pc, #544]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d0ea      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0302 	and.w	r3, r3, #2
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 8173 	beq.w	8009474 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009196:	f000 80a6 	beq.w	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091a2:	f000 80a0 	beq.w	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	4a7c      	ldr	r2, [pc, #496]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	f000 809a 	beq.w	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	4a7a      	ldr	r2, [pc, #488]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	f000 8094 	beq.w	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	4a78      	ldr	r2, [pc, #480]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	f000 808e 	beq.w	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	4a76      	ldr	r2, [pc, #472]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	f000 8088 	beq.w	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	4a74      	ldr	r2, [pc, #464]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	f000 8082 	beq.w	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	4a72      	ldr	r2, [pc, #456]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d07c      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	4a70      	ldr	r2, [pc, #448]	; (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d077      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	4a6f      	ldr	r2, [pc, #444]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d072      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	4a6d      	ldr	r2, [pc, #436]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d06d      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	4a6c      	ldr	r2, [pc, #432]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d068      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	4a6a      	ldr	r2, [pc, #424]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d063      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	4a69      	ldr	r2, [pc, #420]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d05e      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	4a67      	ldr	r2, [pc, #412]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d059      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	4a66      	ldr	r2, [pc, #408]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d054      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	4a64      	ldr	r2, [pc, #400]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d04f      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	4a63      	ldr	r2, [pc, #396]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d04a      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	4a61      	ldr	r2, [pc, #388]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d045      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	4a60      	ldr	r2, [pc, #384]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d040      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	4a5e      	ldr	r2, [pc, #376]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d03b      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	4a5d      	ldr	r2, [pc, #372]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d036      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	4a5b      	ldr	r2, [pc, #364]	; (80093ec <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d031      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	4a5a      	ldr	r2, [pc, #360]	; (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d02c      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	4a58      	ldr	r2, [pc, #352]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d027      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	4a57      	ldr	r2, [pc, #348]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d022      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	4a55      	ldr	r2, [pc, #340]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d01d      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	4a54      	ldr	r2, [pc, #336]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d018      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	4a52      	ldr	r2, [pc, #328]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d013      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	4a51      	ldr	r2, [pc, #324]	; (8009408 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d00e      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	4a4f      	ldr	r2, [pc, #316]	; (800940c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d009      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	4a4e      	ldr	r2, [pc, #312]	; (8009410 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d004      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80092dc:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 80092e0:	484c      	ldr	r0, [pc, #304]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80092e2:	f7fa f818 	bl	8003316 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	4b2b      	ldr	r3, [pc, #172]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	4a2a      	ldr	r2, [pc, #168]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80092f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092f4:	6413      	str	r3, [r2, #64]	; 0x40
 80092f6:	4b28      	ldr	r3, [pc, #160]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009302:	4b45      	ldr	r3, [pc, #276]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a44      	ldr	r2, [pc, #272]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8009308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800930c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800930e:	f7fa fec5 	bl	800409c <HAL_GetTick>
 8009312:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009314:	e008      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009316:	f7fa fec1 	bl	800409c <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e0b0      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009328:	4b3b      	ldr	r3, [pc, #236]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0f0      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009334:	4b18      	ldr	r3, [pc, #96]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8009336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800933c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d073      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	429a      	cmp	r2, r3
 8009350:	d06c      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009352:	4b11      	ldr	r3, [pc, #68]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800935a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800935c:	4b2f      	ldr	r3, [pc, #188]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800935e:	2201      	movs	r2, #1
 8009360:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009362:	4b2e      	ldr	r3, [pc, #184]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009368:	4a0b      	ldr	r2, [pc, #44]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800936e:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8009370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b01      	cmp	r3, #1
 8009378:	d158      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800937a:	f7fa fe8f 	bl	800409c <HAL_GetTick>
 800937e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009380:	e04e      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009382:	f7fa fe8b 	bl	800409c <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009390:	4293      	cmp	r3, r2
 8009392:	d945      	bls.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e078      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009398:	40023800 	.word	0x40023800
 800939c:	00020300 	.word	0x00020300
 80093a0:	00030300 	.word	0x00030300
 80093a4:	00040300 	.word	0x00040300
 80093a8:	00050300 	.word	0x00050300
 80093ac:	00060300 	.word	0x00060300
 80093b0:	00070300 	.word	0x00070300
 80093b4:	00080300 	.word	0x00080300
 80093b8:	00090300 	.word	0x00090300
 80093bc:	000a0300 	.word	0x000a0300
 80093c0:	000b0300 	.word	0x000b0300
 80093c4:	000c0300 	.word	0x000c0300
 80093c8:	000d0300 	.word	0x000d0300
 80093cc:	000e0300 	.word	0x000e0300
 80093d0:	000f0300 	.word	0x000f0300
 80093d4:	00100300 	.word	0x00100300
 80093d8:	00110300 	.word	0x00110300
 80093dc:	00120300 	.word	0x00120300
 80093e0:	00130300 	.word	0x00130300
 80093e4:	00140300 	.word	0x00140300
 80093e8:	00150300 	.word	0x00150300
 80093ec:	00160300 	.word	0x00160300
 80093f0:	00170300 	.word	0x00170300
 80093f4:	00180300 	.word	0x00180300
 80093f8:	00190300 	.word	0x00190300
 80093fc:	001a0300 	.word	0x001a0300
 8009400:	001b0300 	.word	0x001b0300
 8009404:	001c0300 	.word	0x001c0300
 8009408:	001d0300 	.word	0x001d0300
 800940c:	001e0300 	.word	0x001e0300
 8009410:	001f0300 	.word	0x001f0300
 8009414:	08010454 	.word	0x08010454
 8009418:	40007000 	.word	0x40007000
 800941c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009420:	4b1c      	ldr	r3, [pc, #112]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8009422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009424:	f003 0302 	and.w	r3, r3, #2
 8009428:	2b00      	cmp	r3, #0
 800942a:	d0aa      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009438:	d10d      	bne.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800943a:	4b16      	ldr	r3, [pc, #88]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800944a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800944e:	4911      	ldr	r1, [pc, #68]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8009450:	4313      	orrs	r3, r2
 8009452:	608b      	str	r3, [r1, #8]
 8009454:	e005      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8009456:	4b0f      	ldr	r3, [pc, #60]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	4a0e      	ldr	r2, [pc, #56]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800945c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009460:	6093      	str	r3, [r2, #8]
 8009462:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8009464:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800946e:	4909      	ldr	r1, [pc, #36]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8009470:	4313      	orrs	r3, r2
 8009472:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0308 	and.w	r3, r3, #8
 800947c:	2b00      	cmp	r3, #0
 800947e:	d003      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7d1a      	ldrb	r2, [r3, #20]
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8009486:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	40023800 	.word	0x40023800
 8009498:	424711e0 	.word	0x424711e0

0800949c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e0e2      	b.n	8009678 <HAL_RTC_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a72      	ldr	r2, [pc, #456]	; (8009680 <HAL_RTC_Init+0x1e4>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d004      	beq.n	80094c6 <HAL_RTC_Init+0x2a>
 80094bc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80094c0:	4870      	ldr	r0, [pc, #448]	; (8009684 <HAL_RTC_Init+0x1e8>)
 80094c2:	f7f9 ff28 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d008      	beq.n	80094e0 <HAL_RTC_Init+0x44>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d004      	beq.n	80094e0 <HAL_RTC_Init+0x44>
 80094d6:	f240 1105 	movw	r1, #261	; 0x105
 80094da:	486a      	ldr	r0, [pc, #424]	; (8009684 <HAL_RTC_Init+0x1e8>)
 80094dc:	f7f9 ff1b 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	2b7f      	cmp	r3, #127	; 0x7f
 80094e6:	d904      	bls.n	80094f2 <HAL_RTC_Init+0x56>
 80094e8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80094ec:	4865      	ldr	r0, [pc, #404]	; (8009684 <HAL_RTC_Init+0x1e8>)
 80094ee:	f7f9 ff12 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094fa:	d304      	bcc.n	8009506 <HAL_RTC_Init+0x6a>
 80094fc:	f240 1107 	movw	r1, #263	; 0x107
 8009500:	4860      	ldr	r0, [pc, #384]	; (8009684 <HAL_RTC_Init+0x1e8>)
 8009502:	f7f9 ff08 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d013      	beq.n	8009536 <HAL_RTC_Init+0x9a>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009516:	d00e      	beq.n	8009536 <HAL_RTC_Init+0x9a>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009520:	d009      	beq.n	8009536 <HAL_RTC_Init+0x9a>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800952a:	d004      	beq.n	8009536 <HAL_RTC_Init+0x9a>
 800952c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8009530:	4854      	ldr	r0, [pc, #336]	; (8009684 <HAL_RTC_Init+0x1e8>)
 8009532:	f7f9 fef0 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d009      	beq.n	8009552 <HAL_RTC_Init+0xb6>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009546:	d004      	beq.n	8009552 <HAL_RTC_Init+0xb6>
 8009548:	f240 1109 	movw	r1, #265	; 0x109
 800954c:	484d      	ldr	r0, [pc, #308]	; (8009684 <HAL_RTC_Init+0x1e8>)
 800954e:	f7f9 fee2 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d009      	beq.n	800956e <HAL_RTC_Init+0xd2>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009562:	d004      	beq.n	800956e <HAL_RTC_Init+0xd2>
 8009564:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8009568:	4846      	ldr	r0, [pc, #280]	; (8009684 <HAL_RTC_Init+0x1e8>)
 800956a:	f7f9 fed4 	bl	8003316 <assert_failed>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	7f5b      	ldrb	r3, [r3, #29]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d123      	bne.n	80095c0 <HAL_RTC_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a41      	ldr	r2, [pc, #260]	; (8009688 <HAL_RTC_Init+0x1ec>)
 8009582:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a41      	ldr	r2, [pc, #260]	; (800968c <HAL_RTC_Init+0x1f0>)
 8009588:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a40      	ldr	r2, [pc, #256]	; (8009690 <HAL_RTC_Init+0x1f4>)
 800958e:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a40      	ldr	r2, [pc, #256]	; (8009694 <HAL_RTC_Init+0x1f8>)
 8009594:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a3f      	ldr	r2, [pc, #252]	; (8009698 <HAL_RTC_Init+0x1fc>)
 800959a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d102      	bne.n	80095aa <HAL_RTC_Init+0x10e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a3d      	ldr	r2, [pc, #244]	; (800969c <HAL_RTC_Init+0x200>)
 80095a8:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d102      	bne.n	80095c0 <HAL_RTC_Init+0x124>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a38      	ldr	r2, [pc, #224]	; (80096a0 <HAL_RTC_Init+0x204>)
 80095be:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	22ca      	movs	r2, #202	; 0xca
 80095cc:	625a      	str	r2, [r3, #36]	; 0x24
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2253      	movs	r2, #83	; 0x53
 80095d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fdc8 	bl	800a16c <RTC_EnterInitMode>
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d12c      	bne.n	8009640 <HAL_RTC_Init+0x1a4>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6812      	ldr	r2, [r2, #0]
 80095f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095f8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6899      	ldr	r1, [r3, #8]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	431a      	orrs	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	68d2      	ldr	r2, [r2, #12]
 8009620:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6919      	ldr	r1, [r3, #16]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	041a      	lsls	r2, r3, #16
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fdcf 	bl	800a1da <RTC_ExitInitMode>
 800963c:	4603      	mov	r3, r0
 800963e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d113      	bne.n	800966e <HAL_RTC_Init+0x1d2>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009654:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	699a      	ldr	r2, [r3, #24]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	22ff      	movs	r2, #255	; 0xff
 8009674:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	40002800 	.word	0x40002800
 8009684:	080104cc 	.word	0x080104cc
 8009688:	0800a109 	.word	0x0800a109
 800968c:	0800a455 	.word	0x0800a455
 8009690:	0800a297 	.word	0x0800a297
 8009694:	0800a441 	.word	0x0800a441
 8009698:	0800a2ab 	.word	0x0800a2ab
 800969c:	08003475 	.word	0x08003475
 80096a0:	080034cd 	.word	0x080034cd

080096a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80096a4:	b590      	push	{r4, r7, lr}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d007      	beq.n	80096ca <HAL_RTC_SetTime+0x26>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d004      	beq.n	80096ca <HAL_RTC_SetTime+0x26>
 80096c0:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 80096c4:	489a      	ldr	r0, [pc, #616]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 80096c6:	f7f9 fe26 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096d2:	d00d      	beq.n	80096f0 <HAL_RTC_SetTime+0x4c>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096dc:	d008      	beq.n	80096f0 <HAL_RTC_SetTime+0x4c>
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d004      	beq.n	80096f0 <HAL_RTC_SetTime+0x4c>
 80096e6:	f240 21b5 	movw	r1, #693	; 0x2b5
 80096ea:	4891      	ldr	r0, [pc, #580]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 80096ec:	f7f9 fe13 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d009      	beq.n	800970c <HAL_RTC_SetTime+0x68>
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009700:	d004      	beq.n	800970c <HAL_RTC_SetTime+0x68>
 8009702:	f240 21b6 	movw	r1, #694	; 0x2b6
 8009706:	488a      	ldr	r0, [pc, #552]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 8009708:	f7f9 fe05 	bl	8003316 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	7f1b      	ldrb	r3, [r3, #28]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d101      	bne.n	8009718 <HAL_RTC_SetTime+0x74>
 8009714:	2302      	movs	r3, #2
 8009716:	e107      	b.n	8009928 <HAL_RTC_SetTime+0x284>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2202      	movs	r2, #2
 8009722:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d15c      	bne.n	80097e4 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01a      	beq.n	800976e <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d003      	beq.n	8009748 <HAL_RTC_SetTime+0xa4>
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b0c      	cmp	r3, #12
 8009746:	d904      	bls.n	8009752 <HAL_RTC_SetTime+0xae>
 8009748:	f240 21c1 	movw	r1, #705	; 0x2c1
 800974c:	4878      	ldr	r0, [pc, #480]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 800974e:	f7f9 fde2 	bl	8003316 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	78db      	ldrb	r3, [r3, #3]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d015      	beq.n	8009786 <HAL_RTC_SetTime+0xe2>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	78db      	ldrb	r3, [r3, #3]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d011      	beq.n	8009786 <HAL_RTC_SetTime+0xe2>
 8009762:	f240 21c2 	movw	r1, #706	; 0x2c2
 8009766:	4872      	ldr	r0, [pc, #456]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 8009768:	f7f9 fdd5 	bl	8003316 <assert_failed>
 800976c:	e00b      	b.n	8009786 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2200      	movs	r2, #0
 8009772:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b17      	cmp	r3, #23
 800977a:	d904      	bls.n	8009786 <HAL_RTC_SetTime+0xe2>
 800977c:	f240 21c7 	movw	r1, #711	; 0x2c7
 8009780:	486b      	ldr	r0, [pc, #428]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 8009782:	f7f9 fdc8 	bl	8003316 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	785b      	ldrb	r3, [r3, #1]
 800978a:	2b3b      	cmp	r3, #59	; 0x3b
 800978c:	d904      	bls.n	8009798 <HAL_RTC_SetTime+0xf4>
 800978e:	f240 21c9 	movw	r1, #713	; 0x2c9
 8009792:	4867      	ldr	r0, [pc, #412]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 8009794:	f7f9 fdbf 	bl	8003316 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	789b      	ldrb	r3, [r3, #2]
 800979c:	2b3b      	cmp	r3, #59	; 0x3b
 800979e:	d904      	bls.n	80097aa <HAL_RTC_SetTime+0x106>
 80097a0:	f240 21ca 	movw	r1, #714	; 0x2ca
 80097a4:	4862      	ldr	r0, [pc, #392]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 80097a6:	f7f9 fdb6 	bl	8003316 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 fd38 	bl	800a224 <RTC_ByteToBcd2>
 80097b4:	4603      	mov	r3, r0
 80097b6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	785b      	ldrb	r3, [r3, #1]
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fd31 	bl	800a224 <RTC_ByteToBcd2>
 80097c2:	4603      	mov	r3, r0
 80097c4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097c6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	789b      	ldrb	r3, [r3, #2]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 fd29 	bl	800a224 <RTC_ByteToBcd2>
 80097d2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097d4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	78db      	ldrb	r3, [r3, #3]
 80097dc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097de:	4313      	orrs	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	e062      	b.n	80098aa <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d022      	beq.n	8009838 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fd31 	bl	800a25e <RTC_Bcd2ToByte>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <HAL_RTC_SetTime+0x16e>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	4618      	mov	r0, r3
 8009808:	f000 fd29 	bl	800a25e <RTC_Bcd2ToByte>
 800980c:	4603      	mov	r3, r0
 800980e:	2b0c      	cmp	r3, #12
 8009810:	d904      	bls.n	800981c <HAL_RTC_SetTime+0x178>
 8009812:	f240 21d5 	movw	r1, #725	; 0x2d5
 8009816:	4846      	ldr	r0, [pc, #280]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 8009818:	f7f9 fd7d 	bl	8003316 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	78db      	ldrb	r3, [r3, #3]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d019      	beq.n	8009858 <HAL_RTC_SetTime+0x1b4>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	78db      	ldrb	r3, [r3, #3]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d015      	beq.n	8009858 <HAL_RTC_SetTime+0x1b4>
 800982c:	f240 21d6 	movw	r1, #726	; 0x2d6
 8009830:	483f      	ldr	r0, [pc, #252]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 8009832:	f7f9 fd70 	bl	8003316 <assert_failed>
 8009836:	e00f      	b.n	8009858 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2200      	movs	r2, #0
 800983c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	4618      	mov	r0, r3
 8009844:	f000 fd0b 	bl	800a25e <RTC_Bcd2ToByte>
 8009848:	4603      	mov	r3, r0
 800984a:	2b17      	cmp	r3, #23
 800984c:	d904      	bls.n	8009858 <HAL_RTC_SetTime+0x1b4>
 800984e:	f240 21db 	movw	r1, #731	; 0x2db
 8009852:	4837      	ldr	r0, [pc, #220]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 8009854:	f7f9 fd5f 	bl	8003316 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	785b      	ldrb	r3, [r3, #1]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 fcfe 	bl	800a25e <RTC_Bcd2ToByte>
 8009862:	4603      	mov	r3, r0
 8009864:	2b3b      	cmp	r3, #59	; 0x3b
 8009866:	d904      	bls.n	8009872 <HAL_RTC_SetTime+0x1ce>
 8009868:	f240 21dd 	movw	r1, #733	; 0x2dd
 800986c:	4830      	ldr	r0, [pc, #192]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 800986e:	f7f9 fd52 	bl	8003316 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	789b      	ldrb	r3, [r3, #2]
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fcf1 	bl	800a25e <RTC_Bcd2ToByte>
 800987c:	4603      	mov	r3, r0
 800987e:	2b3b      	cmp	r3, #59	; 0x3b
 8009880:	d904      	bls.n	800988c <HAL_RTC_SetTime+0x1e8>
 8009882:	f240 21de 	movw	r1, #734	; 0x2de
 8009886:	482a      	ldr	r0, [pc, #168]	; (8009930 <HAL_RTC_SetTime+0x28c>)
 8009888:	f7f9 fd45 	bl	8003316 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	785b      	ldrb	r3, [r3, #1]
 8009896:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009898:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800989e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	78db      	ldrb	r3, [r3, #3]
 80098a4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	22ca      	movs	r2, #202	; 0xca
 80098b0:	625a      	str	r2, [r3, #36]	; 0x24
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2253      	movs	r2, #83	; 0x53
 80098b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 fc56 	bl	800a16c <RTC_EnterInitMode>
 80098c0:	4603      	mov	r3, r0
 80098c2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80098c4:	7cfb      	ldrb	r3, [r7, #19]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d120      	bne.n	800990c <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80098d4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80098d8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689a      	ldr	r2, [r3, #8]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80098e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6899      	ldr	r1, [r3, #8]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	68da      	ldr	r2, [r3, #12]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	431a      	orrs	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 fc69 	bl	800a1da <RTC_ExitInitMode>
 8009908:	4603      	mov	r3, r0
 800990a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800990c:	7cfb      	ldrb	r3, [r7, #19]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d102      	bne.n	8009918 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2201      	movs	r2, #1
 8009916:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	22ff      	movs	r2, #255	; 0xff
 800991e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	771a      	strb	r2, [r3, #28]

  return status;
 8009926:	7cfb      	ldrb	r3, [r7, #19]
}
 8009928:	4618      	mov	r0, r3
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	bd90      	pop	{r4, r7, pc}
 8009930:	080104cc 	.word	0x080104cc

08009934 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009934:	b590      	push	{r4, r7, lr}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009940:	2300      	movs	r3, #0
 8009942:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d007      	beq.n	800995a <HAL_RTC_SetDate+0x26>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d004      	beq.n	800995a <HAL_RTC_SetDate+0x26>
 8009950:	f240 3153 	movw	r1, #851	; 0x353
 8009954:	487c      	ldr	r0, [pc, #496]	; (8009b48 <HAL_RTC_SetDate+0x214>)
 8009956:	f7f9 fcde 	bl	8003316 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	7f1b      	ldrb	r3, [r3, #28]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d101      	bne.n	8009966 <HAL_RTC_SetDate+0x32>
 8009962:	2302      	movs	r3, #2
 8009964:	e0ec      	b.n	8009b40 <HAL_RTC_SetDate+0x20c>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2201      	movs	r2, #1
 800996a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2202      	movs	r2, #2
 8009970:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10e      	bne.n	8009996 <HAL_RTC_SetDate+0x62>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	785b      	ldrb	r3, [r3, #1]
 800997c:	f003 0310 	and.w	r3, r3, #16
 8009980:	2b00      	cmp	r3, #0
 8009982:	d008      	beq.n	8009996 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	785b      	ldrb	r3, [r3, #1]
 8009988:	f023 0310 	bic.w	r3, r3, #16
 800998c:	b2db      	uxtb	r3, r3
 800998e:	330a      	adds	r3, #10
 8009990:	b2da      	uxtb	r2, r3
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d01c      	beq.n	80099d8 <HAL_RTC_SetDate+0xa4>
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d018      	beq.n	80099d8 <HAL_RTC_SetDate+0xa4>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d014      	beq.n	80099d8 <HAL_RTC_SetDate+0xa4>
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	d010      	beq.n	80099d8 <HAL_RTC_SetDate+0xa4>
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	d00c      	beq.n	80099d8 <HAL_RTC_SetDate+0xa4>
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	2b06      	cmp	r3, #6
 80099c4:	d008      	beq.n	80099d8 <HAL_RTC_SetDate+0xa4>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	2b07      	cmp	r3, #7
 80099cc:	d004      	beq.n	80099d8 <HAL_RTC_SetDate+0xa4>
 80099ce:	f240 315f 	movw	r1, #863	; 0x35f
 80099d2:	485d      	ldr	r0, [pc, #372]	; (8009b48 <HAL_RTC_SetDate+0x214>)
 80099d4:	f7f9 fc9f 	bl	8003316 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d13f      	bne.n	8009a5e <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	78db      	ldrb	r3, [r3, #3]
 80099e2:	2b63      	cmp	r3, #99	; 0x63
 80099e4:	d904      	bls.n	80099f0 <HAL_RTC_SetDate+0xbc>
 80099e6:	f240 3163 	movw	r1, #867	; 0x363
 80099ea:	4857      	ldr	r0, [pc, #348]	; (8009b48 <HAL_RTC_SetDate+0x214>)
 80099ec:	f7f9 fc93 	bl	8003316 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	785b      	ldrb	r3, [r3, #1]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_RTC_SetDate+0xcc>
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	785b      	ldrb	r3, [r3, #1]
 80099fc:	2b0c      	cmp	r3, #12
 80099fe:	d904      	bls.n	8009a0a <HAL_RTC_SetDate+0xd6>
 8009a00:	f44f 7159 	mov.w	r1, #868	; 0x364
 8009a04:	4850      	ldr	r0, [pc, #320]	; (8009b48 <HAL_RTC_SetDate+0x214>)
 8009a06:	f7f9 fc86 	bl	8003316 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	789b      	ldrb	r3, [r3, #2]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <HAL_RTC_SetDate+0xe6>
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	789b      	ldrb	r3, [r3, #2]
 8009a16:	2b1f      	cmp	r3, #31
 8009a18:	d904      	bls.n	8009a24 <HAL_RTC_SetDate+0xf0>
 8009a1a:	f240 3165 	movw	r1, #869	; 0x365
 8009a1e:	484a      	ldr	r0, [pc, #296]	; (8009b48 <HAL_RTC_SetDate+0x214>)
 8009a20:	f7f9 fc79 	bl	8003316 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	78db      	ldrb	r3, [r3, #3]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 fbfb 	bl	800a224 <RTC_ByteToBcd2>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	785b      	ldrb	r3, [r3, #1]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fbf4 	bl	800a224 <RTC_ByteToBcd2>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009a40:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	789b      	ldrb	r3, [r3, #2]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fbec 	bl	800a224 <RTC_ByteToBcd2>
 8009a4c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009a4e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	e045      	b.n	8009aea <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	78db      	ldrb	r3, [r3, #3]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fbfb 	bl	800a25e <RTC_Bcd2ToByte>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b63      	cmp	r3, #99	; 0x63
 8009a6c:	d904      	bls.n	8009a78 <HAL_RTC_SetDate+0x144>
 8009a6e:	f240 316e 	movw	r1, #878	; 0x36e
 8009a72:	4835      	ldr	r0, [pc, #212]	; (8009b48 <HAL_RTC_SetDate+0x214>)
 8009a74:	f7f9 fc4f 	bl	8003316 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	785b      	ldrb	r3, [r3, #1]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fbee 	bl	800a25e <RTC_Bcd2ToByte>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d007      	beq.n	8009a98 <HAL_RTC_SetDate+0x164>
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	785b      	ldrb	r3, [r3, #1]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 fbe6 	bl	800a25e <RTC_Bcd2ToByte>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b0c      	cmp	r3, #12
 8009a96:	d904      	bls.n	8009aa2 <HAL_RTC_SetDate+0x16e>
 8009a98:	f240 316f 	movw	r1, #879	; 0x36f
 8009a9c:	482a      	ldr	r0, [pc, #168]	; (8009b48 <HAL_RTC_SetDate+0x214>)
 8009a9e:	f7f9 fc3a 	bl	8003316 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	789b      	ldrb	r3, [r3, #2]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fbd9 	bl	800a25e <RTC_Bcd2ToByte>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d007      	beq.n	8009ac2 <HAL_RTC_SetDate+0x18e>
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	789b      	ldrb	r3, [r3, #2]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fbd1 	bl	800a25e <RTC_Bcd2ToByte>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b1f      	cmp	r3, #31
 8009ac0:	d904      	bls.n	8009acc <HAL_RTC_SetDate+0x198>
 8009ac2:	f44f 715c 	mov.w	r1, #880	; 0x370
 8009ac6:	4820      	ldr	r0, [pc, #128]	; (8009b48 <HAL_RTC_SetDate+0x214>)
 8009ac8:	f7f9 fc25 	bl	8003316 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	78db      	ldrb	r3, [r3, #3]
 8009ad0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	785b      	ldrb	r3, [r3, #1]
 8009ad6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ad8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ade:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	22ca      	movs	r2, #202	; 0xca
 8009af0:	625a      	str	r2, [r3, #36]	; 0x24
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2253      	movs	r2, #83	; 0x53
 8009af8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fb36 	bl	800a16c <RTC_EnterInitMode>
 8009b00:	4603      	mov	r3, r0
 8009b02:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009b04:	7cfb      	ldrb	r3, [r7, #19]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10c      	bne.n	8009b24 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 fb5d 	bl	800a1da <RTC_ExitInitMode>
 8009b20:	4603      	mov	r3, r0
 8009b22:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009b24:	7cfb      	ldrb	r3, [r7, #19]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d102      	bne.n	8009b30 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	22ff      	movs	r2, #255	; 0xff
 8009b36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	771a      	strb	r2, [r3, #28]

  return status;
 8009b3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	371c      	adds	r7, #28
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd90      	pop	{r4, r7, pc}
 8009b48:	080104cc 	.word	0x080104cc

08009b4c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009b4c:	b590      	push	{r4, r7, lr}
 8009b4e:	b089      	sub	sp, #36	; 0x24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d007      	beq.n	8009b7a <HAL_RTC_SetAlarm+0x2e>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d004      	beq.n	8009b7a <HAL_RTC_SetAlarm+0x2e>
 8009b70:	f240 31e7 	movw	r1, #999	; 0x3e7
 8009b74:	4876      	ldr	r0, [pc, #472]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009b76:	f7f9 fbce 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b82:	d009      	beq.n	8009b98 <HAL_RTC_SetAlarm+0x4c>
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b8c:	d004      	beq.n	8009b98 <HAL_RTC_SetAlarm+0x4c>
 8009b8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009b92:	486f      	ldr	r0, [pc, #444]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009b94:	f7f9 fbbf 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d004      	beq.n	8009bae <HAL_RTC_SetAlarm+0x62>
 8009ba4:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8009ba8:	4869      	ldr	r0, [pc, #420]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009baa:	f7f9 fbb4 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <HAL_RTC_SetAlarm+0x7e>
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bbe:	d004      	beq.n	8009bca <HAL_RTC_SetAlarm+0x7e>
 8009bc0:	f240 31ea 	movw	r1, #1002	; 0x3ea
 8009bc4:	4862      	ldr	r0, [pc, #392]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009bc6:	f7f9 fba6 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bd2:	d304      	bcc.n	8009bde <HAL_RTC_SetAlarm+0x92>
 8009bd4:	f240 31eb 	movw	r1, #1003	; 0x3eb
 8009bd8:	485d      	ldr	r0, [pc, #372]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009bda:	f7f9 fb9c 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d04f      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bee:	d04a      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bf8:	d045      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c02:	d040      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c0c:	d03b      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009c16:	d036      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009c20:	d031      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8009c2a:	d02c      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c34:	d027      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8009c3e:	d022      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8009c48:	d01d      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8009c52:	d018      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009c5c:	d013      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8009c66:	d00e      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8009c70:	d009      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009c7a:	d004      	beq.n	8009c86 <HAL_RTC_SetAlarm+0x13a>
 8009c7c:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 8009c80:	4833      	ldr	r0, [pc, #204]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009c82:	f7f9 fb48 	bl	8003316 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	7f1b      	ldrb	r3, [r3, #28]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d101      	bne.n	8009c92 <HAL_RTC_SetAlarm+0x146>
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e235      	b.n	800a0fe <HAL_RTC_SetAlarm+0x5b2>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f040 80ad 	bne.w	8009e00 <HAL_RTC_SetAlarm+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d01a      	beq.n	8009cea <HAL_RTC_SetAlarm+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <HAL_RTC_SetAlarm+0x178>
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b0c      	cmp	r3, #12
 8009cc2:	d904      	bls.n	8009cce <HAL_RTC_SetAlarm+0x182>
 8009cc4:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8009cc8:	4821      	ldr	r0, [pc, #132]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009cca:	f7f9 fb24 	bl	8003316 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	78db      	ldrb	r3, [r3, #3]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d015      	beq.n	8009d02 <HAL_RTC_SetAlarm+0x1b6>
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	78db      	ldrb	r3, [r3, #3]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d011      	beq.n	8009d02 <HAL_RTC_SetAlarm+0x1b6>
 8009cde:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8009ce2:	481b      	ldr	r0, [pc, #108]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009ce4:	f7f9 fb17 	bl	8003316 <assert_failed>
 8009ce8:	e00b      	b.n	8009d02 <HAL_RTC_SetAlarm+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2200      	movs	r2, #0
 8009cee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	2b17      	cmp	r3, #23
 8009cf6:	d904      	bls.n	8009d02 <HAL_RTC_SetAlarm+0x1b6>
 8009cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009cfc:	4814      	ldr	r0, [pc, #80]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009cfe:	f7f9 fb0a 	bl	8003316 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	785b      	ldrb	r3, [r3, #1]
 8009d06:	2b3b      	cmp	r3, #59	; 0x3b
 8009d08:	d904      	bls.n	8009d14 <HAL_RTC_SetAlarm+0x1c8>
 8009d0a:	f240 4102 	movw	r1, #1026	; 0x402
 8009d0e:	4810      	ldr	r0, [pc, #64]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009d10:	f7f9 fb01 	bl	8003316 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	789b      	ldrb	r3, [r3, #2]
 8009d18:	2b3b      	cmp	r3, #59	; 0x3b
 8009d1a:	d904      	bls.n	8009d26 <HAL_RTC_SetAlarm+0x1da>
 8009d1c:	f240 4103 	movw	r1, #1027	; 0x403
 8009d20:	480b      	ldr	r0, [pc, #44]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009d22:	f7f9 faf8 	bl	8003316 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d112      	bne.n	8009d54 <HAL_RTC_SetAlarm+0x208>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d004      	beq.n	8009d42 <HAL_RTC_SetAlarm+0x1f6>
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d3e:	2b1f      	cmp	r3, #31
 8009d40:	d930      	bls.n	8009da4 <HAL_RTC_SetAlarm+0x258>
 8009d42:	f240 4107 	movw	r1, #1031	; 0x407
 8009d46:	4802      	ldr	r0, [pc, #8]	; (8009d50 <HAL_RTC_SetAlarm+0x204>)
 8009d48:	f7f9 fae5 	bl	8003316 <assert_failed>
 8009d4c:	e02a      	b.n	8009da4 <HAL_RTC_SetAlarm+0x258>
 8009d4e:	bf00      	nop
 8009d50:	080104cc 	.word	0x080104cc
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d022      	beq.n	8009da4 <HAL_RTC_SetAlarm+0x258>
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d01d      	beq.n	8009da4 <HAL_RTC_SetAlarm+0x258>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d018      	beq.n	8009da4 <HAL_RTC_SetAlarm+0x258>
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d013      	beq.n	8009da4 <HAL_RTC_SetAlarm+0x258>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	d00e      	beq.n	8009da4 <HAL_RTC_SetAlarm+0x258>
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d8c:	2b06      	cmp	r3, #6
 8009d8e:	d009      	beq.n	8009da4 <HAL_RTC_SetAlarm+0x258>
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d96:	2b07      	cmp	r3, #7
 8009d98:	d004      	beq.n	8009da4 <HAL_RTC_SetAlarm+0x258>
 8009d9a:	f240 410b 	movw	r1, #1035	; 0x40b
 8009d9e:	48a1      	ldr	r0, [pc, #644]	; (800a024 <HAL_RTC_SetAlarm+0x4d8>)
 8009da0:	f7f9 fab9 	bl	8003316 <assert_failed>
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 fa3b 	bl	800a224 <RTC_ByteToBcd2>
 8009dae:	4603      	mov	r3, r0
 8009db0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	785b      	ldrb	r3, [r3, #1]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fa34 	bl	800a224 <RTC_ByteToBcd2>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009dc0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	789b      	ldrb	r3, [r3, #2]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 fa2c 	bl	800a224 <RTC_ByteToBcd2>
 8009dcc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009dce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	78db      	ldrb	r3, [r3, #3]
 8009dd6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009dd8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 fa1e 	bl	800a224 <RTC_ByteToBcd2>
 8009de8:	4603      	mov	r3, r0
 8009dea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009dec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009df4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	61fb      	str	r3, [r7, #28]
 8009dfe:	e0cd      	b.n	8009f9c <HAL_RTC_SetAlarm+0x450>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d022      	beq.n	8009e54 <HAL_RTC_SetAlarm+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fa23 	bl	800a25e <RTC_Bcd2ToByte>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d007      	beq.n	8009e2e <HAL_RTC_SetAlarm+0x2e2>
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fa1b 	bl	800a25e <RTC_Bcd2ToByte>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b0c      	cmp	r3, #12
 8009e2c:	d904      	bls.n	8009e38 <HAL_RTC_SetAlarm+0x2ec>
 8009e2e:	f240 411a 	movw	r1, #1050	; 0x41a
 8009e32:	487c      	ldr	r0, [pc, #496]	; (800a024 <HAL_RTC_SetAlarm+0x4d8>)
 8009e34:	f7f9 fa6f 	bl	8003316 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	78db      	ldrb	r3, [r3, #3]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d019      	beq.n	8009e74 <HAL_RTC_SetAlarm+0x328>
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	78db      	ldrb	r3, [r3, #3]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d015      	beq.n	8009e74 <HAL_RTC_SetAlarm+0x328>
 8009e48:	f240 411b 	movw	r1, #1051	; 0x41b
 8009e4c:	4875      	ldr	r0, [pc, #468]	; (800a024 <HAL_RTC_SetAlarm+0x4d8>)
 8009e4e:	f7f9 fa62 	bl	8003316 <assert_failed>
 8009e52:	e00f      	b.n	8009e74 <HAL_RTC_SetAlarm+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2200      	movs	r2, #0
 8009e58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 f9fd 	bl	800a25e <RTC_Bcd2ToByte>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b17      	cmp	r3, #23
 8009e68:	d904      	bls.n	8009e74 <HAL_RTC_SetAlarm+0x328>
 8009e6a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009e6e:	486d      	ldr	r0, [pc, #436]	; (800a024 <HAL_RTC_SetAlarm+0x4d8>)
 8009e70:	f7f9 fa51 	bl	8003316 <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 f9f0 	bl	800a25e <RTC_Bcd2ToByte>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b3b      	cmp	r3, #59	; 0x3b
 8009e82:	d904      	bls.n	8009e8e <HAL_RTC_SetAlarm+0x342>
 8009e84:	f240 4123 	movw	r1, #1059	; 0x423
 8009e88:	4866      	ldr	r0, [pc, #408]	; (800a024 <HAL_RTC_SetAlarm+0x4d8>)
 8009e8a:	f7f9 fa44 	bl	8003316 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	789b      	ldrb	r3, [r3, #2]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 f9e3 	bl	800a25e <RTC_Bcd2ToByte>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b3b      	cmp	r3, #59	; 0x3b
 8009e9c:	d904      	bls.n	8009ea8 <HAL_RTC_SetAlarm+0x35c>
 8009e9e:	f240 4124 	movw	r1, #1060	; 0x424
 8009ea2:	4860      	ldr	r0, [pc, #384]	; (800a024 <HAL_RTC_SetAlarm+0x4d8>)
 8009ea4:	f7f9 fa37 	bl	8003316 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d117      	bne.n	8009ee0 <HAL_RTC_SetAlarm+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 f9d1 	bl	800a25e <RTC_Bcd2ToByte>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d008      	beq.n	8009ed4 <HAL_RTC_SetAlarm+0x388>
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 f9c8 	bl	800a25e <RTC_Bcd2ToByte>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b1f      	cmp	r3, #31
 8009ed2:	d949      	bls.n	8009f68 <HAL_RTC_SetAlarm+0x41c>
 8009ed4:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8009ed8:	4852      	ldr	r0, [pc, #328]	; (800a024 <HAL_RTC_SetAlarm+0x4d8>)
 8009eda:	f7f9 fa1c 	bl	8003316 <assert_failed>
 8009ede:	e043      	b.n	8009f68 <HAL_RTC_SetAlarm+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 f9b9 	bl	800a25e <RTC_Bcd2ToByte>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d03a      	beq.n	8009f68 <HAL_RTC_SetAlarm+0x41c>
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 f9b0 	bl	800a25e <RTC_Bcd2ToByte>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d031      	beq.n	8009f68 <HAL_RTC_SetAlarm+0x41c>
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 f9a7 	bl	800a25e <RTC_Bcd2ToByte>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d028      	beq.n	8009f68 <HAL_RTC_SetAlarm+0x41c>
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 f99e 	bl	800a25e <RTC_Bcd2ToByte>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d01f      	beq.n	8009f68 <HAL_RTC_SetAlarm+0x41c>
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 f995 	bl	800a25e <RTC_Bcd2ToByte>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b05      	cmp	r3, #5
 8009f38:	d016      	beq.n	8009f68 <HAL_RTC_SetAlarm+0x41c>
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 f98c 	bl	800a25e <RTC_Bcd2ToByte>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b06      	cmp	r3, #6
 8009f4a:	d00d      	beq.n	8009f68 <HAL_RTC_SetAlarm+0x41c>
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 f983 	bl	800a25e <RTC_Bcd2ToByte>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b07      	cmp	r3, #7
 8009f5c:	d004      	beq.n	8009f68 <HAL_RTC_SetAlarm+0x41c>
 8009f5e:	f240 412c 	movw	r1, #1068	; 0x42c
 8009f62:	4830      	ldr	r0, [pc, #192]	; (800a024 <HAL_RTC_SetAlarm+0x4d8>)
 8009f64:	f7f9 f9d7 	bl	8003316 <assert_failed>
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	785b      	ldrb	r3, [r3, #1]
 8009f72:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009f74:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009f7a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	78db      	ldrb	r3, [r3, #3]
 8009f80:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009f82:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f8a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009f8c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009f92:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	22ca      	movs	r2, #202	; 0xca
 8009fae:	625a      	str	r2, [r3, #36]	; 0x24
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2253      	movs	r2, #83	; 0x53
 8009fb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc0:	d14a      	bne.n	800a058 <HAL_RTC_SetAlarm+0x50c>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fd0:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	689a      	ldr	r2, [r3, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fe0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009ff2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ff4:	f7fa f852 	bl	800409c <HAL_GetTick>
 8009ff8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009ffa:	e015      	b.n	800a028 <HAL_RTC_SetAlarm+0x4dc>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ffc:	f7fa f84e 	bl	800409c <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a00a:	d90d      	bls.n	800a028 <HAL_RTC_SetAlarm+0x4dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	22ff      	movs	r2, #255	; 0xff
 800a012:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2203      	movs	r2, #3
 800a018:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e06c      	b.n	800a0fe <HAL_RTC_SetAlarm+0x5b2>
 800a024:	080104cc 	.word	0x080104cc
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0e2      	beq.n	8009ffc <HAL_RTC_SetAlarm+0x4b0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689a      	ldr	r2, [r3, #8]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a054:	609a      	str	r2, [r3, #8]
 800a056:	e047      	b.n	800a0e8 <HAL_RTC_SetAlarm+0x59c>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689a      	ldr	r2, [r3, #8]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a066:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a076:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a088:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a08a:	f7fa f807 	bl	800409c <HAL_GetTick>
 800a08e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a090:	e013      	b.n	800a0ba <HAL_RTC_SetAlarm+0x56e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a092:	f7fa f803 	bl	800409c <HAL_GetTick>
 800a096:	4602      	mov	r2, r0
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0a0:	d90b      	bls.n	800a0ba <HAL_RTC_SetAlarm+0x56e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	22ff      	movs	r2, #255	; 0xff
 800a0a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2203      	movs	r2, #3
 800a0ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e021      	b.n	800a0fe <HAL_RTC_SetAlarm+0x5b2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0e4      	beq.n	800a092 <HAL_RTC_SetAlarm+0x546>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	69fa      	ldr	r2, [r7, #28]
 800a0ce:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	689a      	ldr	r2, [r3, #8]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0e6:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	22ff      	movs	r2, #255	; 0xff
 800a0ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3724      	adds	r7, #36	; 0x24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd90      	pop	{r4, r7, pc}
 800a106:	bf00      	nop

0800a108 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68da      	ldr	r2, [r3, #12]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a136:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a138:	f7f9 ffb0 	bl	800409c <HAL_GetTick>
 800a13c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a13e:	e009      	b.n	800a154 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a140:	f7f9 ffac 	bl	800409c <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a14e:	d901      	bls.n	800a154 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e007      	b.n	800a164 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0ee      	beq.n	800a140 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a186:	2b00      	cmp	r3, #0
 800a188:	d122      	bne.n	800a1d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a198:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a19a:	f7f9 ff7f 	bl	800409c <HAL_GetTick>
 800a19e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a1a0:	e00c      	b.n	800a1bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1a2:	f7f9 ff7b 	bl	800409c <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1b0:	d904      	bls.n	800a1bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2204      	movs	r2, #4
 800a1b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d102      	bne.n	800a1d0 <RTC_EnterInitMode+0x64>
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d1e8      	bne.n	800a1a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10a      	bne.n	800a21a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f7ff ff89 	bl	800a11c <HAL_RTC_WaitForSynchro>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d004      	beq.n	800a21a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2204      	movs	r2, #4
 800a214:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4603      	mov	r3, r0
 800a22c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800a232:	e005      	b.n	800a240 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a234:	7bfb      	ldrb	r3, [r7, #15]
 800a236:	3301      	adds	r3, #1
 800a238:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800a23a:	79fb      	ldrb	r3, [r7, #7]
 800a23c:	3b0a      	subs	r3, #10
 800a23e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a240:	79fb      	ldrb	r3, [r7, #7]
 800a242:	2b09      	cmp	r3, #9
 800a244:	d8f6      	bhi.n	800a234 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a246:	7bfb      	ldrb	r3, [r7, #15]
 800a248:	011b      	lsls	r3, r3, #4
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	4313      	orrs	r3, r2
 800a250:	b2db      	uxtb	r3, r3
}
 800a252:	4618      	mov	r0, r3
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a25e:	b480      	push	{r7}
 800a260:	b085      	sub	sp, #20
 800a262:	af00      	add	r7, sp, #0
 800a264:	4603      	mov	r3, r0
 800a266:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800a268:	2300      	movs	r3, #0
 800a26a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a26c:	79fb      	ldrb	r3, [r7, #7]
 800a26e:	091b      	lsrs	r3, r3, #4
 800a270:	b2db      	uxtb	r3, r3
 800a272:	461a      	mov	r2, r3
 800a274:	0092      	lsls	r2, r2, #2
 800a276:	4413      	add	r3, r2
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	f003 030f 	and.w	r3, r3, #15
 800a282:	b2da      	uxtb	r2, r3
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	4413      	add	r3, r2
 800a288:	b2db      	uxtb	r3, r3
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 800a2b2:	bf00      	nop
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
	...

0800a2c0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d013      	beq.n	800a2fe <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d010      	beq.n	800a2fe <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d00d      	beq.n	800a2fe <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d00a      	beq.n	800a2fe <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b04      	cmp	r3, #4
 800a2ec:	d007      	beq.n	800a2fe <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2b06      	cmp	r3, #6
 800a2f2:	d004      	beq.n	800a2fe <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800a2f4:	f240 3165 	movw	r1, #869	; 0x365
 800a2f8:	4850      	ldr	r0, [pc, #320]	; (800a43c <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 800a2fa:	f7f9 f80c 	bl	8003316 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a304:	d304      	bcc.n	800a310 <HAL_RTCEx_SetWakeUpTimer+0x50>
 800a306:	f240 3166 	movw	r1, #870	; 0x366
 800a30a:	484c      	ldr	r0, [pc, #304]	; (800a43c <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 800a30c:	f7f9 f803 	bl	8003316 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	7f1b      	ldrb	r3, [r3, #28]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d101      	bne.n	800a31c <HAL_RTCEx_SetWakeUpTimer+0x5c>
 800a318:	2302      	movs	r3, #2
 800a31a:	e08a      	b.n	800a432 <HAL_RTCEx_SetWakeUpTimer+0x172>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2201      	movs	r2, #1
 800a320:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2202      	movs	r2, #2
 800a326:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	22ca      	movs	r2, #202	; 0xca
 800a32e:	625a      	str	r2, [r3, #36]	; 0x24
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2253      	movs	r2, #83	; 0x53
 800a336:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a342:	2b00      	cmp	r3, #0
 800a344:	d01e      	beq.n	800a384 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    tickstart = HAL_GetTick();
 800a346:	f7f9 fea9 	bl	800409c <HAL_GetTick>
 800a34a:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 800a34c:	e013      	b.n	800a376 <HAL_RTCEx_SetWakeUpTimer+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a34e:	f7f9 fea5 	bl	800409c <HAL_GetTick>
 800a352:	4602      	mov	r2, r0
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	1ad3      	subs	r3, r2, r3
 800a358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a35c:	d90b      	bls.n	800a376 <HAL_RTCEx_SetWakeUpTimer+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	22ff      	movs	r2, #255	; 0xff
 800a364:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2203      	movs	r2, #3
 800a36a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e05d      	b.n	800a432 <HAL_RTCEx_SetWakeUpTimer+0x172>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e4      	bne.n	800a34e <HAL_RTCEx_SetWakeUpTimer+0x8e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689a      	ldr	r2, [r3, #8]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a392:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a3a4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a3a6:	f7f9 fe79 	bl	800409c <HAL_GetTick>
 800a3aa:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a3ac:	e013      	b.n	800a3d6 <HAL_RTCEx_SetWakeUpTimer+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a3ae:	f7f9 fe75 	bl	800409c <HAL_GetTick>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3bc:	d90b      	bls.n	800a3d6 <HAL_RTCEx_SetWakeUpTimer+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	22ff      	movs	r2, #255	; 0xff
 800a3c4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2203      	movs	r2, #3
 800a3ca:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e02d      	b.n	800a432 <HAL_RTCEx_SetWakeUpTimer+0x172>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	f003 0304 	and.w	r3, r3, #4
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0e4      	beq.n	800a3ae <HAL_RTCEx_SetWakeUpTimer+0xee>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	689a      	ldr	r2, [r3, #8]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 0207 	bic.w	r2, r2, #7
 800a3f2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6899      	ldr	r1, [r3, #8]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	430a      	orrs	r2, r1
 800a402:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689a      	ldr	r2, [r3, #8]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a41a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	22ff      	movs	r2, #255	; 0xff
 800a422:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2201      	movs	r2, #1
 800a428:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	08010540 	.word	0x08010540

0800a440 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	e1ac      	b.n	800a7d4 <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a75      	ldr	r2, [pc, #468]	; (800a654 <HAL_SPI_Init+0x1ec>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d018      	beq.n	800a4b6 <HAL_SPI_Init+0x4e>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a73      	ldr	r2, [pc, #460]	; (800a658 <HAL_SPI_Init+0x1f0>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d013      	beq.n	800a4b6 <HAL_SPI_Init+0x4e>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a72      	ldr	r2, [pc, #456]	; (800a65c <HAL_SPI_Init+0x1f4>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d00e      	beq.n	800a4b6 <HAL_SPI_Init+0x4e>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a70      	ldr	r2, [pc, #448]	; (800a660 <HAL_SPI_Init+0x1f8>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d009      	beq.n	800a4b6 <HAL_SPI_Init+0x4e>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a6f      	ldr	r2, [pc, #444]	; (800a664 <HAL_SPI_Init+0x1fc>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d004      	beq.n	800a4b6 <HAL_SPI_Init+0x4e>
 800a4ac:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4b0:	486d      	ldr	r0, [pc, #436]	; (800a668 <HAL_SPI_Init+0x200>)
 800a4b2:	f7f8 ff30 	bl	8003316 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d009      	beq.n	800a4d2 <HAL_SPI_Init+0x6a>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4c6:	d004      	beq.n	800a4d2 <HAL_SPI_Init+0x6a>
 800a4c8:	f240 1141 	movw	r1, #321	; 0x141
 800a4cc:	4866      	ldr	r0, [pc, #408]	; (800a668 <HAL_SPI_Init+0x200>)
 800a4ce:	f7f8 ff22 	bl	8003316 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00e      	beq.n	800a4f8 <HAL_SPI_Init+0x90>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4e2:	d009      	beq.n	800a4f8 <HAL_SPI_Init+0x90>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4ec:	d004      	beq.n	800a4f8 <HAL_SPI_Init+0x90>
 800a4ee:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800a4f2:	485d      	ldr	r0, [pc, #372]	; (800a668 <HAL_SPI_Init+0x200>)
 800a4f4:	f7f8 ff0f 	bl	8003316 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a500:	d008      	beq.n	800a514 <HAL_SPI_Init+0xac>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d004      	beq.n	800a514 <HAL_SPI_Init+0xac>
 800a50a:	f240 1143 	movw	r1, #323	; 0x143
 800a50e:	4856      	ldr	r0, [pc, #344]	; (800a668 <HAL_SPI_Init+0x200>)
 800a510:	f7f8 ff01 	bl	8003316 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a51c:	d00d      	beq.n	800a53a <HAL_SPI_Init+0xd2>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d009      	beq.n	800a53a <HAL_SPI_Init+0xd2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a52e:	d004      	beq.n	800a53a <HAL_SPI_Init+0xd2>
 800a530:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a534:	484c      	ldr	r0, [pc, #304]	; (800a668 <HAL_SPI_Init+0x200>)
 800a536:	f7f8 feee 	bl	8003316 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d020      	beq.n	800a584 <HAL_SPI_Init+0x11c>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	2b08      	cmp	r3, #8
 800a548:	d01c      	beq.n	800a584 <HAL_SPI_Init+0x11c>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	69db      	ldr	r3, [r3, #28]
 800a54e:	2b10      	cmp	r3, #16
 800a550:	d018      	beq.n	800a584 <HAL_SPI_Init+0x11c>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	2b18      	cmp	r3, #24
 800a558:	d014      	beq.n	800a584 <HAL_SPI_Init+0x11c>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	2b20      	cmp	r3, #32
 800a560:	d010      	beq.n	800a584 <HAL_SPI_Init+0x11c>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	2b28      	cmp	r3, #40	; 0x28
 800a568:	d00c      	beq.n	800a584 <HAL_SPI_Init+0x11c>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	2b30      	cmp	r3, #48	; 0x30
 800a570:	d008      	beq.n	800a584 <HAL_SPI_Init+0x11c>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	2b38      	cmp	r3, #56	; 0x38
 800a578:	d004      	beq.n	800a584 <HAL_SPI_Init+0x11c>
 800a57a:	f240 1145 	movw	r1, #325	; 0x145
 800a57e:	483a      	ldr	r0, [pc, #232]	; (800a668 <HAL_SPI_Init+0x200>)
 800a580:	f7f8 fec9 	bl	8003316 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d008      	beq.n	800a59e <HAL_SPI_Init+0x136>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	2b80      	cmp	r3, #128	; 0x80
 800a592:	d004      	beq.n	800a59e <HAL_SPI_Init+0x136>
 800a594:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800a598:	4833      	ldr	r0, [pc, #204]	; (800a668 <HAL_SPI_Init+0x200>)
 800a59a:	f7f8 febc 	bl	8003316 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d008      	beq.n	800a5b8 <HAL_SPI_Init+0x150>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5aa:	2b10      	cmp	r3, #16
 800a5ac:	d004      	beq.n	800a5b8 <HAL_SPI_Init+0x150>
 800a5ae:	f240 1147 	movw	r1, #327	; 0x147
 800a5b2:	482d      	ldr	r0, [pc, #180]	; (800a668 <HAL_SPI_Init+0x200>)
 800a5b4:	f7f8 feaf 	bl	8003316 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d155      	bne.n	800a66c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <HAL_SPI_Init+0x172>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d004      	beq.n	800a5da <HAL_SPI_Init+0x172>
 800a5d0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800a5d4:	4824      	ldr	r0, [pc, #144]	; (800a668 <HAL_SPI_Init+0x200>)
 800a5d6:	f7f8 fe9e 	bl	8003316 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	695b      	ldr	r3, [r3, #20]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d008      	beq.n	800a5f4 <HAL_SPI_Init+0x18c>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d004      	beq.n	800a5f4 <HAL_SPI_Init+0x18c>
 800a5ea:	f240 114b 	movw	r1, #331	; 0x14b
 800a5ee:	481e      	ldr	r0, [pc, #120]	; (800a668 <HAL_SPI_Init+0x200>)
 800a5f0:	f7f8 fe91 	bl	8003316 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5fc:	d125      	bne.n	800a64a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d05d      	beq.n	800a6c2 <HAL_SPI_Init+0x25a>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	2b08      	cmp	r3, #8
 800a60c:	d059      	beq.n	800a6c2 <HAL_SPI_Init+0x25a>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	2b10      	cmp	r3, #16
 800a614:	d055      	beq.n	800a6c2 <HAL_SPI_Init+0x25a>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	2b18      	cmp	r3, #24
 800a61c:	d051      	beq.n	800a6c2 <HAL_SPI_Init+0x25a>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	2b20      	cmp	r3, #32
 800a624:	d04d      	beq.n	800a6c2 <HAL_SPI_Init+0x25a>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	2b28      	cmp	r3, #40	; 0x28
 800a62c:	d049      	beq.n	800a6c2 <HAL_SPI_Init+0x25a>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	2b30      	cmp	r3, #48	; 0x30
 800a634:	d045      	beq.n	800a6c2 <HAL_SPI_Init+0x25a>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	2b38      	cmp	r3, #56	; 0x38
 800a63c:	d041      	beq.n	800a6c2 <HAL_SPI_Init+0x25a>
 800a63e:	f240 114f 	movw	r1, #335	; 0x14f
 800a642:	4809      	ldr	r0, [pc, #36]	; (800a668 <HAL_SPI_Init+0x200>)
 800a644:	f7f8 fe67 	bl	8003316 <assert_failed>
 800a648:	e03b      	b.n	800a6c2 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	61da      	str	r2, [r3, #28]
 800a650:	e037      	b.n	800a6c2 <HAL_SPI_Init+0x25a>
 800a652:	bf00      	nop
 800a654:	40013000 	.word	0x40013000
 800a658:	40003800 	.word	0x40003800
 800a65c:	40003c00 	.word	0x40003c00
 800a660:	40013400 	.word	0x40013400
 800a664:	40015000 	.word	0x40015000
 800a668:	080105b8 	.word	0x080105b8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d020      	beq.n	800a6b6 <HAL_SPI_Init+0x24e>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	2b08      	cmp	r3, #8
 800a67a:	d01c      	beq.n	800a6b6 <HAL_SPI_Init+0x24e>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	2b10      	cmp	r3, #16
 800a682:	d018      	beq.n	800a6b6 <HAL_SPI_Init+0x24e>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	69db      	ldr	r3, [r3, #28]
 800a688:	2b18      	cmp	r3, #24
 800a68a:	d014      	beq.n	800a6b6 <HAL_SPI_Init+0x24e>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	69db      	ldr	r3, [r3, #28]
 800a690:	2b20      	cmp	r3, #32
 800a692:	d010      	beq.n	800a6b6 <HAL_SPI_Init+0x24e>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	2b28      	cmp	r3, #40	; 0x28
 800a69a:	d00c      	beq.n	800a6b6 <HAL_SPI_Init+0x24e>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	69db      	ldr	r3, [r3, #28]
 800a6a0:	2b30      	cmp	r3, #48	; 0x30
 800a6a2:	d008      	beq.n	800a6b6 <HAL_SPI_Init+0x24e>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	2b38      	cmp	r3, #56	; 0x38
 800a6aa:	d004      	beq.n	800a6b6 <HAL_SPI_Init+0x24e>
 800a6ac:	f240 1159 	movw	r1, #345	; 0x159
 800a6b0:	484a      	ldr	r0, [pc, #296]	; (800a7dc <HAL_SPI_Init+0x374>)
 800a6b2:	f7f8 fe30 	bl	8003316 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d126      	bne.n	800a722 <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a40      	ldr	r2, [pc, #256]	; (800a7e0 <HAL_SPI_Init+0x378>)
 800a6e0:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a3f      	ldr	r2, [pc, #252]	; (800a7e4 <HAL_SPI_Init+0x37c>)
 800a6e6:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a3f      	ldr	r2, [pc, #252]	; (800a7e8 <HAL_SPI_Init+0x380>)
 800a6ec:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a3e      	ldr	r2, [pc, #248]	; (800a7ec <HAL_SPI_Init+0x384>)
 800a6f2:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a3e      	ldr	r2, [pc, #248]	; (800a7f0 <HAL_SPI_Init+0x388>)
 800a6f8:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a3d      	ldr	r2, [pc, #244]	; (800a7f4 <HAL_SPI_Init+0x38c>)
 800a6fe:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a3d      	ldr	r2, [pc, #244]	; (800a7f8 <HAL_SPI_Init+0x390>)
 800a704:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a3c      	ldr	r2, [pc, #240]	; (800a7fc <HAL_SPI_Init+0x394>)
 800a70a:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a710:	2b00      	cmp	r3, #0
 800a712:	d102      	bne.n	800a71a <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a3a      	ldr	r2, [pc, #232]	; (800a800 <HAL_SPI_Init+0x398>)
 800a718:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2202      	movs	r2, #2
 800a726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a738:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a74a:	431a      	orrs	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	431a      	orrs	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a772:	431a      	orrs	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a77c:	431a      	orrs	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a786:	ea42 0103 	orr.w	r1, r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	0c1b      	lsrs	r3, r3, #16
 800a7a0:	f003 0104 	and.w	r1, r3, #4
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a8:	f003 0210 	and.w	r2, r3, #16
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	69da      	ldr	r2, [r3, #28]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	080105b8 	.word	0x080105b8
 800a7e0:	0800aa05 	.word	0x0800aa05
 800a7e4:	0800aa19 	.word	0x0800aa19
 800a7e8:	0800aa2d 	.word	0x0800aa2d
 800a7ec:	0800aa41 	.word	0x0800aa41
 800a7f0:	0800aa55 	.word	0x0800aa55
 800a7f4:	0800aa69 	.word	0x0800aa69
 800a7f8:	0800aa7d 	.word	0x0800aa7d
 800a7fc:	0800aa91 	.word	0x0800aa91
 800a800:	08003565 	.word	0x08003565

0800a804 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	099b      	lsrs	r3, r3, #6
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10f      	bne.n	800a848 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00a      	beq.n	800a848 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	099b      	lsrs	r3, r3, #6
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d004      	beq.n	800a848 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	4798      	blx	r3
    return;
 800a846:	e0d8      	b.n	800a9fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	085b      	lsrs	r3, r3, #1
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00a      	beq.n	800a86a <HAL_SPI_IRQHandler+0x66>
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	09db      	lsrs	r3, r3, #7
 800a858:	f003 0301 	and.w	r3, r3, #1
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d004      	beq.n	800a86a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	4798      	blx	r3
    return;
 800a868:	e0c7      	b.n	800a9fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	095b      	lsrs	r3, r3, #5
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10c      	bne.n	800a890 <HAL_SPI_IRQHandler+0x8c>
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	099b      	lsrs	r3, r3, #6
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d106      	bne.n	800a890 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	0a1b      	lsrs	r3, r3, #8
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 80b5 	beq.w	800a9fa <HAL_SPI_IRQHandler+0x1f6>
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	095b      	lsrs	r3, r3, #5
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 80ae 	beq.w	800a9fa <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	099b      	lsrs	r3, r3, #6
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d023      	beq.n	800a8f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	d011      	beq.n	800a8da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ba:	f043 0204 	orr.w	r2, r3, #4
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	617b      	str	r3, [r7, #20]
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	e00b      	b.n	800a8f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8da:	2300      	movs	r3, #0
 800a8dc:	613b      	str	r3, [r7, #16]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	613b      	str	r3, [r7, #16]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	613b      	str	r3, [r7, #16]
 800a8ee:	693b      	ldr	r3, [r7, #16]
        return;
 800a8f0:	e083      	b.n	800a9fa <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	095b      	lsrs	r3, r3, #5
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d014      	beq.n	800a928 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a902:	f043 0201 	orr.w	r2, r3, #1
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	0a1b      	lsrs	r3, r3, #8
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00c      	beq.n	800a94e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a938:	f043 0208 	orr.w	r2, r3, #8
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a940:	2300      	movs	r3, #0
 800a942:	60bb      	str	r3, [r7, #8]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	60bb      	str	r3, [r7, #8]
 800a94c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a952:	2b00      	cmp	r3, #0
 800a954:	d050      	beq.n	800a9f8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a964:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <HAL_SPI_IRQHandler+0x17e>
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d034      	beq.n	800a9ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0203 	bic.w	r2, r2, #3
 800a990:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a996:	2b00      	cmp	r3, #0
 800a998:	d011      	beq.n	800a9be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a99e:	4a18      	ldr	r2, [pc, #96]	; (800aa00 <HAL_SPI_IRQHandler+0x1fc>)
 800a9a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fa fec4 	bl	8005734 <HAL_DMA_Abort_IT>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d005      	beq.n	800a9be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d017      	beq.n	800a9f6 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ca:	4a0d      	ldr	r2, [pc, #52]	; (800aa00 <HAL_SPI_IRQHandler+0x1fc>)
 800a9cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fa feae 	bl	8005734 <HAL_DMA_Abort_IT>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00b      	beq.n	800a9f6 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a9ea:	e004      	b.n	800a9f6 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a9f4:	e000      	b.n	800a9f8 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 800a9f6:	bf00      	nop
    return;
 800a9f8:	bf00      	nop
  }
}
 800a9fa:	3720      	adds	r7, #32
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	0800aaa5 	.word	0x0800aaa5

0800aa04 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aac6:	bf00      	nop
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e0b2      	b.n	800ac48 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a5a      	ldr	r2, [pc, #360]	; (800ac50 <HAL_TIM_Base_Init+0x180>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d027      	beq.n	800ab3c <HAL_TIM_Base_Init+0x6c>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaf4:	d022      	beq.n	800ab3c <HAL_TIM_Base_Init+0x6c>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a56      	ldr	r2, [pc, #344]	; (800ac54 <HAL_TIM_Base_Init+0x184>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d01d      	beq.n	800ab3c <HAL_TIM_Base_Init+0x6c>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a54      	ldr	r2, [pc, #336]	; (800ac58 <HAL_TIM_Base_Init+0x188>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d018      	beq.n	800ab3c <HAL_TIM_Base_Init+0x6c>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a53      	ldr	r2, [pc, #332]	; (800ac5c <HAL_TIM_Base_Init+0x18c>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d013      	beq.n	800ab3c <HAL_TIM_Base_Init+0x6c>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a51      	ldr	r2, [pc, #324]	; (800ac60 <HAL_TIM_Base_Init+0x190>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d00e      	beq.n	800ab3c <HAL_TIM_Base_Init+0x6c>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a50      	ldr	r2, [pc, #320]	; (800ac64 <HAL_TIM_Base_Init+0x194>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d009      	beq.n	800ab3c <HAL_TIM_Base_Init+0x6c>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a4e      	ldr	r2, [pc, #312]	; (800ac68 <HAL_TIM_Base_Init+0x198>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d004      	beq.n	800ab3c <HAL_TIM_Base_Init+0x6c>
 800ab32:	f240 1113 	movw	r1, #275	; 0x113
 800ab36:	484d      	ldr	r0, [pc, #308]	; (800ac6c <HAL_TIM_Base_Init+0x19c>)
 800ab38:	f7f8 fbed 	bl	8003316 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d014      	beq.n	800ab6e <HAL_TIM_Base_Init+0x9e>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	2b10      	cmp	r3, #16
 800ab4a:	d010      	beq.n	800ab6e <HAL_TIM_Base_Init+0x9e>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	2b20      	cmp	r3, #32
 800ab52:	d00c      	beq.n	800ab6e <HAL_TIM_Base_Init+0x9e>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	2b40      	cmp	r3, #64	; 0x40
 800ab5a:	d008      	beq.n	800ab6e <HAL_TIM_Base_Init+0x9e>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	2b60      	cmp	r3, #96	; 0x60
 800ab62:	d004      	beq.n	800ab6e <HAL_TIM_Base_Init+0x9e>
 800ab64:	f44f 718a 	mov.w	r1, #276	; 0x114
 800ab68:	4840      	ldr	r0, [pc, #256]	; (800ac6c <HAL_TIM_Base_Init+0x19c>)
 800ab6a:	f7f8 fbd4 	bl	8003316 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00e      	beq.n	800ab94 <HAL_TIM_Base_Init+0xc4>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab7e:	d009      	beq.n	800ab94 <HAL_TIM_Base_Init+0xc4>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab88:	d004      	beq.n	800ab94 <HAL_TIM_Base_Init+0xc4>
 800ab8a:	f240 1115 	movw	r1, #277	; 0x115
 800ab8e:	4837      	ldr	r0, [pc, #220]	; (800ac6c <HAL_TIM_Base_Init+0x19c>)
 800ab90:	f7f8 fbc1 	bl	8003316 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d008      	beq.n	800abae <HAL_TIM_Base_Init+0xde>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	2b80      	cmp	r3, #128	; 0x80
 800aba2:	d004      	beq.n	800abae <HAL_TIM_Base_Init+0xde>
 800aba4:	f44f 718b 	mov.w	r1, #278	; 0x116
 800aba8:	4830      	ldr	r0, [pc, #192]	; (800ac6c <HAL_TIM_Base_Init+0x19c>)
 800abaa:	f7f8 fbb4 	bl	8003316 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d111      	bne.n	800abde <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 ff80 	bl	800bac8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d102      	bne.n	800abd6 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a27      	ldr	r2, [pc, #156]	; (800ac70 <HAL_TIM_Base_Init+0x1a0>)
 800abd4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2202      	movs	r2, #2
 800abe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3304      	adds	r3, #4
 800abee:	4619      	mov	r1, r3
 800abf0:	4610      	mov	r0, r2
 800abf2:	f000 fe4f 	bl	800b894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	40010000 	.word	0x40010000
 800ac54:	40000400 	.word	0x40000400
 800ac58:	40000800 	.word	0x40000800
 800ac5c:	40000c00 	.word	0x40000c00
 800ac60:	40014000 	.word	0x40014000
 800ac64:	40014400 	.word	0x40014400
 800ac68:	40014800 	.word	0x40014800
 800ac6c:	0801062c 	.word	0x0801062c
 800ac70:	08003c1d 	.word	0x08003c1d

0800ac74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a39      	ldr	r2, [pc, #228]	; (800ad68 <HAL_TIM_Base_Start+0xf4>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d027      	beq.n	800acd6 <HAL_TIM_Base_Start+0x62>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac8e:	d022      	beq.n	800acd6 <HAL_TIM_Base_Start+0x62>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a35      	ldr	r2, [pc, #212]	; (800ad6c <HAL_TIM_Base_Start+0xf8>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d01d      	beq.n	800acd6 <HAL_TIM_Base_Start+0x62>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a34      	ldr	r2, [pc, #208]	; (800ad70 <HAL_TIM_Base_Start+0xfc>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d018      	beq.n	800acd6 <HAL_TIM_Base_Start+0x62>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a32      	ldr	r2, [pc, #200]	; (800ad74 <HAL_TIM_Base_Start+0x100>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d013      	beq.n	800acd6 <HAL_TIM_Base_Start+0x62>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a31      	ldr	r2, [pc, #196]	; (800ad78 <HAL_TIM_Base_Start+0x104>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d00e      	beq.n	800acd6 <HAL_TIM_Base_Start+0x62>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a2f      	ldr	r2, [pc, #188]	; (800ad7c <HAL_TIM_Base_Start+0x108>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d009      	beq.n	800acd6 <HAL_TIM_Base_Start+0x62>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a2e      	ldr	r2, [pc, #184]	; (800ad80 <HAL_TIM_Base_Start+0x10c>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d004      	beq.n	800acd6 <HAL_TIM_Base_Start+0x62>
 800accc:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800acd0:	482c      	ldr	r0, [pc, #176]	; (800ad84 <HAL_TIM_Base_Start+0x110>)
 800acd2:	f7f8 fb20 	bl	8003316 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d001      	beq.n	800ace6 <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e03c      	b.n	800ad60 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2202      	movs	r2, #2
 800acea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a1d      	ldr	r2, [pc, #116]	; (800ad68 <HAL_TIM_Base_Start+0xf4>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d018      	beq.n	800ad2a <HAL_TIM_Base_Start+0xb6>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad00:	d013      	beq.n	800ad2a <HAL_TIM_Base_Start+0xb6>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a19      	ldr	r2, [pc, #100]	; (800ad6c <HAL_TIM_Base_Start+0xf8>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00e      	beq.n	800ad2a <HAL_TIM_Base_Start+0xb6>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a17      	ldr	r2, [pc, #92]	; (800ad70 <HAL_TIM_Base_Start+0xfc>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d009      	beq.n	800ad2a <HAL_TIM_Base_Start+0xb6>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a16      	ldr	r2, [pc, #88]	; (800ad74 <HAL_TIM_Base_Start+0x100>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d004      	beq.n	800ad2a <HAL_TIM_Base_Start+0xb6>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a14      	ldr	r2, [pc, #80]	; (800ad78 <HAL_TIM_Base_Start+0x104>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d111      	bne.n	800ad4e <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f003 0307 	and.w	r3, r3, #7
 800ad34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2b06      	cmp	r3, #6
 800ad3a:	d010      	beq.n	800ad5e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f042 0201 	orr.w	r2, r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad4c:	e007      	b.n	800ad5e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f042 0201 	orr.w	r2, r2, #1
 800ad5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	40010000 	.word	0x40010000
 800ad6c:	40000400 	.word	0x40000400
 800ad70:	40000800 	.word	0x40000800
 800ad74:	40000c00 	.word	0x40000c00
 800ad78:	40014000 	.word	0x40014000
 800ad7c:	40014400 	.word	0x40014400
 800ad80:	40014800 	.word	0x40014800
 800ad84:	0801062c 	.word	0x0801062c

0800ad88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a25      	ldr	r2, [pc, #148]	; (800ae2c <HAL_TIM_Base_Stop+0xa4>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d027      	beq.n	800adea <HAL_TIM_Base_Stop+0x62>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada2:	d022      	beq.n	800adea <HAL_TIM_Base_Stop+0x62>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a21      	ldr	r2, [pc, #132]	; (800ae30 <HAL_TIM_Base_Stop+0xa8>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d01d      	beq.n	800adea <HAL_TIM_Base_Stop+0x62>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a20      	ldr	r2, [pc, #128]	; (800ae34 <HAL_TIM_Base_Stop+0xac>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d018      	beq.n	800adea <HAL_TIM_Base_Stop+0x62>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a1e      	ldr	r2, [pc, #120]	; (800ae38 <HAL_TIM_Base_Stop+0xb0>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d013      	beq.n	800adea <HAL_TIM_Base_Stop+0x62>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a1d      	ldr	r2, [pc, #116]	; (800ae3c <HAL_TIM_Base_Stop+0xb4>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d00e      	beq.n	800adea <HAL_TIM_Base_Stop+0x62>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a1b      	ldr	r2, [pc, #108]	; (800ae40 <HAL_TIM_Base_Stop+0xb8>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d009      	beq.n	800adea <HAL_TIM_Base_Stop+0x62>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a1a      	ldr	r2, [pc, #104]	; (800ae44 <HAL_TIM_Base_Stop+0xbc>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d004      	beq.n	800adea <HAL_TIM_Base_Stop+0x62>
 800ade0:	f240 11b9 	movw	r1, #441	; 0x1b9
 800ade4:	4818      	ldr	r0, [pc, #96]	; (800ae48 <HAL_TIM_Base_Stop+0xc0>)
 800ade6:	f7f8 fa96 	bl	8003316 <assert_failed>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	6a1a      	ldr	r2, [r3, #32]
 800adf0:	f241 1311 	movw	r3, #4369	; 0x1111
 800adf4:	4013      	ands	r3, r2
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10f      	bne.n	800ae1a <HAL_TIM_Base_Stop+0x92>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6a1a      	ldr	r2, [r3, #32]
 800ae00:	f240 4344 	movw	r3, #1092	; 0x444
 800ae04:	4013      	ands	r3, r2
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d107      	bne.n	800ae1a <HAL_TIM_Base_Stop+0x92>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f022 0201 	bic.w	r2, r2, #1
 800ae18:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	40010000 	.word	0x40010000
 800ae30:	40000400 	.word	0x40000400
 800ae34:	40000800 	.word	0x40000800
 800ae38:	40000c00 	.word	0x40000c00
 800ae3c:	40014000 	.word	0x40014000
 800ae40:	40014400 	.word	0x40014400
 800ae44:	40014800 	.word	0x40014800
 800ae48:	0801062c 	.word	0x0801062c

0800ae4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a3d      	ldr	r2, [pc, #244]	; (800af50 <HAL_TIM_Base_Start_IT+0x104>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d027      	beq.n	800aeae <HAL_TIM_Base_Start_IT+0x62>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae66:	d022      	beq.n	800aeae <HAL_TIM_Base_Start_IT+0x62>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a39      	ldr	r2, [pc, #228]	; (800af54 <HAL_TIM_Base_Start_IT+0x108>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d01d      	beq.n	800aeae <HAL_TIM_Base_Start_IT+0x62>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a38      	ldr	r2, [pc, #224]	; (800af58 <HAL_TIM_Base_Start_IT+0x10c>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d018      	beq.n	800aeae <HAL_TIM_Base_Start_IT+0x62>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a36      	ldr	r2, [pc, #216]	; (800af5c <HAL_TIM_Base_Start_IT+0x110>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d013      	beq.n	800aeae <HAL_TIM_Base_Start_IT+0x62>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a35      	ldr	r2, [pc, #212]	; (800af60 <HAL_TIM_Base_Start_IT+0x114>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d00e      	beq.n	800aeae <HAL_TIM_Base_Start_IT+0x62>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a33      	ldr	r2, [pc, #204]	; (800af64 <HAL_TIM_Base_Start_IT+0x118>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d009      	beq.n	800aeae <HAL_TIM_Base_Start_IT+0x62>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a32      	ldr	r2, [pc, #200]	; (800af68 <HAL_TIM_Base_Start_IT+0x11c>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d004      	beq.n	800aeae <HAL_TIM_Base_Start_IT+0x62>
 800aea4:	f240 11cf 	movw	r1, #463	; 0x1cf
 800aea8:	4830      	ldr	r0, [pc, #192]	; (800af6c <HAL_TIM_Base_Start_IT+0x120>)
 800aeaa:	f7f8 fa34 	bl	8003316 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d001      	beq.n	800aebe <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e044      	b.n	800af48 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2202      	movs	r2, #2
 800aec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68da      	ldr	r2, [r3, #12]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f042 0201 	orr.w	r2, r2, #1
 800aed4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a1d      	ldr	r2, [pc, #116]	; (800af50 <HAL_TIM_Base_Start_IT+0x104>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d018      	beq.n	800af12 <HAL_TIM_Base_Start_IT+0xc6>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee8:	d013      	beq.n	800af12 <HAL_TIM_Base_Start_IT+0xc6>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a19      	ldr	r2, [pc, #100]	; (800af54 <HAL_TIM_Base_Start_IT+0x108>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d00e      	beq.n	800af12 <HAL_TIM_Base_Start_IT+0xc6>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a17      	ldr	r2, [pc, #92]	; (800af58 <HAL_TIM_Base_Start_IT+0x10c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d009      	beq.n	800af12 <HAL_TIM_Base_Start_IT+0xc6>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a16      	ldr	r2, [pc, #88]	; (800af5c <HAL_TIM_Base_Start_IT+0x110>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d004      	beq.n	800af12 <HAL_TIM_Base_Start_IT+0xc6>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a14      	ldr	r2, [pc, #80]	; (800af60 <HAL_TIM_Base_Start_IT+0x114>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d111      	bne.n	800af36 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f003 0307 	and.w	r3, r3, #7
 800af1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b06      	cmp	r3, #6
 800af22:	d010      	beq.n	800af46 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f042 0201 	orr.w	r2, r2, #1
 800af32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af34:	e007      	b.n	800af46 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f042 0201 	orr.w	r2, r2, #1
 800af44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	40010000 	.word	0x40010000
 800af54:	40000400 	.word	0x40000400
 800af58:	40000800 	.word	0x40000800
 800af5c:	40000c00 	.word	0x40000c00
 800af60:	40014000 	.word	0x40014000
 800af64:	40014400 	.word	0x40014400
 800af68:	40014800 	.word	0x40014800
 800af6c:	0801062c 	.word	0x0801062c

0800af70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	f003 0302 	and.w	r3, r3, #2
 800af82:	2b02      	cmp	r3, #2
 800af84:	d128      	bne.n	800afd8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	f003 0302 	and.w	r3, r3, #2
 800af90:	2b02      	cmp	r3, #2
 800af92:	d121      	bne.n	800afd8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f06f 0202 	mvn.w	r2, #2
 800af9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d005      	beq.n	800afbe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	4798      	blx	r3
 800afbc:	e009      	b.n	800afd2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	f003 0304 	and.w	r3, r3, #4
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	d128      	bne.n	800b038 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f003 0304 	and.w	r3, r3, #4
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	d121      	bne.n	800b038 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f06f 0204 	mvn.w	r2, #4
 800affc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2202      	movs	r2, #2
 800b002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	4798      	blx	r3
 800b01c:	e009      	b.n	800b032 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	f003 0308 	and.w	r3, r3, #8
 800b042:	2b08      	cmp	r3, #8
 800b044:	d128      	bne.n	800b098 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	f003 0308 	and.w	r3, r3, #8
 800b050:	2b08      	cmp	r3, #8
 800b052:	d121      	bne.n	800b098 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f06f 0208 	mvn.w	r2, #8
 800b05c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2204      	movs	r2, #4
 800b062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	69db      	ldr	r3, [r3, #28]
 800b06a:	f003 0303 	and.w	r3, r3, #3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d005      	beq.n	800b07e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	4798      	blx	r3
 800b07c:	e009      	b.n	800b092 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	f003 0310 	and.w	r3, r3, #16
 800b0a2:	2b10      	cmp	r3, #16
 800b0a4:	d128      	bne.n	800b0f8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	f003 0310 	and.w	r3, r3, #16
 800b0b0:	2b10      	cmp	r3, #16
 800b0b2:	d121      	bne.n	800b0f8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f06f 0210 	mvn.w	r2, #16
 800b0bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2208      	movs	r2, #8
 800b0c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	69db      	ldr	r3, [r3, #28]
 800b0ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d005      	beq.n	800b0de <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	4798      	blx	r3
 800b0dc:	e009      	b.n	800b0f2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b01      	cmp	r3, #1
 800b104:	d110      	bne.n	800b128 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	2b01      	cmp	r3, #1
 800b112:	d109      	bne.n	800b128 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f06f 0201 	mvn.w	r2, #1
 800b11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b132:	2b80      	cmp	r3, #128	; 0x80
 800b134:	d110      	bne.n	800b158 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b140:	2b80      	cmp	r3, #128	; 0x80
 800b142:	d109      	bne.n	800b158 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b14c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b162:	2b40      	cmp	r3, #64	; 0x40
 800b164:	d110      	bne.n	800b188 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b170:	2b40      	cmp	r3, #64	; 0x40
 800b172:	d109      	bne.n	800b188 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b17c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	2b20      	cmp	r3, #32
 800b194:	d110      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	f003 0320 	and.w	r3, r3, #32
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	d109      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f06f 0220 	mvn.w	r2, #32
 800b1ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1b8:	bf00      	nop
 800b1ba:	3708      	adds	r7, #8
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d101      	bne.n	800b1dc <HAL_TIM_ConfigClockSource+0x1c>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e2f0      	b.n	800b7be <HAL_TIM_ConfigClockSource+0x5fe>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1f4:	d029      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x8a>
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b70      	cmp	r3, #112	; 0x70
 800b1fc:	d025      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x8a>
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b206:	d020      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x8a>
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b40      	cmp	r3, #64	; 0x40
 800b20e:	d01c      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x8a>
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b50      	cmp	r3, #80	; 0x50
 800b216:	d018      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x8a>
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b60      	cmp	r3, #96	; 0x60
 800b21e:	d014      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x8a>
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d010      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x8a>
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b10      	cmp	r3, #16
 800b22e:	d00c      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x8a>
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b20      	cmp	r3, #32
 800b236:	d008      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x8a>
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b30      	cmp	r3, #48	; 0x30
 800b23e:	d004      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x8a>
 800b240:	f241 41b7 	movw	r1, #5303	; 0x14b7
 800b244:	487c      	ldr	r0, [pc, #496]	; (800b438 <HAL_TIM_ConfigClockSource+0x278>)
 800b246:	f7f8 f866 	bl	8003316 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b258:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b260:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b272:	f000 80f1 	beq.w	800b458 <HAL_TIM_ConfigClockSource+0x298>
 800b276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b27a:	f200 8293 	bhi.w	800b7a4 <HAL_TIM_ConfigClockSource+0x5e4>
 800b27e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b282:	d02d      	beq.n	800b2e0 <HAL_TIM_ConfigClockSource+0x120>
 800b284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b288:	f200 828c 	bhi.w	800b7a4 <HAL_TIM_ConfigClockSource+0x5e4>
 800b28c:	2b70      	cmp	r3, #112	; 0x70
 800b28e:	d05d      	beq.n	800b34c <HAL_TIM_ConfigClockSource+0x18c>
 800b290:	2b70      	cmp	r3, #112	; 0x70
 800b292:	f200 8287 	bhi.w	800b7a4 <HAL_TIM_ConfigClockSource+0x5e4>
 800b296:	2b60      	cmp	r3, #96	; 0x60
 800b298:	f000 81a0 	beq.w	800b5dc <HAL_TIM_ConfigClockSource+0x41c>
 800b29c:	2b60      	cmp	r3, #96	; 0x60
 800b29e:	f200 8281 	bhi.w	800b7a4 <HAL_TIM_ConfigClockSource+0x5e4>
 800b2a2:	2b50      	cmp	r3, #80	; 0x50
 800b2a4:	f000 8144 	beq.w	800b530 <HAL_TIM_ConfigClockSource+0x370>
 800b2a8:	2b50      	cmp	r3, #80	; 0x50
 800b2aa:	f200 827b 	bhi.w	800b7a4 <HAL_TIM_ConfigClockSource+0x5e4>
 800b2ae:	2b40      	cmp	r3, #64	; 0x40
 800b2b0:	f000 81f6 	beq.w	800b6a0 <HAL_TIM_ConfigClockSource+0x4e0>
 800b2b4:	2b40      	cmp	r3, #64	; 0x40
 800b2b6:	f200 8275 	bhi.w	800b7a4 <HAL_TIM_ConfigClockSource+0x5e4>
 800b2ba:	2b30      	cmp	r3, #48	; 0x30
 800b2bc:	f000 8246 	beq.w	800b74c <HAL_TIM_ConfigClockSource+0x58c>
 800b2c0:	2b30      	cmp	r3, #48	; 0x30
 800b2c2:	f200 826f 	bhi.w	800b7a4 <HAL_TIM_ConfigClockSource+0x5e4>
 800b2c6:	2b20      	cmp	r3, #32
 800b2c8:	f000 8240 	beq.w	800b74c <HAL_TIM_ConfigClockSource+0x58c>
 800b2cc:	2b20      	cmp	r3, #32
 800b2ce:	f200 8269 	bhi.w	800b7a4 <HAL_TIM_ConfigClockSource+0x5e4>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 823a 	beq.w	800b74c <HAL_TIM_ConfigClockSource+0x58c>
 800b2d8:	2b10      	cmp	r3, #16
 800b2da:	f000 8237 	beq.w	800b74c <HAL_TIM_ConfigClockSource+0x58c>
 800b2de:	e261      	b.n	800b7a4 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a55      	ldr	r2, [pc, #340]	; (800b43c <HAL_TIM_ConfigClockSource+0x27c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	f000 825f 	beq.w	800b7aa <HAL_TIM_ConfigClockSource+0x5ea>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2f4:	f000 8259 	beq.w	800b7aa <HAL_TIM_ConfigClockSource+0x5ea>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a50      	ldr	r2, [pc, #320]	; (800b440 <HAL_TIM_ConfigClockSource+0x280>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	f000 8253 	beq.w	800b7aa <HAL_TIM_ConfigClockSource+0x5ea>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a4e      	ldr	r2, [pc, #312]	; (800b444 <HAL_TIM_ConfigClockSource+0x284>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	f000 824d 	beq.w	800b7aa <HAL_TIM_ConfigClockSource+0x5ea>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a4c      	ldr	r2, [pc, #304]	; (800b448 <HAL_TIM_ConfigClockSource+0x288>)
 800b316:	4293      	cmp	r3, r2
 800b318:	f000 8247 	beq.w	800b7aa <HAL_TIM_ConfigClockSource+0x5ea>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a4a      	ldr	r2, [pc, #296]	; (800b44c <HAL_TIM_ConfigClockSource+0x28c>)
 800b322:	4293      	cmp	r3, r2
 800b324:	f000 8241 	beq.w	800b7aa <HAL_TIM_ConfigClockSource+0x5ea>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a48      	ldr	r2, [pc, #288]	; (800b450 <HAL_TIM_ConfigClockSource+0x290>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	f000 823b 	beq.w	800b7aa <HAL_TIM_ConfigClockSource+0x5ea>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a46      	ldr	r2, [pc, #280]	; (800b454 <HAL_TIM_ConfigClockSource+0x294>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	f000 8235 	beq.w	800b7aa <HAL_TIM_ConfigClockSource+0x5ea>
 800b340:	f241 41c3 	movw	r1, #5315	; 0x14c3
 800b344:	483c      	ldr	r0, [pc, #240]	; (800b438 <HAL_TIM_ConfigClockSource+0x278>)
 800b346:	f7f7 ffe6 	bl	8003316 <assert_failed>
      break;
 800b34a:	e22e      	b.n	800b7aa <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a3a      	ldr	r2, [pc, #232]	; (800b43c <HAL_TIM_ConfigClockSource+0x27c>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d01d      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x1d2>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b35e:	d018      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x1d2>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a36      	ldr	r2, [pc, #216]	; (800b440 <HAL_TIM_ConfigClockSource+0x280>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d013      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x1d2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a35      	ldr	r2, [pc, #212]	; (800b444 <HAL_TIM_ConfigClockSource+0x284>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d00e      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x1d2>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a33      	ldr	r2, [pc, #204]	; (800b448 <HAL_TIM_ConfigClockSource+0x288>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d009      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x1d2>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a32      	ldr	r2, [pc, #200]	; (800b44c <HAL_TIM_ConfigClockSource+0x28c>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d004      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x1d2>
 800b388:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800b38c:	482a      	ldr	r0, [pc, #168]	; (800b438 <HAL_TIM_ConfigClockSource+0x278>)
 800b38e:	f7f7 ffc2 	bl	8003316 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d013      	beq.n	800b3c2 <HAL_TIM_ConfigClockSource+0x202>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3a2:	d00e      	beq.n	800b3c2 <HAL_TIM_ConfigClockSource+0x202>
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ac:	d009      	beq.n	800b3c2 <HAL_TIM_ConfigClockSource+0x202>
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3b6:	d004      	beq.n	800b3c2 <HAL_TIM_ConfigClockSource+0x202>
 800b3b8:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800b3bc:	481e      	ldr	r0, [pc, #120]	; (800b438 <HAL_TIM_ConfigClockSource+0x278>)
 800b3be:	f7f7 ffaa 	bl	8003316 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3ca:	d014      	beq.n	800b3f6 <HAL_TIM_ConfigClockSource+0x236>
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d010      	beq.n	800b3f6 <HAL_TIM_ConfigClockSource+0x236>
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00c      	beq.n	800b3f6 <HAL_TIM_ConfigClockSource+0x236>
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d008      	beq.n	800b3f6 <HAL_TIM_ConfigClockSource+0x236>
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	2b0a      	cmp	r3, #10
 800b3ea:	d004      	beq.n	800b3f6 <HAL_TIM_ConfigClockSource+0x236>
 800b3ec:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800b3f0:	4811      	ldr	r0, [pc, #68]	; (800b438 <HAL_TIM_ConfigClockSource+0x278>)
 800b3f2:	f7f7 ff90 	bl	8003316 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	2b0f      	cmp	r3, #15
 800b3fc:	d904      	bls.n	800b408 <HAL_TIM_ConfigClockSource+0x248>
 800b3fe:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800b402:	480d      	ldr	r0, [pc, #52]	; (800b438 <HAL_TIM_ConfigClockSource+0x278>)
 800b404:	f7f7 ff87 	bl	8003316 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6818      	ldr	r0, [r3, #0]
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	6899      	ldr	r1, [r3, #8]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	f000 fb36 	bl	800ba88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b42a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	609a      	str	r2, [r3, #8]
      break;
 800b434:	e1ba      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x5ec>
 800b436:	bf00      	nop
 800b438:	0801062c 	.word	0x0801062c
 800b43c:	40010000 	.word	0x40010000
 800b440:	40000400 	.word	0x40000400
 800b444:	40000800 	.word	0x40000800
 800b448:	40000c00 	.word	0x40000c00
 800b44c:	40014000 	.word	0x40014000
 800b450:	40014400 	.word	0x40014400
 800b454:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a8a      	ldr	r2, [pc, #552]	; (800b688 <HAL_TIM_ConfigClockSource+0x4c8>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d018      	beq.n	800b494 <HAL_TIM_ConfigClockSource+0x2d4>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b46a:	d013      	beq.n	800b494 <HAL_TIM_ConfigClockSource+0x2d4>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a86      	ldr	r2, [pc, #536]	; (800b68c <HAL_TIM_ConfigClockSource+0x4cc>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d00e      	beq.n	800b494 <HAL_TIM_ConfigClockSource+0x2d4>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a85      	ldr	r2, [pc, #532]	; (800b690 <HAL_TIM_ConfigClockSource+0x4d0>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d009      	beq.n	800b494 <HAL_TIM_ConfigClockSource+0x2d4>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a83      	ldr	r2, [pc, #524]	; (800b694 <HAL_TIM_ConfigClockSource+0x4d4>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d004      	beq.n	800b494 <HAL_TIM_ConfigClockSource+0x2d4>
 800b48a:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800b48e:	4882      	ldr	r0, [pc, #520]	; (800b698 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b490:	f7f7 ff41 	bl	8003316 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d013      	beq.n	800b4c4 <HAL_TIM_ConfigClockSource+0x304>
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4a4:	d00e      	beq.n	800b4c4 <HAL_TIM_ConfigClockSource+0x304>
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ae:	d009      	beq.n	800b4c4 <HAL_TIM_ConfigClockSource+0x304>
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4b8:	d004      	beq.n	800b4c4 <HAL_TIM_ConfigClockSource+0x304>
 800b4ba:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800b4be:	4876      	ldr	r0, [pc, #472]	; (800b698 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b4c0:	f7f7 ff29 	bl	8003316 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4cc:	d014      	beq.n	800b4f8 <HAL_TIM_ConfigClockSource+0x338>
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d010      	beq.n	800b4f8 <HAL_TIM_ConfigClockSource+0x338>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00c      	beq.n	800b4f8 <HAL_TIM_ConfigClockSource+0x338>
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d008      	beq.n	800b4f8 <HAL_TIM_ConfigClockSource+0x338>
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	2b0a      	cmp	r3, #10
 800b4ec:	d004      	beq.n	800b4f8 <HAL_TIM_ConfigClockSource+0x338>
 800b4ee:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800b4f2:	4869      	ldr	r0, [pc, #420]	; (800b698 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b4f4:	f7f7 ff0f 	bl	8003316 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	2b0f      	cmp	r3, #15
 800b4fe:	d904      	bls.n	800b50a <HAL_TIM_ConfigClockSource+0x34a>
 800b500:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800b504:	4864      	ldr	r0, [pc, #400]	; (800b698 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b506:	f7f7 ff06 	bl	8003316 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6818      	ldr	r0, [r3, #0]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	6899      	ldr	r1, [r3, #8]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	f000 fab5 	bl	800ba88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b52c:	609a      	str	r2, [r3, #8]
      break;
 800b52e:	e13d      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a54      	ldr	r2, [pc, #336]	; (800b688 <HAL_TIM_ConfigClockSource+0x4c8>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d01d      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x3b6>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b542:	d018      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x3b6>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a50      	ldr	r2, [pc, #320]	; (800b68c <HAL_TIM_ConfigClockSource+0x4cc>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d013      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x3b6>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a4f      	ldr	r2, [pc, #316]	; (800b690 <HAL_TIM_ConfigClockSource+0x4d0>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d00e      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x3b6>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a4d      	ldr	r2, [pc, #308]	; (800b694 <HAL_TIM_ConfigClockSource+0x4d4>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d009      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x3b6>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a4d      	ldr	r2, [pc, #308]	; (800b69c <HAL_TIM_ConfigClockSource+0x4dc>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d004      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x3b6>
 800b56c:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800b570:	4849      	ldr	r0, [pc, #292]	; (800b698 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b572:	f7f7 fed0 	bl	8003316 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b57e:	d014      	beq.n	800b5aa <HAL_TIM_ConfigClockSource+0x3ea>
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d010      	beq.n	800b5aa <HAL_TIM_ConfigClockSource+0x3ea>
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00c      	beq.n	800b5aa <HAL_TIM_ConfigClockSource+0x3ea>
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	2b02      	cmp	r3, #2
 800b596:	d008      	beq.n	800b5aa <HAL_TIM_ConfigClockSource+0x3ea>
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	2b0a      	cmp	r3, #10
 800b59e:	d004      	beq.n	800b5aa <HAL_TIM_ConfigClockSource+0x3ea>
 800b5a0:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800b5a4:	483c      	ldr	r0, [pc, #240]	; (800b698 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b5a6:	f7f7 feb6 	bl	8003316 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	2b0f      	cmp	r3, #15
 800b5b0:	d904      	bls.n	800b5bc <HAL_TIM_ConfigClockSource+0x3fc>
 800b5b2:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800b5b6:	4838      	ldr	r0, [pc, #224]	; (800b698 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b5b8:	f7f7 fead 	bl	8003316 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6818      	ldr	r0, [r3, #0]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	6859      	ldr	r1, [r3, #4]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	f000 f9e3 	bl	800b994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2150      	movs	r1, #80	; 0x50
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f000 fa3c 	bl	800ba52 <TIM_ITRx_SetConfig>
      break;
 800b5da:	e0e7      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a29      	ldr	r2, [pc, #164]	; (800b688 <HAL_TIM_ConfigClockSource+0x4c8>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d01d      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x462>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ee:	d018      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x462>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a25      	ldr	r2, [pc, #148]	; (800b68c <HAL_TIM_ConfigClockSource+0x4cc>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d013      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x462>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a24      	ldr	r2, [pc, #144]	; (800b690 <HAL_TIM_ConfigClockSource+0x4d0>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d00e      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x462>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a22      	ldr	r2, [pc, #136]	; (800b694 <HAL_TIM_ConfigClockSource+0x4d4>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d009      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x462>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a22      	ldr	r2, [pc, #136]	; (800b69c <HAL_TIM_ConfigClockSource+0x4dc>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d004      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x462>
 800b618:	f241 5106 	movw	r1, #5382	; 0x1506
 800b61c:	481e      	ldr	r0, [pc, #120]	; (800b698 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b61e:	f7f7 fe7a 	bl	8003316 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b62a:	d014      	beq.n	800b656 <HAL_TIM_ConfigClockSource+0x496>
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d010      	beq.n	800b656 <HAL_TIM_ConfigClockSource+0x496>
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00c      	beq.n	800b656 <HAL_TIM_ConfigClockSource+0x496>
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	2b02      	cmp	r3, #2
 800b642:	d008      	beq.n	800b656 <HAL_TIM_ConfigClockSource+0x496>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	2b0a      	cmp	r3, #10
 800b64a:	d004      	beq.n	800b656 <HAL_TIM_ConfigClockSource+0x496>
 800b64c:	f241 5109 	movw	r1, #5385	; 0x1509
 800b650:	4811      	ldr	r0, [pc, #68]	; (800b698 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b652:	f7f7 fe60 	bl	8003316 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	2b0f      	cmp	r3, #15
 800b65c:	d904      	bls.n	800b668 <HAL_TIM_ConfigClockSource+0x4a8>
 800b65e:	f241 510a 	movw	r1, #5386	; 0x150a
 800b662:	480d      	ldr	r0, [pc, #52]	; (800b698 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b664:	f7f7 fe57 	bl	8003316 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6818      	ldr	r0, [r3, #0]
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	6859      	ldr	r1, [r3, #4]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	461a      	mov	r2, r3
 800b676:	f000 f9bc 	bl	800b9f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2160      	movs	r1, #96	; 0x60
 800b680:	4618      	mov	r0, r3
 800b682:	f000 f9e6 	bl	800ba52 <TIM_ITRx_SetConfig>
      break;
 800b686:	e091      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x5ec>
 800b688:	40010000 	.word	0x40010000
 800b68c:	40000400 	.word	0x40000400
 800b690:	40000800 	.word	0x40000800
 800b694:	40000c00 	.word	0x40000c00
 800b698:	0801062c 	.word	0x0801062c
 800b69c:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a48      	ldr	r2, [pc, #288]	; (800b7c8 <HAL_TIM_ConfigClockSource+0x608>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d01d      	beq.n	800b6e6 <HAL_TIM_ConfigClockSource+0x526>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b2:	d018      	beq.n	800b6e6 <HAL_TIM_ConfigClockSource+0x526>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a44      	ldr	r2, [pc, #272]	; (800b7cc <HAL_TIM_ConfigClockSource+0x60c>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d013      	beq.n	800b6e6 <HAL_TIM_ConfigClockSource+0x526>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a43      	ldr	r2, [pc, #268]	; (800b7d0 <HAL_TIM_ConfigClockSource+0x610>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d00e      	beq.n	800b6e6 <HAL_TIM_ConfigClockSource+0x526>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a41      	ldr	r2, [pc, #260]	; (800b7d4 <HAL_TIM_ConfigClockSource+0x614>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d009      	beq.n	800b6e6 <HAL_TIM_ConfigClockSource+0x526>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a40      	ldr	r2, [pc, #256]	; (800b7d8 <HAL_TIM_ConfigClockSource+0x618>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d004      	beq.n	800b6e6 <HAL_TIM_ConfigClockSource+0x526>
 800b6dc:	f241 5116 	movw	r1, #5398	; 0x1516
 800b6e0:	483e      	ldr	r0, [pc, #248]	; (800b7dc <HAL_TIM_ConfigClockSource+0x61c>)
 800b6e2:	f7f7 fe18 	bl	8003316 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6ee:	d014      	beq.n	800b71a <HAL_TIM_ConfigClockSource+0x55a>
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d010      	beq.n	800b71a <HAL_TIM_ConfigClockSource+0x55a>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00c      	beq.n	800b71a <HAL_TIM_ConfigClockSource+0x55a>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	2b02      	cmp	r3, #2
 800b706:	d008      	beq.n	800b71a <HAL_TIM_ConfigClockSource+0x55a>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	2b0a      	cmp	r3, #10
 800b70e:	d004      	beq.n	800b71a <HAL_TIM_ConfigClockSource+0x55a>
 800b710:	f241 5119 	movw	r1, #5401	; 0x1519
 800b714:	4831      	ldr	r0, [pc, #196]	; (800b7dc <HAL_TIM_ConfigClockSource+0x61c>)
 800b716:	f7f7 fdfe 	bl	8003316 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	2b0f      	cmp	r3, #15
 800b720:	d904      	bls.n	800b72c <HAL_TIM_ConfigClockSource+0x56c>
 800b722:	f241 511a 	movw	r1, #5402	; 0x151a
 800b726:	482d      	ldr	r0, [pc, #180]	; (800b7dc <HAL_TIM_ConfigClockSource+0x61c>)
 800b728:	f7f7 fdf5 	bl	8003316 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	6859      	ldr	r1, [r3, #4]
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	461a      	mov	r2, r3
 800b73a:	f000 f92b 	bl	800b994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2140      	movs	r1, #64	; 0x40
 800b744:	4618      	mov	r0, r3
 800b746:	f000 f984 	bl	800ba52 <TIM_ITRx_SetConfig>
      break;
 800b74a:	e02f      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a1d      	ldr	r2, [pc, #116]	; (800b7c8 <HAL_TIM_ConfigClockSource+0x608>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d01d      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0x5d2>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b75e:	d018      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0x5d2>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a19      	ldr	r2, [pc, #100]	; (800b7cc <HAL_TIM_ConfigClockSource+0x60c>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d013      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0x5d2>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a18      	ldr	r2, [pc, #96]	; (800b7d0 <HAL_TIM_ConfigClockSource+0x610>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d00e      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0x5d2>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a16      	ldr	r2, [pc, #88]	; (800b7d4 <HAL_TIM_ConfigClockSource+0x614>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d009      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0x5d2>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a15      	ldr	r2, [pc, #84]	; (800b7d8 <HAL_TIM_ConfigClockSource+0x618>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d004      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0x5d2>
 800b788:	f241 5129 	movw	r1, #5417	; 0x1529
 800b78c:	4813      	ldr	r0, [pc, #76]	; (800b7dc <HAL_TIM_ConfigClockSource+0x61c>)
 800b78e:	f7f7 fdc2 	bl	8003316 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f000 f958 	bl	800ba52 <TIM_ITRx_SetConfig>
      break;
 800b7a2:	e003      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7a8:	e000      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800b7aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	40010000 	.word	0x40010000
 800b7cc:	40000400 	.word	0x40000400
 800b7d0:	40000800 	.word	0x40000800
 800b7d4:	40000c00 	.word	0x40000c00
 800b7d8:	40014000 	.word	0x40014000
 800b7dc:	0801062c 	.word	0x0801062c

0800b7e0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a34      	ldr	r2, [pc, #208]	; (800b978 <TIM_Base_SetConfig+0xe4>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d00f      	beq.n	800b8cc <TIM_Base_SetConfig+0x38>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8b2:	d00b      	beq.n	800b8cc <TIM_Base_SetConfig+0x38>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a31      	ldr	r2, [pc, #196]	; (800b97c <TIM_Base_SetConfig+0xe8>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d007      	beq.n	800b8cc <TIM_Base_SetConfig+0x38>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a30      	ldr	r2, [pc, #192]	; (800b980 <TIM_Base_SetConfig+0xec>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d003      	beq.n	800b8cc <TIM_Base_SetConfig+0x38>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a2f      	ldr	r2, [pc, #188]	; (800b984 <TIM_Base_SetConfig+0xf0>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d108      	bne.n	800b8de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a25      	ldr	r2, [pc, #148]	; (800b978 <TIM_Base_SetConfig+0xe4>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d01b      	beq.n	800b91e <TIM_Base_SetConfig+0x8a>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ec:	d017      	beq.n	800b91e <TIM_Base_SetConfig+0x8a>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a22      	ldr	r2, [pc, #136]	; (800b97c <TIM_Base_SetConfig+0xe8>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d013      	beq.n	800b91e <TIM_Base_SetConfig+0x8a>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a21      	ldr	r2, [pc, #132]	; (800b980 <TIM_Base_SetConfig+0xec>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d00f      	beq.n	800b91e <TIM_Base_SetConfig+0x8a>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a20      	ldr	r2, [pc, #128]	; (800b984 <TIM_Base_SetConfig+0xf0>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d00b      	beq.n	800b91e <TIM_Base_SetConfig+0x8a>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a1f      	ldr	r2, [pc, #124]	; (800b988 <TIM_Base_SetConfig+0xf4>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d007      	beq.n	800b91e <TIM_Base_SetConfig+0x8a>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a1e      	ldr	r2, [pc, #120]	; (800b98c <TIM_Base_SetConfig+0xf8>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d003      	beq.n	800b91e <TIM_Base_SetConfig+0x8a>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a1d      	ldr	r2, [pc, #116]	; (800b990 <TIM_Base_SetConfig+0xfc>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d108      	bne.n	800b930 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	689a      	ldr	r2, [r3, #8]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a08      	ldr	r2, [pc, #32]	; (800b978 <TIM_Base_SetConfig+0xe4>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d103      	bne.n	800b964 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	691a      	ldr	r2, [r3, #16]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	615a      	str	r2, [r3, #20]
}
 800b96a:	bf00      	nop
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	40010000 	.word	0x40010000
 800b97c:	40000400 	.word	0x40000400
 800b980:	40000800 	.word	0x40000800
 800b984:	40000c00 	.word	0x40000c00
 800b988:	40014000 	.word	0x40014000
 800b98c:	40014400 	.word	0x40014400
 800b990:	40014800 	.word	0x40014800

0800b994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b994:	b480      	push	{r7}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6a1b      	ldr	r3, [r3, #32]
 800b9a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6a1b      	ldr	r3, [r3, #32]
 800b9aa:	f023 0201 	bic.w	r2, r3, #1
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	699b      	ldr	r3, [r3, #24]
 800b9b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	011b      	lsls	r3, r3, #4
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f023 030a 	bic.w	r3, r3, #10
 800b9d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	693a      	ldr	r2, [r7, #16]
 800b9de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	697a      	ldr	r2, [r7, #20]
 800b9e4:	621a      	str	r2, [r3, #32]
}
 800b9e6:	bf00      	nop
 800b9e8:	371c      	adds	r7, #28
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b087      	sub	sp, #28
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	60b9      	str	r1, [r7, #8]
 800b9fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	f023 0210 	bic.w	r2, r3, #16
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6a1b      	ldr	r3, [r3, #32]
 800ba14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	031b      	lsls	r3, r3, #12
 800ba22:	697a      	ldr	r2, [r7, #20]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	011b      	lsls	r3, r3, #4
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	693a      	ldr	r2, [r7, #16]
 800ba44:	621a      	str	r2, [r3, #32]
}
 800ba46:	bf00      	nop
 800ba48:	371c      	adds	r7, #28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b085      	sub	sp, #20
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba6a:	683a      	ldr	r2, [r7, #0]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	f043 0307 	orr.w	r3, r3, #7
 800ba74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	609a      	str	r2, [r3, #8]
}
 800ba7c:	bf00      	nop
 800ba7e:	3714      	adds	r7, #20
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b087      	sub	sp, #28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800baa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	021a      	lsls	r2, r3, #8
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	431a      	orrs	r2, r3
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	4313      	orrs	r3, r2
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	609a      	str	r2, [r3, #8]
}
 800babc:	bf00      	nop
 800babe:	371c      	adds	r7, #28
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4a1c      	ldr	r2, [pc, #112]	; (800bb44 <TIM_ResetCallback+0x7c>)
 800bad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a1b      	ldr	r2, [pc, #108]	; (800bb48 <TIM_ResetCallback+0x80>)
 800badc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a1a      	ldr	r2, [pc, #104]	; (800bb4c <TIM_ResetCallback+0x84>)
 800bae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a19      	ldr	r2, [pc, #100]	; (800bb50 <TIM_ResetCallback+0x88>)
 800baec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a18      	ldr	r2, [pc, #96]	; (800bb54 <TIM_ResetCallback+0x8c>)
 800baf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a17      	ldr	r2, [pc, #92]	; (800bb58 <TIM_ResetCallback+0x90>)
 800bafc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a16      	ldr	r2, [pc, #88]	; (800bb5c <TIM_ResetCallback+0x94>)
 800bb04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a15      	ldr	r2, [pc, #84]	; (800bb60 <TIM_ResetCallback+0x98>)
 800bb0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a14      	ldr	r2, [pc, #80]	; (800bb64 <TIM_ResetCallback+0x9c>)
 800bb14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a13      	ldr	r2, [pc, #76]	; (800bb68 <TIM_ResetCallback+0xa0>)
 800bb1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a12      	ldr	r2, [pc, #72]	; (800bb6c <TIM_ResetCallback+0xa4>)
 800bb24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a11      	ldr	r2, [pc, #68]	; (800bb70 <TIM_ResetCallback+0xa8>)
 800bb2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a10      	ldr	r2, [pc, #64]	; (800bb74 <TIM_ResetCallback+0xac>)
 800bb34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800bb38:	bf00      	nop
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	080032e9 	.word	0x080032e9
 800bb48:	0800b7e1 	.word	0x0800b7e1
 800bb4c:	0800b859 	.word	0x0800b859
 800bb50:	0800b86d 	.word	0x0800b86d
 800bb54:	0800b809 	.word	0x0800b809
 800bb58:	0800b81d 	.word	0x0800b81d
 800bb5c:	0800b7f5 	.word	0x0800b7f5
 800bb60:	0800b831 	.word	0x0800b831
 800bb64:	0800b845 	.word	0x0800b845
 800bb68:	0800b881 	.word	0x0800b881
 800bb6c:	0800bcf5 	.word	0x0800bcf5
 800bb70:	0800bd09 	.word	0x0800bd09
 800bb74:	0800bd1d 	.word	0x0800bd1d

0800bb78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a55      	ldr	r2, [pc, #340]	; (800bcdc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d018      	beq.n	800bbbe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb94:	d013      	beq.n	800bbbe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a51      	ldr	r2, [pc, #324]	; (800bce0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d00e      	beq.n	800bbbe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a4f      	ldr	r2, [pc, #316]	; (800bce4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d009      	beq.n	800bbbe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a4e      	ldr	r2, [pc, #312]	; (800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d004      	beq.n	800bbbe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800bbb4:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800bbb8:	484c      	ldr	r0, [pc, #304]	; (800bcec <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800bbba:	f7f7 fbac 	bl	8003316 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d020      	beq.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b10      	cmp	r3, #16
 800bbcc:	d01c      	beq.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b20      	cmp	r3, #32
 800bbd4:	d018      	beq.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b30      	cmp	r3, #48	; 0x30
 800bbdc:	d014      	beq.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b40      	cmp	r3, #64	; 0x40
 800bbe4:	d010      	beq.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b50      	cmp	r3, #80	; 0x50
 800bbec:	d00c      	beq.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b60      	cmp	r3, #96	; 0x60
 800bbf4:	d008      	beq.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2b70      	cmp	r3, #112	; 0x70
 800bbfc:	d004      	beq.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800bbfe:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800bc02:	483a      	ldr	r0, [pc, #232]	; (800bcec <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800bc04:	f7f7 fb87 	bl	8003316 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	2b80      	cmp	r3, #128	; 0x80
 800bc0e:	d008      	beq.n	800bc22 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d004      	beq.n	800bc22 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800bc18:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800bc1c:	4833      	ldr	r0, [pc, #204]	; (800bcec <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800bc1e:	f7f7 fb7a 	bl	8003316 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d101      	bne.n	800bc30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	e050      	b.n	800bcd2 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a1b      	ldr	r2, [pc, #108]	; (800bcdc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d018      	beq.n	800bca6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc7c:	d013      	beq.n	800bca6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a17      	ldr	r2, [pc, #92]	; (800bce0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d00e      	beq.n	800bca6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a15      	ldr	r2, [pc, #84]	; (800bce4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d009      	beq.n	800bca6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a14      	ldr	r2, [pc, #80]	; (800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d004      	beq.n	800bca6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a13      	ldr	r2, [pc, #76]	; (800bcf0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d10c      	bne.n	800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	40010000 	.word	0x40010000
 800bce0:	40000400 	.word	0x40000400
 800bce4:	40000800 	.word	0x40000800
 800bce8:	40000c00 	.word	0x40000c00
 800bcec:	080106a0 	.word	0x080106a0
 800bcf0:	40014000 	.word	0x40014000

0800bcf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d101      	bne.n	800bd42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e0ab      	b.n	800be9a <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d02c      	beq.n	800bda4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a55      	ldr	r2, [pc, #340]	; (800bea4 <HAL_UART_Init+0x174>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d00e      	beq.n	800bd72 <HAL_UART_Init+0x42>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a53      	ldr	r2, [pc, #332]	; (800bea8 <HAL_UART_Init+0x178>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d009      	beq.n	800bd72 <HAL_UART_Init+0x42>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a52      	ldr	r2, [pc, #328]	; (800beac <HAL_UART_Init+0x17c>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d004      	beq.n	800bd72 <HAL_UART_Init+0x42>
 800bd68:	f240 1173 	movw	r1, #371	; 0x173
 800bd6c:	4850      	ldr	r0, [pc, #320]	; (800beb0 <HAL_UART_Init+0x180>)
 800bd6e:	f7f7 fad2 	bl	8003316 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	699b      	ldr	r3, [r3, #24]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d028      	beq.n	800bdcc <HAL_UART_Init+0x9c>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd82:	d023      	beq.n	800bdcc <HAL_UART_Init+0x9c>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd8c:	d01e      	beq.n	800bdcc <HAL_UART_Init+0x9c>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd96:	d019      	beq.n	800bdcc <HAL_UART_Init+0x9c>
 800bd98:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800bd9c:	4844      	ldr	r0, [pc, #272]	; (800beb0 <HAL_UART_Init+0x180>)
 800bd9e:	f7f7 faba 	bl	8003316 <assert_failed>
 800bda2:	e013      	b.n	800bdcc <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a3e      	ldr	r2, [pc, #248]	; (800bea4 <HAL_UART_Init+0x174>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d00e      	beq.n	800bdcc <HAL_UART_Init+0x9c>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a3d      	ldr	r2, [pc, #244]	; (800bea8 <HAL_UART_Init+0x178>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d009      	beq.n	800bdcc <HAL_UART_Init+0x9c>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a3b      	ldr	r2, [pc, #236]	; (800beac <HAL_UART_Init+0x17c>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d004      	beq.n	800bdcc <HAL_UART_Init+0x9c>
 800bdc2:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800bdc6:	483a      	ldr	r0, [pc, #232]	; (800beb0 <HAL_UART_Init+0x180>)
 800bdc8:	f7f7 faa5 	bl	8003316 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d009      	beq.n	800bde8 <HAL_UART_Init+0xb8>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bddc:	d004      	beq.n	800bde8 <HAL_UART_Init+0xb8>
 800bdde:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800bde2:	4833      	ldr	r0, [pc, #204]	; (800beb0 <HAL_UART_Init+0x180>)
 800bde4:	f7f7 fa97 	bl	8003316 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	69db      	ldr	r3, [r3, #28]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <HAL_UART_Init+0xd4>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	69db      	ldr	r3, [r3, #28]
 800bdf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdf8:	d004      	beq.n	800be04 <HAL_UART_Init+0xd4>
 800bdfa:	f240 117b 	movw	r1, #379	; 0x17b
 800bdfe:	482c      	ldr	r0, [pc, #176]	; (800beb0 <HAL_UART_Init+0x180>)
 800be00:	f7f7 fa89 	bl	8003316 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d111      	bne.n	800be34 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fb61 	bl	800c4e0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be22:	2b00      	cmp	r3, #0
 800be24:	d102      	bne.n	800be2c <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a22      	ldr	r2, [pc, #136]	; (800beb4 <HAL_UART_Init+0x184>)
 800be2a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2224      	movs	r2, #36	; 0x24
 800be38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68da      	ldr	r2, [r3, #12]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fd5b 	bl	800c908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	691a      	ldr	r2, [r3, #16]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	695a      	ldr	r2, [r3, #20]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68da      	ldr	r2, [r3, #12]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2220      	movs	r2, #32
 800be8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2220      	movs	r2, #32
 800be94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	40011000 	.word	0x40011000
 800bea8:	40004400 	.word	0x40004400
 800beac:	40011400 	.word	0x40011400
 800beb0:	08010718 	.word	0x08010718
 800beb4:	08003dc9 	.word	0x08003dc9

0800beb8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	4613      	mov	r3, r2
 800bec4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800becc:	b2db      	uxtb	r3, r3
 800bece:	2b20      	cmp	r3, #32
 800bed0:	d11d      	bne.n	800bf0e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d002      	beq.n	800bede <HAL_UART_Receive_IT+0x26>
 800bed8:	88fb      	ldrh	r3, [r7, #6]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e016      	b.n	800bf10 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d101      	bne.n	800bef0 <HAL_UART_Receive_IT+0x38>
 800beec:	2302      	movs	r3, #2
 800beee:	e00f      	b.n	800bf10 <HAL_UART_Receive_IT+0x58>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2200      	movs	r2, #0
 800befc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800befe:	88fb      	ldrh	r3, [r7, #6]
 800bf00:	461a      	mov	r2, r3
 800bf02:	68b9      	ldr	r1, [r7, #8]
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 fb23 	bl	800c550 <UART_Start_Receive_IT>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	e000      	b.n	800bf10 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bf0e:	2302      	movs	r3, #2
  }
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b0ba      	sub	sp, #232	; 0xe8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	695b      	ldr	r3, [r3, #20]
 800bf3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bf44:	2300      	movs	r3, #0
 800bf46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bf4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf4e:	f003 030f 	and.w	r3, r3, #15
 800bf52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bf56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10f      	bne.n	800bf7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf62:	f003 0320 	and.w	r3, r3, #32
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d009      	beq.n	800bf7e <HAL_UART_IRQHandler+0x66>
 800bf6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf6e:	f003 0320 	and.w	r3, r3, #32
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fc09 	bl	800c78e <UART_Receive_IT>
      return;
 800bf7c:	e25b      	b.n	800c436 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bf7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f000 80e1 	beq.w	800c14a <HAL_UART_IRQHandler+0x232>
 800bf88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf8c:	f003 0301 	and.w	r3, r3, #1
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d106      	bne.n	800bfa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bf94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 80d4 	beq.w	800c14a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00b      	beq.n	800bfc6 <HAL_UART_IRQHandler+0xae>
 800bfae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d005      	beq.n	800bfc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbe:	f043 0201 	orr.w	r2, r3, #1
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bfc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfca:	f003 0304 	and.w	r3, r3, #4
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00b      	beq.n	800bfea <HAL_UART_IRQHandler+0xd2>
 800bfd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d005      	beq.n	800bfea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe2:	f043 0202 	orr.w	r2, r3, #2
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bfea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfee:	f003 0302 	and.w	r3, r3, #2
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00b      	beq.n	800c00e <HAL_UART_IRQHandler+0xf6>
 800bff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bffa:	f003 0301 	and.w	r3, r3, #1
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d005      	beq.n	800c00e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c006:	f043 0204 	orr.w	r2, r3, #4
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c012:	f003 0308 	and.w	r3, r3, #8
 800c016:	2b00      	cmp	r3, #0
 800c018:	d011      	beq.n	800c03e <HAL_UART_IRQHandler+0x126>
 800c01a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c01e:	f003 0320 	and.w	r3, r3, #32
 800c022:	2b00      	cmp	r3, #0
 800c024:	d105      	bne.n	800c032 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c02a:	f003 0301 	and.w	r3, r3, #1
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d005      	beq.n	800c03e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c036:	f043 0208 	orr.w	r2, r3, #8
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c042:	2b00      	cmp	r3, #0
 800c044:	f000 81f2 	beq.w	800c42c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c04c:	f003 0320 	and.w	r3, r3, #32
 800c050:	2b00      	cmp	r3, #0
 800c052:	d008      	beq.n	800c066 <HAL_UART_IRQHandler+0x14e>
 800c054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c058:	f003 0320 	and.w	r3, r3, #32
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fb94 	bl	800c78e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	695b      	ldr	r3, [r3, #20]
 800c06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c070:	2b40      	cmp	r3, #64	; 0x40
 800c072:	bf0c      	ite	eq
 800c074:	2301      	moveq	r3, #1
 800c076:	2300      	movne	r3, #0
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c082:	f003 0308 	and.w	r3, r3, #8
 800c086:	2b00      	cmp	r3, #0
 800c088:	d103      	bne.n	800c092 <HAL_UART_IRQHandler+0x17a>
 800c08a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d051      	beq.n	800c136 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fa9a 	bl	800c5cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	695b      	ldr	r3, [r3, #20]
 800c09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a2:	2b40      	cmp	r3, #64	; 0x40
 800c0a4:	d142      	bne.n	800c12c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3314      	adds	r3, #20
 800c0ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0b4:	e853 3f00 	ldrex	r3, [r3]
 800c0b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c0bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3314      	adds	r3, #20
 800c0ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c0d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c0d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c0de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c0ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1d9      	bne.n	800c0a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d013      	beq.n	800c122 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0fe:	4a7f      	ldr	r2, [pc, #508]	; (800c2fc <HAL_UART_IRQHandler+0x3e4>)
 800c100:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c106:	4618      	mov	r0, r3
 800c108:	f7f9 fb14 	bl	8005734 <HAL_DMA_Abort_IT>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d019      	beq.n	800c146 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c11c:	4610      	mov	r0, r2
 800c11e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c120:	e011      	b.n	800c146 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c12a:	e00c      	b.n	800c146 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c134:	e007      	b.n	800c146 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c144:	e172      	b.n	800c42c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c146:	bf00      	nop
    return;
 800c148:	e170      	b.n	800c42c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c14e:	2b01      	cmp	r3, #1
 800c150:	f040 814c 	bne.w	800c3ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c158:	f003 0310 	and.w	r3, r3, #16
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 8145 	beq.w	800c3ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c166:	f003 0310 	and.w	r3, r3, #16
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f000 813e 	beq.w	800c3ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c170:	2300      	movs	r3, #0
 800c172:	60bb      	str	r3, [r7, #8]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	60bb      	str	r3, [r7, #8]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	60bb      	str	r3, [r7, #8]
 800c184:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c190:	2b40      	cmp	r3, #64	; 0x40
 800c192:	f040 80b5 	bne.w	800c300 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c1a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f000 8142 	beq.w	800c430 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	f080 813b 	bcs.w	800c430 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c6:	69db      	ldr	r3, [r3, #28]
 800c1c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1cc:	f000 8088 	beq.w	800c2e0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	330c      	adds	r3, #12
 800c1d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c1de:	e853 3f00 	ldrex	r3, [r3]
 800c1e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c1e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	330c      	adds	r3, #12
 800c1f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c1fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c200:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c204:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c208:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c20c:	e841 2300 	strex	r3, r2, [r1]
 800c210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1d9      	bne.n	800c1d0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3314      	adds	r3, #20
 800c222:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c226:	e853 3f00 	ldrex	r3, [r3]
 800c22a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c22c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c22e:	f023 0301 	bic.w	r3, r3, #1
 800c232:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3314      	adds	r3, #20
 800c23c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c240:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c244:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c246:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c248:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c24c:	e841 2300 	strex	r3, r2, [r1]
 800c250:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c254:	2b00      	cmp	r3, #0
 800c256:	d1e1      	bne.n	800c21c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3314      	adds	r3, #20
 800c25e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c262:	e853 3f00 	ldrex	r3, [r3]
 800c266:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c26a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c26e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3314      	adds	r3, #20
 800c278:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c27c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c27e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c280:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c282:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c284:	e841 2300 	strex	r3, r2, [r1]
 800c288:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c28a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1e3      	bne.n	800c258 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2220      	movs	r2, #32
 800c294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	330c      	adds	r3, #12
 800c2a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a8:	e853 3f00 	ldrex	r3, [r3]
 800c2ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2b0:	f023 0310 	bic.w	r3, r3, #16
 800c2b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	330c      	adds	r3, #12
 800c2be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c2c2:	65ba      	str	r2, [r7, #88]	; 0x58
 800c2c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2ca:	e841 2300 	strex	r3, r2, [r1]
 800c2ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1e3      	bne.n	800c29e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7f9 f9ba 	bl	8005654 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800c2ec:	b292      	uxth	r2, r2
 800c2ee:	1a8a      	subs	r2, r1, r2
 800c2f0:	b292      	uxth	r2, r2
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c2f8:	e09a      	b.n	800c430 <HAL_UART_IRQHandler+0x518>
 800c2fa:	bf00      	nop
 800c2fc:	0800c693 	.word	0x0800c693
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c308:	b29b      	uxth	r3, r3
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c314:	b29b      	uxth	r3, r3
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 808c 	beq.w	800c434 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c31c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 8087 	beq.w	800c434 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	330c      	adds	r3, #12
 800c32c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	e853 3f00 	ldrex	r3, [r3]
 800c334:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c33c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	330c      	adds	r3, #12
 800c346:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c34a:	647a      	str	r2, [r7, #68]	; 0x44
 800c34c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e3      	bne.n	800c326 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3314      	adds	r3, #20
 800c364:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c368:	e853 3f00 	ldrex	r3, [r3]
 800c36c:	623b      	str	r3, [r7, #32]
   return(result);
 800c36e:	6a3b      	ldr	r3, [r7, #32]
 800c370:	f023 0301 	bic.w	r3, r3, #1
 800c374:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3314      	adds	r3, #20
 800c37e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c382:	633a      	str	r2, [r7, #48]	; 0x30
 800c384:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c38a:	e841 2300 	strex	r3, r2, [r1]
 800c38e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1e3      	bne.n	800c35e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2220      	movs	r2, #32
 800c39a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	330c      	adds	r3, #12
 800c3aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	e853 3f00 	ldrex	r3, [r3]
 800c3b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f023 0310 	bic.w	r3, r3, #16
 800c3ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	330c      	adds	r3, #12
 800c3c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c3c8:	61fa      	str	r2, [r7, #28]
 800c3ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3cc:	69b9      	ldr	r1, [r7, #24]
 800c3ce:	69fa      	ldr	r2, [r7, #28]
 800c3d0:	e841 2300 	strex	r3, r2, [r1]
 800c3d4:	617b      	str	r3, [r7, #20]
   return(result);
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1e3      	bne.n	800c3a4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3e0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c3ea:	e023      	b.n	800c434 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c3ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d009      	beq.n	800c40c <HAL_UART_IRQHandler+0x4f4>
 800c3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c400:	2b00      	cmp	r3, #0
 800c402:	d003      	beq.n	800c40c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f959 	bl	800c6bc <UART_Transmit_IT>
    return;
 800c40a:	e014      	b.n	800c436 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00e      	beq.n	800c436 <HAL_UART_IRQHandler+0x51e>
 800c418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c420:	2b00      	cmp	r3, #0
 800c422:	d008      	beq.n	800c436 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f999 	bl	800c75c <UART_EndTransmit_IT>
    return;
 800c42a:	e004      	b.n	800c436 <HAL_UART_IRQHandler+0x51e>
    return;
 800c42c:	bf00      	nop
 800c42e:	e002      	b.n	800c436 <HAL_UART_IRQHandler+0x51e>
      return;
 800c430:	bf00      	nop
 800c432:	e000      	b.n	800c436 <HAL_UART_IRQHandler+0x51e>
      return;
 800c434:	bf00      	nop
  }
}
 800c436:	37e8      	adds	r7, #232	; 0xe8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c444:	bf00      	nop
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c458:	bf00      	nop
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a10      	ldr	r2, [pc, #64]	; (800c52c <UART_InitCallbacksToDefault+0x4c>)
 800c4ec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a0f      	ldr	r2, [pc, #60]	; (800c530 <UART_InitCallbacksToDefault+0x50>)
 800c4f2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a0f      	ldr	r2, [pc, #60]	; (800c534 <UART_InitCallbacksToDefault+0x54>)
 800c4f8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a0e      	ldr	r2, [pc, #56]	; (800c538 <UART_InitCallbacksToDefault+0x58>)
 800c4fe:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4a0e      	ldr	r2, [pc, #56]	; (800c53c <UART_InitCallbacksToDefault+0x5c>)
 800c504:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a0d      	ldr	r2, [pc, #52]	; (800c540 <UART_InitCallbacksToDefault+0x60>)
 800c50a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4a0d      	ldr	r2, [pc, #52]	; (800c544 <UART_InitCallbacksToDefault+0x64>)
 800c510:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a0c      	ldr	r2, [pc, #48]	; (800c548 <UART_InitCallbacksToDefault+0x68>)
 800c516:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a0c      	ldr	r2, [pc, #48]	; (800c54c <UART_InitCallbacksToDefault+0x6c>)
 800c51c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800c51e:	bf00      	nop
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	0800c451 	.word	0x0800c451
 800c530:	0800c43d 	.word	0x0800c43d
 800c534:	0800c465 	.word	0x0800c465
 800c538:	08003ea9 	.word	0x08003ea9
 800c53c:	0800c479 	.word	0x0800c479
 800c540:	0800c48d 	.word	0x0800c48d
 800c544:	0800c4a1 	.word	0x0800c4a1
 800c548:	0800c4b5 	.word	0x0800c4b5
 800c54c:	0800c4c9 	.word	0x0800c4c9

0800c550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	4613      	mov	r3, r2
 800c55c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	88fa      	ldrh	r2, [r7, #6]
 800c568:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	88fa      	ldrh	r2, [r7, #6]
 800c56e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2222      	movs	r2, #34	; 0x22
 800c57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2200      	movs	r2, #0
 800c582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d007      	beq.n	800c59e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	68da      	ldr	r2, [r3, #12]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c59c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	695a      	ldr	r2, [r3, #20]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f042 0201 	orr.w	r2, r2, #1
 800c5ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68da      	ldr	r2, [r3, #12]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f042 0220 	orr.w	r2, r2, #32
 800c5bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b095      	sub	sp, #84	; 0x54
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	330c      	adds	r3, #12
 800c5da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5de:	e853 3f00 	ldrex	r3, [r3]
 800c5e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	330c      	adds	r3, #12
 800c5f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5f4:	643a      	str	r2, [r7, #64]	; 0x40
 800c5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5fc:	e841 2300 	strex	r3, r2, [r1]
 800c600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1e5      	bne.n	800c5d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3314      	adds	r3, #20
 800c60e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c610:	6a3b      	ldr	r3, [r7, #32]
 800c612:	e853 3f00 	ldrex	r3, [r3]
 800c616:	61fb      	str	r3, [r7, #28]
   return(result);
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	f023 0301 	bic.w	r3, r3, #1
 800c61e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	3314      	adds	r3, #20
 800c626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c62a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c62e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c630:	e841 2300 	strex	r3, r2, [r1]
 800c634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1e5      	bne.n	800c608 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c640:	2b01      	cmp	r3, #1
 800c642:	d119      	bne.n	800c678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	330c      	adds	r3, #12
 800c64a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	e853 3f00 	ldrex	r3, [r3]
 800c652:	60bb      	str	r3, [r7, #8]
   return(result);
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	f023 0310 	bic.w	r3, r3, #16
 800c65a:	647b      	str	r3, [r7, #68]	; 0x44
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	330c      	adds	r3, #12
 800c662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c664:	61ba      	str	r2, [r7, #24]
 800c666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c668:	6979      	ldr	r1, [r7, #20]
 800c66a:	69ba      	ldr	r2, [r7, #24]
 800c66c:	e841 2300 	strex	r3, r2, [r1]
 800c670:	613b      	str	r3, [r7, #16]
   return(result);
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1e5      	bne.n	800c644 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2220      	movs	r2, #32
 800c67c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c686:	bf00      	nop
 800c688:	3754      	adds	r7, #84	; 0x54
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c692:	b580      	push	{r7, lr}
 800c694:	b084      	sub	sp, #16
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6b4:	bf00      	nop
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b21      	cmp	r3, #33	; 0x21
 800c6ce:	d13e      	bne.n	800c74e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6d8:	d114      	bne.n	800c704 <UART_Transmit_IT+0x48>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d110      	bne.n	800c704 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	881b      	ldrh	r3, [r3, #0]
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a1b      	ldr	r3, [r3, #32]
 800c6fc:	1c9a      	adds	r2, r3, #2
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	621a      	str	r2, [r3, #32]
 800c702:	e008      	b.n	800c716 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a1b      	ldr	r3, [r3, #32]
 800c708:	1c59      	adds	r1, r3, #1
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	6211      	str	r1, [r2, #32]
 800c70e:	781a      	ldrb	r2, [r3, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	3b01      	subs	r3, #1
 800c71e:	b29b      	uxth	r3, r3
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	4619      	mov	r1, r3
 800c724:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10f      	bne.n	800c74a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	68da      	ldr	r2, [r3, #12]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c738:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	68da      	ldr	r2, [r3, #12]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c748:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c74a:	2300      	movs	r3, #0
 800c74c:	e000      	b.n	800c750 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c74e:	2302      	movs	r3, #2
  }
}
 800c750:	4618      	mov	r0, r3
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	68da      	ldr	r2, [r3, #12]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c772:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2220      	movs	r2, #32
 800c778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b08c      	sub	sp, #48	; 0x30
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b22      	cmp	r3, #34	; 0x22
 800c7a0:	f040 80ad 	bne.w	800c8fe <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7ac:	d117      	bne.n	800c7de <UART_Receive_IT+0x50>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d113      	bne.n	800c7de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d6:	1c9a      	adds	r2, r3, #2
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	629a      	str	r2, [r3, #40]	; 0x28
 800c7dc:	e026      	b.n	800c82c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7f0:	d007      	beq.n	800c802 <UART_Receive_IT+0x74>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10a      	bne.n	800c810 <UART_Receive_IT+0x82>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d106      	bne.n	800c810 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80c:	701a      	strb	r2, [r3, #0]
 800c80e:	e008      	b.n	800c822 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	b2db      	uxtb	r3, r3
 800c818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c820:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c826:	1c5a      	adds	r2, r3, #1
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c830:	b29b      	uxth	r3, r3
 800c832:	3b01      	subs	r3, #1
 800c834:	b29b      	uxth	r3, r3
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	4619      	mov	r1, r3
 800c83a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d15c      	bne.n	800c8fa <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68da      	ldr	r2, [r3, #12]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f022 0220 	bic.w	r2, r2, #32
 800c84e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	68da      	ldr	r2, [r3, #12]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c85e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	695a      	ldr	r2, [r3, #20]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f022 0201 	bic.w	r2, r2, #1
 800c86e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2220      	movs	r2, #32
 800c874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d136      	bne.n	800c8ee <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	330c      	adds	r3, #12
 800c88c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	e853 3f00 	ldrex	r3, [r3]
 800c894:	613b      	str	r3, [r7, #16]
   return(result);
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	f023 0310 	bic.w	r3, r3, #16
 800c89c:	627b      	str	r3, [r7, #36]	; 0x24
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	330c      	adds	r3, #12
 800c8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8a6:	623a      	str	r2, [r7, #32]
 800c8a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8aa:	69f9      	ldr	r1, [r7, #28]
 800c8ac:	6a3a      	ldr	r2, [r7, #32]
 800c8ae:	e841 2300 	strex	r3, r2, [r1]
 800c8b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1e5      	bne.n	800c886 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f003 0310 	and.w	r3, r3, #16
 800c8c4:	2b10      	cmp	r3, #16
 800c8c6:	d10a      	bne.n	800c8de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	60fb      	str	r3, [r7, #12]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	60fb      	str	r3, [r7, #12]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	4798      	blx	r3
 800c8ec:	e003      	b.n	800c8f6 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	e002      	b.n	800c900 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	e000      	b.n	800c900 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c8fe:	2302      	movs	r3, #2
  }
}
 800c900:	4618      	mov	r0, r3
 800c902:	3730      	adds	r7, #48	; 0x30
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c90c:	b0c0      	sub	sp, #256	; 0x100
 800c90e:	af00      	add	r7, sp, #0
 800c910:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800c914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	4bcf      	ldr	r3, [pc, #828]	; (800cc58 <UART_SetConfig+0x350>)
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d904      	bls.n	800c92a <UART_SetConfig+0x22>
 800c920:	f640 6161 	movw	r1, #3681	; 0xe61
 800c924:	48cd      	ldr	r0, [pc, #820]	; (800cc5c <UART_SetConfig+0x354>)
 800c926:	f7f6 fcf6 	bl	8003316 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800c92a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00a      	beq.n	800c94a <UART_SetConfig+0x42>
 800c934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c93e:	d004      	beq.n	800c94a <UART_SetConfig+0x42>
 800c940:	f640 6162 	movw	r1, #3682	; 0xe62
 800c944:	48c5      	ldr	r0, [pc, #788]	; (800cc5c <UART_SetConfig+0x354>)
 800c946:	f7f6 fce6 	bl	8003316 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800c94a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d010      	beq.n	800c976 <UART_SetConfig+0x6e>
 800c954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c95e:	d00a      	beq.n	800c976 <UART_SetConfig+0x6e>
 800c960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c96a:	d004      	beq.n	800c976 <UART_SetConfig+0x6e>
 800c96c:	f640 6163 	movw	r1, #3683	; 0xe63
 800c970:	48ba      	ldr	r0, [pc, #744]	; (800cc5c <UART_SetConfig+0x354>)
 800c972:	f7f6 fcd0 	bl	8003316 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800c976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c97a:	695a      	ldr	r2, [r3, #20]
 800c97c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800c980:	4013      	ands	r3, r2
 800c982:	2b00      	cmp	r3, #0
 800c984:	d104      	bne.n	800c990 <UART_SetConfig+0x88>
 800c986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c98a:	695b      	ldr	r3, [r3, #20]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d104      	bne.n	800c99a <UART_SetConfig+0x92>
 800c990:	f640 6164 	movw	r1, #3684	; 0xe64
 800c994:	48b1      	ldr	r0, [pc, #708]	; (800cc5c <UART_SetConfig+0x354>)
 800c996:	f7f6 fcbe 	bl	8003316 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c99a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c9a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9aa:	68d9      	ldr	r1, [r3, #12]
 800c9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	ea40 0301 	orr.w	r3, r0, r1
 800c9b6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c9b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9bc:	689a      	ldr	r2, [r3, #8]
 800c9be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	431a      	orrs	r2, r3
 800c9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ca:	695b      	ldr	r3, [r3, #20]
 800c9cc:	431a      	orrs	r2, r3
 800c9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9d2:	69db      	ldr	r3, [r3, #28]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c9da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c9e6:	f021 010c 	bic.w	r1, r1, #12
 800c9ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c9f4:	430b      	orrs	r3, r1
 800c9f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c9f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	695b      	ldr	r3, [r3, #20]
 800ca00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ca04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca08:	6999      	ldr	r1, [r3, #24]
 800ca0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	ea40 0301 	orr.w	r3, r0, r1
 800ca14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ca16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	4b90      	ldr	r3, [pc, #576]	; (800cc60 <UART_SetConfig+0x358>)
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d005      	beq.n	800ca2e <UART_SetConfig+0x126>
 800ca22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	4b8e      	ldr	r3, [pc, #568]	; (800cc64 <UART_SetConfig+0x35c>)
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d104      	bne.n	800ca38 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca2e:	f7fc fad9 	bl	8008fe4 <HAL_RCC_GetPCLK2Freq>
 800ca32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ca36:	e003      	b.n	800ca40 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca38:	f7fc fac0 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800ca3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca44:	69db      	ldr	r3, [r3, #28]
 800ca46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca4a:	f040 810f 	bne.w	800cc6c <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca52:	2200      	movs	r2, #0
 800ca54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ca58:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ca5c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ca60:	4622      	mov	r2, r4
 800ca62:	462b      	mov	r3, r5
 800ca64:	1891      	adds	r1, r2, r2
 800ca66:	65b9      	str	r1, [r7, #88]	; 0x58
 800ca68:	415b      	adcs	r3, r3
 800ca6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ca70:	4621      	mov	r1, r4
 800ca72:	eb12 0801 	adds.w	r8, r2, r1
 800ca76:	4629      	mov	r1, r5
 800ca78:	eb43 0901 	adc.w	r9, r3, r1
 800ca7c:	f04f 0200 	mov.w	r2, #0
 800ca80:	f04f 0300 	mov.w	r3, #0
 800ca84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca90:	4690      	mov	r8, r2
 800ca92:	4699      	mov	r9, r3
 800ca94:	4623      	mov	r3, r4
 800ca96:	eb18 0303 	adds.w	r3, r8, r3
 800ca9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ca9e:	462b      	mov	r3, r5
 800caa0:	eb49 0303 	adc.w	r3, r9, r3
 800caa4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800caa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cab4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cab8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cabc:	460b      	mov	r3, r1
 800cabe:	18db      	adds	r3, r3, r3
 800cac0:	653b      	str	r3, [r7, #80]	; 0x50
 800cac2:	4613      	mov	r3, r2
 800cac4:	eb42 0303 	adc.w	r3, r2, r3
 800cac8:	657b      	str	r3, [r7, #84]	; 0x54
 800caca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cace:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cad2:	f7f3 ff73 	bl	80009bc <__aeabi_uldivmod>
 800cad6:	4602      	mov	r2, r0
 800cad8:	460b      	mov	r3, r1
 800cada:	4b63      	ldr	r3, [pc, #396]	; (800cc68 <UART_SetConfig+0x360>)
 800cadc:	fba3 2302 	umull	r2, r3, r3, r2
 800cae0:	095b      	lsrs	r3, r3, #5
 800cae2:	011c      	lsls	r4, r3, #4
 800cae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cae8:	2200      	movs	r2, #0
 800caea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800caee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800caf2:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800caf6:	4642      	mov	r2, r8
 800caf8:	464b      	mov	r3, r9
 800cafa:	1891      	adds	r1, r2, r2
 800cafc:	64b9      	str	r1, [r7, #72]	; 0x48
 800cafe:	415b      	adcs	r3, r3
 800cb00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cb06:	4641      	mov	r1, r8
 800cb08:	eb12 0a01 	adds.w	sl, r2, r1
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	eb43 0b01 	adc.w	fp, r3, r1
 800cb12:	f04f 0200 	mov.w	r2, #0
 800cb16:	f04f 0300 	mov.w	r3, #0
 800cb1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cb1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cb22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb26:	4692      	mov	sl, r2
 800cb28:	469b      	mov	fp, r3
 800cb2a:	4643      	mov	r3, r8
 800cb2c:	eb1a 0303 	adds.w	r3, sl, r3
 800cb30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb34:	464b      	mov	r3, r9
 800cb36:	eb4b 0303 	adc.w	r3, fp, r3
 800cb3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cb3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb4a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cb4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cb52:	460b      	mov	r3, r1
 800cb54:	18db      	adds	r3, r3, r3
 800cb56:	643b      	str	r3, [r7, #64]	; 0x40
 800cb58:	4613      	mov	r3, r2
 800cb5a:	eb42 0303 	adc.w	r3, r2, r3
 800cb5e:	647b      	str	r3, [r7, #68]	; 0x44
 800cb60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cb64:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cb68:	f7f3 ff28 	bl	80009bc <__aeabi_uldivmod>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	460b      	mov	r3, r1
 800cb70:	4611      	mov	r1, r2
 800cb72:	4b3d      	ldr	r3, [pc, #244]	; (800cc68 <UART_SetConfig+0x360>)
 800cb74:	fba3 2301 	umull	r2, r3, r3, r1
 800cb78:	095b      	lsrs	r3, r3, #5
 800cb7a:	2264      	movs	r2, #100	; 0x64
 800cb7c:	fb02 f303 	mul.w	r3, r2, r3
 800cb80:	1acb      	subs	r3, r1, r3
 800cb82:	00db      	lsls	r3, r3, #3
 800cb84:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cb88:	4b37      	ldr	r3, [pc, #220]	; (800cc68 <UART_SetConfig+0x360>)
 800cb8a:	fba3 2302 	umull	r2, r3, r3, r2
 800cb8e:	095b      	lsrs	r3, r3, #5
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cb96:	441c      	add	r4, r3
 800cb98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cba2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cba6:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cbaa:	4642      	mov	r2, r8
 800cbac:	464b      	mov	r3, r9
 800cbae:	1891      	adds	r1, r2, r2
 800cbb0:	63b9      	str	r1, [r7, #56]	; 0x38
 800cbb2:	415b      	adcs	r3, r3
 800cbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbb6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cbba:	4641      	mov	r1, r8
 800cbbc:	1851      	adds	r1, r2, r1
 800cbbe:	6339      	str	r1, [r7, #48]	; 0x30
 800cbc0:	4649      	mov	r1, r9
 800cbc2:	414b      	adcs	r3, r1
 800cbc4:	637b      	str	r3, [r7, #52]	; 0x34
 800cbc6:	f04f 0200 	mov.w	r2, #0
 800cbca:	f04f 0300 	mov.w	r3, #0
 800cbce:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cbd2:	4659      	mov	r1, fp
 800cbd4:	00cb      	lsls	r3, r1, #3
 800cbd6:	4651      	mov	r1, sl
 800cbd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cbdc:	4651      	mov	r1, sl
 800cbde:	00ca      	lsls	r2, r1, #3
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	4642      	mov	r2, r8
 800cbe8:	189b      	adds	r3, r3, r2
 800cbea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cbee:	464b      	mov	r3, r9
 800cbf0:	460a      	mov	r2, r1
 800cbf2:	eb42 0303 	adc.w	r3, r2, r3
 800cbf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cbfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cc06:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cc0a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cc0e:	460b      	mov	r3, r1
 800cc10:	18db      	adds	r3, r3, r3
 800cc12:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc14:	4613      	mov	r3, r2
 800cc16:	eb42 0303 	adc.w	r3, r2, r3
 800cc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc20:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cc24:	f7f3 feca 	bl	80009bc <__aeabi_uldivmod>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4b0e      	ldr	r3, [pc, #56]	; (800cc68 <UART_SetConfig+0x360>)
 800cc2e:	fba3 1302 	umull	r1, r3, r3, r2
 800cc32:	095b      	lsrs	r3, r3, #5
 800cc34:	2164      	movs	r1, #100	; 0x64
 800cc36:	fb01 f303 	mul.w	r3, r1, r3
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	00db      	lsls	r3, r3, #3
 800cc3e:	3332      	adds	r3, #50	; 0x32
 800cc40:	4a09      	ldr	r2, [pc, #36]	; (800cc68 <UART_SetConfig+0x360>)
 800cc42:	fba2 2303 	umull	r2, r3, r2, r3
 800cc46:	095b      	lsrs	r3, r3, #5
 800cc48:	f003 0207 	and.w	r2, r3, #7
 800cc4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4422      	add	r2, r4
 800cc54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cc56:	e108      	b.n	800ce6a <UART_SetConfig+0x562>
 800cc58:	00a037a0 	.word	0x00a037a0
 800cc5c:	08010718 	.word	0x08010718
 800cc60:	40011000 	.word	0x40011000
 800cc64:	40011400 	.word	0x40011400
 800cc68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc70:	2200      	movs	r2, #0
 800cc72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cc7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cc7e:	4642      	mov	r2, r8
 800cc80:	464b      	mov	r3, r9
 800cc82:	1891      	adds	r1, r2, r2
 800cc84:	6239      	str	r1, [r7, #32]
 800cc86:	415b      	adcs	r3, r3
 800cc88:	627b      	str	r3, [r7, #36]	; 0x24
 800cc8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc8e:	4641      	mov	r1, r8
 800cc90:	1854      	adds	r4, r2, r1
 800cc92:	4649      	mov	r1, r9
 800cc94:	eb43 0501 	adc.w	r5, r3, r1
 800cc98:	f04f 0200 	mov.w	r2, #0
 800cc9c:	f04f 0300 	mov.w	r3, #0
 800cca0:	00eb      	lsls	r3, r5, #3
 800cca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cca6:	00e2      	lsls	r2, r4, #3
 800cca8:	4614      	mov	r4, r2
 800ccaa:	461d      	mov	r5, r3
 800ccac:	4643      	mov	r3, r8
 800ccae:	18e3      	adds	r3, r4, r3
 800ccb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ccb4:	464b      	mov	r3, r9
 800ccb6:	eb45 0303 	adc.w	r3, r5, r3
 800ccba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ccbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ccca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ccce:	f04f 0200 	mov.w	r2, #0
 800ccd2:	f04f 0300 	mov.w	r3, #0
 800ccd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ccda:	4629      	mov	r1, r5
 800ccdc:	008b      	lsls	r3, r1, #2
 800ccde:	4621      	mov	r1, r4
 800cce0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cce4:	4621      	mov	r1, r4
 800cce6:	008a      	lsls	r2, r1, #2
 800cce8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ccec:	f7f3 fe66 	bl	80009bc <__aeabi_uldivmod>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	4b60      	ldr	r3, [pc, #384]	; (800ce78 <UART_SetConfig+0x570>)
 800ccf6:	fba3 2302 	umull	r2, r3, r3, r2
 800ccfa:	095b      	lsrs	r3, r3, #5
 800ccfc:	011c      	lsls	r4, r3, #4
 800ccfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd02:	2200      	movs	r2, #0
 800cd04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cd0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cd10:	4642      	mov	r2, r8
 800cd12:	464b      	mov	r3, r9
 800cd14:	1891      	adds	r1, r2, r2
 800cd16:	61b9      	str	r1, [r7, #24]
 800cd18:	415b      	adcs	r3, r3
 800cd1a:	61fb      	str	r3, [r7, #28]
 800cd1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd20:	4641      	mov	r1, r8
 800cd22:	1851      	adds	r1, r2, r1
 800cd24:	6139      	str	r1, [r7, #16]
 800cd26:	4649      	mov	r1, r9
 800cd28:	414b      	adcs	r3, r1
 800cd2a:	617b      	str	r3, [r7, #20]
 800cd2c:	f04f 0200 	mov.w	r2, #0
 800cd30:	f04f 0300 	mov.w	r3, #0
 800cd34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd38:	4659      	mov	r1, fp
 800cd3a:	00cb      	lsls	r3, r1, #3
 800cd3c:	4651      	mov	r1, sl
 800cd3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd42:	4651      	mov	r1, sl
 800cd44:	00ca      	lsls	r2, r1, #3
 800cd46:	4610      	mov	r0, r2
 800cd48:	4619      	mov	r1, r3
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	4642      	mov	r2, r8
 800cd4e:	189b      	adds	r3, r3, r2
 800cd50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd54:	464b      	mov	r3, r9
 800cd56:	460a      	mov	r2, r1
 800cd58:	eb42 0303 	adc.w	r3, r2, r3
 800cd5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cd6c:	f04f 0200 	mov.w	r2, #0
 800cd70:	f04f 0300 	mov.w	r3, #0
 800cd74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cd78:	4649      	mov	r1, r9
 800cd7a:	008b      	lsls	r3, r1, #2
 800cd7c:	4641      	mov	r1, r8
 800cd7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd82:	4641      	mov	r1, r8
 800cd84:	008a      	lsls	r2, r1, #2
 800cd86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cd8a:	f7f3 fe17 	bl	80009bc <__aeabi_uldivmod>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	460b      	mov	r3, r1
 800cd92:	4b39      	ldr	r3, [pc, #228]	; (800ce78 <UART_SetConfig+0x570>)
 800cd94:	fba3 1302 	umull	r1, r3, r3, r2
 800cd98:	095b      	lsrs	r3, r3, #5
 800cd9a:	2164      	movs	r1, #100	; 0x64
 800cd9c:	fb01 f303 	mul.w	r3, r1, r3
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	011b      	lsls	r3, r3, #4
 800cda4:	3332      	adds	r3, #50	; 0x32
 800cda6:	4a34      	ldr	r2, [pc, #208]	; (800ce78 <UART_SetConfig+0x570>)
 800cda8:	fba2 2303 	umull	r2, r3, r2, r3
 800cdac:	095b      	lsrs	r3, r3, #5
 800cdae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdb2:	441c      	add	r4, r3
 800cdb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cdb8:	2200      	movs	r2, #0
 800cdba:	673b      	str	r3, [r7, #112]	; 0x70
 800cdbc:	677a      	str	r2, [r7, #116]	; 0x74
 800cdbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cdc2:	4642      	mov	r2, r8
 800cdc4:	464b      	mov	r3, r9
 800cdc6:	1891      	adds	r1, r2, r2
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	415b      	adcs	r3, r3
 800cdcc:	60fb      	str	r3, [r7, #12]
 800cdce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdd2:	4641      	mov	r1, r8
 800cdd4:	1851      	adds	r1, r2, r1
 800cdd6:	6039      	str	r1, [r7, #0]
 800cdd8:	4649      	mov	r1, r9
 800cdda:	414b      	adcs	r3, r1
 800cddc:	607b      	str	r3, [r7, #4]
 800cdde:	f04f 0200 	mov.w	r2, #0
 800cde2:	f04f 0300 	mov.w	r3, #0
 800cde6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cdea:	4659      	mov	r1, fp
 800cdec:	00cb      	lsls	r3, r1, #3
 800cdee:	4651      	mov	r1, sl
 800cdf0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cdf4:	4651      	mov	r1, sl
 800cdf6:	00ca      	lsls	r2, r1, #3
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	4642      	mov	r2, r8
 800ce00:	189b      	adds	r3, r3, r2
 800ce02:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce04:	464b      	mov	r3, r9
 800ce06:	460a      	mov	r2, r1
 800ce08:	eb42 0303 	adc.w	r3, r2, r3
 800ce0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	663b      	str	r3, [r7, #96]	; 0x60
 800ce18:	667a      	str	r2, [r7, #100]	; 0x64
 800ce1a:	f04f 0200 	mov.w	r2, #0
 800ce1e:	f04f 0300 	mov.w	r3, #0
 800ce22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ce26:	4649      	mov	r1, r9
 800ce28:	008b      	lsls	r3, r1, #2
 800ce2a:	4641      	mov	r1, r8
 800ce2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce30:	4641      	mov	r1, r8
 800ce32:	008a      	lsls	r2, r1, #2
 800ce34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ce38:	f7f3 fdc0 	bl	80009bc <__aeabi_uldivmod>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	460b      	mov	r3, r1
 800ce40:	4b0d      	ldr	r3, [pc, #52]	; (800ce78 <UART_SetConfig+0x570>)
 800ce42:	fba3 1302 	umull	r1, r3, r3, r2
 800ce46:	095b      	lsrs	r3, r3, #5
 800ce48:	2164      	movs	r1, #100	; 0x64
 800ce4a:	fb01 f303 	mul.w	r3, r1, r3
 800ce4e:	1ad3      	subs	r3, r2, r3
 800ce50:	011b      	lsls	r3, r3, #4
 800ce52:	3332      	adds	r3, #50	; 0x32
 800ce54:	4a08      	ldr	r2, [pc, #32]	; (800ce78 <UART_SetConfig+0x570>)
 800ce56:	fba2 2303 	umull	r2, r3, r2, r3
 800ce5a:	095b      	lsrs	r3, r3, #5
 800ce5c:	f003 020f 	and.w	r2, r3, #15
 800ce60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4422      	add	r2, r4
 800ce68:	609a      	str	r2, [r3, #8]
}
 800ce6a:	bf00      	nop
 800ce6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ce70:	46bd      	mov	sp, r7
 800ce72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce76:	bf00      	nop
 800ce78:	51eb851f 	.word	0x51eb851f

0800ce7c <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800ce80:	bf00      	nop
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
	...

0800ce8c <__NVIC_SetPriority>:
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	4603      	mov	r3, r0
 800ce94:	6039      	str	r1, [r7, #0]
 800ce96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	db0a      	blt.n	800ceb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	b2da      	uxtb	r2, r3
 800cea4:	490c      	ldr	r1, [pc, #48]	; (800ced8 <__NVIC_SetPriority+0x4c>)
 800cea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceaa:	0112      	lsls	r2, r2, #4
 800ceac:	b2d2      	uxtb	r2, r2
 800ceae:	440b      	add	r3, r1
 800ceb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ceb4:	e00a      	b.n	800cecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	4908      	ldr	r1, [pc, #32]	; (800cedc <__NVIC_SetPriority+0x50>)
 800cebc:	79fb      	ldrb	r3, [r7, #7]
 800cebe:	f003 030f 	and.w	r3, r3, #15
 800cec2:	3b04      	subs	r3, #4
 800cec4:	0112      	lsls	r2, r2, #4
 800cec6:	b2d2      	uxtb	r2, r2
 800cec8:	440b      	add	r3, r1
 800ceca:	761a      	strb	r2, [r3, #24]
}
 800cecc:	bf00      	nop
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr
 800ced8:	e000e100 	.word	0xe000e100
 800cedc:	e000ed00 	.word	0xe000ed00

0800cee0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cee0:	b580      	push	{r7, lr}
 800cee2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cee4:	4b05      	ldr	r3, [pc, #20]	; (800cefc <SysTick_Handler+0x1c>)
 800cee6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cee8:	f002 fa5a 	bl	800f3a0 <xTaskGetSchedulerState>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d001      	beq.n	800cef6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cef2:	f000 fe91 	bl	800dc18 <xPortSysTickHandler>
  }
}
 800cef6:	bf00      	nop
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	e000e010 	.word	0xe000e010

0800cf00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cf00:	b580      	push	{r7, lr}
 800cf02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cf04:	2100      	movs	r1, #0
 800cf06:	f06f 0004 	mvn.w	r0, #4
 800cf0a:	f7ff ffbf 	bl	800ce8c <__NVIC_SetPriority>
#endif
}
 800cf0e:	bf00      	nop
 800cf10:	bd80      	pop	{r7, pc}
	...

0800cf14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf1a:	f3ef 8305 	mrs	r3, IPSR
 800cf1e:	603b      	str	r3, [r7, #0]
  return(result);
 800cf20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d003      	beq.n	800cf2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cf26:	f06f 0305 	mvn.w	r3, #5
 800cf2a:	607b      	str	r3, [r7, #4]
 800cf2c:	e00c      	b.n	800cf48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cf2e:	4b0a      	ldr	r3, [pc, #40]	; (800cf58 <osKernelInitialize+0x44>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d105      	bne.n	800cf42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cf36:	4b08      	ldr	r3, [pc, #32]	; (800cf58 <osKernelInitialize+0x44>)
 800cf38:	2201      	movs	r2, #1
 800cf3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	607b      	str	r3, [r7, #4]
 800cf40:	e002      	b.n	800cf48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cf42:	f04f 33ff 	mov.w	r3, #4294967295
 800cf46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf48:	687b      	ldr	r3, [r7, #4]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	370c      	adds	r7, #12
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	2000095c 	.word	0x2000095c

0800cf5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf62:	f3ef 8305 	mrs	r3, IPSR
 800cf66:	603b      	str	r3, [r7, #0]
  return(result);
 800cf68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d003      	beq.n	800cf76 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cf6e:	f06f 0305 	mvn.w	r3, #5
 800cf72:	607b      	str	r3, [r7, #4]
 800cf74:	e010      	b.n	800cf98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cf76:	4b0b      	ldr	r3, [pc, #44]	; (800cfa4 <osKernelStart+0x48>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d109      	bne.n	800cf92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cf7e:	f7ff ffbf 	bl	800cf00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cf82:	4b08      	ldr	r3, [pc, #32]	; (800cfa4 <osKernelStart+0x48>)
 800cf84:	2202      	movs	r2, #2
 800cf86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cf88:	f001 fdae 	bl	800eae8 <vTaskStartScheduler>
      stat = osOK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	607b      	str	r3, [r7, #4]
 800cf90:	e002      	b.n	800cf98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cf92:	f04f 33ff 	mov.w	r3, #4294967295
 800cf96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf98:	687b      	ldr	r3, [r7, #4]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3708      	adds	r7, #8
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	2000095c 	.word	0x2000095c

0800cfa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08e      	sub	sp, #56	; 0x38
 800cfac:	af04      	add	r7, sp, #16
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfb8:	f3ef 8305 	mrs	r3, IPSR
 800cfbc:	617b      	str	r3, [r7, #20]
  return(result);
 800cfbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d17e      	bne.n	800d0c2 <osThreadNew+0x11a>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d07b      	beq.n	800d0c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cfca:	2380      	movs	r3, #128	; 0x80
 800cfcc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cfce:	2318      	movs	r3, #24
 800cfd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cfd6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d045      	beq.n	800d06e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d002      	beq.n	800cff0 <osThreadNew+0x48>
        name = attr->name;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	699b      	ldr	r3, [r3, #24]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d008      	beq.n	800d016 <osThreadNew+0x6e>
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	2b38      	cmp	r3, #56	; 0x38
 800d008:	d805      	bhi.n	800d016 <osThreadNew+0x6e>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	f003 0301 	and.w	r3, r3, #1
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <osThreadNew+0x72>
        return (NULL);
 800d016:	2300      	movs	r3, #0
 800d018:	e054      	b.n	800d0c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	695b      	ldr	r3, [r3, #20]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d003      	beq.n	800d02a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	695b      	ldr	r3, [r3, #20]
 800d026:	089b      	lsrs	r3, r3, #2
 800d028:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00e      	beq.n	800d050 <osThreadNew+0xa8>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	2bbb      	cmp	r3, #187	; 0xbb
 800d038:	d90a      	bls.n	800d050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d006      	beq.n	800d050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <osThreadNew+0xa8>
        mem = 1;
 800d04a:	2301      	movs	r3, #1
 800d04c:	61bb      	str	r3, [r7, #24]
 800d04e:	e010      	b.n	800d072 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10c      	bne.n	800d072 <osThreadNew+0xca>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d108      	bne.n	800d072 <osThreadNew+0xca>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	691b      	ldr	r3, [r3, #16]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d104      	bne.n	800d072 <osThreadNew+0xca>
          mem = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	61bb      	str	r3, [r7, #24]
 800d06c:	e001      	b.n	800d072 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d110      	bne.n	800d09a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d080:	9202      	str	r2, [sp, #8]
 800d082:	9301      	str	r3, [sp, #4]
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	6a3a      	ldr	r2, [r7, #32]
 800d08c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f001 fb3e 	bl	800e710 <xTaskCreateStatic>
 800d094:	4603      	mov	r3, r0
 800d096:	613b      	str	r3, [r7, #16]
 800d098:	e013      	b.n	800d0c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d110      	bne.n	800d0c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	f107 0310 	add.w	r3, r7, #16
 800d0a8:	9301      	str	r3, [sp, #4]
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f001 fb89 	bl	800e7ca <xTaskCreate>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d001      	beq.n	800d0c2 <osThreadNew+0x11a>
            hTask = NULL;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d0c2:	693b      	ldr	r3, [r7, #16]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3728      	adds	r7, #40	; 0x28
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0d4:	f3ef 8305 	mrs	r3, IPSR
 800d0d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d003      	beq.n	800d0e8 <osDelay+0x1c>
    stat = osErrorISR;
 800d0e0:	f06f 0305 	mvn.w	r3, #5
 800d0e4:	60fb      	str	r3, [r7, #12]
 800d0e6:	e007      	b.n	800d0f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d002      	beq.n	800d0f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f001 fcc4 	bl	800ea80 <vTaskDelay>
    }
  }

  return (stat);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800d102:	b580      	push	{r7, lr}
 800d104:	b084      	sub	sp, #16
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f002 fe57 	bl	800fdbe <pvTimerGetTimerID>
 800d110:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d005      	beq.n	800d124 <TimerCallback+0x22>
    callb->func (callb->arg);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	6852      	ldr	r2, [r2, #4]
 800d120:	4610      	mov	r0, r2
 800d122:	4798      	blx	r3
  }
}
 800d124:	bf00      	nop
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b08c      	sub	sp, #48	; 0x30
 800d130:	af02      	add	r7, sp, #8
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	607a      	str	r2, [r7, #4]
 800d136:	603b      	str	r3, [r7, #0]
 800d138:	460b      	mov	r3, r1
 800d13a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800d13c:	2300      	movs	r3, #0
 800d13e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d140:	f3ef 8305 	mrs	r3, IPSR
 800d144:	613b      	str	r3, [r7, #16]
  return(result);
 800d146:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d163      	bne.n	800d214 <osTimerNew+0xe8>
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d060      	beq.n	800d214 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800d152:	2008      	movs	r0, #8
 800d154:	f000 f900 	bl	800d358 <pvPortMalloc>
 800d158:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d059      	beq.n	800d214 <osTimerNew+0xe8>
      callb->func = func;
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800d16c:	7afb      	ldrb	r3, [r7, #11]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d102      	bne.n	800d178 <osTimerNew+0x4c>
        reload = pdFALSE;
 800d172:	2300      	movs	r3, #0
 800d174:	61fb      	str	r3, [r7, #28]
 800d176:	e001      	b.n	800d17c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800d178:	2301      	movs	r3, #1
 800d17a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800d17c:	f04f 33ff 	mov.w	r3, #4294967295
 800d180:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800d182:	2300      	movs	r3, #0
 800d184:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01c      	beq.n	800d1c6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <osTimerNew+0x6e>
          name = attr->name;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d006      	beq.n	800d1b0 <osTimerNew+0x84>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	68db      	ldr	r3, [r3, #12]
 800d1a6:	2b2b      	cmp	r3, #43	; 0x2b
 800d1a8:	d902      	bls.n	800d1b0 <osTimerNew+0x84>
          mem = 1;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	61bb      	str	r3, [r7, #24]
 800d1ae:	e00c      	b.n	800d1ca <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d108      	bne.n	800d1ca <osTimerNew+0x9e>
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d104      	bne.n	800d1ca <osTimerNew+0x9e>
            mem = 0;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	61bb      	str	r3, [r7, #24]
 800d1c4:	e001      	b.n	800d1ca <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d10c      	bne.n	800d1ea <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	4b12      	ldr	r3, [pc, #72]	; (800d220 <osTimerNew+0xf4>)
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	69fa      	ldr	r2, [r7, #28]
 800d1de:	2101      	movs	r1, #1
 800d1e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1e2:	f002 fa26 	bl	800f632 <xTimerCreateStatic>
 800d1e6:	6238      	str	r0, [r7, #32]
 800d1e8:	e00b      	b.n	800d202 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d108      	bne.n	800d202 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800d1f0:	4b0b      	ldr	r3, [pc, #44]	; (800d220 <osTimerNew+0xf4>)
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	69fa      	ldr	r2, [r7, #28]
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1fc:	f002 f9f8 	bl	800f5f0 <xTimerCreate>
 800d200:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d105      	bne.n	800d214 <osTimerNew+0xe8>
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d002      	beq.n	800d214 <osTimerNew+0xe8>
        vPortFree (callb);
 800d20e:	6978      	ldr	r0, [r7, #20]
 800d210:	f000 f96e 	bl	800d4f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800d214:	6a3b      	ldr	r3, [r7, #32]
}
 800d216:	4618      	mov	r0, r3
 800d218:	3728      	adds	r7, #40	; 0x28
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	0800d103 	.word	0x0800d103

0800d224 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800d224:	b580      	push	{r7, lr}
 800d226:	b088      	sub	sp, #32
 800d228:	af02      	add	r7, sp, #8
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d232:	f3ef 8305 	mrs	r3, IPSR
 800d236:	60fb      	str	r3, [r7, #12]
  return(result);
 800d238:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d003      	beq.n	800d246 <osTimerStart+0x22>
    stat = osErrorISR;
 800d23e:	f06f 0305 	mvn.w	r3, #5
 800d242:	617b      	str	r3, [r7, #20]
 800d244:	e017      	b.n	800d276 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d103      	bne.n	800d254 <osTimerStart+0x30>
    stat = osErrorParameter;
 800d24c:	f06f 0303 	mvn.w	r3, #3
 800d250:	617b      	str	r3, [r7, #20]
 800d252:	e010      	b.n	800d276 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800d254:	2300      	movs	r3, #0
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	2300      	movs	r3, #0
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	2104      	movs	r1, #4
 800d25e:	6938      	ldr	r0, [r7, #16]
 800d260:	f002 fa60 	bl	800f724 <xTimerGenericCommand>
 800d264:	4603      	mov	r3, r0
 800d266:	2b01      	cmp	r3, #1
 800d268:	d102      	bne.n	800d270 <osTimerStart+0x4c>
      stat = osOK;
 800d26a:	2300      	movs	r3, #0
 800d26c:	617b      	str	r3, [r7, #20]
 800d26e:	e002      	b.n	800d276 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800d270:	f06f 0302 	mvn.w	r3, #2
 800d274:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d276:	697b      	ldr	r3, [r7, #20]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800d280:	b580      	push	{r7, lr}
 800d282:	b088      	sub	sp, #32
 800d284:	af02      	add	r7, sp, #8
 800d286:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d28c:	f3ef 8305 	mrs	r3, IPSR
 800d290:	60fb      	str	r3, [r7, #12]
  return(result);
 800d292:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d294:	2b00      	cmp	r3, #0
 800d296:	d003      	beq.n	800d2a0 <osTimerStop+0x20>
    stat = osErrorISR;
 800d298:	f06f 0305 	mvn.w	r3, #5
 800d29c:	617b      	str	r3, [r7, #20]
 800d29e:	e021      	b.n	800d2e4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d103      	bne.n	800d2ae <osTimerStop+0x2e>
    stat = osErrorParameter;
 800d2a6:	f06f 0303 	mvn.w	r3, #3
 800d2aa:	617b      	str	r3, [r7, #20]
 800d2ac:	e01a      	b.n	800d2e4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800d2ae:	6938      	ldr	r0, [r7, #16]
 800d2b0:	f002 fd5c 	bl	800fd6c <xTimerIsTimerActive>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d103      	bne.n	800d2c2 <osTimerStop+0x42>
      stat = osErrorResource;
 800d2ba:	f06f 0302 	mvn.w	r3, #2
 800d2be:	617b      	str	r3, [r7, #20]
 800d2c0:	e010      	b.n	800d2e4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	2103      	movs	r1, #3
 800d2cc:	6938      	ldr	r0, [r7, #16]
 800d2ce:	f002 fa29 	bl	800f724 <xTimerGenericCommand>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d102      	bne.n	800d2de <osTimerStop+0x5e>
        stat = osOK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	617b      	str	r3, [r7, #20]
 800d2dc:	e002      	b.n	800d2e4 <osTimerStop+0x64>
      } else {
        stat = osError;
 800d2de:	f04f 33ff 	mov.w	r3, #4294967295
 800d2e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d2e4:	697b      	ldr	r3, [r7, #20]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
	...

0800d2f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	4a07      	ldr	r2, [pc, #28]	; (800d31c <vApplicationGetIdleTaskMemory+0x2c>)
 800d300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	4a06      	ldr	r2, [pc, #24]	; (800d320 <vApplicationGetIdleTaskMemory+0x30>)
 800d306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2280      	movs	r2, #128	; 0x80
 800d30c:	601a      	str	r2, [r3, #0]
}
 800d30e:	bf00      	nop
 800d310:	3714      	adds	r7, #20
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	20000960 	.word	0x20000960
 800d320:	20000a1c 	.word	0x20000a1c

0800d324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	4a07      	ldr	r2, [pc, #28]	; (800d350 <vApplicationGetTimerTaskMemory+0x2c>)
 800d334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	4a06      	ldr	r2, [pc, #24]	; (800d354 <vApplicationGetTimerTaskMemory+0x30>)
 800d33a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d342:	601a      	str	r2, [r3, #0]
}
 800d344:	bf00      	nop
 800d346:	3714      	adds	r7, #20
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	20000c1c 	.word	0x20000c1c
 800d354:	20000cd8 	.word	0x20000cd8

0800d358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08a      	sub	sp, #40	; 0x28
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d360:	2300      	movs	r3, #0
 800d362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d364:	f001 fc30 	bl	800ebc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d368:	4b5b      	ldr	r3, [pc, #364]	; (800d4d8 <pvPortMalloc+0x180>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d370:	f000 f920 	bl	800d5b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d374:	4b59      	ldr	r3, [pc, #356]	; (800d4dc <pvPortMalloc+0x184>)
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4013      	ands	r3, r2
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f040 8093 	bne.w	800d4a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d01d      	beq.n	800d3c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d388:	2208      	movs	r2, #8
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4413      	add	r3, r2
 800d38e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f003 0307 	and.w	r3, r3, #7
 800d396:	2b00      	cmp	r3, #0
 800d398:	d014      	beq.n	800d3c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f023 0307 	bic.w	r3, r3, #7
 800d3a0:	3308      	adds	r3, #8
 800d3a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f003 0307 	and.w	r3, r3, #7
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00a      	beq.n	800d3c4 <pvPortMalloc+0x6c>
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	617b      	str	r3, [r7, #20]
}
 800d3c0:	bf00      	nop
 800d3c2:	e7fe      	b.n	800d3c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d06e      	beq.n	800d4a8 <pvPortMalloc+0x150>
 800d3ca:	4b45      	ldr	r3, [pc, #276]	; (800d4e0 <pvPortMalloc+0x188>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d869      	bhi.n	800d4a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d3d4:	4b43      	ldr	r3, [pc, #268]	; (800d4e4 <pvPortMalloc+0x18c>)
 800d3d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d3d8:	4b42      	ldr	r3, [pc, #264]	; (800d4e4 <pvPortMalloc+0x18c>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3de:	e004      	b.n	800d3ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d903      	bls.n	800d3fc <pvPortMalloc+0xa4>
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1f1      	bne.n	800d3e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d3fc:	4b36      	ldr	r3, [pc, #216]	; (800d4d8 <pvPortMalloc+0x180>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d402:	429a      	cmp	r2, r3
 800d404:	d050      	beq.n	800d4a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d406:	6a3b      	ldr	r3, [r7, #32]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2208      	movs	r2, #8
 800d40c:	4413      	add	r3, r2
 800d40e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	6a3b      	ldr	r3, [r7, #32]
 800d416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	1ad2      	subs	r2, r2, r3
 800d420:	2308      	movs	r3, #8
 800d422:	005b      	lsls	r3, r3, #1
 800d424:	429a      	cmp	r2, r3
 800d426:	d91f      	bls.n	800d468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4413      	add	r3, r2
 800d42e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	f003 0307 	and.w	r3, r3, #7
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00a      	beq.n	800d450 <pvPortMalloc+0xf8>
	__asm volatile
 800d43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43e:	f383 8811 	msr	BASEPRI, r3
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	613b      	str	r3, [r7, #16]
}
 800d44c:	bf00      	nop
 800d44e:	e7fe      	b.n	800d44e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	685a      	ldr	r2, [r3, #4]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	1ad2      	subs	r2, r2, r3
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d462:	69b8      	ldr	r0, [r7, #24]
 800d464:	f000 f908 	bl	800d678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d468:	4b1d      	ldr	r3, [pc, #116]	; (800d4e0 <pvPortMalloc+0x188>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	4a1b      	ldr	r2, [pc, #108]	; (800d4e0 <pvPortMalloc+0x188>)
 800d474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d476:	4b1a      	ldr	r3, [pc, #104]	; (800d4e0 <pvPortMalloc+0x188>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	4b1b      	ldr	r3, [pc, #108]	; (800d4e8 <pvPortMalloc+0x190>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d203      	bcs.n	800d48a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d482:	4b17      	ldr	r3, [pc, #92]	; (800d4e0 <pvPortMalloc+0x188>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a18      	ldr	r2, [pc, #96]	; (800d4e8 <pvPortMalloc+0x190>)
 800d488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	4b13      	ldr	r3, [pc, #76]	; (800d4dc <pvPortMalloc+0x184>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	431a      	orrs	r2, r3
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	2200      	movs	r2, #0
 800d49c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d49e:	4b13      	ldr	r3, [pc, #76]	; (800d4ec <pvPortMalloc+0x194>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	4a11      	ldr	r2, [pc, #68]	; (800d4ec <pvPortMalloc+0x194>)
 800d4a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4a8:	f001 fb9c 	bl	800ebe4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	f003 0307 	and.w	r3, r3, #7
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00a      	beq.n	800d4cc <pvPortMalloc+0x174>
	__asm volatile
 800d4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	60fb      	str	r3, [r7, #12]
}
 800d4c8:	bf00      	nop
 800d4ca:	e7fe      	b.n	800d4ca <pvPortMalloc+0x172>
	return pvReturn;
 800d4cc:	69fb      	ldr	r3, [r7, #28]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3728      	adds	r7, #40	; 0x28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	20004ce0 	.word	0x20004ce0
 800d4dc:	20004cf4 	.word	0x20004cf4
 800d4e0:	20004ce4 	.word	0x20004ce4
 800d4e4:	20004cd8 	.word	0x20004cd8
 800d4e8:	20004ce8 	.word	0x20004ce8
 800d4ec:	20004cec 	.word	0x20004cec

0800d4f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d04d      	beq.n	800d59e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d502:	2308      	movs	r3, #8
 800d504:	425b      	negs	r3, r3
 800d506:	697a      	ldr	r2, [r7, #20]
 800d508:	4413      	add	r3, r2
 800d50a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	685a      	ldr	r2, [r3, #4]
 800d514:	4b24      	ldr	r3, [pc, #144]	; (800d5a8 <vPortFree+0xb8>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4013      	ands	r3, r2
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10a      	bne.n	800d534 <vPortFree+0x44>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	60fb      	str	r3, [r7, #12]
}
 800d530:	bf00      	nop
 800d532:	e7fe      	b.n	800d532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00a      	beq.n	800d552 <vPortFree+0x62>
	__asm volatile
 800d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d540:	f383 8811 	msr	BASEPRI, r3
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	60bb      	str	r3, [r7, #8]
}
 800d54e:	bf00      	nop
 800d550:	e7fe      	b.n	800d550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	685a      	ldr	r2, [r3, #4]
 800d556:	4b14      	ldr	r3, [pc, #80]	; (800d5a8 <vPortFree+0xb8>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4013      	ands	r3, r2
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d01e      	beq.n	800d59e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d11a      	bne.n	800d59e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	4b0e      	ldr	r3, [pc, #56]	; (800d5a8 <vPortFree+0xb8>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	43db      	mvns	r3, r3
 800d572:	401a      	ands	r2, r3
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d578:	f001 fb26 	bl	800ebc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	685a      	ldr	r2, [r3, #4]
 800d580:	4b0a      	ldr	r3, [pc, #40]	; (800d5ac <vPortFree+0xbc>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4413      	add	r3, r2
 800d586:	4a09      	ldr	r2, [pc, #36]	; (800d5ac <vPortFree+0xbc>)
 800d588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d58a:	6938      	ldr	r0, [r7, #16]
 800d58c:	f000 f874 	bl	800d678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d590:	4b07      	ldr	r3, [pc, #28]	; (800d5b0 <vPortFree+0xc0>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3301      	adds	r3, #1
 800d596:	4a06      	ldr	r2, [pc, #24]	; (800d5b0 <vPortFree+0xc0>)
 800d598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d59a:	f001 fb23 	bl	800ebe4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d59e:	bf00      	nop
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20004cf4 	.word	0x20004cf4
 800d5ac:	20004ce4 	.word	0x20004ce4
 800d5b0:	20004cf0 	.word	0x20004cf0

0800d5b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d5be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5c0:	4b27      	ldr	r3, [pc, #156]	; (800d660 <prvHeapInit+0xac>)
 800d5c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f003 0307 	and.w	r3, r3, #7
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00c      	beq.n	800d5e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3307      	adds	r3, #7
 800d5d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f023 0307 	bic.w	r3, r3, #7
 800d5da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	4a1f      	ldr	r2, [pc, #124]	; (800d660 <prvHeapInit+0xac>)
 800d5e4:	4413      	add	r3, r2
 800d5e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d5ec:	4a1d      	ldr	r2, [pc, #116]	; (800d664 <prvHeapInit+0xb0>)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d5f2:	4b1c      	ldr	r3, [pc, #112]	; (800d664 <prvHeapInit+0xb0>)
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d600:	2208      	movs	r2, #8
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	1a9b      	subs	r3, r3, r2
 800d606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f023 0307 	bic.w	r3, r3, #7
 800d60e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	4a15      	ldr	r2, [pc, #84]	; (800d668 <prvHeapInit+0xb4>)
 800d614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d616:	4b14      	ldr	r3, [pc, #80]	; (800d668 <prvHeapInit+0xb4>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2200      	movs	r2, #0
 800d61c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d61e:	4b12      	ldr	r3, [pc, #72]	; (800d668 <prvHeapInit+0xb4>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	1ad2      	subs	r2, r2, r3
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d634:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <prvHeapInit+0xb4>)
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	4a0a      	ldr	r2, [pc, #40]	; (800d66c <prvHeapInit+0xb8>)
 800d642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	4a09      	ldr	r2, [pc, #36]	; (800d670 <prvHeapInit+0xbc>)
 800d64a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d64c:	4b09      	ldr	r3, [pc, #36]	; (800d674 <prvHeapInit+0xc0>)
 800d64e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d652:	601a      	str	r2, [r3, #0]
}
 800d654:	bf00      	nop
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	200010d8 	.word	0x200010d8
 800d664:	20004cd8 	.word	0x20004cd8
 800d668:	20004ce0 	.word	0x20004ce0
 800d66c:	20004ce8 	.word	0x20004ce8
 800d670:	20004ce4 	.word	0x20004ce4
 800d674:	20004cf4 	.word	0x20004cf4

0800d678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d680:	4b28      	ldr	r3, [pc, #160]	; (800d724 <prvInsertBlockIntoFreeList+0xac>)
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	e002      	b.n	800d68c <prvInsertBlockIntoFreeList+0x14>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	60fb      	str	r3, [r7, #12]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	429a      	cmp	r2, r3
 800d694:	d8f7      	bhi.n	800d686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d108      	bne.n	800d6ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	441a      	add	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	441a      	add	r2, r3
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d118      	bne.n	800d700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	4b15      	ldr	r3, [pc, #84]	; (800d728 <prvInsertBlockIntoFreeList+0xb0>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d00d      	beq.n	800d6f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685a      	ldr	r2, [r3, #4]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	441a      	add	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	e008      	b.n	800d708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d6f6:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <prvInsertBlockIntoFreeList+0xb0>)
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	e003      	b.n	800d708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d002      	beq.n	800d716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d716:	bf00      	nop
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	20004cd8 	.word	0x20004cd8
 800d728:	20004ce0 	.word	0x20004ce0

0800d72c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f103 0208 	add.w	r2, r3, #8
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f04f 32ff 	mov.w	r2, #4294967295
 800d744:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f103 0208 	add.w	r2, r3, #8
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f103 0208 	add.w	r2, r3, #8
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d760:	bf00      	nop
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2200      	movs	r2, #0
 800d778:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d77a:	bf00      	nop
 800d77c:	370c      	adds	r7, #12
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr

0800d786 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d786:	b480      	push	{r7}
 800d788:	b085      	sub	sp, #20
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
 800d78e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	689a      	ldr	r2, [r3, #8]
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	1c5a      	adds	r2, r3, #1
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	601a      	str	r2, [r3, #0]
}
 800d7c2:	bf00      	nop
 800d7c4:	3714      	adds	r7, #20
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr

0800d7ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7ce:	b480      	push	{r7}
 800d7d0:	b085      	sub	sp, #20
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e4:	d103      	bne.n	800d7ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	691b      	ldr	r3, [r3, #16]
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	e00c      	b.n	800d808 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	3308      	adds	r3, #8
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	e002      	b.n	800d7fc <vListInsert+0x2e>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	429a      	cmp	r2, r3
 800d806:	d2f6      	bcs.n	800d7f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	683a      	ldr	r2, [r7, #0]
 800d816:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	1c5a      	adds	r2, r3, #1
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	601a      	str	r2, [r3, #0]
}
 800d834:	bf00      	nop
 800d836:	3714      	adds	r7, #20
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	6892      	ldr	r2, [r2, #8]
 800d856:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	6852      	ldr	r2, [r2, #4]
 800d860:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d103      	bne.n	800d874 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	689a      	ldr	r2, [r3, #8]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2200      	movs	r2, #0
 800d878:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	1e5a      	subs	r2, r3, #1
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3714      	adds	r7, #20
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d894:	b480      	push	{r7}
 800d896:	b085      	sub	sp, #20
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	3b04      	subs	r3, #4
 800d8a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d8ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	3b04      	subs	r3, #4
 800d8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	f023 0201 	bic.w	r2, r3, #1
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	3b04      	subs	r3, #4
 800d8c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d8c4:	4a0c      	ldr	r2, [pc, #48]	; (800d8f8 <pxPortInitialiseStack+0x64>)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	3b14      	subs	r3, #20
 800d8ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	3b04      	subs	r3, #4
 800d8da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f06f 0202 	mvn.w	r2, #2
 800d8e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	3b20      	subs	r3, #32
 800d8e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3714      	adds	r7, #20
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr
 800d8f8:	0800d8fd 	.word	0x0800d8fd

0800d8fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d902:	2300      	movs	r3, #0
 800d904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d906:	4b12      	ldr	r3, [pc, #72]	; (800d950 <prvTaskExitError+0x54>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90e:	d00a      	beq.n	800d926 <prvTaskExitError+0x2a>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	60fb      	str	r3, [r7, #12]
}
 800d922:	bf00      	nop
 800d924:	e7fe      	b.n	800d924 <prvTaskExitError+0x28>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	60bb      	str	r3, [r7, #8]
}
 800d938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d93a:	bf00      	nop
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0fc      	beq.n	800d93c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d942:	bf00      	nop
 800d944:	bf00      	nop
 800d946:	3714      	adds	r7, #20
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr
 800d950:	20000010 	.word	0x20000010
	...

0800d960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d960:	4b07      	ldr	r3, [pc, #28]	; (800d980 <pxCurrentTCBConst2>)
 800d962:	6819      	ldr	r1, [r3, #0]
 800d964:	6808      	ldr	r0, [r1, #0]
 800d966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96a:	f380 8809 	msr	PSP, r0
 800d96e:	f3bf 8f6f 	isb	sy
 800d972:	f04f 0000 	mov.w	r0, #0
 800d976:	f380 8811 	msr	BASEPRI, r0
 800d97a:	4770      	bx	lr
 800d97c:	f3af 8000 	nop.w

0800d980 <pxCurrentTCBConst2>:
 800d980:	20004d40 	.word	0x20004d40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d984:	bf00      	nop
 800d986:	bf00      	nop

0800d988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d988:	4808      	ldr	r0, [pc, #32]	; (800d9ac <prvPortStartFirstTask+0x24>)
 800d98a:	6800      	ldr	r0, [r0, #0]
 800d98c:	6800      	ldr	r0, [r0, #0]
 800d98e:	f380 8808 	msr	MSP, r0
 800d992:	f04f 0000 	mov.w	r0, #0
 800d996:	f380 8814 	msr	CONTROL, r0
 800d99a:	b662      	cpsie	i
 800d99c:	b661      	cpsie	f
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	f3bf 8f6f 	isb	sy
 800d9a6:	df00      	svc	0
 800d9a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d9aa:	bf00      	nop
 800d9ac:	e000ed08 	.word	0xe000ed08

0800d9b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d9b6:	4b46      	ldr	r3, [pc, #280]	; (800dad0 <xPortStartScheduler+0x120>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a46      	ldr	r2, [pc, #280]	; (800dad4 <xPortStartScheduler+0x124>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d10a      	bne.n	800d9d6 <xPortStartScheduler+0x26>
	__asm volatile
 800d9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c4:	f383 8811 	msr	BASEPRI, r3
 800d9c8:	f3bf 8f6f 	isb	sy
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	613b      	str	r3, [r7, #16]
}
 800d9d2:	bf00      	nop
 800d9d4:	e7fe      	b.n	800d9d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d9d6:	4b3e      	ldr	r3, [pc, #248]	; (800dad0 <xPortStartScheduler+0x120>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a3f      	ldr	r2, [pc, #252]	; (800dad8 <xPortStartScheduler+0x128>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d10a      	bne.n	800d9f6 <xPortStartScheduler+0x46>
	__asm volatile
 800d9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	60fb      	str	r3, [r7, #12]
}
 800d9f2:	bf00      	nop
 800d9f4:	e7fe      	b.n	800d9f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d9f6:	4b39      	ldr	r3, [pc, #228]	; (800dadc <xPortStartScheduler+0x12c>)
 800d9f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	22ff      	movs	r2, #255	; 0xff
 800da06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da10:	78fb      	ldrb	r3, [r7, #3]
 800da12:	b2db      	uxtb	r3, r3
 800da14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	4b31      	ldr	r3, [pc, #196]	; (800dae0 <xPortStartScheduler+0x130>)
 800da1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da1e:	4b31      	ldr	r3, [pc, #196]	; (800dae4 <xPortStartScheduler+0x134>)
 800da20:	2207      	movs	r2, #7
 800da22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da24:	e009      	b.n	800da3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800da26:	4b2f      	ldr	r3, [pc, #188]	; (800dae4 <xPortStartScheduler+0x134>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	3b01      	subs	r3, #1
 800da2c:	4a2d      	ldr	r2, [pc, #180]	; (800dae4 <xPortStartScheduler+0x134>)
 800da2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da30:	78fb      	ldrb	r3, [r7, #3]
 800da32:	b2db      	uxtb	r3, r3
 800da34:	005b      	lsls	r3, r3, #1
 800da36:	b2db      	uxtb	r3, r3
 800da38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da3a:	78fb      	ldrb	r3, [r7, #3]
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da42:	2b80      	cmp	r3, #128	; 0x80
 800da44:	d0ef      	beq.n	800da26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800da46:	4b27      	ldr	r3, [pc, #156]	; (800dae4 <xPortStartScheduler+0x134>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f1c3 0307 	rsb	r3, r3, #7
 800da4e:	2b04      	cmp	r3, #4
 800da50:	d00a      	beq.n	800da68 <xPortStartScheduler+0xb8>
	__asm volatile
 800da52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	60bb      	str	r3, [r7, #8]
}
 800da64:	bf00      	nop
 800da66:	e7fe      	b.n	800da66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da68:	4b1e      	ldr	r3, [pc, #120]	; (800dae4 <xPortStartScheduler+0x134>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	021b      	lsls	r3, r3, #8
 800da6e:	4a1d      	ldr	r2, [pc, #116]	; (800dae4 <xPortStartScheduler+0x134>)
 800da70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da72:	4b1c      	ldr	r3, [pc, #112]	; (800dae4 <xPortStartScheduler+0x134>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800da7a:	4a1a      	ldr	r2, [pc, #104]	; (800dae4 <xPortStartScheduler+0x134>)
 800da7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	b2da      	uxtb	r2, r3
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da86:	4b18      	ldr	r3, [pc, #96]	; (800dae8 <xPortStartScheduler+0x138>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a17      	ldr	r2, [pc, #92]	; (800dae8 <xPortStartScheduler+0x138>)
 800da8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800da90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800da92:	4b15      	ldr	r3, [pc, #84]	; (800dae8 <xPortStartScheduler+0x138>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a14      	ldr	r2, [pc, #80]	; (800dae8 <xPortStartScheduler+0x138>)
 800da98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800da9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800da9e:	f000 f8dd 	bl	800dc5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800daa2:	4b12      	ldr	r3, [pc, #72]	; (800daec <xPortStartScheduler+0x13c>)
 800daa4:	2200      	movs	r2, #0
 800daa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800daa8:	f000 f8fc 	bl	800dca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800daac:	4b10      	ldr	r3, [pc, #64]	; (800daf0 <xPortStartScheduler+0x140>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a0f      	ldr	r2, [pc, #60]	; (800daf0 <xPortStartScheduler+0x140>)
 800dab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dab8:	f7ff ff66 	bl	800d988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dabc:	f001 f9fa 	bl	800eeb4 <vTaskSwitchContext>
	prvTaskExitError();
 800dac0:	f7ff ff1c 	bl	800d8fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3718      	adds	r7, #24
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	e000ed00 	.word	0xe000ed00
 800dad4:	410fc271 	.word	0x410fc271
 800dad8:	410fc270 	.word	0x410fc270
 800dadc:	e000e400 	.word	0xe000e400
 800dae0:	20004cf8 	.word	0x20004cf8
 800dae4:	20004cfc 	.word	0x20004cfc
 800dae8:	e000ed20 	.word	0xe000ed20
 800daec:	20000010 	.word	0x20000010
 800daf0:	e000ef34 	.word	0xe000ef34

0800daf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
	__asm volatile
 800dafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	607b      	str	r3, [r7, #4]
}
 800db0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db0e:	4b0f      	ldr	r3, [pc, #60]	; (800db4c <vPortEnterCritical+0x58>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	3301      	adds	r3, #1
 800db14:	4a0d      	ldr	r2, [pc, #52]	; (800db4c <vPortEnterCritical+0x58>)
 800db16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db18:	4b0c      	ldr	r3, [pc, #48]	; (800db4c <vPortEnterCritical+0x58>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d10f      	bne.n	800db40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db20:	4b0b      	ldr	r3, [pc, #44]	; (800db50 <vPortEnterCritical+0x5c>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	b2db      	uxtb	r3, r3
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00a      	beq.n	800db40 <vPortEnterCritical+0x4c>
	__asm volatile
 800db2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2e:	f383 8811 	msr	BASEPRI, r3
 800db32:	f3bf 8f6f 	isb	sy
 800db36:	f3bf 8f4f 	dsb	sy
 800db3a:	603b      	str	r3, [r7, #0]
}
 800db3c:	bf00      	nop
 800db3e:	e7fe      	b.n	800db3e <vPortEnterCritical+0x4a>
	}
}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	20000010 	.word	0x20000010
 800db50:	e000ed04 	.word	0xe000ed04

0800db54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800db5a:	4b12      	ldr	r3, [pc, #72]	; (800dba4 <vPortExitCritical+0x50>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d10a      	bne.n	800db78 <vPortExitCritical+0x24>
	__asm volatile
 800db62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db66:	f383 8811 	msr	BASEPRI, r3
 800db6a:	f3bf 8f6f 	isb	sy
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	607b      	str	r3, [r7, #4]
}
 800db74:	bf00      	nop
 800db76:	e7fe      	b.n	800db76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800db78:	4b0a      	ldr	r3, [pc, #40]	; (800dba4 <vPortExitCritical+0x50>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	3b01      	subs	r3, #1
 800db7e:	4a09      	ldr	r2, [pc, #36]	; (800dba4 <vPortExitCritical+0x50>)
 800db80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800db82:	4b08      	ldr	r3, [pc, #32]	; (800dba4 <vPortExitCritical+0x50>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d105      	bne.n	800db96 <vPortExitCritical+0x42>
 800db8a:	2300      	movs	r3, #0
 800db8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	f383 8811 	msr	BASEPRI, r3
}
 800db94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800db96:	bf00      	nop
 800db98:	370c      	adds	r7, #12
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	20000010 	.word	0x20000010
	...

0800dbb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dbb0:	f3ef 8009 	mrs	r0, PSP
 800dbb4:	f3bf 8f6f 	isb	sy
 800dbb8:	4b15      	ldr	r3, [pc, #84]	; (800dc10 <pxCurrentTCBConst>)
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	f01e 0f10 	tst.w	lr, #16
 800dbc0:	bf08      	it	eq
 800dbc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dbc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbca:	6010      	str	r0, [r2, #0]
 800dbcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dbd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dbd4:	f380 8811 	msr	BASEPRI, r0
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f001 f968 	bl	800eeb4 <vTaskSwitchContext>
 800dbe4:	f04f 0000 	mov.w	r0, #0
 800dbe8:	f380 8811 	msr	BASEPRI, r0
 800dbec:	bc09      	pop	{r0, r3}
 800dbee:	6819      	ldr	r1, [r3, #0]
 800dbf0:	6808      	ldr	r0, [r1, #0]
 800dbf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf6:	f01e 0f10 	tst.w	lr, #16
 800dbfa:	bf08      	it	eq
 800dbfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc00:	f380 8809 	msr	PSP, r0
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	f3af 8000 	nop.w

0800dc10 <pxCurrentTCBConst>:
 800dc10:	20004d40 	.word	0x20004d40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc14:	bf00      	nop
 800dc16:	bf00      	nop

0800dc18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc22:	f383 8811 	msr	BASEPRI, r3
 800dc26:	f3bf 8f6f 	isb	sy
 800dc2a:	f3bf 8f4f 	dsb	sy
 800dc2e:	607b      	str	r3, [r7, #4]
}
 800dc30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc32:	f001 f885 	bl	800ed40 <xTaskIncrementTick>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d003      	beq.n	800dc44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc3c:	4b06      	ldr	r3, [pc, #24]	; (800dc58 <xPortSysTickHandler+0x40>)
 800dc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	2300      	movs	r3, #0
 800dc46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	f383 8811 	msr	BASEPRI, r3
}
 800dc4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dc50:	bf00      	nop
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	e000ed04 	.word	0xe000ed04

0800dc5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dc60:	4b0b      	ldr	r3, [pc, #44]	; (800dc90 <vPortSetupTimerInterrupt+0x34>)
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dc66:	4b0b      	ldr	r3, [pc, #44]	; (800dc94 <vPortSetupTimerInterrupt+0x38>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dc6c:	4b0a      	ldr	r3, [pc, #40]	; (800dc98 <vPortSetupTimerInterrupt+0x3c>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a0a      	ldr	r2, [pc, #40]	; (800dc9c <vPortSetupTimerInterrupt+0x40>)
 800dc72:	fba2 2303 	umull	r2, r3, r2, r3
 800dc76:	099b      	lsrs	r3, r3, #6
 800dc78:	4a09      	ldr	r2, [pc, #36]	; (800dca0 <vPortSetupTimerInterrupt+0x44>)
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dc7e:	4b04      	ldr	r3, [pc, #16]	; (800dc90 <vPortSetupTimerInterrupt+0x34>)
 800dc80:	2207      	movs	r2, #7
 800dc82:	601a      	str	r2, [r3, #0]
}
 800dc84:	bf00      	nop
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	e000e010 	.word	0xe000e010
 800dc94:	e000e018 	.word	0xe000e018
 800dc98:	20000004 	.word	0x20000004
 800dc9c:	10624dd3 	.word	0x10624dd3
 800dca0:	e000e014 	.word	0xe000e014

0800dca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dcb4 <vPortEnableVFP+0x10>
 800dca8:	6801      	ldr	r1, [r0, #0]
 800dcaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dcae:	6001      	str	r1, [r0, #0]
 800dcb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dcb2:	bf00      	nop
 800dcb4:	e000ed88 	.word	0xe000ed88

0800dcb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dcbe:	f3ef 8305 	mrs	r3, IPSR
 800dcc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b0f      	cmp	r3, #15
 800dcc8:	d914      	bls.n	800dcf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dcca:	4a17      	ldr	r2, [pc, #92]	; (800dd28 <vPortValidateInterruptPriority+0x70>)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	4413      	add	r3, r2
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dcd4:	4b15      	ldr	r3, [pc, #84]	; (800dd2c <vPortValidateInterruptPriority+0x74>)
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	7afa      	ldrb	r2, [r7, #11]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d20a      	bcs.n	800dcf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	607b      	str	r3, [r7, #4]
}
 800dcf0:	bf00      	nop
 800dcf2:	e7fe      	b.n	800dcf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dcf4:	4b0e      	ldr	r3, [pc, #56]	; (800dd30 <vPortValidateInterruptPriority+0x78>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dcfc:	4b0d      	ldr	r3, [pc, #52]	; (800dd34 <vPortValidateInterruptPriority+0x7c>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d90a      	bls.n	800dd1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	603b      	str	r3, [r7, #0]
}
 800dd16:	bf00      	nop
 800dd18:	e7fe      	b.n	800dd18 <vPortValidateInterruptPriority+0x60>
	}
 800dd1a:	bf00      	nop
 800dd1c:	3714      	adds	r7, #20
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	e000e3f0 	.word	0xe000e3f0
 800dd2c:	20004cf8 	.word	0x20004cf8
 800dd30:	e000ed0c 	.word	0xe000ed0c
 800dd34:	20004cfc 	.word	0x20004cfc

0800dd38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d10a      	bne.n	800dd62 <xQueueGenericReset+0x2a>
	__asm volatile
 800dd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd50:	f383 8811 	msr	BASEPRI, r3
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	f3bf 8f4f 	dsb	sy
 800dd5c:	60bb      	str	r3, [r7, #8]
}
 800dd5e:	bf00      	nop
 800dd60:	e7fe      	b.n	800dd60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dd62:	f7ff fec7 	bl	800daf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd6e:	68f9      	ldr	r1, [r7, #12]
 800dd70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dd72:	fb01 f303 	mul.w	r3, r1, r3
 800dd76:	441a      	add	r2, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd92:	3b01      	subs	r3, #1
 800dd94:	68f9      	ldr	r1, [r7, #12]
 800dd96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dd98:	fb01 f303 	mul.w	r3, r1, r3
 800dd9c:	441a      	add	r2, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	22ff      	movs	r2, #255	; 0xff
 800dda6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	22ff      	movs	r2, #255	; 0xff
 800ddae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d114      	bne.n	800dde2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	691b      	ldr	r3, [r3, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d01a      	beq.n	800ddf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3310      	adds	r3, #16
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f001 f929 	bl	800f01c <xTaskRemoveFromEventList>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d012      	beq.n	800ddf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ddd0:	4b0c      	ldr	r3, [pc, #48]	; (800de04 <xQueueGenericReset+0xcc>)
 800ddd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	e009      	b.n	800ddf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3310      	adds	r3, #16
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7ff fca0 	bl	800d72c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	3324      	adds	r3, #36	; 0x24
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7ff fc9b 	bl	800d72c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ddf6:	f7ff fead 	bl	800db54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ddfa:	2301      	movs	r3, #1
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	e000ed04 	.word	0xe000ed04

0800de08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08e      	sub	sp, #56	; 0x38
 800de0c:	af02      	add	r7, sp, #8
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]
 800de14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d10a      	bne.n	800de32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800de1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800de2e:	bf00      	nop
 800de30:	e7fe      	b.n	800de30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d10a      	bne.n	800de4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800de38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3c:	f383 8811 	msr	BASEPRI, r3
 800de40:	f3bf 8f6f 	isb	sy
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	627b      	str	r3, [r7, #36]	; 0x24
}
 800de4a:	bf00      	nop
 800de4c:	e7fe      	b.n	800de4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <xQueueGenericCreateStatic+0x52>
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d001      	beq.n	800de5e <xQueueGenericCreateStatic+0x56>
 800de5a:	2301      	movs	r3, #1
 800de5c:	e000      	b.n	800de60 <xQueueGenericCreateStatic+0x58>
 800de5e:	2300      	movs	r3, #0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d10a      	bne.n	800de7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800de64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	623b      	str	r3, [r7, #32]
}
 800de76:	bf00      	nop
 800de78:	e7fe      	b.n	800de78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d102      	bne.n	800de86 <xQueueGenericCreateStatic+0x7e>
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d101      	bne.n	800de8a <xQueueGenericCreateStatic+0x82>
 800de86:	2301      	movs	r3, #1
 800de88:	e000      	b.n	800de8c <xQueueGenericCreateStatic+0x84>
 800de8a:	2300      	movs	r3, #0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d10a      	bne.n	800dea6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800de90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de94:	f383 8811 	msr	BASEPRI, r3
 800de98:	f3bf 8f6f 	isb	sy
 800de9c:	f3bf 8f4f 	dsb	sy
 800dea0:	61fb      	str	r3, [r7, #28]
}
 800dea2:	bf00      	nop
 800dea4:	e7fe      	b.n	800dea4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dea6:	2350      	movs	r3, #80	; 0x50
 800dea8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	2b50      	cmp	r3, #80	; 0x50
 800deae:	d00a      	beq.n	800dec6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	61bb      	str	r3, [r7, #24]
}
 800dec2:	bf00      	nop
 800dec4:	e7fe      	b.n	800dec4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dec6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800decc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d00d      	beq.n	800deee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ded2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded4:	2201      	movs	r2, #1
 800ded6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800deda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee0:	9300      	str	r3, [sp, #0]
 800dee2:	4613      	mov	r3, r2
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	68b9      	ldr	r1, [r7, #8]
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f000 f805 	bl	800def8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800deee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800def0:	4618      	mov	r0, r3
 800def2:	3730      	adds	r7, #48	; 0x30
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
 800df04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d103      	bne.n	800df14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	69ba      	ldr	r2, [r7, #24]
 800df10:	601a      	str	r2, [r3, #0]
 800df12:	e002      	b.n	800df1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800df26:	2101      	movs	r1, #1
 800df28:	69b8      	ldr	r0, [r7, #24]
 800df2a:	f7ff ff05 	bl	800dd38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	78fa      	ldrb	r2, [r7, #3]
 800df32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800df36:	bf00      	nop
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
	...

0800df40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08e      	sub	sp, #56	; 0x38
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
 800df4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800df4e:	2300      	movs	r3, #0
 800df50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800df56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d10a      	bne.n	800df72 <xQueueGenericSend+0x32>
	__asm volatile
 800df5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df60:	f383 8811 	msr	BASEPRI, r3
 800df64:	f3bf 8f6f 	isb	sy
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df6e:	bf00      	nop
 800df70:	e7fe      	b.n	800df70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d103      	bne.n	800df80 <xQueueGenericSend+0x40>
 800df78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d101      	bne.n	800df84 <xQueueGenericSend+0x44>
 800df80:	2301      	movs	r3, #1
 800df82:	e000      	b.n	800df86 <xQueueGenericSend+0x46>
 800df84:	2300      	movs	r3, #0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d10a      	bne.n	800dfa0 <xQueueGenericSend+0x60>
	__asm volatile
 800df8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8e:	f383 8811 	msr	BASEPRI, r3
 800df92:	f3bf 8f6f 	isb	sy
 800df96:	f3bf 8f4f 	dsb	sy
 800df9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800df9c:	bf00      	nop
 800df9e:	e7fe      	b.n	800df9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	2b02      	cmp	r3, #2
 800dfa4:	d103      	bne.n	800dfae <xQueueGenericSend+0x6e>
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d101      	bne.n	800dfb2 <xQueueGenericSend+0x72>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e000      	b.n	800dfb4 <xQueueGenericSend+0x74>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10a      	bne.n	800dfce <xQueueGenericSend+0x8e>
	__asm volatile
 800dfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	623b      	str	r3, [r7, #32]
}
 800dfca:	bf00      	nop
 800dfcc:	e7fe      	b.n	800dfcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dfce:	f001 f9e7 	bl	800f3a0 <xTaskGetSchedulerState>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d102      	bne.n	800dfde <xQueueGenericSend+0x9e>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d101      	bne.n	800dfe2 <xQueueGenericSend+0xa2>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e000      	b.n	800dfe4 <xQueueGenericSend+0xa4>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d10a      	bne.n	800dffe <xQueueGenericSend+0xbe>
	__asm volatile
 800dfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfec:	f383 8811 	msr	BASEPRI, r3
 800dff0:	f3bf 8f6f 	isb	sy
 800dff4:	f3bf 8f4f 	dsb	sy
 800dff8:	61fb      	str	r3, [r7, #28]
}
 800dffa:	bf00      	nop
 800dffc:	e7fe      	b.n	800dffc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dffe:	f7ff fd79 	bl	800daf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d302      	bcc.n	800e014 <xQueueGenericSend+0xd4>
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	2b02      	cmp	r3, #2
 800e012:	d129      	bne.n	800e068 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e014:	683a      	ldr	r2, [r7, #0]
 800e016:	68b9      	ldr	r1, [r7, #8]
 800e018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e01a:	f000 fa0b 	bl	800e434 <prvCopyDataToQueue>
 800e01e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e024:	2b00      	cmp	r3, #0
 800e026:	d010      	beq.n	800e04a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02a:	3324      	adds	r3, #36	; 0x24
 800e02c:	4618      	mov	r0, r3
 800e02e:	f000 fff5 	bl	800f01c <xTaskRemoveFromEventList>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d013      	beq.n	800e060 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e038:	4b3f      	ldr	r3, [pc, #252]	; (800e138 <xQueueGenericSend+0x1f8>)
 800e03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e03e:	601a      	str	r2, [r3, #0]
 800e040:	f3bf 8f4f 	dsb	sy
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	e00a      	b.n	800e060 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d007      	beq.n	800e060 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e050:	4b39      	ldr	r3, [pc, #228]	; (800e138 <xQueueGenericSend+0x1f8>)
 800e052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e056:	601a      	str	r2, [r3, #0]
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e060:	f7ff fd78 	bl	800db54 <vPortExitCritical>
				return pdPASS;
 800e064:	2301      	movs	r3, #1
 800e066:	e063      	b.n	800e130 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d103      	bne.n	800e076 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e06e:	f7ff fd71 	bl	800db54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e072:	2300      	movs	r3, #0
 800e074:	e05c      	b.n	800e130 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d106      	bne.n	800e08a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e07c:	f107 0314 	add.w	r3, r7, #20
 800e080:	4618      	mov	r0, r3
 800e082:	f001 f82f 	bl	800f0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e086:	2301      	movs	r3, #1
 800e088:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e08a:	f7ff fd63 	bl	800db54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e08e:	f000 fd9b 	bl	800ebc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e092:	f7ff fd2f 	bl	800daf4 <vPortEnterCritical>
 800e096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e09c:	b25b      	sxtb	r3, r3
 800e09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a2:	d103      	bne.n	800e0ac <xQueueGenericSend+0x16c>
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0b2:	b25b      	sxtb	r3, r3
 800e0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0b8:	d103      	bne.n	800e0c2 <xQueueGenericSend+0x182>
 800e0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0c2:	f7ff fd47 	bl	800db54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e0c6:	1d3a      	adds	r2, r7, #4
 800e0c8:	f107 0314 	add.w	r3, r7, #20
 800e0cc:	4611      	mov	r1, r2
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f001 f81e 	bl	800f110 <xTaskCheckForTimeOut>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d124      	bne.n	800e124 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e0da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0dc:	f000 faa2 	bl	800e624 <prvIsQueueFull>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d018      	beq.n	800e118 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e8:	3310      	adds	r3, #16
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	4611      	mov	r1, r2
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f000 ff44 	bl	800ef7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e0f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0f6:	f000 fa2d 	bl	800e554 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e0fa:	f000 fd73 	bl	800ebe4 <xTaskResumeAll>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	f47f af7c 	bne.w	800dffe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e106:	4b0c      	ldr	r3, [pc, #48]	; (800e138 <xQueueGenericSend+0x1f8>)
 800e108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	e772      	b.n	800dffe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e11a:	f000 fa1b 	bl	800e554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e11e:	f000 fd61 	bl	800ebe4 <xTaskResumeAll>
 800e122:	e76c      	b.n	800dffe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e126:	f000 fa15 	bl	800e554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e12a:	f000 fd5b 	bl	800ebe4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e12e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e130:	4618      	mov	r0, r3
 800e132:	3738      	adds	r7, #56	; 0x38
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	e000ed04 	.word	0xe000ed04

0800e13c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b090      	sub	sp, #64	; 0x40
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10a      	bne.n	800e16a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e158:	f383 8811 	msr	BASEPRI, r3
 800e15c:	f3bf 8f6f 	isb	sy
 800e160:	f3bf 8f4f 	dsb	sy
 800e164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e166:	bf00      	nop
 800e168:	e7fe      	b.n	800e168 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d103      	bne.n	800e178 <xQueueGenericSendFromISR+0x3c>
 800e170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <xQueueGenericSendFromISR+0x40>
 800e178:	2301      	movs	r3, #1
 800e17a:	e000      	b.n	800e17e <xQueueGenericSendFromISR+0x42>
 800e17c:	2300      	movs	r3, #0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10a      	bne.n	800e198 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e186:	f383 8811 	msr	BASEPRI, r3
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e194:	bf00      	nop
 800e196:	e7fe      	b.n	800e196 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2b02      	cmp	r3, #2
 800e19c:	d103      	bne.n	800e1a6 <xQueueGenericSendFromISR+0x6a>
 800e19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d101      	bne.n	800e1aa <xQueueGenericSendFromISR+0x6e>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e000      	b.n	800e1ac <xQueueGenericSendFromISR+0x70>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10a      	bne.n	800e1c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	623b      	str	r3, [r7, #32]
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1c6:	f7ff fd77 	bl	800dcb8 <vPortValidateInterruptPriority>
	__asm volatile
 800e1ca:	f3ef 8211 	mrs	r2, BASEPRI
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	61fa      	str	r2, [r7, #28]
 800e1e0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e1e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d302      	bcc.n	800e1f8 <xQueueGenericSendFromISR+0xbc>
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	2b02      	cmp	r3, #2
 800e1f6:	d12f      	bne.n	800e258 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e206:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e208:	683a      	ldr	r2, [r7, #0]
 800e20a:	68b9      	ldr	r1, [r7, #8]
 800e20c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e20e:	f000 f911 	bl	800e434 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e212:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e21a:	d112      	bne.n	800e242 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e220:	2b00      	cmp	r3, #0
 800e222:	d016      	beq.n	800e252 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e226:	3324      	adds	r3, #36	; 0x24
 800e228:	4618      	mov	r0, r3
 800e22a:	f000 fef7 	bl	800f01c <xTaskRemoveFromEventList>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	d00e      	beq.n	800e252 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00b      	beq.n	800e252 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2201      	movs	r2, #1
 800e23e:	601a      	str	r2, [r3, #0]
 800e240:	e007      	b.n	800e252 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e242:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e246:	3301      	adds	r3, #1
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	b25a      	sxtb	r2, r3
 800e24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e252:	2301      	movs	r3, #1
 800e254:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e256:	e001      	b.n	800e25c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e258:	2300      	movs	r3, #0
 800e25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e25e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f383 8811 	msr	BASEPRI, r3
}
 800e266:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3740      	adds	r7, #64	; 0x40
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
	...

0800e274 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b08c      	sub	sp, #48	; 0x30
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e280:	2300      	movs	r3, #0
 800e282:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10a      	bne.n	800e2a4 <xQueueReceive+0x30>
	__asm volatile
 800e28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e292:	f383 8811 	msr	BASEPRI, r3
 800e296:	f3bf 8f6f 	isb	sy
 800e29a:	f3bf 8f4f 	dsb	sy
 800e29e:	623b      	str	r3, [r7, #32]
}
 800e2a0:	bf00      	nop
 800e2a2:	e7fe      	b.n	800e2a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d103      	bne.n	800e2b2 <xQueueReceive+0x3e>
 800e2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d101      	bne.n	800e2b6 <xQueueReceive+0x42>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e000      	b.n	800e2b8 <xQueueReceive+0x44>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10a      	bne.n	800e2d2 <xQueueReceive+0x5e>
	__asm volatile
 800e2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	61fb      	str	r3, [r7, #28]
}
 800e2ce:	bf00      	nop
 800e2d0:	e7fe      	b.n	800e2d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2d2:	f001 f865 	bl	800f3a0 <xTaskGetSchedulerState>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d102      	bne.n	800e2e2 <xQueueReceive+0x6e>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d101      	bne.n	800e2e6 <xQueueReceive+0x72>
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	e000      	b.n	800e2e8 <xQueueReceive+0x74>
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d10a      	bne.n	800e302 <xQueueReceive+0x8e>
	__asm volatile
 800e2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f0:	f383 8811 	msr	BASEPRI, r3
 800e2f4:	f3bf 8f6f 	isb	sy
 800e2f8:	f3bf 8f4f 	dsb	sy
 800e2fc:	61bb      	str	r3, [r7, #24]
}
 800e2fe:	bf00      	nop
 800e300:	e7fe      	b.n	800e300 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e302:	f7ff fbf7 	bl	800daf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e30a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d01f      	beq.n	800e352 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e312:	68b9      	ldr	r1, [r7, #8]
 800e314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e316:	f000 f8f7 	bl	800e508 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31c:	1e5a      	subs	r2, r3, #1
 800e31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e320:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00f      	beq.n	800e34a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32c:	3310      	adds	r3, #16
 800e32e:	4618      	mov	r0, r3
 800e330:	f000 fe74 	bl	800f01c <xTaskRemoveFromEventList>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d007      	beq.n	800e34a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e33a:	4b3d      	ldr	r3, [pc, #244]	; (800e430 <xQueueReceive+0x1bc>)
 800e33c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e340:	601a      	str	r2, [r3, #0]
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e34a:	f7ff fc03 	bl	800db54 <vPortExitCritical>
				return pdPASS;
 800e34e:	2301      	movs	r3, #1
 800e350:	e069      	b.n	800e426 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d103      	bne.n	800e360 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e358:	f7ff fbfc 	bl	800db54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e35c:	2300      	movs	r3, #0
 800e35e:	e062      	b.n	800e426 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e362:	2b00      	cmp	r3, #0
 800e364:	d106      	bne.n	800e374 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e366:	f107 0310 	add.w	r3, r7, #16
 800e36a:	4618      	mov	r0, r3
 800e36c:	f000 feba 	bl	800f0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e370:	2301      	movs	r3, #1
 800e372:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e374:	f7ff fbee 	bl	800db54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e378:	f000 fc26 	bl	800ebc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e37c:	f7ff fbba 	bl	800daf4 <vPortEnterCritical>
 800e380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e386:	b25b      	sxtb	r3, r3
 800e388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e38c:	d103      	bne.n	800e396 <xQueueReceive+0x122>
 800e38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e390:	2200      	movs	r2, #0
 800e392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e39c:	b25b      	sxtb	r3, r3
 800e39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a2:	d103      	bne.n	800e3ac <xQueueReceive+0x138>
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3ac:	f7ff fbd2 	bl	800db54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3b0:	1d3a      	adds	r2, r7, #4
 800e3b2:	f107 0310 	add.w	r3, r7, #16
 800e3b6:	4611      	mov	r1, r2
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f000 fea9 	bl	800f110 <xTaskCheckForTimeOut>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d123      	bne.n	800e40c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3c6:	f000 f917 	bl	800e5f8 <prvIsQueueEmpty>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d017      	beq.n	800e400 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d2:	3324      	adds	r3, #36	; 0x24
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 fdcf 	bl	800ef7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e3de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3e0:	f000 f8b8 	bl	800e554 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e3e4:	f000 fbfe 	bl	800ebe4 <xTaskResumeAll>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d189      	bne.n	800e302 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e3ee:	4b10      	ldr	r3, [pc, #64]	; (800e430 <xQueueReceive+0x1bc>)
 800e3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3f4:	601a      	str	r2, [r3, #0]
 800e3f6:	f3bf 8f4f 	dsb	sy
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	e780      	b.n	800e302 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e402:	f000 f8a7 	bl	800e554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e406:	f000 fbed 	bl	800ebe4 <xTaskResumeAll>
 800e40a:	e77a      	b.n	800e302 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e40c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e40e:	f000 f8a1 	bl	800e554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e412:	f000 fbe7 	bl	800ebe4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e418:	f000 f8ee 	bl	800e5f8 <prvIsQueueEmpty>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f43f af6f 	beq.w	800e302 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e426:	4618      	mov	r0, r3
 800e428:	3730      	adds	r7, #48	; 0x30
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	e000ed04 	.word	0xe000ed04

0800e434 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b086      	sub	sp, #24
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e440:	2300      	movs	r3, #0
 800e442:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e448:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10d      	bne.n	800e46e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d14d      	bne.n	800e4f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	4618      	mov	r0, r3
 800e460:	f000 ffbc 	bl	800f3dc <xTaskPriorityDisinherit>
 800e464:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2200      	movs	r2, #0
 800e46a:	609a      	str	r2, [r3, #8]
 800e46c:	e043      	b.n	800e4f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d119      	bne.n	800e4a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	6858      	ldr	r0, [r3, #4]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e47c:	461a      	mov	r2, r3
 800e47e:	68b9      	ldr	r1, [r7, #8]
 800e480:	f001 fce2 	bl	800fe48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	685a      	ldr	r2, [r3, #4]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e48c:	441a      	add	r2, r3
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	685a      	ldr	r2, [r3, #4]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d32b      	bcc.n	800e4f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	605a      	str	r2, [r3, #4]
 800e4a6:	e026      	b.n	800e4f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	68d8      	ldr	r0, [r3, #12]
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	68b9      	ldr	r1, [r7, #8]
 800e4b4:	f001 fcc8 	bl	800fe48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	68da      	ldr	r2, [r3, #12]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4c0:	425b      	negs	r3, r3
 800e4c2:	441a      	add	r2, r3
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	68da      	ldr	r2, [r3, #12]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d207      	bcs.n	800e4e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	689a      	ldr	r2, [r3, #8]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4dc:	425b      	negs	r3, r3
 800e4de:	441a      	add	r2, r3
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	d105      	bne.n	800e4f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	1c5a      	adds	r2, r3, #1
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e4fe:	697b      	ldr	r3, [r7, #20]
}
 800e500:	4618      	mov	r0, r3
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e516:	2b00      	cmp	r3, #0
 800e518:	d018      	beq.n	800e54c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	68da      	ldr	r2, [r3, #12]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e522:	441a      	add	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	68da      	ldr	r2, [r3, #12]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	689b      	ldr	r3, [r3, #8]
 800e530:	429a      	cmp	r2, r3
 800e532:	d303      	bcc.n	800e53c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	68d9      	ldr	r1, [r3, #12]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e544:	461a      	mov	r2, r3
 800e546:	6838      	ldr	r0, [r7, #0]
 800e548:	f001 fc7e 	bl	800fe48 <memcpy>
	}
}
 800e54c:	bf00      	nop
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e55c:	f7ff faca 	bl	800daf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e566:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e568:	e011      	b.n	800e58e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d012      	beq.n	800e598 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	3324      	adds	r3, #36	; 0x24
 800e576:	4618      	mov	r0, r3
 800e578:	f000 fd50 	bl	800f01c <xTaskRemoveFromEventList>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e582:	f000 fe27 	bl	800f1d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e586:	7bfb      	ldrb	r3, [r7, #15]
 800e588:	3b01      	subs	r3, #1
 800e58a:	b2db      	uxtb	r3, r3
 800e58c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e58e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e592:	2b00      	cmp	r3, #0
 800e594:	dce9      	bgt.n	800e56a <prvUnlockQueue+0x16>
 800e596:	e000      	b.n	800e59a <prvUnlockQueue+0x46>
					break;
 800e598:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	22ff      	movs	r2, #255	; 0xff
 800e59e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e5a2:	f7ff fad7 	bl	800db54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e5a6:	f7ff faa5 	bl	800daf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e5b2:	e011      	b.n	800e5d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	691b      	ldr	r3, [r3, #16]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d012      	beq.n	800e5e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3310      	adds	r3, #16
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 fd2b 	bl	800f01c <xTaskRemoveFromEventList>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e5cc:	f000 fe02 	bl	800f1d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e5d0:	7bbb      	ldrb	r3, [r7, #14]
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e5d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	dce9      	bgt.n	800e5b4 <prvUnlockQueue+0x60>
 800e5e0:	e000      	b.n	800e5e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e5e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	22ff      	movs	r2, #255	; 0xff
 800e5e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e5ec:	f7ff fab2 	bl	800db54 <vPortExitCritical>
}
 800e5f0:	bf00      	nop
 800e5f2:	3710      	adds	r7, #16
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e600:	f7ff fa78 	bl	800daf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d102      	bne.n	800e612 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e60c:	2301      	movs	r3, #1
 800e60e:	60fb      	str	r3, [r7, #12]
 800e610:	e001      	b.n	800e616 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e612:	2300      	movs	r3, #0
 800e614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e616:	f7ff fa9d 	bl	800db54 <vPortExitCritical>

	return xReturn;
 800e61a:	68fb      	ldr	r3, [r7, #12]
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e62c:	f7ff fa62 	bl	800daf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e638:	429a      	cmp	r2, r3
 800e63a:	d102      	bne.n	800e642 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e63c:	2301      	movs	r3, #1
 800e63e:	60fb      	str	r3, [r7, #12]
 800e640:	e001      	b.n	800e646 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e642:	2300      	movs	r3, #0
 800e644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e646:	f7ff fa85 	bl	800db54 <vPortExitCritical>

	return xReturn;
 800e64a:	68fb      	ldr	r3, [r7, #12]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e65e:	2300      	movs	r3, #0
 800e660:	60fb      	str	r3, [r7, #12]
 800e662:	e014      	b.n	800e68e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e664:	4a0f      	ldr	r2, [pc, #60]	; (800e6a4 <vQueueAddToRegistry+0x50>)
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10b      	bne.n	800e688 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e670:	490c      	ldr	r1, [pc, #48]	; (800e6a4 <vQueueAddToRegistry+0x50>)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	683a      	ldr	r2, [r7, #0]
 800e676:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e67a:	4a0a      	ldr	r2, [pc, #40]	; (800e6a4 <vQueueAddToRegistry+0x50>)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	00db      	lsls	r3, r3, #3
 800e680:	4413      	add	r3, r2
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e686:	e006      	b.n	800e696 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	3301      	adds	r3, #1
 800e68c:	60fb      	str	r3, [r7, #12]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2b07      	cmp	r3, #7
 800e692:	d9e7      	bls.n	800e664 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e694:	bf00      	nop
 800e696:	bf00      	nop
 800e698:	3714      	adds	r7, #20
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	20004d00 	.word	0x20004d00

0800e6a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e6b8:	f7ff fa1c 	bl	800daf4 <vPortEnterCritical>
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6c2:	b25b      	sxtb	r3, r3
 800e6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c8:	d103      	bne.n	800e6d2 <vQueueWaitForMessageRestricted+0x2a>
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6d8:	b25b      	sxtb	r3, r3
 800e6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6de:	d103      	bne.n	800e6e8 <vQueueWaitForMessageRestricted+0x40>
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6e8:	f7ff fa34 	bl	800db54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d106      	bne.n	800e702 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	3324      	adds	r3, #36	; 0x24
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	68b9      	ldr	r1, [r7, #8]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f000 fc61 	bl	800efc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e702:	6978      	ldr	r0, [r7, #20]
 800e704:	f7ff ff26 	bl	800e554 <prvUnlockQueue>
	}
 800e708:	bf00      	nop
 800e70a:	3718      	adds	r7, #24
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e710:	b580      	push	{r7, lr}
 800e712:	b08e      	sub	sp, #56	; 0x38
 800e714:	af04      	add	r7, sp, #16
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	607a      	str	r2, [r7, #4]
 800e71c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10a      	bne.n	800e73a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e728:	f383 8811 	msr	BASEPRI, r3
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	623b      	str	r3, [r7, #32]
}
 800e736:	bf00      	nop
 800e738:	e7fe      	b.n	800e738 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d10a      	bne.n	800e756 <xTaskCreateStatic+0x46>
	__asm volatile
 800e740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	61fb      	str	r3, [r7, #28]
}
 800e752:	bf00      	nop
 800e754:	e7fe      	b.n	800e754 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e756:	23bc      	movs	r3, #188	; 0xbc
 800e758:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	2bbc      	cmp	r3, #188	; 0xbc
 800e75e:	d00a      	beq.n	800e776 <xTaskCreateStatic+0x66>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	61bb      	str	r3, [r7, #24]
}
 800e772:	bf00      	nop
 800e774:	e7fe      	b.n	800e774 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e776:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d01e      	beq.n	800e7bc <xTaskCreateStatic+0xac>
 800e77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e780:	2b00      	cmp	r3, #0
 800e782:	d01b      	beq.n	800e7bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e786:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e78c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e790:	2202      	movs	r2, #2
 800e792:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e796:	2300      	movs	r3, #0
 800e798:	9303      	str	r3, [sp, #12]
 800e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79c:	9302      	str	r3, [sp, #8]
 800e79e:	f107 0314 	add.w	r3, r7, #20
 800e7a2:	9301      	str	r3, [sp, #4]
 800e7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	68b9      	ldr	r1, [r7, #8]
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f000 f850 	bl	800e854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e7b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7b6:	f000 f8f3 	bl	800e9a0 <prvAddNewTaskToReadyList>
 800e7ba:	e001      	b.n	800e7c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e7c0:	697b      	ldr	r3, [r7, #20]
	}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3728      	adds	r7, #40	; 0x28
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b08c      	sub	sp, #48	; 0x30
 800e7ce:	af04      	add	r7, sp, #16
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	60b9      	str	r1, [r7, #8]
 800e7d4:	603b      	str	r3, [r7, #0]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e7da:	88fb      	ldrh	r3, [r7, #6]
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fe fdba 	bl	800d358 <pvPortMalloc>
 800e7e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00e      	beq.n	800e80a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e7ec:	20bc      	movs	r0, #188	; 0xbc
 800e7ee:	f7fe fdb3 	bl	800d358 <pvPortMalloc>
 800e7f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d003      	beq.n	800e802 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	697a      	ldr	r2, [r7, #20]
 800e7fe:	631a      	str	r2, [r3, #48]	; 0x30
 800e800:	e005      	b.n	800e80e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e802:	6978      	ldr	r0, [r7, #20]
 800e804:	f7fe fe74 	bl	800d4f0 <vPortFree>
 800e808:	e001      	b.n	800e80e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e80a:	2300      	movs	r3, #0
 800e80c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d017      	beq.n	800e844 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	2200      	movs	r2, #0
 800e818:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e81c:	88fa      	ldrh	r2, [r7, #6]
 800e81e:	2300      	movs	r3, #0
 800e820:	9303      	str	r3, [sp, #12]
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	9302      	str	r3, [sp, #8]
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	68b9      	ldr	r1, [r7, #8]
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	f000 f80e 	bl	800e854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e838:	69f8      	ldr	r0, [r7, #28]
 800e83a:	f000 f8b1 	bl	800e9a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e83e:	2301      	movs	r3, #1
 800e840:	61bb      	str	r3, [r7, #24]
 800e842:	e002      	b.n	800e84a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e844:	f04f 33ff 	mov.w	r3, #4294967295
 800e848:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e84a:	69bb      	ldr	r3, [r7, #24]
	}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3720      	adds	r7, #32
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b088      	sub	sp, #32
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
 800e860:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e864:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	461a      	mov	r2, r3
 800e86c:	21a5      	movs	r1, #165	; 0xa5
 800e86e:	f001 faf9 	bl	800fe64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e87c:	3b01      	subs	r3, #1
 800e87e:	009b      	lsls	r3, r3, #2
 800e880:	4413      	add	r3, r2
 800e882:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	f023 0307 	bic.w	r3, r3, #7
 800e88a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	f003 0307 	and.w	r3, r3, #7
 800e892:	2b00      	cmp	r3, #0
 800e894:	d00a      	beq.n	800e8ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	617b      	str	r3, [r7, #20]
}
 800e8a8:	bf00      	nop
 800e8aa:	e7fe      	b.n	800e8aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d01f      	beq.n	800e8f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	61fb      	str	r3, [r7, #28]
 800e8b6:	e012      	b.n	800e8de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	4413      	add	r3, r2
 800e8be:	7819      	ldrb	r1, [r3, #0]
 800e8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8c2:	69fb      	ldr	r3, [r7, #28]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	3334      	adds	r3, #52	; 0x34
 800e8c8:	460a      	mov	r2, r1
 800e8ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d006      	beq.n	800e8e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	61fb      	str	r3, [r7, #28]
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	2b0f      	cmp	r3, #15
 800e8e2:	d9e9      	bls.n	800e8b8 <prvInitialiseNewTask+0x64>
 800e8e4:	e000      	b.n	800e8e8 <prvInitialiseNewTask+0x94>
			{
				break;
 800e8e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e8f0:	e003      	b.n	800e8fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fc:	2b37      	cmp	r3, #55	; 0x37
 800e8fe:	d901      	bls.n	800e904 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e900:	2337      	movs	r3, #55	; 0x37
 800e902:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e908:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e90e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e912:	2200      	movs	r2, #0
 800e914:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	3304      	adds	r3, #4
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7fe ff26 	bl	800d76c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e922:	3318      	adds	r3, #24
 800e924:	4618      	mov	r0, r3
 800e926:	f7fe ff21 	bl	800d76c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e92e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e938:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e93e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e942:	2200      	movs	r2, #0
 800e944:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e952:	3354      	adds	r3, #84	; 0x54
 800e954:	2260      	movs	r2, #96	; 0x60
 800e956:	2100      	movs	r1, #0
 800e958:	4618      	mov	r0, r3
 800e95a:	f001 fa83 	bl	800fe64 <memset>
 800e95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e960:	4a0c      	ldr	r2, [pc, #48]	; (800e994 <prvInitialiseNewTask+0x140>)
 800e962:	659a      	str	r2, [r3, #88]	; 0x58
 800e964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e966:	4a0c      	ldr	r2, [pc, #48]	; (800e998 <prvInitialiseNewTask+0x144>)
 800e968:	65da      	str	r2, [r3, #92]	; 0x5c
 800e96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96c:	4a0b      	ldr	r2, [pc, #44]	; (800e99c <prvInitialiseNewTask+0x148>)
 800e96e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e970:	683a      	ldr	r2, [r7, #0]
 800e972:	68f9      	ldr	r1, [r7, #12]
 800e974:	69b8      	ldr	r0, [r7, #24]
 800e976:	f7fe ff8d 	bl	800d894 <pxPortInitialiseStack>
 800e97a:	4602      	mov	r2, r0
 800e97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	2b00      	cmp	r3, #0
 800e984:	d002      	beq.n	800e98c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e98a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e98c:	bf00      	nop
 800e98e:	3720      	adds	r7, #32
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	0801088c 	.word	0x0801088c
 800e998:	080108ac 	.word	0x080108ac
 800e99c:	0801086c 	.word	0x0801086c

0800e9a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e9a8:	f7ff f8a4 	bl	800daf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e9ac:	4b2d      	ldr	r3, [pc, #180]	; (800ea64 <prvAddNewTaskToReadyList+0xc4>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	4a2c      	ldr	r2, [pc, #176]	; (800ea64 <prvAddNewTaskToReadyList+0xc4>)
 800e9b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e9b6:	4b2c      	ldr	r3, [pc, #176]	; (800ea68 <prvAddNewTaskToReadyList+0xc8>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d109      	bne.n	800e9d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e9be:	4a2a      	ldr	r2, [pc, #168]	; (800ea68 <prvAddNewTaskToReadyList+0xc8>)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e9c4:	4b27      	ldr	r3, [pc, #156]	; (800ea64 <prvAddNewTaskToReadyList+0xc4>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d110      	bne.n	800e9ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e9cc:	f000 fc26 	bl	800f21c <prvInitialiseTaskLists>
 800e9d0:	e00d      	b.n	800e9ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e9d2:	4b26      	ldr	r3, [pc, #152]	; (800ea6c <prvAddNewTaskToReadyList+0xcc>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d109      	bne.n	800e9ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e9da:	4b23      	ldr	r3, [pc, #140]	; (800ea68 <prvAddNewTaskToReadyList+0xc8>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d802      	bhi.n	800e9ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e9e8:	4a1f      	ldr	r2, [pc, #124]	; (800ea68 <prvAddNewTaskToReadyList+0xc8>)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e9ee:	4b20      	ldr	r3, [pc, #128]	; (800ea70 <prvAddNewTaskToReadyList+0xd0>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	4a1e      	ldr	r2, [pc, #120]	; (800ea70 <prvAddNewTaskToReadyList+0xd0>)
 800e9f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e9f8:	4b1d      	ldr	r3, [pc, #116]	; (800ea70 <prvAddNewTaskToReadyList+0xd0>)
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea04:	4b1b      	ldr	r3, [pc, #108]	; (800ea74 <prvAddNewTaskToReadyList+0xd4>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d903      	bls.n	800ea14 <prvAddNewTaskToReadyList+0x74>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea10:	4a18      	ldr	r2, [pc, #96]	; (800ea74 <prvAddNewTaskToReadyList+0xd4>)
 800ea12:	6013      	str	r3, [r2, #0]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea18:	4613      	mov	r3, r2
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	4413      	add	r3, r2
 800ea1e:	009b      	lsls	r3, r3, #2
 800ea20:	4a15      	ldr	r2, [pc, #84]	; (800ea78 <prvAddNewTaskToReadyList+0xd8>)
 800ea22:	441a      	add	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	3304      	adds	r3, #4
 800ea28:	4619      	mov	r1, r3
 800ea2a:	4610      	mov	r0, r2
 800ea2c:	f7fe feab 	bl	800d786 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ea30:	f7ff f890 	bl	800db54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ea34:	4b0d      	ldr	r3, [pc, #52]	; (800ea6c <prvAddNewTaskToReadyList+0xcc>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d00e      	beq.n	800ea5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ea3c:	4b0a      	ldr	r3, [pc, #40]	; (800ea68 <prvAddNewTaskToReadyList+0xc8>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d207      	bcs.n	800ea5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ea4a:	4b0c      	ldr	r3, [pc, #48]	; (800ea7c <prvAddNewTaskToReadyList+0xdc>)
 800ea4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea50:	601a      	str	r2, [r3, #0]
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea5a:	bf00      	nop
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	20005214 	.word	0x20005214
 800ea68:	20004d40 	.word	0x20004d40
 800ea6c:	20005220 	.word	0x20005220
 800ea70:	20005230 	.word	0x20005230
 800ea74:	2000521c 	.word	0x2000521c
 800ea78:	20004d44 	.word	0x20004d44
 800ea7c:	e000ed04 	.word	0xe000ed04

0800ea80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d017      	beq.n	800eac2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ea92:	4b13      	ldr	r3, [pc, #76]	; (800eae0 <vTaskDelay+0x60>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00a      	beq.n	800eab0 <vTaskDelay+0x30>
	__asm volatile
 800ea9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9e:	f383 8811 	msr	BASEPRI, r3
 800eaa2:	f3bf 8f6f 	isb	sy
 800eaa6:	f3bf 8f4f 	dsb	sy
 800eaaa:	60bb      	str	r3, [r7, #8]
}
 800eaac:	bf00      	nop
 800eaae:	e7fe      	b.n	800eaae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eab0:	f000 f88a 	bl	800ebc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eab4:	2100      	movs	r1, #0
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fcfe 	bl	800f4b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eabc:	f000 f892 	bl	800ebe4 <xTaskResumeAll>
 800eac0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d107      	bne.n	800ead8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eac8:	4b06      	ldr	r3, [pc, #24]	; (800eae4 <vTaskDelay+0x64>)
 800eaca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eace:	601a      	str	r2, [r3, #0]
 800ead0:	f3bf 8f4f 	dsb	sy
 800ead4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ead8:	bf00      	nop
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	2000523c 	.word	0x2000523c
 800eae4:	e000ed04 	.word	0xe000ed04

0800eae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b08a      	sub	sp, #40	; 0x28
 800eaec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eaf6:	463a      	mov	r2, r7
 800eaf8:	1d39      	adds	r1, r7, #4
 800eafa:	f107 0308 	add.w	r3, r7, #8
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fe fbf6 	bl	800d2f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eb04:	6839      	ldr	r1, [r7, #0]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	9202      	str	r2, [sp, #8]
 800eb0c:	9301      	str	r3, [sp, #4]
 800eb0e:	2300      	movs	r3, #0
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	2300      	movs	r3, #0
 800eb14:	460a      	mov	r2, r1
 800eb16:	4924      	ldr	r1, [pc, #144]	; (800eba8 <vTaskStartScheduler+0xc0>)
 800eb18:	4824      	ldr	r0, [pc, #144]	; (800ebac <vTaskStartScheduler+0xc4>)
 800eb1a:	f7ff fdf9 	bl	800e710 <xTaskCreateStatic>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	4a23      	ldr	r2, [pc, #140]	; (800ebb0 <vTaskStartScheduler+0xc8>)
 800eb22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eb24:	4b22      	ldr	r3, [pc, #136]	; (800ebb0 <vTaskStartScheduler+0xc8>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	617b      	str	r3, [r7, #20]
 800eb30:	e001      	b.n	800eb36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800eb32:	2300      	movs	r3, #0
 800eb34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d102      	bne.n	800eb42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800eb3c:	f000 fd10 	bl	800f560 <xTimerCreateTimerTask>
 800eb40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d11b      	bne.n	800eb80 <vTaskStartScheduler+0x98>
	__asm volatile
 800eb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4c:	f383 8811 	msr	BASEPRI, r3
 800eb50:	f3bf 8f6f 	isb	sy
 800eb54:	f3bf 8f4f 	dsb	sy
 800eb58:	613b      	str	r3, [r7, #16]
}
 800eb5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eb5c:	4b15      	ldr	r3, [pc, #84]	; (800ebb4 <vTaskStartScheduler+0xcc>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	3354      	adds	r3, #84	; 0x54
 800eb62:	4a15      	ldr	r2, [pc, #84]	; (800ebb8 <vTaskStartScheduler+0xd0>)
 800eb64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eb66:	4b15      	ldr	r3, [pc, #84]	; (800ebbc <vTaskStartScheduler+0xd4>)
 800eb68:	f04f 32ff 	mov.w	r2, #4294967295
 800eb6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800eb6e:	4b14      	ldr	r3, [pc, #80]	; (800ebc0 <vTaskStartScheduler+0xd8>)
 800eb70:	2201      	movs	r2, #1
 800eb72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eb74:	4b13      	ldr	r3, [pc, #76]	; (800ebc4 <vTaskStartScheduler+0xdc>)
 800eb76:	2200      	movs	r2, #0
 800eb78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eb7a:	f7fe ff19 	bl	800d9b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eb7e:	e00e      	b.n	800eb9e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb86:	d10a      	bne.n	800eb9e <vTaskStartScheduler+0xb6>
	__asm volatile
 800eb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f3bf 8f6f 	isb	sy
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	60fb      	str	r3, [r7, #12]
}
 800eb9a:	bf00      	nop
 800eb9c:	e7fe      	b.n	800eb9c <vTaskStartScheduler+0xb4>
}
 800eb9e:	bf00      	nop
 800eba0:	3718      	adds	r7, #24
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	0801078c 	.word	0x0801078c
 800ebac:	0800f1ed 	.word	0x0800f1ed
 800ebb0:	20005238 	.word	0x20005238
 800ebb4:	20004d40 	.word	0x20004d40
 800ebb8:	20000014 	.word	0x20000014
 800ebbc:	20005234 	.word	0x20005234
 800ebc0:	20005220 	.word	0x20005220
 800ebc4:	20005218 	.word	0x20005218

0800ebc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ebc8:	b480      	push	{r7}
 800ebca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ebcc:	4b04      	ldr	r3, [pc, #16]	; (800ebe0 <vTaskSuspendAll+0x18>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	4a03      	ldr	r2, [pc, #12]	; (800ebe0 <vTaskSuspendAll+0x18>)
 800ebd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ebd6:	bf00      	nop
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr
 800ebe0:	2000523c 	.word	0x2000523c

0800ebe4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ebea:	2300      	movs	r3, #0
 800ebec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ebf2:	4b42      	ldr	r3, [pc, #264]	; (800ecfc <xTaskResumeAll+0x118>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d10a      	bne.n	800ec10 <xTaskResumeAll+0x2c>
	__asm volatile
 800ebfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfe:	f383 8811 	msr	BASEPRI, r3
 800ec02:	f3bf 8f6f 	isb	sy
 800ec06:	f3bf 8f4f 	dsb	sy
 800ec0a:	603b      	str	r3, [r7, #0]
}
 800ec0c:	bf00      	nop
 800ec0e:	e7fe      	b.n	800ec0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ec10:	f7fe ff70 	bl	800daf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ec14:	4b39      	ldr	r3, [pc, #228]	; (800ecfc <xTaskResumeAll+0x118>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	4a38      	ldr	r2, [pc, #224]	; (800ecfc <xTaskResumeAll+0x118>)
 800ec1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec1e:	4b37      	ldr	r3, [pc, #220]	; (800ecfc <xTaskResumeAll+0x118>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d162      	bne.n	800ecec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ec26:	4b36      	ldr	r3, [pc, #216]	; (800ed00 <xTaskResumeAll+0x11c>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d05e      	beq.n	800ecec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec2e:	e02f      	b.n	800ec90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec30:	4b34      	ldr	r3, [pc, #208]	; (800ed04 <xTaskResumeAll+0x120>)
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	3318      	adds	r3, #24
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7fe fdff 	bl	800d840 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3304      	adds	r3, #4
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fe fdfa 	bl	800d840 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec50:	4b2d      	ldr	r3, [pc, #180]	; (800ed08 <xTaskResumeAll+0x124>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d903      	bls.n	800ec60 <xTaskResumeAll+0x7c>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5c:	4a2a      	ldr	r2, [pc, #168]	; (800ed08 <xTaskResumeAll+0x124>)
 800ec5e:	6013      	str	r3, [r2, #0]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec64:	4613      	mov	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	4a27      	ldr	r2, [pc, #156]	; (800ed0c <xTaskResumeAll+0x128>)
 800ec6e:	441a      	add	r2, r3
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	3304      	adds	r3, #4
 800ec74:	4619      	mov	r1, r3
 800ec76:	4610      	mov	r0, r2
 800ec78:	f7fe fd85 	bl	800d786 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec80:	4b23      	ldr	r3, [pc, #140]	; (800ed10 <xTaskResumeAll+0x12c>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d302      	bcc.n	800ec90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ec8a:	4b22      	ldr	r3, [pc, #136]	; (800ed14 <xTaskResumeAll+0x130>)
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec90:	4b1c      	ldr	r3, [pc, #112]	; (800ed04 <xTaskResumeAll+0x120>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d1cb      	bne.n	800ec30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d001      	beq.n	800eca2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ec9e:	f000 fb5f 	bl	800f360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eca2:	4b1d      	ldr	r3, [pc, #116]	; (800ed18 <xTaskResumeAll+0x134>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d010      	beq.n	800ecd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ecae:	f000 f847 	bl	800ed40 <xTaskIncrementTick>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d002      	beq.n	800ecbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ecb8:	4b16      	ldr	r3, [pc, #88]	; (800ed14 <xTaskResumeAll+0x130>)
 800ecba:	2201      	movs	r2, #1
 800ecbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d1f1      	bne.n	800ecae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ecca:	4b13      	ldr	r3, [pc, #76]	; (800ed18 <xTaskResumeAll+0x134>)
 800eccc:	2200      	movs	r2, #0
 800ecce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ecd0:	4b10      	ldr	r3, [pc, #64]	; (800ed14 <xTaskResumeAll+0x130>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d009      	beq.n	800ecec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ecdc:	4b0f      	ldr	r3, [pc, #60]	; (800ed1c <xTaskResumeAll+0x138>)
 800ecde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ece2:	601a      	str	r2, [r3, #0]
 800ece4:	f3bf 8f4f 	dsb	sy
 800ece8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ecec:	f7fe ff32 	bl	800db54 <vPortExitCritical>

	return xAlreadyYielded;
 800ecf0:	68bb      	ldr	r3, [r7, #8]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	2000523c 	.word	0x2000523c
 800ed00:	20005214 	.word	0x20005214
 800ed04:	200051d4 	.word	0x200051d4
 800ed08:	2000521c 	.word	0x2000521c
 800ed0c:	20004d44 	.word	0x20004d44
 800ed10:	20004d40 	.word	0x20004d40
 800ed14:	20005228 	.word	0x20005228
 800ed18:	20005224 	.word	0x20005224
 800ed1c:	e000ed04 	.word	0xe000ed04

0800ed20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ed26:	4b05      	ldr	r3, [pc, #20]	; (800ed3c <xTaskGetTickCount+0x1c>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ed2c:	687b      	ldr	r3, [r7, #4]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	370c      	adds	r7, #12
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	20005218 	.word	0x20005218

0800ed40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ed46:	2300      	movs	r3, #0
 800ed48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed4a:	4b4f      	ldr	r3, [pc, #316]	; (800ee88 <xTaskIncrementTick+0x148>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	f040 808f 	bne.w	800ee72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ed54:	4b4d      	ldr	r3, [pc, #308]	; (800ee8c <xTaskIncrementTick+0x14c>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ed5c:	4a4b      	ldr	r2, [pc, #300]	; (800ee8c <xTaskIncrementTick+0x14c>)
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d120      	bne.n	800edaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ed68:	4b49      	ldr	r3, [pc, #292]	; (800ee90 <xTaskIncrementTick+0x150>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00a      	beq.n	800ed88 <xTaskIncrementTick+0x48>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	603b      	str	r3, [r7, #0]
}
 800ed84:	bf00      	nop
 800ed86:	e7fe      	b.n	800ed86 <xTaskIncrementTick+0x46>
 800ed88:	4b41      	ldr	r3, [pc, #260]	; (800ee90 <xTaskIncrementTick+0x150>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	60fb      	str	r3, [r7, #12]
 800ed8e:	4b41      	ldr	r3, [pc, #260]	; (800ee94 <xTaskIncrementTick+0x154>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4a3f      	ldr	r2, [pc, #252]	; (800ee90 <xTaskIncrementTick+0x150>)
 800ed94:	6013      	str	r3, [r2, #0]
 800ed96:	4a3f      	ldr	r2, [pc, #252]	; (800ee94 <xTaskIncrementTick+0x154>)
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6013      	str	r3, [r2, #0]
 800ed9c:	4b3e      	ldr	r3, [pc, #248]	; (800ee98 <xTaskIncrementTick+0x158>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	3301      	adds	r3, #1
 800eda2:	4a3d      	ldr	r2, [pc, #244]	; (800ee98 <xTaskIncrementTick+0x158>)
 800eda4:	6013      	str	r3, [r2, #0]
 800eda6:	f000 fadb 	bl	800f360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800edaa:	4b3c      	ldr	r3, [pc, #240]	; (800ee9c <xTaskIncrementTick+0x15c>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	693a      	ldr	r2, [r7, #16]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d349      	bcc.n	800ee48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edb4:	4b36      	ldr	r3, [pc, #216]	; (800ee90 <xTaskIncrementTick+0x150>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d104      	bne.n	800edc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edbe:	4b37      	ldr	r3, [pc, #220]	; (800ee9c <xTaskIncrementTick+0x15c>)
 800edc0:	f04f 32ff 	mov.w	r2, #4294967295
 800edc4:	601a      	str	r2, [r3, #0]
					break;
 800edc6:	e03f      	b.n	800ee48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edc8:	4b31      	ldr	r3, [pc, #196]	; (800ee90 <xTaskIncrementTick+0x150>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800edd8:	693a      	ldr	r2, [r7, #16]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d203      	bcs.n	800ede8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ede0:	4a2e      	ldr	r2, [pc, #184]	; (800ee9c <xTaskIncrementTick+0x15c>)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ede6:	e02f      	b.n	800ee48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	3304      	adds	r3, #4
 800edec:	4618      	mov	r0, r3
 800edee:	f7fe fd27 	bl	800d840 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d004      	beq.n	800ee04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	3318      	adds	r3, #24
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fe fd1e 	bl	800d840 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee08:	4b25      	ldr	r3, [pc, #148]	; (800eea0 <xTaskIncrementTick+0x160>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d903      	bls.n	800ee18 <xTaskIncrementTick+0xd8>
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee14:	4a22      	ldr	r2, [pc, #136]	; (800eea0 <xTaskIncrementTick+0x160>)
 800ee16:	6013      	str	r3, [r2, #0]
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	4a1f      	ldr	r2, [pc, #124]	; (800eea4 <xTaskIncrementTick+0x164>)
 800ee26:	441a      	add	r2, r3
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	3304      	adds	r3, #4
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	4610      	mov	r0, r2
 800ee30:	f7fe fca9 	bl	800d786 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee38:	4b1b      	ldr	r3, [pc, #108]	; (800eea8 <xTaskIncrementTick+0x168>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d3b8      	bcc.n	800edb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ee42:	2301      	movs	r3, #1
 800ee44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee46:	e7b5      	b.n	800edb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ee48:	4b17      	ldr	r3, [pc, #92]	; (800eea8 <xTaskIncrementTick+0x168>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee4e:	4915      	ldr	r1, [pc, #84]	; (800eea4 <xTaskIncrementTick+0x164>)
 800ee50:	4613      	mov	r3, r2
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	4413      	add	r3, r2
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	440b      	add	r3, r1
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d901      	bls.n	800ee64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ee60:	2301      	movs	r3, #1
 800ee62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ee64:	4b11      	ldr	r3, [pc, #68]	; (800eeac <xTaskIncrementTick+0x16c>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d007      	beq.n	800ee7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	617b      	str	r3, [r7, #20]
 800ee70:	e004      	b.n	800ee7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ee72:	4b0f      	ldr	r3, [pc, #60]	; (800eeb0 <xTaskIncrementTick+0x170>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	3301      	adds	r3, #1
 800ee78:	4a0d      	ldr	r2, [pc, #52]	; (800eeb0 <xTaskIncrementTick+0x170>)
 800ee7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ee7c:	697b      	ldr	r3, [r7, #20]
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3718      	adds	r7, #24
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	2000523c 	.word	0x2000523c
 800ee8c:	20005218 	.word	0x20005218
 800ee90:	200051cc 	.word	0x200051cc
 800ee94:	200051d0 	.word	0x200051d0
 800ee98:	2000522c 	.word	0x2000522c
 800ee9c:	20005234 	.word	0x20005234
 800eea0:	2000521c 	.word	0x2000521c
 800eea4:	20004d44 	.word	0x20004d44
 800eea8:	20004d40 	.word	0x20004d40
 800eeac:	20005228 	.word	0x20005228
 800eeb0:	20005224 	.word	0x20005224

0800eeb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b085      	sub	sp, #20
 800eeb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eeba:	4b2a      	ldr	r3, [pc, #168]	; (800ef64 <vTaskSwitchContext+0xb0>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d003      	beq.n	800eeca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eec2:	4b29      	ldr	r3, [pc, #164]	; (800ef68 <vTaskSwitchContext+0xb4>)
 800eec4:	2201      	movs	r2, #1
 800eec6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eec8:	e046      	b.n	800ef58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800eeca:	4b27      	ldr	r3, [pc, #156]	; (800ef68 <vTaskSwitchContext+0xb4>)
 800eecc:	2200      	movs	r2, #0
 800eece:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eed0:	4b26      	ldr	r3, [pc, #152]	; (800ef6c <vTaskSwitchContext+0xb8>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	60fb      	str	r3, [r7, #12]
 800eed6:	e010      	b.n	800eefa <vTaskSwitchContext+0x46>
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d10a      	bne.n	800eef4 <vTaskSwitchContext+0x40>
	__asm volatile
 800eede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee2:	f383 8811 	msr	BASEPRI, r3
 800eee6:	f3bf 8f6f 	isb	sy
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	607b      	str	r3, [r7, #4]
}
 800eef0:	bf00      	nop
 800eef2:	e7fe      	b.n	800eef2 <vTaskSwitchContext+0x3e>
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	3b01      	subs	r3, #1
 800eef8:	60fb      	str	r3, [r7, #12]
 800eefa:	491d      	ldr	r1, [pc, #116]	; (800ef70 <vTaskSwitchContext+0xbc>)
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	4613      	mov	r3, r2
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	4413      	add	r3, r2
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	440b      	add	r3, r1
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d0e4      	beq.n	800eed8 <vTaskSwitchContext+0x24>
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	4613      	mov	r3, r2
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	4413      	add	r3, r2
 800ef16:	009b      	lsls	r3, r3, #2
 800ef18:	4a15      	ldr	r2, [pc, #84]	; (800ef70 <vTaskSwitchContext+0xbc>)
 800ef1a:	4413      	add	r3, r2
 800ef1c:	60bb      	str	r3, [r7, #8]
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	685a      	ldr	r2, [r3, #4]
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	605a      	str	r2, [r3, #4]
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	3308      	adds	r3, #8
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d104      	bne.n	800ef3e <vTaskSwitchContext+0x8a>
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	685b      	ldr	r3, [r3, #4]
 800ef38:	685a      	ldr	r2, [r3, #4]
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	605a      	str	r2, [r3, #4]
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	4a0b      	ldr	r2, [pc, #44]	; (800ef74 <vTaskSwitchContext+0xc0>)
 800ef46:	6013      	str	r3, [r2, #0]
 800ef48:	4a08      	ldr	r2, [pc, #32]	; (800ef6c <vTaskSwitchContext+0xb8>)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ef4e:	4b09      	ldr	r3, [pc, #36]	; (800ef74 <vTaskSwitchContext+0xc0>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	3354      	adds	r3, #84	; 0x54
 800ef54:	4a08      	ldr	r2, [pc, #32]	; (800ef78 <vTaskSwitchContext+0xc4>)
 800ef56:	6013      	str	r3, [r2, #0]
}
 800ef58:	bf00      	nop
 800ef5a:	3714      	adds	r7, #20
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr
 800ef64:	2000523c 	.word	0x2000523c
 800ef68:	20005228 	.word	0x20005228
 800ef6c:	2000521c 	.word	0x2000521c
 800ef70:	20004d44 	.word	0x20004d44
 800ef74:	20004d40 	.word	0x20004d40
 800ef78:	20000014 	.word	0x20000014

0800ef7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10a      	bne.n	800efa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	60fb      	str	r3, [r7, #12]
}
 800ef9e:	bf00      	nop
 800efa0:	e7fe      	b.n	800efa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800efa2:	4b07      	ldr	r3, [pc, #28]	; (800efc0 <vTaskPlaceOnEventList+0x44>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	3318      	adds	r3, #24
 800efa8:	4619      	mov	r1, r3
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7fe fc0f 	bl	800d7ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800efb0:	2101      	movs	r1, #1
 800efb2:	6838      	ldr	r0, [r7, #0]
 800efb4:	f000 fa80 	bl	800f4b8 <prvAddCurrentTaskToDelayedList>
}
 800efb8:	bf00      	nop
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20004d40 	.word	0x20004d40

0800efc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d10a      	bne.n	800efec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800efd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efda:	f383 8811 	msr	BASEPRI, r3
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	f3bf 8f4f 	dsb	sy
 800efe6:	617b      	str	r3, [r7, #20]
}
 800efe8:	bf00      	nop
 800efea:	e7fe      	b.n	800efea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800efec:	4b0a      	ldr	r3, [pc, #40]	; (800f018 <vTaskPlaceOnEventListRestricted+0x54>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	3318      	adds	r3, #24
 800eff2:	4619      	mov	r1, r3
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f7fe fbc6 	bl	800d786 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d002      	beq.n	800f006 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f000:	f04f 33ff 	mov.w	r3, #4294967295
 800f004:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f006:	6879      	ldr	r1, [r7, #4]
 800f008:	68b8      	ldr	r0, [r7, #8]
 800f00a:	f000 fa55 	bl	800f4b8 <prvAddCurrentTaskToDelayedList>
	}
 800f00e:	bf00      	nop
 800f010:	3718      	adds	r7, #24
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	20004d40 	.word	0x20004d40

0800f01c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10a      	bne.n	800f048 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f036:	f383 8811 	msr	BASEPRI, r3
 800f03a:	f3bf 8f6f 	isb	sy
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	60fb      	str	r3, [r7, #12]
}
 800f044:	bf00      	nop
 800f046:	e7fe      	b.n	800f046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	3318      	adds	r3, #24
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fe fbf7 	bl	800d840 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f052:	4b1e      	ldr	r3, [pc, #120]	; (800f0cc <xTaskRemoveFromEventList+0xb0>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d11d      	bne.n	800f096 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	3304      	adds	r3, #4
 800f05e:	4618      	mov	r0, r3
 800f060:	f7fe fbee 	bl	800d840 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f068:	4b19      	ldr	r3, [pc, #100]	; (800f0d0 <xTaskRemoveFromEventList+0xb4>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d903      	bls.n	800f078 <xTaskRemoveFromEventList+0x5c>
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f074:	4a16      	ldr	r2, [pc, #88]	; (800f0d0 <xTaskRemoveFromEventList+0xb4>)
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f07c:	4613      	mov	r3, r2
 800f07e:	009b      	lsls	r3, r3, #2
 800f080:	4413      	add	r3, r2
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	4a13      	ldr	r2, [pc, #76]	; (800f0d4 <xTaskRemoveFromEventList+0xb8>)
 800f086:	441a      	add	r2, r3
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	3304      	adds	r3, #4
 800f08c:	4619      	mov	r1, r3
 800f08e:	4610      	mov	r0, r2
 800f090:	f7fe fb79 	bl	800d786 <vListInsertEnd>
 800f094:	e005      	b.n	800f0a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	3318      	adds	r3, #24
 800f09a:	4619      	mov	r1, r3
 800f09c:	480e      	ldr	r0, [pc, #56]	; (800f0d8 <xTaskRemoveFromEventList+0xbc>)
 800f09e:	f7fe fb72 	bl	800d786 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0a6:	4b0d      	ldr	r3, [pc, #52]	; (800f0dc <xTaskRemoveFromEventList+0xc0>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d905      	bls.n	800f0bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f0b4:	4b0a      	ldr	r3, [pc, #40]	; (800f0e0 <xTaskRemoveFromEventList+0xc4>)
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	601a      	str	r2, [r3, #0]
 800f0ba:	e001      	b.n	800f0c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f0c0:	697b      	ldr	r3, [r7, #20]
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3718      	adds	r7, #24
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	2000523c 	.word	0x2000523c
 800f0d0:	2000521c 	.word	0x2000521c
 800f0d4:	20004d44 	.word	0x20004d44
 800f0d8:	200051d4 	.word	0x200051d4
 800f0dc:	20004d40 	.word	0x20004d40
 800f0e0:	20005228 	.word	0x20005228

0800f0e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f0ec:	4b06      	ldr	r3, [pc, #24]	; (800f108 <vTaskInternalSetTimeOutState+0x24>)
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f0f4:	4b05      	ldr	r3, [pc, #20]	; (800f10c <vTaskInternalSetTimeOutState+0x28>)
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	605a      	str	r2, [r3, #4]
}
 800f0fc:	bf00      	nop
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr
 800f108:	2000522c 	.word	0x2000522c
 800f10c:	20005218 	.word	0x20005218

0800f110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b088      	sub	sp, #32
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d10a      	bne.n	800f136 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	613b      	str	r3, [r7, #16]
}
 800f132:	bf00      	nop
 800f134:	e7fe      	b.n	800f134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10a      	bne.n	800f152 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f140:	f383 8811 	msr	BASEPRI, r3
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	60fb      	str	r3, [r7, #12]
}
 800f14e:	bf00      	nop
 800f150:	e7fe      	b.n	800f150 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f152:	f7fe fccf 	bl	800daf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f156:	4b1d      	ldr	r3, [pc, #116]	; (800f1cc <xTaskCheckForTimeOut+0xbc>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	69ba      	ldr	r2, [r7, #24]
 800f162:	1ad3      	subs	r3, r2, r3
 800f164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f16e:	d102      	bne.n	800f176 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f170:	2300      	movs	r3, #0
 800f172:	61fb      	str	r3, [r7, #28]
 800f174:	e023      	b.n	800f1be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	4b15      	ldr	r3, [pc, #84]	; (800f1d0 <xTaskCheckForTimeOut+0xc0>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d007      	beq.n	800f192 <xTaskCheckForTimeOut+0x82>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	69ba      	ldr	r2, [r7, #24]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d302      	bcc.n	800f192 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f18c:	2301      	movs	r3, #1
 800f18e:	61fb      	str	r3, [r7, #28]
 800f190:	e015      	b.n	800f1be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	697a      	ldr	r2, [r7, #20]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d20b      	bcs.n	800f1b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	1ad2      	subs	r2, r2, r3
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f7ff ff9b 	bl	800f0e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	61fb      	str	r3, [r7, #28]
 800f1b2:	e004      	b.n	800f1be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f1be:	f7fe fcc9 	bl	800db54 <vPortExitCritical>

	return xReturn;
 800f1c2:	69fb      	ldr	r3, [r7, #28]
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3720      	adds	r7, #32
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	20005218 	.word	0x20005218
 800f1d0:	2000522c 	.word	0x2000522c

0800f1d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f1d8:	4b03      	ldr	r3, [pc, #12]	; (800f1e8 <vTaskMissedYield+0x14>)
 800f1da:	2201      	movs	r2, #1
 800f1dc:	601a      	str	r2, [r3, #0]
}
 800f1de:	bf00      	nop
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr
 800f1e8:	20005228 	.word	0x20005228

0800f1ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f1f4:	f000 f852 	bl	800f29c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f1f8:	4b06      	ldr	r3, [pc, #24]	; (800f214 <prvIdleTask+0x28>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d9f9      	bls.n	800f1f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f200:	4b05      	ldr	r3, [pc, #20]	; (800f218 <prvIdleTask+0x2c>)
 800f202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f206:	601a      	str	r2, [r3, #0]
 800f208:	f3bf 8f4f 	dsb	sy
 800f20c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f210:	e7f0      	b.n	800f1f4 <prvIdleTask+0x8>
 800f212:	bf00      	nop
 800f214:	20004d44 	.word	0x20004d44
 800f218:	e000ed04 	.word	0xe000ed04

0800f21c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f222:	2300      	movs	r3, #0
 800f224:	607b      	str	r3, [r7, #4]
 800f226:	e00c      	b.n	800f242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	4613      	mov	r3, r2
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	4413      	add	r3, r2
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	4a12      	ldr	r2, [pc, #72]	; (800f27c <prvInitialiseTaskLists+0x60>)
 800f234:	4413      	add	r3, r2
 800f236:	4618      	mov	r0, r3
 800f238:	f7fe fa78 	bl	800d72c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	3301      	adds	r3, #1
 800f240:	607b      	str	r3, [r7, #4]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2b37      	cmp	r3, #55	; 0x37
 800f246:	d9ef      	bls.n	800f228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f248:	480d      	ldr	r0, [pc, #52]	; (800f280 <prvInitialiseTaskLists+0x64>)
 800f24a:	f7fe fa6f 	bl	800d72c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f24e:	480d      	ldr	r0, [pc, #52]	; (800f284 <prvInitialiseTaskLists+0x68>)
 800f250:	f7fe fa6c 	bl	800d72c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f254:	480c      	ldr	r0, [pc, #48]	; (800f288 <prvInitialiseTaskLists+0x6c>)
 800f256:	f7fe fa69 	bl	800d72c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f25a:	480c      	ldr	r0, [pc, #48]	; (800f28c <prvInitialiseTaskLists+0x70>)
 800f25c:	f7fe fa66 	bl	800d72c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f260:	480b      	ldr	r0, [pc, #44]	; (800f290 <prvInitialiseTaskLists+0x74>)
 800f262:	f7fe fa63 	bl	800d72c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f266:	4b0b      	ldr	r3, [pc, #44]	; (800f294 <prvInitialiseTaskLists+0x78>)
 800f268:	4a05      	ldr	r2, [pc, #20]	; (800f280 <prvInitialiseTaskLists+0x64>)
 800f26a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f26c:	4b0a      	ldr	r3, [pc, #40]	; (800f298 <prvInitialiseTaskLists+0x7c>)
 800f26e:	4a05      	ldr	r2, [pc, #20]	; (800f284 <prvInitialiseTaskLists+0x68>)
 800f270:	601a      	str	r2, [r3, #0]
}
 800f272:	bf00      	nop
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	20004d44 	.word	0x20004d44
 800f280:	200051a4 	.word	0x200051a4
 800f284:	200051b8 	.word	0x200051b8
 800f288:	200051d4 	.word	0x200051d4
 800f28c:	200051e8 	.word	0x200051e8
 800f290:	20005200 	.word	0x20005200
 800f294:	200051cc 	.word	0x200051cc
 800f298:	200051d0 	.word	0x200051d0

0800f29c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f2a2:	e019      	b.n	800f2d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f2a4:	f7fe fc26 	bl	800daf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2a8:	4b10      	ldr	r3, [pc, #64]	; (800f2ec <prvCheckTasksWaitingTermination+0x50>)
 800f2aa:	68db      	ldr	r3, [r3, #12]
 800f2ac:	68db      	ldr	r3, [r3, #12]
 800f2ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	3304      	adds	r3, #4
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7fe fac3 	bl	800d840 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f2ba:	4b0d      	ldr	r3, [pc, #52]	; (800f2f0 <prvCheckTasksWaitingTermination+0x54>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	3b01      	subs	r3, #1
 800f2c0:	4a0b      	ldr	r2, [pc, #44]	; (800f2f0 <prvCheckTasksWaitingTermination+0x54>)
 800f2c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f2c4:	4b0b      	ldr	r3, [pc, #44]	; (800f2f4 <prvCheckTasksWaitingTermination+0x58>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	4a0a      	ldr	r2, [pc, #40]	; (800f2f4 <prvCheckTasksWaitingTermination+0x58>)
 800f2cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f2ce:	f7fe fc41 	bl	800db54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f810 	bl	800f2f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f2d8:	4b06      	ldr	r3, [pc, #24]	; (800f2f4 <prvCheckTasksWaitingTermination+0x58>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1e1      	bne.n	800f2a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f2e0:	bf00      	nop
 800f2e2:	bf00      	nop
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	200051e8 	.word	0x200051e8
 800f2f0:	20005214 	.word	0x20005214
 800f2f4:	200051fc 	.word	0x200051fc

0800f2f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	3354      	adds	r3, #84	; 0x54
 800f304:	4618      	mov	r0, r3
 800f306:	f000 fe0f 	bl	800ff28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f310:	2b00      	cmp	r3, #0
 800f312:	d108      	bne.n	800f326 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fe f8e9 	bl	800d4f0 <vPortFree>
				vPortFree( pxTCB );
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f7fe f8e6 	bl	800d4f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f324:	e018      	b.n	800f358 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d103      	bne.n	800f338 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f7fe f8dd 	bl	800d4f0 <vPortFree>
	}
 800f336:	e00f      	b.n	800f358 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d00a      	beq.n	800f358 <prvDeleteTCB+0x60>
	__asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f346:	f383 8811 	msr	BASEPRI, r3
 800f34a:	f3bf 8f6f 	isb	sy
 800f34e:	f3bf 8f4f 	dsb	sy
 800f352:	60fb      	str	r3, [r7, #12]
}
 800f354:	bf00      	nop
 800f356:	e7fe      	b.n	800f356 <prvDeleteTCB+0x5e>
	}
 800f358:	bf00      	nop
 800f35a:	3710      	adds	r7, #16
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f360:	b480      	push	{r7}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f366:	4b0c      	ldr	r3, [pc, #48]	; (800f398 <prvResetNextTaskUnblockTime+0x38>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d104      	bne.n	800f37a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f370:	4b0a      	ldr	r3, [pc, #40]	; (800f39c <prvResetNextTaskUnblockTime+0x3c>)
 800f372:	f04f 32ff 	mov.w	r2, #4294967295
 800f376:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f378:	e008      	b.n	800f38c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f37a:	4b07      	ldr	r3, [pc, #28]	; (800f398 <prvResetNextTaskUnblockTime+0x38>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	4a04      	ldr	r2, [pc, #16]	; (800f39c <prvResetNextTaskUnblockTime+0x3c>)
 800f38a:	6013      	str	r3, [r2, #0]
}
 800f38c:	bf00      	nop
 800f38e:	370c      	adds	r7, #12
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr
 800f398:	200051cc 	.word	0x200051cc
 800f39c:	20005234 	.word	0x20005234

0800f3a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f3a6:	4b0b      	ldr	r3, [pc, #44]	; (800f3d4 <xTaskGetSchedulerState+0x34>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d102      	bne.n	800f3b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	607b      	str	r3, [r7, #4]
 800f3b2:	e008      	b.n	800f3c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3b4:	4b08      	ldr	r3, [pc, #32]	; (800f3d8 <xTaskGetSchedulerState+0x38>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d102      	bne.n	800f3c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f3bc:	2302      	movs	r3, #2
 800f3be:	607b      	str	r3, [r7, #4]
 800f3c0:	e001      	b.n	800f3c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f3c6:	687b      	ldr	r3, [r7, #4]
	}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr
 800f3d4:	20005220 	.word	0x20005220
 800f3d8:	2000523c 	.word	0x2000523c

0800f3dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d056      	beq.n	800f4a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f3f2:	4b2e      	ldr	r3, [pc, #184]	; (800f4ac <xTaskPriorityDisinherit+0xd0>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	693a      	ldr	r2, [r7, #16]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d00a      	beq.n	800f412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f400:	f383 8811 	msr	BASEPRI, r3
 800f404:	f3bf 8f6f 	isb	sy
 800f408:	f3bf 8f4f 	dsb	sy
 800f40c:	60fb      	str	r3, [r7, #12]
}
 800f40e:	bf00      	nop
 800f410:	e7fe      	b.n	800f410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f416:	2b00      	cmp	r3, #0
 800f418:	d10a      	bne.n	800f430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41e:	f383 8811 	msr	BASEPRI, r3
 800f422:	f3bf 8f6f 	isb	sy
 800f426:	f3bf 8f4f 	dsb	sy
 800f42a:	60bb      	str	r3, [r7, #8]
}
 800f42c:	bf00      	nop
 800f42e:	e7fe      	b.n	800f42e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f434:	1e5a      	subs	r2, r3, #1
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f442:	429a      	cmp	r2, r3
 800f444:	d02c      	beq.n	800f4a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d128      	bne.n	800f4a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	3304      	adds	r3, #4
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe f9f4 	bl	800d840 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f470:	4b0f      	ldr	r3, [pc, #60]	; (800f4b0 <xTaskPriorityDisinherit+0xd4>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	429a      	cmp	r2, r3
 800f476:	d903      	bls.n	800f480 <xTaskPriorityDisinherit+0xa4>
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f47c:	4a0c      	ldr	r2, [pc, #48]	; (800f4b0 <xTaskPriorityDisinherit+0xd4>)
 800f47e:	6013      	str	r3, [r2, #0]
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f484:	4613      	mov	r3, r2
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	4413      	add	r3, r2
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4a09      	ldr	r2, [pc, #36]	; (800f4b4 <xTaskPriorityDisinherit+0xd8>)
 800f48e:	441a      	add	r2, r3
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	3304      	adds	r3, #4
 800f494:	4619      	mov	r1, r3
 800f496:	4610      	mov	r0, r2
 800f498:	f7fe f975 	bl	800d786 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f49c:	2301      	movs	r3, #1
 800f49e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f4a0:	697b      	ldr	r3, [r7, #20]
	}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3718      	adds	r7, #24
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	20004d40 	.word	0x20004d40
 800f4b0:	2000521c 	.word	0x2000521c
 800f4b4:	20004d44 	.word	0x20004d44

0800f4b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f4c2:	4b21      	ldr	r3, [pc, #132]	; (800f548 <prvAddCurrentTaskToDelayedList+0x90>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4c8:	4b20      	ldr	r3, [pc, #128]	; (800f54c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	3304      	adds	r3, #4
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7fe f9b6 	bl	800d840 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4da:	d10a      	bne.n	800f4f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d007      	beq.n	800f4f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4e2:	4b1a      	ldr	r3, [pc, #104]	; (800f54c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	4819      	ldr	r0, [pc, #100]	; (800f550 <prvAddCurrentTaskToDelayedList+0x98>)
 800f4ec:	f7fe f94b 	bl	800d786 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f4f0:	e026      	b.n	800f540 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f4fa:	4b14      	ldr	r3, [pc, #80]	; (800f54c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	68ba      	ldr	r2, [r7, #8]
 800f500:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	429a      	cmp	r2, r3
 800f508:	d209      	bcs.n	800f51e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f50a:	4b12      	ldr	r3, [pc, #72]	; (800f554 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	4b0f      	ldr	r3, [pc, #60]	; (800f54c <prvAddCurrentTaskToDelayedList+0x94>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	3304      	adds	r3, #4
 800f514:	4619      	mov	r1, r3
 800f516:	4610      	mov	r0, r2
 800f518:	f7fe f959 	bl	800d7ce <vListInsert>
}
 800f51c:	e010      	b.n	800f540 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f51e:	4b0e      	ldr	r3, [pc, #56]	; (800f558 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	4b0a      	ldr	r3, [pc, #40]	; (800f54c <prvAddCurrentTaskToDelayedList+0x94>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	3304      	adds	r3, #4
 800f528:	4619      	mov	r1, r3
 800f52a:	4610      	mov	r0, r2
 800f52c:	f7fe f94f 	bl	800d7ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f530:	4b0a      	ldr	r3, [pc, #40]	; (800f55c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68ba      	ldr	r2, [r7, #8]
 800f536:	429a      	cmp	r2, r3
 800f538:	d202      	bcs.n	800f540 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f53a:	4a08      	ldr	r2, [pc, #32]	; (800f55c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	6013      	str	r3, [r2, #0]
}
 800f540:	bf00      	nop
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	20005218 	.word	0x20005218
 800f54c:	20004d40 	.word	0x20004d40
 800f550:	20005200 	.word	0x20005200
 800f554:	200051d0 	.word	0x200051d0
 800f558:	200051cc 	.word	0x200051cc
 800f55c:	20005234 	.word	0x20005234

0800f560 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b08a      	sub	sp, #40	; 0x28
 800f564:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f566:	2300      	movs	r3, #0
 800f568:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f56a:	f000 fbbf 	bl	800fcec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f56e:	4b1c      	ldr	r3, [pc, #112]	; (800f5e0 <xTimerCreateTimerTask+0x80>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d021      	beq.n	800f5ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f576:	2300      	movs	r3, #0
 800f578:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f57a:	2300      	movs	r3, #0
 800f57c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f57e:	1d3a      	adds	r2, r7, #4
 800f580:	f107 0108 	add.w	r1, r7, #8
 800f584:	f107 030c 	add.w	r3, r7, #12
 800f588:	4618      	mov	r0, r3
 800f58a:	f7fd fecb 	bl	800d324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f58e:	6879      	ldr	r1, [r7, #4]
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	9202      	str	r2, [sp, #8]
 800f596:	9301      	str	r3, [sp, #4]
 800f598:	2302      	movs	r3, #2
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	2300      	movs	r3, #0
 800f59e:	460a      	mov	r2, r1
 800f5a0:	4910      	ldr	r1, [pc, #64]	; (800f5e4 <xTimerCreateTimerTask+0x84>)
 800f5a2:	4811      	ldr	r0, [pc, #68]	; (800f5e8 <xTimerCreateTimerTask+0x88>)
 800f5a4:	f7ff f8b4 	bl	800e710 <xTaskCreateStatic>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	4a10      	ldr	r2, [pc, #64]	; (800f5ec <xTimerCreateTimerTask+0x8c>)
 800f5ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f5ae:	4b0f      	ldr	r3, [pc, #60]	; (800f5ec <xTimerCreateTimerTask+0x8c>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d001      	beq.n	800f5ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d10a      	bne.n	800f5d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	613b      	str	r3, [r7, #16]
}
 800f5d2:	bf00      	nop
 800f5d4:	e7fe      	b.n	800f5d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f5d6:	697b      	ldr	r3, [r7, #20]
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3718      	adds	r7, #24
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}
 800f5e0:	20005270 	.word	0x20005270
 800f5e4:	08010794 	.word	0x08010794
 800f5e8:	0800f895 	.word	0x0800f895
 800f5ec:	20005274 	.word	0x20005274

0800f5f0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b088      	sub	sp, #32
 800f5f4:	af02      	add	r7, sp, #8
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	607a      	str	r2, [r7, #4]
 800f5fc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f5fe:	202c      	movs	r0, #44	; 0x2c
 800f600:	f7fd feaa 	bl	800d358 <pvPortMalloc>
 800f604:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d00d      	beq.n	800f628 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	2200      	movs	r2, #0
 800f610:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	9301      	str	r3, [sp, #4]
 800f618:	6a3b      	ldr	r3, [r7, #32]
 800f61a:	9300      	str	r3, [sp, #0]
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	68b9      	ldr	r1, [r7, #8]
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	f000 f843 	bl	800f6ae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f628:	697b      	ldr	r3, [r7, #20]
	}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3718      	adds	r7, #24
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f632:	b580      	push	{r7, lr}
 800f634:	b08a      	sub	sp, #40	; 0x28
 800f636:	af02      	add	r7, sp, #8
 800f638:	60f8      	str	r0, [r7, #12]
 800f63a:	60b9      	str	r1, [r7, #8]
 800f63c:	607a      	str	r2, [r7, #4]
 800f63e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f640:	232c      	movs	r3, #44	; 0x2c
 800f642:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	2b2c      	cmp	r3, #44	; 0x2c
 800f648:	d00a      	beq.n	800f660 <xTimerCreateStatic+0x2e>
	__asm volatile
 800f64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64e:	f383 8811 	msr	BASEPRI, r3
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	f3bf 8f4f 	dsb	sy
 800f65a:	61bb      	str	r3, [r7, #24]
}
 800f65c:	bf00      	nop
 800f65e:	e7fe      	b.n	800f65e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f660:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f664:	2b00      	cmp	r3, #0
 800f666:	d10a      	bne.n	800f67e <xTimerCreateStatic+0x4c>
	__asm volatile
 800f668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66c:	f383 8811 	msr	BASEPRI, r3
 800f670:	f3bf 8f6f 	isb	sy
 800f674:	f3bf 8f4f 	dsb	sy
 800f678:	617b      	str	r3, [r7, #20]
}
 800f67a:	bf00      	nop
 800f67c:	e7fe      	b.n	800f67c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800f67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f680:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d00d      	beq.n	800f6a4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	2202      	movs	r2, #2
 800f68c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	9301      	str	r3, [sp, #4]
 800f694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	687a      	ldr	r2, [r7, #4]
 800f69c:	68b9      	ldr	r1, [r7, #8]
 800f69e:	68f8      	ldr	r0, [r7, #12]
 800f6a0:	f000 f805 	bl	800f6ae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f6a4:	69fb      	ldr	r3, [r7, #28]
	}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3720      	adds	r7, #32
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f6ae:	b580      	push	{r7, lr}
 800f6b0:	b086      	sub	sp, #24
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	60f8      	str	r0, [r7, #12]
 800f6b6:	60b9      	str	r1, [r7, #8]
 800f6b8:	607a      	str	r2, [r7, #4]
 800f6ba:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d10a      	bne.n	800f6d8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c6:	f383 8811 	msr	BASEPRI, r3
 800f6ca:	f3bf 8f6f 	isb	sy
 800f6ce:	f3bf 8f4f 	dsb	sy
 800f6d2:	617b      	str	r3, [r7, #20]
}
 800f6d4:	bf00      	nop
 800f6d6:	e7fe      	b.n	800f6d6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d01e      	beq.n	800f71c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f6de:	f000 fb05 	bl	800fcec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e4:	68fa      	ldr	r2, [r7, #12]
 800f6e6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ea:	68ba      	ldr	r2, [r7, #8]
 800f6ec:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f6:	6a3a      	ldr	r2, [r7, #32]
 800f6f8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fc:	3304      	adds	r3, #4
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe f834 	bl	800d76c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d008      	beq.n	800f71c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f710:	f043 0304 	orr.w	r3, r3, #4
 800f714:	b2da      	uxtb	r2, r3
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f71c:	bf00      	nop
 800f71e:	3718      	adds	r7, #24
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b08a      	sub	sp, #40	; 0x28
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
 800f730:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f732:	2300      	movs	r3, #0
 800f734:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d10a      	bne.n	800f752 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f740:	f383 8811 	msr	BASEPRI, r3
 800f744:	f3bf 8f6f 	isb	sy
 800f748:	f3bf 8f4f 	dsb	sy
 800f74c:	623b      	str	r3, [r7, #32]
}
 800f74e:	bf00      	nop
 800f750:	e7fe      	b.n	800f750 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f752:	4b1a      	ldr	r3, [pc, #104]	; (800f7bc <xTimerGenericCommand+0x98>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d02a      	beq.n	800f7b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2b05      	cmp	r3, #5
 800f76a:	dc18      	bgt.n	800f79e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f76c:	f7ff fe18 	bl	800f3a0 <xTaskGetSchedulerState>
 800f770:	4603      	mov	r3, r0
 800f772:	2b02      	cmp	r3, #2
 800f774:	d109      	bne.n	800f78a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f776:	4b11      	ldr	r3, [pc, #68]	; (800f7bc <xTimerGenericCommand+0x98>)
 800f778:	6818      	ldr	r0, [r3, #0]
 800f77a:	f107 0110 	add.w	r1, r7, #16
 800f77e:	2300      	movs	r3, #0
 800f780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f782:	f7fe fbdd 	bl	800df40 <xQueueGenericSend>
 800f786:	6278      	str	r0, [r7, #36]	; 0x24
 800f788:	e012      	b.n	800f7b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f78a:	4b0c      	ldr	r3, [pc, #48]	; (800f7bc <xTimerGenericCommand+0x98>)
 800f78c:	6818      	ldr	r0, [r3, #0]
 800f78e:	f107 0110 	add.w	r1, r7, #16
 800f792:	2300      	movs	r3, #0
 800f794:	2200      	movs	r2, #0
 800f796:	f7fe fbd3 	bl	800df40 <xQueueGenericSend>
 800f79a:	6278      	str	r0, [r7, #36]	; 0x24
 800f79c:	e008      	b.n	800f7b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f79e:	4b07      	ldr	r3, [pc, #28]	; (800f7bc <xTimerGenericCommand+0x98>)
 800f7a0:	6818      	ldr	r0, [r3, #0]
 800f7a2:	f107 0110 	add.w	r1, r7, #16
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	683a      	ldr	r2, [r7, #0]
 800f7aa:	f7fe fcc7 	bl	800e13c <xQueueGenericSendFromISR>
 800f7ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3728      	adds	r7, #40	; 0x28
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	20005270 	.word	0x20005270

0800f7c0 <xTimerGetExpiryTime>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b087      	sub	sp, #28
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
Timer_t * pxTimer =  xTimer;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	617b      	str	r3, [r7, #20]
TickType_t xReturn;

	configASSERT( xTimer );
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d10a      	bne.n	800f7e8 <xTimerGetExpiryTime+0x28>
	__asm volatile
 800f7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d6:	f383 8811 	msr	BASEPRI, r3
 800f7da:	f3bf 8f6f 	isb	sy
 800f7de:	f3bf 8f4f 	dsb	sy
 800f7e2:	60fb      	str	r3, [r7, #12]
}
 800f7e4:	bf00      	nop
 800f7e6:	e7fe      	b.n	800f7e6 <xTimerGetExpiryTime+0x26>
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	613b      	str	r3, [r7, #16]
	return xReturn;
 800f7ee:	693b      	ldr	r3, [r7, #16]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	371c      	adds	r7, #28
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b088      	sub	sp, #32
 800f800:	af02      	add	r7, sp, #8
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f806:	4b22      	ldr	r3, [pc, #136]	; (800f890 <prvProcessExpiredTimer+0x94>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	68db      	ldr	r3, [r3, #12]
 800f80e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	3304      	adds	r3, #4
 800f814:	4618      	mov	r0, r3
 800f816:	f7fe f813 	bl	800d840 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f820:	f003 0304 	and.w	r3, r3, #4
 800f824:	2b00      	cmp	r3, #0
 800f826:	d022      	beq.n	800f86e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	699a      	ldr	r2, [r3, #24]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	18d1      	adds	r1, r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	683a      	ldr	r2, [r7, #0]
 800f834:	6978      	ldr	r0, [r7, #20]
 800f836:	f000 f8d1 	bl	800f9dc <prvInsertTimerInActiveList>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d01f      	beq.n	800f880 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f840:	2300      	movs	r3, #0
 800f842:	9300      	str	r3, [sp, #0]
 800f844:	2300      	movs	r3, #0
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	2100      	movs	r1, #0
 800f84a:	6978      	ldr	r0, [r7, #20]
 800f84c:	f7ff ff6a 	bl	800f724 <xTimerGenericCommand>
 800f850:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d113      	bne.n	800f880 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f85c:	f383 8811 	msr	BASEPRI, r3
 800f860:	f3bf 8f6f 	isb	sy
 800f864:	f3bf 8f4f 	dsb	sy
 800f868:	60fb      	str	r3, [r7, #12]
}
 800f86a:	bf00      	nop
 800f86c:	e7fe      	b.n	800f86c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f874:	f023 0301 	bic.w	r3, r3, #1
 800f878:	b2da      	uxtb	r2, r3
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	6a1b      	ldr	r3, [r3, #32]
 800f884:	6978      	ldr	r0, [r7, #20]
 800f886:	4798      	blx	r3
}
 800f888:	bf00      	nop
 800f88a:	3718      	adds	r7, #24
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	20005268 	.word	0x20005268

0800f894 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f89c:	f107 0308 	add.w	r3, r7, #8
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f000 f857 	bl	800f954 <prvGetNextExpireTime>
 800f8a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f000 f803 	bl	800f8b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f8b2:	f000 f8d5 	bl	800fa60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f8b6:	e7f1      	b.n	800f89c <prvTimerTask+0x8>

0800f8b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f8c2:	f7ff f981 	bl	800ebc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f8c6:	f107 0308 	add.w	r3, r7, #8
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f000 f866 	bl	800f99c <prvSampleTimeNow>
 800f8d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d130      	bne.n	800f93a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d10a      	bne.n	800f8f4 <prvProcessTimerOrBlockTask+0x3c>
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d806      	bhi.n	800f8f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f8e6:	f7ff f97d 	bl	800ebe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f8ea:	68f9      	ldr	r1, [r7, #12]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7ff ff85 	bl	800f7fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f8f2:	e024      	b.n	800f93e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d008      	beq.n	800f90c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f8fa:	4b13      	ldr	r3, [pc, #76]	; (800f948 <prvProcessTimerOrBlockTask+0x90>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d101      	bne.n	800f908 <prvProcessTimerOrBlockTask+0x50>
 800f904:	2301      	movs	r3, #1
 800f906:	e000      	b.n	800f90a <prvProcessTimerOrBlockTask+0x52>
 800f908:	2300      	movs	r3, #0
 800f90a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f90c:	4b0f      	ldr	r3, [pc, #60]	; (800f94c <prvProcessTimerOrBlockTask+0x94>)
 800f90e:	6818      	ldr	r0, [r3, #0]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	683a      	ldr	r2, [r7, #0]
 800f918:	4619      	mov	r1, r3
 800f91a:	f7fe fec5 	bl	800e6a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f91e:	f7ff f961 	bl	800ebe4 <xTaskResumeAll>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d10a      	bne.n	800f93e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f928:	4b09      	ldr	r3, [pc, #36]	; (800f950 <prvProcessTimerOrBlockTask+0x98>)
 800f92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f92e:	601a      	str	r2, [r3, #0]
 800f930:	f3bf 8f4f 	dsb	sy
 800f934:	f3bf 8f6f 	isb	sy
}
 800f938:	e001      	b.n	800f93e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f93a:	f7ff f953 	bl	800ebe4 <xTaskResumeAll>
}
 800f93e:	bf00      	nop
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	2000526c 	.word	0x2000526c
 800f94c:	20005270 	.word	0x20005270
 800f950:	e000ed04 	.word	0xe000ed04

0800f954 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f954:	b480      	push	{r7}
 800f956:	b085      	sub	sp, #20
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f95c:	4b0e      	ldr	r3, [pc, #56]	; (800f998 <prvGetNextExpireTime+0x44>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d101      	bne.n	800f96a <prvGetNextExpireTime+0x16>
 800f966:	2201      	movs	r2, #1
 800f968:	e000      	b.n	800f96c <prvGetNextExpireTime+0x18>
 800f96a:	2200      	movs	r2, #0
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d105      	bne.n	800f984 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f978:	4b07      	ldr	r3, [pc, #28]	; (800f998 <prvGetNextExpireTime+0x44>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	60fb      	str	r3, [r7, #12]
 800f982:	e001      	b.n	800f988 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f984:	2300      	movs	r3, #0
 800f986:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f988:	68fb      	ldr	r3, [r7, #12]
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3714      	adds	r7, #20
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	20005268 	.word	0x20005268

0800f99c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f9a4:	f7ff f9bc 	bl	800ed20 <xTaskGetTickCount>
 800f9a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f9aa:	4b0b      	ldr	r3, [pc, #44]	; (800f9d8 <prvSampleTimeNow+0x3c>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d205      	bcs.n	800f9c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f9b4:	f000 f936 	bl	800fc24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	601a      	str	r2, [r3, #0]
 800f9be:	e002      	b.n	800f9c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f9c6:	4a04      	ldr	r2, [pc, #16]	; (800f9d8 <prvSampleTimeNow+0x3c>)
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	20005278 	.word	0x20005278

0800f9dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b086      	sub	sp, #24
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	607a      	str	r2, [r7, #4]
 800f9e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	68ba      	ldr	r2, [r7, #8]
 800f9f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f9fa:	68ba      	ldr	r2, [r7, #8]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d812      	bhi.n	800fa28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa02:	687a      	ldr	r2, [r7, #4]
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	1ad2      	subs	r2, r2, r3
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	699b      	ldr	r3, [r3, #24]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d302      	bcc.n	800fa16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fa10:	2301      	movs	r3, #1
 800fa12:	617b      	str	r3, [r7, #20]
 800fa14:	e01b      	b.n	800fa4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fa16:	4b10      	ldr	r3, [pc, #64]	; (800fa58 <prvInsertTimerInActiveList+0x7c>)
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	3304      	adds	r3, #4
 800fa1e:	4619      	mov	r1, r3
 800fa20:	4610      	mov	r0, r2
 800fa22:	f7fd fed4 	bl	800d7ce <vListInsert>
 800fa26:	e012      	b.n	800fa4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d206      	bcs.n	800fa3e <prvInsertTimerInActiveList+0x62>
 800fa30:	68ba      	ldr	r2, [r7, #8]
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d302      	bcc.n	800fa3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fa38:	2301      	movs	r3, #1
 800fa3a:	617b      	str	r3, [r7, #20]
 800fa3c:	e007      	b.n	800fa4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa3e:	4b07      	ldr	r3, [pc, #28]	; (800fa5c <prvInsertTimerInActiveList+0x80>)
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	3304      	adds	r3, #4
 800fa46:	4619      	mov	r1, r3
 800fa48:	4610      	mov	r0, r2
 800fa4a:	f7fd fec0 	bl	800d7ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fa4e:	697b      	ldr	r3, [r7, #20]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3718      	adds	r7, #24
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	2000526c 	.word	0x2000526c
 800fa5c:	20005268 	.word	0x20005268

0800fa60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b08e      	sub	sp, #56	; 0x38
 800fa64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fa66:	e0ca      	b.n	800fbfe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	da18      	bge.n	800faa0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fa6e:	1d3b      	adds	r3, r7, #4
 800fa70:	3304      	adds	r3, #4
 800fa72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d10a      	bne.n	800fa90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa7e:	f383 8811 	msr	BASEPRI, r3
 800fa82:	f3bf 8f6f 	isb	sy
 800fa86:	f3bf 8f4f 	dsb	sy
 800fa8a:	61fb      	str	r3, [r7, #28]
}
 800fa8c:	bf00      	nop
 800fa8e:	e7fe      	b.n	800fa8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa96:	6850      	ldr	r0, [r2, #4]
 800fa98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa9a:	6892      	ldr	r2, [r2, #8]
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f2c0 80aa 	blt.w	800fbfc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800faac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faae:	695b      	ldr	r3, [r3, #20]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d004      	beq.n	800fabe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab6:	3304      	adds	r3, #4
 800fab8:	4618      	mov	r0, r3
 800faba:	f7fd fec1 	bl	800d840 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fabe:	463b      	mov	r3, r7
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7ff ff6b 	bl	800f99c <prvSampleTimeNow>
 800fac6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b09      	cmp	r3, #9
 800facc:	f200 8097 	bhi.w	800fbfe <prvProcessReceivedCommands+0x19e>
 800fad0:	a201      	add	r2, pc, #4	; (adr r2, 800fad8 <prvProcessReceivedCommands+0x78>)
 800fad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fad6:	bf00      	nop
 800fad8:	0800fb01 	.word	0x0800fb01
 800fadc:	0800fb01 	.word	0x0800fb01
 800fae0:	0800fb01 	.word	0x0800fb01
 800fae4:	0800fb75 	.word	0x0800fb75
 800fae8:	0800fb89 	.word	0x0800fb89
 800faec:	0800fbd3 	.word	0x0800fbd3
 800faf0:	0800fb01 	.word	0x0800fb01
 800faf4:	0800fb01 	.word	0x0800fb01
 800faf8:	0800fb75 	.word	0x0800fb75
 800fafc:	0800fb89 	.word	0x0800fb89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb06:	f043 0301 	orr.w	r3, r3, #1
 800fb0a:	b2da      	uxtb	r2, r3
 800fb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fb12:	68ba      	ldr	r2, [r7, #8]
 800fb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb16:	699b      	ldr	r3, [r3, #24]
 800fb18:	18d1      	adds	r1, r2, r3
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb20:	f7ff ff5c 	bl	800f9dc <prvInsertTimerInActiveList>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d069      	beq.n	800fbfe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb2c:	6a1b      	ldr	r3, [r3, #32]
 800fb2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb38:	f003 0304 	and.w	r3, r3, #4
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d05e      	beq.n	800fbfe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fb40:	68ba      	ldr	r2, [r7, #8]
 800fb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb44:	699b      	ldr	r3, [r3, #24]
 800fb46:	441a      	add	r2, r3
 800fb48:	2300      	movs	r3, #0
 800fb4a:	9300      	str	r3, [sp, #0]
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	2100      	movs	r1, #0
 800fb50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb52:	f7ff fde7 	bl	800f724 <xTimerGenericCommand>
 800fb56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fb58:	6a3b      	ldr	r3, [r7, #32]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d14f      	bne.n	800fbfe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	61bb      	str	r3, [r7, #24]
}
 800fb70:	bf00      	nop
 800fb72:	e7fe      	b.n	800fb72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb7a:	f023 0301 	bic.w	r3, r3, #1
 800fb7e:	b2da      	uxtb	r2, r3
 800fb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fb86:	e03a      	b.n	800fbfe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb8e:	f043 0301 	orr.w	r3, r3, #1
 800fb92:	b2da      	uxtb	r2, r3
 800fb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba2:	699b      	ldr	r3, [r3, #24]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10a      	bne.n	800fbbe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbac:	f383 8811 	msr	BASEPRI, r3
 800fbb0:	f3bf 8f6f 	isb	sy
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	617b      	str	r3, [r7, #20]
}
 800fbba:	bf00      	nop
 800fbbc:	e7fe      	b.n	800fbbc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc0:	699a      	ldr	r2, [r3, #24]
 800fbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc4:	18d1      	adds	r1, r2, r3
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbcc:	f7ff ff06 	bl	800f9dc <prvInsertTimerInActiveList>
					break;
 800fbd0:	e015      	b.n	800fbfe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbd8:	f003 0302 	and.w	r3, r3, #2
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d103      	bne.n	800fbe8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fbe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbe2:	f7fd fc85 	bl	800d4f0 <vPortFree>
 800fbe6:	e00a      	b.n	800fbfe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbee:	f023 0301 	bic.w	r3, r3, #1
 800fbf2:	b2da      	uxtb	r2, r3
 800fbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fbfa:	e000      	b.n	800fbfe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fbfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fbfe:	4b08      	ldr	r3, [pc, #32]	; (800fc20 <prvProcessReceivedCommands+0x1c0>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	1d39      	adds	r1, r7, #4
 800fc04:	2200      	movs	r2, #0
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fe fb34 	bl	800e274 <xQueueReceive>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	f47f af2a 	bne.w	800fa68 <prvProcessReceivedCommands+0x8>
	}
}
 800fc14:	bf00      	nop
 800fc16:	bf00      	nop
 800fc18:	3730      	adds	r7, #48	; 0x30
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	20005270 	.word	0x20005270

0800fc24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b088      	sub	sp, #32
 800fc28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc2a:	e048      	b.n	800fcbe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc2c:	4b2d      	ldr	r3, [pc, #180]	; (800fce4 <prvSwitchTimerLists+0xc0>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc36:	4b2b      	ldr	r3, [pc, #172]	; (800fce4 <prvSwitchTimerLists+0xc0>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	68db      	ldr	r3, [r3, #12]
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	3304      	adds	r3, #4
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fd fdfb 	bl	800d840 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	6a1b      	ldr	r3, [r3, #32]
 800fc4e:	68f8      	ldr	r0, [r7, #12]
 800fc50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc58:	f003 0304 	and.w	r3, r3, #4
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d02e      	beq.n	800fcbe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	699b      	ldr	r3, [r3, #24]
 800fc64:	693a      	ldr	r2, [r7, #16]
 800fc66:	4413      	add	r3, r2
 800fc68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fc6a:	68ba      	ldr	r2, [r7, #8]
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d90e      	bls.n	800fc90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	68ba      	ldr	r2, [r7, #8]
 800fc76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc7e:	4b19      	ldr	r3, [pc, #100]	; (800fce4 <prvSwitchTimerLists+0xc0>)
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	3304      	adds	r3, #4
 800fc86:	4619      	mov	r1, r3
 800fc88:	4610      	mov	r0, r2
 800fc8a:	f7fd fda0 	bl	800d7ce <vListInsert>
 800fc8e:	e016      	b.n	800fcbe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc90:	2300      	movs	r3, #0
 800fc92:	9300      	str	r3, [sp, #0]
 800fc94:	2300      	movs	r3, #0
 800fc96:	693a      	ldr	r2, [r7, #16]
 800fc98:	2100      	movs	r1, #0
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f7ff fd42 	bl	800f724 <xTimerGenericCommand>
 800fca0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d10a      	bne.n	800fcbe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcac:	f383 8811 	msr	BASEPRI, r3
 800fcb0:	f3bf 8f6f 	isb	sy
 800fcb4:	f3bf 8f4f 	dsb	sy
 800fcb8:	603b      	str	r3, [r7, #0]
}
 800fcba:	bf00      	nop
 800fcbc:	e7fe      	b.n	800fcbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fcbe:	4b09      	ldr	r3, [pc, #36]	; (800fce4 <prvSwitchTimerLists+0xc0>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d1b1      	bne.n	800fc2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fcc8:	4b06      	ldr	r3, [pc, #24]	; (800fce4 <prvSwitchTimerLists+0xc0>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fcce:	4b06      	ldr	r3, [pc, #24]	; (800fce8 <prvSwitchTimerLists+0xc4>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a04      	ldr	r2, [pc, #16]	; (800fce4 <prvSwitchTimerLists+0xc0>)
 800fcd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fcd6:	4a04      	ldr	r2, [pc, #16]	; (800fce8 <prvSwitchTimerLists+0xc4>)
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	6013      	str	r3, [r2, #0]
}
 800fcdc:	bf00      	nop
 800fcde:	3718      	adds	r7, #24
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	20005268 	.word	0x20005268
 800fce8:	2000526c 	.word	0x2000526c

0800fcec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fcf2:	f7fd feff 	bl	800daf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fcf6:	4b15      	ldr	r3, [pc, #84]	; (800fd4c <prvCheckForValidListAndQueue+0x60>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d120      	bne.n	800fd40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fcfe:	4814      	ldr	r0, [pc, #80]	; (800fd50 <prvCheckForValidListAndQueue+0x64>)
 800fd00:	f7fd fd14 	bl	800d72c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fd04:	4813      	ldr	r0, [pc, #76]	; (800fd54 <prvCheckForValidListAndQueue+0x68>)
 800fd06:	f7fd fd11 	bl	800d72c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fd0a:	4b13      	ldr	r3, [pc, #76]	; (800fd58 <prvCheckForValidListAndQueue+0x6c>)
 800fd0c:	4a10      	ldr	r2, [pc, #64]	; (800fd50 <prvCheckForValidListAndQueue+0x64>)
 800fd0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fd10:	4b12      	ldr	r3, [pc, #72]	; (800fd5c <prvCheckForValidListAndQueue+0x70>)
 800fd12:	4a10      	ldr	r2, [pc, #64]	; (800fd54 <prvCheckForValidListAndQueue+0x68>)
 800fd14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fd16:	2300      	movs	r3, #0
 800fd18:	9300      	str	r3, [sp, #0]
 800fd1a:	4b11      	ldr	r3, [pc, #68]	; (800fd60 <prvCheckForValidListAndQueue+0x74>)
 800fd1c:	4a11      	ldr	r2, [pc, #68]	; (800fd64 <prvCheckForValidListAndQueue+0x78>)
 800fd1e:	2110      	movs	r1, #16
 800fd20:	200a      	movs	r0, #10
 800fd22:	f7fe f871 	bl	800de08 <xQueueGenericCreateStatic>
 800fd26:	4603      	mov	r3, r0
 800fd28:	4a08      	ldr	r2, [pc, #32]	; (800fd4c <prvCheckForValidListAndQueue+0x60>)
 800fd2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fd2c:	4b07      	ldr	r3, [pc, #28]	; (800fd4c <prvCheckForValidListAndQueue+0x60>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d005      	beq.n	800fd40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fd34:	4b05      	ldr	r3, [pc, #20]	; (800fd4c <prvCheckForValidListAndQueue+0x60>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	490b      	ldr	r1, [pc, #44]	; (800fd68 <prvCheckForValidListAndQueue+0x7c>)
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fe fc8a 	bl	800e654 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fd40:	f7fd ff08 	bl	800db54 <vPortExitCritical>
}
 800fd44:	bf00      	nop
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	20005270 	.word	0x20005270
 800fd50:	20005240 	.word	0x20005240
 800fd54:	20005254 	.word	0x20005254
 800fd58:	20005268 	.word	0x20005268
 800fd5c:	2000526c 	.word	0x2000526c
 800fd60:	2000531c 	.word	0x2000531c
 800fd64:	2000527c 	.word	0x2000527c
 800fd68:	0801079c 	.word	0x0801079c

0800fd6c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b086      	sub	sp, #24
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d10a      	bne.n	800fd94 <xTimerIsTimerActive+0x28>
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	60fb      	str	r3, [r7, #12]
}
 800fd90:	bf00      	nop
 800fd92:	e7fe      	b.n	800fd92 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800fd94:	f7fd feae 	bl	800daf4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd9e:	f003 0301 	and.w	r3, r3, #1
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d102      	bne.n	800fdac <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800fda6:	2300      	movs	r3, #0
 800fda8:	617b      	str	r3, [r7, #20]
 800fdaa:	e001      	b.n	800fdb0 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800fdac:	2301      	movs	r3, #1
 800fdae:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800fdb0:	f7fd fed0 	bl	800db54 <vPortExitCritical>

	return xReturn;
 800fdb4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3718      	adds	r7, #24
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b086      	sub	sp, #24
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d10a      	bne.n	800fde6 <pvTimerGetTimerID+0x28>
	__asm volatile
 800fdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd4:	f383 8811 	msr	BASEPRI, r3
 800fdd8:	f3bf 8f6f 	isb	sy
 800fddc:	f3bf 8f4f 	dsb	sy
 800fde0:	60fb      	str	r3, [r7, #12]
}
 800fde2:	bf00      	nop
 800fde4:	e7fe      	b.n	800fde4 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800fde6:	f7fd fe85 	bl	800daf4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	69db      	ldr	r3, [r3, #28]
 800fdee:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800fdf0:	f7fd feb0 	bl	800db54 <vPortExitCritical>

	return pvReturn;
 800fdf4:	693b      	ldr	r3, [r7, #16]
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3718      	adds	r7, #24
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}
	...

0800fe00 <__libc_init_array>:
 800fe00:	b570      	push	{r4, r5, r6, lr}
 800fe02:	4d0d      	ldr	r5, [pc, #52]	; (800fe38 <__libc_init_array+0x38>)
 800fe04:	4c0d      	ldr	r4, [pc, #52]	; (800fe3c <__libc_init_array+0x3c>)
 800fe06:	1b64      	subs	r4, r4, r5
 800fe08:	10a4      	asrs	r4, r4, #2
 800fe0a:	2600      	movs	r6, #0
 800fe0c:	42a6      	cmp	r6, r4
 800fe0e:	d109      	bne.n	800fe24 <__libc_init_array+0x24>
 800fe10:	4d0b      	ldr	r5, [pc, #44]	; (800fe40 <__libc_init_array+0x40>)
 800fe12:	4c0c      	ldr	r4, [pc, #48]	; (800fe44 <__libc_init_array+0x44>)
 800fe14:	f000 f8f0 	bl	800fff8 <_init>
 800fe18:	1b64      	subs	r4, r4, r5
 800fe1a:	10a4      	asrs	r4, r4, #2
 800fe1c:	2600      	movs	r6, #0
 800fe1e:	42a6      	cmp	r6, r4
 800fe20:	d105      	bne.n	800fe2e <__libc_init_array+0x2e>
 800fe22:	bd70      	pop	{r4, r5, r6, pc}
 800fe24:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe28:	4798      	blx	r3
 800fe2a:	3601      	adds	r6, #1
 800fe2c:	e7ee      	b.n	800fe0c <__libc_init_array+0xc>
 800fe2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe32:	4798      	blx	r3
 800fe34:	3601      	adds	r6, #1
 800fe36:	e7f2      	b.n	800fe1e <__libc_init_array+0x1e>
 800fe38:	080108d4 	.word	0x080108d4
 800fe3c:	080108d4 	.word	0x080108d4
 800fe40:	080108d4 	.word	0x080108d4
 800fe44:	080108d8 	.word	0x080108d8

0800fe48 <memcpy>:
 800fe48:	440a      	add	r2, r1
 800fe4a:	4291      	cmp	r1, r2
 800fe4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe50:	d100      	bne.n	800fe54 <memcpy+0xc>
 800fe52:	4770      	bx	lr
 800fe54:	b510      	push	{r4, lr}
 800fe56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe5e:	4291      	cmp	r1, r2
 800fe60:	d1f9      	bne.n	800fe56 <memcpy+0xe>
 800fe62:	bd10      	pop	{r4, pc}

0800fe64 <memset>:
 800fe64:	4402      	add	r2, r0
 800fe66:	4603      	mov	r3, r0
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d100      	bne.n	800fe6e <memset+0xa>
 800fe6c:	4770      	bx	lr
 800fe6e:	f803 1b01 	strb.w	r1, [r3], #1
 800fe72:	e7f9      	b.n	800fe68 <memset+0x4>

0800fe74 <_free_r>:
 800fe74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe76:	2900      	cmp	r1, #0
 800fe78:	d044      	beq.n	800ff04 <_free_r+0x90>
 800fe7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe7e:	9001      	str	r0, [sp, #4]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	f1a1 0404 	sub.w	r4, r1, #4
 800fe86:	bfb8      	it	lt
 800fe88:	18e4      	addlt	r4, r4, r3
 800fe8a:	f000 f8a9 	bl	800ffe0 <__malloc_lock>
 800fe8e:	4a1e      	ldr	r2, [pc, #120]	; (800ff08 <_free_r+0x94>)
 800fe90:	9801      	ldr	r0, [sp, #4]
 800fe92:	6813      	ldr	r3, [r2, #0]
 800fe94:	b933      	cbnz	r3, 800fea4 <_free_r+0x30>
 800fe96:	6063      	str	r3, [r4, #4]
 800fe98:	6014      	str	r4, [r2, #0]
 800fe9a:	b003      	add	sp, #12
 800fe9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fea0:	f000 b8a4 	b.w	800ffec <__malloc_unlock>
 800fea4:	42a3      	cmp	r3, r4
 800fea6:	d908      	bls.n	800feba <_free_r+0x46>
 800fea8:	6825      	ldr	r5, [r4, #0]
 800feaa:	1961      	adds	r1, r4, r5
 800feac:	428b      	cmp	r3, r1
 800feae:	bf01      	itttt	eq
 800feb0:	6819      	ldreq	r1, [r3, #0]
 800feb2:	685b      	ldreq	r3, [r3, #4]
 800feb4:	1949      	addeq	r1, r1, r5
 800feb6:	6021      	streq	r1, [r4, #0]
 800feb8:	e7ed      	b.n	800fe96 <_free_r+0x22>
 800feba:	461a      	mov	r2, r3
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	b10b      	cbz	r3, 800fec4 <_free_r+0x50>
 800fec0:	42a3      	cmp	r3, r4
 800fec2:	d9fa      	bls.n	800feba <_free_r+0x46>
 800fec4:	6811      	ldr	r1, [r2, #0]
 800fec6:	1855      	adds	r5, r2, r1
 800fec8:	42a5      	cmp	r5, r4
 800feca:	d10b      	bne.n	800fee4 <_free_r+0x70>
 800fecc:	6824      	ldr	r4, [r4, #0]
 800fece:	4421      	add	r1, r4
 800fed0:	1854      	adds	r4, r2, r1
 800fed2:	42a3      	cmp	r3, r4
 800fed4:	6011      	str	r1, [r2, #0]
 800fed6:	d1e0      	bne.n	800fe9a <_free_r+0x26>
 800fed8:	681c      	ldr	r4, [r3, #0]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	6053      	str	r3, [r2, #4]
 800fede:	4421      	add	r1, r4
 800fee0:	6011      	str	r1, [r2, #0]
 800fee2:	e7da      	b.n	800fe9a <_free_r+0x26>
 800fee4:	d902      	bls.n	800feec <_free_r+0x78>
 800fee6:	230c      	movs	r3, #12
 800fee8:	6003      	str	r3, [r0, #0]
 800feea:	e7d6      	b.n	800fe9a <_free_r+0x26>
 800feec:	6825      	ldr	r5, [r4, #0]
 800feee:	1961      	adds	r1, r4, r5
 800fef0:	428b      	cmp	r3, r1
 800fef2:	bf04      	itt	eq
 800fef4:	6819      	ldreq	r1, [r3, #0]
 800fef6:	685b      	ldreq	r3, [r3, #4]
 800fef8:	6063      	str	r3, [r4, #4]
 800fefa:	bf04      	itt	eq
 800fefc:	1949      	addeq	r1, r1, r5
 800fefe:	6021      	streq	r1, [r4, #0]
 800ff00:	6054      	str	r4, [r2, #4]
 800ff02:	e7ca      	b.n	800fe9a <_free_r+0x26>
 800ff04:	b003      	add	sp, #12
 800ff06:	bd30      	pop	{r4, r5, pc}
 800ff08:	2000536c 	.word	0x2000536c

0800ff0c <cleanup_glue>:
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	460c      	mov	r4, r1
 800ff10:	6809      	ldr	r1, [r1, #0]
 800ff12:	4605      	mov	r5, r0
 800ff14:	b109      	cbz	r1, 800ff1a <cleanup_glue+0xe>
 800ff16:	f7ff fff9 	bl	800ff0c <cleanup_glue>
 800ff1a:	4621      	mov	r1, r4
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff22:	f7ff bfa7 	b.w	800fe74 <_free_r>
	...

0800ff28 <_reclaim_reent>:
 800ff28:	4b2c      	ldr	r3, [pc, #176]	; (800ffdc <_reclaim_reent+0xb4>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	4283      	cmp	r3, r0
 800ff2e:	b570      	push	{r4, r5, r6, lr}
 800ff30:	4604      	mov	r4, r0
 800ff32:	d051      	beq.n	800ffd8 <_reclaim_reent+0xb0>
 800ff34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ff36:	b143      	cbz	r3, 800ff4a <_reclaim_reent+0x22>
 800ff38:	68db      	ldr	r3, [r3, #12]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d14a      	bne.n	800ffd4 <_reclaim_reent+0xac>
 800ff3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff40:	6819      	ldr	r1, [r3, #0]
 800ff42:	b111      	cbz	r1, 800ff4a <_reclaim_reent+0x22>
 800ff44:	4620      	mov	r0, r4
 800ff46:	f7ff ff95 	bl	800fe74 <_free_r>
 800ff4a:	6961      	ldr	r1, [r4, #20]
 800ff4c:	b111      	cbz	r1, 800ff54 <_reclaim_reent+0x2c>
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f7ff ff90 	bl	800fe74 <_free_r>
 800ff54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ff56:	b111      	cbz	r1, 800ff5e <_reclaim_reent+0x36>
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f7ff ff8b 	bl	800fe74 <_free_r>
 800ff5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ff60:	b111      	cbz	r1, 800ff68 <_reclaim_reent+0x40>
 800ff62:	4620      	mov	r0, r4
 800ff64:	f7ff ff86 	bl	800fe74 <_free_r>
 800ff68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ff6a:	b111      	cbz	r1, 800ff72 <_reclaim_reent+0x4a>
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f7ff ff81 	bl	800fe74 <_free_r>
 800ff72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ff74:	b111      	cbz	r1, 800ff7c <_reclaim_reent+0x54>
 800ff76:	4620      	mov	r0, r4
 800ff78:	f7ff ff7c 	bl	800fe74 <_free_r>
 800ff7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ff7e:	b111      	cbz	r1, 800ff86 <_reclaim_reent+0x5e>
 800ff80:	4620      	mov	r0, r4
 800ff82:	f7ff ff77 	bl	800fe74 <_free_r>
 800ff86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ff88:	b111      	cbz	r1, 800ff90 <_reclaim_reent+0x68>
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	f7ff ff72 	bl	800fe74 <_free_r>
 800ff90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff92:	b111      	cbz	r1, 800ff9a <_reclaim_reent+0x72>
 800ff94:	4620      	mov	r0, r4
 800ff96:	f7ff ff6d 	bl	800fe74 <_free_r>
 800ff9a:	69a3      	ldr	r3, [r4, #24]
 800ff9c:	b1e3      	cbz	r3, 800ffd8 <_reclaim_reent+0xb0>
 800ff9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	4798      	blx	r3
 800ffa4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ffa6:	b1b9      	cbz	r1, 800ffd8 <_reclaim_reent+0xb0>
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffae:	f7ff bfad 	b.w	800ff0c <cleanup_glue>
 800ffb2:	5949      	ldr	r1, [r1, r5]
 800ffb4:	b941      	cbnz	r1, 800ffc8 <_reclaim_reent+0xa0>
 800ffb6:	3504      	adds	r5, #4
 800ffb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffba:	2d80      	cmp	r5, #128	; 0x80
 800ffbc:	68d9      	ldr	r1, [r3, #12]
 800ffbe:	d1f8      	bne.n	800ffb2 <_reclaim_reent+0x8a>
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f7ff ff57 	bl	800fe74 <_free_r>
 800ffc6:	e7ba      	b.n	800ff3e <_reclaim_reent+0x16>
 800ffc8:	680e      	ldr	r6, [r1, #0]
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f7ff ff52 	bl	800fe74 <_free_r>
 800ffd0:	4631      	mov	r1, r6
 800ffd2:	e7ef      	b.n	800ffb4 <_reclaim_reent+0x8c>
 800ffd4:	2500      	movs	r5, #0
 800ffd6:	e7ef      	b.n	800ffb8 <_reclaim_reent+0x90>
 800ffd8:	bd70      	pop	{r4, r5, r6, pc}
 800ffda:	bf00      	nop
 800ffdc:	20000014 	.word	0x20000014

0800ffe0 <__malloc_lock>:
 800ffe0:	4801      	ldr	r0, [pc, #4]	; (800ffe8 <__malloc_lock+0x8>)
 800ffe2:	f7f3 bffc 	b.w	8003fde <__retarget_lock_acquire_recursive>
 800ffe6:	bf00      	nop
 800ffe8:	2000092c 	.word	0x2000092c

0800ffec <__malloc_unlock>:
 800ffec:	4801      	ldr	r0, [pc, #4]	; (800fff4 <__malloc_unlock+0x8>)
 800ffee:	f7f4 b80a 	b.w	8004006 <__retarget_lock_release_recursive>
 800fff2:	bf00      	nop
 800fff4:	2000092c 	.word	0x2000092c

0800fff8 <_init>:
 800fff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffa:	bf00      	nop
 800fffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fffe:	bc08      	pop	{r3}
 8010000:	469e      	mov	lr, r3
 8010002:	4770      	bx	lr

08010004 <_fini>:
 8010004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010006:	bf00      	nop
 8010008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801000a:	bc08      	pop	{r3}
 801000c:	469e      	mov	lr, r3
 801000e:	4770      	bx	lr
