
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ab0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  08013c50  08013c50  00023c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801444c  0801444c  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801444c  0801444c  0002444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014454  08014454  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014454  08014454  00024454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014458  08014458  00024458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0801445c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000942c  200000c0  0801451c  000300c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200094ec  0801451c  000394ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033219  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007e89  00000000  00000000  00063309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a78  00000000  00000000  0006b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026b8  00000000  00000000  0006dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002689f  00000000  00000000  000702c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004b203  00000000  00000000  00096b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6bd0  00000000  00000000  000e1d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019893a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0dc  00000000  00000000  0019898c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013c38 	.word	0x08013c38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08013c38 	.word	0x08013c38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/***********************************************************************************
* Function: main														   		   *
* Description: Defined in the linker file as the start of the application.         *
************************************************************************************/
int main()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	/* Calls for system initialization. */
	SystemManager_Init();
 8000d74:	f012 f850 	bl	8012e18 <SystemManager_Init>
	/* Initialize the kernel of FreeRTOS. */
	osKernelInitialize();
 8000d78:	f00d fbca 	bl	800e510 <osKernelInitialize>
	/* Initialize the FreeRTOS with all its objects.*/
	MX_FREERTOS_Init();
 8000d7c:	f003 fb40 	bl	8004400 <MX_FREERTOS_Init>
	/* Start the kernel and the scheduler and FreeRTOS takes
	 * control of the application execution. */
	osKernelStart();
 8000d80:	f00d fbea 	bl	800e558 <osKernelStart>
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <Btc_RequestState>:
/***********************************************************************************
* Function: Btc_RequestState													   *
* Description: Process bluetooth command for request state 					       *
************************************************************************************/
VOID Btc_RequestState()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	if(Btc_ReceivedDataOnBluetooth == 99)
 8000d90:	4ba0      	ldr	r3, [pc, #640]	; (8001014 <Btc_RequestState+0x288>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b63      	cmp	r3, #99	; 0x63
 8000d96:	d101      	bne.n	8000d9c <Btc_RequestState+0x10>
	{
		SystemManager_PerformReset();
 8000d98:	f012 f876 	bl	8012e88 <SystemManager_PerformReset>
	}
	else
	{
		/* do nothing */
	}
	if(Btc_ReceivedDataOnBluetooth == 90)
 8000d9c:	4b9d      	ldr	r3, [pc, #628]	; (8001014 <Btc_RequestState+0x288>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b5a      	cmp	r3, #90	; 0x5a
 8000da2:	f040 825a 	bne.w	800125a <Btc_RequestState+0x4ce>
	{
		Btc_DtcMessageLength = strlen(Btc_DtcMessage);
 8000da6:	4b9c      	ldr	r3, [pc, #624]	; (8001018 <Btc_RequestState+0x28c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fa18 	bl	80001e0 <strlen>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b99      	ldr	r3, [pc, #612]	; (800101c <Btc_RequestState+0x290>)
 8000db6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcMessage, Btc_DtcMessageLength);
 8000db8:	4b97      	ldr	r3, [pc, #604]	; (8001018 <Btc_RequestState+0x28c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a97      	ldr	r2, [pc, #604]	; (800101c <Btc_RequestState+0x290>)
 8000dbe:	8812      	ldrh	r2, [r2, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4897      	ldr	r0, [pc, #604]	; (8001020 <Btc_RequestState+0x294>)
 8000dc4:	f00b fa9c 	bl	800c300 <HAL_UART_Transmit_IT>
		Btc_DtcDescriptionLength1 = strlen(Btc_DtcLowBeamLeft);
 8000dc8:	4b96      	ldr	r3, [pc, #600]	; (8001024 <Btc_RequestState+0x298>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fa07 	bl	80001e0 <strlen>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b94      	ldr	r3, [pc, #592]	; (8001028 <Btc_RequestState+0x29c>)
 8000dd8:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength2 = strlen(Btc_DtcLowBeamRight);
 8000dda:	4b94      	ldr	r3, [pc, #592]	; (800102c <Btc_RequestState+0x2a0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff f9fe 	bl	80001e0 <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b91      	ldr	r3, [pc, #580]	; (8001030 <Btc_RequestState+0x2a4>)
 8000dea:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength3 = strlen(Btc_DtcRearPositionLightLeft);
 8000dec:	4b91      	ldr	r3, [pc, #580]	; (8001034 <Btc_RequestState+0x2a8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff f9f5 	bl	80001e0 <strlen>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b8f      	ldr	r3, [pc, #572]	; (8001038 <Btc_RequestState+0x2ac>)
 8000dfc:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength4 = strlen(Btc_DtcRearPositionLightRight);
 8000dfe:	4b8f      	ldr	r3, [pc, #572]	; (800103c <Btc_RequestState+0x2b0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9ec 	bl	80001e0 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b8c      	ldr	r3, [pc, #560]	; (8001040 <Btc_RequestState+0x2b4>)
 8000e0e:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength5 = strlen(Btc_DtcRightTurnSignalFront);
 8000e10:	4b8c      	ldr	r3, [pc, #560]	; (8001044 <Btc_RequestState+0x2b8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff f9e3 	bl	80001e0 <strlen>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b8a      	ldr	r3, [pc, #552]	; (8001048 <Btc_RequestState+0x2bc>)
 8000e20:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength6 = strlen(Btc_DtcLeftTurnSignalFront);
 8000e22:	4b8a      	ldr	r3, [pc, #552]	; (800104c <Btc_RequestState+0x2c0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff f9da 	bl	80001e0 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b87      	ldr	r3, [pc, #540]	; (8001050 <Btc_RequestState+0x2c4>)
 8000e32:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength7 = strlen(Btc_DtcLeftTurnSignalRear);
 8000e34:	4b87      	ldr	r3, [pc, #540]	; (8001054 <Btc_RequestState+0x2c8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff f9d1 	bl	80001e0 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b85      	ldr	r3, [pc, #532]	; (8001058 <Btc_RequestState+0x2cc>)
 8000e44:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength8 = strlen(Btc_DtcRightBrakeLight);
 8000e46:	4b85      	ldr	r3, [pc, #532]	; (800105c <Btc_RequestState+0x2d0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff f9c8 	bl	80001e0 <strlen>
 8000e50:	4603      	mov	r3, r0
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b82      	ldr	r3, [pc, #520]	; (8001060 <Btc_RequestState+0x2d4>)
 8000e56:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength9 = strlen(Btc_DtcLeftBrakeLight);
 8000e58:	4b82      	ldr	r3, [pc, #520]	; (8001064 <Btc_RequestState+0x2d8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff f9bf 	bl	80001e0 <strlen>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b80      	ldr	r3, [pc, #512]	; (8001068 <Btc_RequestState+0x2dc>)
 8000e68:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength10 = strlen(Btc_DtcLightSensor);
 8000e6a:	4b80      	ldr	r3, [pc, #512]	; (800106c <Btc_RequestState+0x2e0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff f9b6 	bl	80001e0 <strlen>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	4b7d      	ldr	r3, [pc, #500]	; (8001070 <Btc_RequestState+0x2e4>)
 8000e7a:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength11 = strlen(Btc_DtcVibrationSensor);
 8000e7c:	4b7d      	ldr	r3, [pc, #500]	; (8001074 <Btc_RequestState+0x2e8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f9ad 	bl	80001e0 <strlen>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b7b      	ldr	r3, [pc, #492]	; (8001078 <Btc_RequestState+0x2ec>)
 8000e8c:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength12 = strlen(Btc_DtcTemperatureSensor);
 8000e8e:	4b7b      	ldr	r3, [pc, #492]	; (800107c <Btc_RequestState+0x2f0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff f9a4 	bl	80001e0 <strlen>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b78      	ldr	r3, [pc, #480]	; (8001080 <Btc_RequestState+0x2f4>)
 8000e9e:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength13 = strlen(Btc_DtcRearParkingSensor);
 8000ea0:	4b78      	ldr	r3, [pc, #480]	; (8001084 <Btc_RequestState+0x2f8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff f99b 	bl	80001e0 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b76      	ldr	r3, [pc, #472]	; (8001088 <Btc_RequestState+0x2fc>)
 8000eb0:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength14 = strlen(Btc_DtcFrontParkingSensor);
 8000eb2:	4b76      	ldr	r3, [pc, #472]	; (800108c <Btc_RequestState+0x300>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff f992 	bl	80001e0 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b73      	ldr	r3, [pc, #460]	; (8001090 <Btc_RequestState+0x304>)
 8000ec2:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength15 = strlen(Btc_DtcLcd);
 8000ec4:	4b73      	ldr	r3, [pc, #460]	; (8001094 <Btc_RequestState+0x308>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f989 	bl	80001e0 <strlen>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b71      	ldr	r3, [pc, #452]	; (8001098 <Btc_RequestState+0x30c>)
 8000ed4:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength16 = strlen(Btc_DtcHardware);
 8000ed6:	4b71      	ldr	r3, [pc, #452]	; (800109c <Btc_RequestState+0x310>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff f980 	bl	80001e0 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b6e      	ldr	r3, [pc, #440]	; (80010a0 <Btc_RequestState+0x314>)
 8000ee6:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength17 = strlen(Btc_DtcBtc);
 8000ee8:	4b6e      	ldr	r3, [pc, #440]	; (80010a4 <Btc_RequestState+0x318>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff f977 	bl	80001e0 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b6c      	ldr	r3, [pc, #432]	; (80010a8 <Btc_RequestState+0x31c>)
 8000ef8:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength18 = strlen(Btc_DtcMem);
 8000efa:	4b6c      	ldr	r3, [pc, #432]	; (80010ac <Btc_RequestState+0x320>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff f96e 	bl	80001e0 <strlen>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	4b69      	ldr	r3, [pc, #420]	; (80010b0 <Btc_RequestState+0x324>)
 8000f0a:	801a      	strh	r2, [r3, #0]
		if(Dem_DtcArray[16] != 0)
 8000f0c:	4b69      	ldr	r3, [pc, #420]	; (80010b4 <Btc_RequestState+0x328>)
 8000f0e:	7c1b      	ldrb	r3, [r3, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00d      	beq.n	8000f30 <Btc_RequestState+0x1a4>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcBtc, Btc_DtcDescriptionLength17) == HAL_BUSY);
 8000f14:	bf00      	nop
 8000f16:	4b63      	ldr	r3, [pc, #396]	; (80010a4 <Btc_RequestState+0x318>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a63      	ldr	r2, [pc, #396]	; (80010a8 <Btc_RequestState+0x31c>)
 8000f1c:	8812      	ldrh	r2, [r2, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	483f      	ldr	r0, [pc, #252]	; (8001020 <Btc_RequestState+0x294>)
 8000f22:	f00b f9ed 	bl	800c300 <HAL_UART_Transmit_IT>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d0f4      	beq.n	8000f16 <Btc_RequestState+0x18a>
			Rte_Runnable_Wdg_MainFunction();
 8000f2c:	f010 fdbe 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[17] != 0)
 8000f30:	4b60      	ldr	r3, [pc, #384]	; (80010b4 <Btc_RequestState+0x328>)
 8000f32:	7c5b      	ldrb	r3, [r3, #17]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00d      	beq.n	8000f54 <Btc_RequestState+0x1c8>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcMem, Btc_DtcDescriptionLength18) == HAL_BUSY);
 8000f38:	bf00      	nop
 8000f3a:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <Btc_RequestState+0x320>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a5c      	ldr	r2, [pc, #368]	; (80010b0 <Btc_RequestState+0x324>)
 8000f40:	8812      	ldrh	r2, [r2, #0]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4836      	ldr	r0, [pc, #216]	; (8001020 <Btc_RequestState+0x294>)
 8000f46:	f00b f9db 	bl	800c300 <HAL_UART_Transmit_IT>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d0f4      	beq.n	8000f3a <Btc_RequestState+0x1ae>
			Rte_Runnable_Wdg_MainFunction();
 8000f50:	f010 fdac 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[0] != 0)
 8000f54:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <Btc_RequestState+0x32c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00d      	beq.n	8000f78 <Btc_RequestState+0x1ec>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLowBeamLeft, Btc_DtcDescriptionLength1) == HAL_BUSY);
 8000f5c:	bf00      	nop
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <Btc_RequestState+0x298>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a31      	ldr	r2, [pc, #196]	; (8001028 <Btc_RequestState+0x29c>)
 8000f64:	8812      	ldrh	r2, [r2, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	482d      	ldr	r0, [pc, #180]	; (8001020 <Btc_RequestState+0x294>)
 8000f6a:	f00b f9c9 	bl	800c300 <HAL_UART_Transmit_IT>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d0f4      	beq.n	8000f5e <Btc_RequestState+0x1d2>
			Rte_Runnable_Wdg_MainFunction();
 8000f74:	f010 fd9a 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[1] != 0)
 8000f78:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <Btc_RequestState+0x32c>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00d      	beq.n	8000f9c <Btc_RequestState+0x210>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLowBeamRight, Btc_DtcDescriptionLength2) == HAL_BUSY);
 8000f80:	bf00      	nop
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <Btc_RequestState+0x2a0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a2a      	ldr	r2, [pc, #168]	; (8001030 <Btc_RequestState+0x2a4>)
 8000f88:	8812      	ldrh	r2, [r2, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4824      	ldr	r0, [pc, #144]	; (8001020 <Btc_RequestState+0x294>)
 8000f8e:	f00b f9b7 	bl	800c300 <HAL_UART_Transmit_IT>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d0f4      	beq.n	8000f82 <Btc_RequestState+0x1f6>
			Rte_Runnable_Wdg_MainFunction();
 8000f98:	f010 fd88 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[2] != 0)
 8000f9c:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <Btc_RequestState+0x32c>)
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00d      	beq.n	8000fc0 <Btc_RequestState+0x234>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearPositionLightLeft, Btc_DtcDescriptionLength3) == HAL_BUSY);
 8000fa4:	bf00      	nop
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <Btc_RequestState+0x2a8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <Btc_RequestState+0x2ac>)
 8000fac:	8812      	ldrh	r2, [r2, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481b      	ldr	r0, [pc, #108]	; (8001020 <Btc_RequestState+0x294>)
 8000fb2:	f00b f9a5 	bl	800c300 <HAL_UART_Transmit_IT>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d0f4      	beq.n	8000fa6 <Btc_RequestState+0x21a>
			Rte_Runnable_Wdg_MainFunction();
 8000fbc:	f010 fd76 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[3] != 0)
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <Btc_RequestState+0x32c>)
 8000fc2:	78db      	ldrb	r3, [r3, #3]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00d      	beq.n	8000fe4 <Btc_RequestState+0x258>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearPositionLightRight, Btc_DtcDescriptionLength4) == HAL_BUSY);
 8000fc8:	bf00      	nop
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <Btc_RequestState+0x2b0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <Btc_RequestState+0x2b4>)
 8000fd0:	8812      	ldrh	r2, [r2, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4812      	ldr	r0, [pc, #72]	; (8001020 <Btc_RequestState+0x294>)
 8000fd6:	f00b f993 	bl	800c300 <HAL_UART_Transmit_IT>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d0f4      	beq.n	8000fca <Btc_RequestState+0x23e>
			Rte_Runnable_Wdg_MainFunction();
 8000fe0:	f010 fd64 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[4] != 0)
 8000fe4:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <Btc_RequestState+0x32c>)
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00d      	beq.n	8001008 <Btc_RequestState+0x27c>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRightTurnSignalFront, Btc_DtcDescriptionLength5) == HAL_BUSY);
 8000fec:	bf00      	nop
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <Btc_RequestState+0x2b8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <Btc_RequestState+0x2bc>)
 8000ff4:	8812      	ldrh	r2, [r2, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <Btc_RequestState+0x294>)
 8000ffa:	f00b f981 	bl	800c300 <HAL_UART_Transmit_IT>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b02      	cmp	r3, #2
 8001002:	d0f4      	beq.n	8000fee <Btc_RequestState+0x262>
			Rte_Runnable_Wdg_MainFunction();
 8001004:	f010 fd52 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[6] != 0)
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <Btc_RequestState+0x32c>)
 800100a:	799b      	ldrb	r3, [r3, #6]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d063      	beq.n	80010d8 <Btc_RequestState+0x34c>
 8001010:	e054      	b.n	80010bc <Btc_RequestState+0x330>
 8001012:	bf00      	nop
 8001014:	200000e2 	.word	0x200000e2
 8001018:	20000000 	.word	0x20000000
 800101c:	200000fa 	.word	0x200000fa
 8001020:	20000810 	.word	0x20000810
 8001024:	20000004 	.word	0x20000004
 8001028:	200000fc 	.word	0x200000fc
 800102c:	20000008 	.word	0x20000008
 8001030:	200000fe 	.word	0x200000fe
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000100 	.word	0x20000100
 800103c:	20000010 	.word	0x20000010
 8001040:	20000102 	.word	0x20000102
 8001044:	20000014 	.word	0x20000014
 8001048:	20000104 	.word	0x20000104
 800104c:	20000018 	.word	0x20000018
 8001050:	20000106 	.word	0x20000106
 8001054:	2000001c 	.word	0x2000001c
 8001058:	20000108 	.word	0x20000108
 800105c:	20000024 	.word	0x20000024
 8001060:	2000010a 	.word	0x2000010a
 8001064:	20000020 	.word	0x20000020
 8001068:	2000010c 	.word	0x2000010c
 800106c:	20000028 	.word	0x20000028
 8001070:	2000010e 	.word	0x2000010e
 8001074:	2000002c 	.word	0x2000002c
 8001078:	20000110 	.word	0x20000110
 800107c:	20000030 	.word	0x20000030
 8001080:	20000112 	.word	0x20000112
 8001084:	20000034 	.word	0x20000034
 8001088:	20000114 	.word	0x20000114
 800108c:	20000038 	.word	0x20000038
 8001090:	20000116 	.word	0x20000116
 8001094:	2000003c 	.word	0x2000003c
 8001098:	20000118 	.word	0x20000118
 800109c:	20000040 	.word	0x20000040
 80010a0:	2000011a 	.word	0x2000011a
 80010a4:	20000044 	.word	0x20000044
 80010a8:	2000011c 	.word	0x2000011c
 80010ac:	20000048 	.word	0x20000048
 80010b0:	2000011e 	.word	0x2000011e
 80010b4:	20000890 	.word	0x20000890
 80010b8:	20000170 	.word	0x20000170
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLeftTurnSignalFront, Btc_DtcDescriptionLength6) == HAL_BUSY);
 80010bc:	bf00      	nop
 80010be:	4b68      	ldr	r3, [pc, #416]	; (8001260 <Btc_RequestState+0x4d4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a68      	ldr	r2, [pc, #416]	; (8001264 <Btc_RequestState+0x4d8>)
 80010c4:	8812      	ldrh	r2, [r2, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4867      	ldr	r0, [pc, #412]	; (8001268 <Btc_RequestState+0x4dc>)
 80010ca:	f00b f919 	bl	800c300 <HAL_UART_Transmit_IT>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d0f4      	beq.n	80010be <Btc_RequestState+0x332>
			Rte_Runnable_Wdg_MainFunction();
 80010d4:	f010 fcea 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[7] != 0)
 80010d8:	4b64      	ldr	r3, [pc, #400]	; (800126c <Btc_RequestState+0x4e0>)
 80010da:	79db      	ldrb	r3, [r3, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00d      	beq.n	80010fc <Btc_RequestState+0x370>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLeftTurnSignalRear, Btc_DtcDescriptionLength7) == HAL_BUSY);
 80010e0:	bf00      	nop
 80010e2:	4b63      	ldr	r3, [pc, #396]	; (8001270 <Btc_RequestState+0x4e4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a63      	ldr	r2, [pc, #396]	; (8001274 <Btc_RequestState+0x4e8>)
 80010e8:	8812      	ldrh	r2, [r2, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	485e      	ldr	r0, [pc, #376]	; (8001268 <Btc_RequestState+0x4dc>)
 80010ee:	f00b f907 	bl	800c300 <HAL_UART_Transmit_IT>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d0f4      	beq.n	80010e2 <Btc_RequestState+0x356>
			Rte_Runnable_Wdg_MainFunction();
 80010f8:	f010 fcd8 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[8] != 0)
 80010fc:	4b5b      	ldr	r3, [pc, #364]	; (800126c <Btc_RequestState+0x4e0>)
 80010fe:	7a1b      	ldrb	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00d      	beq.n	8001120 <Btc_RequestState+0x394>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRightBrakeLight, Btc_DtcDescriptionLength8) == HAL_BUSY);
 8001104:	bf00      	nop
 8001106:	4b5c      	ldr	r3, [pc, #368]	; (8001278 <Btc_RequestState+0x4ec>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a5c      	ldr	r2, [pc, #368]	; (800127c <Btc_RequestState+0x4f0>)
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4855      	ldr	r0, [pc, #340]	; (8001268 <Btc_RequestState+0x4dc>)
 8001112:	f00b f8f5 	bl	800c300 <HAL_UART_Transmit_IT>
 8001116:	4603      	mov	r3, r0
 8001118:	2b02      	cmp	r3, #2
 800111a:	d0f4      	beq.n	8001106 <Btc_RequestState+0x37a>
			Rte_Runnable_Wdg_MainFunction();
 800111c:	f010 fcc6 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_DtcArray[9] != 0)
 8001120:	4b52      	ldr	r3, [pc, #328]	; (800126c <Btc_RequestState+0x4e0>)
 8001122:	7a5b      	ldrb	r3, [r3, #9]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00d      	beq.n	8001144 <Btc_RequestState+0x3b8>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLeftBrakeLight, Btc_DtcDescriptionLength9) == HAL_BUSY);
 8001128:	bf00      	nop
 800112a:	4b55      	ldr	r3, [pc, #340]	; (8001280 <Btc_RequestState+0x4f4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a55      	ldr	r2, [pc, #340]	; (8001284 <Btc_RequestState+0x4f8>)
 8001130:	8812      	ldrh	r2, [r2, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	484c      	ldr	r0, [pc, #304]	; (8001268 <Btc_RequestState+0x4dc>)
 8001136:	f00b f8e3 	bl	800c300 <HAL_UART_Transmit_IT>
 800113a:	4603      	mov	r3, r0
 800113c:	2b02      	cmp	r3, #2
 800113e:	d0f4      	beq.n	800112a <Btc_RequestState+0x39e>
			Rte_Runnable_Wdg_MainFunction();
 8001140:	f010 fcb4 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[10] != 0)
 8001144:	4b50      	ldr	r3, [pc, #320]	; (8001288 <Btc_RequestState+0x4fc>)
 8001146:	7a9b      	ldrb	r3, [r3, #10]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00d      	beq.n	8001168 <Btc_RequestState+0x3dc>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLightSensor, Btc_DtcDescriptionLength10) == HAL_BUSY);
 800114c:	bf00      	nop
 800114e:	4b4f      	ldr	r3, [pc, #316]	; (800128c <Btc_RequestState+0x500>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <Btc_RequestState+0x504>)
 8001154:	8812      	ldrh	r2, [r2, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	4843      	ldr	r0, [pc, #268]	; (8001268 <Btc_RequestState+0x4dc>)
 800115a:	f00b f8d1 	bl	800c300 <HAL_UART_Transmit_IT>
 800115e:	4603      	mov	r3, r0
 8001160:	2b02      	cmp	r3, #2
 8001162:	d0f4      	beq.n	800114e <Btc_RequestState+0x3c2>
			Rte_Runnable_Wdg_MainFunction();
 8001164:	f010 fca2 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[11] != 0)
 8001168:	4b47      	ldr	r3, [pc, #284]	; (8001288 <Btc_RequestState+0x4fc>)
 800116a:	7adb      	ldrb	r3, [r3, #11]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00d      	beq.n	800118c <Btc_RequestState+0x400>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcVibrationSensor, Btc_DtcDescriptionLength11) == HAL_BUSY);
 8001170:	bf00      	nop
 8001172:	4b48      	ldr	r3, [pc, #288]	; (8001294 <Btc_RequestState+0x508>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a48      	ldr	r2, [pc, #288]	; (8001298 <Btc_RequestState+0x50c>)
 8001178:	8812      	ldrh	r2, [r2, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	483a      	ldr	r0, [pc, #232]	; (8001268 <Btc_RequestState+0x4dc>)
 800117e:	f00b f8bf 	bl	800c300 <HAL_UART_Transmit_IT>
 8001182:	4603      	mov	r3, r0
 8001184:	2b02      	cmp	r3, #2
 8001186:	d0f4      	beq.n	8001172 <Btc_RequestState+0x3e6>
			Rte_Runnable_Wdg_MainFunction();
 8001188:	f010 fc90 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[13] != 0)
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <Btc_RequestState+0x4fc>)
 800118e:	7b5b      	ldrb	r3, [r3, #13]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00d      	beq.n	80011b0 <Btc_RequestState+0x424>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcTemperatureSensor, Btc_DtcDescriptionLength12) == HAL_BUSY);
 8001194:	bf00      	nop
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <Btc_RequestState+0x510>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a41      	ldr	r2, [pc, #260]	; (80012a0 <Btc_RequestState+0x514>)
 800119c:	8812      	ldrh	r2, [r2, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	4831      	ldr	r0, [pc, #196]	; (8001268 <Btc_RequestState+0x4dc>)
 80011a2:	f00b f8ad 	bl	800c300 <HAL_UART_Transmit_IT>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d0f4      	beq.n	8001196 <Btc_RequestState+0x40a>
			Rte_Runnable_Wdg_MainFunction();
 80011ac:	f010 fc7e 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[14] != 0)
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <Btc_RequestState+0x4fc>)
 80011b2:	7b9b      	ldrb	r3, [r3, #14]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00d      	beq.n	80011d4 <Btc_RequestState+0x448>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearParkingSensor, Btc_DtcDescriptionLength13) == HAL_BUSY);
 80011b8:	bf00      	nop
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <Btc_RequestState+0x518>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a3a      	ldr	r2, [pc, #232]	; (80012a8 <Btc_RequestState+0x51c>)
 80011c0:	8812      	ldrh	r2, [r2, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4828      	ldr	r0, [pc, #160]	; (8001268 <Btc_RequestState+0x4dc>)
 80011c6:	f00b f89b 	bl	800c300 <HAL_UART_Transmit_IT>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d0f4      	beq.n	80011ba <Btc_RequestState+0x42e>
			Rte_Runnable_Wdg_MainFunction();
 80011d0:	f010 fc6c 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[15] != 0)
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <Btc_RequestState+0x4fc>)
 80011d6:	7bdb      	ldrb	r3, [r3, #15]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00d      	beq.n	80011f8 <Btc_RequestState+0x46c>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcFrontParkingSensor, Btc_DtcDescriptionLength14) == HAL_BUSY);
 80011dc:	bf00      	nop
 80011de:	4b33      	ldr	r3, [pc, #204]	; (80012ac <Btc_RequestState+0x520>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a33      	ldr	r2, [pc, #204]	; (80012b0 <Btc_RequestState+0x524>)
 80011e4:	8812      	ldrh	r2, [r2, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	481f      	ldr	r0, [pc, #124]	; (8001268 <Btc_RequestState+0x4dc>)
 80011ea:	f00b f889 	bl	800c300 <HAL_UART_Transmit_IT>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d0f4      	beq.n	80011de <Btc_RequestState+0x452>
			Rte_Runnable_Wdg_MainFunction();
 80011f4:	f010 fc5a 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[20] != 0)
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <Btc_RequestState+0x4fc>)
 80011fa:	7d1b      	ldrb	r3, [r3, #20]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00d      	beq.n	800121c <Btc_RequestState+0x490>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLcd, Btc_DtcDescriptionLength15) == HAL_BUSY);
 8001200:	bf00      	nop
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <Btc_RequestState+0x528>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a2c      	ldr	r2, [pc, #176]	; (80012b8 <Btc_RequestState+0x52c>)
 8001208:	8812      	ldrh	r2, [r2, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	4816      	ldr	r0, [pc, #88]	; (8001268 <Btc_RequestState+0x4dc>)
 800120e:	f00b f877 	bl	800c300 <HAL_UART_Transmit_IT>
 8001212:	4603      	mov	r3, r0
 8001214:	2b02      	cmp	r3, #2
 8001216:	d0f4      	beq.n	8001202 <Btc_RequestState+0x476>
			Rte_Runnable_Wdg_MainFunction();
 8001218:	f010 fc48 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[21] != 0 || Dem_DtcArray[22] != 0 || Dem_DtcArray[23] != 0)
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <Btc_RequestState+0x4fc>)
 800121e:	7d5b      	ldrb	r3, [r3, #21]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d107      	bne.n	8001234 <Btc_RequestState+0x4a8>
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <Btc_RequestState+0x4fc>)
 8001226:	7d9b      	ldrb	r3, [r3, #22]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d103      	bne.n	8001234 <Btc_RequestState+0x4a8>
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <Btc_RequestState+0x4fc>)
 800122e:	7ddb      	ldrb	r3, [r3, #23]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00d      	beq.n	8001250 <Btc_RequestState+0x4c4>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcHardware, Btc_DtcDescriptionLength16) == HAL_BUSY);
 8001234:	bf00      	nop
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <Btc_RequestState+0x530>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <Btc_RequestState+0x534>)
 800123c:	8812      	ldrh	r2, [r2, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <Btc_RequestState+0x4dc>)
 8001242:	f00b f85d 	bl	800c300 <HAL_UART_Transmit_IT>
 8001246:	4603      	mov	r3, r0
 8001248:	2b02      	cmp	r3, #2
 800124a:	d0f4      	beq.n	8001236 <Btc_RequestState+0x4aa>
			Rte_Runnable_Wdg_MainFunction();
 800124c:	f010 fc2e 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		Rte_Runnable_Wdg_MainFunction();
 8001250:	f010 fc2c 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		Btc_ReceivedDataOnBluetooth = 0;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <Btc_RequestState+0x538>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000018 	.word	0x20000018
 8001264:	20000106 	.word	0x20000106
 8001268:	20000810 	.word	0x20000810
 800126c:	20000170 	.word	0x20000170
 8001270:	2000001c 	.word	0x2000001c
 8001274:	20000108 	.word	0x20000108
 8001278:	20000024 	.word	0x20000024
 800127c:	2000010a 	.word	0x2000010a
 8001280:	20000020 	.word	0x20000020
 8001284:	2000010c 	.word	0x2000010c
 8001288:	20000890 	.word	0x20000890
 800128c:	20000028 	.word	0x20000028
 8001290:	2000010e 	.word	0x2000010e
 8001294:	2000002c 	.word	0x2000002c
 8001298:	20000110 	.word	0x20000110
 800129c:	20000030 	.word	0x20000030
 80012a0:	20000112 	.word	0x20000112
 80012a4:	20000034 	.word	0x20000034
 80012a8:	20000114 	.word	0x20000114
 80012ac:	20000038 	.word	0x20000038
 80012b0:	20000116 	.word	0x20000116
 80012b4:	2000003c 	.word	0x2000003c
 80012b8:	20000118 	.word	0x20000118
 80012bc:	20000040 	.word	0x20000040
 80012c0:	2000011a 	.word	0x2000011a
 80012c4:	200000e2 	.word	0x200000e2

080012c8 <Btc_RxVal>:
/***********************************************************************************
* Function: Btc_RxVal													   		   *
* Description: Process bluetooth commands.	 		   							   *
************************************************************************************/
VOID Btc_RxVal()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 80012cc:	f010 fe10 	bl	8011ef0 <Crc_VerifyUartData>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 832d 	bne.w	8001932 <Btc_RxVal+0x66a>
	{
		if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80012d8:	4bbc      	ldr	r3, [pc, #752]	; (80015cc <Btc_RxVal+0x304>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d11d      	bne.n	800131c <Btc_RxVal+0x54>
		{
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN &&
 80012e0:	4bbb      	ldr	r3, [pc, #748]	; (80015d0 <Btc_RxVal+0x308>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b1d      	cmp	r3, #29
 80012e6:	d90a      	bls.n	80012fe <Btc_RxVal+0x36>
				Btc_ReceivedDataOnBluetooth <= BTC_RX_HVAC_FANVALUE_MAX)
 80012e8:	4bb9      	ldr	r3, [pc, #740]	; (80015d0 <Btc_RxVal+0x308>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN &&
 80012ec:	2b25      	cmp	r3, #37	; 0x25
 80012ee:	d806      	bhi.n	80012fe <Btc_RxVal+0x36>
			{
				Btc_FanValue = Btc_ReceivedDataOnBluetooth;
 80012f0:	4bb7      	ldr	r3, [pc, #732]	; (80015d0 <Btc_RxVal+0x308>)
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	4bb7      	ldr	r3, [pc, #732]	; (80015d4 <Btc_RxVal+0x30c>)
 80012f6:	701a      	strb	r2, [r3, #0]
				Rte_Write_Hvac_HvacPort_Hvac_FanValue(&Btc_FanValue);
 80012f8:	48b6      	ldr	r0, [pc, #728]	; (80015d4 <Btc_RxVal+0x30c>)
 80012fa:	f010 f9e1 	bl	80116c0 <Rte_Write_Hvac_HvacPort_Hvac_FanValue>
			else
			{
				/* do nothing */
			}

			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN &&
 80012fe:	4bb4      	ldr	r3, [pc, #720]	; (80015d0 <Btc_RxVal+0x308>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b25      	cmp	r3, #37	; 0x25
 8001304:	d90a      	bls.n	800131c <Btc_RxVal+0x54>
					Btc_ReceivedDataOnBluetooth <= BTC_RX_HVAC_TEMPERATUREVALUE_MAX)
 8001306:	4bb2      	ldr	r3, [pc, #712]	; (80015d0 <Btc_RxVal+0x308>)
 8001308:	781b      	ldrb	r3, [r3, #0]
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN &&
 800130a:	2b36      	cmp	r3, #54	; 0x36
 800130c:	d806      	bhi.n	800131c <Btc_RxVal+0x54>
			{
				Btc_TemperatureValue = Btc_ReceivedDataOnBluetooth;
 800130e:	4bb0      	ldr	r3, [pc, #704]	; (80015d0 <Btc_RxVal+0x308>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4bb1      	ldr	r3, [pc, #708]	; (80015d8 <Btc_RxVal+0x310>)
 8001314:	701a      	strb	r2, [r3, #0]
				Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue(&Btc_TemperatureValue);
 8001316:	48b0      	ldr	r0, [pc, #704]	; (80015d8 <Btc_RxVal+0x310>)
 8001318:	f010 f9e4 	bl	80116e4 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue>
		{
			/* do nothing */
		}

		/* Process the command on each case and update the respective variable. */
		switch(Btc_ReceivedDataOnBluetooth)
 800131c:	4bac      	ldr	r3, [pc, #688]	; (80015d0 <Btc_RxVal+0x308>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	2b46      	cmp	r3, #70	; 0x46
 8001324:	f200 829b 	bhi.w	800185e <Btc_RxVal+0x596>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <Btc_RxVal+0x68>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	080016a9 	.word	0x080016a9
 8001334:	080016b7 	.word	0x080016b7
 8001338:	080016c5 	.word	0x080016c5
 800133c:	080016e3 	.word	0x080016e3
 8001340:	0800185f 	.word	0x0800185f
 8001344:	0800185f 	.word	0x0800185f
 8001348:	080016fb 	.word	0x080016fb
 800134c:	0800171f 	.word	0x0800171f
 8001350:	08001737 	.word	0x08001737
 8001354:	0800175b 	.word	0x0800175b
 8001358:	08001773 	.word	0x08001773
 800135c:	0800178b 	.word	0x0800178b
 8001360:	080017a3 	.word	0x080017a3
 8001364:	080017bb 	.word	0x080017bb
 8001368:	080017d3 	.word	0x080017d3
 800136c:	080017eb 	.word	0x080017eb
 8001370:	08001803 	.word	0x08001803
 8001374:	0800181b 	.word	0x0800181b
 8001378:	08001833 	.word	0x08001833
 800137c:	08001849 	.word	0x08001849
 8001380:	08001619 	.word	0x08001619
 8001384:	08001631 	.word	0x08001631
 8001388:	08001649 	.word	0x08001649
 800138c:	08001661 	.word	0x08001661
 8001390:	08001679 	.word	0x08001679
 8001394:	08001691 	.word	0x08001691
 8001398:	0800185f 	.word	0x0800185f
 800139c:	0800185f 	.word	0x0800185f
 80013a0:	0800185f 	.word	0x0800185f
 80013a4:	0800185f 	.word	0x0800185f
 80013a8:	0800185f 	.word	0x0800185f
 80013ac:	0800185f 	.word	0x0800185f
 80013b0:	0800185f 	.word	0x0800185f
 80013b4:	0800185f 	.word	0x0800185f
 80013b8:	0800185f 	.word	0x0800185f
 80013bc:	0800185f 	.word	0x0800185f
 80013c0:	0800185f 	.word	0x0800185f
 80013c4:	0800185f 	.word	0x0800185f
 80013c8:	0800185f 	.word	0x0800185f
 80013cc:	0800185f 	.word	0x0800185f
 80013d0:	0800185f 	.word	0x0800185f
 80013d4:	0800185f 	.word	0x0800185f
 80013d8:	0800185f 	.word	0x0800185f
 80013dc:	0800185f 	.word	0x0800185f
 80013e0:	0800185f 	.word	0x0800185f
 80013e4:	0800185f 	.word	0x0800185f
 80013e8:	0800185f 	.word	0x0800185f
 80013ec:	0800185f 	.word	0x0800185f
 80013f0:	0800185f 	.word	0x0800185f
 80013f4:	0800185f 	.word	0x0800185f
 80013f8:	0800185f 	.word	0x0800185f
 80013fc:	0800185f 	.word	0x0800185f
 8001400:	0800185f 	.word	0x0800185f
 8001404:	0800185f 	.word	0x0800185f
 8001408:	0800144d 	.word	0x0800144d
 800140c:	08001465 	.word	0x08001465
 8001410:	0800147d 	.word	0x0800147d
 8001414:	08001495 	.word	0x08001495
 8001418:	080014ad 	.word	0x080014ad
 800141c:	080014c5 	.word	0x080014c5
 8001420:	080014dd 	.word	0x080014dd
 8001424:	080014f5 	.word	0x080014f5
 8001428:	0800153d 	.word	0x0800153d
 800142c:	08001555 	.word	0x08001555
 8001430:	0800156d 	.word	0x0800156d
 8001434:	08001591 	.word	0x08001591
 8001438:	0800185f 	.word	0x0800185f
 800143c:	080015b5 	.word	0x080015b5
 8001440:	08001601 	.word	0x08001601
 8001444:	0800150d 	.word	0x0800150d
 8001448:	08001525 	.word	0x08001525
		{
			case BTC_RX_HVAC_LEGVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800144c:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <Btc_RxVal+0x304>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	f040 8206 	bne.w	8001862 <Btc_RxVal+0x59a>
				{
					Btc_LegVent = STD_HIGH;
 8001456:	4b61      	ldr	r3, [pc, #388]	; (80015dc <Btc_RxVal+0x314>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_LegVent(&Btc_LegVent);
 800145c:	485f      	ldr	r0, [pc, #380]	; (80015dc <Btc_RxVal+0x314>)
 800145e:	f010 f953 	bl	8011708 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001462:	e1fe      	b.n	8001862 <Btc_RxVal+0x59a>
			case BTC_RX_HVAC_LEGVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001464:	4b59      	ldr	r3, [pc, #356]	; (80015cc <Btc_RxVal+0x304>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	f040 81fc 	bne.w	8001866 <Btc_RxVal+0x59e>
				{
					Btc_LegVent = STD_LOW;
 800146e:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <Btc_RxVal+0x314>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_LegVent(&Btc_LegVent);
 8001474:	4859      	ldr	r0, [pc, #356]	; (80015dc <Btc_RxVal+0x314>)
 8001476:	f010 f947 	bl	8011708 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 800147a:	e1f4      	b.n	8001866 <Btc_RxVal+0x59e>
			case BTC_RX_HVAC_MIDVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <Btc_RxVal+0x304>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	f040 81f2 	bne.w	800186a <Btc_RxVal+0x5a2>
				{
					Btc_MidVent = STD_HIGH;
 8001486:	4b56      	ldr	r3, [pc, #344]	; (80015e0 <Btc_RxVal+0x318>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_MidVent(&Btc_MidVent);
 800148c:	4854      	ldr	r0, [pc, #336]	; (80015e0 <Btc_RxVal+0x318>)
 800148e:	f010 f94b 	bl	8011728 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001492:	e1ea      	b.n	800186a <Btc_RxVal+0x5a2>
			case BTC_RX_HVAC_MIDVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001494:	4b4d      	ldr	r3, [pc, #308]	; (80015cc <Btc_RxVal+0x304>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	f040 81e8 	bne.w	800186e <Btc_RxVal+0x5a6>
				{
					Btc_MidVent = STD_LOW;
 800149e:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <Btc_RxVal+0x318>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_MidVent(&Btc_MidVent);
 80014a4:	484e      	ldr	r0, [pc, #312]	; (80015e0 <Btc_RxVal+0x318>)
 80014a6:	f010 f93f 	bl	8011728 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 80014aa:	e1e0      	b.n	800186e <Btc_RxVal+0x5a6>
			case BTC_RX_HVAC_WINDSHIELDVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80014ac:	4b47      	ldr	r3, [pc, #284]	; (80015cc <Btc_RxVal+0x304>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	f040 81de 	bne.w	8001872 <Btc_RxVal+0x5aa>
				{
					Btc_WindshieldVent = STD_HIGH;
 80014b6:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <Btc_RxVal+0x31c>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(&Btc_WindshieldVent);
 80014bc:	4849      	ldr	r0, [pc, #292]	; (80015e4 <Btc_RxVal+0x31c>)
 80014be:	f010 f943 	bl	8011748 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 80014c2:	e1d6      	b.n	8001872 <Btc_RxVal+0x5aa>
			case BTC_RX_HVAC_WINDSHIELDVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80014c4:	4b41      	ldr	r3, [pc, #260]	; (80015cc <Btc_RxVal+0x304>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	f040 81d4 	bne.w	8001876 <Btc_RxVal+0x5ae>
				{
					Btc_WindshieldVent = STD_LOW;
 80014ce:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <Btc_RxVal+0x31c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(&Btc_WindshieldVent);
 80014d4:	4843      	ldr	r0, [pc, #268]	; (80015e4 <Btc_RxVal+0x31c>)
 80014d6:	f010 f937 	bl	8011748 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 80014da:	e1cc      	b.n	8001876 <Btc_RxVal+0x5ae>
			case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80014dc:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <Btc_RxVal+0x304>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f040 81ca 	bne.w	800187a <Btc_RxVal+0x5b2>
				{
					Btc_WindshieldDefrost = STD_HIGH;
 80014e6:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <Btc_RxVal+0x320>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(&Btc_WindshieldDefrost);
 80014ec:	483e      	ldr	r0, [pc, #248]	; (80015e8 <Btc_RxVal+0x320>)
 80014ee:	f010 f93b 	bl	8011768 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 80014f2:	e1c2      	b.n	800187a <Btc_RxVal+0x5b2>
			case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <Btc_RxVal+0x304>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	f040 81c0 	bne.w	800187e <Btc_RxVal+0x5b6>
				{
					Btc_WindshieldDefrost = STD_LOW;
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <Btc_RxVal+0x320>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(&Btc_WindshieldDefrost);
 8001504:	4838      	ldr	r0, [pc, #224]	; (80015e8 <Btc_RxVal+0x320>)
 8001506:	f010 f92f 	bl	8011768 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 800150a:	e1b8      	b.n	800187e <Btc_RxVal+0x5b6>
			case BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <Btc_RxVal+0x304>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	f040 81b6 	bne.w	8001882 <Btc_RxVal+0x5ba>
				{
					Btc_RearWindshieldDefrost = STD_HIGH;
 8001516:	4b35      	ldr	r3, [pc, #212]	; (80015ec <Btc_RxVal+0x324>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(&Btc_RearWindshieldDefrost);
 800151c:	4833      	ldr	r0, [pc, #204]	; (80015ec <Btc_RxVal+0x324>)
 800151e:	f010 f933 	bl	8011788 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001522:	e1ae      	b.n	8001882 <Btc_RxVal+0x5ba>
			case BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <Btc_RxVal+0x304>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	f040 81ac 	bne.w	8001886 <Btc_RxVal+0x5be>
				{
					Btc_RearWindshieldDefrost = STD_LOW;
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <Btc_RxVal+0x324>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(&Btc_RearWindshieldDefrost);
 8001534:	482d      	ldr	r0, [pc, #180]	; (80015ec <Btc_RxVal+0x324>)
 8001536:	f010 f927 	bl	8011788 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 800153a:	e1a4      	b.n	8001886 <Btc_RxVal+0x5be>
			case BTC_RX_HVAC_AC_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <Btc_RxVal+0x304>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	f040 81a2 	bne.w	800188a <Btc_RxVal+0x5c2>
				{
					Btc_Ac = STD_HIGH;
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <Btc_RxVal+0x328>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Ac(&Btc_Ac);
 800154c:	4828      	ldr	r0, [pc, #160]	; (80015f0 <Btc_RxVal+0x328>)
 800154e:	f010 f92b 	bl	80117a8 <Rte_Write_Hvac_HvacPort_Hvac_Ac>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001552:	e19a      	b.n	800188a <Btc_RxVal+0x5c2>
			case BTC_RX_HVAC_AC_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <Btc_RxVal+0x304>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	f040 8198 	bne.w	800188e <Btc_RxVal+0x5c6>
				{
					Btc_Ac = STD_LOW;
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <Btc_RxVal+0x328>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Ac(&Btc_Ac);
 8001564:	4822      	ldr	r0, [pc, #136]	; (80015f0 <Btc_RxVal+0x328>)
 8001566:	f010 f91f 	bl	80117a8 <Rte_Write_Hvac_HvacPort_Hvac_Ac>
				}
				else
				{
					/* do nothing */
				}
				break;
 800156a:	e190      	b.n	800188e <Btc_RxVal+0x5c6>
			case BTC_RX_HVAC_RECIRCULATION:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <Btc_RxVal+0x304>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	f040 818e 	bne.w	8001892 <Btc_RxVal+0x5ca>
				{
					Btc_Recirculation = STD_HIGH;
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <Btc_RxVal+0x32c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
					Btc_NoRecirculation = STD_LOW;
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <Btc_RxVal+0x330>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Recirculation(&Btc_Recirculation);
 8001582:	481c      	ldr	r0, [pc, #112]	; (80015f4 <Btc_RxVal+0x32c>)
 8001584:	f010 f920 	bl	80117c8 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>
					Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(&Btc_NoRecirculation);
 8001588:	481b      	ldr	r0, [pc, #108]	; (80015f8 <Btc_RxVal+0x330>)
 800158a:	f010 f92d 	bl	80117e8 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>
				}
				else
				{
					/* do nothing */
				}
				break;
 800158e:	e180      	b.n	8001892 <Btc_RxVal+0x5ca>
			case BTC_RX_HVAC_NORECIRCULATION:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <Btc_RxVal+0x304>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	f040 817e 	bne.w	8001896 <Btc_RxVal+0x5ce>
				{
					Btc_Recirculation = STD_LOW;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <Btc_RxVal+0x32c>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
					Btc_NoRecirculation = STD_HIGH;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <Btc_RxVal+0x330>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Recirculation(&Btc_Recirculation);
 80015a6:	4813      	ldr	r0, [pc, #76]	; (80015f4 <Btc_RxVal+0x32c>)
 80015a8:	f010 f90e 	bl	80117c8 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>
					Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(&Btc_NoRecirculation);
 80015ac:	4812      	ldr	r0, [pc, #72]	; (80015f8 <Btc_RxVal+0x330>)
 80015ae:	f010 f91b 	bl	80117e8 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>
				}
				else
				{
					/* do nothing */
				}
				break;
 80015b2:	e170      	b.n	8001896 <Btc_RxVal+0x5ce>
			case BTC_RX_HVAC_AUTOMATICMODE_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <Btc_RxVal+0x304>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f040 816e 	bne.w	800189a <Btc_RxVal+0x5d2>
				{
					Btc_AutomaticMode = STD_HIGH;
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <Btc_RxVal+0x334>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(&Btc_AutomaticMode);
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <Btc_RxVal+0x334>)
 80015c6:	f010 f91f 	bl	8011808 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>
				}
				else
				{
					/* do nothing */
				}
				break;
 80015ca:	e166      	b.n	800189a <Btc_RxVal+0x5d2>
 80015cc:	20000120 	.word	0x20000120
 80015d0:	200000e2 	.word	0x200000e2
 80015d4:	200000ef 	.word	0x200000ef
 80015d8:	200000f0 	.word	0x200000f0
 80015dc:	200000f1 	.word	0x200000f1
 80015e0:	200000f2 	.word	0x200000f2
 80015e4:	200000f3 	.word	0x200000f3
 80015e8:	200000f4 	.word	0x200000f4
 80015ec:	200000f5 	.word	0x200000f5
 80015f0:	200000f6 	.word	0x200000f6
 80015f4:	200000f7 	.word	0x200000f7
 80015f8:	200000f8 	.word	0x200000f8
 80015fc:	200000f9 	.word	0x200000f9
			case BTC_RX_HVAC_AUTOMATICMODE_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001600:	4ba9      	ldr	r3, [pc, #676]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	f040 814a 	bne.w	800189e <Btc_RxVal+0x5d6>
				{
					Btc_AutomaticMode = STD_LOW;
 800160a:	4ba8      	ldr	r3, [pc, #672]	; (80018ac <Btc_RxVal+0x5e4>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(&Btc_AutomaticMode);
 8001610:	48a6      	ldr	r0, [pc, #664]	; (80018ac <Btc_RxVal+0x5e4>)
 8001612:	f010 f8f9 	bl	8011808 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001616:	e142      	b.n	800189e <Btc_RxVal+0x5d6>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001618:	4ba3      	ldr	r3, [pc, #652]	; (80018a8 <Btc_RxVal+0x5e0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	f040 8140 	bne.w	80018a2 <Btc_RxVal+0x5da>
				{
					Btc_ReverseLight = STD_HIGH;
 8001622:	4ba3      	ldr	r3, [pc, #652]	; (80018b0 <Btc_RxVal+0x5e8>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8001628:	48a1      	ldr	r0, [pc, #644]	; (80018b0 <Btc_RxVal+0x5e8>)
 800162a:	f010 fae9 	bl	8011c00 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800162e:	e138      	b.n	80018a2 <Btc_RxVal+0x5da>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001630:	4b9d      	ldr	r3, [pc, #628]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	f040 8153 	bne.w	80018e0 <Btc_RxVal+0x618>
				{
					Btc_ReverseLight = STD_LOW;
 800163a:	4b9d      	ldr	r3, [pc, #628]	; (80018b0 <Btc_RxVal+0x5e8>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8001640:	489b      	ldr	r0, [pc, #620]	; (80018b0 <Btc_RxVal+0x5e8>)
 8001642:	f010 fadd 	bl	8011c00 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001646:	e14b      	b.n	80018e0 <Btc_RxVal+0x618>
			case BTC_RX_EXTLIGHTS_POSITIONZERO:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001648:	4b97      	ldr	r3, [pc, #604]	; (80018a8 <Btc_RxVal+0x5e0>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	f040 8149 	bne.w	80018e4 <Btc_RxVal+0x61c>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8001652:	4b98      	ldr	r3, [pc, #608]	; (80018b4 <Btc_RxVal+0x5ec>)
 8001654:	2217      	movs	r2, #23
 8001656:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8001658:	4896      	ldr	r0, [pc, #600]	; (80018b4 <Btc_RxVal+0x5ec>)
 800165a:	f010 faf1 	bl	8011c40 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800165e:	e141      	b.n	80018e4 <Btc_RxVal+0x61c>
			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001660:	4b91      	ldr	r3, [pc, #580]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	f040 813f 	bne.w	80018e8 <Btc_RxVal+0x620>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800166a:	4b92      	ldr	r3, [pc, #584]	; (80018b4 <Btc_RxVal+0x5ec>)
 800166c:	2218      	movs	r2, #24
 800166e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8001670:	4890      	ldr	r0, [pc, #576]	; (80018b4 <Btc_RxVal+0x5ec>)
 8001672:	f010 fae5 	bl	8011c40 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001676:	e137      	b.n	80018e8 <Btc_RxVal+0x620>
			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001678:	4b8b      	ldr	r3, [pc, #556]	; (80018a8 <Btc_RxVal+0x5e0>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	f040 8135 	bne.w	80018ec <Btc_RxVal+0x624>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8001682:	4b8c      	ldr	r3, [pc, #560]	; (80018b4 <Btc_RxVal+0x5ec>)
 8001684:	2219      	movs	r2, #25
 8001686:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8001688:	488a      	ldr	r0, [pc, #552]	; (80018b4 <Btc_RxVal+0x5ec>)
 800168a:	f010 fad9 	bl	8011c40 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800168e:	e12d      	b.n	80018ec <Btc_RxVal+0x624>
			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001690:	4b85      	ldr	r3, [pc, #532]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	f040 812b 	bne.w	80018f0 <Btc_RxVal+0x628>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 800169a:	4b86      	ldr	r3, [pc, #536]	; (80018b4 <Btc_RxVal+0x5ec>)
 800169c:	221a      	movs	r2, #26
 800169e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80016a0:	4884      	ldr	r0, [pc, #528]	; (80018b4 <Btc_RxVal+0x5ec>)
 80016a2:	f010 facd 	bl	8011c40 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80016a6:	e123      	b.n	80018f0 <Btc_RxVal+0x628>
			case BTC_RX_CENLOC_ON:
				Btc_CenLoc = STD_HIGH;
 80016a8:	4b83      	ldr	r3, [pc, #524]	; (80018b8 <Btc_RxVal+0x5f0>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 80016ae:	4882      	ldr	r0, [pc, #520]	; (80018b8 <Btc_RxVal+0x5f0>)
 80016b0:	f010 fa86 	bl	8011bc0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 80016b4:	e13d      	b.n	8001932 <Btc_RxVal+0x66a>
			case BTC_RX_CENLOC_OFF:
				Btc_CenLoc = STD_LOW;
 80016b6:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <Btc_RxVal+0x5f0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 80016bc:	487e      	ldr	r0, [pc, #504]	; (80018b8 <Btc_RxVal+0x5f0>)
 80016be:	f010 fa7f 	bl	8011bc0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 80016c2:	e136      	b.n	8001932 <Btc_RxVal+0x66a>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80016c4:	4b78      	ldr	r3, [pc, #480]	; (80018a8 <Btc_RxVal+0x5e0>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 8113 	bne.w	80018f4 <Btc_RxVal+0x62c>
				{
					Btc_HighBeam = STD_HIGH;
 80016ce:	4b7b      	ldr	r3, [pc, #492]	; (80018bc <Btc_RxVal+0x5f4>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
					Btc_FlashHighBeam = STD_LOW;
 80016d4:	4b7a      	ldr	r3, [pc, #488]	; (80018c0 <Btc_RxVal+0x5f8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 80016da:	4878      	ldr	r0, [pc, #480]	; (80018bc <Btc_RxVal+0x5f4>)
 80016dc:	f010 fac0 	bl	8011c60 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80016e0:	e108      	b.n	80018f4 <Btc_RxVal+0x62c>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80016e2:	4b71      	ldr	r3, [pc, #452]	; (80018a8 <Btc_RxVal+0x5e0>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	f040 8106 	bne.w	80018f8 <Btc_RxVal+0x630>
				{
					Btc_HighBeam = STD_LOW;
 80016ec:	4b73      	ldr	r3, [pc, #460]	; (80018bc <Btc_RxVal+0x5f4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 80016f2:	4872      	ldr	r0, [pc, #456]	; (80018bc <Btc_RxVal+0x5f4>)
 80016f4:	f010 fab4 	bl	8011c60 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80016f8:	e0fe      	b.n	80018f8 <Btc_RxVal+0x630>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80016fa:	4b6b      	ldr	r3, [pc, #428]	; (80018a8 <Btc_RxVal+0x5e0>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	f040 80fc 	bne.w	80018fc <Btc_RxVal+0x634>
				{
					Btc_TurnSignalLeft = STD_HIGH;
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <Btc_RxVal+0x5fc>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalRight = STD_LOW;
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <Btc_RxVal+0x600>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8001710:	486c      	ldr	r0, [pc, #432]	; (80018c4 <Btc_RxVal+0x5fc>)
 8001712:	f010 fac5 	bl	8011ca0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8001716:	486c      	ldr	r0, [pc, #432]	; (80018c8 <Btc_RxVal+0x600>)
 8001718:	f010 fad2 	bl	8011cc0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800171c:	e0ee      	b.n	80018fc <Btc_RxVal+0x634>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800171e:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	f040 80ec 	bne.w	8001900 <Btc_RxVal+0x638>
				{
					Btc_TurnSignalLeft = STD_LOW;
 8001728:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <Btc_RxVal+0x5fc>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 800172e:	4865      	ldr	r0, [pc, #404]	; (80018c4 <Btc_RxVal+0x5fc>)
 8001730:	f010 fab6 	bl	8011ca0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001734:	e0e4      	b.n	8001900 <Btc_RxVal+0x638>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001736:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	f040 80e2 	bne.w	8001904 <Btc_RxVal+0x63c>
				{
					Btc_TurnSignalRight = STD_HIGH;
 8001740:	4b61      	ldr	r3, [pc, #388]	; (80018c8 <Btc_RxVal+0x600>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalLeft = STD_LOW;
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <Btc_RxVal+0x5fc>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 800174c:	485d      	ldr	r0, [pc, #372]	; (80018c4 <Btc_RxVal+0x5fc>)
 800174e:	f010 faa7 	bl	8011ca0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8001752:	485d      	ldr	r0, [pc, #372]	; (80018c8 <Btc_RxVal+0x600>)
 8001754:	f010 fab4 	bl	8011cc0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001758:	e0d4      	b.n	8001904 <Btc_RxVal+0x63c>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800175a:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <Btc_RxVal+0x5e0>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	f040 80d2 	bne.w	8001908 <Btc_RxVal+0x640>
				{
					Btc_TurnSignalRight = STD_LOW;
 8001764:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <Btc_RxVal+0x600>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 800176a:	4857      	ldr	r0, [pc, #348]	; (80018c8 <Btc_RxVal+0x600>)
 800176c:	f010 faa8 	bl	8011cc0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001770:	e0ca      	b.n	8001908 <Btc_RxVal+0x640>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001772:	4b4d      	ldr	r3, [pc, #308]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	f040 80c8 	bne.w	800190c <Btc_RxVal+0x644>
				{
					Btc_HazardLight = STD_HIGH;
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <Btc_RxVal+0x604>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8001782:	4852      	ldr	r0, [pc, #328]	; (80018cc <Btc_RxVal+0x604>)
 8001784:	f010 faac 	bl	8011ce0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001788:	e0c0      	b.n	800190c <Btc_RxVal+0x644>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <Btc_RxVal+0x5e0>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	f040 80be 	bne.w	8001910 <Btc_RxVal+0x648>
				{
					Btc_HazardLight = STD_LOW;
 8001794:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <Btc_RxVal+0x604>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 800179a:	484c      	ldr	r0, [pc, #304]	; (80018cc <Btc_RxVal+0x604>)
 800179c:	f010 faa0 	bl	8011ce0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017a0:	e0b6      	b.n	8001910 <Btc_RxVal+0x648>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <Btc_RxVal+0x5e0>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	f040 80b4 	bne.w	8001914 <Btc_RxVal+0x64c>
				{
					Btc_FrontFogLight = STD_HIGH;
 80017ac:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <Btc_RxVal+0x608>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80017b2:	4847      	ldr	r0, [pc, #284]	; (80018d0 <Btc_RxVal+0x608>)
 80017b4:	f010 fa64 	bl	8011c80 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017b8:	e0ac      	b.n	8001914 <Btc_RxVal+0x64c>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <Btc_RxVal+0x5e0>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	f040 80aa 	bne.w	8001918 <Btc_RxVal+0x650>
				{
					Btc_FrontFogLight = STD_LOW;
 80017c4:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <Btc_RxVal+0x608>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80017ca:	4841      	ldr	r0, [pc, #260]	; (80018d0 <Btc_RxVal+0x608>)
 80017cc:	f010 fa58 	bl	8011c80 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017d0:	e0a2      	b.n	8001918 <Btc_RxVal+0x650>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017d2:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <Btc_RxVal+0x5e0>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	f040 80a0 	bne.w	800191c <Btc_RxVal+0x654>
				{
					Btc_RearFogLight = STD_HIGH;
 80017dc:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <Btc_RxVal+0x60c>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80017e2:	483c      	ldr	r0, [pc, #240]	; (80018d4 <Btc_RxVal+0x60c>)
 80017e4:	f010 fa8c 	bl	8011d00 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017e8:	e098      	b.n	800191c <Btc_RxVal+0x654>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <Btc_RxVal+0x5e0>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	f040 8096 	bne.w	8001920 <Btc_RxVal+0x658>
				{
					Btc_RearFogLight = STD_LOW;
 80017f4:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <Btc_RxVal+0x60c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80017fa:	4836      	ldr	r0, [pc, #216]	; (80018d4 <Btc_RxVal+0x60c>)
 80017fc:	f010 fa80 	bl	8011d00 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001800:	e08e      	b.n	8001920 <Btc_RxVal+0x658>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001802:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	f040 808c 	bne.w	8001924 <Btc_RxVal+0x65c>
				{
					Btc_BrakeLight = STD_HIGH;
 800180c:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <Btc_RxVal+0x610>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8001812:	4831      	ldr	r0, [pc, #196]	; (80018d8 <Btc_RxVal+0x610>)
 8001814:	f010 fa04 	bl	8011c20 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001818:	e084      	b.n	8001924 <Btc_RxVal+0x65c>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <Btc_RxVal+0x5e0>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	f040 8082 	bne.w	8001928 <Btc_RxVal+0x660>
				{
					Btc_BrakeLight = STD_LOW;
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <Btc_RxVal+0x610>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 800182a:	482b      	ldr	r0, [pc, #172]	; (80018d8 <Btc_RxVal+0x610>)
 800182c:	f010 f9f8 	bl	8011c20 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001830:	e07a      	b.n	8001928 <Btc_RxVal+0x660>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <Btc_RxVal+0x5e0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d178      	bne.n	800192c <Btc_RxVal+0x664>
				{
					Btc_IntLights = STD_HIGH;
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <Btc_RxVal+0x614>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8001840:	4826      	ldr	r0, [pc, #152]	; (80018dc <Btc_RxVal+0x614>)
 8001842:	f010 fa9d 	bl	8011d80 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001846:	e071      	b.n	800192c <Btc_RxVal+0x664>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <Btc_RxVal+0x5e0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d16f      	bne.n	8001930 <Btc_RxVal+0x668>
				{
					Btc_IntLights = STD_LOW;
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <Btc_RxVal+0x614>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8001856:	4821      	ldr	r0, [pc, #132]	; (80018dc <Btc_RxVal+0x614>)
 8001858:	f010 fa92 	bl	8011d80 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800185c:	e068      	b.n	8001930 <Btc_RxVal+0x668>
			default:
				break;
 800185e:	bf00      	nop
 8001860:	e067      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001862:	bf00      	nop
 8001864:	e065      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001866:	bf00      	nop
 8001868:	e063      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800186a:	bf00      	nop
 800186c:	e061      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800186e:	bf00      	nop
 8001870:	e05f      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001872:	bf00      	nop
 8001874:	e05d      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001876:	bf00      	nop
 8001878:	e05b      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800187a:	bf00      	nop
 800187c:	e059      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800187e:	bf00      	nop
 8001880:	e057      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001882:	bf00      	nop
 8001884:	e055      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001886:	bf00      	nop
 8001888:	e053      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800188a:	bf00      	nop
 800188c:	e051      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800188e:	bf00      	nop
 8001890:	e04f      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001892:	bf00      	nop
 8001894:	e04d      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001896:	bf00      	nop
 8001898:	e04b      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800189a:	bf00      	nop
 800189c:	e049      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800189e:	bf00      	nop
 80018a0:	e047      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018a2:	bf00      	nop
 80018a4:	e045      	b.n	8001932 <Btc_RxVal+0x66a>
 80018a6:	bf00      	nop
 80018a8:	20000120 	.word	0x20000120
 80018ac:	200000f9 	.word	0x200000f9
 80018b0:	200000ed 	.word	0x200000ed
 80018b4:	200000e4 	.word	0x200000e4
 80018b8:	200000e3 	.word	0x200000e3
 80018bc:	200000e5 	.word	0x200000e5
 80018c0:	200000e6 	.word	0x200000e6
 80018c4:	200000e8 	.word	0x200000e8
 80018c8:	200000e9 	.word	0x200000e9
 80018cc:	200000ea 	.word	0x200000ea
 80018d0:	200000e7 	.word	0x200000e7
 80018d4:	200000ec 	.word	0x200000ec
 80018d8:	200000eb 	.word	0x200000eb
 80018dc:	200000ee 	.word	0x200000ee
				break;
 80018e0:	bf00      	nop
 80018e2:	e026      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018e4:	bf00      	nop
 80018e6:	e024      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018e8:	bf00      	nop
 80018ea:	e022      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018ec:	bf00      	nop
 80018ee:	e020      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018f0:	bf00      	nop
 80018f2:	e01e      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018f4:	bf00      	nop
 80018f6:	e01c      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018f8:	bf00      	nop
 80018fa:	e01a      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 80018fc:	bf00      	nop
 80018fe:	e018      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001900:	bf00      	nop
 8001902:	e016      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001904:	bf00      	nop
 8001906:	e014      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001908:	bf00      	nop
 800190a:	e012      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800190c:	bf00      	nop
 800190e:	e010      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001910:	bf00      	nop
 8001912:	e00e      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001914:	bf00      	nop
 8001916:	e00c      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001918:	bf00      	nop
 800191a:	e00a      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800191c:	bf00      	nop
 800191e:	e008      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001920:	bf00      	nop
 8001922:	e006      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001924:	bf00      	nop
 8001926:	e004      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001928:	bf00      	nop
 800192a:	e002      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 800192c:	bf00      	nop
 800192e:	e000      	b.n	8001932 <Btc_RxVal+0x66a>
				break;
 8001930:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop

08001938 <Btc_MainFunction>:
/***********************************************************************************
* Function: Btc_MainFunction											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
VOID Btc_MainFunction()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	Btc_RxVal();
 800193c:	f7ff fcc4 	bl	80012c8 <Btc_RxVal>
	Btc_RequestState();
 8001940:	f7ff fa24 	bl	8000d8c <Btc_RequestState>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <CenLoc_State>:
/***********************************************************************************
* Function: CenLoc_State													   	   *
* Description: Process the current and previous state of the central lock.		   *
************************************************************************************/
VOID CenLoc_State()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	/* Every time the state of the central lock changes
	 * set the alarm to off. */
	CenLoc_SecAlmStateToOff();
 800194c:	f000 f840 	bl	80019d0 <CenLoc_SecAlmStateToOff>
	/* If the current state is different than the previous state
	 * update the variables respectively.
	 * Initialize the security alarm application.
	 * Calls for start of OS timer for lock unlock sequence.*/
	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <CenLoc_State+0x68>)
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <CenLoc_State+0x6c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d027      	beq.n	80019ac <CenLoc_State+0x64>
	{
		CenLoc_PreviousStateFlag 	= CenLoc_PreviousState;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <CenLoc_State+0x68>)
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <CenLoc_State+0x70>)
 8001962:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 		= CenLoc_CurrentState;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <CenLoc_State+0x6c>)
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <CenLoc_State+0x68>)
 800196a:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter 		= STD_LOW;
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <CenLoc_State+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter 	= STD_LOW;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <CenLoc_State+0x78>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
		CenLoc_CyclicAlarmCounter	= STD_LOW;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <CenLoc_State+0x7c>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
		CenLoc_TurnOnLedCounter		= STD_LOW;
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <CenLoc_State+0x80>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8001984:	f001 fdf0 	bl	8003568 <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <CenLoc_State+0x84>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	21fa      	movs	r1, #250	; 0xfa
 800198e:	4618      	mov	r0, r3
 8001990:	f010 fa77 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <CenLoc_State+0x74>)
 8001996:	f010 f807 	bl	80119a8 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 800199a:	480a      	ldr	r0, [pc, #40]	; (80019c4 <CenLoc_State+0x7c>)
 800199c:	f010 f814 	bl	80119c8 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <CenLoc_State+0x80>)
 80019a2:	f010 f821 	bl	80119e8 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <CenLoc_State+0x78>)
 80019a8:	f010 f82e 	bl	8011a08 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000121 	.word	0x20000121
 80019b4:	20000120 	.word	0x20000120
 80019b8:	20000128 	.word	0x20000128
 80019bc:	20000124 	.word	0x20000124
 80019c0:	20000126 	.word	0x20000126
 80019c4:	20000125 	.word	0x20000125
 80019c8:	20000127 	.word	0x20000127
 80019cc:	20000354 	.word	0x20000354

080019d0 <CenLoc_SecAlmStateToOff>:
/***********************************************************************************
* Function: CenLoc_SecAlmStateToOff												   *
* Description: Turn off the security alarm.										   *
************************************************************************************/
VOID CenLoc_SecAlmStateToOff()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	/* The central lock is on, the security alarm goes off. */
	if(CenLoc_CurrentState == STD_HIGH)
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <CenLoc_SecAlmStateToOff+0x14>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <CenLoc_SecAlmStateToOff+0x10>
	{
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80019dc:	f001 fdc4 	bl	8003568 <SecAlm_Init>
	}
	else
	{
		/* do nothing */
	}
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000120 	.word	0x20000120

080019e8 <CenLoc_FollowMeHome>:
/***********************************************************************************
* Function: CenLoc_FollowMeHome												       *
* Description: Process the state of the follow me home.					 		   *
************************************************************************************/
VOID CenLoc_FollowMeHome()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	/* Follow me home is on as long as the timer is on. */
	if(CenLoc_FollowMeHomeCounter == 1)
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <CenLoc_FollowMeHome+0x3c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d103      	bne.n	80019fc <CenLoc_FollowMeHome+0x14>
	{
		CenLoc_FollowMeHomeState = STD_HIGH;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <CenLoc_FollowMeHome+0x40>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80019fa:	e011      	b.n	8001a20 <CenLoc_FollowMeHome+0x38>
	else if(CenLoc_FollowMeHomeCounter == 2)
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <CenLoc_FollowMeHome+0x3c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d10d      	bne.n	8001a20 <CenLoc_FollowMeHome+0x38>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <CenLoc_FollowMeHome+0x44>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f010 fa47 	bl	8011e9c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		CenLoc_FollowMeHomeState = STD_LOW;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <CenLoc_FollowMeHome+0x40>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter = 2;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <CenLoc_FollowMeHome+0x3c>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001a1a:	4802      	ldr	r0, [pc, #8]	; (8001a24 <CenLoc_FollowMeHome+0x3c>)
 8001a1c:	f00f fff4 	bl	8011a08 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000126 	.word	0x20000126
 8001a28:	20000122 	.word	0x20000122
 8001a2c:	20000360 	.word	0x20000360

08001a30 <CenLoc_UnlockSequence>:
/***********************************************************************************
* Function: CenLoc_UnlockSequence												   *
* Description: Process the unlock sequence. 		   							   *
************************************************************************************/
VOID CenLoc_UnlockSequence()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	/* Stop the timer used for the security alarm LED. */
	Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 8001a34:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <CenLoc_UnlockSequence+0x138>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f010 fa2f 	bl	8011e9c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	/* Turn on the door LEDs. */
	if(CenLoc_PreviousStateFlag == STD_LOW)
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <CenLoc_UnlockSequence+0x13c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <CenLoc_UnlockSequence+0x1e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel1);
 8001a46:	2100      	movs	r1, #0
 8001a48:	4849      	ldr	r0, [pc, #292]	; (8001b70 <CenLoc_UnlockSequence+0x140>)
 8001a4a:	f010 f847 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
	else
	{
		/* do nothing */
	}
	/* Process follow me home state. */
	CenLoc_FollowMeHome();
 8001a4e:	f7ff ffcb 	bl	80019e8 <CenLoc_FollowMeHome>
	/* Sets previous state to high so that on locking it is taken into consideration. */
	localPreviousState = STD_HIGH;
 8001a52:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <CenLoc_UnlockSequence+0x144>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
	/* Unlocking sequence consists of triggering the hazard lights twice on and twice off.*/
	if(CenLoc_BlinkCounter <= 3)
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <CenLoc_UnlockSequence+0x148>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d86f      	bhi.n	8001b40 <CenLoc_UnlockSequence+0x110>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <CenLoc_UnlockSequence+0x14c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f010 fa0a 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == 0)
 8001a6e:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <CenLoc_UnlockSequence+0x150>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00c ff1f 	bl	800e8b6 <osTimerIsRunning>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <CenLoc_UnlockSequence+0x5c>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 10000);
 8001a7e:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <CenLoc_UnlockSequence+0x150>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f242 7110 	movw	r1, #10000	; 0x2710
 8001a86:	4618      	mov	r0, r3
 8001a88:	f010 f9fb 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = 1;
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <CenLoc_UnlockSequence+0x154>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001a92:	483c      	ldr	r0, [pc, #240]	; (8001b84 <CenLoc_UnlockSequence+0x154>)
 8001a94:	f00f ffb8 	bl	8011a08 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and the buzzer. */
		switch(CenLoc_BlinkCounter)
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <CenLoc_UnlockSequence+0x148>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d85f      	bhi.n	8001b60 <CenLoc_UnlockSequence+0x130>
 8001aa0:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <CenLoc_UnlockSequence+0x78>)
 8001aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa6:	bf00      	nop
 8001aa8:	08001ab9 	.word	0x08001ab9
 8001aac:	08001adb 	.word	0x08001adb
 8001ab0:	08001afd 	.word	0x08001afd
 8001ab4:	08001b1f 	.word	0x08001b1f
		{
			case 0:
				CenLoc_BlinkState = STD_HIGH;
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001abe:	2108      	movs	r1, #8
 8001ac0:	4832      	ldr	r0, [pc, #200]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001ac2:	f010 f80b 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001ac6:	210c      	movs	r1, #12
 8001ac8:	4830      	ldr	r0, [pc, #192]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001aca:	f010 f807 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f972 	bl	8001dbc <CenLoc_ToggleBuzzer>
				break;
 8001ad8:	e043      	b.n	8001b62 <CenLoc_UnlockSequence+0x132>
			case 1:
				CenLoc_BlinkState = STD_LOW;
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001ae0:	2108      	movs	r1, #8
 8001ae2:	482a      	ldr	r0, [pc, #168]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001ae4:	f00f fffa 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001ae8:	210c      	movs	r1, #12
 8001aea:	4828      	ldr	r0, [pc, #160]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001aec:	f00f fff6 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f961 	bl	8001dbc <CenLoc_ToggleBuzzer>
				break;
 8001afa:	e032      	b.n	8001b62 <CenLoc_UnlockSequence+0x132>
			case 2:
				CenLoc_BlinkState = STD_HIGH;
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001b02:	2108      	movs	r1, #8
 8001b04:	4821      	ldr	r0, [pc, #132]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001b06:	f00f ffe9 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001b0a:	210c      	movs	r1, #12
 8001b0c:	481f      	ldr	r0, [pc, #124]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001b0e:	f00f ffe5 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f950 	bl	8001dbc <CenLoc_ToggleBuzzer>
				break;
 8001b1c:	e021      	b.n	8001b62 <CenLoc_UnlockSequence+0x132>
			case 3:
				CenLoc_BlinkState = STD_LOW;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001b24:	2108      	movs	r1, #8
 8001b26:	4819      	ldr	r0, [pc, #100]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001b28:	f00f ffd8 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001b2c:	210c      	movs	r1, #12
 8001b2e:	4817      	ldr	r0, [pc, #92]	; (8001b8c <CenLoc_UnlockSequence+0x15c>)
 8001b30:	f00f ffd4 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 f93f 	bl	8001dbc <CenLoc_ToggleBuzzer>
				break;
 8001b3e:	e010      	b.n	8001b62 <CenLoc_UnlockSequence+0x132>
			default:
				break;
		}
	}/* After the sequence is completed, stop the timers and set the variables related to this sequence to out of bounds values to prevent triggering when not requested. */
	else if(CenLoc_BlinkCounter >= 3)
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <CenLoc_UnlockSequence+0x148>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d90c      	bls.n	8001b62 <CenLoc_UnlockSequence+0x132>
	{
		CenLoc_BlinkState = 2;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <CenLoc_UnlockSequence+0x158>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 6;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <CenLoc_UnlockSequence+0x148>)
 8001b50:	2206      	movs	r2, #6
 8001b52:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <CenLoc_UnlockSequence+0x160>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f010 f99f 	bl	8011e9c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	}
	else
	{
		/* do nothing */
	}
}
 8001b5e:	e000      	b.n	8001b62 <CenLoc_UnlockSequence+0x132>
				break;
 8001b60:	bf00      	nop
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000358 	.word	0x20000358
 8001b6c:	20000128 	.word	0x20000128
 8001b70:	200005f4 	.word	0x200005f4
 8001b74:	20000129 	.word	0x20000129
 8001b78:	20000124 	.word	0x20000124
 8001b7c:	20000364 	.word	0x20000364
 8001b80:	20000360 	.word	0x20000360
 8001b84:	20000126 	.word	0x20000126
 8001b88:	20000123 	.word	0x20000123
 8001b8c:	200006a8 	.word	0x200006a8
 8001b90:	20000354 	.word	0x20000354

08001b94 <CenLoc_LockSequence>:
/***********************************************************************************
* Function: CenLoc_LockSequence													   *
* Description: Process the lock sequence.								 		   *
************************************************************************************/
VOID CenLoc_LockSequence()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	/* Turn off the door LEDs. */
	if(CenLoc_PreviousStateFlag == STD_HIGH)
 8001b98:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <CenLoc_LockSequence+0xe4>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d103      	bne.n	8001ba8 <CenLoc_LockSequence+0x14>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel1);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4836      	ldr	r0, [pc, #216]	; (8001c7c <CenLoc_LockSequence+0xe8>)
 8001ba4:	f00f ffa7 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Process follow me home state.*/
	CenLoc_FollowMeHome();
 8001ba8:	f7ff ff1e 	bl	80019e8 <CenLoc_FollowMeHome>
	/* If the central lock has been on previously
	 * and the variable related to the state of the timer is less than the value of
	 * how many times the hazard lights should turn on on locking, proceed with the processing. */
	if(CenLoc_BlinkCounter <= 1 && localPreviousState == STD_HIGH)
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <CenLoc_LockSequence+0xec>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d84d      	bhi.n	8001c50 <CenLoc_LockSequence+0xbc>
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <CenLoc_LockSequence+0xf0>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d149      	bne.n	8001c50 <CenLoc_LockSequence+0xbc>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <CenLoc_LockSequence+0xf4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f010 f95c 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == 0)
 8001bca:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <CenLoc_LockSequence+0xf8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00c fe71 	bl	800e8b6 <osTimerIsRunning>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <CenLoc_LockSequence+0x54>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 10000);
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <CenLoc_LockSequence+0xf8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f242 7110 	movw	r1, #10000	; 0x2710
 8001be2:	4618      	mov	r0, r3
 8001be4:	f010 f94d 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = 1;
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <CenLoc_LockSequence+0xfc>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001bee:	4828      	ldr	r0, [pc, #160]	; (8001c90 <CenLoc_LockSequence+0xfc>)
 8001bf0:	f00f ff0a 	bl	8011a08 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and buzzer. */
		switch(CenLoc_BlinkCounter)
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <CenLoc_LockSequence+0xec>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <CenLoc_LockSequence+0x6e>
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d011      	beq.n	8001c24 <CenLoc_LockSequence+0x90>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
				localPreviousState = STD_LOW;
				break;
			default:
				break;
 8001c00:	e024      	b.n	8001c4c <CenLoc_LockSequence+0xb8>
				CenLoc_BlinkState = STD_HIGH;
 8001c02:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <CenLoc_LockSequence+0x100>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001c08:	2108      	movs	r1, #8
 8001c0a:	4823      	ldr	r0, [pc, #140]	; (8001c98 <CenLoc_LockSequence+0x104>)
 8001c0c:	f00f ff66 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001c10:	210c      	movs	r1, #12
 8001c12:	4821      	ldr	r0, [pc, #132]	; (8001c98 <CenLoc_LockSequence+0x104>)
 8001c14:	f00f ff62 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <CenLoc_LockSequence+0x100>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f8cd 	bl	8001dbc <CenLoc_ToggleBuzzer>
				break;
 8001c22:	e013      	b.n	8001c4c <CenLoc_LockSequence+0xb8>
				CenLoc_BlinkState = STD_LOW;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <CenLoc_LockSequence+0x100>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	481a      	ldr	r0, [pc, #104]	; (8001c98 <CenLoc_LockSequence+0x104>)
 8001c2e:	f00f ff55 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001c32:	210c      	movs	r1, #12
 8001c34:	4818      	ldr	r0, [pc, #96]	; (8001c98 <CenLoc_LockSequence+0x104>)
 8001c36:	f00f ff51 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <CenLoc_LockSequence+0x100>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f8bc 	bl	8001dbc <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <CenLoc_LockSequence+0xf0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
				break;
 8001c4a:	bf00      	nop
		switch(CenLoc_BlinkCounter)
 8001c4c:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8001c4e:	e011      	b.n	8001c74 <CenLoc_LockSequence+0xe0>
	else if(CenLoc_BlinkCounter == 2)
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <CenLoc_LockSequence+0xec>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10d      	bne.n	8001c74 <CenLoc_LockSequence+0xe0>
		CenLoc_BlinkState = 2;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <CenLoc_LockSequence+0x100>)
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 4;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <CenLoc_LockSequence+0xec>)
 8001c60:	2204      	movs	r2, #4
 8001c62:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001c64:	4806      	ldr	r0, [pc, #24]	; (8001c80 <CenLoc_LockSequence+0xec>)
 8001c66:	f00f fe9f 	bl	80119a8 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <CenLoc_LockSequence+0x108>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f010 f914 	bl	8011e9c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000128 	.word	0x20000128
 8001c7c:	200005f4 	.word	0x200005f4
 8001c80:	20000124 	.word	0x20000124
 8001c84:	20000129 	.word	0x20000129
 8001c88:	20000364 	.word	0x20000364
 8001c8c:	20000360 	.word	0x20000360
 8001c90:	20000126 	.word	0x20000126
 8001c94:	20000123 	.word	0x20000123
 8001c98:	200006a8 	.word	0x200006a8
 8001c9c:	20000354 	.word	0x20000354

08001ca0 <CenLoc_ControlAlarmLed>:
/***********************************************************************************
* Function: CenLoc_ControlAlarmLed												   *
* Description: Controls the security alarm LED 		   							   *
************************************************************************************/
VOID CenLoc_ControlAlarmLed()
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	/* Check if the central lock state is set to high. */
	if(CenLoc_CurrentState == STD_HIGH)
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <CenLoc_ControlAlarmLed+0xc4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10b      	bne.n	8001cc4 <CenLoc_ControlAlarmLed+0x24>
	{
		/* Set the security alarm LED to off. */
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f001 fc8f 	bl	80035d0 <SecAlm_ToggleAlarmLed>
		/* Set the timer flag to 0. */
		CenLoc_TurnOnLedCounter = STD_LOW;
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <CenLoc_ControlAlarmLed+0xc8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
		/* Stop the timer related to the LED cyclic trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <CenLoc_ControlAlarmLed+0xcc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f010 f8ed 	bl	8011e9c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		else
		{
			/* do nothing */
		}
	}
}
 8001cc2:	e04c      	b.n	8001d5e <CenLoc_ControlAlarmLed+0xbe>
	else if(CenLoc_CurrentState == STD_LOW)
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <CenLoc_ControlAlarmLed+0xc4>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d148      	bne.n	8001d5e <CenLoc_ControlAlarmLed+0xbe>
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLed_TurnOnCyclic_TimerHandle) == 0 && Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <CenLoc_ControlAlarmLed+0xd0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00c fdf0 	bl	800e8b6 <osTimerIsRunning>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10e      	bne.n	8001cfa <CenLoc_ControlAlarmLed+0x5a>
 8001cdc:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <CenLoc_ControlAlarmLed+0xcc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00c fde8 	bl	800e8b6 <osTimerIsRunning>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <CenLoc_ControlAlarmLed+0x5a>
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLed_TurnOnCyclic_TimerHandle, 3750);
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <CenLoc_ControlAlarmLed+0xd0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f640 61a6 	movw	r1, #3750	; 0xea6
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f010 f8c4 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		if(CenLoc_CyclicAlarmCounter == 1)
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <CenLoc_ControlAlarmLed+0xd4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d12d      	bne.n	8001d5e <CenLoc_ControlAlarmLed+0xbe>
			if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <CenLoc_ControlAlarmLed+0xcc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00c fdd5 	bl	800e8b6 <osTimerIsRunning>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLedTurnOn_TimerHandle, 250);
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <CenLoc_ControlAlarmLed+0xcc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	21fa      	movs	r1, #250	; 0xfa
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f010 f8b2 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
			if(CenLoc_TurnOnLedCounter < 1)
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <CenLoc_ControlAlarmLed+0xc8>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <CenLoc_ControlAlarmLed+0x8e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f001 fc52 	bl	80035d0 <SecAlm_ToggleAlarmLed>
}
 8001d2c:	e017      	b.n	8001d5e <CenLoc_ControlAlarmLed+0xbe>
			else if(CenLoc_TurnOnLedCounter == 1)
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <CenLoc_ControlAlarmLed+0xc8>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d113      	bne.n	8001d5e <CenLoc_ControlAlarmLed+0xbe>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f001 fc4a 	bl	80035d0 <SecAlm_ToggleAlarmLed>
				CenLoc_TurnOnLedCounter = 0;
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <CenLoc_ControlAlarmLed+0xc8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
				CenLoc_CyclicAlarmCounter = 0;
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <CenLoc_ControlAlarmLed+0xd4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
				Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <CenLoc_ControlAlarmLed+0xd4>)
 8001d4a:	f00f fe3d 	bl	80119c8 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
				Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 8001d4e:	4806      	ldr	r0, [pc, #24]	; (8001d68 <CenLoc_ControlAlarmLed+0xc8>)
 8001d50:	f00f fe4a 	bl	80119e8 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <CenLoc_ControlAlarmLed+0xcc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f010 f89f 	bl	8011e9c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000120 	.word	0x20000120
 8001d68:	20000127 	.word	0x20000127
 8001d6c:	2000035c 	.word	0x2000035c
 8001d70:	20000358 	.word	0x20000358
 8001d74:	20000125 	.word	0x20000125

08001d78 <CenLoc_LockUnlockStates>:
/***********************************************************************************
* Function: CenLoc_LockUnlockStates												   *
* Description: Check for the state of the central lock.					 		   *
************************************************************************************/
VOID CenLoc_LockUnlockStates()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	/* If the central lock state is set to high and the security alarm is set to off. */
	if(CenLoc_CurrentState == STD_HIGH && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <CenLoc_LockUnlockStates+0x3c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d108      	bne.n	8001d96 <CenLoc_LockUnlockStates+0x1e>
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <CenLoc_LockUnlockStates+0x40>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d104      	bne.n	8001d96 <CenLoc_LockUnlockStates+0x1e>
	{
		/* Perform the related activities. */
		CenLoc_UnlockSequence();
 8001d8c:	f7ff fe50 	bl	8001a30 <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 8001d90:	f7ff ff86 	bl	8001ca0 <CenLoc_ControlAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 8001d94:	e00b      	b.n	8001dae <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <CenLoc_LockUnlockStates+0x3c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <CenLoc_LockUnlockStates+0x36>
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <CenLoc_LockUnlockStates+0x40>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 8001da6:	f7ff fef5 	bl	8001b94 <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 8001daa:	f7ff ff79 	bl	8001ca0 <CenLoc_ControlAlarmLed>
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000120 	.word	0x20000120
 8001db8:	200001a4 	.word	0x200001a4

08001dbc <CenLoc_ToggleBuzzer>:
/***********************************************************************************
* Function: CenLoc_ToggleBuzzer													   *
* Description: Trigger central lock buzzer. 		   							   *
************************************************************************************/
VOID CenLoc_ToggleBuzzer(uint8 PinState)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2104      	movs	r1, #4
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <CenLoc_ToggleBuzzer+0x20>)
 8001dce:	f010 f846 	bl	8011e5e <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40020400 	.word	0x40020400

08001de0 <CenLoc_MainFunction>:
/***********************************************************************************
* Function: CenLoc_MainFunction													   *
* Description: Central lock main function. Process the states of the application.  *
************************************************************************************/
VOID CenLoc_MainFunction()
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	CenLoc_State();
 8001de4:	f7ff fdb0 	bl	8001948 <CenLoc_State>
	CenLoc_LockUnlockStates();
 8001de8:	f7ff ffc6 	bl	8001d78 <CenLoc_LockUnlockStates>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <DiagCtrl_MainFunction>:
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	DiagCtrl_ProcessRequestedData();
 8001df4:	f000 f802 	bl	8001dfc <DiagCtrl_ProcessRequestedData>
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <DiagCtrl_ProcessRequestedData>:
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	static uint8 SpiCanTransceiver_FaultValue_Seven = 0;
	static uint8 CanBusOff_FaultValue = 0;
	static uint8 CanRx_FaultValue = 0;
	static uint8 CanTx_FaultValue = 0;
#endif
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
 8001e00:	2100      	movs	r1, #0
 8001e02:	48a5      	ldr	r0, [pc, #660]	; (8002098 <DiagCtrl_ProcessRequestedData+0x29c>)
 8001e04:	f00f feb8 	bl	8011b78 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
 8001e08:	2101      	movs	r1, #1
 8001e0a:	48a4      	ldr	r0, [pc, #656]	; (800209c <DiagCtrl_ProcessRequestedData+0x2a0>)
 8001e0c:	f00f feb4 	bl	8011b78 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&TemperatureSensor_RequestedValue, 3);
 8001e10:	2103      	movs	r1, #3
 8001e12:	48a3      	ldr	r0, [pc, #652]	; (80020a0 <DiagCtrl_ProcessRequestedData+0x2a4>)
 8001e14:	f00f feb0 	bl	8011b78 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_One, 17);
 8001e18:	2111      	movs	r1, #17
 8001e1a:	48a2      	ldr	r0, [pc, #648]	; (80020a4 <DiagCtrl_ProcessRequestedData+0x2a8>)
 8001e1c:	f00f fc3a 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Two, 18);
 8001e20:	2112      	movs	r1, #18
 8001e22:	48a1      	ldr	r0, [pc, #644]	; (80020a8 <DiagCtrl_ProcessRequestedData+0x2ac>)
 8001e24:	f00f fc36 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Three, 19);
 8001e28:	2113      	movs	r1, #19
 8001e2a:	48a0      	ldr	r0, [pc, #640]	; (80020ac <DiagCtrl_ProcessRequestedData+0x2b0>)
 8001e2c:	f00f fc32 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Four, 20);
 8001e30:	2114      	movs	r1, #20
 8001e32:	489f      	ldr	r0, [pc, #636]	; (80020b0 <DiagCtrl_ProcessRequestedData+0x2b4>)
 8001e34:	f00f fc2e 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_One, 41);
 8001e38:	2129      	movs	r1, #41	; 0x29
 8001e3a:	489e      	ldr	r0, [pc, #632]	; (80020b4 <DiagCtrl_ProcessRequestedData+0x2b8>)
 8001e3c:	f00f fc2a 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Two, 42);
 8001e40:	212a      	movs	r1, #42	; 0x2a
 8001e42:	489d      	ldr	r0, [pc, #628]	; (80020b8 <DiagCtrl_ProcessRequestedData+0x2bc>)
 8001e44:	f00f fc26 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Three, 43);
 8001e48:	212b      	movs	r1, #43	; 0x2b
 8001e4a:	489c      	ldr	r0, [pc, #624]	; (80020bc <DiagCtrl_ProcessRequestedData+0x2c0>)
 8001e4c:	f00f fc22 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Four, 44);
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	489b      	ldr	r0, [pc, #620]	; (80020c0 <DiagCtrl_ProcessRequestedData+0x2c4>)
 8001e54:	f00f fc1e 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Five, 45);
 8001e58:	212d      	movs	r1, #45	; 0x2d
 8001e5a:	489a      	ldr	r0, [pc, #616]	; (80020c4 <DiagCtrl_ProcessRequestedData+0x2c8>)
 8001e5c:	f00f fc1a 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Six, 46);
 8001e60:	212e      	movs	r1, #46	; 0x2e
 8001e62:	4899      	ldr	r0, [pc, #612]	; (80020c8 <DiagCtrl_ProcessRequestedData+0x2cc>)
 8001e64:	f00f fc16 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Seven, 47);
 8001e68:	212f      	movs	r1, #47	; 0x2f
 8001e6a:	4898      	ldr	r0, [pc, #608]	; (80020cc <DiagCtrl_ProcessRequestedData+0x2d0>)
 8001e6c:	f00f fc12 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Eight, 48);
 8001e70:	2130      	movs	r1, #48	; 0x30
 8001e72:	4897      	ldr	r0, [pc, #604]	; (80020d0 <DiagCtrl_ProcessRequestedData+0x2d4>)
 8001e74:	f00f fc0e 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_One, 33);
 8001e78:	2121      	movs	r1, #33	; 0x21
 8001e7a:	4896      	ldr	r0, [pc, #600]	; (80020d4 <DiagCtrl_ProcessRequestedData+0x2d8>)
 8001e7c:	f00f fc0a 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Two, 34);
 8001e80:	2122      	movs	r1, #34	; 0x22
 8001e82:	4895      	ldr	r0, [pc, #596]	; (80020d8 <DiagCtrl_ProcessRequestedData+0x2dc>)
 8001e84:	f00f fc06 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Three, 35);
 8001e88:	2123      	movs	r1, #35	; 0x23
 8001e8a:	4894      	ldr	r0, [pc, #592]	; (80020dc <DiagCtrl_ProcessRequestedData+0x2e0>)
 8001e8c:	f00f fc02 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Four, 36);
 8001e90:	2124      	movs	r1, #36	; 0x24
 8001e92:	4893      	ldr	r0, [pc, #588]	; (80020e0 <DiagCtrl_ProcessRequestedData+0x2e4>)
 8001e94:	f00f fbfe 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Five, 37);
 8001e98:	2125      	movs	r1, #37	; 0x25
 8001e9a:	4892      	ldr	r0, [pc, #584]	; (80020e4 <DiagCtrl_ProcessRequestedData+0x2e8>)
 8001e9c:	f00f fbfa 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Six, 38);
 8001ea0:	2126      	movs	r1, #38	; 0x26
 8001ea2:	4891      	ldr	r0, [pc, #580]	; (80020e8 <DiagCtrl_ProcessRequestedData+0x2ec>)
 8001ea4:	f00f fbf6 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Seven, 39);
 8001ea8:	2127      	movs	r1, #39	; 0x27
 8001eaa:	4890      	ldr	r0, [pc, #576]	; (80020ec <DiagCtrl_ProcessRequestedData+0x2f0>)
 8001eac:	f00f fbf2 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Eight, 40);
 8001eb0:	2128      	movs	r1, #40	; 0x28
 8001eb2:	488f      	ldr	r0, [pc, #572]	; (80020f0 <DiagCtrl_ProcessRequestedData+0x2f4>)
 8001eb4:	f00f fbee 	bl	8011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	CanBusOff_FaultValue = Rte_Call_Can_P_CanPort_Can_BusState();
	CanRx_FaultValue = Rte_Call_Can_P_CanPort_CanOverSpi_isRxErrorPassive();
	CanTx_FaultValue = Rte_Call_Can_P_CanPort_CanOverSpi_isTxErrorPassive();
#endif

	if(BtcUart_FaultValue_One != 0 ||
 8001eb8:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <DiagCtrl_ProcessRequestedData+0x2a8>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10b      	bne.n	8001ed8 <DiagCtrl_ProcessRequestedData+0xdc>
			BtcUart_FaultValue_Two != 0 ||
 8001ec0:	4b79      	ldr	r3, [pc, #484]	; (80020a8 <DiagCtrl_ProcessRequestedData+0x2ac>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
	if(BtcUart_FaultValue_One != 0 ||
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <DiagCtrl_ProcessRequestedData+0xdc>
			BtcUart_FaultValue_Three != 0 ||
 8001ec8:	4b78      	ldr	r3, [pc, #480]	; (80020ac <DiagCtrl_ProcessRequestedData+0x2b0>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Two != 0 ||
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <DiagCtrl_ProcessRequestedData+0xdc>
			BtcUart_FaultValue_Four != 0)
 8001ed0:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <DiagCtrl_ProcessRequestedData+0x2b4>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Three != 0 ||
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <DiagCtrl_ProcessRequestedData+0xe2>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_BLUETOOTH_MODULE_MALFUNCTION);
 8001ed8:	2022      	movs	r0, #34	; 0x22
 8001eda:	f003 fd1b 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cThreeExternalEeeprom_FaultValue_One != 0 ||
 8001ede:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <DiagCtrl_ProcessRequestedData+0x2b8>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d11b      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Two != 0 ||
 8001ee6:	4b74      	ldr	r3, [pc, #464]	; (80020b8 <DiagCtrl_ProcessRequestedData+0x2bc>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
	if(I2cThreeExternalEeeprom_FaultValue_One != 0 ||
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d117      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Three != 0 ||
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <DiagCtrl_ProcessRequestedData+0x2c0>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Two != 0 ||
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d113      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Four != 0 ||
 8001ef6:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <DiagCtrl_ProcessRequestedData+0x2c4>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Three != 0 ||
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Five != 0 ||
 8001efe:	4b71      	ldr	r3, [pc, #452]	; (80020c4 <DiagCtrl_ProcessRequestedData+0x2c8>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Four != 0 ||
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10b      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Six != 0 ||
 8001f06:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <DiagCtrl_ProcessRequestedData+0x2cc>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Five != 0 ||
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d107      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Seven != 0 ||
 8001f0e:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <DiagCtrl_ProcessRequestedData+0x2d0>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Six != 0 ||
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Eight != 0)
 8001f16:	4b6e      	ldr	r3, [pc, #440]	; (80020d0 <DiagCtrl_ProcessRequestedData+0x2d4>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Seven != 0 ||
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <DiagCtrl_ProcessRequestedData+0x128>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_EXTERNAL_EEPROM_MODULE_MALFUNCTION);
 8001f1e:	2032      	movs	r0, #50	; 0x32
 8001f20:	f003 fcf8 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cOneLcd_FaultValue_One != 0 ||
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <DiagCtrl_ProcessRequestedData+0x2d8>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d11b      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Two != 0 ||
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <DiagCtrl_ProcessRequestedData+0x2dc>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
	if(I2cOneLcd_FaultValue_One != 0 ||
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d117      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Three != 0 ||
 8001f34:	4b69      	ldr	r3, [pc, #420]	; (80020dc <DiagCtrl_ProcessRequestedData+0x2e0>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Two != 0 ||
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d113      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Four != 0 ||
 8001f3c:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <DiagCtrl_ProcessRequestedData+0x2e4>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Three != 0 ||
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Five != 0 ||
 8001f44:	4b67      	ldr	r3, [pc, #412]	; (80020e4 <DiagCtrl_ProcessRequestedData+0x2e8>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Four != 0 ||
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10b      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Six != 0 ||
 8001f4c:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <DiagCtrl_ProcessRequestedData+0x2ec>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Five != 0 ||
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Seven != 0 ||
 8001f54:	4b65      	ldr	r3, [pc, #404]	; (80020ec <DiagCtrl_ProcessRequestedData+0x2f0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Six != 0 ||
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d103      	bne.n	8001f64 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Eight != 0)
 8001f5c:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <DiagCtrl_ProcessRequestedData+0x2f4>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Seven != 0 ||
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <DiagCtrl_ProcessRequestedData+0x16e>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LCD_MODULE_MALFUNCTION);
 8001f64:	2062      	movs	r0, #98	; 0x62
 8001f66:	f003 fcd5 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}
#endif
	if(LightSensor_RequestedValue < 100)
 8001f6a:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <DiagCtrl_ProcessRequestedData+0x29c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b63      	cmp	r3, #99	; 0x63
 8001f70:	d802      	bhi.n	8001f78 <DiagCtrl_ProcessRequestedData+0x17c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
 8001f72:	2003      	movs	r0, #3
 8001f74:	f003 fcce 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(VibrationSensor_RequestedValue < 100)
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <DiagCtrl_ProcessRequestedData+0x2a0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b63      	cmp	r3, #99	; 0x63
 8001f7e:	d802      	bhi.n	8001f86 <DiagCtrl_ProcessRequestedData+0x18a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
 8001f80:	2013      	movs	r0, #19
 8001f82:	f003 fcc7 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(TemperatureSensor_RequestedValue < 100)
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <DiagCtrl_ProcessRequestedData+0x2a4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b63      	cmp	r3, #99	; 0x63
 8001f8c:	d802      	bhi.n	8001f94 <DiagCtrl_ProcessRequestedData+0x198>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_TEMPERATURE_SENSOR_MALFUNCTION);
 8001f8e:	2033      	movs	r0, #51	; 0x33
 8001f90:	f003 fcc0 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
 8001f94:	4b57      	ldr	r3, [pc, #348]	; (80020f4 <DiagCtrl_ProcessRequestedData+0x2f8>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <DiagCtrl_ProcessRequestedData+0x1a6>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001f9c:	2012      	movs	r0, #18
 8001f9e:	f003 fcb9 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
 8001fa2:	4b55      	ldr	r3, [pc, #340]	; (80020f8 <DiagCtrl_ProcessRequestedData+0x2fc>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <DiagCtrl_ProcessRequestedData+0x1b4>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001faa:	2002      	movs	r0, #2
 8001fac:	f003 fcb2 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LB_L_REQUEST);
 8001fb0:	2004      	movs	r0, #4
 8001fb2:	f001 fb1f 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LOW_BEAM_LEFT_MALFUNCTION)
 8001fb6:	4b51      	ldr	r3, [pc, #324]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d104      	bne.n	8001fc8 <DiagCtrl_ProcessRequestedData+0x1cc>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001fbe:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 fca6 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LB_R_REQUEST);
 8001fc8:	2005      	movs	r0, #5
 8001fca:	f001 fb13 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LOW_BEAM_RIGHT_MALFUNCTION)
 8001fce:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d104      	bne.n	8001fe0 <DiagCtrl_ProcessRequestedData+0x1e4>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001fd6:	4b49      	ldr	r3, [pc, #292]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fc9a 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RPL_L_REQUEST);
 8001fe0:	2006      	movs	r0, #6
 8001fe2:	f001 fb07 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_REAR_POSITION_LIGHT_LEFT_MALFUNCTION)
 8001fe6:	4b45      	ldr	r3, [pc, #276]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b44      	cmp	r3, #68	; 0x44
 8001fec:	d104      	bne.n	8001ff8 <DiagCtrl_ProcessRequestedData+0x1fc>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001fee:	4b43      	ldr	r3, [pc, #268]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fc8e 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RPL_R_REQUEST);
 8001ff8:	2007      	movs	r0, #7
 8001ffa:	f001 fafb 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION)
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b45      	cmp	r3, #69	; 0x45
 8002004:	d104      	bne.n	8002010 <DiagCtrl_ProcessRequestedData+0x214>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fc82 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_BL_R_REQUEST);
 8002010:	2008      	movs	r0, #8
 8002012:	f001 faef 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_BRAKE_LIGHT_RIGHT_MALFUNCTION)
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b74      	cmp	r3, #116	; 0x74
 800201c:	d104      	bne.n	8002028 <DiagCtrl_ProcessRequestedData+0x22c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 800201e:	4b37      	ldr	r3, [pc, #220]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f003 fc76 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_BL_L_REQUEST);
 8002028:	2009      	movs	r0, #9
 800202a:	f001 fae3 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_BRAKE_LIGHT_LEFT_MALFUNCTION)
 800202e:	4b33      	ldr	r3, [pc, #204]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b74      	cmp	r3, #116	; 0x74
 8002034:	d104      	bne.n	8002040 <DiagCtrl_ProcessRequestedData+0x244>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fc6a 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LTS_F_REQUEST);
 8002040:	200a      	movs	r0, #10
 8002042:	f001 fad7 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION)
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d104      	bne.n	8002058 <DiagCtrl_ProcessRequestedData+0x25c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 800204e:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fc5e 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LTS_R_REQUEST);
 8002058:	200b      	movs	r0, #11
 800205a:	f001 facb 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_REAR_MALFUNCTION)
 800205e:	4b27      	ldr	r3, [pc, #156]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b65      	cmp	r3, #101	; 0x65
 8002064:	d104      	bne.n	8002070 <DiagCtrl_ProcessRequestedData+0x274>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fc52 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RTS_R_REQUEST);
 8002070:	200c      	movs	r0, #12
 8002072:	f001 fabf 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION)
 8002076:	4b21      	ldr	r3, [pc, #132]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b55      	cmp	r3, #85	; 0x55
 800207c:	d104      	bne.n	8002088 <DiagCtrl_ProcessRequestedData+0x28c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f003 fc46 	bl	8005914 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RTS_F_REQUEST);
 8002088:	200d      	movs	r0, #13
 800208a:	f001 fab3 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION)
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <DiagCtrl_ProcessRequestedData+0x300>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	e034      	b.n	8002100 <DiagCtrl_ProcessRequestedData+0x304>
 8002096:	bf00      	nop
 8002098:	2000012c 	.word	0x2000012c
 800209c:	20000130 	.word	0x20000130
 80020a0:	20000134 	.word	0x20000134
 80020a4:	20000138 	.word	0x20000138
 80020a8:	20000139 	.word	0x20000139
 80020ac:	2000013a 	.word	0x2000013a
 80020b0:	2000013b 	.word	0x2000013b
 80020b4:	2000013c 	.word	0x2000013c
 80020b8:	2000013d 	.word	0x2000013d
 80020bc:	2000013e 	.word	0x2000013e
 80020c0:	2000013f 	.word	0x2000013f
 80020c4:	20000140 	.word	0x20000140
 80020c8:	20000141 	.word	0x20000141
 80020cc:	20000142 	.word	0x20000142
 80020d0:	20000143 	.word	0x20000143
 80020d4:	20000144 	.word	0x20000144
 80020d8:	20000145 	.word	0x20000145
 80020dc:	20000146 	.word	0x20000146
 80020e0:	20000147 	.word	0x20000147
 80020e4:	20000148 	.word	0x20000148
 80020e8:	20000149 	.word	0x20000149
 80020ec:	2000014a 	.word	0x2000014a
 80020f0:	2000014b 	.word	0x2000014b
 80020f4:	20000935 	.word	0x20000935
 80020f8:	20000945 	.word	0x20000945
 80020fc:	2000012a 	.word	0x2000012a
 8002100:	d104      	bne.n	800210c <DiagCtrl_ProcessRequestedData+0x310>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002102:	4b03      	ldr	r3, [pc, #12]	; (8002110 <DiagCtrl_ProcessRequestedData+0x314>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f003 fc04 	bl	8005914 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000012a 	.word	0x2000012a

08002114 <ExtLights_TurnSignalHazardLight>:
/***********************************************************************************
* Function: ExtLights_TurnSignalHazardLight										   *
* Description: Process the turn signals and hazard lights states. 		   		   *
************************************************************************************/
VOID ExtLights_TurnSignalHazardLight()
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	/* If the turn signal left is set on. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8002118:	4b4c      	ldr	r3, [pc, #304]	; (800224c <ExtLights_TurnSignalHazardLight+0x138>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d123      	bne.n	8002168 <ExtLights_TurnSignalHazardLight+0x54>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8002120:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f00c fbc6 	bl	800e8b6 <osTimerIsRunning>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d106      	bne.n	800213e <ExtLights_TurnSignalHazardLight+0x2a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8002130:	4b47      	ldr	r3, [pc, #284]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002138:	4618      	mov	r0, r3
 800213a:	f00f fea2 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_LTSFlag % 2 == 1)
 800213e:	4b45      	ldr	r3, [pc, #276]	; (8002254 <ExtLights_TurnSignalHazardLight+0x140>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <ExtLights_TurnSignalHazardLight+0x40>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800214a:	2108      	movs	r1, #8
 800214c:	4842      	ldr	r0, [pc, #264]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 800214e:	f00f fcc5 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8002152:	e009      	b.n	8002168 <ExtLights_TurnSignalHazardLight+0x54>
		}
		else if(ExtLights_LTSFlag % 2 == 0)
 8002154:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <ExtLights_TurnSignalHazardLight+0x140>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d103      	bne.n	8002168 <ExtLights_TurnSignalHazardLight+0x54>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002160:	2108      	movs	r1, #8
 8002162:	483d      	ldr	r0, [pc, #244]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 8002164:	f00f fcc7 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the turn signal right is set on. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8002168:	4b3c      	ldr	r3, [pc, #240]	; (800225c <ExtLights_TurnSignalHazardLight+0x148>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d123      	bne.n	80021b8 <ExtLights_TurnSignalHazardLight+0xa4>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8002170:	4b37      	ldr	r3, [pc, #220]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f00c fb9e 	bl	800e8b6 <osTimerIsRunning>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <ExtLights_TurnSignalHazardLight+0x7a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002188:	4618      	mov	r0, r3
 800218a:	f00f fe7a 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_RTSFlag % 2 == 1)
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <ExtLights_TurnSignalHazardLight+0x14c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <ExtLights_TurnSignalHazardLight+0x90>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800219a:	210c      	movs	r1, #12
 800219c:	482e      	ldr	r0, [pc, #184]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 800219e:	f00f fc9d 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80021a2:	e009      	b.n	80021b8 <ExtLights_TurnSignalHazardLight+0xa4>
		}
		else if(ExtLights_RTSFlag % 2 == 0)
 80021a4:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <ExtLights_TurnSignalHazardLight+0x14c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <ExtLights_TurnSignalHazardLight+0xa4>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80021b0:	210c      	movs	r1, #12
 80021b2:	4829      	ldr	r0, [pc, #164]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 80021b4:	f00f fc9f 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the hazard light is set on. */
	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <ExtLights_TurnSignalHazardLight+0x150>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d12b      	bne.n	8002218 <ExtLights_TurnSignalHazardLight+0x104>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 80021c0:	4b23      	ldr	r3, [pc, #140]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f00c fb76 	bl	800e8b6 <osTimerIsRunning>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <ExtLights_TurnSignalHazardLight+0xca>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <ExtLights_TurnSignalHazardLight+0x13c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021d8:	4618      	mov	r0, r3
 80021da:	f00f fe52 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_HLFlag % 2 == 1)
 80021de:	4b22      	ldr	r3, [pc, #136]	; (8002268 <ExtLights_TurnSignalHazardLight+0x154>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <ExtLights_TurnSignalHazardLight+0xe8>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80021ea:	2108      	movs	r1, #8
 80021ec:	481a      	ldr	r0, [pc, #104]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 80021ee:	f00f fc75 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80021f2:	210c      	movs	r1, #12
 80021f4:	4818      	ldr	r0, [pc, #96]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 80021f6:	f00f fc71 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80021fa:	e00d      	b.n	8002218 <ExtLights_TurnSignalHazardLight+0x104>
		}
		else if(ExtLights_HLFlag % 2 == 0)
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <ExtLights_TurnSignalHazardLight+0x154>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <ExtLights_TurnSignalHazardLight+0x104>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002208:	2108      	movs	r1, #8
 800220a:	4813      	ldr	r0, [pc, #76]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 800220c:	f00f fc73 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8002210:	210c      	movs	r1, #12
 8002212:	4811      	ldr	r0, [pc, #68]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 8002214:	f00f fc6f 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8002218:	4b10      	ldr	r3, [pc, #64]	; (800225c <ExtLights_TurnSignalHazardLight+0x148>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d107      	bne.n	8002230 <ExtLights_TurnSignalHazardLight+0x11c>
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <ExtLights_TurnSignalHazardLight+0x150>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d103      	bne.n	8002230 <ExtLights_TurnSignalHazardLight+0x11c>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8002228:	210c      	movs	r1, #12
 800222a:	480b      	ldr	r0, [pc, #44]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 800222c:	f00f fc63 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <ExtLights_TurnSignalHazardLight+0x138>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <ExtLights_TurnSignalHazardLight+0x134>
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <ExtLights_TurnSignalHazardLight+0x150>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d103      	bne.n	8002248 <ExtLights_TurnSignalHazardLight+0x134>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002240:	2108      	movs	r1, #8
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <ExtLights_TurnSignalHazardLight+0x144>)
 8002244:	f00f fc57 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000152 	.word	0x20000152
 8002250:	20000364 	.word	0x20000364
 8002254:	20000160 	.word	0x20000160
 8002258:	200006a8 	.word	0x200006a8
 800225c:	20000153 	.word	0x20000153
 8002260:	2000015c 	.word	0x2000015c
 8002264:	20000156 	.word	0x20000156
 8002268:	20000164 	.word	0x20000164

0800226c <ExtLights_PrevStateTSHL>:
* Function: ExtLights_PrevStateTSHL										           *
* Description: Checks the current state and previous state of turn signals and     *
* 			   hazard lights. 		   											   *
************************************************************************************/
VOID ExtLights_PrevStateTSHL()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <ExtLights_PrevStateTSHL+0x68>)
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <ExtLights_PrevStateTSHL+0x6c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d009      	beq.n	8002290 <ExtLights_PrevStateTSHL+0x24>
	{
		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <ExtLights_PrevStateTSHL+0x68>)
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <ExtLights_PrevStateTSHL+0x6c>)
 8002282:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <ExtLights_PrevStateTSHL+0x70>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Lts_Counter(&ExtLights_LTSFlag);
 800228a:	4814      	ldr	r0, [pc, #80]	; (80022dc <ExtLights_PrevStateTSHL+0x70>)
 800228c:	f00f fbcc 	bl	8011a28 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <ExtLights_PrevStateTSHL+0x74>)
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <ExtLights_PrevStateTSHL+0x78>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d009      	beq.n	80022b0 <ExtLights_PrevStateTSHL+0x44>
	{
		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <ExtLights_PrevStateTSHL+0x74>)
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <ExtLights_PrevStateTSHL+0x78>)
 80022a2:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <ExtLights_PrevStateTSHL+0x7c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Rts_Counter(&ExtLights_RTSFlag);
 80022aa:	480f      	ldr	r0, [pc, #60]	; (80022e8 <ExtLights_PrevStateTSHL+0x7c>)
 80022ac:	f00f fbcc 	bl	8011a48 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <ExtLights_PrevStateTSHL+0x80>)
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <ExtLights_PrevStateTSHL+0x84>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d009      	beq.n	80022d0 <ExtLights_PrevStateTSHL+0x64>
	{
		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <ExtLights_PrevStateTSHL+0x80>)
 80022be:	781a      	ldrb	r2, [r3, #0]
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <ExtLights_PrevStateTSHL+0x84>)
 80022c2:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <ExtLights_PrevStateTSHL+0x88>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_HL_Counter(&ExtLights_HLFlag);
 80022ca:	480a      	ldr	r0, [pc, #40]	; (80022f4 <ExtLights_PrevStateTSHL+0x88>)
 80022cc:	f00f fbcc 	bl	8011a68 <Rte_Write_Os_R_OsPort_Os_HL_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000152 	.word	0x20000152
 80022d8:	20000159 	.word	0x20000159
 80022dc:	20000160 	.word	0x20000160
 80022e0:	20000153 	.word	0x20000153
 80022e4:	20000158 	.word	0x20000158
 80022e8:	2000015c 	.word	0x2000015c
 80022ec:	20000156 	.word	0x20000156
 80022f0:	2000015a 	.word	0x2000015a
 80022f4:	20000164 	.word	0x20000164

080022f8 <ExtLights_LightState>:
/***********************************************************************************
* Function: ExtLights_LightState										   		   *
* Description: Controls the lights states.								 		   *
************************************************************************************/
VOID ExtLights_LightState()
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	/* Process turn signals state. */
	ExtLights_PrevStateTSHL();
 80022fc:	f7ff ffb6 	bl	800226c <ExtLights_PrevStateTSHL>
	/* Follow me home is on, then turn on the respective lights. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8002300:	4b88      	ldr	r3, [pc, #544]	; (8002524 <ExtLights_LightState+0x22c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d110      	bne.n	800232a <ExtLights_LightState+0x32>
	{
		ExtLights_LightSwitchMode();
 8002308:	f000 f9d8 	bl	80026bc <ExtLights_LightSwitchMode>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 800230c:	2100      	movs	r1, #0
 800230e:	4886      	ldr	r0, [pc, #536]	; (8002528 <ExtLights_LightState+0x230>)
 8002310:	f00f fbe4 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002314:	2104      	movs	r1, #4
 8002316:	4884      	ldr	r0, [pc, #528]	; (8002528 <ExtLights_LightState+0x230>)
 8002318:	f00f fbe0 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		ExtLights_LowBeam_CurrentState = STD_HIGH;
 800231c:	4b83      	ldr	r3, [pc, #524]	; (800252c <ExtLights_LightState+0x234>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
		ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002322:	4b83      	ldr	r3, [pc, #524]	; (8002530 <ExtLights_LightState+0x238>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e017      	b.n	800235a <ExtLights_LightState+0x62>
	}/* Follow me home is off, turn off the lights.*/
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 800232a:	4b7e      	ldr	r3, [pc, #504]	; (8002524 <ExtLights_LightState+0x22c>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d113      	bne.n	800235a <ExtLights_LightState+0x62>
	{
		ExtLights_LightSwitchMode();
 8002332:	f000 f9c3 	bl	80026bc <ExtLights_LightSwitchMode>
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 8002336:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <ExtLights_LightState+0x23c>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <ExtLights_LightState+0x62>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 800233e:	2100      	movs	r1, #0
 8002340:	4879      	ldr	r0, [pc, #484]	; (8002528 <ExtLights_LightState+0x230>)
 8002342:	f00f fbd8 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002346:	2104      	movs	r1, #4
 8002348:	4877      	ldr	r0, [pc, #476]	; (8002528 <ExtLights_LightState+0x230>)
 800234a:	f00f fbd4 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <ExtLights_LightState+0x234>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8002354:	4b76      	ldr	r3, [pc, #472]	; (8002530 <ExtLights_LightState+0x238>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If any light state is set to on, then stop the follow me home. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 800235a:	4b77      	ldr	r3, [pc, #476]	; (8002538 <ExtLights_LightState+0x240>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d017      	beq.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <ExtLights_LightState+0x244>)
 8002364:	781b      	ldrb	r3, [r3, #0]
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8002366:	2b01      	cmp	r3, #1
 8002368:	d013      	beq.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 800236a:	4b72      	ldr	r3, [pc, #456]	; (8002534 <ExtLights_LightState+0x23c>)
 800236c:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10f      	bne.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8002372:	4b73      	ldr	r3, [pc, #460]	; (8002540 <ExtLights_LightState+0x248>)
 8002374:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8002376:	2b01      	cmp	r3, #1
 8002378:	d00b      	beq.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 800237a:	4b72      	ldr	r3, [pc, #456]	; (8002544 <ExtLights_LightState+0x24c>)
 800237c:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 800237e:	2b01      	cmp	r3, #1
 8002380:	d007      	beq.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8002382:	4b71      	ldr	r3, [pc, #452]	; (8002548 <ExtLights_LightState+0x250>)
 8002384:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8002386:	2b01      	cmp	r3, #1
 8002388:	d003      	beq.n	8002392 <ExtLights_LightState+0x9a>
		ExtLights_HazardLight_CurrentState == STD_HIGH)
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <ExtLights_LightState+0x254>)
 800238c:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 800238e:	2b01      	cmp	r3, #1
 8002390:	d11a      	bne.n	80023c8 <ExtLights_LightState+0xd0>
	{
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 8002392:	4b68      	ldr	r3, [pc, #416]	; (8002534 <ExtLights_LightState+0x23c>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d116      	bne.n	80023c8 <ExtLights_LightState+0xd0>
		{
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(STD_LOW);
 800239a:	2000      	movs	r0, #0
 800239c:	f00f fc20 	bl	8011be0 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter((uint8*)2);
 80023a0:	2002      	movs	r0, #2
 80023a2:	f00f fac1 	bl	8011928 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
			Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter((uint8*)2);
 80023a6:	2002      	movs	r0, #2
 80023a8:	f00f fb2e 	bl	8011a08 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80023ac:	2100      	movs	r1, #0
 80023ae:	485e      	ldr	r0, [pc, #376]	; (8002528 <ExtLights_LightState+0x230>)
 80023b0:	f00f fba1 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80023b4:	2104      	movs	r1, #4
 80023b6:	485c      	ldr	r0, [pc, #368]	; (8002528 <ExtLights_LightState+0x230>)
 80023b8:	f00f fb9d 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 80023bc:	4b5b      	ldr	r3, [pc, #364]	; (800252c <ExtLights_LightState+0x234>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80023c2:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <ExtLights_LightState+0x238>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* Control the turn signals for the central lock lock unlock sequence when requested. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <ExtLights_LightState+0x258>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <ExtLights_LightState+0xea>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80023d0:	2108      	movs	r1, #8
 80023d2:	4860      	ldr	r0, [pc, #384]	; (8002554 <ExtLights_LightState+0x25c>)
 80023d4:	f00f fb82 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80023d8:	210c      	movs	r1, #12
 80023da:	485e      	ldr	r0, [pc, #376]	; (8002554 <ExtLights_LightState+0x25c>)
 80023dc:	f00f fb7e 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80023e0:	e016      	b.n	8002410 <ExtLights_LightState+0x118>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <ExtLights_LightState+0x258>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <ExtLights_LightState+0x104>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80023ea:	2108      	movs	r1, #8
 80023ec:	4859      	ldr	r0, [pc, #356]	; (8002554 <ExtLights_LightState+0x25c>)
 80023ee:	f00f fb82 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80023f2:	210c      	movs	r1, #12
 80023f4:	4857      	ldr	r0, [pc, #348]	; (8002554 <ExtLights_LightState+0x25c>)
 80023f6:	f00f fb7e 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
 80023fa:	e009      	b.n	8002410 <ExtLights_LightState+0x118>
	}/* Allows for turning on the hazard lights or turn signals independently of other states in the system. */
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 80023fc:	4b54      	ldr	r3, [pc, #336]	; (8002550 <ExtLights_LightState+0x258>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d003      	beq.n	800240c <ExtLights_LightState+0x114>
 8002404:	4b52      	ldr	r3, [pc, #328]	; (8002550 <ExtLights_LightState+0x258>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b04      	cmp	r3, #4
 800240a:	d101      	bne.n	8002410 <ExtLights_LightState+0x118>
	{
		ExtLights_TurnSignalHazardLight();
 800240c:	f7ff fe82 	bl	8002114 <ExtLights_TurnSignalHazardLight>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_FlashHighBeam_CurrentState == STD_HIGH)
 8002410:	4b4a      	ldr	r3, [pc, #296]	; (800253c <ExtLights_LightState+0x244>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d103      	bne.n	8002420 <ExtLights_LightState+0x128>
	{
		ExtLights_HighBeam(STD_HIGH);
 8002418:	2001      	movs	r0, #1
 800241a:	f000 fa3d 	bl	8002898 <ExtLights_HighBeam>
 800241e:	e006      	b.n	800242e <ExtLights_LightState+0x136>
	}
	else if(ExtLights_FlashHighBeam_CurrentState == STD_LOW)
 8002420:	4b46      	ldr	r3, [pc, #280]	; (800253c <ExtLights_LightState+0x244>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <ExtLights_LightState+0x136>
	{
		ExtLights_HighBeam(STD_LOW);
 8002428:	2000      	movs	r0, #0
 800242a:	f000 fa35 	bl	8002898 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_HighBeam_CurrentState == STD_HIGH)
 800242e:	4b44      	ldr	r3, [pc, #272]	; (8002540 <ExtLights_LightState+0x248>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d103      	bne.n	800243e <ExtLights_LightState+0x146>
	{
		ExtLights_HighBeam(STD_HIGH);
 8002436:	2001      	movs	r0, #1
 8002438:	f000 fa2e 	bl	8002898 <ExtLights_HighBeam>
 800243c:	e006      	b.n	800244c <ExtLights_LightState+0x154>
	}
	else if(ExtLights_HighBeam_CurrentState == STD_LOW)
 800243e:	4b40      	ldr	r3, [pc, #256]	; (8002540 <ExtLights_LightState+0x248>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <ExtLights_LightState+0x154>
	{
		ExtLights_HighBeam(STD_LOW);
 8002446:	2000      	movs	r0, #0
 8002448:	f000 fa26 	bl	8002898 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the brake lights. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH)
 800244c:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <ExtLights_LightState+0x240>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d111      	bne.n	8002478 <ExtLights_LightState+0x180>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <ExtLights_LightState+0x240>)
 8002456:	781a      	ldrb	r2, [r3, #0]
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <ExtLights_LightState+0x260>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d006      	beq.n	800246e <ExtLights_LightState+0x176>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <ExtLights_LightState+0x240>)
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <ExtLights_LightState+0x260>)
 8002466:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8002468:	2000      	movs	r0, #0
 800246a:	f00f f8c5 	bl	80115f8 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 800246e:	2104      	movs	r1, #4
 8002470:	483a      	ldr	r0, [pc, #232]	; (800255c <ExtLights_LightState+0x264>)
 8002472:	f00f fb33 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8002476:	e014      	b.n	80024a2 <ExtLights_LightState+0x1aa>
	}
	else if(ExtLights_BrakeLight_CurrentState == STD_LOW)
 8002478:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <ExtLights_LightState+0x240>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d110      	bne.n	80024a2 <ExtLights_LightState+0x1aa>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 8002480:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <ExtLights_LightState+0x240>)
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <ExtLights_LightState+0x260>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d006      	beq.n	800249a <ExtLights_LightState+0x1a2>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 800248c:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <ExtLights_LightState+0x240>)
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <ExtLights_LightState+0x260>)
 8002492:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8002494:	2000      	movs	r0, #0
 8002496:	f00f f8af 	bl	80115f8 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 800249a:	2104      	movs	r1, #4
 800249c:	482f      	ldr	r0, [pc, #188]	; (800255c <ExtLights_LightState+0x264>)
 800249e:	f00f fb2a 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the rear fog lights. */
	if(ExtLights_RearFogLight_CurrentState == STD_HIGH)
 80024a2:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <ExtLights_LightState+0x268>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d111      	bne.n	80024ce <ExtLights_LightState+0x1d6>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <ExtLights_LightState+0x268>)
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <ExtLights_LightState+0x26c>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d006      	beq.n	80024c4 <ExtLights_LightState+0x1cc>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <ExtLights_LightState+0x268>)
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <ExtLights_LightState+0x26c>)
 80024bc:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 80024be:	2000      	movs	r0, #0
 80024c0:	f00f f8ba 	bl	8011638 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80024c4:	210c      	movs	r1, #12
 80024c6:	4825      	ldr	r0, [pc, #148]	; (800255c <ExtLights_LightState+0x264>)
 80024c8:	f00f fb08 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80024cc:	e014      	b.n	80024f8 <ExtLights_LightState+0x200>
	}
	else if(ExtLights_RearFogLight_CurrentState == STD_LOW)
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <ExtLights_LightState+0x268>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d110      	bne.n	80024f8 <ExtLights_LightState+0x200>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <ExtLights_LightState+0x268>)
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <ExtLights_LightState+0x26c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d006      	beq.n	80024f0 <ExtLights_LightState+0x1f8>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <ExtLights_LightState+0x268>)
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <ExtLights_LightState+0x26c>)
 80024e8:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f00f f8a4 	bl	8011638 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80024f0:	210c      	movs	r1, #12
 80024f2:	481a      	ldr	r0, [pc, #104]	; (800255c <ExtLights_LightState+0x264>)
 80024f4:	f00f faff 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the front fog lights. */
	if(ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <ExtLights_LightState+0x270>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d137      	bne.n	8002570 <ExtLights_LightState+0x278>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <ExtLights_LightState+0x270>)
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <ExtLights_LightState+0x274>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d006      	beq.n	800251a <ExtLights_LightState+0x222>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <ExtLights_LightState+0x270>)
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	4b16      	ldr	r3, [pc, #88]	; (800256c <ExtLights_LightState+0x274>)
 8002512:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8002514:	2000      	movs	r0, #0
 8002516:	f00f f87f 	bl	8011618 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 800251a:	2108      	movs	r1, #8
 800251c:	480f      	ldr	r0, [pc, #60]	; (800255c <ExtLights_LightState+0x264>)
 800251e:	f00f fadd 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8002522:	e03a      	b.n	800259a <ExtLights_LightState+0x2a2>
 8002524:	20000122 	.word	0x20000122
 8002528:	20000540 	.word	0x20000540
 800252c:	20000154 	.word	0x20000154
 8002530:	20000155 	.word	0x20000155
 8002534:	2000014f 	.word	0x2000014f
 8002538:	2000014e 	.word	0x2000014e
 800253c:	2000014d 	.word	0x2000014d
 8002540:	20000150 	.word	0x20000150
 8002544:	20000152 	.word	0x20000152
 8002548:	20000153 	.word	0x20000153
 800254c:	20000156 	.word	0x20000156
 8002550:	20000123 	.word	0x20000123
 8002554:	200006a8 	.word	0x200006a8
 8002558:	2000016e 	.word	0x2000016e
 800255c:	200005f4 	.word	0x200005f4
 8002560:	20000157 	.word	0x20000157
 8002564:	2000016c 	.word	0x2000016c
 8002568:	20000151 	.word	0x20000151
 800256c:	2000016d 	.word	0x2000016d
	}
	else if(ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8002570:	4b42      	ldr	r3, [pc, #264]	; (800267c <ExtLights_LightState+0x384>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d110      	bne.n	800259a <ExtLights_LightState+0x2a2>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8002578:	4b40      	ldr	r3, [pc, #256]	; (800267c <ExtLights_LightState+0x384>)
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <ExtLights_LightState+0x388>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d006      	beq.n	8002592 <ExtLights_LightState+0x29a>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8002584:	4b3d      	ldr	r3, [pc, #244]	; (800267c <ExtLights_LightState+0x384>)
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <ExtLights_LightState+0x388>)
 800258a:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 800258c:	2000      	movs	r0, #0
 800258e:	f00f f843 	bl	8011618 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8002592:	2108      	movs	r1, #8
 8002594:	483b      	ldr	r0, [pc, #236]	; (8002684 <ExtLights_LightState+0x38c>)
 8002596:	f00f faae 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on the reverse light. */
	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <ExtLights_LightState+0x390>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f98c 	bl	80028bc <ExtLights_ReverseLight>

	if((ExtLights_DtcArray[0] != 0 || ExtLights_DtcArray[1] != 0) && ExtLights_LowBeam_CurrentState == STD_HIGH)
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <ExtLights_LightState+0x394>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <ExtLights_LightState+0x2bc>
 80025ac:	4b37      	ldr	r3, [pc, #220]	; (800268c <ExtLights_LightState+0x394>)
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <ExtLights_LightState+0x2cc>
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <ExtLights_LightState+0x398>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d103      	bne.n	80025c4 <ExtLights_LightState+0x2cc>
	{
		ExtLights_FrontFogLight_CurrentState = STD_HIGH;
 80025bc:	4b2f      	ldr	r3, [pc, #188]	; (800267c <ExtLights_LightState+0x384>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e00e      	b.n	80025e2 <ExtLights_LightState+0x2ea>
	}
	else if((ExtLights_DtcArray[0] == 0 || ExtLights_DtcArray[1] == 0) && Rte_P_Btc_BtcPort_Btc_FrontFogLight == STD_LOW)
 80025c4:	4b31      	ldr	r3, [pc, #196]	; (800268c <ExtLights_LightState+0x394>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <ExtLights_LightState+0x2dc>
 80025cc:	4b2f      	ldr	r3, [pc, #188]	; (800268c <ExtLights_LightState+0x394>)
 80025ce:	785b      	ldrb	r3, [r3, #1]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <ExtLights_LightState+0x2ea>
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <ExtLights_LightState+0x39c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <ExtLights_LightState+0x2ea>
	{
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 80025dc:	4b27      	ldr	r3, [pc, #156]	; (800267c <ExtLights_LightState+0x384>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if((ExtLights_DtcArray[2] != 0 || ExtLights_DtcArray[3] != 0) && ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <ExtLights_LightState+0x394>)
 80025e4:	789b      	ldrb	r3, [r3, #2]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <ExtLights_LightState+0x2fa>
 80025ea:	4b28      	ldr	r3, [pc, #160]	; (800268c <ExtLights_LightState+0x394>)
 80025ec:	78db      	ldrb	r3, [r3, #3]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <ExtLights_LightState+0x30a>
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <ExtLights_LightState+0x3a0>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d103      	bne.n	8002602 <ExtLights_LightState+0x30a>
	{
		ExtLights_RearFogLight_CurrentState = STD_HIGH;
 80025fa:	4b28      	ldr	r3, [pc, #160]	; (800269c <ExtLights_LightState+0x3a4>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e00e      	b.n	8002620 <ExtLights_LightState+0x328>
	}
	else if((ExtLights_DtcArray[2] == 0 || ExtLights_DtcArray[3] == 0) && Rte_P_Btc_BtcPort_Btc_RearFogLight == STD_LOW)
 8002602:	4b22      	ldr	r3, [pc, #136]	; (800268c <ExtLights_LightState+0x394>)
 8002604:	789b      	ldrb	r3, [r3, #2]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <ExtLights_LightState+0x31a>
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <ExtLights_LightState+0x394>)
 800260c:	78db      	ldrb	r3, [r3, #3]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <ExtLights_LightState+0x328>
 8002612:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <ExtLights_LightState+0x3a8>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <ExtLights_LightState+0x328>
	{
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <ExtLights_LightState+0x3a4>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if((ExtLights_DtcArray[8] != 0 || ExtLights_DtcArray[9] != 0) && ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <ExtLights_LightState+0x394>)
 8002622:	7a1b      	ldrb	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <ExtLights_LightState+0x338>
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <ExtLights_LightState+0x394>)
 800262a:	7a5b      	ldrb	r3, [r3, #9]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <ExtLights_LightState+0x348>
 8002630:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <ExtLights_LightState+0x3ac>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d103      	bne.n	8002640 <ExtLights_LightState+0x348>
	{
		ExtLights_ReverseLight_CurrentState = STD_HIGH;
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <ExtLights_LightState+0x390>)
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e00e      	b.n	800265e <ExtLights_LightState+0x366>
	}
	else if((ExtLights_DtcArray[8] == 0 || ExtLights_DtcArray[9] == 0) && Rte_P_Btc_BtcPort_Btc_ReverseLight == STD_LOW)
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <ExtLights_LightState+0x394>)
 8002642:	7a1b      	ldrb	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <ExtLights_LightState+0x358>
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <ExtLights_LightState+0x394>)
 800264a:	7a5b      	ldrb	r3, [r3, #9]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <ExtLights_LightState+0x366>
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <ExtLights_LightState+0x3b0>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <ExtLights_LightState+0x366>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <ExtLights_LightState+0x390>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <ExtLights_LightState+0x3b4>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <ExtLights_LightState+0x380>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <ExtLights_LightState+0x390>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <ExtLights_LightState+0x3a4>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 8002672:	4b02      	ldr	r3, [pc, #8]	; (800267c <ExtLights_LightState+0x384>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000151 	.word	0x20000151
 8002680:	2000016d 	.word	0x2000016d
 8002684:	200005f4 	.word	0x200005f4
 8002688:	2000014c 	.word	0x2000014c
 800268c:	20000170 	.word	0x20000170
 8002690:	20000154 	.word	0x20000154
 8002694:	200000e7 	.word	0x200000e7
 8002698:	20000155 	.word	0x20000155
 800269c:	20000157 	.word	0x20000157
 80026a0:	200000ec 	.word	0x200000ec
 80026a4:	2000014e 	.word	0x2000014e
 80026a8:	200000ed 	.word	0x200000ed
 80026ac:	20000120 	.word	0x20000120

080026b0 <ExtLights_MainFunction>:
* Function: ExtLights_MainFunction										   		   *
* Description: Exterior lights application main function. Controls application	   *
* 			   states. 		   													   *
************************************************************************************/
VOID ExtLights_MainFunction()
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	ExtLights_LightState();
 80026b4:	f7ff fe20 	bl	80022f8 <ExtLights_LightState>
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}

080026bc <ExtLights_LightSwitchMode>:
/***********************************************************************************
* Function: ExtLights_LightSwitchMode										   	   *
* Description: Control the light switch.								 		   *
************************************************************************************/
VOID ExtLights_LightSwitchMode()
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	/* Switch through the light switch states. */
	switch(ExtLights_LightsSwitch_CurrentState)
 80026c0:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	3b17      	subs	r3, #23
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	f200 80d1 	bhi.w	800286e <ExtLights_LightSwitchMode+0x1b2>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <ExtLights_LightSwitchMode+0x18>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	0800272f 	.word	0x0800272f
 80026dc:	080027cf 	.word	0x080027cf
 80026e0:	08002825 	.word	0x08002825
	{
		/* Switch is on position zero, turn off the lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 80026e4:	4b65      	ldr	r3, [pc, #404]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	4b63      	ldr	r3, [pc, #396]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d00f      	beq.n	8002710 <ExtLights_LightSwitchMode+0x54>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	4b61      	ldr	r3, [pc, #388]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 80026f6:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f00e ffad 	bl	8011658 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 80026fe:	2000      	movs	r0, #0
 8002700:	f00e ffb9 	bl	8011676 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8002704:	4b5e      	ldr	r3, [pc, #376]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800270a:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002710:	2100      	movs	r1, #0
 8002712:	485d      	ldr	r0, [pc, #372]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 8002714:	f00f f9ef 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002718:	2104      	movs	r1, #4
 800271a:	485b      	ldr	r0, [pc, #364]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 800271c:	f00f f9eb 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8002720:	4b57      	ldr	r3, [pc, #348]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8002726:	4b57      	ldr	r3, [pc, #348]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
			break;
 800272c:	e0a2      	b.n	8002874 <ExtLights_LightSwitchMode+0x1b8>
		/* Switch is on position one, turn automatic lights controlled by sensor's input. */
		case EXTLIGHTS_LIGHTSWITCH_STATEONE:
			/* Read the sensor status. */
			if(Rte_P_Os_OsPort_Os_Counter % 39 == 0)
 800272e:	4b57      	ldr	r3, [pc, #348]	; (800288c <ExtLights_LightSwitchMode+0x1d0>)
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	4b57      	ldr	r3, [pc, #348]	; (8002890 <ExtLights_LightSwitchMode+0x1d4>)
 8002734:	fba3 2301 	umull	r2, r3, r3, r1
 8002738:	1aca      	subs	r2, r1, r3
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	4413      	add	r3, r2
 800273e:	095a      	lsrs	r2, r3, #5
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	1aca      	subs	r2, r1, r3
 800274c:	2a00      	cmp	r2, #0
 800274e:	d102      	bne.n	8002756 <ExtLights_LightSwitchMode+0x9a>
			{
				Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(EXTLIGHTS_LS_REQUEST);
 8002750:	2000      	movs	r0, #0
 8002752:	f000 ff4f 	bl	80035f4 <SenCtrl_ProcessSensorValue>
			}
			else
			{
				/* do nothing */
			}
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8002756:	4b49      	ldr	r3, [pc, #292]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d00f      	beq.n	8002782 <ExtLights_LightSwitchMode+0xc6>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8002762:	4b45      	ldr	r3, [pc, #276]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	4b45      	ldr	r3, [pc, #276]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 8002768:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 800276a:	2000      	movs	r0, #0
 800276c:	f00e ff74 	bl	8011658 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8002770:	2000      	movs	r0, #0
 8002772:	f00e ff80 	bl	8011676 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8002776:	4b42      	ldr	r3, [pc, #264]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800277c:	4b41      	ldr	r3, [pc, #260]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}
			/* If the sensor status is on, turn on the lights to on. */
			if(ExtLights_LightSensorState == 1)
 8002782:	4b44      	ldr	r3, [pc, #272]	; (8002894 <ExtLights_LightSwitchMode+0x1d8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10e      	bne.n	80027a8 <ExtLights_LightSwitchMode+0xec>
			{
				ExtLights_LowBeam_CurrentState = STD_HIGH;
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002790:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002796:	2100      	movs	r1, #0
 8002798:	483b      	ldr	r0, [pc, #236]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 800279a:	f00f f99f 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800279e:	2104      	movs	r1, #4
 80027a0:	4839      	ldr	r0, [pc, #228]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 80027a2:	f00f f99b 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				ExtLights_LowBeam_CurrentState = STD_LOW;
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
			}
			break;
 80027a6:	e064      	b.n	8002872 <ExtLights_LightSwitchMode+0x1b6>
			else if(ExtLights_LightSensorState != 1)
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <ExtLights_LightSwitchMode+0x1d8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d060      	beq.n	8002872 <ExtLights_LightSwitchMode+0x1b6>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 80027b0:	4b33      	ldr	r3, [pc, #204]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80027bc:	2100      	movs	r1, #0
 80027be:	4832      	ldr	r0, [pc, #200]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 80027c0:	f00f f999 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80027c4:	2104      	movs	r1, #4
 80027c6:	4830      	ldr	r0, [pc, #192]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 80027c8:	f00f f995 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			break;
 80027cc:	e051      	b.n	8002872 <ExtLights_LightSwitchMode+0x1b6>
		/* Switch is on position three, turn on position lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETWO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 80027ce:	4b2b      	ldr	r3, [pc, #172]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d00f      	beq.n	80027fa <ExtLights_LightSwitchMode+0x13e>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	4b27      	ldr	r3, [pc, #156]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 80027e0:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f00e ff38 	bl	8011658 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f00e ff44 	bl	8011676 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80027fa:	2100      	movs	r1, #0
 80027fc:	4822      	ldr	r0, [pc, #136]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 80027fe:	f00f f96d 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002802:	2104      	movs	r1, #4
 8002804:	4820      	ldr	r0, [pc, #128]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 8002806:	f00f f969 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 800280a:	2000      	movs	r0, #0
 800280c:	f00e ff24 	bl	8011658 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
			Rte_Write_TimH_TimHPort_Tim2Ccr2(100);
 8002810:	2064      	movs	r0, #100	; 0x64
 8002812:	f00e ff30 	bl	8011676 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
			break;
 8002822:	e027      	b.n	8002874 <ExtLights_LightSwitchMode+0x1b8>
		/* Switch is on position four, turn on night time lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d00f      	beq.n	8002850 <ExtLights_LightSwitchMode+0x194>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <ExtLights_LightSwitchMode+0x1bc>)
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <ExtLights_LightSwitchMode+0x1c0>)
 8002836:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8002838:	2000      	movs	r0, #0
 800283a:	f00e ff0d 	bl	8011658 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 800283e:	2000      	movs	r0, #0
 8002840:	f00e ff19 	bl	8011676 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002850:	2100      	movs	r1, #0
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 8002854:	f00f f942 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002858:	2104      	movs	r1, #4
 800285a:	480b      	ldr	r0, [pc, #44]	; (8002888 <ExtLights_LightSwitchMode+0x1cc>)
 800285c:	f00f f93e 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			ExtLights_LowBeam_CurrentState = STD_HIGH;
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <ExtLights_LightSwitchMode+0x1c4>)
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <ExtLights_LightSwitchMode+0x1c8>)
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
			break;
 800286c:	e002      	b.n	8002874 <ExtLights_LightSwitchMode+0x1b8>
		default:
			break;
 800286e:	bf00      	nop
 8002870:	e000      	b.n	8002874 <ExtLights_LightSwitchMode+0x1b8>
			break;
 8002872:	bf00      	nop
	}
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2000014f 	.word	0x2000014f
 800287c:	2000016f 	.word	0x2000016f
 8002880:	20000154 	.word	0x20000154
 8002884:	20000155 	.word	0x20000155
 8002888:	20000540 	.word	0x20000540
 800288c:	200002d8 	.word	0x200002d8
 8002890:	a41a41a5 	.word	0xa41a41a5
 8002894:	20000168 	.word	0x20000168

08002898 <ExtLights_HighBeam>:
/***********************************************************************************
* Function: ExtLights_HighBeam										   			   *
* Description: High beam trigger. 		  										   *
************************************************************************************/
VOID ExtLights_HighBeam(uint8 PinState)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	461a      	mov	r2, r3
 80028a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028aa:	4803      	ldr	r0, [pc, #12]	; (80028b8 <ExtLights_HighBeam+0x20>)
 80028ac:	f00f fad7 	bl	8011e5e <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40020000 	.word	0x40020000

080028bc <ExtLights_ReverseLight>:
/***********************************************************************************
* Function: ExtLights_ReverseLight										   		   *
* Description: Reverse light trigger. 		   									   *
************************************************************************************/
VOID ExtLights_ReverseLight(uint8 PinState)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	461a      	mov	r2, r3
 80028ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ce:	4803      	ldr	r0, [pc, #12]	; (80028dc <ExtLights_ReverseLight+0x20>)
 80028d0:	f00f fac5 	bl	8011e5e <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40020400 	.word	0x40020400

080028e0 <Hvac_MainFunction>:
/***********************************************************************************
* Function: Hvac_MainFunction											 		   *
* Description: Application main function.					                       *
************************************************************************************/
VOID Hvac_MainFunction()
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	Hvac_MainCounter++;
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <Hvac_MainFunction+0x18>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3301      	adds	r3, #1
 80028ea:	4a03      	ldr	r2, [pc, #12]	; (80028f8 <Hvac_MainFunction+0x18>)
 80028ec:	6013      	str	r3, [r2, #0]
	Hvac_ProcessCommand();
 80028ee:	f000 f805 	bl	80028fc <Hvac_ProcessCommand>
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000017c 	.word	0x2000017c

080028fc <Hvac_ProcessCommand>:
/***********************************************************************************
* Function: Hvac_ProcessCommand											 		   *
* Description: Process HVAC states.					                               *
************************************************************************************/
VOID Hvac_ProcessCommand()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
	static uint8 sensorValueTs = 0;
	char buffer_T[3];
	char buffer_F[2];
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(HVAC_TS_REQUEST);
 8002902:	2003      	movs	r0, #3
 8002904:	f000 fe76 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	sensorValueTs = Hvac_TsState;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <Hvac_ProcessCommand+0x54>)
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <Hvac_ProcessCommand+0x58>)
 800290e:	701a      	strb	r2, [r3, #0]
	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <Hvac_ProcessCommand+0x5c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	f040 81d1 	bne.w	8002cbc <Hvac_ProcessCommand+0x3c0>
	{
		if(Btc_FanValue == STD_LOW)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <Hvac_ProcessCommand+0x60>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <Hvac_ProcessCommand+0x2c>
		{
			Hvac_FanValue = 1;
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <Hvac_ProcessCommand+0x64>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Btc_TemperatureValue == STD_LOW)
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <Hvac_ProcessCommand+0x68>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d106      	bne.n	800293e <Hvac_ProcessCommand+0x42>
		{
			Hvac_TemperatureValue = 22;
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <Hvac_ProcessCommand+0x6c>)
 8002932:	2216      	movs	r2, #22
 8002934:	701a      	strb	r2, [r3, #0]
			Hvac_prevTemperatureValue = Hvac_TemperatureValue;
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <Hvac_ProcessCommand+0x6c>)
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <Hvac_ProcessCommand+0x70>)
 800293c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Hvac_FanValue != STD_LOW)
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <Hvac_ProcessCommand+0x64>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <Hvac_ProcessCommand+0x78>
		{
			Hvac_CurrentState = STD_HIGH;
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <Hvac_ProcessCommand+0x74>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e019      	b.n	8002982 <Hvac_ProcessCommand+0x86>
 800294e:	bf00      	nop
 8002950:	20000180 	.word	0x20000180
 8002954:	20000198 	.word	0x20000198
 8002958:	20000120 	.word	0x20000120
 800295c:	200000ef 	.word	0x200000ef
 8002960:	20000182 	.word	0x20000182
 8002964:	200000f0 	.word	0x200000f0
 8002968:	20000183 	.word	0x20000183
 800296c:	20000197 	.word	0x20000197
 8002970:	20000181 	.word	0x20000181
		}
		else if(Hvac_FanValue == STD_LOW)
 8002974:	4b8f      	ldr	r3, [pc, #572]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <Hvac_ProcessCommand+0x86>
		{
			Hvac_CurrentState = STD_LOW;
 800297c:	4b8e      	ldr	r3, [pc, #568]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Hvac_TemperatureValue != Hvac_prevTemperatureValue)
 8002982:	4b8e      	ldr	r3, [pc, #568]	; (8002bbc <Hvac_ProcessCommand+0x2c0>)
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	4b8e      	ldr	r3, [pc, #568]	; (8002bc0 <Hvac_ProcessCommand+0x2c4>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d018      	beq.n	80029c0 <Hvac_ProcessCommand+0xc4>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 800298e:	4b8d      	ldr	r3, [pc, #564]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b1f      	cmp	r3, #31
 8002994:	d007      	beq.n	80029a6 <Hvac_ProcessCommand+0xaa>
 8002996:	4b8b      	ldr	r3, [pc, #556]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <Hvac_ProcessCommand+0xaa>
 800299e:	4b85      	ldr	r3, [pc, #532]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <Hvac_ProcessCommand+0xb6>
			{
				Btc_FanValue = 31;
 80029a6:	4b87      	ldr	r3, [pc, #540]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 80029a8:	221f      	movs	r2, #31
 80029aa:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80029ac:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Hvac_prevTemperatureValue = Hvac_TemperatureValue;
 80029b2:	4b82      	ldr	r3, [pc, #520]	; (8002bbc <Hvac_ProcessCommand+0x2c0>)
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <Hvac_ProcessCommand+0x2c4>)
 80029b8:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80029ba:	4b7f      	ldr	r3, [pc, #508]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Ac != Hvac_Ac)
 80029c0:	4b81      	ldr	r3, [pc, #516]	; (8002bc8 <Hvac_ProcessCommand+0x2cc>)
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	4b81      	ldr	r3, [pc, #516]	; (8002bcc <Hvac_ProcessCommand+0x2d0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d018      	beq.n	80029fe <Hvac_ProcessCommand+0x102>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 80029cc:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b1f      	cmp	r3, #31
 80029d2:	d007      	beq.n	80029e4 <Hvac_ProcessCommand+0xe8>
 80029d4:	4b7b      	ldr	r3, [pc, #492]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <Hvac_ProcessCommand+0xe8>
 80029dc:	4b75      	ldr	r3, [pc, #468]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <Hvac_ProcessCommand+0xf4>
			{
				Btc_FanValue = 31;
 80029e4:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 80029e6:	221f      	movs	r2, #31
 80029e8:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80029ea:	4b72      	ldr	r3, [pc, #456]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Ac = Hvac_Ac;
 80029f0:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <Hvac_ProcessCommand+0x2d0>)
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	4b74      	ldr	r3, [pc, #464]	; (8002bc8 <Hvac_ProcessCommand+0x2cc>)
 80029f6:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80029f8:	4b6f      	ldr	r3, [pc, #444]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_AutomaticMode != Hvac_AutomaticMode)
 80029fe:	4b74      	ldr	r3, [pc, #464]	; (8002bd0 <Hvac_ProcessCommand+0x2d4>)
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	4b74      	ldr	r3, [pc, #464]	; (8002bd4 <Hvac_ProcessCommand+0x2d8>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d018      	beq.n	8002a3c <Hvac_ProcessCommand+0x140>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b1f      	cmp	r3, #31
 8002a10:	d007      	beq.n	8002a22 <Hvac_ProcessCommand+0x126>
 8002a12:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <Hvac_ProcessCommand+0x126>
 8002a1a:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <Hvac_ProcessCommand+0x132>
			{
				Btc_FanValue = 31;
 8002a22:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a24:	221f      	movs	r2, #31
 8002a26:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_AutomaticMode = Hvac_AutomaticMode;
 8002a2e:	4b69      	ldr	r3, [pc, #420]	; (8002bd4 <Hvac_ProcessCommand+0x2d8>)
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <Hvac_ProcessCommand+0x2d4>)
 8002a34:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002a36:	4b60      	ldr	r3, [pc, #384]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_LegVent != Hvac_LegVent)
 8002a3c:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <Hvac_ProcessCommand+0x2dc>)
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <Hvac_ProcessCommand+0x2e0>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d018      	beq.n	8002a7a <Hvac_ProcessCommand+0x17e>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002a48:	4b5e      	ldr	r3, [pc, #376]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b1f      	cmp	r3, #31
 8002a4e:	d007      	beq.n	8002a60 <Hvac_ProcessCommand+0x164>
 8002a50:	4b5c      	ldr	r3, [pc, #368]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <Hvac_ProcessCommand+0x164>
 8002a58:	4b56      	ldr	r3, [pc, #344]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <Hvac_ProcessCommand+0x170>
			{
				Btc_FanValue = 31;
 8002a60:	4b58      	ldr	r3, [pc, #352]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a62:	221f      	movs	r2, #31
 8002a64:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002a66:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_LegVent = Hvac_LegVent;
 8002a6c:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <Hvac_ProcessCommand+0x2e0>)
 8002a6e:	781a      	ldrb	r2, [r3, #0]
 8002a70:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <Hvac_ProcessCommand+0x2dc>)
 8002a72:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002a74:	4b50      	ldr	r3, [pc, #320]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_MidVent != Hvac_MidVent)
 8002a7a:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <Hvac_ProcessCommand+0x2e4>)
 8002a7c:	781a      	ldrb	r2, [r3, #0]
 8002a7e:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <Hvac_ProcessCommand+0x2e8>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d018      	beq.n	8002ab8 <Hvac_ProcessCommand+0x1bc>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002a86:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b1f      	cmp	r3, #31
 8002a8c:	d007      	beq.n	8002a9e <Hvac_ProcessCommand+0x1a2>
 8002a8e:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <Hvac_ProcessCommand+0x1a2>
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <Hvac_ProcessCommand+0x1ae>
			{
				Btc_FanValue = 31;
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002aa0:	221f      	movs	r2, #31
 8002aa2:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_MidVent = Hvac_MidVent;
 8002aaa:	4b4e      	ldr	r3, [pc, #312]	; (8002be4 <Hvac_ProcessCommand+0x2e8>)
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	4b4c      	ldr	r3, [pc, #304]	; (8002be0 <Hvac_ProcessCommand+0x2e4>)
 8002ab0:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002ab2:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldVent != Hvac_WindshieldVent)
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <Hvac_ProcessCommand+0x2ec>)
 8002aba:	781a      	ldrb	r2, [r3, #0]
 8002abc:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <Hvac_ProcessCommand+0x2f0>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d018      	beq.n	8002af6 <Hvac_ProcessCommand+0x1fa>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b1f      	cmp	r3, #31
 8002aca:	d007      	beq.n	8002adc <Hvac_ProcessCommand+0x1e0>
 8002acc:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <Hvac_ProcessCommand+0x1e0>
 8002ad4:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d105      	bne.n	8002ae8 <Hvac_ProcessCommand+0x1ec>
			{
				Btc_FanValue = 31;
 8002adc:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002ade:	221f      	movs	r2, #31
 8002ae0:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldVent = Hvac_WindshieldVent;
 8002ae8:	4b40      	ldr	r3, [pc, #256]	; (8002bec <Hvac_ProcessCommand+0x2f0>)
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <Hvac_ProcessCommand+0x2ec>)
 8002aee:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldVent != Hvac_WindshieldVent)
 8002af6:	4b3c      	ldr	r3, [pc, #240]	; (8002be8 <Hvac_ProcessCommand+0x2ec>)
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	4b3c      	ldr	r3, [pc, #240]	; (8002bec <Hvac_ProcessCommand+0x2f0>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d018      	beq.n	8002b34 <Hvac_ProcessCommand+0x238>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002b02:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b1f      	cmp	r3, #31
 8002b08:	d007      	beq.n	8002b1a <Hvac_ProcessCommand+0x21e>
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <Hvac_ProcessCommand+0x21e>
 8002b12:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <Hvac_ProcessCommand+0x22a>
			{
				Btc_FanValue = 31;
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b1c:	221f      	movs	r2, #31
 8002b1e:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldVent = Hvac_WindshieldVent;
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <Hvac_ProcessCommand+0x2f0>)
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <Hvac_ProcessCommand+0x2ec>)
 8002b2c:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldDefrost != Hvac_WindshieldDefrost)
 8002b34:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <Hvac_ProcessCommand+0x2f4>)
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <Hvac_ProcessCommand+0x2f8>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d018      	beq.n	8002b72 <Hvac_ProcessCommand+0x276>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002b40:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b1f      	cmp	r3, #31
 8002b46:	d007      	beq.n	8002b58 <Hvac_ProcessCommand+0x25c>
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <Hvac_ProcessCommand+0x25c>
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <Hvac_ProcessCommand+0x268>
			{
				Btc_FanValue = 31;
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b5a:	221f      	movs	r2, #31
 8002b5c:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldDefrost = Hvac_WindshieldDefrost;
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <Hvac_ProcessCommand+0x2f8>)
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <Hvac_ProcessCommand+0x2f4>)
 8002b6a:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_RearWindshieldDefrost != Hvac_RearWindshieldDefrost)
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <Hvac_ProcessCommand+0x2fc>)
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <Hvac_ProcessCommand+0x300>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d040      	beq.n	8002c00 <Hvac_ProcessCommand+0x304>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b1f      	cmp	r3, #31
 8002b84:	d007      	beq.n	8002b96 <Hvac_ProcessCommand+0x29a>
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <Hvac_ProcessCommand+0x29a>
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <Hvac_ProcessCommand+0x2a6>
			{
				Btc_FanValue = 31;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <Hvac_ProcessCommand+0x2c8>)
 8002b98:	221f      	movs	r2, #31
 8002b9a:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <Hvac_ProcessCommand+0x2b8>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_RearWindshieldDefrost = Hvac_RearWindshieldDefrost;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <Hvac_ProcessCommand+0x300>)
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <Hvac_ProcessCommand+0x2fc>)
 8002ba8:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002baa:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <Hvac_ProcessCommand+0x2bc>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e026      	b.n	8002c00 <Hvac_ProcessCommand+0x304>
 8002bb2:	bf00      	nop
 8002bb4:	20000182 	.word	0x20000182
 8002bb8:	20000181 	.word	0x20000181
 8002bbc:	20000183 	.word	0x20000183
 8002bc0:	20000197 	.word	0x20000197
 8002bc4:	200000ef 	.word	0x200000ef
 8002bc8:	20000193 	.word	0x20000193
 8002bcc:	20000189 	.word	0x20000189
 8002bd0:	20000196 	.word	0x20000196
 8002bd4:	2000018c 	.word	0x2000018c
 8002bd8:	2000018e 	.word	0x2000018e
 8002bdc:	20000184 	.word	0x20000184
 8002be0:	2000018f 	.word	0x2000018f
 8002be4:	20000185 	.word	0x20000185
 8002be8:	20000190 	.word	0x20000190
 8002bec:	20000186 	.word	0x20000186
 8002bf0:	20000191 	.word	0x20000191
 8002bf4:	20000187 	.word	0x20000187
 8002bf8:	20000192 	.word	0x20000192
 8002bfc:	20000188 	.word	0x20000188
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Recirculation != Hvac_Recirculation)
 8002c00:	4ba3      	ldr	r3, [pc, #652]	; (8002e90 <Hvac_ProcessCommand+0x594>)
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	4ba3      	ldr	r3, [pc, #652]	; (8002e94 <Hvac_ProcessCommand+0x598>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d018      	beq.n	8002c3e <Hvac_ProcessCommand+0x342>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002c0c:	4ba2      	ldr	r3, [pc, #648]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b1f      	cmp	r3, #31
 8002c12:	d007      	beq.n	8002c24 <Hvac_ProcessCommand+0x328>
 8002c14:	4ba0      	ldr	r3, [pc, #640]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <Hvac_ProcessCommand+0x328>
 8002c1c:	4b9f      	ldr	r3, [pc, #636]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <Hvac_ProcessCommand+0x334>
			{
				Btc_FanValue = 31;
 8002c24:	4b9c      	ldr	r3, [pc, #624]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c26:	221f      	movs	r2, #31
 8002c28:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002c2a:	4b9c      	ldr	r3, [pc, #624]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Recirculation = Hvac_Recirculation;
 8002c30:	4b98      	ldr	r3, [pc, #608]	; (8002e94 <Hvac_ProcessCommand+0x598>)
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	4b96      	ldr	r3, [pc, #600]	; (8002e90 <Hvac_ProcessCommand+0x594>)
 8002c36:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002c38:	4b99      	ldr	r3, [pc, #612]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Recirculation != Hvac_Recirculation)
 8002c3e:	4b94      	ldr	r3, [pc, #592]	; (8002e90 <Hvac_ProcessCommand+0x594>)
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	4b94      	ldr	r3, [pc, #592]	; (8002e94 <Hvac_ProcessCommand+0x598>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d018      	beq.n	8002c7c <Hvac_ProcessCommand+0x380>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002c4a:	4b93      	ldr	r3, [pc, #588]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b1f      	cmp	r3, #31
 8002c50:	d007      	beq.n	8002c62 <Hvac_ProcessCommand+0x366>
 8002c52:	4b91      	ldr	r3, [pc, #580]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <Hvac_ProcessCommand+0x366>
 8002c5a:	4b90      	ldr	r3, [pc, #576]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <Hvac_ProcessCommand+0x372>
			{
				Btc_FanValue = 31;
 8002c62:	4b8d      	ldr	r3, [pc, #564]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c64:	221f      	movs	r2, #31
 8002c66:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002c68:	4b8c      	ldr	r3, [pc, #560]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Recirculation = Hvac_Recirculation;
 8002c6e:	4b89      	ldr	r3, [pc, #548]	; (8002e94 <Hvac_ProcessCommand+0x598>)
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	4b87      	ldr	r3, [pc, #540]	; (8002e90 <Hvac_ProcessCommand+0x594>)
 8002c74:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002c76:	4b8a      	ldr	r3, [pc, #552]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_NoRecirculation != Hvac_NoRecirculation)
 8002c7c:	4b89      	ldr	r3, [pc, #548]	; (8002ea4 <Hvac_ProcessCommand+0x5a8>)
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	4b89      	ldr	r3, [pc, #548]	; (8002ea8 <Hvac_ProcessCommand+0x5ac>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d023      	beq.n	8002cd0 <Hvac_ProcessCommand+0x3d4>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002c88:	4b83      	ldr	r3, [pc, #524]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b1f      	cmp	r3, #31
 8002c8e:	d007      	beq.n	8002ca0 <Hvac_ProcessCommand+0x3a4>
 8002c90:	4b81      	ldr	r3, [pc, #516]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <Hvac_ProcessCommand+0x3a4>
 8002c98:	4b80      	ldr	r3, [pc, #512]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <Hvac_ProcessCommand+0x3b0>
			{
				Btc_FanValue = 31;
 8002ca0:	4b7d      	ldr	r3, [pc, #500]	; (8002e98 <Hvac_ProcessCommand+0x59c>)
 8002ca2:	221f      	movs	r2, #31
 8002ca4:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002ca6:	4b7d      	ldr	r3, [pc, #500]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_NoRecirculation = Hvac_NoRecirculation;
 8002cac:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <Hvac_ProcessCommand+0x5ac>)
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	4b7c      	ldr	r3, [pc, #496]	; (8002ea4 <Hvac_ProcessCommand+0x5a8>)
 8002cb2:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002cb4:	4b7a      	ldr	r3, [pc, #488]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e009      	b.n	8002cd0 <Hvac_ProcessCommand+0x3d4>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8002cbc:	4b7b      	ldr	r3, [pc, #492]	; (8002eac <Hvac_ProcessCommand+0x5b0>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <Hvac_ProcessCommand+0x3d4>
	{
		Hvac_CurrentState = STD_LOW;
 8002cc4:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
		Hvac_IsCleared = STD_LOW;
 8002cca:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <Hvac_ProcessCommand+0x5b4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	sprintf(buffer_T, "%u", (unsigned int) Hvac_TemperatureValue);
 8002cd0:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <Hvac_ProcessCommand+0x5b8>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	4977      	ldr	r1, [pc, #476]	; (8002eb8 <Hvac_ProcessCommand+0x5bc>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f010 fbb2 	bl	8013444 <siprintf>
	sprintf(buffer_F, "%u", (unsigned int) Hvac_FanValue);
 8002ce0:	4b6e      	ldr	r3, [pc, #440]	; (8002e9c <Hvac_ProcessCommand+0x5a0>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	4973      	ldr	r1, [pc, #460]	; (8002eb8 <Hvac_ProcessCommand+0x5bc>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	f010 fbaa 	bl	8013444 <siprintf>
	if(Hvac_CurrentState == STD_LOW && Hvac_IsCleared == STD_LOW)
 8002cf0:	4b6b      	ldr	r3, [pc, #428]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <Hvac_ProcessCommand+0x410>
 8002cf8:	4b6d      	ldr	r3, [pc, #436]	; (8002eb0 <Hvac_ProcessCommand+0x5b4>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <Hvac_ProcessCommand+0x410>
	{
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
 8002d00:	f001 f87a 	bl	8003df8 <I2cLcd_Clear>
		Hvac_IsCleared = STD_HIGH;
 8002d04:	4b6a      	ldr	r3, [pc, #424]	; (8002eb0 <Hvac_ProcessCommand+0x5b4>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e16b      	b.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
	}
	else if(Hvac_CurrentState == STD_HIGH)
 8002d0c:	4b64      	ldr	r3, [pc, #400]	; (8002ea0 <Hvac_ProcessCommand+0x5a4>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 8167 	bne.w	8002fe4 <Hvac_ProcessCommand+0x6e8>
	{
		if(Hvac_MainCounter % 10 == 0)
 8002d16:	4b69      	ldr	r3, [pc, #420]	; (8002ebc <Hvac_ProcessCommand+0x5c0>)
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	4b69      	ldr	r3, [pc, #420]	; (8002ec0 <Hvac_ProcessCommand+0x5c4>)
 8002d1c:	fba3 2301 	umull	r2, r3, r3, r1
 8002d20:	08da      	lsrs	r2, r3, #3
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	1aca      	subs	r2, r1, r3
 8002d2c:	2a00      	cmp	r2, #0
 8002d2e:	d101      	bne.n	8002d34 <Hvac_ProcessCommand+0x438>
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
 8002d30:	f001 f862 	bl	8003df8 <I2cLcd_Clear>
		}
		else
		{
			/* do nothing */
		}
		Hvac_IsCleared = STD_LOW;
 8002d34:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <Hvac_ProcessCommand+0x5b4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 0);
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f001 f83c 	bl	8003dba <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("F=");
 8002d42:	4860      	ldr	r0, [pc, #384]	; (8002ec4 <Hvac_ProcessCommand+0x5c8>)
 8002d44:	f001 f824 	bl	8003d90 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 2);
 8002d48:	2102      	movs	r1, #2
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f001 f835 	bl	8003dba <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(buffer_F);
 8002d50:	463b      	mov	r3, r7
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 f81c 	bl	8003d90 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 0);
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f001 f82d 	bl	8003dba <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("T=");
 8002d60:	4859      	ldr	r0, [pc, #356]	; (8002ec8 <Hvac_ProcessCommand+0x5cc>)
 8002d62:	f001 f815 	bl	8003d90 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 2);
 8002d66:	2102      	movs	r1, #2
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f001 f826 	bl	8003dba <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(buffer_T);
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 f80d 	bl	8003d90 <I2cLcd_SendString>
		if(Hvac_AutomaticMode == STD_HIGH)
 8002d76:	4b55      	ldr	r3, [pc, #340]	; (8002ecc <Hvac_ProcessCommand+0x5d0>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d142      	bne.n	8002e04 <Hvac_ProcessCommand+0x508>
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 12);
 8002d7e:	210c      	movs	r1, #12
 8002d80:	2001      	movs	r0, #1
 8002d82:	f001 f81a 	bl	8003dba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AUTO");
 8002d86:	4852      	ldr	r0, [pc, #328]	; (8002ed0 <Hvac_ProcessCommand+0x5d4>)
 8002d88:	f001 f802 	bl	8003d90 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f001 f813 	bl	8003dba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002d94:	484f      	ldr	r0, [pc, #316]	; (8002ed4 <Hvac_ProcessCommand+0x5d8>)
 8002d96:	f000 fffb 	bl	8003d90 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 8002d9a:	2106      	movs	r1, #6
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f001 f80c 	bl	8003dba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002da2:	484c      	ldr	r0, [pc, #304]	; (8002ed4 <Hvac_ProcessCommand+0x5d8>)
 8002da4:	f000 fff4 	bl	8003d90 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 8002da8:	2108      	movs	r1, #8
 8002daa:	2000      	movs	r0, #0
 8002dac:	f001 f805 	bl	8003dba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002db0:	4848      	ldr	r0, [pc, #288]	; (8002ed4 <Hvac_ProcessCommand+0x5d8>)
 8002db2:	f000 ffed 	bl	8003d90 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 8002db6:	210a      	movs	r1, #10
 8002db8:	2000      	movs	r0, #0
 8002dba:	f000 fffe 	bl	8003dba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8002dbe:	4846      	ldr	r0, [pc, #280]	; (8002ed8 <Hvac_ProcessCommand+0x5dc>)
 8002dc0:	f000 ffe6 	bl	8003d90 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 8002dc4:	210d      	movs	r1, #13
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f000 fff7 	bl	8003dba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 8002dcc:	4843      	ldr	r0, [pc, #268]	; (8002edc <Hvac_ProcessCommand+0x5e0>)
 8002dce:	f000 ffdf 	bl	8003d90 <I2cLcd_SendString>
			if(sensorValueTs == STD_HIGH)
 8002dd2:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <Hvac_ProcessCommand+0x5e4>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <Hvac_ProcessCommand+0x4ee>
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8002dda:	2109      	movs	r1, #9
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f000 ffec 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AC");
 8002de2:	4840      	ldr	r0, [pc, #256]	; (8002ee4 <Hvac_ProcessCommand+0x5e8>)
 8002de4:	f000 ffd4 	bl	8003d90 <I2cLcd_SendString>
			{
				/* do nothing */
			}
		}
	}
}
 8002de8:	e0fc      	b.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
			else if(sensorValueTs == STD_LOW)
 8002dea:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <Hvac_ProcessCommand+0x5e4>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 80f8 	bne.w	8002fe4 <Hvac_ProcessCommand+0x6e8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8002df4:	2109      	movs	r1, #9
 8002df6:	2001      	movs	r0, #1
 8002df8:	f000 ffdf 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8002dfc:	4836      	ldr	r0, [pc, #216]	; (8002ed8 <Hvac_ProcessCommand+0x5dc>)
 8002dfe:	f000 ffc7 	bl	8003d90 <I2cLcd_SendString>
}
 8002e02:	e0ef      	b.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
		else if(Hvac_AutomaticMode == STD_LOW)
 8002e04:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <Hvac_ProcessCommand+0x5d0>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 80eb 	bne.w	8002fe4 <Hvac_ProcessCommand+0x6e8>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 12);
 8002e0e:	210c      	movs	r1, #12
 8002e10:	2001      	movs	r0, #1
 8002e12:	f000 ffd2 	bl	8003dba <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("    ");
 8002e16:	4834      	ldr	r0, [pc, #208]	; (8002ee8 <Hvac_ProcessCommand+0x5ec>)
 8002e18:	f000 ffba 	bl	8003d90 <I2cLcd_SendString>
			if(Hvac_LegVent == STD_HIGH)
 8002e1c:	4b33      	ldr	r3, [pc, #204]	; (8002eec <Hvac_ProcessCommand+0x5f0>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d107      	bne.n	8002e34 <Hvac_ProcessCommand+0x538>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 8002e24:	2104      	movs	r1, #4
 8002e26:	2000      	movs	r0, #0
 8002e28:	f000 ffc7 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("L");
 8002e2c:	4830      	ldr	r0, [pc, #192]	; (8002ef0 <Hvac_ProcessCommand+0x5f4>)
 8002e2e:	f000 ffaf 	bl	8003d90 <I2cLcd_SendString>
 8002e32:	e00a      	b.n	8002e4a <Hvac_ProcessCommand+0x54e>
			else if(Hvac_LegVent == STD_LOW)
 8002e34:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <Hvac_ProcessCommand+0x5f0>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <Hvac_ProcessCommand+0x54e>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f000 ffbb 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002e44:	4823      	ldr	r0, [pc, #140]	; (8002ed4 <Hvac_ProcessCommand+0x5d8>)
 8002e46:	f000 ffa3 	bl	8003d90 <I2cLcd_SendString>
			if(Hvac_MidVent == STD_HIGH)
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <Hvac_ProcessCommand+0x5f8>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d107      	bne.n	8002e62 <Hvac_ProcessCommand+0x566>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 8002e52:	2106      	movs	r1, #6
 8002e54:	2000      	movs	r0, #0
 8002e56:	f000 ffb0 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("M");
 8002e5a:	4827      	ldr	r0, [pc, #156]	; (8002ef8 <Hvac_ProcessCommand+0x5fc>)
 8002e5c:	f000 ff98 	bl	8003d90 <I2cLcd_SendString>
 8002e60:	e00a      	b.n	8002e78 <Hvac_ProcessCommand+0x57c>
			else if(Hvac_MidVent == STD_LOW)
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <Hvac_ProcessCommand+0x5f8>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <Hvac_ProcessCommand+0x57c>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 8002e6a:	2106      	movs	r1, #6
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f000 ffa4 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002e72:	4818      	ldr	r0, [pc, #96]	; (8002ed4 <Hvac_ProcessCommand+0x5d8>)
 8002e74:	f000 ff8c 	bl	8003d90 <I2cLcd_SendString>
			if(Hvac_WindshieldVent == STD_HIGH)
 8002e78:	4b20      	ldr	r3, [pc, #128]	; (8002efc <Hvac_ProcessCommand+0x600>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d141      	bne.n	8002f04 <Hvac_ProcessCommand+0x608>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 8002e80:	2108      	movs	r1, #8
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 ff99 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("W");
 8002e88:	481d      	ldr	r0, [pc, #116]	; (8002f00 <Hvac_ProcessCommand+0x604>)
 8002e8a:	f000 ff81 	bl	8003d90 <I2cLcd_SendString>
 8002e8e:	e044      	b.n	8002f1a <Hvac_ProcessCommand+0x61e>
 8002e90:	20000194 	.word	0x20000194
 8002e94:	2000018a 	.word	0x2000018a
 8002e98:	200000ef 	.word	0x200000ef
 8002e9c:	20000182 	.word	0x20000182
 8002ea0:	20000181 	.word	0x20000181
 8002ea4:	20000195 	.word	0x20000195
 8002ea8:	2000018b 	.word	0x2000018b
 8002eac:	20000120 	.word	0x20000120
 8002eb0:	2000018d 	.word	0x2000018d
 8002eb4:	20000183 	.word	0x20000183
 8002eb8:	08013e1c 	.word	0x08013e1c
 8002ebc:	2000017c 	.word	0x2000017c
 8002ec0:	cccccccd 	.word	0xcccccccd
 8002ec4:	08013e20 	.word	0x08013e20
 8002ec8:	08013e24 	.word	0x08013e24
 8002ecc:	2000018c 	.word	0x2000018c
 8002ed0:	08013e28 	.word	0x08013e28
 8002ed4:	08013e30 	.word	0x08013e30
 8002ed8:	08013e34 	.word	0x08013e34
 8002edc:	08013e38 	.word	0x08013e38
 8002ee0:	20000198 	.word	0x20000198
 8002ee4:	08013e3c 	.word	0x08013e3c
 8002ee8:	08013e40 	.word	0x08013e40
 8002eec:	20000184 	.word	0x20000184
 8002ef0:	08013e48 	.word	0x08013e48
 8002ef4:	20000185 	.word	0x20000185
 8002ef8:	08013e4c 	.word	0x08013e4c
 8002efc:	20000186 	.word	0x20000186
 8002f00:	08013e50 	.word	0x08013e50
			else if(Hvac_WindshieldVent == STD_LOW)
 8002f04:	4b39      	ldr	r3, [pc, #228]	; (8002fec <Hvac_ProcessCommand+0x6f0>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <Hvac_ProcessCommand+0x61e>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 8002f0c:	2108      	movs	r1, #8
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f000 ff53 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002f14:	4836      	ldr	r0, [pc, #216]	; (8002ff0 <Hvac_ProcessCommand+0x6f4>)
 8002f16:	f000 ff3b 	bl	8003d90 <I2cLcd_SendString>
			if(Hvac_WindshieldDefrost == STD_HIGH)
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <Hvac_ProcessCommand+0x6f8>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <Hvac_ProcessCommand+0x636>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 8002f22:	210a      	movs	r1, #10
 8002f24:	2000      	movs	r0, #0
 8002f26:	f000 ff48 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("WD");
 8002f2a:	4833      	ldr	r0, [pc, #204]	; (8002ff8 <Hvac_ProcessCommand+0x6fc>)
 8002f2c:	f000 ff30 	bl	8003d90 <I2cLcd_SendString>
 8002f30:	e00a      	b.n	8002f48 <Hvac_ProcessCommand+0x64c>
			else if(Hvac_WindshieldDefrost == STD_LOW)
 8002f32:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <Hvac_ProcessCommand+0x6f8>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <Hvac_ProcessCommand+0x64c>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 8002f3a:	210a      	movs	r1, #10
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f000 ff3c 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8002f42:	482e      	ldr	r0, [pc, #184]	; (8002ffc <Hvac_ProcessCommand+0x700>)
 8002f44:	f000 ff24 	bl	8003d90 <I2cLcd_SendString>
			if(Hvac_RearWindshieldDefrost == STD_HIGH)
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <Hvac_ProcessCommand+0x704>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d107      	bne.n	8002f60 <Hvac_ProcessCommand+0x664>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 8002f50:	210d      	movs	r1, #13
 8002f52:	2000      	movs	r0, #0
 8002f54:	f000 ff31 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("RWD");
 8002f58:	482a      	ldr	r0, [pc, #168]	; (8003004 <Hvac_ProcessCommand+0x708>)
 8002f5a:	f000 ff19 	bl	8003d90 <I2cLcd_SendString>
 8002f5e:	e00a      	b.n	8002f76 <Hvac_ProcessCommand+0x67a>
			else if(Hvac_RearWindshieldDefrost == STD_LOW)
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <Hvac_ProcessCommand+0x704>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <Hvac_ProcessCommand+0x67a>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 8002f68:	210d      	movs	r1, #13
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f000 ff25 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 8002f70:	4825      	ldr	r0, [pc, #148]	; (8003008 <Hvac_ProcessCommand+0x70c>)
 8002f72:	f000 ff0d 	bl	8003d90 <I2cLcd_SendString>
			if(Hvac_Ac == STD_HIGH)
 8002f76:	4b25      	ldr	r3, [pc, #148]	; (800300c <Hvac_ProcessCommand+0x710>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <Hvac_ProcessCommand+0x692>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8002f7e:	2109      	movs	r1, #9
 8002f80:	2001      	movs	r0, #1
 8002f82:	f000 ff1a 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AC");
 8002f86:	4822      	ldr	r0, [pc, #136]	; (8003010 <Hvac_ProcessCommand+0x714>)
 8002f88:	f000 ff02 	bl	8003d90 <I2cLcd_SendString>
 8002f8c:	e00a      	b.n	8002fa4 <Hvac_ProcessCommand+0x6a8>
			else if(Hvac_Ac == STD_LOW)
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	; (800300c <Hvac_ProcessCommand+0x710>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <Hvac_ProcessCommand+0x6a8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8002f96:	2109      	movs	r1, #9
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f000 ff0e 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8002f9e:	4817      	ldr	r0, [pc, #92]	; (8002ffc <Hvac_ProcessCommand+0x700>)
 8002fa0:	f000 fef6 	bl	8003d90 <I2cLcd_SendString>
			if(Hvac_NoRecirculation == STD_HIGH && Hvac_Recirculation == STD_LOW)
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <Hvac_ProcessCommand+0x718>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d10b      	bne.n	8002fc4 <Hvac_ProcessCommand+0x6c8>
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <Hvac_ProcessCommand+0x71c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <Hvac_ProcessCommand+0x6c8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 5);
 8002fb4:	2105      	movs	r1, #5
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f000 feff 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 8002fbc:	4812      	ldr	r0, [pc, #72]	; (8003008 <Hvac_ProcessCommand+0x70c>)
 8002fbe:	f000 fee7 	bl	8003d90 <I2cLcd_SendString>
 8002fc2:	e00f      	b.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
			else if(Hvac_NoRecirculation == STD_LOW && Hvac_Recirculation == STD_HIGH)
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <Hvac_ProcessCommand+0x718>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <Hvac_ProcessCommand+0x71c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 5);
 8002fd4:	2105      	movs	r1, #5
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f000 feef 	bl	8003dba <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("(C)");
 8002fdc:	480f      	ldr	r0, [pc, #60]	; (800301c <Hvac_ProcessCommand+0x720>)
 8002fde:	f000 fed7 	bl	8003d90 <I2cLcd_SendString>
}
 8002fe2:	e7ff      	b.n	8002fe4 <Hvac_ProcessCommand+0x6e8>
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000186 	.word	0x20000186
 8002ff0:	08013e30 	.word	0x08013e30
 8002ff4:	20000187 	.word	0x20000187
 8002ff8:	08013e54 	.word	0x08013e54
 8002ffc:	08013e34 	.word	0x08013e34
 8003000:	20000188 	.word	0x20000188
 8003004:	08013e58 	.word	0x08013e58
 8003008:	08013e38 	.word	0x08013e38
 800300c:	20000189 	.word	0x20000189
 8003010:	08013e3c 	.word	0x08013e3c
 8003014:	2000018b 	.word	0x2000018b
 8003018:	2000018a 	.word	0x2000018a
 800301c:	08013e5c 	.word	0x08013e5c

08003020 <IntLights_RxBtcState>:
/***********************************************************************************
* Function: IntLights_RxBtcState										   		   *
* Description: Process command. 		   		   						           *
************************************************************************************/
VOID IntLights_RxBtcState()
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	/* Process the state of the interior lights according to system state. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <IntLights_RxBtcState+0x4c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <IntLights_RxBtcState+0x12>
	{
		IntLights_CurrentState = STD_HIGH;
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <IntLights_RxBtcState+0x50>)
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_LOW)
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <IntLights_RxBtcState+0x4c>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <IntLights_RxBtcState+0x28>
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <IntLights_RxBtcState+0x54>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <IntLights_RxBtcState+0x28>
	{
		IntLights_CurrentState = STD_LOW;
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <IntLights_RxBtcState+0x50>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_HIGH)
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <IntLights_RxBtcState+0x4c>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <IntLights_RxBtcState+0x3e>
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <IntLights_RxBtcState+0x54>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d102      	bne.n	800305e <IntLights_RxBtcState+0x3e>
	{
		IntLights_CurrentState = STD_HIGH;
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <IntLights_RxBtcState+0x50>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel3);
 800305e:	2108      	movs	r1, #8
 8003060:	4805      	ldr	r0, [pc, #20]	; (8003078 <IntLights_RxBtcState+0x58>)
 8003062:	f00e fd3b 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000122 	.word	0x20000122
 8003070:	20000199 	.word	0x20000199
 8003074:	200000ee 	.word	0x200000ee
 8003078:	20000540 	.word	0x20000540

0800307c <IntLights_MainFunction>:
/***********************************************************************************
* Function: IntLights_MainFunction										           *
* Description: Interior lights main function for the application and state process.*
************************************************************************************/
VOID IntLights_MainFunction()
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	IntLights_RxBtcState();
 8003080:	f7ff ffce 	bl	8003020 <IntLights_RxBtcState>
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}

08003088 <Pdc_MainFunction>:
/***********************************************************************************
* Function: Pdc_MainFunction													   *
* Description: Main function application. 		   			                       *
************************************************************************************/
VOID Pdc_MainFunction()
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	if(Btc_ReverseLight == STD_HIGH)
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <Pdc_MainFunction+0x18>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d103      	bne.n	800309c <Pdc_MainFunction+0x14>
	{
		Pdc_Front_ProcessData();
 8003094:	f000 f830 	bl	80030f8 <Pdc_Front_ProcessData>
		Pdc_Rear_ProcessData();
 8003098:	f000 f804 	bl	80030a4 <Pdc_Rear_ProcessData>
	}
	else
	{
		/* do nothing */
	}
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	200000ed 	.word	0x200000ed

080030a4 <Pdc_Rear_ProcessData>:
/***********************************************************************************
* Function: Pdc_Rear_ProcessData												   *
* Description: Process distance data.		   			                           *
************************************************************************************/
VOID Pdc_Rear_ProcessData()
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Rear_Distance = Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour;
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <Pdc_Rear_ProcessData+0x40>)
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <Pdc_Rear_ProcessData+0x44>)
 80030ae:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE)
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <Pdc_Rear_ProcessData+0x44>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b28      	cmp	r3, #40	; 0x28
 80030b6:	d801      	bhi.n	80030bc <Pdc_Rear_ProcessData+0x18>
	{
		Pdc_Rear_TriggerBuzzer();
 80030b8:	f000 f848 	bl	800314c <Pdc_Rear_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance >= PDC_MAX_DISTANCE)
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <Pdc_Rear_ProcessData+0x44>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b27      	cmp	r3, #39	; 0x27
 80030c2:	d90c      	bls.n	80030de <Pdc_Rear_ProcessData+0x3a>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2120      	movs	r1, #32
 80030c8:	4808      	ldr	r0, [pc, #32]	; (80030ec <Pdc_Rear_ProcessData+0x48>)
 80030ca:	f00e fec8 	bl	8011e5e <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <Pdc_Rear_ProcessData+0x4c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f00e fee2 	bl	8011e9c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <Pdc_Rear_ProcessData+0x50>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000945 	.word	0x20000945
 80030e8:	2000019a 	.word	0x2000019a
 80030ec:	40020400 	.word	0x40020400
 80030f0:	2000036c 	.word	0x2000036c
 80030f4:	2000019c 	.word	0x2000019c

080030f8 <Pdc_Front_ProcessData>:
/***********************************************************************************
* Function: Pdc_Front_ProcessData												   *
* Description: Process distance data. 		   			                           *
************************************************************************************/
VOID Pdc_Front_ProcessData()
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Front_Distance = Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree;
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <Pdc_Front_ProcessData+0x40>)
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <Pdc_Front_ProcessData+0x44>)
 8003102:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE)
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <Pdc_Front_ProcessData+0x44>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b28      	cmp	r3, #40	; 0x28
 800310a:	d801      	bhi.n	8003110 <Pdc_Front_ProcessData+0x18>
	{
		Pdc_Front_TriggerBuzzer();
 800310c:	f000 f896 	bl	800323c <Pdc_Front_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance >= PDC_MAX_DISTANCE)
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <Pdc_Front_ProcessData+0x44>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b27      	cmp	r3, #39	; 0x27
 8003116:	d90d      	bls.n	8003134 <Pdc_Front_ProcessData+0x3c>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8003118:	2200      	movs	r2, #0
 800311a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800311e:	4808      	ldr	r0, [pc, #32]	; (8003140 <Pdc_Front_ProcessData+0x48>)
 8003120:	f00e fe9d 	bl	8011e5e <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <Pdc_Front_ProcessData+0x4c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f00e feb7 	bl	8011e9c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <Pdc_Front_ProcessData+0x50>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000935 	.word	0x20000935
 800313c:	2000019b 	.word	0x2000019b
 8003140:	40020800 	.word	0x40020800
 8003144:	20000370 	.word	0x20000370
 8003148:	200001a0 	.word	0x200001a0

0800314c <Pdc_Rear_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Rear_TriggerBuzzer												   *
* Description: Control buzzer.		   			                                   *
************************************************************************************/
VOID Pdc_Rear_TriggerBuzzer()
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
 8003150:	4b37      	ldr	r3, [pc, #220]	; (8003230 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f00b fbae 	bl	800e8b6 <osTimerIsRunning>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d139      	bne.n	80031d4 <Pdc_Rear_TriggerBuzzer+0x88>
	{
		switch(PdcR_DistanceRange)
 8003160:	4b34      	ldr	r3, [pc, #208]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3b01      	subs	r3, #1
 8003166:	2b03      	cmp	r3, #3
 8003168:	d833      	bhi.n	80031d2 <Pdc_Rear_TriggerBuzzer+0x86>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <Pdc_Rear_TriggerBuzzer+0x24>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003181 	.word	0x08003181
 8003174:	08003197 	.word	0x08003197
 8003178:	080031ab 	.word	0x080031ab
 800317c:	080031bf 	.word	0x080031bf
		{
			case 1:
				PdcR_DistanceRange = 0;
 8003180:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800318e:	4618      	mov	r0, r3
 8003190:	f00e fe77 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003194:	e01e      	b.n	80031d4 <Pdc_Rear_TriggerBuzzer+0x88>
			case 2:
				PdcR_DistanceRange = 0;
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <Pdc_Rear_TriggerBuzzer+0xe4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	21fa      	movs	r1, #250	; 0xfa
 80031a2:	4618      	mov	r0, r3
 80031a4:	f00e fe6d 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80031a8:	e014      	b.n	80031d4 <Pdc_Rear_TriggerBuzzer+0x88>
			case 3:
				PdcR_DistanceRange = 0;
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <Pdc_Rear_TriggerBuzzer+0xe4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	217d      	movs	r1, #125	; 0x7d
 80031b6:	4618      	mov	r0, r3
 80031b8:	f00e fe63 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80031bc:	e00a      	b.n	80031d4 <Pdc_Rear_TriggerBuzzer+0x88>
			case 4:
				PdcR_DistanceRange = 0;
 80031be:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <Pdc_Rear_TriggerBuzzer+0xe4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	214b      	movs	r1, #75	; 0x4b
 80031ca:	4618      	mov	r0, r3
 80031cc:	f00e fe59 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80031d0:	e000      	b.n	80031d4 <Pdc_Rear_TriggerBuzzer+0x88>
			default:
				break;
 80031d2:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE && Pdc_Rear_Distance >= PDC_FIRST_SAFE_DISTANCE)
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b28      	cmp	r3, #40	; 0x28
 80031da:	d806      	bhi.n	80031ea <Pdc_Rear_TriggerBuzzer+0x9e>
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b1d      	cmp	r3, #29
 80031e2:	d902      	bls.n	80031ea <Pdc_Rear_TriggerBuzzer+0x9e>
	{
		PdcR_DistanceRange = 1;
 80031e4:	4b13      	ldr	r3, [pc, #76]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_SECOND_SAFE_DISTANCE)
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b1e      	cmp	r3, #30
 80031f0:	d806      	bhi.n	8003200 <Pdc_Rear_TriggerBuzzer+0xb4>
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b13      	cmp	r3, #19
 80031f8:	d902      	bls.n	8003200 <Pdc_Rear_TriggerBuzzer+0xb4>
	{
		PdcR_DistanceRange = 2;
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 80031fc:	2202      	movs	r2, #2
 80031fe:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_THIRD_SAFE_DISTANCE)
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b14      	cmp	r3, #20
 8003206:	d806      	bhi.n	8003216 <Pdc_Rear_TriggerBuzzer+0xca>
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b09      	cmp	r3, #9
 800320e:	d902      	bls.n	8003216 <Pdc_Rear_TriggerBuzzer+0xca>
	{
		PdcR_DistanceRange = 3;
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003212:	2203      	movs	r2, #3
 8003214:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_FOURTH_SAFE_DISTANCE)
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b0a      	cmp	r3, #10
 800321c:	d806      	bhi.n	800322c <Pdc_Rear_TriggerBuzzer+0xe0>
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d902      	bls.n	800322c <Pdc_Rear_TriggerBuzzer+0xe0>
	{
		PdcR_DistanceRange = 4;
 8003226:	4b03      	ldr	r3, [pc, #12]	; (8003234 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003228:	2204      	movs	r2, #4
 800322a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}
 8003230:	2000036c 	.word	0x2000036c
 8003234:	2000019c 	.word	0x2000019c
 8003238:	2000019a 	.word	0x2000019a

0800323c <Pdc_Front_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Front_TriggerBuzzer												   *
* Description: Control buzzer		   			   								   *
************************************************************************************/
VOID Pdc_Front_TriggerBuzzer()
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
 8003240:	4b37      	ldr	r3, [pc, #220]	; (8003320 <Pdc_Front_TriggerBuzzer+0xe4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f00b fb36 	bl	800e8b6 <osTimerIsRunning>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d139      	bne.n	80032c4 <Pdc_Front_TriggerBuzzer+0x88>
	{
		switch(PdcF_DistanceRange)
 8003250:	4b34      	ldr	r3, [pc, #208]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3b01      	subs	r3, #1
 8003256:	2b03      	cmp	r3, #3
 8003258:	d833      	bhi.n	80032c2 <Pdc_Front_TriggerBuzzer+0x86>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <Pdc_Front_TriggerBuzzer+0x24>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	08003271 	.word	0x08003271
 8003264:	08003287 	.word	0x08003287
 8003268:	0800329b 	.word	0x0800329b
 800326c:	080032af 	.word	0x080032af
		{
			case 1:
				PdcF_DistanceRange = 0;
 8003270:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8003276:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <Pdc_Front_TriggerBuzzer+0xe4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800327e:	4618      	mov	r0, r3
 8003280:	f00e fdff 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003284:	e01e      	b.n	80032c4 <Pdc_Front_TriggerBuzzer+0x88>
			case 2:
				PdcF_DistanceRange = 0;
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <Pdc_Front_TriggerBuzzer+0xe4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	21fa      	movs	r1, #250	; 0xfa
 8003292:	4618      	mov	r0, r3
 8003294:	f00e fdf5 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003298:	e014      	b.n	80032c4 <Pdc_Front_TriggerBuzzer+0x88>
			case 3:
				PdcF_DistanceRange = 0;
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 80032a0:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <Pdc_Front_TriggerBuzzer+0xe4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	217d      	movs	r1, #125	; 0x7d
 80032a6:	4618      	mov	r0, r3
 80032a8:	f00e fdeb 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80032ac:	e00a      	b.n	80032c4 <Pdc_Front_TriggerBuzzer+0x88>
			case 4:
				PdcF_DistanceRange = 0;
 80032ae:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <Pdc_Front_TriggerBuzzer+0xe4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	214b      	movs	r1, #75	; 0x4b
 80032ba:	4618      	mov	r0, r3
 80032bc:	f00e fde1 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80032c0:	e000      	b.n	80032c4 <Pdc_Front_TriggerBuzzer+0x88>
			default:
				break;
 80032c2:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE && Pdc_Front_Distance >= PDC_FIRST_SAFE_DISTANCE)
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b28      	cmp	r3, #40	; 0x28
 80032ca:	d806      	bhi.n	80032da <Pdc_Front_TriggerBuzzer+0x9e>
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b1d      	cmp	r3, #29
 80032d2:	d902      	bls.n	80032da <Pdc_Front_TriggerBuzzer+0x9e>
	{
		PdcF_DistanceRange = 1;
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_SECOND_SAFE_DISTANCE)
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b1e      	cmp	r3, #30
 80032e0:	d806      	bhi.n	80032f0 <Pdc_Front_TriggerBuzzer+0xb4>
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b13      	cmp	r3, #19
 80032e8:	d902      	bls.n	80032f0 <Pdc_Front_TriggerBuzzer+0xb4>
	{
		PdcF_DistanceRange = 2;
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 80032ec:	2202      	movs	r2, #2
 80032ee:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_THIRD_SAFE_DISTANCE)
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b14      	cmp	r3, #20
 80032f6:	d806      	bhi.n	8003306 <Pdc_Front_TriggerBuzzer+0xca>
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d902      	bls.n	8003306 <Pdc_Front_TriggerBuzzer+0xca>
	{
		PdcF_DistanceRange = 3;
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003302:	2203      	movs	r2, #3
 8003304:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_FOURTH_SAFE_DISTANCE)
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b0a      	cmp	r3, #10
 800330c:	d806      	bhi.n	800331c <Pdc_Front_TriggerBuzzer+0xe0>
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <Pdc_Front_TriggerBuzzer+0xec>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d902      	bls.n	800331c <Pdc_Front_TriggerBuzzer+0xe0>
	{
		PdcF_DistanceRange = 4;
 8003316:	4b03      	ldr	r3, [pc, #12]	; (8003324 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003318:	2204      	movs	r2, #4
 800331a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000370 	.word	0x20000370
 8003324:	200001a0 	.word	0x200001a0
 8003328:	2000019b 	.word	0x2000019b

0800332c <SecAlm_LightsBuzzerControl>:
/***********************************************************************************
* Function: SecAlm_LightsBuzzerControl										       *
* Description: Controls the lights and buzzer in case of alarm trigger. 		   *
************************************************************************************/
VOID SecAlm_LightsBuzzerControl()
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint32 sensorStatus = STD_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
	/* Get the sensor status. */
	sensorStatus = SecAlm_VibSenStatus();
 8003336:	f000 f893 	bl	8003460 <SecAlm_VibSenStatus>
 800333a:	4603      	mov	r3, r0
 800333c:	607b      	str	r3, [r7, #4]
	/* If the trigger was previously on and now it is off. */
	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 800333e:	4b3f      	ldr	r3, [pc, #252]	; (800343c <SecAlm_LightsBuzzerControl+0x110>)
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d006      	beq.n	8003358 <SecAlm_LightsBuzzerControl+0x2c>
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <SecAlm_LightsBuzzerControl+0x2c>
	{
		/* Reset the counter. */
		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 8003352:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <SecAlm_LightsBuzzerControl+0x118>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the counter exceeded the maximum value, reset the variables. */
	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <SecAlm_LightsBuzzerControl+0x118>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b13      	cmp	r3, #19
 800335e:	d922      	bls.n	80033a6 <SecAlm_LightsBuzzerControl+0x7a>
	{
		SecAlm_TriggerPreviousState 						= SecAlm_Trigger;
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	4b35      	ldr	r3, [pc, #212]	; (800343c <SecAlm_LightsBuzzerControl+0x110>)
 8003366:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter	= STD_HIGH;
 8003368:	4b37      	ldr	r3, [pc, #220]	; (8003448 <SecAlm_LightsBuzzerControl+0x11c>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter 	= STD_LOW;
 800336e:	4b37      	ldr	r3, [pc, #220]	; (800344c <SecAlm_LightsBuzzerControl+0x120>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 										= STD_LOW;
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 								= STD_LOW;
 800337a:	4b35      	ldr	r3, [pc, #212]	; (8003450 <SecAlm_LightsBuzzerControl+0x124>)
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 					= STD_LOW;
 8003380:	4b30      	ldr	r3, [pc, #192]	; (8003444 <SecAlm_LightsBuzzerControl+0x118>)
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8003386:	4b33      	ldr	r3, [pc, #204]	; (8003454 <SecAlm_LightsBuzzerControl+0x128>)
 8003388:	2200      	movs	r2, #0
 800338a:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 								= STD_LOW;
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <SecAlm_LightsBuzzerControl+0x12c>)
 800338e:	2200      	movs	r2, #0
 8003390:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8003392:	4b30      	ldr	r3, [pc, #192]	; (8003454 <SecAlm_LightsBuzzerControl+0x128>)
 8003394:	2200      	movs	r2, #0
 8003396:	801a      	strh	r2, [r3, #0]
		/* Stop the os timer assigned to security alarm trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
 8003398:	4b30      	ldr	r3, [pc, #192]	; (800345c <SecAlm_LightsBuzzerControl+0x130>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f00e fd7d 	bl	8011e9c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		/* Turn off the lights to make sure their state is off before any other action. */
		SecAlm_TurnOnExtLights();
 80033a2:	f000 f891 	bl	80034c8 <SecAlm_TurnOnExtLights>
		/* do nothing */
	}
	/* The counter resets every 10 seconds, if a reset of the timer
	 * occurs, then reset the variables related to the security
	 * alarm trigger. */
	if(SecAlm_SensorStatusCounter == STD_LOW)
 80033a6:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <SecAlm_LightsBuzzerControl+0x128>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d107      	bne.n	80033be <SecAlm_LightsBuzzerControl+0x92>
	{
		sensorStatus 	= STD_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 80033b2:	4b23      	ldr	r3, [pc, #140]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <SecAlm_LightsBuzzerControl+0x124>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the sensor status is high, trigger the alarm. */
	if(sensorStatus == STD_HIGH)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d102      	bne.n	80033ca <SecAlm_LightsBuzzerControl+0x9e>
	{
		SecAlm_Trigger = STD_HIGH;
 80033c4:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the trigger is set to high, perform alarm triggering. */
	if(SecAlm_Trigger == STD_HIGH)
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d128      	bne.n	8003424 <SecAlm_LightsBuzzerControl+0xf8>
	{
		/* One alarm cycle is performed consisting of 10 seconds. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmAlarm_TimerHandle) == 0)
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <SecAlm_LightsBuzzerControl+0x130>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f00b fa6d 	bl	800e8b6 <osTimerIsRunning>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <SecAlm_LightsBuzzerControl+0xc4>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 500);
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <SecAlm_LightsBuzzerControl+0x130>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80033ea:	4618      	mov	r0, r3
 80033ec:	f00e fd49 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Cycle between on and off states of buzzer and lights. */
		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <SecAlm_LightsBuzzerControl+0x118>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <SecAlm_LightsBuzzerControl+0xde>
		{
			SecAlm_PinStateChange = STD_HIGH;
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <SecAlm_LightsBuzzerControl+0x124>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 8003404:	f000 f860 	bl	80034c8 <SecAlm_TurnOnExtLights>
	}
	else
	{
		/* do nothing */
	}
}
 8003408:	e013      	b.n	8003432 <SecAlm_LightsBuzzerControl+0x106>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <SecAlm_LightsBuzzerControl+0x118>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10c      	bne.n	8003432 <SecAlm_LightsBuzzerControl+0x106>
			SecAlm_PinStateChange = STD_LOW;
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <SecAlm_LightsBuzzerControl+0x124>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 800341e:	f000 f853 	bl	80034c8 <SecAlm_TurnOnExtLights>
}
 8003422:	e006      	b.n	8003432 <SecAlm_LightsBuzzerControl+0x106>
	else if(SecAlm_Trigger == STD_LOW)
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <SecAlm_LightsBuzzerControl+0x114>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <SecAlm_LightsBuzzerControl+0x106>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 800342c:	2000      	movs	r0, #0
 800342e:	f000 f8bd 	bl	80035ac <SecAlm_ToggleAlarmBuzzer>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200001ad 	.word	0x200001ad
 8003440:	200001a4 	.word	0x200001a4
 8003444:	200001a6 	.word	0x200001a6
 8003448:	20000125 	.word	0x20000125
 800344c:	20000127 	.word	0x20000127
 8003450:	200001a5 	.word	0x200001a5
 8003454:	200001a8 	.word	0x200001a8
 8003458:	200001aa 	.word	0x200001aa
 800345c:	20000368 	.word	0x20000368

08003460 <SecAlm_VibSenStatus>:
/***********************************************************************************
* Function: SecAlm_VibSenStatus										               *
* Description: Updates the vibration sensor status based on measurements.		   *
************************************************************************************/
StdReturnType SecAlm_VibSenStatus()
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint16 sensorStatus = STD_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	80fb      	strh	r3, [r7, #6]
	/* Read the sensor value. */
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(SECALM_VS_REQUEST);
 800346a:	2002      	movs	r0, #2
 800346c:	f000 f8c2 	bl	80035f4 <SenCtrl_ProcessSensorValue>
	/* If the sensor was triggered. */
	if(SecAlm_SensorState == STD_HIGH)
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <SecAlm_VibSenStatus+0x5c>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10c      	bne.n	8003492 <SecAlm_VibSenStatus+0x32>
	{
		/* Count for how long it has been triggered. */
		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <SecAlm_VibSenStatus+0x60>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <SecAlm_VibSenStatus+0x60>)
 8003482:	801a      	strh	r2, [r3, #0]
		/* Start the reset timer for the counter variable. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <SecAlm_VibSenStatus+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f242 7110 	movw	r1, #10000	; 0x2710
 800348c:	4618      	mov	r0, r3
 800348e:	f00e fcf8 	bl	8011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
	else
	{
		/* do nothing */
	}
	/* If the sensor was triggered enough times. */
	if(SecAlm_SensorStatusCounter >= 1000)
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <SecAlm_VibSenStatus+0x60>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800349a:	d302      	bcc.n	80034a2 <SecAlm_VibSenStatus+0x42>
	{
		/* Set the sensor status to high. */
		sensorStatus = STD_HIGH;
 800349c:	2301      	movs	r3, #1
 800349e:	80fb      	strh	r3, [r7, #6]
 80034a0:	e006      	b.n	80034b0 <SecAlm_VibSenStatus+0x50>
	}
	else if(SecAlm_SensorStatusCounter < 1000)
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <SecAlm_VibSenStatus+0x60>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034aa:	d201      	bcs.n	80034b0 <SecAlm_VibSenStatus+0x50>
	{
		/* Set the sensor status to low. */
		sensorStatus = STD_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	80fb      	strh	r3, [r7, #6]
	else
	{
		/* do nothing */
	}
	/* Return sensor status. */
	return sensorStatus;
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	b2db      	uxtb	r3, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	200001ac 	.word	0x200001ac
 80034c0:	200001a8 	.word	0x200001a8
 80034c4:	20000350 	.word	0x20000350

080034c8 <SecAlm_TurnOnExtLights>:
/***********************************************************************************
* Function: SecAlm_TurnOnExtLights										           *
* Description: Trigger the exterior lights and buzzer.							   *
************************************************************************************/
VOID SecAlm_TurnOnExtLights()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
	/* Turn on the lights and the buzzer. */
	if(SecAlm_PinStateChange == STD_HIGH)
 80034cc:	4b1f      	ldr	r3, [pc, #124]	; (800354c <SecAlm_TurnOnExtLights+0x84>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d118      	bne.n	8003506 <SecAlm_TurnOnExtLights+0x3e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80034d4:	2100      	movs	r1, #0
 80034d6:	481e      	ldr	r0, [pc, #120]	; (8003550 <SecAlm_TurnOnExtLights+0x88>)
 80034d8:	f00e fb00 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80034dc:	2104      	movs	r1, #4
 80034de:	481c      	ldr	r0, [pc, #112]	; (8003550 <SecAlm_TurnOnExtLights+0x88>)
 80034e0:	f00e fafc 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80034e4:	2108      	movs	r1, #8
 80034e6:	481b      	ldr	r0, [pc, #108]	; (8003554 <SecAlm_TurnOnExtLights+0x8c>)
 80034e8:	f00e faf8 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80034ec:	210c      	movs	r1, #12
 80034ee:	4819      	ldr	r0, [pc, #100]	; (8003554 <SecAlm_TurnOnExtLights+0x8c>)
 80034f0:	f00e faf4 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80034f4:	2108      	movs	r1, #8
 80034f6:	4818      	ldr	r0, [pc, #96]	; (8003558 <SecAlm_TurnOnExtLights+0x90>)
 80034f8:	f00e faf0 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80034fc:	210c      	movs	r1, #12
 80034fe:	4816      	ldr	r0, [pc, #88]	; (8003558 <SecAlm_TurnOnExtLights+0x90>)
 8003500:	f00e faec 	bl	8011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8003504:	e01b      	b.n	800353e <SecAlm_TurnOnExtLights+0x76>
	}
	else if(SecAlm_PinStateChange == STD_LOW)
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <SecAlm_TurnOnExtLights+0x84>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d117      	bne.n	800353e <SecAlm_TurnOnExtLights+0x76>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 800350e:	2100      	movs	r1, #0
 8003510:	480f      	ldr	r0, [pc, #60]	; (8003550 <SecAlm_TurnOnExtLights+0x88>)
 8003512:	f00e faf0 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8003516:	2104      	movs	r1, #4
 8003518:	480d      	ldr	r0, [pc, #52]	; (8003550 <SecAlm_TurnOnExtLights+0x88>)
 800351a:	f00e faec 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 800351e:	2108      	movs	r1, #8
 8003520:	480c      	ldr	r0, [pc, #48]	; (8003554 <SecAlm_TurnOnExtLights+0x8c>)
 8003522:	f00e fae8 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8003526:	210c      	movs	r1, #12
 8003528:	480a      	ldr	r0, [pc, #40]	; (8003554 <SecAlm_TurnOnExtLights+0x8c>)
 800352a:	f00e fae4 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800352e:	2108      	movs	r1, #8
 8003530:	4809      	ldr	r0, [pc, #36]	; (8003558 <SecAlm_TurnOnExtLights+0x90>)
 8003532:	f00e fae0 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8003536:	210c      	movs	r1, #12
 8003538:	4807      	ldr	r0, [pc, #28]	; (8003558 <SecAlm_TurnOnExtLights+0x90>)
 800353a:	f00e fadc 	bl	8011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 800353e:	4b03      	ldr	r3, [pc, #12]	; (800354c <SecAlm_TurnOnExtLights+0x84>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f832 	bl	80035ac <SecAlm_ToggleAlarmBuzzer>
}
 8003548:	bf00      	nop
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200001a5 	.word	0x200001a5
 8003550:	20000540 	.word	0x20000540
 8003554:	200005f4 	.word	0x200005f4
 8003558:	200006a8 	.word	0x200006a8

0800355c <SecAlm_MainFunction>:
/***********************************************************************************
* Function: SecAlm_MainFunction										           	   *
* Description: Process application states.										   *
************************************************************************************/
VOID SecAlm_MainFunction()
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
	SecAlm_LightsBuzzerControl();
 8003560:	f7ff fee4 	bl	800332c <SecAlm_LightsBuzzerControl>
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}

08003568 <SecAlm_Init>:
/***********************************************************************************
* Function: SecAlm_Init										                       *
* Description: Initialize the application.										   *
************************************************************************************/
StdReturnType SecAlm_Init()
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
	/* Set the variables to 0. */
	SecAlm_Trigger 						= STD_LOW;
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <SecAlm_Init+0x30>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <SecAlm_Init+0x34>)
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <SecAlm_Init+0x38>)
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <SecAlm_Init+0x3c>)
 8003580:	2200      	movs	r2, #0
 8003582:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus 				= STD_LOW;
 8003584:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <SecAlm_Init+0x40>)
 8003586:	2200      	movs	r2, #0
 8003588:	801a      	strh	r2, [r3, #0]
	return E_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	200001a4 	.word	0x200001a4
 800359c:	200001a5 	.word	0x200001a5
 80035a0:	200001a6 	.word	0x200001a6
 80035a4:	200001a8 	.word	0x200001a8
 80035a8:	200001aa 	.word	0x200001aa

080035ac <SecAlm_ToggleAlarmBuzzer>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmBuzzer										       *
* Description: Alarm buzzer trigger.                                               *
************************************************************************************/
VOID SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	461a      	mov	r2, r3
 80035ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035be:	4803      	ldr	r0, [pc, #12]	; (80035cc <SecAlm_ToggleAlarmBuzzer+0x20>)
 80035c0:	f00e fc4d 	bl	8011e5e <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40020400 	.word	0x40020400

080035d0 <SecAlm_ToggleAlarmLed>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmLed										           *
* Description: Alarm LED trigger.												   *
************************************************************************************/
VOID SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	461a      	mov	r2, r3
 80035de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035e2:	4803      	ldr	r0, [pc, #12]	; (80035f0 <SecAlm_ToggleAlarmLed+0x20>)
 80035e4:	f00e fc3b 	bl	8011e5e <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40020400 	.word	0x40020400

080035f4 <SenCtrl_ProcessSensorValue>:
/***********************************************************************************
* Function: SenCtrl_ProcessSensorValue									   	       *
* Description: Process the request for the sensor value. 	                       *
************************************************************************************/
VOID SenCtrl_ProcessSensorValue(uint8 request)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
	/* Store request into local variable. */
	uint8 localRequest = request;
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	77fb      	strb	r3, [r7, #31]
	/* Process sensor request. */
	switch(localRequest)
 8003602:	7ffb      	ldrb	r3, [r7, #31]
 8003604:	2b0d      	cmp	r3, #13
 8003606:	f200 80c0 	bhi.w	800378a <SenCtrl_ProcessSensorValue+0x196>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <SenCtrl_ProcessSensorValue+0x1c>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003649 	.word	0x08003649
 8003614:	0800378b 	.word	0x0800378b
 8003618:	0800367f 	.word	0x0800367f
 800361c:	080036b7 	.word	0x080036b7
 8003620:	080036eb 	.word	0x080036eb
 8003624:	080036fb 	.word	0x080036fb
 8003628:	0800370b 	.word	0x0800370b
 800362c:	0800371b 	.word	0x0800371b
 8003630:	0800372b 	.word	0x0800372b
 8003634:	0800373b 	.word	0x0800373b
 8003638:	0800374b 	.word	0x0800374b
 800363c:	0800375b 	.word	0x0800375b
 8003640:	0800376b 	.word	0x0800376b
 8003644:	0800377b 	.word	0x0800377b
	{
		case SENCTRL_EXTLIGHTS_LS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] >= 4000)
 8003648:	4b5f      	ldr	r3, [pc, #380]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003650:	d307      	bcc.n	8003662 <SenCtrl_ProcessSensorValue+0x6e>
			{
				uint32 localls = 1;
 8003652:	2301      	movs	r3, #1
 8003654:	61bb      	str	r3, [r7, #24]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8003656:	f107 0318 	add.w	r3, r7, #24
 800365a:	4618      	mov	r0, r3
 800365c:	f00e f916 	bl	801188c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003660:	e095      	b.n	800378e <SenCtrl_ProcessSensorValue+0x19a>
			else if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] < 4000)
 8003662:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800366a:	f080 8090 	bcs.w	800378e <SenCtrl_ProcessSensorValue+0x19a>
				uint32 localls = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8003672:	f107 0314 	add.w	r3, r7, #20
 8003676:	4618      	mov	r0, r3
 8003678:	f00e f908 	bl	801188c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 800367c:	e087      	b.n	800378e <SenCtrl_ProcessSensorValue+0x19a>
		case SENCTRL_SECALM_VS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] == 4095)
 800367e:	4b52      	ldr	r3, [pc, #328]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003686:	4293      	cmp	r3, r2
 8003688:	d107      	bne.n	800369a <SenCtrl_ProcessSensorValue+0xa6>
			{
				uint32 localvs = STD_HIGH;
 800368a:	2301      	movs	r3, #1
 800368c:	613b      	str	r3, [r7, #16]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 800368e:	f107 0310 	add.w	r3, r7, #16
 8003692:	4618      	mov	r0, r3
 8003694:	f00e f8e8 	bl	8011868 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003698:	e07b      	b.n	8003792 <SenCtrl_ProcessSensorValue+0x19e>
			else if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] < 4095)
 800369a:	4b4b      	ldr	r3, [pc, #300]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d875      	bhi.n	8003792 <SenCtrl_ProcessSensorValue+0x19e>
				uint32 localvs = STD_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 80036aa:	f107 030c 	add.w	r3, r7, #12
 80036ae:	4618      	mov	r0, r3
 80036b0:	f00e f8da 	bl	8011868 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 80036b4:	e06d      	b.n	8003792 <SenCtrl_ProcessSensorValue+0x19e>
		case SENCTRL_HVAC_TS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_HVAC_TS_POSITION] >= 4000)
 80036b6:	4b44      	ldr	r3, [pc, #272]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80036be:	d307      	bcc.n	80036d0 <SenCtrl_ProcessSensorValue+0xdc>
			{
				uint8 localts = STD_HIGH;
 80036c0:	2301      	movs	r3, #1
 80036c2:	72fb      	strb	r3, [r7, #11]
				Rte_Write_Hvac_HvacPort_Hvac_TsState(&localts);
 80036c4:	f107 030b 	add.w	r3, r7, #11
 80036c8:	4618      	mov	r0, r3
 80036ca:	f00e f8ad 	bl	8011828 <Rte_Write_Hvac_HvacPort_Hvac_TsState>
			}
			else
			{
				/* do nothing */
			}
			break;
 80036ce:	e062      	b.n	8003796 <SenCtrl_ProcessSensorValue+0x1a2>
			else if(SenCtrl_MeasuredValues[SENCTRL_HVAC_TS_POSITION] < 4000)
 80036d0:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80036d8:	d25d      	bcs.n	8003796 <SenCtrl_ProcessSensorValue+0x1a2>
				uint8 localts = STD_LOW;
 80036da:	2300      	movs	r3, #0
 80036dc:	72bb      	strb	r3, [r7, #10]
				Rte_Write_Hvac_HvacPort_Hvac_TsState(&localts);
 80036de:	f107 030a 	add.w	r3, r7, #10
 80036e2:	4618      	mov	r0, r3
 80036e4:	f00e f8a0 	bl	8011828 <Rte_Write_Hvac_HvacPort_Hvac_TsState>
			break;
 80036e8:	e055      	b.n	8003796 <SenCtrl_ProcessSensorValue+0x1a2>
		case SENCTRL_DIAGCTRL_LB_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_L_POSITION] < SENCTRL_THRESHOLD_SH)
 80036ea:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b59      	cmp	r3, #89	; 0x59
 80036f0:	d853      	bhi.n	800379a <SenCtrl_ProcessSensorValue+0x1a6>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LOW_BEAM_LEFT_MALFUNCTION);
 80036f2:	2004      	movs	r0, #4
 80036f4:	f00e f8a8 	bl	8011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 80036f8:	e04f      	b.n	800379a <SenCtrl_ProcessSensorValue+0x1a6>
		case SENCTRL_DIAGCTRL_LB_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_R_POSITION] < SENCTRL_THRESHOLD_SH)
 80036fa:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b59      	cmp	r3, #89	; 0x59
 8003700:	d84d      	bhi.n	800379e <SenCtrl_ProcessSensorValue+0x1aa>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LOW_BEAM_RIGHT_MALFUNCTION);
 8003702:	2005      	movs	r0, #5
 8003704:	f00e f8a0 	bl	8011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003708:	e049      	b.n	800379e <SenCtrl_ProcessSensorValue+0x1aa>
		case SENCTRL_DIAGCTRL_RPL_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_L_POSITION] < SENCTRL_THRESHOLD_SH)
 800370a:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b59      	cmp	r3, #89	; 0x59
 8003710:	d847      	bhi.n	80037a2 <SenCtrl_ProcessSensorValue+0x1ae>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_REAR_POSITION_LIGHT_LEFT_MALFUNCTION);
 8003712:	2044      	movs	r0, #68	; 0x44
 8003714:	f00e f898 	bl	8011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003718:	e043      	b.n	80037a2 <SenCtrl_ProcessSensorValue+0x1ae>
		case SENCTRL_DIAGCTRL_RPL_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_R_POSITION] < SENCTRL_THRESHOLD_SH)
 800371a:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	2b59      	cmp	r3, #89	; 0x59
 8003720:	d841      	bhi.n	80037a6 <SenCtrl_ProcessSensorValue+0x1b2>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION);
 8003722:	2045      	movs	r0, #69	; 0x45
 8003724:	f00e f890 	bl	8011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003728:	e03d      	b.n	80037a6 <SenCtrl_ProcessSensorValue+0x1b2>
		case SENCTRL_DIAGCTRL_BL_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_R_POSITION] < SENCTRL_THRESHOLD_SH)
 800372a:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	2b59      	cmp	r3, #89	; 0x59
 8003730:	d83b      	bhi.n	80037aa <SenCtrl_ProcessSensorValue+0x1b6>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_BRAKE_LIGHT_RIGHT_MALFUNCTION);
 8003732:	2074      	movs	r0, #116	; 0x74
 8003734:	f00e f888 	bl	8011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003738:	e037      	b.n	80037aa <SenCtrl_ProcessSensorValue+0x1b6>
		case SENCTRL_DIAGCTRL_BL_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_L_POSITION] < SENCTRL_THRESHOLD_SH)
 800373a:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2b59      	cmp	r3, #89	; 0x59
 8003740:	d835      	bhi.n	80037ae <SenCtrl_ProcessSensorValue+0x1ba>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_BRAKE_LIGHT_LEFT_MALFUNCTION);
 8003742:	2074      	movs	r0, #116	; 0x74
 8003744:	f00e f880 	bl	8011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003748:	e031      	b.n	80037ae <SenCtrl_ProcessSensorValue+0x1ba>
		case SENCTRL_DIAGCTRL_LTS_F_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_F_POSITION] < SENCTRL_THRESHOLD_SH)
 800374a:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	2b59      	cmp	r3, #89	; 0x59
 8003750:	d82f      	bhi.n	80037b2 <SenCtrl_ProcessSensorValue+0x1be>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION);
 8003752:	2064      	movs	r0, #100	; 0x64
 8003754:	f00e f878 	bl	8011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003758:	e02b      	b.n	80037b2 <SenCtrl_ProcessSensorValue+0x1be>
		case SENCTRL_DIAGCTRL_LTS_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_R_POSITION] < SENCTRL_THRESHOLD_SH)
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	2b59      	cmp	r3, #89	; 0x59
 8003760:	d829      	bhi.n	80037b6 <SenCtrl_ProcessSensorValue+0x1c2>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LEFT_TURN_SIGNAL_REAR_MALFUNCTION);
 8003762:	2065      	movs	r0, #101	; 0x65
 8003764:	f00e f870 	bl	8011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003768:	e025      	b.n	80037b6 <SenCtrl_ProcessSensorValue+0x1c2>
		case SENCTRL_DIAGCTRL_RTS_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_R_POSITION] < SENCTRL_THRESHOLD_SH)
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	2b59      	cmp	r3, #89	; 0x59
 8003770:	d823      	bhi.n	80037ba <SenCtrl_ProcessSensorValue+0x1c6>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION);
 8003772:	2055      	movs	r0, #85	; 0x55
 8003774:	f00e f868 	bl	8011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003778:	e01f      	b.n	80037ba <SenCtrl_ProcessSensorValue+0x1c6>
		case SENCTRL_DIAGCTRL_RTS_F_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_F_POSITION] < SENCTRL_THRESHOLD_SH)
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <SenCtrl_ProcessSensorValue+0x1d4>)
 800377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377e:	2b59      	cmp	r3, #89	; 0x59
 8003780:	d81d      	bhi.n	80037be <SenCtrl_ProcessSensorValue+0x1ca>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION);
 8003782:	2054      	movs	r0, #84	; 0x54
 8003784:	f00e f860 	bl	8011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003788:	e019      	b.n	80037be <SenCtrl_ProcessSensorValue+0x1ca>
		default:
			break;
 800378a:	bf00      	nop
 800378c:	e018      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800378e:	bf00      	nop
 8003790:	e016      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003792:	bf00      	nop
 8003794:	e014      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003796:	bf00      	nop
 8003798:	e012      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800379a:	bf00      	nop
 800379c:	e010      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800379e:	bf00      	nop
 80037a0:	e00e      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037a2:	bf00      	nop
 80037a4:	e00c      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037a6:	bf00      	nop
 80037a8:	e00a      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037aa:	bf00      	nop
 80037ac:	e008      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037ae:	bf00      	nop
 80037b0:	e006      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037b2:	bf00      	nop
 80037b4:	e004      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 80037be:	bf00      	nop
	}
}
 80037c0:	bf00      	nop
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200001b0 	.word	0x200001b0

080037cc <Can_Init>:
/***********************************************************************************
* Function: Can_Init													   		   *
* Description: Driver initialization.		 	   								   *
************************************************************************************/
VOID Can_Init()
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
	Can_BswState = CAN_INIT_STATE;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <Can_Init+0x14>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
	CanOverSpi_Init();
 80037d6:	f009 ffba 	bl	800d74e <CanOverSpi_Init>
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200001f0 	.word	0x200001f0

080037e4 <HAL_I2C_MasterTxCpltCallback>:
/***********************************************************************************
* Function: HAL_I2C_MasterTxCpltCallback										   *
* Description: Handler master transmission complete.							   *
************************************************************************************/
VOID HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a05      	ldr	r2, [pc, #20]	; (8003808 <HAL_I2C_MasterTxCpltCallback+0x24>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d104      	bne.n	8003800 <HAL_I2C_MasterTxCpltCallback+0x1c>
	{
		xTaskResumeFromISR(I2C_ISRHandle);
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_I2C_MasterTxCpltCallback+0x28>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f00c fc52 	bl	80100a4 <xTaskResumeFromISR>
	}
	else
	{
		/* do nothing */
	}
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40005400 	.word	0x40005400
 800380c:	2000034c 	.word	0x2000034c

08003810 <HAL_I2C_ErrorCallback>:
/***********************************************************************************
* Function: HAL_I2C_ErrorCallback										   		   *
* Description: Handler error callback.									           *
************************************************************************************/
VOID HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a52      	ldr	r2, [pc, #328]	; (8003968 <HAL_I2C_ErrorCallback+0x158>)
 800381e:	4293      	cmp	r3, r2
 8003820:	f040 809d 	bne.w	800395e <HAL_I2C_ErrorCallback+0x14e>
	{
		/* Store the fault. */
		uint32 receivedValue = HAL_I2C_GetError(hi2c);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f005 f817 	bl	8008858 <HAL_I2C_GetError>
 800382a:	60f8      	str	r0, [r7, #12]
		/* Process the fault. */
		switch(receivedValue)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	f000 808c 	beq.w	800394c <HAL_I2C_ErrorCallback+0x13c>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b80      	cmp	r3, #128	; 0x80
 8003838:	f200 8090 	bhi.w	800395c <HAL_I2C_ErrorCallback+0x14c>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b20      	cmp	r3, #32
 8003840:	d848      	bhi.n	80038d4 <HAL_I2C_ErrorCallback+0xc4>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b20      	cmp	r3, #32
 8003846:	f200 8089 	bhi.w	800395c <HAL_I2C_ErrorCallback+0x14c>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <HAL_I2C_ErrorCallback+0x40>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	0800395d 	.word	0x0800395d
 8003854:	080038dd 	.word	0x080038dd
 8003858:	080038ed 	.word	0x080038ed
 800385c:	0800395d 	.word	0x0800395d
 8003860:	080038fd 	.word	0x080038fd
 8003864:	0800395d 	.word	0x0800395d
 8003868:	0800395d 	.word	0x0800395d
 800386c:	0800395d 	.word	0x0800395d
 8003870:	0800390d 	.word	0x0800390d
 8003874:	0800395d 	.word	0x0800395d
 8003878:	0800395d 	.word	0x0800395d
 800387c:	0800395d 	.word	0x0800395d
 8003880:	0800395d 	.word	0x0800395d
 8003884:	0800395d 	.word	0x0800395d
 8003888:	0800395d 	.word	0x0800395d
 800388c:	0800395d 	.word	0x0800395d
 8003890:	0800391d 	.word	0x0800391d
 8003894:	0800395d 	.word	0x0800395d
 8003898:	0800395d 	.word	0x0800395d
 800389c:	0800395d 	.word	0x0800395d
 80038a0:	0800395d 	.word	0x0800395d
 80038a4:	0800395d 	.word	0x0800395d
 80038a8:	0800395d 	.word	0x0800395d
 80038ac:	0800395d 	.word	0x0800395d
 80038b0:	0800395d 	.word	0x0800395d
 80038b4:	0800395d 	.word	0x0800395d
 80038b8:	0800395d 	.word	0x0800395d
 80038bc:	0800395d 	.word	0x0800395d
 80038c0:	0800395d 	.word	0x0800395d
 80038c4:	0800395d 	.word	0x0800395d
 80038c8:	0800395d 	.word	0x0800395d
 80038cc:	0800395d 	.word	0x0800395d
 80038d0:	0800392d 	.word	0x0800392d
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d030      	beq.n	800393c <HAL_I2C_ErrorCallback+0x12c>
				break;
			case HAL_I2C_ERROR_DMA_PARAM:
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_ONE]++;
				break;
			default:
				break;
 80038da:	e03f      	b.n	800395c <HAL_I2C_ErrorCallback+0x14c>
				SystemManager_Fault[I2C_ERROR_BERR_ONE]++;
 80038dc:	4b23      	ldr	r3, [pc, #140]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 80038de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e2:	3301      	adds	r3, #1
 80038e4:	4a21      	ldr	r2, [pc, #132]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 80038e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
				break;
 80038ea:	e038      	b.n	800395e <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_ARLO_ONE]++;;
 80038ec:	4b1f      	ldr	r3, [pc, #124]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 80038f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				break;
 80038fa:	e030      	b.n	800395e <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_AF_ONE]++;
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 80038fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003902:	3301      	adds	r3, #1
 8003904:	4a19      	ldr	r2, [pc, #100]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 8003906:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
				break;
 800390a:	e028      	b.n	800395e <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_OVR_ONE]++;
 800390c:	4b17      	ldr	r3, [pc, #92]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	3301      	adds	r3, #1
 8003914:	4a15      	ldr	r2, [pc, #84]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 8003916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
				break;
 800391a:	e020      	b.n	800395e <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_DMA_ONE]++;
 800391c:	4b13      	ldr	r3, [pc, #76]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 800391e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003922:	3301      	adds	r3, #1
 8003924:	4a11      	ldr	r2, [pc, #68]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 8003926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
				break;
 800392a:	e018      	b.n	800395e <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_TIMEOUT_ONE]++;
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 800392e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003932:	3301      	adds	r3, #1
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 8003936:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				break;
 800393a:	e010      	b.n	800395e <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_SIZE_ONE]++;
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 800393e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003942:	3301      	adds	r3, #1
 8003944:	4a09      	ldr	r2, [pc, #36]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 8003946:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
				break;
 800394a:	e008      	b.n	800395e <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_ONE]++;
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 800394e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003952:	3301      	adds	r3, #1
 8003954:	4a05      	ldr	r2, [pc, #20]	; (800396c <HAL_I2C_ErrorCallback+0x15c>)
 8003956:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
				break;
 800395a:	e000      	b.n	800395e <HAL_I2C_ErrorCallback+0x14e>
				break;
 800395c:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40005400 	.word	0x40005400
 800396c:	2000941c 	.word	0x2000941c

08003970 <I2c_Init>:
/***********************************************************************************
* Function: I2c_Init										   			           *
* Description: Handler initialization.									           *
************************************************************************************/
StdReturnType I2c_Init(uint8 I2c_Channel)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
	/* Initialize the protocol on the respective channel. */
	if(I2c_Channel == I2C_CHANNEL_ONE)
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d124      	bne.n	80039ca <I2c_Init+0x5a>
	{
		hi2c1.Instance = I2C1;
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <I2c_Init+0x64>)
 8003982:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <I2c_Init+0x68>)
 8003984:	601a      	str	r2, [r3, #0]
		hi2c1.Init.ClockSpeed = 100000;
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <I2c_Init+0x64>)
 8003988:	4a14      	ldr	r2, [pc, #80]	; (80039dc <I2c_Init+0x6c>)
 800398a:	605a      	str	r2, [r3, #4]
		hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <I2c_Init+0x64>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
		hi2c1.Init.OwnAddress1 = 0;
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <I2c_Init+0x64>)
 8003994:	2200      	movs	r2, #0
 8003996:	60da      	str	r2, [r3, #12]
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <I2c_Init+0x64>)
 800399a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800399e:	611a      	str	r2, [r3, #16]
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <I2c_Init+0x64>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	615a      	str	r2, [r3, #20]
		hi2c1.Init.OwnAddress2 = 0;
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <I2c_Init+0x64>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <I2c_Init+0x64>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <I2c_Init+0x64>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039b8:	4806      	ldr	r0, [pc, #24]	; (80039d4 <I2c_Init+0x64>)
 80039ba:	f004 fa71 	bl	8007ea0 <HAL_I2C_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <I2c_Init+0x5a>
		{
			HAL_I2C_ErrorCallback(&hi2c1);
 80039c4:	4803      	ldr	r0, [pc, #12]	; (80039d4 <I2c_Init+0x64>)
 80039c6:	f7ff ff23 	bl	8003810 <HAL_I2C_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000374 	.word	0x20000374
 80039d8:	40005400 	.word	0x40005400
 80039dc:	000186a0 	.word	0x000186a0

080039e0 <I2c_DeInit>:
/***********************************************************************************
* Function: I2c_DeInit										   			           *
* Description: Handler de-initialization.									       *
************************************************************************************/
StdReturnType I2c_DeInit(uint8 I2c_Channel)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
	/* De-initialize the protocol on the respective channel. */
	if(I2c_Channel == I2C_CHANNEL_ONE)
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d102      	bne.n	80039f6 <I2c_DeInit+0x16>
	{
		HAL_I2C_DeInit(&hi2c1);
 80039f0:	4803      	ldr	r0, [pc, #12]	; (8003a00 <I2c_DeInit+0x20>)
 80039f2:	f004 fbd5 	bl	80081a0 <HAL_I2C_DeInit>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000374 	.word	0x20000374

08003a04 <I2c_MainFunction>:
/***********************************************************************************
* Function: I2c_MainFunction										   			   *
* Description: Handler main function.									           *
************************************************************************************/
VOID I2c_MainFunction()
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
	uint32 localStatusOne = HAL_I2C_GetState(&hi2c1);
 8003a0a:	4846      	ldr	r0, [pc, #280]	; (8003b24 <I2c_MainFunction+0x120>)
 8003a0c:	f004 ff16 	bl	800883c <HAL_I2C_GetState>
 8003a10:	4603      	mov	r3, r0
 8003a12:	607b      	str	r3, [r7, #4]
	/* Process channel one. */
	switch(localStatusOne)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2be0      	cmp	r3, #224	; 0xe0
 8003a18:	d078      	beq.n	8003b0c <I2c_MainFunction+0x108>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2be0      	cmp	r3, #224	; 0xe0
 8003a1e:	d87c      	bhi.n	8003b1a <I2c_MainFunction+0x116>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b24      	cmp	r3, #36	; 0x24
 8003a24:	d850      	bhi.n	8003ac8 <I2c_MainFunction+0xc4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b24      	cmp	r3, #36	; 0x24
 8003a2a:	d876      	bhi.n	8003b1a <I2c_MainFunction+0x116>
 8003a2c:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <I2c_MainFunction+0x30>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003ad1 	.word	0x08003ad1
 8003a38:	08003b1b 	.word	0x08003b1b
 8003a3c:	08003b1b 	.word	0x08003b1b
 8003a40:	08003b1b 	.word	0x08003b1b
 8003a44:	08003b1b 	.word	0x08003b1b
 8003a48:	08003b1b 	.word	0x08003b1b
 8003a4c:	08003b1b 	.word	0x08003b1b
 8003a50:	08003b1b 	.word	0x08003b1b
 8003a54:	08003b1b 	.word	0x08003b1b
 8003a58:	08003b1b 	.word	0x08003b1b
 8003a5c:	08003b1b 	.word	0x08003b1b
 8003a60:	08003b1b 	.word	0x08003b1b
 8003a64:	08003b1b 	.word	0x08003b1b
 8003a68:	08003b1b 	.word	0x08003b1b
 8003a6c:	08003b1b 	.word	0x08003b1b
 8003a70:	08003b1b 	.word	0x08003b1b
 8003a74:	08003b1b 	.word	0x08003b1b
 8003a78:	08003b1b 	.word	0x08003b1b
 8003a7c:	08003b1b 	.word	0x08003b1b
 8003a80:	08003b1b 	.word	0x08003b1b
 8003a84:	08003b1b 	.word	0x08003b1b
 8003a88:	08003b1b 	.word	0x08003b1b
 8003a8c:	08003b1b 	.word	0x08003b1b
 8003a90:	08003b1b 	.word	0x08003b1b
 8003a94:	08003b1b 	.word	0x08003b1b
 8003a98:	08003b1b 	.word	0x08003b1b
 8003a9c:	08003b1b 	.word	0x08003b1b
 8003aa0:	08003b1b 	.word	0x08003b1b
 8003aa4:	08003b1b 	.word	0x08003b1b
 8003aa8:	08003b1b 	.word	0x08003b1b
 8003aac:	08003b1b 	.word	0x08003b1b
 8003ab0:	08003b1b 	.word	0x08003b1b
 8003ab4:	08003adf 	.word	0x08003adf
 8003ab8:	08003aef 	.word	0x08003aef
 8003abc:	08003af7 	.word	0x08003af7
 8003ac0:	08003b1b 	.word	0x08003b1b
 8003ac4:	08003ae7 	.word	0x08003ae7
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2ba0      	cmp	r3, #160	; 0xa0
 8003acc:	d017      	beq.n	8003afe <I2c_MainFunction+0xfa>
		case HAL_I2C_STATE_ERROR:
			I2c_BswState_ChannelOne = localStatusOne;
			HAL_I2C_ErrorCallback(&hi2c1);
			break;
		default:
			break;
 8003ace:	e024      	b.n	8003b1a <I2c_MainFunction+0x116>
			I2c_BswState_ChannelOne = localStatusOne;
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <I2c_MainFunction+0x124>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6013      	str	r3, [r2, #0]
			I2c_Init(I2C_CHANNEL_ONE);
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7ff ff4a 	bl	8003970 <I2c_Init>
			break;
 8003adc:	e01e      	b.n	8003b1c <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <I2c_MainFunction+0x124>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6013      	str	r3, [r2, #0]
			break;
 8003ae4:	e01a      	b.n	8003b1c <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 8003ae6:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <I2c_MainFunction+0x124>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6013      	str	r3, [r2, #0]
			break;
 8003aec:	e016      	b.n	8003b1c <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 8003aee:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <I2c_MainFunction+0x124>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6013      	str	r3, [r2, #0]
			break;
 8003af4:	e012      	b.n	8003b1c <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 8003af6:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <I2c_MainFunction+0x124>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6013      	str	r3, [r2, #0]
			break;
 8003afc:	e00e      	b.n	8003b1c <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 8003afe:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <I2c_MainFunction+0x124>)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c1);
 8003b04:	4807      	ldr	r0, [pc, #28]	; (8003b24 <I2c_MainFunction+0x120>)
 8003b06:	f7ff fe83 	bl	8003810 <HAL_I2C_ErrorCallback>
			break;
 8003b0a:	e007      	b.n	8003b1c <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 8003b0c:	4a06      	ldr	r2, [pc, #24]	; (8003b28 <I2c_MainFunction+0x124>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c1);
 8003b12:	4804      	ldr	r0, [pc, #16]	; (8003b24 <I2c_MainFunction+0x120>)
 8003b14:	f7ff fe7c 	bl	8003810 <HAL_I2C_ErrorCallback>
			break;
 8003b18:	e000      	b.n	8003b1c <I2c_MainFunction+0x118>
			break;
 8003b1a:	bf00      	nop
	}
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000374 	.word	0x20000374
 8003b28:	200001f4 	.word	0x200001f4

08003b2c <I2cLcd_Init>:
/***********************************************************************************
* Function: I2cLcd_Init										   			           *
* Description: Driver initialization.									           *
************************************************************************************/
StdReturnType I2cLcd_Init()
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
	if(Rte_P_Btc_BtcPort_Btc_ReceivedDataOnBluetooth == 92)
 8003b32:	4b58      	ldr	r3, [pc, #352]	; (8003c94 <I2cLcd_Init+0x168>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b5c      	cmp	r3, #92	; 0x5c
 8003b38:	d123      	bne.n	8003b82 <I2cLcd_Init+0x56>
	{
		uint8 local = 93;
 8003b3a:	235d      	movs	r3, #93	; 0x5d
 8003b3c:	71fb      	strb	r3, [r7, #7]
		Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&local);
 8003b3e:	1dfb      	adds	r3, r7, #7
 8003b40:	4618      	mov	r0, r3
 8003b42:	f00e f82d 	bl	8011ba0 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
		init1 = STD_LOW;
 8003b46:	4b54      	ldr	r3, [pc, #336]	; (8003c98 <I2cLcd_Init+0x16c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
		init2 = STD_LOW;
 8003b4c:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <I2cLcd_Init+0x170>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
		init3 = STD_LOW;
 8003b52:	4b53      	ldr	r3, [pc, #332]	; (8003ca0 <I2cLcd_Init+0x174>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
		init4 = STD_LOW;
 8003b58:	4b52      	ldr	r3, [pc, #328]	; (8003ca4 <I2cLcd_Init+0x178>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
		init5 = STD_LOW;
 8003b5e:	4b52      	ldr	r3, [pc, #328]	; (8003ca8 <I2cLcd_Init+0x17c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
		init6 = STD_LOW;
 8003b64:	4b51      	ldr	r3, [pc, #324]	; (8003cac <I2cLcd_Init+0x180>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
		init7 = STD_LOW;
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <I2cLcd_Init+0x184>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
		init8 = STD_LOW;
 8003b70:	4b50      	ldr	r3, [pc, #320]	; (8003cb4 <I2cLcd_Init+0x188>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
		init9 = STD_LOW;
 8003b76:	4b50      	ldr	r3, [pc, #320]	; (8003cb8 <I2cLcd_Init+0x18c>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
		I2c_Lcd_Init_Flag = STD_LOW;
 8003b7c:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <I2cLcd_Init+0x190>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(init1 == STD_LOW)
 8003b82:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <I2cLcd_Init+0x16c>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d105      	bne.n	8003b96 <I2cLcd_Init+0x6a>
	{
		init1 = STD_HIGH;
 8003b8a:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <I2cLcd_Init+0x16c>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 8003b90:	2030      	movs	r0, #48	; 0x30
 8003b92:	f000 f895 	bl	8003cc0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init2 == STD_LOW)
 8003b96:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <I2cLcd_Init+0x170>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d105      	bne.n	8003baa <I2cLcd_Init+0x7e>
	{
		init2 = STD_HIGH;
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <I2cLcd_Init+0x170>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 8003ba4:	2030      	movs	r0, #48	; 0x30
 8003ba6:	f000 f88b 	bl	8003cc0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init3 == STD_LOW)
 8003baa:	4b3d      	ldr	r3, [pc, #244]	; (8003ca0 <I2cLcd_Init+0x174>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <I2cLcd_Init+0x92>
	{
		init3 = STD_HIGH;
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	; (8003ca0 <I2cLcd_Init+0x174>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 8003bb8:	2030      	movs	r0, #48	; 0x30
 8003bba:	f000 f881 	bl	8003cc0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init4 == STD_LOW)
 8003bbe:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <I2cLcd_Init+0x178>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d105      	bne.n	8003bd2 <I2cLcd_Init+0xa6>
	{
		init4 = STD_HIGH;
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <I2cLcd_Init+0x178>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x20);
 8003bcc:	2020      	movs	r0, #32
 8003bce:	f000 f877 	bl	8003cc0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init5 == STD_LOW)
 8003bd2:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <I2cLcd_Init+0x17c>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d105      	bne.n	8003be6 <I2cLcd_Init+0xba>
	{
		init5 = STD_HIGH;
 8003bda:	4b33      	ldr	r3, [pc, #204]	; (8003ca8 <I2cLcd_Init+0x17c>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x28);
 8003be0:	2028      	movs	r0, #40	; 0x28
 8003be2:	f000 f86d 	bl	8003cc0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init6 == STD_LOW)
 8003be6:	4b31      	ldr	r3, [pc, #196]	; (8003cac <I2cLcd_Init+0x180>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <I2cLcd_Init+0xce>
	{
		init6 = STD_HIGH;
 8003bee:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <I2cLcd_Init+0x180>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x08);
 8003bf4:	2008      	movs	r0, #8
 8003bf6:	f000 f863 	bl	8003cc0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init7 == STD_LOW)
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <I2cLcd_Init+0x184>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d105      	bne.n	8003c0e <I2cLcd_Init+0xe2>
	{
		init7 = STD_HIGH;
 8003c02:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <I2cLcd_Init+0x184>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x01);
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f000 f859 	bl	8003cc0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init8 == STD_LOW)
 8003c0e:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <I2cLcd_Init+0x188>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d105      	bne.n	8003c22 <I2cLcd_Init+0xf6>
	{
		init8 = STD_HIGH;
 8003c16:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <I2cLcd_Init+0x188>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x06);
 8003c1c:	2006      	movs	r0, #6
 8003c1e:	f000 f84f 	bl	8003cc0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init9 == STD_LOW)
 8003c22:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <I2cLcd_Init+0x18c>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d105      	bne.n	8003c36 <I2cLcd_Init+0x10a>
	{
		init9 = STD_HIGH;
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <I2cLcd_Init+0x18c>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x0C);
 8003c30:	200c      	movs	r0, #12
 8003c32:	f000 f845 	bl	8003cc0 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init1 == STD_HIGH && init2 == STD_HIGH && init3 == STD_HIGH
 8003c36:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <I2cLcd_Init+0x16c>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d124      	bne.n	8003c88 <I2cLcd_Init+0x15c>
 8003c3e:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <I2cLcd_Init+0x170>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d120      	bne.n	8003c88 <I2cLcd_Init+0x15c>
 8003c46:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <I2cLcd_Init+0x174>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d11c      	bne.n	8003c88 <I2cLcd_Init+0x15c>
			&& init4 == STD_HIGH && init5 == STD_HIGH && init6 == STD_HIGH
 8003c4e:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <I2cLcd_Init+0x178>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d118      	bne.n	8003c88 <I2cLcd_Init+0x15c>
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <I2cLcd_Init+0x17c>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d114      	bne.n	8003c88 <I2cLcd_Init+0x15c>
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <I2cLcd_Init+0x180>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d110      	bne.n	8003c88 <I2cLcd_Init+0x15c>
			&& init7 == STD_HIGH && init8 == STD_HIGH && init9 == STD_HIGH)
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <I2cLcd_Init+0x184>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d10c      	bne.n	8003c88 <I2cLcd_Init+0x15c>
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <I2cLcd_Init+0x188>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d108      	bne.n	8003c88 <I2cLcd_Init+0x15c>
 8003c76:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <I2cLcd_Init+0x18c>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d104      	bne.n	8003c88 <I2cLcd_Init+0x15c>
	{
		I2cLcd_Clear();
 8003c7e:	f000 f8bb 	bl	8003df8 <I2cLcd_Clear>
		I2c_Lcd_Init_Flag = STD_HIGH;
 8003c82:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <I2cLcd_Init+0x190>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200000e2 	.word	0x200000e2
 8003c98:	200001f8 	.word	0x200001f8
 8003c9c:	200001f9 	.word	0x200001f9
 8003ca0:	200001fa 	.word	0x200001fa
 8003ca4:	200001fb 	.word	0x200001fb
 8003ca8:	200001fc 	.word	0x200001fc
 8003cac:	200001fd 	.word	0x200001fd
 8003cb0:	200001fe 	.word	0x200001fe
 8003cb4:	200001ff 	.word	0x200001ff
 8003cb8:	20000200 	.word	0x20000200
 8003cbc:	200002ed 	.word	0x200002ed

08003cc0 <I2cLcd_SendCommand>:
/***********************************************************************************
* Function: I2cLcd_SendCommand										   			   *
* Description: Driver command transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendCommand(char cmd)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8 data_t[4];
	data_u = (cmd & 0xf0);
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	f023 030f 	bic.w	r3, r3, #15
 8003cd0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	f043 030c 	orr.w	r3, r3, #12
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	f043 0308 	orr.w	r3, r3, #8
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 8003cec:	7bbb      	ldrb	r3, [r7, #14]
 8003cee:	f043 030c 	orr.w	r3, r3, #12
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 8003cf6:	7bbb      	ldrb	r3, [r7, #14]
 8003cf8:	f043 0308 	orr.w	r3, r3, #8
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit_IT(&hi2c1, I2CLCD_SLAVE_ADDRESS, (uint8 *) data_t, 4);
 8003d00:	f107 0208 	add.w	r2, r7, #8
 8003d04:	2304      	movs	r3, #4
 8003d06:	214e      	movs	r1, #78	; 0x4e
 8003d08:	4805      	ldr	r0, [pc, #20]	; (8003d20 <I2cLcd_SendCommand+0x60>)
 8003d0a:	f004 fa85 	bl	8008218 <HAL_I2C_Master_Transmit_IT>
	vTaskSuspend(I2C_ISRHandle);
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <I2cLcd_SendCommand+0x64>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f00c f8c0 	bl	800fe98 <vTaskSuspend>
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000374 	.word	0x20000374
 8003d24:	2000034c 	.word	0x2000034c

08003d28 <I2cLcd_SendData>:
/***********************************************************************************
* Function: I2cLcd_SendData										   			       *
* Description: Driver data transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendData(char data)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8 data_t[4];
	data_u = (data & 0xf0);
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	f023 030f 	bic.w	r3, r3, #15
 8003d38:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	f043 030d 	orr.w	r3, r3, #13
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	f043 0309 	orr.w	r3, r3, #9
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8003d54:	7bbb      	ldrb	r3, [r7, #14]
 8003d56:	f043 030d 	orr.w	r3, r3, #13
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8003d5e:	7bbb      	ldrb	r3, [r7, #14]
 8003d60:	f043 0309 	orr.w	r3, r3, #9
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit_IT(&hi2c1, I2CLCD_SLAVE_ADDRESS, (uint8 *) data_t, 4);
 8003d68:	f107 0208 	add.w	r2, r7, #8
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	214e      	movs	r1, #78	; 0x4e
 8003d70:	4805      	ldr	r0, [pc, #20]	; (8003d88 <I2cLcd_SendData+0x60>)
 8003d72:	f004 fa51 	bl	8008218 <HAL_I2C_Master_Transmit_IT>
	vTaskSuspend(I2C_ISRHandle);
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <I2cLcd_SendData+0x64>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f00c f88c 	bl	800fe98 <vTaskSuspend>
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000374 	.word	0x20000374
 8003d8c:	2000034c 	.word	0x2000034c

08003d90 <I2cLcd_SendString>:
/***********************************************************************************
* Function: I2cLcd_SendString										   			   *
* Description: Driver string transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendString(char *str)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	while (*str)
 8003d98:	e006      	b.n	8003da8 <I2cLcd_SendString+0x18>
	{
		I2cLcd_SendData(*str++);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ffc0 	bl	8003d28 <I2cLcd_SendData>
	while (*str)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f4      	bne.n	8003d9a <I2cLcd_SendString+0xa>
	}
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <I2cLcd_SetCursor>:
/***********************************************************************************
* Function: I2cLcd_SetCursor										   			   *
* Description: Driver cursor setting.									           *
************************************************************************************/
VOID I2cLcd_SetCursor(int row, int col)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
	switch (row)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <I2cLcd_SetCursor+0x18>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d005      	beq.n	8003ddc <I2cLcd_SetCursor+0x22>
 8003dd0:	e009      	b.n	8003de6 <I2cLcd_SetCursor+0x2c>
	{
		case 0:
			col |= 0x80;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd8:	603b      	str	r3, [r7, #0]
			break;
 8003dda:	e004      	b.n	8003de6 <I2cLcd_SetCursor+0x2c>
		case 1:
			col |= 0xC0;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003de2:	603b      	str	r3, [r7, #0]
			break;
 8003de4:	bf00      	nop
	}
	I2cLcd_SendCommand(col);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ff68 	bl	8003cc0 <I2cLcd_SendCommand>
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <I2cLcd_Clear>:
/***********************************************************************************
* Function: I2cLcd_Clear										   			       *
* Description: Driver LCD clearing.									               *
************************************************************************************/
VOID I2cLcd_Clear()
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
	I2cLcd_SendCommand(0x80);
 8003dfe:	2080      	movs	r0, #128	; 0x80
 8003e00:	f7ff ff5e 	bl	8003cc0 <I2cLcd_SendCommand>
	for (uint8 i=0; i < 70; i++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	71fb      	strb	r3, [r7, #7]
 8003e08:	e005      	b.n	8003e16 <I2cLcd_Clear+0x1e>
	{
		I2cLcd_SendData(' ');
 8003e0a:	2020      	movs	r0, #32
 8003e0c:	f7ff ff8c 	bl	8003d28 <I2cLcd_SendData>
	for (uint8 i=0; i < 70; i++)
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	3301      	adds	r3, #1
 8003e14:	71fb      	strb	r3, [r7, #7]
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	2b45      	cmp	r3, #69	; 0x45
 8003e1a:	d9f6      	bls.n	8003e0a <I2cLcd_Clear+0x12>
	}
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <Uart_Init>:
/***********************************************************************************
* Function: Uart_Init										       				   *
* Description: Initialize the protocol.									 		   *
************************************************************************************/
StdReturnType Uart_Init()
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
	/* Set the instance. */
	huart1.Instance = USART1;
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <Uart_Init+0x50>)
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <Uart_Init+0x54>)
 8003e30:	601a      	str	r2, [r3, #0]
	/* Set the baud rate for the protocol. */
	huart1.Init.BaudRate = 9600;
 8003e32:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <Uart_Init+0x50>)
 8003e34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003e38:	605a      	str	r2, [r3, #4]
	/* Set the number of data bits transmitted or received. */
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <Uart_Init+0x50>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
	/* Set the number of stop bits transmitted. */
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003e40:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <Uart_Init+0x50>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	60da      	str	r2, [r3, #12]
	/* Set the parity mode. */
	huart1.Init.Parity = UART_PARITY_NONE;
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <Uart_Init+0x50>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	611a      	str	r2, [r3, #16]
	/* Set the protocol mode. */
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <Uart_Init+0x50>)
 8003e4e:	220c      	movs	r2, #12
 8003e50:	615a      	str	r2, [r3, #20]
	/* Set the hardware flow control. */
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <Uart_Init+0x50>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]
	/* Set the over sampling value. */
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e58:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <Uart_Init+0x50>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	61da      	str	r2, [r3, #28]
	/* Call for error callback if the initialization is not performed accordingly. */
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e5e:	4806      	ldr	r0, [pc, #24]	; (8003e78 <Uart_Init+0x50>)
 8003e60:	f008 f9ba 	bl	800c1d8 <HAL_UART_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <Uart_Init+0x48>
	{
		HAL_UART_ErrorCallback(&huart1);
 8003e6a:	4803      	ldr	r0, [pc, #12]	; (8003e78 <Uart_Init+0x50>)
 8003e6c:	f000 f8b2 	bl	8003fd4 <HAL_UART_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000810 	.word	0x20000810
 8003e7c:	40011000 	.word	0x40011000

08003e80 <Uart_DeInit>:
/***********************************************************************************
* Function: Uart_DeInit										   					   *
* Description: De-initialize the protocol.									       *
************************************************************************************/
StdReturnType Uart_DeInit()
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	/* Call for protocol de-init function. */
	HAL_UART_DeInit(&huart1);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <Uart_DeInit+0x10>)
 8003e86:	f008 fa01 	bl	800c28c <HAL_UART_DeInit>
	return E_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000810 	.word	0x20000810

08003e94 <Uart_MainFunction>:
/***********************************************************************************
* Function: Uart_MainFunction										   			   *
* Description: Protocol main function.									           *
************************************************************************************/
VOID Uart_MainFunction()
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
	/* Get the error status in local variable. */
	uint32 localState = HAL_UART_GetState(&huart1);
 8003e9a:	484b      	ldr	r0, [pc, #300]	; (8003fc8 <Uart_MainFunction+0x134>)
 8003e9c:	f008 fd80 	bl	800c9a0 <HAL_UART_GetState>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	607b      	str	r3, [r7, #4]
	switch(localState)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2be0      	cmp	r3, #224	; 0xe0
 8003ea8:	f000 8082 	beq.w	8003fb0 <Uart_MainFunction+0x11c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2be0      	cmp	r3, #224	; 0xe0
 8003eb0:	f200 8085 	bhi.w	8003fbe <Uart_MainFunction+0x12a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b24      	cmp	r3, #36	; 0x24
 8003eb8:	d850      	bhi.n	8003f5c <Uart_MainFunction+0xc8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b24      	cmp	r3, #36	; 0x24
 8003ebe:	d87e      	bhi.n	8003fbe <Uart_MainFunction+0x12a>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <Uart_MainFunction+0x34>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003f65 	.word	0x08003f65
 8003ecc:	08003fbf 	.word	0x08003fbf
 8003ed0:	08003fbf 	.word	0x08003fbf
 8003ed4:	08003fbf 	.word	0x08003fbf
 8003ed8:	08003fbf 	.word	0x08003fbf
 8003edc:	08003fbf 	.word	0x08003fbf
 8003ee0:	08003fbf 	.word	0x08003fbf
 8003ee4:	08003fbf 	.word	0x08003fbf
 8003ee8:	08003fbf 	.word	0x08003fbf
 8003eec:	08003fbf 	.word	0x08003fbf
 8003ef0:	08003fbf 	.word	0x08003fbf
 8003ef4:	08003fbf 	.word	0x08003fbf
 8003ef8:	08003fbf 	.word	0x08003fbf
 8003efc:	08003fbf 	.word	0x08003fbf
 8003f00:	08003fbf 	.word	0x08003fbf
 8003f04:	08003fbf 	.word	0x08003fbf
 8003f08:	08003fbf 	.word	0x08003fbf
 8003f0c:	08003fbf 	.word	0x08003fbf
 8003f10:	08003fbf 	.word	0x08003fbf
 8003f14:	08003fbf 	.word	0x08003fbf
 8003f18:	08003fbf 	.word	0x08003fbf
 8003f1c:	08003fbf 	.word	0x08003fbf
 8003f20:	08003fbf 	.word	0x08003fbf
 8003f24:	08003fbf 	.word	0x08003fbf
 8003f28:	08003fbf 	.word	0x08003fbf
 8003f2c:	08003fbf 	.word	0x08003fbf
 8003f30:	08003fbf 	.word	0x08003fbf
 8003f34:	08003fbf 	.word	0x08003fbf
 8003f38:	08003fbf 	.word	0x08003fbf
 8003f3c:	08003fbf 	.word	0x08003fbf
 8003f40:	08003fbf 	.word	0x08003fbf
 8003f44:	08003fbf 	.word	0x08003fbf
 8003f48:	08003f71 	.word	0x08003f71
 8003f4c:	08003f8b 	.word	0x08003f8b
 8003f50:	08003f93 	.word	0x08003f93
 8003f54:	08003f9b 	.word	0x08003f9b
 8003f58:	08003f83 	.word	0x08003f83
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2ba0      	cmp	r3, #160	; 0xa0
 8003f60:	d01f      	beq.n	8003fa2 <Uart_MainFunction+0x10e>
		case HAL_UART_STATE_ERROR:
			Uart_BswState = localState;
			HAL_UART_ErrorCallback(&huart1);
			break;
		default:
			break;
 8003f62:	e02c      	b.n	8003fbe <Uart_MainFunction+0x12a>
			Uart_BswState = localState;
 8003f64:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <Uart_MainFunction+0x138>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6013      	str	r3, [r2, #0]
			Uart_Init();
 8003f6a:	f7ff ff5d 	bl	8003e28 <Uart_Init>
			break;
 8003f6e:	e027      	b.n	8003fc0 <Uart_MainFunction+0x12c>
			HAL_UART_Receive_IT(&huart1, &Rte_P_Btc_BtcPort_Btc_RxData, 1);
 8003f70:	2201      	movs	r2, #1
 8003f72:	4917      	ldr	r1, [pc, #92]	; (8003fd0 <Uart_MainFunction+0x13c>)
 8003f74:	4814      	ldr	r0, [pc, #80]	; (8003fc8 <Uart_MainFunction+0x134>)
 8003f76:	f008 fa08 	bl	800c38a <HAL_UART_Receive_IT>
			Uart_BswState = localState;
 8003f7a:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <Uart_MainFunction+0x138>)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6013      	str	r3, [r2, #0]
			break;
 8003f80:	e01e      	b.n	8003fc0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <Uart_MainFunction+0x138>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6013      	str	r3, [r2, #0]
			break;
 8003f88:	e01a      	b.n	8003fc0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <Uart_MainFunction+0x138>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6013      	str	r3, [r2, #0]
			break;
 8003f90:	e016      	b.n	8003fc0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003f92:	4a0e      	ldr	r2, [pc, #56]	; (8003fcc <Uart_MainFunction+0x138>)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6013      	str	r3, [r2, #0]
			break;
 8003f98:	e012      	b.n	8003fc0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003f9a:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <Uart_MainFunction+0x138>)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6013      	str	r3, [r2, #0]
			break;
 8003fa0:	e00e      	b.n	8003fc0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003fa2:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <Uart_MainFunction+0x138>)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 8003fa8:	4807      	ldr	r0, [pc, #28]	; (8003fc8 <Uart_MainFunction+0x134>)
 8003faa:	f000 f813 	bl	8003fd4 <HAL_UART_ErrorCallback>
			break;
 8003fae:	e007      	b.n	8003fc0 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003fb0:	4a06      	ldr	r2, [pc, #24]	; (8003fcc <Uart_MainFunction+0x138>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 8003fb6:	4804      	ldr	r0, [pc, #16]	; (8003fc8 <Uart_MainFunction+0x134>)
 8003fb8:	f000 f80c 	bl	8003fd4 <HAL_UART_ErrorCallback>
			break;
 8003fbc:	e000      	b.n	8003fc0 <Uart_MainFunction+0x12c>
			break;
 8003fbe:	bf00      	nop
	}
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000810 	.word	0x20000810
 8003fcc:	20000204 	.word	0x20000204
 8003fd0:	200000e0 	.word	0x200000e0

08003fd4 <HAL_UART_ErrorCallback>:
/***********************************************************************************
* Function: HAL_UART_ErrorCallback										   		   *
* Description: Process error callback.								               *
************************************************************************************/
VOID HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	/* Get error status in local variable. */
	uint32 receivedValue = HAL_UART_GetError(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f008 fcfd 	bl	800c9dc <HAL_UART_GetError>
 8003fe2:	60f8      	str	r0, [r7, #12]
	/* Process each error.
	 * Store each in error in the system manager fault array.
	 * In case of DMA error re-initialize the protocol. */
	switch(receivedValue)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d846      	bhi.n	8004078 <HAL_UART_ErrorCallback+0xa4>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <HAL_UART_ErrorCallback+0x1c>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004079 	.word	0x08004079
 8003ff4:	08004035 	.word	0x08004035
 8003ff8:	08004041 	.word	0x08004041
 8003ffc:	08004079 	.word	0x08004079
 8004000:	0800404d 	.word	0x0800404d
 8004004:	08004079 	.word	0x08004079
 8004008:	08004079 	.word	0x08004079
 800400c:	08004079 	.word	0x08004079
 8004010:	08004059 	.word	0x08004059
 8004014:	08004079 	.word	0x08004079
 8004018:	08004079 	.word	0x08004079
 800401c:	08004079 	.word	0x08004079
 8004020:	08004079 	.word	0x08004079
 8004024:	08004079 	.word	0x08004079
 8004028:	08004079 	.word	0x08004079
 800402c:	08004079 	.word	0x08004079
 8004030:	08004065 	.word	0x08004065
	{
		case HAL_UART_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_UART_ERROR_PE:
			SystemManager_Fault[UART_ERROR_PE]++;
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <HAL_UART_ErrorCallback+0xb0>)
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	3301      	adds	r3, #1
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <HAL_UART_ErrorCallback+0xb0>)
 800403c:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 800403e:	e01c      	b.n	800407a <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_NE:
			SystemManager_Fault[UART_ERROR_NE]++;
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_UART_ErrorCallback+0xb0>)
 8004042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004044:	3301      	adds	r3, #1
 8004046:	4a0f      	ldr	r2, [pc, #60]	; (8004084 <HAL_UART_ErrorCallback+0xb0>)
 8004048:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 800404a:	e016      	b.n	800407a <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_FE:
			SystemManager_Fault[UART_ERROR_FE]++;
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_UART_ErrorCallback+0xb0>)
 800404e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004050:	3301      	adds	r3, #1
 8004052:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <HAL_UART_ErrorCallback+0xb0>)
 8004054:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8004056:	e010      	b.n	800407a <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_ORE:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <HAL_UART_ErrorCallback+0xb0>)
 800405a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405c:	3301      	adds	r3, #1
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_UART_ErrorCallback+0xb0>)
 8004060:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 8004062:	e00a      	b.n	800407a <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_DMA:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <HAL_UART_ErrorCallback+0xb0>)
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	3301      	adds	r3, #1
 800406a:	4a06      	ldr	r2, [pc, #24]	; (8004084 <HAL_UART_ErrorCallback+0xb0>)
 800406c:	6513      	str	r3, [r2, #80]	; 0x50
			Uart_Init();
 800406e:	f7ff fedb 	bl	8003e28 <Uart_Init>
			Uart_DeInit();
 8004072:	f7ff ff05 	bl	8003e80 <Uart_DeInit>
			break;
 8004076:	e000      	b.n	800407a <HAL_UART_ErrorCallback+0xa6>
		default:
			break;
 8004078:	bf00      	nop
	}
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	2000941c 	.word	0x2000941c

08004088 <HAL_UART_RxCpltCallback>:
/***********************************************************************************
* Function: HAL_UART_RxCpltCallback										           *
* Description: Process received data.									   		   *
************************************************************************************/
VOID HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	/* If the UART 1 is calling the callback. */
	if(huart->Instance == USART1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a20      	ldr	r2, [pc, #128]	; (8004118 <HAL_UART_RxCpltCallback+0x90>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d13a      	bne.n	8004110 <HAL_UART_RxCpltCallback+0x88>
	{
		/* If the data received is not nullptr. */
		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 800409a:	4b20      	ldr	r3, [pc, #128]	; (800411c <HAL_UART_RxCpltCallback+0x94>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b0a      	cmp	r3, #10
 80040a0:	d11a      	bne.n	80040d8 <HAL_UART_RxCpltCallback+0x50>
		{
			/* If the buffer length counter is less than maximum value. */
			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 80040a2:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <HAL_UART_RxCpltCallback+0x98>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d80f      	bhi.n	80040ca <HAL_UART_RxCpltCallback+0x42>
			{
				/* Convert the data received to uint8.*/
				uint8 asciiToUint = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	73fb      	strb	r3, [r7, #15]
				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 80040ae:	481d      	ldr	r0, [pc, #116]	; (8004124 <HAL_UART_RxCpltCallback+0x9c>)
 80040b0:	f00f f82a 	bl	8013108 <atoi>
 80040b4:	4603      	mov	r3, r0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	73fb      	strb	r3, [r7, #15]
				Rte_Write_Btc_BtcPort_Btc_RxData(&asciiToUint);
 80040ba:	f107 030f 	add.w	r3, r7, #15
 80040be:	4618      	mov	r0, r3
 80040c0:	f00d fd26 	bl	8011b10 <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Rte_P_Btc_BtcPort_Btc_RxData);
 80040c4:	4815      	ldr	r0, [pc, #84]	; (800411c <HAL_UART_RxCpltCallback+0x94>)
 80040c6:	f00d fd6b 	bl	8011ba0 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
			else
			{
				/* do nothing */
			}
			/* Set the counter to 0 if it is more than maximum value. */
			UartCounter_Btc_RxCount = 0;
 80040ca:	4b17      	ldr	r3, [pc, #92]	; (8004128 <HAL_UART_RxCpltCallback+0xa0>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 80040d0:	4815      	ldr	r0, [pc, #84]	; (8004128 <HAL_UART_RxCpltCallback+0xa0>)
 80040d2:	f00d fd2d 	bl	8011b30 <Rte_Write_Btc_BtcPort_Btc_RxCount>
 80040d6:	e016      	b.n	8004106 <HAL_UART_RxCpltCallback+0x7e>
		}/* If the message was not fully processed, continue with the processing into the buffer. */
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 80040d8:	4b11      	ldr	r3, [pc, #68]	; (8004120 <HAL_UART_RxCpltCallback+0x98>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d80c      	bhi.n	80040fa <HAL_UART_RxCpltCallback+0x72>
		{
			Rte_Write_Btc_BtcPort_Btc_DataBuffer(&Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_UART_RxCpltCallback+0xa0>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	480d      	ldr	r0, [pc, #52]	; (800411c <HAL_UART_RxCpltCallback+0x94>)
 80040e8:	f00d fd32 	bl	8011b50 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <HAL_UART_RxCpltCallback+0xa0>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	3301      	adds	r3, #1
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_UART_RxCpltCallback+0xa0>)
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e005      	b.n	8004106 <HAL_UART_RxCpltCallback+0x7e>
		}
		else
		{
			/* Set the counter to 0 otherwise. */
			UartCounter_Btc_RxCount = 0;
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_UART_RxCpltCallback+0xa0>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8004100:	4809      	ldr	r0, [pc, #36]	; (8004128 <HAL_UART_RxCpltCallback+0xa0>)
 8004102:	f00d fd15 	bl	8011b30 <Rte_Write_Btc_BtcPort_Btc_RxCount>
		}
		/* Re-enable data transmission throuhg the protocol in interrupt mode. */
		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8004106:	2201      	movs	r2, #1
 8004108:	4904      	ldr	r1, [pc, #16]	; (800411c <HAL_UART_RxCpltCallback+0x94>)
 800410a:	4808      	ldr	r0, [pc, #32]	; (800412c <HAL_UART_RxCpltCallback+0xa4>)
 800410c:	f00d fe96 	bl	8011e3c <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40011000 	.word	0x40011000
 800411c:	200000e0 	.word	0x200000e0
 8004120:	200000e1 	.word	0x200000e1
 8004124:	200000dc 	.word	0x200000dc
 8004128:	20000208 	.word	0x20000208
 800412c:	20000810 	.word	0x20000810

08004130 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08c      	sub	sp, #48	; 0x30
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	f107 031c 	add.w	r3, r7, #28
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a4e      	ldr	r2, [pc, #312]	; (8004288 <HAL_ADC_MspInit+0x158>)
 800414e:	4293      	cmp	r3, r2
 8004150:	f040 8096 	bne.w	8004280 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004154:	2300      	movs	r3, #0
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	4b4c      	ldr	r3, [pc, #304]	; (800428c <HAL_ADC_MspInit+0x15c>)
 800415a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415c:	4a4b      	ldr	r2, [pc, #300]	; (800428c <HAL_ADC_MspInit+0x15c>)
 800415e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004162:	6453      	str	r3, [r2, #68]	; 0x44
 8004164:	4b49      	ldr	r3, [pc, #292]	; (800428c <HAL_ADC_MspInit+0x15c>)
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	4b45      	ldr	r3, [pc, #276]	; (800428c <HAL_ADC_MspInit+0x15c>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	4a44      	ldr	r2, [pc, #272]	; (800428c <HAL_ADC_MspInit+0x15c>)
 800417a:	f043 0304 	orr.w	r3, r3, #4
 800417e:	6313      	str	r3, [r2, #48]	; 0x30
 8004180:	4b42      	ldr	r3, [pc, #264]	; (800428c <HAL_ADC_MspInit+0x15c>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	4b3e      	ldr	r3, [pc, #248]	; (800428c <HAL_ADC_MspInit+0x15c>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	4a3d      	ldr	r2, [pc, #244]	; (800428c <HAL_ADC_MspInit+0x15c>)
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	6313      	str	r3, [r2, #48]	; 0x30
 800419c:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_ADC_MspInit+0x15c>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_ADC_MspInit+0x15c>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	4a36      	ldr	r2, [pc, #216]	; (800428c <HAL_ADC_MspInit+0x15c>)
 80041b2:	f043 0302 	orr.w	r3, r3, #2
 80041b6:	6313      	str	r3, [r2, #48]	; 0x30
 80041b8:	4b34      	ldr	r3, [pc, #208]	; (800428c <HAL_ADC_MspInit+0x15c>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TS_Pin|RTS_F_Pin|AQS_Pin|LS_Pin
 80041c4:	233f      	movs	r3, #63	; 0x3f
 80041c6:	61fb      	str	r3, [r7, #28]
                          |LTS_R_Pin|LTS_F_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041c8:	2303      	movs	r3, #3
 80041ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041d0:	f107 031c 	add.w	r3, r7, #28
 80041d4:	4619      	mov	r1, r3
 80041d6:	482e      	ldr	r0, [pc, #184]	; (8004290 <HAL_ADC_MspInit+0x160>)
 80041d8:	f003 fbc6 	bl	8007968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VS_Pin|RTS_R_Pin|LB_L_Pin|LB_R_Pin
 80041dc:	23fc      	movs	r3, #252	; 0xfc
 80041de:	61fb      	str	r3, [r7, #28]
                          |RPL_L_Pin|RPL_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041e0:	2303      	movs	r3, #3
 80041e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e8:	f107 031c 	add.w	r3, r7, #28
 80041ec:	4619      	mov	r1, r3
 80041ee:	4829      	ldr	r0, [pc, #164]	; (8004294 <HAL_ADC_MspInit+0x164>)
 80041f0:	f003 fbba 	bl	8007968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BL_R_Pin|BL_L_Pin;
 80041f4:	2303      	movs	r3, #3
 80041f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041f8:	2303      	movs	r3, #3
 80041fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004200:	f107 031c 	add.w	r3, r7, #28
 8004204:	4619      	mov	r1, r3
 8004206:	4824      	ldr	r0, [pc, #144]	; (8004298 <HAL_ADC_MspInit+0x168>)
 8004208:	f003 fbae 	bl	8007968 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800420c:	4b23      	ldr	r3, [pc, #140]	; (800429c <HAL_ADC_MspInit+0x16c>)
 800420e:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <HAL_ADC_MspInit+0x170>)
 8004210:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_ADC_MspInit+0x16c>)
 8004214:	2200      	movs	r2, #0
 8004216:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004218:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_ADC_MspInit+0x16c>)
 800421a:	2200      	movs	r2, #0
 800421c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800421e:	4b1f      	ldr	r3, [pc, #124]	; (800429c <HAL_ADC_MspInit+0x16c>)
 8004220:	2200      	movs	r2, #0
 8004222:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004224:	4b1d      	ldr	r3, [pc, #116]	; (800429c <HAL_ADC_MspInit+0x16c>)
 8004226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800422a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_ADC_MspInit+0x16c>)
 800422e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004232:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <HAL_ADC_MspInit+0x16c>)
 8004236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800423a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <HAL_ADC_MspInit+0x16c>)
 800423e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004242:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004244:	4b15      	ldr	r3, [pc, #84]	; (800429c <HAL_ADC_MspInit+0x16c>)
 8004246:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800424a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_ADC_MspInit+0x16c>)
 800424e:	2204      	movs	r2, #4
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_ADC_MspInit+0x16c>)
 8004254:	2203      	movs	r2, #3
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8004258:	4b10      	ldr	r3, [pc, #64]	; (800429c <HAL_ADC_MspInit+0x16c>)
 800425a:	2200      	movs	r2, #0
 800425c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800425e:	4b0f      	ldr	r3, [pc, #60]	; (800429c <HAL_ADC_MspInit+0x16c>)
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004264:	480d      	ldr	r0, [pc, #52]	; (800429c <HAL_ADC_MspInit+0x16c>)
 8004266:	f002 fd69 	bl	8006d3c <HAL_DMA_Init>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_ADC_MspInit+0x144>
    {
      Error_Handler();
 8004270:	f00e ff1e 	bl	80130b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <HAL_ADC_MspInit+0x16c>)
 8004278:	639a      	str	r2, [r3, #56]	; 0x38
 800427a:	4a08      	ldr	r2, [pc, #32]	; (800429c <HAL_ADC_MspInit+0x16c>)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004280:	bf00      	nop
 8004282:	3730      	adds	r7, #48	; 0x30
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40012000 	.word	0x40012000
 800428c:	40023800 	.word	0x40023800
 8004290:	40020800 	.word	0x40020800
 8004294:	40020000 	.word	0x40020000
 8004298:	40020400 	.word	0x40020400
 800429c:	20000270 	.word	0x20000270
 80042a0:	40026410 	.word	0x40026410

080042a4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a10      	ldr	r2, [pc, #64]	; (80042f4 <HAL_ADC_MspDeInit+0x50>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d119      	bne.n	80042ea <HAL_ADC_MspDeInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <HAL_ADC_MspDeInit+0x54>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	4a0f      	ldr	r2, [pc, #60]	; (80042f8 <HAL_ADC_MspDeInit+0x54>)
 80042bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c0:	6453      	str	r3, [r2, #68]	; 0x44
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(GPIOC, TS_Pin|RTS_F_Pin|AQS_Pin|LS_Pin
 80042c2:	213f      	movs	r1, #63	; 0x3f
 80042c4:	480d      	ldr	r0, [pc, #52]	; (80042fc <HAL_ADC_MspDeInit+0x58>)
 80042c6:	f003 fcd3 	bl	8007c70 <HAL_GPIO_DeInit>
                          |LTS_R_Pin|LTS_F_Pin);

    HAL_GPIO_DeInit(GPIOA, VS_Pin|RTS_R_Pin|LB_L_Pin|LB_R_Pin
 80042ca:	21fc      	movs	r1, #252	; 0xfc
 80042cc:	480c      	ldr	r0, [pc, #48]	; (8004300 <HAL_ADC_MspDeInit+0x5c>)
 80042ce:	f003 fccf 	bl	8007c70 <HAL_GPIO_DeInit>
                          |RPL_L_Pin|RPL_R_Pin);

    HAL_GPIO_DeInit(GPIOB, BL_R_Pin|BL_L_Pin);
 80042d2:	2103      	movs	r1, #3
 80042d4:	480b      	ldr	r0, [pc, #44]	; (8004304 <HAL_ADC_MspDeInit+0x60>)
 80042d6:	f003 fccb 	bl	8007c70 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	4618      	mov	r0, r3
 80042e0:	f002 fdda 	bl	8006e98 <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 80042e4:	2012      	movs	r0, #18
 80042e6:	f002 fc0e 	bl	8006b06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40012000 	.word	0x40012000
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40020800 	.word	0x40020800
 8004300:	40020000 	.word	0x40020000
 8004304:	40020400 	.word	0x40020400

08004308 <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0b      	ldr	r2, [pc, #44]	; (8004344 <HAL_CRC_MspInit+0x3c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10d      	bne.n	8004336 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_CRC_MspInit+0x40>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	4a09      	ldr	r2, [pc, #36]	; (8004348 <HAL_CRC_MspInit+0x40>)
 8004324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004328:	6313      	str	r3, [r2, #48]	; 0x30
 800432a:	4b07      	ldr	r3, [pc, #28]	; (8004348 <HAL_CRC_MspInit+0x40>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40023000 	.word	0x40023000
 8004348:	40023800 	.word	0x40023800

0800434c <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <HAL_CRC_MspDeInit+0x2c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d105      	bne.n	800436a <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 800435e:	4b07      	ldr	r3, [pc, #28]	; (800437c <HAL_CRC_MspDeInit+0x30>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4a06      	ldr	r2, [pc, #24]	; (800437c <HAL_CRC_MspDeInit+0x30>)
 8004364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004368:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40023000 	.word	0x40023000
 800437c:	40023800 	.word	0x40023800

08004380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <MX_DMA_Init+0x30>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <MX_DMA_Init+0x30>)
 8004390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004394:	6313      	str	r3, [r2, #48]	; 0x30
 8004396:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <MX_DMA_Init+0x30>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]

}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800

080043b4 <vApplicationTickHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
	Os_Counter++;
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <vApplicationTickHook+0x18>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	4a03      	ldr	r2, [pc, #12]	; (80043cc <vApplicationTickHook+0x18>)
 80043c0:	6013      	str	r3, [r2, #0]
}
 80043c2:	bf00      	nop
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	200002d8 	.word	0x200002d8

080043d0 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
   SystemManager_SetFault(STACK_OVERFLOW_RESET);
 80043da:	200c      	movs	r0, #12
 80043dc:	f00e fd2a 	bl	8012e34 <SystemManager_SetFault>
   SystemManager_PerformReset();
 80043e0:	f00e fd52 	bl	8012e88 <SystemManager_PerformReset>
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
	SystemManager_SetFault(MALLOC_FAILED_RESET);
 80043f0:	200d      	movs	r0, #13
 80043f2:	f00e fd1f 	bl	8012e34 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80043f6:	f00e fd47 	bl	8012e88 <SystemManager_PerformReset>
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 8004404:	4b5d      	ldr	r3, [pc, #372]	; (800457c <MX_FREERTOS_Init+0x17c>)
 8004406:	2200      	movs	r2, #0
 8004408:	2101      	movs	r1, #1
 800440a:	485d      	ldr	r0, [pc, #372]	; (8004580 <MX_FREERTOS_Init+0x180>)
 800440c:	f00a f972 	bl	800e6f4 <osTimerNew>
 8004410:	4603      	mov	r3, r0
 8004412:	4a5c      	ldr	r2, [pc, #368]	; (8004584 <MX_FREERTOS_Init+0x184>)
 8004414:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 8004416:	4b5c      	ldr	r3, [pc, #368]	; (8004588 <MX_FREERTOS_Init+0x188>)
 8004418:	2200      	movs	r2, #0
 800441a:	2101      	movs	r1, #1
 800441c:	485b      	ldr	r0, [pc, #364]	; (800458c <MX_FREERTOS_Init+0x18c>)
 800441e:	f00a f969 	bl	800e6f4 <osTimerNew>
 8004422:	4603      	mov	r3, r0
 8004424:	4a5a      	ldr	r2, [pc, #360]	; (8004590 <MX_FREERTOS_Init+0x190>)
 8004426:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);
 8004428:	4b5a      	ldr	r3, [pc, #360]	; (8004594 <MX_FREERTOS_Init+0x194>)
 800442a:	2200      	movs	r2, #0
 800442c:	2101      	movs	r1, #1
 800442e:	485a      	ldr	r0, [pc, #360]	; (8004598 <MX_FREERTOS_Init+0x198>)
 8004430:	f00a f960 	bl	800e6f4 <osTimerNew>
 8004434:	4603      	mov	r3, r0
 8004436:	4a59      	ldr	r2, [pc, #356]	; (800459c <MX_FREERTOS_Init+0x19c>)
 8004438:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);
 800443a:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <MX_FREERTOS_Init+0x1a0>)
 800443c:	2200      	movs	r2, #0
 800443e:	2101      	movs	r1, #1
 8004440:	4858      	ldr	r0, [pc, #352]	; (80045a4 <MX_FREERTOS_Init+0x1a4>)
 8004442:	f00a f957 	bl	800e6f4 <osTimerNew>
 8004446:	4603      	mov	r3, r0
 8004448:	4a57      	ldr	r2, [pc, #348]	; (80045a8 <MX_FREERTOS_Init+0x1a8>)
 800444a:	6013      	str	r3, [r2, #0]

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);
 800444c:	4b57      	ldr	r3, [pc, #348]	; (80045ac <MX_FREERTOS_Init+0x1ac>)
 800444e:	2200      	movs	r2, #0
 8004450:	2101      	movs	r1, #1
 8004452:	4857      	ldr	r0, [pc, #348]	; (80045b0 <MX_FREERTOS_Init+0x1b0>)
 8004454:	f00a f94e 	bl	800e6f4 <osTimerNew>
 8004458:	4603      	mov	r3, r0
 800445a:	4a56      	ldr	r2, [pc, #344]	; (80045b4 <MX_FREERTOS_Init+0x1b4>)
 800445c:	6013      	str	r3, [r2, #0]

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);
 800445e:	4b56      	ldr	r3, [pc, #344]	; (80045b8 <MX_FREERTOS_Init+0x1b8>)
 8004460:	2200      	movs	r2, #0
 8004462:	2101      	movs	r1, #1
 8004464:	4855      	ldr	r0, [pc, #340]	; (80045bc <MX_FREERTOS_Init+0x1bc>)
 8004466:	f00a f945 	bl	800e6f4 <osTimerNew>
 800446a:	4603      	mov	r3, r0
 800446c:	4a54      	ldr	r2, [pc, #336]	; (80045c0 <MX_FREERTOS_Init+0x1c0>)
 800446e:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmAlarm_Timer */
  Os_SecAlmAlarm_TimerHandle = osTimerNew(Os_SecAlmAlarm_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmAlarm_Timer_attributes);
 8004470:	4b54      	ldr	r3, [pc, #336]	; (80045c4 <MX_FREERTOS_Init+0x1c4>)
 8004472:	2200      	movs	r2, #0
 8004474:	2101      	movs	r1, #1
 8004476:	4854      	ldr	r0, [pc, #336]	; (80045c8 <MX_FREERTOS_Init+0x1c8>)
 8004478:	f00a f93c 	bl	800e6f4 <osTimerNew>
 800447c:	4603      	mov	r3, r0
 800447e:	4a53      	ldr	r2, [pc, #332]	; (80045cc <MX_FREERTOS_Init+0x1cc>)
 8004480:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcR_Buzzer_Timer */
  Os_PdcR_Buzzer_TimerHandle = osTimerNew(Os_PdcR_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcR_Buzzer_Timer_attributes);
 8004482:	4b53      	ldr	r3, [pc, #332]	; (80045d0 <MX_FREERTOS_Init+0x1d0>)
 8004484:	2200      	movs	r2, #0
 8004486:	2100      	movs	r1, #0
 8004488:	4852      	ldr	r0, [pc, #328]	; (80045d4 <MX_FREERTOS_Init+0x1d4>)
 800448a:	f00a f933 	bl	800e6f4 <osTimerNew>
 800448e:	4603      	mov	r3, r0
 8004490:	4a51      	ldr	r2, [pc, #324]	; (80045d8 <MX_FREERTOS_Init+0x1d8>)
 8004492:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcF_Buzzer_Timer */
  Os_PdcF_Buzzer_TimerHandle = osTimerNew(Os_PdcF_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcF_Buzzer_Timer_attributes);
 8004494:	4b51      	ldr	r3, [pc, #324]	; (80045dc <MX_FREERTOS_Init+0x1dc>)
 8004496:	2200      	movs	r2, #0
 8004498:	2100      	movs	r1, #0
 800449a:	4851      	ldr	r0, [pc, #324]	; (80045e0 <MX_FREERTOS_Init+0x1e0>)
 800449c:	f00a f92a 	bl	800e6f4 <osTimerNew>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4a50      	ldr	r2, [pc, #320]	; (80045e4 <MX_FREERTOS_Init+0x1e4>)
 80044a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 80044a6:	4a50      	ldr	r2, [pc, #320]	; (80045e8 <MX_FREERTOS_Init+0x1e8>)
 80044a8:	2100      	movs	r1, #0
 80044aa:	4850      	ldr	r0, [pc, #320]	; (80045ec <MX_FREERTOS_Init+0x1ec>)
 80044ac:	f00a f87a 	bl	800e5a4 <osThreadNew>
 80044b0:	4603      	mov	r3, r0
 80044b2:	4a4f      	ldr	r2, [pc, #316]	; (80045f0 <MX_FREERTOS_Init+0x1f0>)
 80044b4:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Main */
  ASIL_APPL_MainHandle = osThreadNew(OS_TASK_ASIL_APPL_Main, NULL, &ASIL_APPL_Main_attributes);
 80044b6:	4a4f      	ldr	r2, [pc, #316]	; (80045f4 <MX_FREERTOS_Init+0x1f4>)
 80044b8:	2100      	movs	r1, #0
 80044ba:	484f      	ldr	r0, [pc, #316]	; (80045f8 <MX_FREERTOS_Init+0x1f8>)
 80044bc:	f00a f872 	bl	800e5a4 <osThreadNew>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4a4e      	ldr	r2, [pc, #312]	; (80045fc <MX_FREERTOS_Init+0x1fc>)
 80044c4:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_PostMain */
  ASIL_APPL_PostMainHandle = osThreadNew(OS_TASK_ASIL_APPL_PostMain, NULL, &ASIL_APPL_PostMain_attributes);
 80044c6:	4a4e      	ldr	r2, [pc, #312]	; (8004600 <MX_FREERTOS_Init+0x200>)
 80044c8:	2100      	movs	r1, #0
 80044ca:	484e      	ldr	r0, [pc, #312]	; (8004604 <MX_FREERTOS_Init+0x204>)
 80044cc:	f00a f86a 	bl	800e5a4 <osThreadNew>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4a4d      	ldr	r2, [pc, #308]	; (8004608 <MX_FREERTOS_Init+0x208>)
 80044d4:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PreMain */
  QM_APPL_PreMainHandle = osThreadNew(OS_TASK_QM_APPL_PreMain, NULL, &QM_APPL_PreMain_attributes);
 80044d6:	4a4d      	ldr	r2, [pc, #308]	; (800460c <MX_FREERTOS_Init+0x20c>)
 80044d8:	2100      	movs	r1, #0
 80044da:	484d      	ldr	r0, [pc, #308]	; (8004610 <MX_FREERTOS_Init+0x210>)
 80044dc:	f00a f862 	bl	800e5a4 <osThreadNew>
 80044e0:	4603      	mov	r3, r0
 80044e2:	4a4c      	ldr	r2, [pc, #304]	; (8004614 <MX_FREERTOS_Init+0x214>)
 80044e4:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Main */
  QM_APPL_MainHandle = osThreadNew(OS_TASK_QM_APPL_Main, NULL, &QM_APPL_Main_attributes);
 80044e6:	4a4c      	ldr	r2, [pc, #304]	; (8004618 <MX_FREERTOS_Init+0x218>)
 80044e8:	2100      	movs	r1, #0
 80044ea:	484c      	ldr	r0, [pc, #304]	; (800461c <MX_FREERTOS_Init+0x21c>)
 80044ec:	f00a f85a 	bl	800e5a4 <osThreadNew>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4a4b      	ldr	r2, [pc, #300]	; (8004620 <MX_FREERTOS_Init+0x220>)
 80044f4:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PostMain */
  QM_APPL_PostMainHandle = osThreadNew(OS_TASK_QM_APPL_PostMain, NULL, &QM_APPL_PostMain_attributes);
 80044f6:	4a4b      	ldr	r2, [pc, #300]	; (8004624 <MX_FREERTOS_Init+0x224>)
 80044f8:	2100      	movs	r1, #0
 80044fa:	484b      	ldr	r0, [pc, #300]	; (8004628 <MX_FREERTOS_Init+0x228>)
 80044fc:	f00a f852 	bl	800e5a4 <osThreadNew>
 8004500:	4603      	mov	r3, r0
 8004502:	4a4a      	ldr	r2, [pc, #296]	; (800462c <MX_FREERTOS_Init+0x22c>)
 8004504:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PreMain */
  ASIL_BSW_PreMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PreMain, NULL, &ASIL_BSW_PreMain_attributes);
 8004506:	4a4a      	ldr	r2, [pc, #296]	; (8004630 <MX_FREERTOS_Init+0x230>)
 8004508:	2100      	movs	r1, #0
 800450a:	484a      	ldr	r0, [pc, #296]	; (8004634 <MX_FREERTOS_Init+0x234>)
 800450c:	f00a f84a 	bl	800e5a4 <osThreadNew>
 8004510:	4603      	mov	r3, r0
 8004512:	4a49      	ldr	r2, [pc, #292]	; (8004638 <MX_FREERTOS_Init+0x238>)
 8004514:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_Main */
  ASIL_BSW_MainHandle = osThreadNew(OS_TASK_ASIL_BSW_Main, NULL, &ASIL_BSW_Main_attributes);
 8004516:	4a49      	ldr	r2, [pc, #292]	; (800463c <MX_FREERTOS_Init+0x23c>)
 8004518:	2100      	movs	r1, #0
 800451a:	4849      	ldr	r0, [pc, #292]	; (8004640 <MX_FREERTOS_Init+0x240>)
 800451c:	f00a f842 	bl	800e5a4 <osThreadNew>
 8004520:	4603      	mov	r3, r0
 8004522:	4a48      	ldr	r2, [pc, #288]	; (8004644 <MX_FREERTOS_Init+0x244>)
 8004524:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PostMain */
  ASIL_BSW_PostMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PostMain, NULL, &ASIL_BSW_PostMain_attributes);
 8004526:	4a48      	ldr	r2, [pc, #288]	; (8004648 <MX_FREERTOS_Init+0x248>)
 8004528:	2100      	movs	r1, #0
 800452a:	4848      	ldr	r0, [pc, #288]	; (800464c <MX_FREERTOS_Init+0x24c>)
 800452c:	f00a f83a 	bl	800e5a4 <osThreadNew>
 8004530:	4603      	mov	r3, r0
 8004532:	4a47      	ldr	r2, [pc, #284]	; (8004650 <MX_FREERTOS_Init+0x250>)
 8004534:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PreMain */
  QM_BSW_PreMainHandle = osThreadNew(OS_TASK_QM_BSW_PreMain, NULL, &QM_BSW_PreMain_attributes);
 8004536:	4a47      	ldr	r2, [pc, #284]	; (8004654 <MX_FREERTOS_Init+0x254>)
 8004538:	2100      	movs	r1, #0
 800453a:	4847      	ldr	r0, [pc, #284]	; (8004658 <MX_FREERTOS_Init+0x258>)
 800453c:	f00a f832 	bl	800e5a4 <osThreadNew>
 8004540:	4603      	mov	r3, r0
 8004542:	4a46      	ldr	r2, [pc, #280]	; (800465c <MX_FREERTOS_Init+0x25c>)
 8004544:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_Main */
  QM_BSW_MainHandle = osThreadNew(OS_TASK_QM_BSW_Main, NULL, &QM_BSW_Main_attributes);
 8004546:	4a46      	ldr	r2, [pc, #280]	; (8004660 <MX_FREERTOS_Init+0x260>)
 8004548:	2100      	movs	r1, #0
 800454a:	4846      	ldr	r0, [pc, #280]	; (8004664 <MX_FREERTOS_Init+0x264>)
 800454c:	f00a f82a 	bl	800e5a4 <osThreadNew>
 8004550:	4603      	mov	r3, r0
 8004552:	4a45      	ldr	r2, [pc, #276]	; (8004668 <MX_FREERTOS_Init+0x268>)
 8004554:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PostMain */
  QM_BSW_PostMainHandle = osThreadNew(OS_TASK_QM_BSW_PostMain, NULL, &QM_BSW_PostMain_attributes);
 8004556:	4a45      	ldr	r2, [pc, #276]	; (800466c <MX_FREERTOS_Init+0x26c>)
 8004558:	2100      	movs	r1, #0
 800455a:	4845      	ldr	r0, [pc, #276]	; (8004670 <MX_FREERTOS_Init+0x270>)
 800455c:	f00a f822 	bl	800e5a4 <osThreadNew>
 8004560:	4603      	mov	r3, r0
 8004562:	4a44      	ldr	r2, [pc, #272]	; (8004674 <MX_FREERTOS_Init+0x274>)
 8004564:	6013      	str	r3, [r2, #0]

  /* creation of I2C_ISR */
  I2C_ISRHandle = osThreadNew(OS_TASK_I2C_ISR, NULL, &I2C_ISR_attributes);
 8004566:	4a44      	ldr	r2, [pc, #272]	; (8004678 <MX_FREERTOS_Init+0x278>)
 8004568:	2100      	movs	r1, #0
 800456a:	4844      	ldr	r0, [pc, #272]	; (800467c <MX_FREERTOS_Init+0x27c>)
 800456c:	f00a f81a 	bl	800e5a4 <osThreadNew>
 8004570:	4603      	mov	r3, r0
 8004572:	4a43      	ldr	r2, [pc, #268]	; (8004680 <MX_FREERTOS_Init+0x280>)
 8004574:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	08014208 	.word	0x08014208
 8004580:	0800481d 	.word	0x0800481d
 8004584:	20000350 	.word	0x20000350
 8004588:	08014218 	.word	0x08014218
 800458c:	08004835 	.word	0x08004835
 8004590:	20000354 	.word	0x20000354
 8004594:	08014228 	.word	0x08014228
 8004598:	0800489d 	.word	0x0800489d
 800459c:	20000358 	.word	0x20000358
 80045a0:	08014238 	.word	0x08014238
 80045a4:	080048c5 	.word	0x080048c5
 80045a8:	2000035c 	.word	0x2000035c
 80045ac:	08014248 	.word	0x08014248
 80045b0:	080048ed 	.word	0x080048ed
 80045b4:	20000360 	.word	0x20000360
 80045b8:	08014258 	.word	0x08014258
 80045bc:	08004915 	.word	0x08004915
 80045c0:	20000364 	.word	0x20000364
 80045c4:	08014268 	.word	0x08014268
 80045c8:	08004985 	.word	0x08004985
 80045cc:	20000368 	.word	0x20000368
 80045d0:	08014278 	.word	0x08014278
 80045d4:	080049ad 	.word	0x080049ad
 80045d8:	2000036c 	.word	0x2000036c
 80045dc:	08014288 	.word	0x08014288
 80045e0:	080049c9 	.word	0x080049c9
 80045e4:	20000370 	.word	0x20000370
 80045e8:	08014034 	.word	0x08014034
 80045ec:	08004685 	.word	0x08004685
 80045f0:	2000031c 	.word	0x2000031c
 80045f4:	08014058 	.word	0x08014058
 80045f8:	08004699 	.word	0x08004699
 80045fc:	20000320 	.word	0x20000320
 8004600:	0801407c 	.word	0x0801407c
 8004604:	080046c1 	.word	0x080046c1
 8004608:	20000324 	.word	0x20000324
 800460c:	080140a0 	.word	0x080140a0
 8004610:	080046dd 	.word	0x080046dd
 8004614:	20000328 	.word	0x20000328
 8004618:	080140c4 	.word	0x080140c4
 800461c:	080046f9 	.word	0x080046f9
 8004620:	2000032c 	.word	0x2000032c
 8004624:	080140e8 	.word	0x080140e8
 8004628:	08004715 	.word	0x08004715
 800462c:	20000330 	.word	0x20000330
 8004630:	0801410c 	.word	0x0801410c
 8004634:	08004739 	.word	0x08004739
 8004638:	20000334 	.word	0x20000334
 800463c:	08014130 	.word	0x08014130
 8004640:	08004755 	.word	0x08004755
 8004644:	20000338 	.word	0x20000338
 8004648:	08014154 	.word	0x08014154
 800464c:	08004775 	.word	0x08004775
 8004650:	2000033c 	.word	0x2000033c
 8004654:	08014178 	.word	0x08014178
 8004658:	08004791 	.word	0x08004791
 800465c:	20000340 	.word	0x20000340
 8004660:	0801419c 	.word	0x0801419c
 8004664:	080047b5 	.word	0x080047b5
 8004668:	20000344 	.word	0x20000344
 800466c:	080141c0 	.word	0x080141c0
 8004670:	080047d1 	.word	0x080047d1
 8004674:	20000348 	.word	0x20000348
 8004678:	080141e4 	.word	0x080141e4
 800467c:	080047ed 	.word	0x080047ed
 8004680:	2000034c 	.word	0x2000034c

08004684 <OS_TASK_OS_INIT>:

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */
	for(;;)
	{
		EcuM_DriverInit();
 800468c:	f00e fa48 	bl	8012b20 <EcuM_DriverInit>
		vTaskSuspend(NULL);
 8004690:	2000      	movs	r0, #0
 8004692:	f00b fc01 	bl	800fe98 <vTaskSuspend>
		EcuM_DriverInit();
 8004696:	e7f9      	b.n	800468c <OS_TASK_OS_INIT+0x8>

08004698 <OS_TASK_ASIL_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Main */
/* USER CODE END Header_OS_TASK_ASIL_APPL_Main */
void OS_TASK_ASIL_APPL_Main(void *argument)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Btc_MainFunction();
 80046a0:	f00d fb9e 	bl	8011de0 <Rte_Runnable_Btc_MainFunction>
		Rte_Runnable_CenLoc_MainFunction();
 80046a4:	f00d fba2 	bl	8011dec <Rte_Runnable_CenLoc_MainFunction>
		Rte_Runnable_ExtLights_MainFunction();
 80046a8:	f00d fba6 	bl	8011df8 <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_IntLights_MainFunction();
 80046ac:	f00d fbaa 	bl	8011e04 <Rte_Runnable_IntLights_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_Main, pdMS_TO_TICKS(5));
 80046b0:	2105      	movs	r1, #5
 80046b2:	4802      	ldr	r0, [pc, #8]	; (80046bc <OS_TASK_ASIL_APPL_Main+0x24>)
 80046b4:	f00b fb72 	bl	800fd9c <vTaskDelayUntil>
		Rte_Runnable_Btc_MainFunction();
 80046b8:	e7f2      	b.n	80046a0 <OS_TASK_ASIL_APPL_Main+0x8>
 80046ba:	bf00      	nop
 80046bc:	200002f0 	.word	0x200002f0

080046c0 <OS_TASK_ASIL_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_APPL_PostMain */
void OS_TASK_ASIL_APPL_PostMain(void *argument)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_PostMain */
	for(;;)
	{
		Rte_Runnable_DiagCtrl_MainFunction();
 80046c8:	f00d fbf3 	bl	8011eb2 <Rte_Runnable_DiagCtrl_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_PostMain, pdMS_TO_TICKS(1000));
 80046cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046d0:	4801      	ldr	r0, [pc, #4]	; (80046d8 <OS_TASK_ASIL_APPL_PostMain+0x18>)
 80046d2:	f00b fb63 	bl	800fd9c <vTaskDelayUntil>
		Rte_Runnable_DiagCtrl_MainFunction();
 80046d6:	e7f7      	b.n	80046c8 <OS_TASK_ASIL_APPL_PostMain+0x8>
 80046d8:	200002f4 	.word	0x200002f4

080046dc <OS_TASK_QM_APPL_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PreMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PreMain */
void OS_TASK_QM_APPL_PreMain(void *argument)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PreMain */
	for(;;)
	{
		Rte_Runnable_SecAlm_MainFunction();
 80046e4:	f00d fb94 	bl	8011e10 <Rte_Runnable_SecAlm_MainFunction>
		vTaskDelayUntil(&QM_APPL_PreMain, pdMS_TO_TICKS(5));
 80046e8:	2105      	movs	r1, #5
 80046ea:	4802      	ldr	r0, [pc, #8]	; (80046f4 <OS_TASK_QM_APPL_PreMain+0x18>)
 80046ec:	f00b fb56 	bl	800fd9c <vTaskDelayUntil>
		Rte_Runnable_SecAlm_MainFunction();
 80046f0:	e7f8      	b.n	80046e4 <OS_TASK_QM_APPL_PreMain+0x8>
 80046f2:	bf00      	nop
 80046f4:	200002f8 	.word	0x200002f8

080046f8 <OS_TASK_QM_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Main */
/* USER CODE END Header_OS_TASK_QM_APPL_Main */
void OS_TASK_QM_APPL_Main(void *argument)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Pdc_MainFunction();
 8004700:	f00d fbe3 	bl	8011eca <Rte_Runnable_Pdc_MainFunction>
		vTaskDelayUntil(&QM_APPL_Main, pdMS_TO_TICKS(100));
 8004704:	2164      	movs	r1, #100	; 0x64
 8004706:	4802      	ldr	r0, [pc, #8]	; (8004710 <OS_TASK_QM_APPL_Main+0x18>)
 8004708:	f00b fb48 	bl	800fd9c <vTaskDelayUntil>
		Rte_Runnable_Pdc_MainFunction();
 800470c:	e7f8      	b.n	8004700 <OS_TASK_QM_APPL_Main+0x8>
 800470e:	bf00      	nop
 8004710:	200002fc 	.word	0x200002fc

08004714 <OS_TASK_QM_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PostMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PostMain */
void OS_TASK_QM_APPL_PostMain(void *argument)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PostMain */
	for(;;)
	{
		vTaskResume(I2C_ISRHandle);
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <OS_TASK_QM_APPL_PostMain+0x1c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f00b fc61 	bl	800ffe8 <vTaskResume>
		vTaskDelayUntil(&QM_APPL_PostMain, pdMS_TO_TICKS(250));
 8004726:	21fa      	movs	r1, #250	; 0xfa
 8004728:	4802      	ldr	r0, [pc, #8]	; (8004734 <OS_TASK_QM_APPL_PostMain+0x20>)
 800472a:	f00b fb37 	bl	800fd9c <vTaskDelayUntil>
		vTaskResume(I2C_ISRHandle);
 800472e:	e7f5      	b.n	800471c <OS_TASK_QM_APPL_PostMain+0x8>
 8004730:	2000034c 	.word	0x2000034c
 8004734:	20000300 	.word	0x20000300

08004738 <OS_TASK_ASIL_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PreMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PreMain */
void OS_TASK_ASIL_BSW_PreMain(void *argument)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Wdg_MainFunction();
 8004740:	f00d f9b4 	bl	8011aac <Rte_Runnable_Wdg_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PreMain, pdMS_TO_TICKS(5));
 8004744:	2105      	movs	r1, #5
 8004746:	4802      	ldr	r0, [pc, #8]	; (8004750 <OS_TASK_ASIL_BSW_PreMain+0x18>)
 8004748:	f00b fb28 	bl	800fd9c <vTaskDelayUntil>
		Rte_Runnable_Wdg_MainFunction();
 800474c:	e7f8      	b.n	8004740 <OS_TASK_ASIL_BSW_PreMain+0x8>
 800474e:	bf00      	nop
 8004750:	20000304 	.word	0x20000304

08004754 <OS_TASK_ASIL_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_Main */
/* USER CODE END Header_OS_TASK_ASIL_BSW_Main */
void OS_TASK_ASIL_BSW_Main(void *argument)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_Main */
	for(;;)
	{
		Rte_Runnable_Uart_MainFunction();
 800475c:	f00d f9b8 	bl	8011ad0 <Rte_Runnable_Uart_MainFunction>
		Rte_Runnable_Crc_MainFunction();
 8004760:	f00d f99e 	bl	8011aa0 <Rte_Runnable_Crc_MainFunction>
#if(CAN_SPI_COMMUNICATION_ENABLE == STD_ON)
		Rte_Runnable_Spi_MainFunction();
		Rte_Runnable_Can_MainFunction();
#endif
		vTaskDelayUntil(&ASIL_BSW_Main, pdMS_TO_TICKS(5));
 8004764:	2105      	movs	r1, #5
 8004766:	4802      	ldr	r0, [pc, #8]	; (8004770 <OS_TASK_ASIL_BSW_Main+0x1c>)
 8004768:	f00b fb18 	bl	800fd9c <vTaskDelayUntil>
		Rte_Runnable_Uart_MainFunction();
 800476c:	e7f6      	b.n	800475c <OS_TASK_ASIL_BSW_Main+0x8>
 800476e:	bf00      	nop
 8004770:	20000308 	.word	0x20000308

08004774 <OS_TASK_ASIL_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PostMain */
void OS_TASK_ASIL_BSW_PostMain(void *argument)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PostMain */
	for(;;)
	{
		Rte_Runnable_Tim_MainFunction();
 800477c:	f00d f9a2 	bl	8011ac4 <Rte_Runnable_Tim_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PostMain, pdMS_TO_TICKS(5));
 8004780:	2105      	movs	r1, #5
 8004782:	4802      	ldr	r0, [pc, #8]	; (800478c <OS_TASK_ASIL_BSW_PostMain+0x18>)
 8004784:	f00b fb0a 	bl	800fd9c <vTaskDelayUntil>
		Rte_Runnable_Tim_MainFunction();
 8004788:	e7f8      	b.n	800477c <OS_TASK_ASIL_BSW_PostMain+0x8>
 800478a:	bf00      	nop
 800478c:	2000030c 	.word	0x2000030c

08004790 <OS_TASK_QM_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PreMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PreMain */
void OS_TASK_QM_BSW_PreMain(void *argument)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_EcuM_MainFunction();
 8004798:	f00d f976 	bl	8011a88 <Rte_Runnable_EcuM_MainFunction>
		Rte_Runnable_SystemManager_MainFunction();
 800479c:	f00d f97a 	bl	8011a94 <Rte_Runnable_SystemManager_MainFunction>
		Rte_Runnable_Adc_MainFunction();
 80047a0:	f00d f98a 	bl	8011ab8 <Rte_Runnable_Adc_MainFunction>
		vTaskDelayUntil(&QM_BSW_PreMain, pdMS_TO_TICKS(5));
 80047a4:	2105      	movs	r1, #5
 80047a6:	4802      	ldr	r0, [pc, #8]	; (80047b0 <OS_TASK_QM_BSW_PreMain+0x20>)
 80047a8:	f00b faf8 	bl	800fd9c <vTaskDelayUntil>
		Rte_Runnable_EcuM_MainFunction();
 80047ac:	e7f4      	b.n	8004798 <OS_TASK_QM_BSW_PreMain+0x8>
 80047ae:	bf00      	nop
 80047b0:	20000310 	.word	0x20000310

080047b4 <OS_TASK_QM_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_Main */
/* USER CODE END Header_OS_TASK_QM_BSW_Main */
void OS_TASK_QM_BSW_Main(void *argument)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_Main */
	for(;;)
	{
		Rte_Runnable_I2c_MainFunction();
 80047bc:	f00d fb8b 	bl	8011ed6 <Rte_Runnable_I2c_MainFunction>
		vTaskDelayUntil(&QM_BSW_Main, pdMS_TO_TICKS(5));
 80047c0:	2105      	movs	r1, #5
 80047c2:	4802      	ldr	r0, [pc, #8]	; (80047cc <OS_TASK_QM_BSW_Main+0x18>)
 80047c4:	f00b faea 	bl	800fd9c <vTaskDelayUntil>
		Rte_Runnable_I2c_MainFunction();
 80047c8:	e7f8      	b.n	80047bc <OS_TASK_QM_BSW_Main+0x8>
 80047ca:	bf00      	nop
 80047cc:	20000314 	.word	0x20000314

080047d0 <OS_TASK_QM_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PostMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PostMain */
void OS_TASK_QM_BSW_PostMain(void *argument)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PostMain */
  for(;;)
  {
	  Rte_Runnable_Dem_MainFunction();
 80047d8:	f00d fb83 	bl	8011ee2 <Rte_Runnable_Dem_MainFunction>
	  vTaskDelayUntil(&QM_BSW_PostMain, pdMS_TO_TICKS(1000));
 80047dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047e0:	4801      	ldr	r0, [pc, #4]	; (80047e8 <OS_TASK_QM_BSW_PostMain+0x18>)
 80047e2:	f00b fadb 	bl	800fd9c <vTaskDelayUntil>
	  Rte_Runnable_Dem_MainFunction();
 80047e6:	e7f7      	b.n	80047d8 <OS_TASK_QM_BSW_PostMain+0x8>
 80047e8:	20000318 	.word	0x20000318

080047ec <OS_TASK_I2C_ISR>:
}

/* USER CODE BEGIN Header_OS_TASK_I2C_ISR */
/* USER CODE END Header_OS_TASK_I2C_ISR */
void OS_TASK_I2C_ISR(void *argument)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_I2C_ISR */
	for(;;)
	{
		if(I2c_Lcd_Init_Flag == STD_LOW)
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <OS_TASK_I2C_ISR+0x2c>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <OS_TASK_I2C_ISR+0x16>
		{
			I2cLcd_Init();
 80047fc:	f7ff f996 	bl	8003b2c <I2cLcd_Init>
 8004800:	e005      	b.n	800480e <OS_TASK_I2C_ISR+0x22>
		}
		else if(I2c_Lcd_Init_Flag == STD_HIGH)
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <OS_TASK_I2C_ISR+0x2c>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <OS_TASK_I2C_ISR+0x22>
		{
			Rte_Runnable_Hvac_MainFunction();
 800480a:	f00d fb58 	bl	8011ebe <Rte_Runnable_Hvac_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		vTaskSuspend(NULL);
 800480e:	2000      	movs	r0, #0
 8004810:	f00b fb42 	bl	800fe98 <vTaskSuspend>
		if(I2c_Lcd_Init_Flag == STD_LOW)
 8004814:	e7ee      	b.n	80047f4 <OS_TASK_I2C_ISR+0x8>
 8004816:	bf00      	nop
 8004818:	200002ed 	.word	0x200002ed

0800481c <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_I2C_ISR */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */
	/* Reset the security alarm counter trigger. */
	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter((uint16*)0);
 8004824:	2000      	movs	r0, #0
 8004826:	f00d facb 	bl	8011dc0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>
  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */
	/* If the counter variable for the lock unlock turn signals sequence is less than or equal to 6
	 * Then if there is either a lock or an unlock sequence increase the counter to process the states
	 * in the application. */
	if(Os_LockUnlockSequence_Counter <= 6
 800483c:	4b14      	ldr	r3, [pc, #80]	; (8004890 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b06      	cmp	r3, #6
 8004842:	d819      	bhi.n	8004878 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8004844:	4b13      	ldr	r3, [pc, #76]	; (8004894 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d103      	bne.n	8004854 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d007      	beq.n	8004864 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10d      	bne.n	8004878 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{
		Os_LockUnlockSequence_Counter = Os_LockUnlockSequence_Counter + 1;
 8004864:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	b2da      	uxtb	r2, r3
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 800486e:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8004870:	4807      	ldr	r0, [pc, #28]	; (8004890 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004872:	f00d f889 	bl	8011988 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
 8004876:	e006      	b.n	8004886 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>
	}
	else
	{
		/* Update the counter with out of bounds value to prevent unexpected triggering. */
		Os_LockUnlockSequence_Counter = 7;
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 800487a:	2207      	movs	r2, #7
 800487c:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 800487e:	4804      	ldr	r0, [pc, #16]	; (8004890 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004880:	f00d f882 	bl	8011988 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	200002dc 	.word	0x200002dc
 8004894:	20000120 	.word	0x20000120
 8004898:	20000128 	.word	0x20000128

0800489c <Os_SecAlmLed_TurnOnCyclic_Timer_Callback>:

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
	/* Increase the counter variable used in the timer for the alarm LED
	 * that expires every 3,75 seconds. */
	Os_TurnOnCyclic_Counter = Os_TurnOnCyclic_Counter + 1;
 80048a4:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 80048ae:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(&Os_TurnOnCyclic_Counter);
 80048b0:	4803      	ldr	r0, [pc, #12]	; (80048c0 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 80048b2:	f00d f859 	bl	8011968 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>
  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	200002dd 	.word	0x200002dd

080048c4 <Os_SecAlmLedTurnOn_Timer_Callback>:

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */
	/* Increase the counter variable used in the turning on the alarm LED for 0,25 seconds. */
	Os_TurnOnLed_Counter = Os_TurnOnLed_Counter + 1;
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 80048d6:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(&Os_TurnOnLed_Counter);
 80048d8:	4803      	ldr	r0, [pc, #12]	; (80048e8 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 80048da:	f00d f835 	bl	8011948 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>
  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200002de 	.word	0x200002de

080048ec <Os_FollowMeHome_Timer_Callback>:

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */
	/* Increase the counter variable used in the follow me home concept when the timer
	 * period expires for the lights to go off. */
	Os_FollowMeHome_Counter = Os_FollowMeHome_Counter + 1;
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <Os_FollowMeHome_Timer_Callback+0x24>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	3301      	adds	r3, #1
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <Os_FollowMeHome_Timer_Callback+0x24>)
 80048fe:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(&Os_FollowMeHome_Counter);
 8004900:	4803      	ldr	r0, [pc, #12]	; (8004910 <Os_FollowMeHome_Timer_Callback+0x24>)
 8004902:	f00d f811 	bl	8011928 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200002df 	.word	0x200002df

08004914 <Os_TurnSignals_Timer_Callback>:

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */
	/* Increase the respective counter on request from the specific light in turn signals. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 800491c:	4b13      	ldr	r3, [pc, #76]	; (800496c <Os_TurnSignals_Timer_Callback+0x58>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d107      	bne.n	8004934 <Os_TurnSignals_Timer_Callback+0x20>
	{
		Os_Lts_Counter = Os_Lts_Counter + 1;
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <Os_TurnSignals_Timer_Callback+0x5c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3301      	adds	r3, #1
 800492a:	4a11      	ldr	r2, [pc, #68]	; (8004970 <Os_TurnSignals_Timer_Callback+0x5c>)
 800492c:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Os_Lts_Counter);
 800492e:	4810      	ldr	r0, [pc, #64]	; (8004970 <Os_TurnSignals_Timer_Callback+0x5c>)
 8004930:	f00d fa06 	bl	8011d40 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8004934:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <Os_TurnSignals_Timer_Callback+0x60>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d107      	bne.n	800494c <Os_TurnSignals_Timer_Callback+0x38>
	{
		Os_Rts_Counter = Os_Rts_Counter + 1;
 800493c:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <Os_TurnSignals_Timer_Callback+0x64>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3301      	adds	r3, #1
 8004942:	4a0d      	ldr	r2, [pc, #52]	; (8004978 <Os_TurnSignals_Timer_Callback+0x64>)
 8004944:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Os_Rts_Counter);
 8004946:	480c      	ldr	r0, [pc, #48]	; (8004978 <Os_TurnSignals_Timer_Callback+0x64>)
 8004948:	f00d f9ea 	bl	8011d20 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <Os_TurnSignals_Timer_Callback+0x68>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <Os_TurnSignals_Timer_Callback+0x50>
	{
		Os_HL_Counter = Os_HL_Counter + 1;
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <Os_TurnSignals_Timer_Callback+0x6c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	4a09      	ldr	r2, [pc, #36]	; (8004980 <Os_TurnSignals_Timer_Callback+0x6c>)
 800495c:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Os_HL_Counter);
 800495e:	4808      	ldr	r0, [pc, #32]	; (8004980 <Os_TurnSignals_Timer_Callback+0x6c>)
 8004960:	f00d f9fe 	bl	8011d60 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
	else
	{
		/* do nothing */
	}
  /* USER CODE END Os_TurnSignals_Timer_Callback */
}
 8004964:	bf00      	nop
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000152 	.word	0x20000152
 8004970:	200002e0 	.word	0x200002e0
 8004974:	20000153 	.word	0x20000153
 8004978:	200002e4 	.word	0x200002e4
 800497c:	20000156 	.word	0x20000156
 8004980:	200002e8 	.word	0x200002e8

08004984 <Os_SecAlmAlarm_Timer_Callback>:

/* Os_SecAlmAlarm_Timer_Callback function */
void Os_SecAlmAlarm_Timer_Callback(void *argument)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmAlarm_Timer_Callback */
	/* Increase the security alarm trigger counter when the alarm is on. */
	Os_Alarm_Counter = Os_Alarm_Counter + 1;
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	3301      	adds	r3, #1
 8004992:	b2da      	uxtb	r2, r3
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8004996:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&Os_Alarm_Counter);
 8004998:	4803      	ldr	r0, [pc, #12]	; (80049a8 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 800499a:	f00d fa01 	bl	8011da0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
  /* USER CODE END Os_SecAlmAlarm_Timer_Callback */
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	200002ec 	.word	0x200002ec

080049ac <Os_PdcR_Buzzer_Timer_Callback>:

/* Os_PdcR_Buzzer_Timer_Callback function */
void Os_PdcR_Buzzer_Timer_Callback(void *argument)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcR_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN);
 80049b4:	2120      	movs	r1, #32
 80049b6:	4803      	ldr	r0, [pc, #12]	; (80049c4 <Os_PdcR_Buzzer_Timer_Callback+0x18>)
 80049b8:	f003 fa57 	bl	8007e6a <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcR_Buzzer_Timer_Callback */
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40020400 	.word	0x40020400

080049c8 <Os_PdcF_Buzzer_Timer_Callback>:

/* Os_PdcF_Buzzer_Timer_Callback function */
void Os_PdcF_Buzzer_Timer_Callback(void *argument)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcF_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN);
 80049d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049d4:	4803      	ldr	r0, [pc, #12]	; (80049e4 <Os_PdcF_Buzzer_Timer_Callback+0x1c>)
 80049d6:	f003 fa48 	bl	8007e6a <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcF_Buzzer_Timer_Callback */
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40020800 	.word	0x40020800

080049e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ee:	f107 0314 	add.w	r3, r7, #20
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	605a      	str	r2, [r3, #4]
 80049f8:	609a      	str	r2, [r3, #8]
 80049fa:	60da      	str	r2, [r3, #12]
 80049fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	4b4d      	ldr	r3, [pc, #308]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	4a4c      	ldr	r2, [pc, #304]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a08:	f043 0304 	orr.w	r3, r3, #4
 8004a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0e:	4b4a      	ldr	r3, [pc, #296]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	4b46      	ldr	r3, [pc, #280]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	4a45      	ldr	r2, [pc, #276]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a28:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2a:	4b43      	ldr	r3, [pc, #268]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	4b3f      	ldr	r3, [pc, #252]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	4a3e      	ldr	r2, [pc, #248]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	6313      	str	r3, [r2, #48]	; 0x30
 8004a46:	4b3c      	ldr	r3, [pc, #240]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	4b38      	ldr	r3, [pc, #224]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	4a37      	ldr	r2, [pc, #220]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a5c:	f043 0302 	orr.w	r3, r3, #2
 8004a60:	6313      	str	r3, [r2, #48]	; 0x30
 8004a62:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	4b31      	ldr	r3, [pc, #196]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	4a30      	ldr	r2, [pc, #192]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a78:	f043 0308 	orr.w	r3, r3, #8
 8004a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a7e:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <MX_GPIO_Init+0x150>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8004a90:	482a      	ldr	r0, [pc, #168]	; (8004b3c <MX_GPIO_Init+0x154>)
 8004a92:	f003 f9d1 	bl	8007e38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin|PDCR_TRIG_Pin|AL_Pin
 8004a96:	2200      	movs	r2, #0
 8004a98:	f24f 0124 	movw	r1, #61476	; 0xf024
 8004a9c:	4828      	ldr	r0, [pc, #160]	; (8004b40 <MX_GPIO_Init+0x158>)
 8004a9e:	f003 f9cb 	bl	8007e38 <HAL_GPIO_WritePin>
                          |RL_Pin|PDCR_BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PDCF_TRIG_Pin|HB_Pin, GPIO_PIN_RESET);
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004aa8:	4826      	ldr	r0, [pc, #152]	; (8004b44 <MX_GPIO_Init+0x15c>)
 8004aaa:	f003 f9c5 	bl	8007e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2104      	movs	r1, #4
 8004ab2:	4825      	ldr	r0, [pc, #148]	; (8004b48 <MX_GPIO_Init+0x160>)
 8004ab4:	f003 f9c0 	bl	8007e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 8004ab8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004abc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aca:	f107 0314 	add.w	r3, r7, #20
 8004ace:	4619      	mov	r1, r3
 8004ad0:	481a      	ldr	r0, [pc, #104]	; (8004b3c <MX_GPIO_Init+0x154>)
 8004ad2:	f002 ff49 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin|PDCR_TRIG_Pin|AL_Pin
 8004ad6:	f24f 0324 	movw	r3, #61476	; 0xf024
 8004ada:	617b      	str	r3, [r7, #20]
                          |RL_Pin|PDCR_BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004adc:	2301      	movs	r3, #1
 8004ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae8:	f107 0314 	add.w	r3, r7, #20
 8004aec:	4619      	mov	r1, r3
 8004aee:	4814      	ldr	r0, [pc, #80]	; (8004b40 <MX_GPIO_Init+0x158>)
 8004af0:	f002 ff3a 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PDCF_TRIG_Pin|HB_Pin;
 8004af4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004afa:	2301      	movs	r3, #1
 8004afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b02:	2300      	movs	r3, #0
 8004b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b06:	f107 0314 	add.w	r3, r7, #20
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	480d      	ldr	r0, [pc, #52]	; (8004b44 <MX_GPIO_Init+0x15c>)
 8004b0e:	f002 ff2b 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b12:	2304      	movs	r3, #4
 8004b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b16:	2301      	movs	r3, #1
 8004b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b22:	f107 0314 	add.w	r3, r7, #20
 8004b26:	4619      	mov	r1, r3
 8004b28:	4807      	ldr	r0, [pc, #28]	; (8004b48 <MX_GPIO_Init+0x160>)
 8004b2a:	f002 ff1d 	bl	8007968 <HAL_GPIO_Init>

}
 8004b2e:	bf00      	nop
 8004b30:	3728      	adds	r7, #40	; 0x28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	40020800 	.word	0x40020800
 8004b40:	40020400 	.word	0x40020400
 8004b44:	40020000 	.word	0x40020000
 8004b48:	40020c00 	.word	0x40020c00

08004b4c <HAL_I2C_MspInit>:
  /* USER CODE END I2C3_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08c      	sub	sp, #48	; 0x30
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b54:	f107 031c 	add.w	r3, r7, #28
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a41      	ldr	r2, [pc, #260]	; (8004c70 <HAL_I2C_MspInit+0x124>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d12c      	bne.n	8004bc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	4b40      	ldr	r3, [pc, #256]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	4a3f      	ldr	r2, [pc, #252]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004b78:	f043 0302 	orr.w	r3, r3, #2
 8004b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7e:	4b3d      	ldr	r3, [pc, #244]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b8a:	23c0      	movs	r3, #192	; 0xc0
 8004b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b8e:	2312      	movs	r3, #18
 8004b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b96:	2303      	movs	r3, #3
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b9e:	f107 031c 	add.w	r3, r7, #28
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4834      	ldr	r0, [pc, #208]	; (8004c78 <HAL_I2C_MspInit+0x12c>)
 8004ba6:	f002 fedf 	bl	8007968 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a30      	ldr	r2, [pc, #192]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b2e      	ldr	r3, [pc, #184]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8004bc6:	e04f      	b.n	8004c68 <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a2b      	ldr	r2, [pc, #172]	; (8004c7c <HAL_I2C_MspInit+0x130>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d14a      	bne.n	8004c68 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	4a26      	ldr	r2, [pc, #152]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	6313      	str	r3, [r2, #48]	; 0x30
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004bf8:	f043 0302 	orr.w	r3, r3, #2
 8004bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfe:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c10:	2312      	movs	r3, #18
 8004c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c20:	f107 031c 	add.w	r3, r7, #28
 8004c24:	4619      	mov	r1, r3
 8004c26:	4816      	ldr	r0, [pc, #88]	; (8004c80 <HAL_I2C_MspInit+0x134>)
 8004c28:	f002 fe9e 	bl	8007968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c30:	2312      	movs	r3, #18
 8004c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8004c3c:	2309      	movs	r3, #9
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c40:	f107 031c 	add.w	r3, r7, #28
 8004c44:	4619      	mov	r1, r3
 8004c46:	480c      	ldr	r0, [pc, #48]	; (8004c78 <HAL_I2C_MspInit+0x12c>)
 8004c48:	f002 fe8e 	bl	8007968 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	4a07      	ldr	r2, [pc, #28]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004c56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_I2C_MspInit+0x128>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]
}
 8004c68:	bf00      	nop
 8004c6a:	3730      	adds	r7, #48	; 0x30
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40005400 	.word	0x40005400
 8004c74:	40023800 	.word	0x40023800
 8004c78:	40020400 	.word	0x40020400
 8004c7c:	40005c00 	.word	0x40005c00
 8004c80:	40020000 	.word	0x40020000

08004c84 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1a      	ldr	r2, [pc, #104]	; (8004cfc <HAL_I2C_MspDeInit+0x78>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d114      	bne.n	8004cc0 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <HAL_I2C_MspDeInit+0x7c>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <HAL_I2C_MspDeInit+0x7c>)
 8004c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004ca2:	2140      	movs	r1, #64	; 0x40
 8004ca4:	4817      	ldr	r0, [pc, #92]	; (8004d04 <HAL_I2C_MspDeInit+0x80>)
 8004ca6:	f002 ffe3 	bl	8007c70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004caa:	2180      	movs	r1, #128	; 0x80
 8004cac:	4815      	ldr	r0, [pc, #84]	; (8004d04 <HAL_I2C_MspDeInit+0x80>)
 8004cae:	f002 ffdf 	bl	8007c70 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8004cb2:	201f      	movs	r0, #31
 8004cb4:	f001 ff27 	bl	8006b06 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004cb8:	2020      	movs	r0, #32
 8004cba:	f001 ff24 	bl	8006b06 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8004cbe:	e019      	b.n	8004cf4 <HAL_I2C_MspDeInit+0x70>
  else if(i2cHandle->Instance==I2C3)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a10      	ldr	r2, [pc, #64]	; (8004d08 <HAL_I2C_MspDeInit+0x84>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d114      	bne.n	8004cf4 <HAL_I2C_MspDeInit+0x70>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004cca:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <HAL_I2C_MspDeInit+0x7c>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <HAL_I2C_MspDeInit+0x7c>)
 8004cd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8004cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cda:	480c      	ldr	r0, [pc, #48]	; (8004d0c <HAL_I2C_MspDeInit+0x88>)
 8004cdc:	f002 ffc8 	bl	8007c70 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8004ce0:	2110      	movs	r1, #16
 8004ce2:	4808      	ldr	r0, [pc, #32]	; (8004d04 <HAL_I2C_MspDeInit+0x80>)
 8004ce4:	f002 ffc4 	bl	8007c70 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8004ce8:	2048      	movs	r0, #72	; 0x48
 8004cea:	f001 ff0c 	bl	8006b06 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8004cee:	2049      	movs	r0, #73	; 0x49
 8004cf0:	f001 ff09 	bl	8006b06 <HAL_NVIC_DisableIRQ>
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40005400 	.word	0x40005400
 8004d00:	40023800 	.word	0x40023800
 8004d04:	40020400 	.word	0x40020400
 8004d08:	40005c00 	.word	0x40005c00
 8004d0c:	40020000 	.word	0x40020000

08004d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	4b21      	ldr	r3, [pc, #132]	; (8004da0 <HAL_MspInit+0x90>)
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	4a20      	ldr	r2, [pc, #128]	; (8004da0 <HAL_MspInit+0x90>)
 8004d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d24:	6453      	str	r3, [r2, #68]	; 0x44
 8004d26:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <HAL_MspInit+0x90>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <HAL_MspInit+0x90>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <HAL_MspInit+0x90>)
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d40:	6413      	str	r3, [r2, #64]	; 0x40
 8004d42:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <HAL_MspInit+0x90>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8004d4e:	2200      	movs	r2, #0
 8004d50:	210f      	movs	r1, #15
 8004d52:	f06f 000b 	mvn.w	r0, #11
 8004d56:	f001 feac 	bl	8006ab2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	210f      	movs	r1, #15
 8004d5e:	f06f 000a 	mvn.w	r0, #10
 8004d62:	f001 fea6 	bl	8006ab2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	210f      	movs	r1, #15
 8004d6a:	f06f 0009 	mvn.w	r0, #9
 8004d6e:	f001 fea0 	bl	8006ab2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 8004d72:	2200      	movs	r2, #0
 8004d74:	210f      	movs	r1, #15
 8004d76:	f06f 0004 	mvn.w	r0, #4
 8004d7a:	f001 fe9a 	bl	8006ab2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	210f      	movs	r1, #15
 8004d82:	f06f 0003 	mvn.w	r0, #3
 8004d86:	f001 fe94 	bl	8006ab2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	210f      	movs	r1, #15
 8004d8e:	f06f 0001 	mvn.w	r0, #1
 8004d92:	f001 fe8e 	bl	8006ab2 <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800

08004da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08c      	sub	sp, #48	; 0x30
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	4b2e      	ldr	r3, [pc, #184]	; (8004e74 <HAL_InitTick+0xd0>)
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	4a2d      	ldr	r2, [pc, #180]	; (8004e74 <HAL_InitTick+0xd0>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <HAL_InitTick+0xd0>)
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004dd0:	f107 020c 	add.w	r2, r7, #12
 8004dd4:	f107 0310 	add.w	r3, r7, #16
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f005 fcc2 	bl	800a764 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004de0:	f005 fcac 	bl	800a73c <HAL_RCC_GetPCLK2Freq>
 8004de4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <HAL_InitTick+0xd4>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	0c9b      	lsrs	r3, r3, #18
 8004df0:	3b01      	subs	r3, #1
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004df4:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <HAL_InitTick+0xd8>)
 8004df6:	4a22      	ldr	r2, [pc, #136]	; (8004e80 <HAL_InitTick+0xdc>)
 8004df8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004dfa:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <HAL_InitTick+0xd8>)
 8004dfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004e02:	4a1e      	ldr	r2, [pc, #120]	; (8004e7c <HAL_InitTick+0xd8>)
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004e08:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <HAL_InitTick+0xd8>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_InitTick+0xd8>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e14:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <HAL_InitTick+0xd8>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004e1a:	4818      	ldr	r0, [pc, #96]	; (8004e7c <HAL_InitTick+0xd8>)
 8004e1c:	f005 fcd4 	bl	800a7c8 <HAL_TIM_Base_Init>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11b      	bne.n	8004e66 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004e2e:	4813      	ldr	r0, [pc, #76]	; (8004e7c <HAL_InitTick+0xd8>)
 8004e30:	f005 fd26 	bl	800a880 <HAL_TIM_Base_Start_IT>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d111      	bne.n	8004e66 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004e42:	2019      	movs	r0, #25
 8004e44:	f001 fe51 	bl	8006aea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b0f      	cmp	r3, #15
 8004e4c:	d808      	bhi.n	8004e60 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	2019      	movs	r0, #25
 8004e54:	f001 fe2d 	bl	8006ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e58:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <HAL_InitTick+0xe0>)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e002      	b.n	8004e66 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3730      	adds	r7, #48	; 0x30
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800
 8004e78:	431bde83 	.word	0x431bde83
 8004e7c:	20000488 	.word	0x20000488
 8004e80:	40010000 	.word	0x40010000
 8004e84:	20000050 	.word	0x20000050

08004e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	SystemManager_SetFault(NMI_RESET);
 8004e8c:	2008      	movs	r0, #8
 8004e8e:	f00d ffd1 	bl	8012e34 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8004e92:	f00d fff9 	bl	8012e88 <SystemManager_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e96:	e7fe      	b.n	8004e96 <NMI_Handler+0xe>

08004e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SystemManager_SetFault(HARDWARE_RESET);
 8004e9c:	2006      	movs	r0, #6
 8004e9e:	f00d ffc9 	bl	8012e34 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8004ea2:	f00d fff1 	bl	8012e88 <SystemManager_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ea6:	e7fe      	b.n	8004ea6 <HardFault_Handler+0xe>

08004ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SystemManager_SetFault(MEMORY_FAULT_RESET);
 8004eac:	2009      	movs	r0, #9
 8004eae:	f00d ffc1 	bl	8012e34 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8004eb2:	f00d ffe9 	bl	8012e88 <SystemManager_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004eb6:	e7fe      	b.n	8004eb6 <MemManage_Handler+0xe>

08004eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SystemManager_SetFault(BUS_FAULT_RESET);
 8004ebc:	200b      	movs	r0, #11
 8004ebe:	f00d ffb9 	bl	8012e34 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8004ec2:	f00d ffe1 	bl	8012e88 <SystemManager_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ec6:	e7fe      	b.n	8004ec6 <BusFault_Handler+0xe>

08004ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SystemManager_SetFault(USAGE_FAULT_RESET);
 8004ecc:	200a      	movs	r0, #10
 8004ece:	f00d ffb1 	bl	8012e34 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8004ed2:	f00d ffd9 	bl	8012e88 <SystemManager_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ed6:	e7fe      	b.n	8004ed6 <UsageFault_Handler+0xe>

08004ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */
	SystemManager_PerformReset();
 8004eea:	f00d ffcd 	bl	8012e88 <SystemManager_PerformReset>
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8004eee:	f004 ff87 	bl	8009e00 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */
  /* USER CODE END PVD_IRQn 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */
	SystemManager_SetFault(FLASH_FAULT_RESET);
 8004efa:	2007      	movs	r0, #7
 8004efc:	f00d ff9a 	bl	8012e34 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8004f00:	f00d ffc2 	bl	8012e88 <SystemManager_PerformReset>
  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8004f04:	f002 fb88 	bl	8007618 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  /* USER CODE END FLASH_IRQn 1 */
}
 8004f08:	bf00      	nop
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004f20:	4802      	ldr	r0, [pc, #8]	; (8004f2c <ADC_IRQHandler+0x10>)
 8004f22:	f000 ffe5 	bl	8005ef0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  /* USER CODE END ADC_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	2000020c 	.word	0x2000020c

08004f30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004f36:	f006 f89b 	bl	800b070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000488 	.word	0x20000488

08004f44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	/* When alarm is on turn on the LEDs at full duty cycle for the designated time. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_PinStateChange == STD_HIGH)
 8004f48:	4b44      	ldr	r3, [pc, #272]	; (800505c <TIM2_IRQHandler+0x118>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d10b      	bne.n	8004f68 <TIM2_IRQHandler+0x24>
	{
		TIM2->CCR1 = TIM2->ARR;
 8004f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = TIM2->ARR;
 8004f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	6393      	str	r3, [r2, #56]	; 0x38
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the low beam light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_HIGH)
 8004f68:	4b3d      	ldr	r3, [pc, #244]	; (8005060 <TIM2_IRQHandler+0x11c>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d119      	bne.n	8004fa4 <TIM2_IRQHandler+0x60>
	{
		if(TIM2->CCR1 < 1250)
 8004f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d807      	bhi.n	8004f8e <TIM2_IRQHandler+0x4a>
		{
			TIM2->CCR1 = TIM2->CCR1 + 20;
 8004f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f88:	3314      	adds	r3, #20
 8004f8a:	6353      	str	r3, [r2, #52]	; 0x34
 8004f8c:	e00a      	b.n	8004fa4 <TIM2_IRQHandler+0x60>
		}
		else if(TIM2->CCR1 >= 1000)
 8004f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f98:	d304      	bcc.n	8004fa4 <TIM2_IRQHandler+0x60>
		{
			TIM2->CCR1 = 1250;
 8004f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f9e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8004fa2:	635a      	str	r2, [r3, #52]	; 0x34
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the rear position light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 8004fa4:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <TIM2_IRQHandler+0x120>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d118      	bne.n	8004fde <TIM2_IRQHandler+0x9a>
	{
		if(TIM2->CCR2 < 1000)
 8004fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fb6:	d207      	bcs.n	8004fc8 <TIM2_IRQHandler+0x84>
		{
			TIM2->CCR2 = TIM2->CCR2 + 1;
 8004fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	6393      	str	r3, [r2, #56]	; 0x38
 8004fc6:	e00a      	b.n	8004fde <TIM2_IRQHandler+0x9a>
		}
		else if(TIM2->CCR2 >= 1000)
 8004fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fd2:	d304      	bcc.n	8004fde <TIM2_IRQHandler+0x9a>
		{
			TIM2->CCR2 = 1000;
 8004fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_HIGH)
 8004fde:	4b22      	ldr	r3, [pc, #136]	; (8005068 <TIM2_IRQHandler+0x124>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d11b      	bne.n	800501e <TIM2_IRQHandler+0xda>
	{
		if(TIM2->CCR3 < 1999)
 8004fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d807      	bhi.n	8005004 <TIM2_IRQHandler+0xc0>
		{
			TIM2->CCR3 = TIM2->CCR3 + 20;
 8004ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ffe:	3314      	adds	r3, #20
 8005000:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005002:	e026      	b.n	8005052 <TIM2_IRQHandler+0x10e>
		}
		else if(TIM2->CCR3 >= 1999)
 8005004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800500e:	4293      	cmp	r3, r2
 8005010:	d91f      	bls.n	8005052 <TIM2_IRQHandler+0x10e>
		{
			TIM2->CCR3 = 1999;
 8005012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005016:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800501a:	63da      	str	r2, [r3, #60]	; 0x3c
 800501c:	e019      	b.n	8005052 <TIM2_IRQHandler+0x10e>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_LOW)
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <TIM2_IRQHandler+0x124>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d115      	bne.n	8005052 <TIM2_IRQHandler+0x10e>
	{
		if(TIM2->CCR3 > 20)
 8005026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	2b14      	cmp	r3, #20
 800502e:	d907      	bls.n	8005040 <TIM2_IRQHandler+0xfc>
		{
			TIM2->CCR3 = TIM2->CCR3 - 20;
 8005030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800503a:	3b14      	subs	r3, #20
 800503c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800503e:	e008      	b.n	8005052 <TIM2_IRQHandler+0x10e>
		}
		else if(TIM2->CCR3 <= 20)
 8005040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	2b14      	cmp	r3, #20
 8005048:	d803      	bhi.n	8005052 <TIM2_IRQHandler+0x10e>
		{
			TIM2->CCR3 = 0;
 800504a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800504e:	2200      	movs	r2, #0
 8005050:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005052:	4806      	ldr	r0, [pc, #24]	; (800506c <TIM2_IRQHandler+0x128>)
 8005054:	f006 f80c 	bl	800b070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8005058:	bf00      	nop
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200001a5 	.word	0x200001a5
 8005060:	20000154 	.word	0x20000154
 8005064:	20000155 	.word	0x20000155
 8005068:	20000199 	.word	0x20000199
 800506c:	20000540 	.word	0x20000540

08005070 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
	/* On central lock set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the central lock is set to low, set duty cycle to 0. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8005074:	4b32      	ldr	r3, [pc, #200]	; (8005140 <TIM3_IRQHandler+0xd0>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d104      	bne.n	8005086 <TIM3_IRQHandler+0x16>
	{
		TIM3->CCR1 = TIM3->ARR;
 800507c:	4b31      	ldr	r3, [pc, #196]	; (8005144 <TIM3_IRQHandler+0xd4>)
 800507e:	4a31      	ldr	r2, [pc, #196]	; (8005144 <TIM3_IRQHandler+0xd4>)
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	6353      	str	r3, [r2, #52]	; 0x34
 8005084:	e006      	b.n	8005094 <TIM3_IRQHandler+0x24>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8005086:	4b2e      	ldr	r3, [pc, #184]	; (8005140 <TIM3_IRQHandler+0xd0>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <TIM3_IRQHandler+0x24>
	{
		TIM3->CCR1 = 0;
 800508e:	4b2d      	ldr	r3, [pc, #180]	; (8005144 <TIM3_IRQHandler+0xd4>)
 8005090:	2200      	movs	r2, #0
 8005092:	635a      	str	r2, [r3, #52]	; 0x34
	/* On brake lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the brake lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8005094:	4b2c      	ldr	r3, [pc, #176]	; (8005148 <TIM3_IRQHandler+0xd8>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d104      	bne.n	80050a6 <TIM3_IRQHandler+0x36>
	{
		TIM3->CCR2 = TIM3->ARR;
 800509c:	4b29      	ldr	r3, [pc, #164]	; (8005144 <TIM3_IRQHandler+0xd4>)
 800509e:	4a29      	ldr	r2, [pc, #164]	; (8005144 <TIM3_IRQHandler+0xd4>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	6393      	str	r3, [r2, #56]	; 0x38
 80050a4:	e006      	b.n	80050b4 <TIM3_IRQHandler+0x44>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 80050a6:	4b28      	ldr	r3, [pc, #160]	; (8005148 <TIM3_IRQHandler+0xd8>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <TIM3_IRQHandler+0x44>
	{
		TIM3->CCR2 = 0;
 80050ae:	4b25      	ldr	r3, [pc, #148]	; (8005144 <TIM3_IRQHandler+0xd4>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
	/* On front fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the front fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 80050b4:	4b25      	ldr	r3, [pc, #148]	; (800514c <TIM3_IRQHandler+0xdc>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d114      	bne.n	80050e6 <TIM3_IRQHandler+0x76>
	{
		if(TIM3->CCR3 < 1000)
 80050bc:	4b21      	ldr	r3, [pc, #132]	; (8005144 <TIM3_IRQHandler+0xd4>)
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050c4:	d205      	bcs.n	80050d2 <TIM3_IRQHandler+0x62>
		{
			TIM3->CCR3 = TIM3->CCR3 + 20;
 80050c6:	4b1f      	ldr	r3, [pc, #124]	; (8005144 <TIM3_IRQHandler+0xd4>)
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <TIM3_IRQHandler+0xd4>)
 80050cc:	3314      	adds	r3, #20
 80050ce:	63d3      	str	r3, [r2, #60]	; 0x3c
 80050d0:	e010      	b.n	80050f4 <TIM3_IRQHandler+0x84>
		}
		else if(TIM3->CCR3 >= 1000)
 80050d2:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <TIM3_IRQHandler+0xd4>)
 80050d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050da:	d30b      	bcc.n	80050f4 <TIM3_IRQHandler+0x84>
		{
			TIM3->CCR3 = 1000;
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <TIM3_IRQHandler+0xd4>)
 80050de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80050e4:	e006      	b.n	80050f4 <TIM3_IRQHandler+0x84>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_LOW)
 80050e6:	4b19      	ldr	r3, [pc, #100]	; (800514c <TIM3_IRQHandler+0xdc>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d102      	bne.n	80050f4 <TIM3_IRQHandler+0x84>
	{
		TIM3->CCR3 = 0;
 80050ee:	4b15      	ldr	r3, [pc, #84]	; (8005144 <TIM3_IRQHandler+0xd4>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* On rear fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the rear fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <TIM3_IRQHandler+0xe0>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d114      	bne.n	8005126 <TIM3_IRQHandler+0xb6>
	{
		if(TIM3->CCR4 < 1000)
 80050fc:	4b11      	ldr	r3, [pc, #68]	; (8005144 <TIM3_IRQHandler+0xd4>)
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005104:	d205      	bcs.n	8005112 <TIM3_IRQHandler+0xa2>
		{
			TIM3->CCR4 = TIM3->CCR4 + 20;
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <TIM3_IRQHandler+0xd4>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	4a0e      	ldr	r2, [pc, #56]	; (8005144 <TIM3_IRQHandler+0xd4>)
 800510c:	3314      	adds	r3, #20
 800510e:	6413      	str	r3, [r2, #64]	; 0x40
 8005110:	e010      	b.n	8005134 <TIM3_IRQHandler+0xc4>
		}
		else if(TIM3->CCR4 >= 1000)
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <TIM3_IRQHandler+0xd4>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800511a:	d30b      	bcc.n	8005134 <TIM3_IRQHandler+0xc4>
		{
			TIM3->CCR4 = 1000;
 800511c:	4b09      	ldr	r3, [pc, #36]	; (8005144 <TIM3_IRQHandler+0xd4>)
 800511e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005122:	641a      	str	r2, [r3, #64]	; 0x40
 8005124:	e006      	b.n	8005134 <TIM3_IRQHandler+0xc4>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
 8005126:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <TIM3_IRQHandler+0xe0>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d102      	bne.n	8005134 <TIM3_IRQHandler+0xc4>
	{
		TIM3->CCR4 = 0;
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <TIM3_IRQHandler+0xd4>)
 8005130:	2200      	movs	r2, #0
 8005132:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005134:	4807      	ldr	r0, [pc, #28]	; (8005154 <TIM3_IRQHandler+0xe4>)
 8005136:	f005 ff9b 	bl	800b070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000120 	.word	0x20000120
 8005144:	40000400 	.word	0x40000400
 8005148:	2000014e 	.word	0x2000014e
 800514c:	20000151 	.word	0x20000151
 8005150:	20000157 	.word	0x20000157
 8005154:	200005f4 	.word	0x200005f4

08005158 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800515c:	4802      	ldr	r0, [pc, #8]	; (8005168 <TIM4_IRQHandler+0x10>)
 800515e:	f005 ff87 	bl	800b070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	200006a8 	.word	0x200006a8

0800516c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005170:	4802      	ldr	r0, [pc, #8]	; (800517c <I2C1_EV_IRQHandler+0x10>)
 8005172:	f003 f8f7 	bl	8008364 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005176:	bf00      	nop
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000374 	.word	0x20000374

08005180 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005184:	4802      	ldr	r0, [pc, #8]	; (8005190 <I2C1_ER_IRQHandler+0x10>)
 8005186:	f003 fa5e 	bl	8008646 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000374 	.word	0x20000374

08005194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005198:	4802      	ldr	r0, [pc, #8]	; (80051a4 <USART1_IRQHandler+0x10>)
 800519a:	f007 f927 	bl	800c3ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 800519e:	bf00      	nop
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000810 	.word	0x20000810

080051a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80051ac:	4802      	ldr	r0, [pc, #8]	; (80051b8 <TIM5_IRQHandler+0x10>)
 80051ae:	f005 ff5f 	bl	800b070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 80051b2:	bf00      	nop
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	2000075c 	.word	0x2000075c

080051bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80051c0:	4802      	ldr	r0, [pc, #8]	; (80051cc <DMA2_Stream0_IRQHandler+0x10>)
 80051c2:	f001 ffb1 	bl	8007128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80051c6:	bf00      	nop
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20000270 	.word	0x20000270

080051d0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80051d4:	4802      	ldr	r0, [pc, #8]	; (80051e0 <I2C3_EV_IRQHandler+0x10>)
 80051d6:	f003 f8c5 	bl	8008364 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80051da:	bf00      	nop
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	200003f8 	.word	0x200003f8

080051e4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80051e8:	4802      	ldr	r0, [pc, #8]	; (80051f4 <I2C3_ER_IRQHandler+0x10>)
 80051ea:	f003 fa2c 	bl	8008646 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	200003f8 	.word	0x200003f8

080051f8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FPU_IRQn 0 */
  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */
  /* USER CODE END FPU_IRQn 1 */
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005210:	4a14      	ldr	r2, [pc, #80]	; (8005264 <_sbrk+0x5c>)
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <_sbrk+0x60>)
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <_sbrk+0x64>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <_sbrk+0x64>)
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <_sbrk+0x68>)
 8005228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <_sbrk+0x64>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4413      	add	r3, r2
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	429a      	cmp	r2, r3
 8005236:	d207      	bcs.n	8005248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005238:	f00d ff6a 	bl	8013110 <__errno>
 800523c:	4603      	mov	r3, r0
 800523e:	220c      	movs	r2, #12
 8005240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005242:	f04f 33ff 	mov.w	r3, #4294967295
 8005246:	e009      	b.n	800525c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005248:	4b08      	ldr	r3, [pc, #32]	; (800526c <_sbrk+0x64>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <_sbrk+0x64>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4413      	add	r3, r2
 8005256:	4a05      	ldr	r2, [pc, #20]	; (800526c <_sbrk+0x64>)
 8005258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800525a:	68fb      	ldr	r3, [r7, #12]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20020000 	.word	0x20020000
 8005268:	00000400 	.word	0x00000400
 800526c:	2000053c 	.word	0x2000053c
 8005270:	200094f0 	.word	0x200094f0

08005274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <SystemInit+0x20>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	4a05      	ldr	r2, [pc, #20]	; (8005294 <SystemInit+0x20>)
 8005280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	e000ed00 	.word	0xe000ed00

08005298 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM5_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	f107 031c 	add.w	r3, r7, #28
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	605a      	str	r2, [r3, #4]
 80052aa:	609a      	str	r2, [r3, #8]
 80052ac:	60da      	str	r2, [r3, #12]
 80052ae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b8:	d10e      	bne.n	80052d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	4b35      	ldr	r3, [pc, #212]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	4a34      	ldr	r2, [pc, #208]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ca:	4b32      	ldr	r3, [pc, #200]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80052d6:	e058      	b.n	800538a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a2e      	ldr	r2, [pc, #184]	; (8005398 <HAL_TIM_Base_MspInit+0x100>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d10e      	bne.n	8005300 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	4b2b      	ldr	r3, [pc, #172]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	4a2a      	ldr	r2, [pc, #168]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 80052ec:	f043 0302 	orr.w	r3, r3, #2
 80052f0:	6413      	str	r3, [r2, #64]	; 0x40
 80052f2:	4b28      	ldr	r3, [pc, #160]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	697b      	ldr	r3, [r7, #20]
}
 80052fe:	e044      	b.n	800538a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM4)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a25      	ldr	r2, [pc, #148]	; (800539c <HAL_TIM_Base_MspInit+0x104>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	4b21      	ldr	r3, [pc, #132]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	4a20      	ldr	r2, [pc, #128]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	6413      	str	r3, [r2, #64]	; 0x40
 800531a:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	693b      	ldr	r3, [r7, #16]
}
 8005326:	e030      	b.n	800538a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <HAL_TIM_Base_MspInit+0x108>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d12b      	bne.n	800538a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	4a16      	ldr	r2, [pc, #88]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 800533c:	f043 0308 	orr.w	r3, r3, #8
 8005340:	6413      	str	r3, [r2, #64]	; 0x40
 8005342:	4b14      	ldr	r3, [pc, #80]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	4a0f      	ldr	r2, [pc, #60]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6313      	str	r3, [r2, #48]	; 0x30
 800535e:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <HAL_TIM_Base_MspInit+0xfc>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PDCF_IC_Pin|PDCR_IC_Pin;
 800536a:	2303      	movs	r3, #3
 800536c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536e:	2302      	movs	r3, #2
 8005370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005372:	2300      	movs	r3, #0
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005376:	2300      	movs	r3, #0
 8005378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800537a:	2302      	movs	r3, #2
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800537e:	f107 031c 	add.w	r3, r7, #28
 8005382:	4619      	mov	r1, r3
 8005384:	4807      	ldr	r0, [pc, #28]	; (80053a4 <HAL_TIM_Base_MspInit+0x10c>)
 8005386:	f002 faef 	bl	8007968 <HAL_GPIO_Init>
}
 800538a:	bf00      	nop
 800538c:	3730      	adds	r7, #48	; 0x30
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40023800 	.word	0x40023800
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40020000 	.word	0x40020000

080053a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08c      	sub	sp, #48	; 0x30
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b0:	f107 031c 	add.w	r3, r7, #28
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	605a      	str	r2, [r3, #4]
 80053ba:	609a      	str	r2, [r3, #8]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c8:	d13e      	bne.n	8005448 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	4b45      	ldr	r3, [pc, #276]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	4a44      	ldr	r2, [pc, #272]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	6313      	str	r3, [r2, #48]	; 0x30
 80053da:	4b42      	ldr	r3, [pc, #264]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	4b3e      	ldr	r3, [pc, #248]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	4a3d      	ldr	r2, [pc, #244]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	6313      	str	r3, [r2, #48]	; 0x30
 80053f6:	4b3b      	ldr	r3, [pc, #236]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = IL_PWM_Pin|RPL_PWM_Pin;
 8005402:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005408:	2302      	movs	r3, #2
 800540a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	2300      	movs	r3, #0
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005410:	2300      	movs	r3, #0
 8005412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005414:	2301      	movs	r3, #1
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005418:	f107 031c 	add.w	r3, r7, #28
 800541c:	4619      	mov	r1, r3
 800541e:	4832      	ldr	r0, [pc, #200]	; (80054e8 <HAL_TIM_MspPostInit+0x140>)
 8005420:	f002 faa2 	bl	8007968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LB_PWM_Pin;
 8005424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542a:	2302      	movs	r3, #2
 800542c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542e:	2300      	movs	r3, #0
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005432:	2300      	movs	r3, #0
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005436:	2301      	movs	r3, #1
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LB_PWM_GPIO_Port, &GPIO_InitStruct);
 800543a:	f107 031c 	add.w	r3, r7, #28
 800543e:	4619      	mov	r1, r3
 8005440:	482a      	ldr	r0, [pc, #168]	; (80054ec <HAL_TIM_MspPostInit+0x144>)
 8005442:	f002 fa91 	bl	8007968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005446:	e048      	b.n	80054da <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a28      	ldr	r2, [pc, #160]	; (80054f0 <HAL_TIM_MspPostInit+0x148>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d11f      	bne.n	8005492 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	4b23      	ldr	r3, [pc, #140]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 800545c:	f043 0304 	orr.w	r3, r3, #4
 8005460:	6313      	str	r3, [r2, #48]	; 0x30
 8005462:	4b20      	ldr	r3, [pc, #128]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DL_PWM_Pin|BL_PWM_Pin|FFL_PWM_Pin|RFL_PWM_Pin;
 800546e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005474:	2302      	movs	r3, #2
 8005476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547c:	2300      	movs	r3, #0
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005480:	2302      	movs	r3, #2
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005484:	f107 031c 	add.w	r3, r7, #28
 8005488:	4619      	mov	r1, r3
 800548a:	481a      	ldr	r0, [pc, #104]	; (80054f4 <HAL_TIM_MspPostInit+0x14c>)
 800548c:	f002 fa6c 	bl	8007968 <HAL_GPIO_Init>
}
 8005490:	e023      	b.n	80054da <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <HAL_TIM_MspPostInit+0x150>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d11e      	bne.n	80054da <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	4b10      	ldr	r3, [pc, #64]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	4a0f      	ldr	r2, [pc, #60]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	6313      	str	r3, [r2, #48]	; 0x30
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <HAL_TIM_MspPostInit+0x13c>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LTS_PWM_Pin|RTS_PWM_Pin;
 80054b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80054bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054be:	2302      	movs	r3, #2
 80054c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c6:	2300      	movs	r3, #0
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054ca:	2302      	movs	r3, #2
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ce:	f107 031c 	add.w	r3, r7, #28
 80054d2:	4619      	mov	r1, r3
 80054d4:	4804      	ldr	r0, [pc, #16]	; (80054e8 <HAL_TIM_MspPostInit+0x140>)
 80054d6:	f002 fa47 	bl	8007968 <HAL_GPIO_Init>
}
 80054da:	bf00      	nop
 80054dc:	3730      	adds	r7, #48	; 0x30
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800
 80054e8:	40020400 	.word	0x40020400
 80054ec:	40020000 	.word	0x40020000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40020800 	.word	0x40020800
 80054f8:	40000800 	.word	0x40000800

080054fc <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550c:	d109      	bne.n	8005522 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 800550e:	4b1f      	ldr	r3, [pc, #124]	; (800558c <HAL_TIM_Base_MspDeInit+0x90>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	4a1e      	ldr	r2, [pc, #120]	; (800558c <HAL_TIM_Base_MspDeInit+0x90>)
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 800551a:	201c      	movs	r0, #28
 800551c:	f001 faf3 	bl	8006b06 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
}
 8005520:	e02f      	b.n	8005582 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM3)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1a      	ldr	r2, [pc, #104]	; (8005590 <HAL_TIM_Base_MspDeInit+0x94>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d109      	bne.n	8005540 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM3_CLK_DISABLE();
 800552c:	4b17      	ldr	r3, [pc, #92]	; (800558c <HAL_TIM_Base_MspDeInit+0x90>)
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	4a16      	ldr	r2, [pc, #88]	; (800558c <HAL_TIM_Base_MspDeInit+0x90>)
 8005532:	f023 0302 	bic.w	r3, r3, #2
 8005536:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8005538:	201d      	movs	r0, #29
 800553a:	f001 fae4 	bl	8006b06 <HAL_NVIC_DisableIRQ>
}
 800553e:	e020      	b.n	8005582 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM4)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a13      	ldr	r2, [pc, #76]	; (8005594 <HAL_TIM_Base_MspDeInit+0x98>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d109      	bne.n	800555e <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM4_CLK_DISABLE();
 800554a:	4b10      	ldr	r3, [pc, #64]	; (800558c <HAL_TIM_Base_MspDeInit+0x90>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	4a0f      	ldr	r2, [pc, #60]	; (800558c <HAL_TIM_Base_MspDeInit+0x90>)
 8005550:	f023 0304 	bic.w	r3, r3, #4
 8005554:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8005556:	201e      	movs	r0, #30
 8005558:	f001 fad5 	bl	8006b06 <HAL_NVIC_DisableIRQ>
}
 800555c:	e011      	b.n	8005582 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM5)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <HAL_TIM_Base_MspDeInit+0x9c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d10c      	bne.n	8005582 <HAL_TIM_Base_MspDeInit+0x86>
    __HAL_RCC_TIM5_CLK_DISABLE();
 8005568:	4b08      	ldr	r3, [pc, #32]	; (800558c <HAL_TIM_Base_MspDeInit+0x90>)
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	4a07      	ldr	r2, [pc, #28]	; (800558c <HAL_TIM_Base_MspDeInit+0x90>)
 800556e:	f023 0308 	bic.w	r3, r3, #8
 8005572:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PDCF_IC_Pin|PDCR_IC_Pin);
 8005574:	2103      	movs	r1, #3
 8005576:	4809      	ldr	r0, [pc, #36]	; (800559c <HAL_TIM_Base_MspDeInit+0xa0>)
 8005578:	f002 fb7a 	bl	8007c70 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 800557c:	2032      	movs	r0, #50	; 0x32
 800557e:	f001 fac2 	bl	8006b06 <HAL_NVIC_DisableIRQ>
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40023800 	.word	0x40023800
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40020000 	.word	0x40020000

080055a0 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a8:	f107 0314 	add.w	r3, r7, #20
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	60da      	str	r2, [r3, #12]
 80055b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a19      	ldr	r2, [pc, #100]	; (8005624 <HAL_UART_MspInit+0x84>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d12c      	bne.n	800561c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	4b18      	ldr	r3, [pc, #96]	; (8005628 <HAL_UART_MspInit+0x88>)
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	4a17      	ldr	r2, [pc, #92]	; (8005628 <HAL_UART_MspInit+0x88>)
 80055cc:	f043 0310 	orr.w	r3, r3, #16
 80055d0:	6453      	str	r3, [r2, #68]	; 0x44
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <HAL_UART_MspInit+0x88>)
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	4b11      	ldr	r3, [pc, #68]	; (8005628 <HAL_UART_MspInit+0x88>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	4a10      	ldr	r2, [pc, #64]	; (8005628 <HAL_UART_MspInit+0x88>)
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	6313      	str	r3, [r2, #48]	; 0x30
 80055ee:	4b0e      	ldr	r3, [pc, #56]	; (8005628 <HAL_UART_MspInit+0x88>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80055fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80055fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005600:	2302      	movs	r3, #2
 8005602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005604:	2300      	movs	r3, #0
 8005606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005608:	2303      	movs	r3, #3
 800560a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800560c:	2307      	movs	r3, #7
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005610:	f107 0314 	add.w	r3, r7, #20
 8005614:	4619      	mov	r1, r3
 8005616:	4805      	ldr	r0, [pc, #20]	; (800562c <HAL_UART_MspInit+0x8c>)
 8005618:	f002 f9a6 	bl	8007968 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800561c:	bf00      	nop
 800561e:	3728      	adds	r7, #40	; 0x28
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40011000 	.word	0x40011000
 8005628:	40023800 	.word	0x40023800
 800562c:	40020000 	.word	0x40020000

08005630 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <HAL_UART_MspDeInit+0x38>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10d      	bne.n	800565e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <HAL_UART_MspDeInit+0x3c>)
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	4a09      	ldr	r2, [pc, #36]	; (800566c <HAL_UART_MspDeInit+0x3c>)
 8005648:	f023 0310 	bic.w	r3, r3, #16
 800564c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800564e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005652:	4807      	ldr	r0, [pc, #28]	; (8005670 <HAL_UART_MspDeInit+0x40>)
 8005654:	f002 fb0c 	bl	8007c70 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005658:	2025      	movs	r0, #37	; 0x25
 800565a:	f001 fa54 	bl	8006b06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40011000 	.word	0x40011000
 800566c:	40023800 	.word	0x40023800
 8005670:	40020000 	.word	0x40020000

08005674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005678:	480d      	ldr	r0, [pc, #52]	; (80056b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800567a:	490e      	ldr	r1, [pc, #56]	; (80056b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800567c:	4a0e      	ldr	r2, [pc, #56]	; (80056b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800567e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005680:	e002      	b.n	8005688 <LoopCopyDataInit>

08005682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005686:	3304      	adds	r3, #4

08005688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800568a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800568c:	d3f9      	bcc.n	8005682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800568e:	4a0b      	ldr	r2, [pc, #44]	; (80056bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005690:	4c0b      	ldr	r4, [pc, #44]	; (80056c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005694:	e001      	b.n	800569a <LoopFillZerobss>

08005696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005698:	3204      	adds	r2, #4

0800569a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800569a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800569c:	d3fb      	bcc.n	8005696 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800569e:	f7ff fde9 	bl	8005274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056a2:	f00d fd3b 	bl	801311c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056a6:	f7fb fb63 	bl	8000d70 <main>
  bx  lr    
 80056aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80056ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056b4:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80056b8:	0801445c 	.word	0x0801445c
  ldr r2, =_sbss
 80056bc:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80056c0:	200094ec 	.word	0x200094ec

080056c4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056c4:	e7fe      	b.n	80056c4 <DMA1_Stream0_IRQHandler>

080056c6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056d4:	b672      	cpsid	i
}
 80056d6:	bf00      	nop
 80056d8:	f00d fcea 	bl	80130b0 <Error_Handler>
 80056dc:	e7fe      	b.n	80056dc <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	7a1b      	ldrb	r3, [r3, #8]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d904      	bls.n	80056f0 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80056e6:	b672      	cpsid	i
}
 80056e8:	bf00      	nop
 80056ea:	f00d fce1 	bl	80130b0 <Error_Handler>
 80056ee:	e7fe      	b.n	80056ee <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7a1b      	ldrb	r3, [r3, #8]
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	b2d1      	uxtb	r1, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	7211      	strb	r1, [r2, #8]
 80056fc:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056fe:	f3ef 8211 	mrs	r2, BASEPRI
 8005702:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60fa      	str	r2, [r7, #12]
 8005714:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d104      	bne.n	800573e <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005734:	b672      	cpsid	i
}
 8005736:	bf00      	nop
 8005738:	f00d fcba 	bl	80130b0 <Error_Handler>
 800573c:	e7fe      	b.n	800573c <stm32_lock_release+0x16>
  lock->nesting_level--;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	7a1b      	ldrb	r3, [r3, #8]
 8005742:	3b01      	subs	r3, #1
 8005744:	b2da      	uxtb	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	7a1b      	ldrb	r3, [r3, #8]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d904      	bls.n	800575c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8005752:	b672      	cpsid	i
}
 8005754:	bf00      	nop
 8005756:	f00d fcab 	bl	80130b0 <Error_Handler>
 800575a:	e7fe      	b.n	800575a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	7a1b      	ldrb	r3, [r3, #8]
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005768:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005770:	bf00      	nop
}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d104      	bne.n	8005792 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005788:	b672      	cpsid	i
}
 800578a:	bf00      	nop
 800578c:	f00d fc90 	bl	80130b0 <Error_Handler>
 8005790:	e7fe      	b.n	8005790 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff ff96 	bl	80056c6 <stm32_lock_acquire>
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80057b0:	b672      	cpsid	i
}
 80057b2:	bf00      	nop
 80057b4:	f00d fc7c 	bl	80130b0 <Error_Handler>
 80057b8:	e7fe      	b.n	80057b8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff ffb2 	bl	8005726 <stm32_lock_release>
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <Dem_MainFunction>:
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	af00      	add	r7, sp, #0
	Dem_ProcessFault();
 80057ce:	f000 f803 	bl	80057d8 <Dem_ProcessFault>
}
 80057d2:	bf00      	nop
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <Dem_ProcessFault>:
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process fault from application.							 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
	if(firstRun == STD_LOW)
 80057de:	4b42      	ldr	r3, [pc, #264]	; (80058e8 <Dem_ProcessFault+0x110>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d114      	bne.n	8005810 <Dem_ProcessFault+0x38>
	{
		firstRun = STD_HIGH;
 80057e6:	4b40      	ldr	r3, [pc, #256]	; (80058e8 <Dem_ProcessFault+0x110>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	701a      	strb	r2, [r3, #0]
		for(uint8 idx = STD_LOW; idx < 24; idx++)
 80057ec:	2300      	movs	r3, #0
 80057ee:	71fb      	strb	r3, [r7, #7]
 80057f0:	e00b      	b.n	800580a <Dem_ProcessFault+0x32>
		{
			if(Dem_MemDtcArray[idx] >= 254)
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	4a3d      	ldr	r2, [pc, #244]	; (80058ec <Dem_ProcessFault+0x114>)
 80057f6:	5cd3      	ldrb	r3, [r2, r3]
 80057f8:	2bfd      	cmp	r3, #253	; 0xfd
 80057fa:	d903      	bls.n	8005804 <Dem_ProcessFault+0x2c>
			{
				Dem_MemDtcArray[idx] = STD_LOW;
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	4a3b      	ldr	r2, [pc, #236]	; (80058ec <Dem_ProcessFault+0x114>)
 8005800:	2100      	movs	r1, #0
 8005802:	54d1      	strb	r1, [r2, r3]
		for(uint8 idx = STD_LOW; idx < 24; idx++)
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	3301      	adds	r3, #1
 8005808:	71fb      	strb	r3, [r7, #7]
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	2b17      	cmp	r3, #23
 800580e:	d9f0      	bls.n	80057f2 <Dem_ProcessFault+0x1a>
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_LOW)
 8005810:	4b37      	ldr	r3, [pc, #220]	; (80058f0 <Dem_ProcessFault+0x118>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <Dem_ProcessFault+0x4c>
	{
		Dem_DtcArray[POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION] = STD_LOW;
 8005818:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <Dem_ProcessFault+0x11c>)
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
		Dem_DtcArray[POSITION_DTC_LOW_BEAM_RIGHT_MALFUNCTION] = STD_LOW;
 800581e:	4b35      	ldr	r3, [pc, #212]	; (80058f4 <Dem_ProcessFault+0x11c>)
 8005820:	2200      	movs	r2, #0
 8005822:	705a      	strb	r2, [r3, #1]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 8005824:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <Dem_ProcessFault+0x120>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d105      	bne.n	8005838 <Dem_ProcessFault+0x60>
	{
		Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_LEFT_MALFUNCTION] = STD_LOW;
 800582c:	4b31      	ldr	r3, [pc, #196]	; (80058f4 <Dem_ProcessFault+0x11c>)
 800582e:	2200      	movs	r2, #0
 8005830:	721a      	strb	r2, [r3, #8]
		Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION] = STD_LOW;
 8005832:	4b30      	ldr	r3, [pc, #192]	; (80058f4 <Dem_ProcessFault+0x11c>)
 8005834:	2200      	movs	r2, #0
 8005836:	725a      	strb	r2, [r3, #9]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_LOW)
 8005838:	4b30      	ldr	r3, [pc, #192]	; (80058fc <Dem_ProcessFault+0x124>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <Dem_ProcessFault+0x74>
	{
		Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION] = STD_LOW;
 8005840:	4b2c      	ldr	r3, [pc, #176]	; (80058f4 <Dem_ProcessFault+0x11c>)
 8005842:	2200      	movs	r2, #0
 8005844:	709a      	strb	r2, [r3, #2]
		Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION] = STD_LOW;
 8005846:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <Dem_ProcessFault+0x11c>)
 8005848:	2200      	movs	r2, #0
 800584a:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 800584c:	4b2c      	ldr	r3, [pc, #176]	; (8005900 <Dem_ProcessFault+0x128>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <Dem_ProcessFault+0x88>
	{
		Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION] = STD_LOW;
 8005854:	4b27      	ldr	r3, [pc, #156]	; (80058f4 <Dem_ProcessFault+0x11c>)
 8005856:	2200      	movs	r2, #0
 8005858:	719a      	strb	r2, [r3, #6]
		Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION] = STD_LOW;
 800585a:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <Dem_ProcessFault+0x11c>)
 800585c:	2200      	movs	r2, #0
 800585e:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 8005860:	4b28      	ldr	r3, [pc, #160]	; (8005904 <Dem_ProcessFault+0x12c>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d105      	bne.n	8005874 <Dem_ProcessFault+0x9c>
	{
		Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION] = STD_LOW;
 8005868:	4b22      	ldr	r3, [pc, #136]	; (80058f4 <Dem_ProcessFault+0x11c>)
 800586a:	2200      	movs	r2, #0
 800586c:	711a      	strb	r2, [r3, #4]
		Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION] = STD_LOW;
 800586e:	4b21      	ldr	r3, [pc, #132]	; (80058f4 <Dem_ProcessFault+0x11c>)
 8005870:	2200      	movs	r2, #0
 8005872:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8005874:	4b24      	ldr	r3, [pc, #144]	; (8005908 <Dem_ProcessFault+0x130>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d103      	bne.n	8005884 <Dem_ProcessFault+0xac>
 800587c:	4b23      	ldr	r3, [pc, #140]	; (800590c <Dem_ProcessFault+0x134>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <Dem_ProcessFault+0xb2>
	{
		Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8005884:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <Dem_ProcessFault+0x11c>)
 8005886:	2200      	movs	r2, #0
 8005888:	739a      	strb	r2, [r3, #14]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 800588a:	4b21      	ldr	r3, [pc, #132]	; (8005910 <Dem_ProcessFault+0x138>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <Dem_ProcessFault+0xc2>
 8005892:	4b1e      	ldr	r3, [pc, #120]	; (800590c <Dem_ProcessFault+0x134>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <Dem_ProcessFault+0xc8>
	{
		Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 800589a:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <Dem_ProcessFault+0x11c>)
 800589c:	2200      	movs	r2, #0
 800589e:	73da      	strb	r2, [r3, #15]
	}
	else
	{
		/* do nothing */
	}
	for(uint8 index = POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION; index <= POSITION_DTC_PERIPHERAL_ERROR; index++)
 80058a0:	2300      	movs	r3, #0
 80058a2:	71bb      	strb	r3, [r7, #6]
 80058a4:	e015      	b.n	80058d2 <Dem_ProcessFault+0xfa>
	{
		if(Dem_MemDtcArray[index] != Dem_DtcArray[index] && Dem_DtcArray[index] >= 2)
 80058a6:	79bb      	ldrb	r3, [r7, #6]
 80058a8:	4a10      	ldr	r2, [pc, #64]	; (80058ec <Dem_ProcessFault+0x114>)
 80058aa:	5cd2      	ldrb	r2, [r2, r3]
 80058ac:	79bb      	ldrb	r3, [r7, #6]
 80058ae:	4911      	ldr	r1, [pc, #68]	; (80058f4 <Dem_ProcessFault+0x11c>)
 80058b0:	5ccb      	ldrb	r3, [r1, r3]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d00a      	beq.n	80058cc <Dem_ProcessFault+0xf4>
 80058b6:	79bb      	ldrb	r3, [r7, #6]
 80058b8:	4a0e      	ldr	r2, [pc, #56]	; (80058f4 <Dem_ProcessFault+0x11c>)
 80058ba:	5cd3      	ldrb	r3, [r2, r3]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d905      	bls.n	80058cc <Dem_ProcessFault+0xf4>
		{
			Dem_MemDtcArray[index] = Dem_DtcArray[index];
 80058c0:	79ba      	ldrb	r2, [r7, #6]
 80058c2:	79bb      	ldrb	r3, [r7, #6]
 80058c4:	490b      	ldr	r1, [pc, #44]	; (80058f4 <Dem_ProcessFault+0x11c>)
 80058c6:	5c89      	ldrb	r1, [r1, r2]
 80058c8:	4a08      	ldr	r2, [pc, #32]	; (80058ec <Dem_ProcessFault+0x114>)
 80058ca:	54d1      	strb	r1, [r2, r3]
	for(uint8 index = POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION; index <= POSITION_DTC_PERIPHERAL_ERROR; index++)
 80058cc:	79bb      	ldrb	r3, [r7, #6]
 80058ce:	3301      	adds	r3, #1
 80058d0:	71bb      	strb	r3, [r7, #6]
 80058d2:	79bb      	ldrb	r3, [r7, #6]
 80058d4:	2b17      	cmp	r3, #23
 80058d6:	d9e6      	bls.n	80058a6 <Dem_ProcessFault+0xce>
		else
		{
			/* do nothing */
		}
	}
	Rte_Read_Dem_DemPort_Dem_DtcArray(0, 0);
 80058d8:	2100      	movs	r1, #0
 80058da:	2000      	movs	r0, #0
 80058dc:	f00b fe0c 	bl	80114f8 <Rte_Read_Dem_DemPort_Dem_DtcArray>
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	200008c0 	.word	0x200008c0
 80058ec:	200008a8 	.word	0x200008a8
 80058f0:	20000154 	.word	0x20000154
 80058f4:	20000890 	.word	0x20000890
 80058f8:	2000014e 	.word	0x2000014e
 80058fc:	20000155 	.word	0x20000155
 8005900:	20000152 	.word	0x20000152
 8005904:	20000153 	.word	0x20000153
 8005908:	20000945 	.word	0x20000945
 800590c:	2000014c 	.word	0x2000014c
 8005910:	20000935 	.word	0x20000935

08005914 <Dem_ReceiveFault>:
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
	switch(faultValue)
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	3b02      	subs	r3, #2
 8005922:	2b97      	cmp	r3, #151	; 0x97
 8005924:	f200 819f 	bhi.w	8005c66 <Dem_ReceiveFault+0x352>
 8005928:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <Dem_ReceiveFault+0x1c>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	08005c27 	.word	0x08005c27
 8005934:	08005c0f 	.word	0x08005c0f
 8005938:	08005b91 	.word	0x08005b91
 800593c:	08005b9f 	.word	0x08005b9f
 8005940:	08005c67 	.word	0x08005c67
 8005944:	08005c67 	.word	0x08005c67
 8005948:	08005c67 	.word	0x08005c67
 800594c:	08005c67 	.word	0x08005c67
 8005950:	08005c67 	.word	0x08005c67
 8005954:	08005c67 	.word	0x08005c67
 8005958:	08005c67 	.word	0x08005c67
 800595c:	08005c67 	.word	0x08005c67
 8005960:	08005c67 	.word	0x08005c67
 8005964:	08005c67 	.word	0x08005c67
 8005968:	08005c67 	.word	0x08005c67
 800596c:	08005c67 	.word	0x08005c67
 8005970:	08005c2f 	.word	0x08005c2f
 8005974:	08005c17 	.word	0x08005c17
 8005978:	08005c67 	.word	0x08005c67
 800597c:	08005c67 	.word	0x08005c67
 8005980:	08005c67 	.word	0x08005c67
 8005984:	08005c67 	.word	0x08005c67
 8005988:	08005c67 	.word	0x08005c67
 800598c:	08005c67 	.word	0x08005c67
 8005990:	08005c67 	.word	0x08005c67
 8005994:	08005c67 	.word	0x08005c67
 8005998:	08005c67 	.word	0x08005c67
 800599c:	08005c67 	.word	0x08005c67
 80059a0:	08005c67 	.word	0x08005c67
 80059a4:	08005c67 	.word	0x08005c67
 80059a8:	08005c67 	.word	0x08005c67
 80059ac:	08005c67 	.word	0x08005c67
 80059b0:	08005c37 	.word	0x08005c37
 80059b4:	08005c67 	.word	0x08005c67
 80059b8:	08005c67 	.word	0x08005c67
 80059bc:	08005c67 	.word	0x08005c67
 80059c0:	08005c67 	.word	0x08005c67
 80059c4:	08005c67 	.word	0x08005c67
 80059c8:	08005c67 	.word	0x08005c67
 80059cc:	08005c67 	.word	0x08005c67
 80059d0:	08005c67 	.word	0x08005c67
 80059d4:	08005c67 	.word	0x08005c67
 80059d8:	08005c67 	.word	0x08005c67
 80059dc:	08005c67 	.word	0x08005c67
 80059e0:	08005c67 	.word	0x08005c67
 80059e4:	08005c67 	.word	0x08005c67
 80059e8:	08005c67 	.word	0x08005c67
 80059ec:	08005c67 	.word	0x08005c67
 80059f0:	08005c3f 	.word	0x08005c3f
 80059f4:	08005c1f 	.word	0x08005c1f
 80059f8:	08005c67 	.word	0x08005c67
 80059fc:	08005c4f 	.word	0x08005c4f
 8005a00:	08005c67 	.word	0x08005c67
 8005a04:	08005c67 	.word	0x08005c67
 8005a08:	08005c67 	.word	0x08005c67
 8005a0c:	08005c67 	.word	0x08005c67
 8005a10:	08005c67 	.word	0x08005c67
 8005a14:	08005c67 	.word	0x08005c67
 8005a18:	08005c67 	.word	0x08005c67
 8005a1c:	08005c67 	.word	0x08005c67
 8005a20:	08005c67 	.word	0x08005c67
 8005a24:	08005c67 	.word	0x08005c67
 8005a28:	08005c67 	.word	0x08005c67
 8005a2c:	08005c67 	.word	0x08005c67
 8005a30:	08005c67 	.word	0x08005c67
 8005a34:	08005c67 	.word	0x08005c67
 8005a38:	08005bad 	.word	0x08005bad
 8005a3c:	08005bbb 	.word	0x08005bbb
 8005a40:	08005c67 	.word	0x08005c67
 8005a44:	08005c67 	.word	0x08005c67
 8005a48:	08005c67 	.word	0x08005c67
 8005a4c:	08005c67 	.word	0x08005c67
 8005a50:	08005c67 	.word	0x08005c67
 8005a54:	08005c67 	.word	0x08005c67
 8005a58:	08005c67 	.word	0x08005c67
 8005a5c:	08005c67 	.word	0x08005c67
 8005a60:	08005c67 	.word	0x08005c67
 8005a64:	08005c67 	.word	0x08005c67
 8005a68:	08005c67 	.word	0x08005c67
 8005a6c:	08005c67 	.word	0x08005c67
 8005a70:	08005c67 	.word	0x08005c67
 8005a74:	08005c67 	.word	0x08005c67
 8005a78:	08005bc9 	.word	0x08005bc9
 8005a7c:	08005c67 	.word	0x08005c67
 8005a80:	08005c57 	.word	0x08005c57
 8005a84:	08005c67 	.word	0x08005c67
 8005a88:	08005c67 	.word	0x08005c67
 8005a8c:	08005c67 	.word	0x08005c67
 8005a90:	08005c67 	.word	0x08005c67
 8005a94:	08005c67 	.word	0x08005c67
 8005a98:	08005c67 	.word	0x08005c67
 8005a9c:	08005c67 	.word	0x08005c67
 8005aa0:	08005c67 	.word	0x08005c67
 8005aa4:	08005c67 	.word	0x08005c67
 8005aa8:	08005c67 	.word	0x08005c67
 8005aac:	08005c67 	.word	0x08005c67
 8005ab0:	08005c47 	.word	0x08005c47
 8005ab4:	08005c67 	.word	0x08005c67
 8005ab8:	08005bd7 	.word	0x08005bd7
 8005abc:	08005be5 	.word	0x08005be5
 8005ac0:	08005c67 	.word	0x08005c67
 8005ac4:	08005c67 	.word	0x08005c67
 8005ac8:	08005c67 	.word	0x08005c67
 8005acc:	08005c67 	.word	0x08005c67
 8005ad0:	08005c67 	.word	0x08005c67
 8005ad4:	08005c67 	.word	0x08005c67
 8005ad8:	08005c67 	.word	0x08005c67
 8005adc:	08005c67 	.word	0x08005c67
 8005ae0:	08005c67 	.word	0x08005c67
 8005ae4:	08005c67 	.word	0x08005c67
 8005ae8:	08005c67 	.word	0x08005c67
 8005aec:	08005c67 	.word	0x08005c67
 8005af0:	08005c67 	.word	0x08005c67
 8005af4:	08005c67 	.word	0x08005c67
 8005af8:	08005bf3 	.word	0x08005bf3
 8005afc:	08005c01 	.word	0x08005c01
 8005b00:	08005c67 	.word	0x08005c67
 8005b04:	08005c67 	.word	0x08005c67
 8005b08:	08005c67 	.word	0x08005c67
 8005b0c:	08005c67 	.word	0x08005c67
 8005b10:	08005c67 	.word	0x08005c67
 8005b14:	08005c67 	.word	0x08005c67
 8005b18:	08005c67 	.word	0x08005c67
 8005b1c:	08005c67 	.word	0x08005c67
 8005b20:	08005c67 	.word	0x08005c67
 8005b24:	08005c67 	.word	0x08005c67
 8005b28:	08005c67 	.word	0x08005c67
 8005b2c:	08005c67 	.word	0x08005c67
 8005b30:	08005c67 	.word	0x08005c67
 8005b34:	08005c67 	.word	0x08005c67
 8005b38:	08005c67 	.word	0x08005c67
 8005b3c:	08005c67 	.word	0x08005c67
 8005b40:	08005c67 	.word	0x08005c67
 8005b44:	08005c67 	.word	0x08005c67
 8005b48:	08005c67 	.word	0x08005c67
 8005b4c:	08005c67 	.word	0x08005c67
 8005b50:	08005c67 	.word	0x08005c67
 8005b54:	08005c67 	.word	0x08005c67
 8005b58:	08005c67 	.word	0x08005c67
 8005b5c:	08005c67 	.word	0x08005c67
 8005b60:	08005c67 	.word	0x08005c67
 8005b64:	08005c67 	.word	0x08005c67
 8005b68:	08005c67 	.word	0x08005c67
 8005b6c:	08005c67 	.word	0x08005c67
 8005b70:	08005c67 	.word	0x08005c67
 8005b74:	08005c67 	.word	0x08005c67
 8005b78:	08005c67 	.word	0x08005c67
 8005b7c:	08005c67 	.word	0x08005c67
 8005b80:	08005c67 	.word	0x08005c67
 8005b84:	08005c67 	.word	0x08005c67
 8005b88:	08005c67 	.word	0x08005c67
 8005b8c:	08005c5f 	.word	0x08005c5f
	{
		case DTC_LOW_BEAM_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION]++;
 8005b90:	4b38      	ldr	r3, [pc, #224]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005b9a:	701a      	strb	r2, [r3, #0]
			break;
 8005b9c:	e064      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_LOW_BEAM_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LOW_BEAM_RIGHT_MALFUNCTION]++;
 8005b9e:	4b35      	ldr	r3, [pc, #212]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	4b33      	ldr	r3, [pc, #204]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005ba8:	705a      	strb	r2, [r3, #1]
			break;
 8005baa:	e05d      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION]++;
 8005bac:	4b31      	ldr	r3, [pc, #196]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005bae:	789b      	ldrb	r3, [r3, #2]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005bb6:	709a      	strb	r2, [r3, #2]
			break;
 8005bb8:	e056      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION]++;
 8005bba:	4b2e      	ldr	r3, [pc, #184]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005bbc:	78db      	ldrb	r3, [r3, #3]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	4b2c      	ldr	r3, [pc, #176]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005bc4:	70da      	strb	r2, [r3, #3]
			break;
 8005bc6:	e04f      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION]++;
 8005bc8:	4b2a      	ldr	r3, [pc, #168]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005bca:	791b      	ldrb	r3, [r3, #4]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	4b28      	ldr	r3, [pc, #160]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005bd2:	711a      	strb	r2, [r3, #4]
			break;
 8005bd4:	e048      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION]++;
 8005bd6:	4b27      	ldr	r3, [pc, #156]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005bd8:	799b      	ldrb	r3, [r3, #6]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005be0:	719a      	strb	r2, [r3, #6]
			break;
 8005be2:	e041      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION]++;
 8005be4:	4b23      	ldr	r3, [pc, #140]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005be6:	79db      	ldrb	r3, [r3, #7]
 8005be8:	3301      	adds	r3, #1
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	4b21      	ldr	r3, [pc, #132]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005bee:	71da      	strb	r2, [r3, #7]
			break;
 8005bf0:	e03a      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_BRAKE_LIGHT_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_LEFT_MALFUNCTION]++;
 8005bf2:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005bf4:	7a1b      	ldrb	r3, [r3, #8]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005bfc:	721a      	strb	r2, [r3, #8]
			break;
 8005bfe:	e033      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION]++;
 8005c00:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c02:	7a5b      	ldrb	r3, [r3, #9]
 8005c04:	3301      	adds	r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	4b1a      	ldr	r3, [pc, #104]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c0a:	725a      	strb	r2, [r3, #9]
			break;
 8005c0c:	e02c      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_LIGHT_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LIGHT_SENSOR_MALFUNCTION] = DTC_LIGHT_SENSOR_MALFUNCTION;
 8005c0e:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c10:	2203      	movs	r2, #3
 8005c12:	729a      	strb	r2, [r3, #10]
			break;
 8005c14:	e028      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_VIBRATION_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_VIBRATION_SENSOR_MALFUNCTION] = DTC_VIBRATION_SENSOR_MALFUNCTION;
 8005c16:	4b17      	ldr	r3, [pc, #92]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c18:	2213      	movs	r2, #19
 8005c1a:	72da      	strb	r2, [r3, #11]
			break;
 8005c1c:	e024      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_TEMPERATURE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_POSITION_DTC_TEMPERATURE_SENSOR_MALFUNCTION] = DTC_TEMPERATURE_SENSOR_MALFUNCTION;
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c20:	2233      	movs	r2, #51	; 0x33
 8005c22:	735a      	strb	r2, [r3, #13]
			break;
 8005c24:	e020      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8005c26:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c28:	2202      	movs	r2, #2
 8005c2a:	739a      	strb	r2, [r3, #14]
			break;
 8005c2c:	e01c      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8005c2e:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c30:	2212      	movs	r2, #18
 8005c32:	73da      	strb	r2, [r3, #15]
			break;
 8005c34:	e018      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_BLUETOOTH_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BLUETOOTH_MODULE_MALFUNCTION] = DTC_BLUETOOTH_MODULE_MALFUNCTION;
 8005c36:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c38:	2222      	movs	r2, #34	; 0x22
 8005c3a:	741a      	strb	r2, [r3, #16]
			break;
 8005c3c:	e014      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION] = DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION;
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c40:	2232      	movs	r2, #50	; 0x32
 8005c42:	745a      	strb	r2, [r3, #17]
			break;
 8005c44:	e010      	b.n	8005c68 <Dem_ReceiveFault+0x354>
#if(CAN_SPI_COMMUNICATION_ENABLE == STD_ON)
			Dem_DtcArray[POSITION_DTC_CAN_BUS_OFF]++;
#endif
			break;
		case DTC_LCD_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LCD_MODULE_MALFUNCTION] = DTC_LCD_MODULE_MALFUNCTION;
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c48:	2262      	movs	r2, #98	; 0x62
 8005c4a:	751a      	strb	r2, [r3, #20]
			break;
 8005c4c:	e00c      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_SOFTWARE_RESET:
			Dem_DtcArray[POSITION_DTC_SOFTWARE_RESET] = DTC_SOFTWARE_RESET;
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c50:	2235      	movs	r2, #53	; 0x35
 8005c52:	755a      	strb	r2, [r3, #21]
			break;
 8005c54:	e008      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_HARDWARE_RESET:
			Dem_DtcArray[POSITION_DTC_HARDWARE_RESET] = DTC_HARDWARE_RESET;
 8005c56:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c58:	2256      	movs	r2, #86	; 0x56
 8005c5a:	759a      	strb	r2, [r3, #22]
			break;
 8005c5c:	e004      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		case DTC_PERIPHERAL_ERROR:
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <Dem_ReceiveFault+0x360>)
 8005c60:	2299      	movs	r2, #153	; 0x99
 8005c62:	75da      	strb	r2, [r3, #23]
			break;
 8005c64:	e000      	b.n	8005c68 <Dem_ReceiveFault+0x354>
		default:
			break;
 8005c66:	bf00      	nop
	}
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	20000890 	.word	0x20000890

08005c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c7c:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <HAL_Init+0x40>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a0d      	ldr	r2, [pc, #52]	; (8005cb8 <HAL_Init+0x40>)
 8005c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <HAL_Init+0x40>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <HAL_Init+0x40>)
 8005c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c94:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <HAL_Init+0x40>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a07      	ldr	r2, [pc, #28]	; (8005cb8 <HAL_Init+0x40>)
 8005c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ca0:	2003      	movs	r0, #3
 8005ca2:	f000 fefb 	bl	8006a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ca6:	200f      	movs	r0, #15
 8005ca8:	f7ff f87c 	bl	8004da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cac:	f7ff f830 	bl	8004d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023c00 	.word	0x40023c00

08005cbc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8005cc0:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <HAL_DeInit+0x54>)
 8005cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8005cc8:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <HAL_DeInit+0x54>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8005cce:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <HAL_DeInit+0x54>)
 8005cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8005cd6:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <HAL_DeInit+0x54>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <HAL_DeInit+0x54>)
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <HAL_DeInit+0x54>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <HAL_DeInit+0x54>)
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8005cf2:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <HAL_DeInit+0x54>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_DeInit+0x54>)
 8005cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfe:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8005d00:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <HAL_DeInit+0x54>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8005d06:	f000 f805 	bl	8005d14 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40023800 	.word	0x40023800

08005d14 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8005d18:	bf00      	nop
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d28:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <HAL_IncTick+0x20>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <HAL_IncTick+0x24>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4413      	add	r3, r2
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <HAL_IncTick+0x24>)
 8005d36:	6013      	str	r3, [r2, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000054 	.word	0x20000054
 8005d48:	200008c4 	.word	0x200008c4

08005d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d50:	4b03      	ldr	r3, [pc, #12]	; (8005d60 <HAL_GetTick+0x14>)
 8005d52:	681b      	ldr	r3, [r3, #0]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	200008c4 	.word	0x200008c4

08005d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d6c:	f7ff ffee 	bl	8005d4c <HAL_GetTick>
 8005d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d005      	beq.n	8005d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <HAL_Delay+0x44>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d8a:	bf00      	nop
 8005d8c:	f7ff ffde 	bl	8005d4c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d8f7      	bhi.n	8005d8c <HAL_Delay+0x28>
  {
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000054 	.word	0x20000054

08005dac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e04a      	b.n	8005e58 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d120      	bne.n	8005e0c <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a24      	ldr	r2, [pc, #144]	; (8005e60 <HAL_ADC_Init+0xb4>)
 8005dce:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a24      	ldr	r2, [pc, #144]	; (8005e64 <HAL_ADC_Init+0xb8>)
 8005dd4:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a23      	ldr	r2, [pc, #140]	; (8005e68 <HAL_ADC_Init+0xbc>)
 8005dda:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <HAL_ADC_Init+0xc0>)
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <HAL_ADC_Init+0xc4>)
 8005de6:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <HAL_ADC_Init+0xc8>)
 8005df4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d118      	bne.n	8005e4a <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e20:	f023 0302 	bic.w	r3, r3, #2
 8005e24:	f043 0202 	orr.w	r2, r3, #2
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fbc1 	bl	80065b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	f023 0303 	bic.w	r3, r3, #3
 8005e40:	f043 0201 	orr.w	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
 8005e48:	e001      	b.n	8005e4e <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	0800d305 	.word	0x0800d305
 8005e64:	080062f9 	.word	0x080062f9
 8005e68:	0800630d 	.word	0x0800630d
 8005e6c:	0800d341 	.word	0x0800d341
 8005e70:	080068b9 	.word	0x080068b9
 8005e74:	08004131 	.word	0x08004131

08005e78 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e02a      	b.n	8005ee4 <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f043 0202 	orr.w	r2, r3, #2
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d110      	bne.n	8005eda <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d102      	bne.n	8005ec6 <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <HAL_ADC_DeInit+0x74>)
 8005ec4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	080042a5 	.word	0x080042a5

08005ef0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	2300      	movs	r3, #0
 8005efe:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d04a      	beq.n	8005fbc <HAL_ADC_IRQHandler+0xcc>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d047      	beq.n	8005fbc <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d12b      	bne.n	8005faa <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d127      	bne.n	8005faa <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d006      	beq.n	8005f76 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d119      	bne.n	8005faa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0220 	bic.w	r2, r2, #32
 8005f84:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d105      	bne.n	8005faa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f043 0201 	orr.w	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f06f 0212 	mvn.w	r2, #18
 8005fba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f003 0304 	and.w	r3, r3, #4
 8005fc2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d058      	beq.n	8006084 <HAL_ADC_IRQHandler+0x194>
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d055      	beq.n	8006084 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d139      	bne.n	8006072 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006008:	2b00      	cmp	r3, #0
 800600a:	d006      	beq.n	800601a <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006016:	2b00      	cmp	r3, #0
 8006018:	d12b      	bne.n	8006072 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006024:	2b00      	cmp	r3, #0
 8006026:	d124      	bne.n	8006072 <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006032:	2b00      	cmp	r3, #0
 8006034:	d11d      	bne.n	8006072 <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800603a:	2b00      	cmp	r3, #0
 800603c:	d119      	bne.n	8006072 <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800604c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	2b00      	cmp	r3, #0
 8006064:	d105      	bne.n	8006072 <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	f043 0201 	orr.w	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f06f 020c 	mvn.w	r2, #12
 8006082:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d018      	beq.n	80060cc <HAL_ADC_IRQHandler+0x1dc>
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d015      	beq.n	80060cc <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d10e      	bne.n	80060cc <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f06f 0201 	mvn.w	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060da:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d016      	beq.n	8006110 <HAL_ADC_IRQHandler+0x220>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d013      	beq.n	8006110 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ec:	f043 0202 	orr.w	r2, r3, #2
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0220 	mvn.w	r2, #32
 80060fc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f06f 0220 	mvn.w	r2, #32
 800610e:	601a      	str	r2, [r3, #0]
  }
}
 8006110:	bf00      	nop
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_ADC_Start_DMA+0x1e>
 8006132:	2302      	movs	r3, #2
 8006134:	e0ce      	b.n	80062d4 <HAL_ADC_Start_DMA+0x1bc>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b01      	cmp	r3, #1
 800614a:	d018      	beq.n	800617e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800615c:	4b5f      	ldr	r3, [pc, #380]	; (80062dc <HAL_ADC_Start_DMA+0x1c4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a5f      	ldr	r2, [pc, #380]	; (80062e0 <HAL_ADC_Start_DMA+0x1c8>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	0c9a      	lsrs	r2, r3, #18
 8006168:	4613      	mov	r3, r2
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	4413      	add	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006170:	e002      	b.n	8006178 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	3b01      	subs	r3, #1
 8006176:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f9      	bne.n	8006172 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800618c:	d107      	bne.n	800619e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800619c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	f040 8086 	bne.w	80062ba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80061d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ec:	d106      	bne.n	80061fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f2:	f023 0206 	bic.w	r2, r3, #6
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44
 80061fa:	e002      	b.n	8006202 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800620a:	4b36      	ldr	r3, [pc, #216]	; (80062e4 <HAL_ADC_Start_DMA+0x1cc>)
 800620c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	4a35      	ldr	r2, [pc, #212]	; (80062e8 <HAL_ADC_Start_DMA+0x1d0>)
 8006214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	4a34      	ldr	r2, [pc, #208]	; (80062ec <HAL_ADC_Start_DMA+0x1d4>)
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	4a33      	ldr	r2, [pc, #204]	; (80062f0 <HAL_ADC_Start_DMA+0x1d8>)
 8006224:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800622e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800623e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800624e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	334c      	adds	r3, #76	; 0x4c
 800625a:	4619      	mov	r1, r3
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f000 fe78 	bl	8006f54 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10f      	bne.n	8006290 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d129      	bne.n	80062d2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800628c:	609a      	str	r2, [r3, #8]
 800628e:	e020      	b.n	80062d2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a17      	ldr	r2, [pc, #92]	; (80062f4 <HAL_ADC_Start_DMA+0x1dc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d11b      	bne.n	80062d2 <HAL_ADC_Start_DMA+0x1ba>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d114      	bne.n	80062d2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	e00b      	b.n	80062d2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0210 	orr.w	r2, r3, #16
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	f043 0201 	orr.w	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	2000004c 	.word	0x2000004c
 80062e0:	431bde83 	.word	0x431bde83
 80062e4:	40012300 	.word	0x40012300
 80062e8:	080067ad 	.word	0x080067ad
 80062ec:	0800686b 	.word	0x0800686b
 80062f0:	08006889 	.word	0x08006889
 80062f4:	40012000 	.word	0x40012000

080062f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_ADC_ConfigChannel+0x1c>
 8006338:	2302      	movs	r3, #2
 800633a:	e113      	b.n	8006564 <HAL_ADC_ConfigChannel+0x244>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b09      	cmp	r3, #9
 800634a:	d925      	bls.n	8006398 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68d9      	ldr	r1, [r3, #12]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	4613      	mov	r3, r2
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	4413      	add	r3, r2
 8006360:	3b1e      	subs	r3, #30
 8006362:	2207      	movs	r2, #7
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43da      	mvns	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	400a      	ands	r2, r1
 8006370:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68d9      	ldr	r1, [r3, #12]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	4618      	mov	r0, r3
 8006384:	4603      	mov	r3, r0
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	4403      	add	r3, r0
 800638a:	3b1e      	subs	r3, #30
 800638c:	409a      	lsls	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	e022      	b.n	80063de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6919      	ldr	r1, [r3, #16]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	4613      	mov	r3, r2
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	4413      	add	r3, r2
 80063ac:	2207      	movs	r2, #7
 80063ae:	fa02 f303 	lsl.w	r3, r2, r3
 80063b2:	43da      	mvns	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	400a      	ands	r2, r1
 80063ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6919      	ldr	r1, [r3, #16]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	4618      	mov	r0, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	4403      	add	r3, r0
 80063d4:	409a      	lsls	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b06      	cmp	r3, #6
 80063e4:	d824      	bhi.n	8006430 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	3b05      	subs	r3, #5
 80063f8:	221f      	movs	r2, #31
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	43da      	mvns	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	400a      	ands	r2, r1
 8006406:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	4618      	mov	r0, r3
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	3b05      	subs	r3, #5
 8006422:	fa00 f203 	lsl.w	r2, r0, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	635a      	str	r2, [r3, #52]	; 0x34
 800642e:	e04c      	b.n	80064ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b0c      	cmp	r3, #12
 8006436:	d824      	bhi.n	8006482 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	3b23      	subs	r3, #35	; 0x23
 800644a:	221f      	movs	r2, #31
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	43da      	mvns	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	400a      	ands	r2, r1
 8006458:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	4618      	mov	r0, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	3b23      	subs	r3, #35	; 0x23
 8006474:	fa00 f203 	lsl.w	r2, r0, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	631a      	str	r2, [r3, #48]	; 0x30
 8006480:	e023      	b.n	80064ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	3b41      	subs	r3, #65	; 0x41
 8006494:	221f      	movs	r2, #31
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43da      	mvns	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	400a      	ands	r2, r1
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	4618      	mov	r0, r3
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	3b41      	subs	r3, #65	; 0x41
 80064be:	fa00 f203 	lsl.w	r2, r0, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064ca:	4b29      	ldr	r3, [pc, #164]	; (8006570 <HAL_ADC_ConfigChannel+0x250>)
 80064cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a28      	ldr	r2, [pc, #160]	; (8006574 <HAL_ADC_ConfigChannel+0x254>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d10f      	bne.n	80064f8 <HAL_ADC_ConfigChannel+0x1d8>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b12      	cmp	r3, #18
 80064de:	d10b      	bne.n	80064f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <HAL_ADC_ConfigChannel+0x254>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d12b      	bne.n	800655a <HAL_ADC_ConfigChannel+0x23a>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1c      	ldr	r2, [pc, #112]	; (8006578 <HAL_ADC_ConfigChannel+0x258>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <HAL_ADC_ConfigChannel+0x1f4>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b11      	cmp	r3, #17
 8006512:	d122      	bne.n	800655a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a11      	ldr	r2, [pc, #68]	; (8006578 <HAL_ADC_ConfigChannel+0x258>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d111      	bne.n	800655a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006536:	4b11      	ldr	r3, [pc, #68]	; (800657c <HAL_ADC_ConfigChannel+0x25c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a11      	ldr	r2, [pc, #68]	; (8006580 <HAL_ADC_ConfigChannel+0x260>)
 800653c:	fba2 2303 	umull	r2, r3, r2, r3
 8006540:	0c9a      	lsrs	r2, r3, #18
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800654c:	e002      	b.n	8006554 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3b01      	subs	r3, #1
 8006552:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f9      	bne.n	800654e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	40012300 	.word	0x40012300
 8006574:	40012000 	.word	0x40012000
 8006578:	10000012 	.word	0x10000012
 800657c:	2000004c 	.word	0x2000004c
 8006580:	431bde83 	.word	0x431bde83

08006584 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065bc:	4b79      	ldr	r3, [pc, #484]	; (80067a4 <ADC_Init+0x1f0>)
 80065be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	431a      	orrs	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6859      	ldr	r1, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	021a      	lsls	r2, r3, #8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800660c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6859      	ldr	r1, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800662e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6899      	ldr	r1, [r3, #8]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	4a58      	ldr	r2, [pc, #352]	; (80067a8 <ADC_Init+0x1f4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800665a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6899      	ldr	r1, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800667c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6899      	ldr	r1, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	609a      	str	r2, [r3, #8]
 8006690:	e00f      	b.n	80066b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80066b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0202 	bic.w	r2, r2, #2
 80066c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6899      	ldr	r1, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	7e1b      	ldrb	r3, [r3, #24]
 80066cc:	005a      	lsls	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01b      	beq.n	8006718 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80066fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	3b01      	subs	r3, #1
 800670c:	035a      	lsls	r2, r3, #13
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
 8006716:	e007      	b.n	8006728 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006726:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	3b01      	subs	r3, #1
 8006744:	051a      	lsls	r2, r3, #20
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800675c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6899      	ldr	r1, [r3, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800676a:	025a      	lsls	r2, r3, #9
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6899      	ldr	r1, [r3, #8]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	029a      	lsls	r2, r3, #10
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	609a      	str	r2, [r3, #8]
}
 8006798:	bf00      	nop
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	40012300 	.word	0x40012300
 80067a8:	0f000001 	.word	0x0f000001

080067ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d13d      	bne.n	8006842 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d12b      	bne.n	8006838 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d127      	bne.n	8006838 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d006      	beq.n	8006804 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006800:	2b00      	cmp	r3, #0
 8006802:	d119      	bne.n	8006838 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0220 	bic.w	r2, r2, #32
 8006812:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d105      	bne.n	8006838 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006830:	f043 0201 	orr.w	r2, r3, #1
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006840:	e00f      	b.n	8006862 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	4798      	blx	r3
}
 8006856:	e004      	b.n	8006862 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	4798      	blx	r3
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006894:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2240      	movs	r2, #64	; 0x40
 800689a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a0:	f043 0204 	orr.w	r2, r3, #4
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068b0:	bf00      	nop
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <__NVIC_SetPriorityGrouping+0x44>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068e8:	4013      	ands	r3, r2
 80068ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068fe:	4a04      	ldr	r2, [pc, #16]	; (8006910 <__NVIC_SetPriorityGrouping+0x44>)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	60d3      	str	r3, [r2, #12]
}
 8006904:	bf00      	nop
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	e000ed00 	.word	0xe000ed00

08006914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <__NVIC_GetPriorityGrouping+0x18>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	0a1b      	lsrs	r3, r3, #8
 800691e:	f003 0307 	and.w	r3, r3, #7
}
 8006922:	4618      	mov	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	e000ed00 	.word	0xe000ed00

08006930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800693a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693e:	2b00      	cmp	r3, #0
 8006940:	db0b      	blt.n	800695a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	f003 021f 	and.w	r2, r3, #31
 8006948:	4907      	ldr	r1, [pc, #28]	; (8006968 <__NVIC_EnableIRQ+0x38>)
 800694a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	2001      	movs	r0, #1
 8006952:	fa00 f202 	lsl.w	r2, r0, r2
 8006956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	e000e100 	.word	0xe000e100

0800696c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800697a:	2b00      	cmp	r3, #0
 800697c:	db12      	blt.n	80069a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	f003 021f 	and.w	r2, r3, #31
 8006984:	490a      	ldr	r1, [pc, #40]	; (80069b0 <__NVIC_DisableIRQ+0x44>)
 8006986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	2001      	movs	r0, #1
 800698e:	fa00 f202 	lsl.w	r2, r0, r2
 8006992:	3320      	adds	r3, #32
 8006994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006998:	f3bf 8f4f 	dsb	sy
}
 800699c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800699e:	f3bf 8f6f 	isb	sy
}
 80069a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	e000e100 	.word	0xe000e100

080069b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	6039      	str	r1, [r7, #0]
 80069be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	db0a      	blt.n	80069de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	490c      	ldr	r1, [pc, #48]	; (8006a00 <__NVIC_SetPriority+0x4c>)
 80069ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d2:	0112      	lsls	r2, r2, #4
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	440b      	add	r3, r1
 80069d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069dc:	e00a      	b.n	80069f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	4908      	ldr	r1, [pc, #32]	; (8006a04 <__NVIC_SetPriority+0x50>)
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	3b04      	subs	r3, #4
 80069ec:	0112      	lsls	r2, r2, #4
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	440b      	add	r3, r1
 80069f2:	761a      	strb	r2, [r3, #24]
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	e000e100 	.word	0xe000e100
 8006a04:	e000ed00 	.word	0xe000ed00

08006a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b089      	sub	sp, #36	; 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	f1c3 0307 	rsb	r3, r3, #7
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	bf28      	it	cs
 8006a26:	2304      	movcs	r3, #4
 8006a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	2b06      	cmp	r3, #6
 8006a30:	d902      	bls.n	8006a38 <NVIC_EncodePriority+0x30>
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	3b03      	subs	r3, #3
 8006a36:	e000      	b.n	8006a3a <NVIC_EncodePriority+0x32>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	43da      	mvns	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a50:	f04f 31ff 	mov.w	r1, #4294967295
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5a:	43d9      	mvns	r1, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a60:	4313      	orrs	r3, r2
         );
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3724      	adds	r7, #36	; 0x24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
	...

08006a70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006a74:	f3bf 8f4f 	dsb	sy
}
 8006a78:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006a7a:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <__NVIC_SystemReset+0x24>)
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006a82:	4904      	ldr	r1, [pc, #16]	; (8006a94 <__NVIC_SystemReset+0x24>)
 8006a84:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <__NVIC_SystemReset+0x28>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a8a:	f3bf 8f4f 	dsb	sy
}
 8006a8e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <__NVIC_SystemReset+0x20>
 8006a94:	e000ed00 	.word	0xe000ed00
 8006a98:	05fa0004 	.word	0x05fa0004

08006a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff ff11 	bl	80068cc <__NVIC_SetPriorityGrouping>
}
 8006aaa:	bf00      	nop
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b086      	sub	sp, #24
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	4603      	mov	r3, r0
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	607a      	str	r2, [r7, #4]
 8006abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ac4:	f7ff ff26 	bl	8006914 <__NVIC_GetPriorityGrouping>
 8006ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	6978      	ldr	r0, [r7, #20]
 8006ad0:	f7ff ff9a 	bl	8006a08 <NVIC_EncodePriority>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ada:	4611      	mov	r1, r2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff ff69 	bl	80069b4 <__NVIC_SetPriority>
}
 8006ae2:	bf00      	nop
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	4603      	mov	r3, r0
 8006af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff ff19 	bl	8006930 <__NVIC_EnableIRQ>
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff29 	bl	800696c <__NVIC_DisableIRQ>
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006b26:	f7ff ffa3 	bl	8006a70 <__NVIC_SystemReset>
	...

08006b2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006b30:	f3bf 8f5f 	dmb	sy
}
 8006b34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006b36:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <HAL_MPU_Disable+0x28>)
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	4a06      	ldr	r2, [pc, #24]	; (8006b54 <HAL_MPU_Disable+0x28>)
 8006b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b40:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8006b42:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <HAL_MPU_Disable+0x2c>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	605a      	str	r2, [r3, #4]
}
 8006b48:	bf00      	nop
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	e000ed00 	.word	0xe000ed00
 8006b58:	e000ed90 	.word	0xe000ed90

08006b5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006b64:	4a0b      	ldr	r2, [pc, #44]	; (8006b94 <HAL_MPU_Enable+0x38>)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f043 0301 	orr.w	r3, r3, #1
 8006b6c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006b6e:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <HAL_MPU_Enable+0x3c>)
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	4a09      	ldr	r2, [pc, #36]	; (8006b98 <HAL_MPU_Enable+0x3c>)
 8006b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b78:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006b7a:	f3bf 8f4f 	dsb	sy
}
 8006b7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b80:	f3bf 8f6f 	isb	sy
}
 8006b84:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	e000ed90 	.word	0xe000ed90
 8006b98:	e000ed00 	.word	0xe000ed00

08006b9c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	785a      	ldrb	r2, [r3, #1]
 8006ba8:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <HAL_MPU_ConfigRegion+0x84>)
 8006baa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d029      	beq.n	8006c08 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006bb4:	4a1a      	ldr	r2, [pc, #104]	; (8006c20 <HAL_MPU_ConfigRegion+0x84>)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7b1b      	ldrb	r3, [r3, #12]
 8006bc0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	7adb      	ldrb	r3, [r3, #11]
 8006bc6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006bc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	7a9b      	ldrb	r3, [r3, #10]
 8006bce:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006bd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	7b5b      	ldrb	r3, [r3, #13]
 8006bd6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006bd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	7b9b      	ldrb	r3, [r3, #14]
 8006bde:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006be0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	7bdb      	ldrb	r3, [r3, #15]
 8006be6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006be8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	7a5b      	ldrb	r3, [r3, #9]
 8006bee:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006bf0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7a1b      	ldrb	r3, [r3, #8]
 8006bf6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006bf8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	7812      	ldrb	r2, [r2, #0]
 8006bfe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c00:	4a07      	ldr	r2, [pc, #28]	; (8006c20 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006c02:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c04:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8006c06:	e005      	b.n	8006c14 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <HAL_MPU_ConfigRegion+0x84>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <HAL_MPU_ConfigRegion+0x84>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	611a      	str	r2, [r3, #16]
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	e000ed90 	.word	0xe000ed90

08006c24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e00e      	b.n	8006c54 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	795b      	ldrb	r3, [r3, #5]
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fd fb5e 	bl	8004308 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e022      	b.n	8006cb4 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	795b      	ldrb	r3, [r3, #5]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d101      	bne.n	8006c7c <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e01b      	b.n	8006cb4 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	791b      	ldrb	r3, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7fd fb53 	bl	800434c <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0201 	orr.w	r2, r2, #1
 8006ce0:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e00a      	b.n	8006cfe <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	441a      	add	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d3f0      	bcc.n	8006ce8 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8006d14:	693b      	ldr	r3, [r7, #16]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	795b      	ldrb	r3, [r3, #5]
 8006d2e:	b2db      	uxtb	r3, r3
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006d48:	f7ff f800 	bl	8005d4c <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e099      	b.n	8006e8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0201 	bic.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d78:	e00f      	b.n	8006d9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d7a:	f7fe ffe7 	bl	8005d4c <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b05      	cmp	r3, #5
 8006d86:	d908      	bls.n	8006d9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2203      	movs	r2, #3
 8006d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e078      	b.n	8006e8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e8      	bne.n	8006d7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4b38      	ldr	r3, [pc, #224]	; (8006e94 <HAL_DMA_Init+0x158>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d107      	bne.n	8006e04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f023 0307 	bic.w	r3, r3, #7
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d117      	bne.n	8006e5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00e      	beq.n	8006e5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fb6d 	bl	8007520 <DMA_CheckFifoParam>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2240      	movs	r2, #64	; 0x40
 8006e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e016      	b.n	8006e8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fb24 	bl	80074b4 <DMA_CalcBaseAndBitshift>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e74:	223f      	movs	r2, #63	; 0x3f
 8006e76:	409a      	lsls	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	f010803f 	.word	0xf010803f

08006e98 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e050      	b.n	8006f4c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d101      	bne.n	8006eba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	e048      	b.n	8006f4c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0201 	bic.w	r2, r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2221      	movs	r2, #33	; 0x21
 8006ef8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fada 	bl	80074b4 <DMA_CalcBaseAndBitshift>
 8006f00:	4603      	mov	r3, r0
 8006f02:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2c:	223f      	movs	r2, #63	; 0x3f
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d101      	bne.n	8006f7a <HAL_DMA_Start_IT+0x26>
 8006f76:	2302      	movs	r3, #2
 8006f78:	e040      	b.n	8006ffc <HAL_DMA_Start_IT+0xa8>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d12f      	bne.n	8006fee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 fa58 	bl	8007458 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fac:	223f      	movs	r2, #63	; 0x3f
 8006fae:	409a      	lsls	r2, r3
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0216 	orr.w	r2, r2, #22
 8006fc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0208 	orr.w	r2, r2, #8
 8006fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0201 	orr.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	e005      	b.n	8006ffa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007010:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007012:	f7fe fe9b 	bl	8005d4c <HAL_GetTick>
 8007016:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d008      	beq.n	8007036 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2280      	movs	r2, #128	; 0x80
 8007028:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e052      	b.n	80070dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0216 	bic.w	r2, r2, #22
 8007044:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	695a      	ldr	r2, [r3, #20]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007054:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d103      	bne.n	8007066 <HAL_DMA_Abort+0x62>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0208 	bic.w	r2, r2, #8
 8007074:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0201 	bic.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007086:	e013      	b.n	80070b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007088:	f7fe fe60 	bl	8005d4c <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b05      	cmp	r3, #5
 8007094:	d90c      	bls.n	80070b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2203      	movs	r2, #3
 80070a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e015      	b.n	80070dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e4      	bne.n	8007088 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c2:	223f      	movs	r2, #63	; 0x3f
 80070c4:	409a      	lsls	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d004      	beq.n	8007102 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2280      	movs	r2, #128	; 0x80
 80070fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e00c      	b.n	800711c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2205      	movs	r2, #5
 8007106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007134:	4b8e      	ldr	r3, [pc, #568]	; (8007370 <HAL_DMA_IRQHandler+0x248>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a8e      	ldr	r2, [pc, #568]	; (8007374 <HAL_DMA_IRQHandler+0x24c>)
 800713a:	fba2 2303 	umull	r2, r3, r2, r3
 800713e:	0a9b      	lsrs	r3, r3, #10
 8007140:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007146:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007152:	2208      	movs	r2, #8
 8007154:	409a      	lsls	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4013      	ands	r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01a      	beq.n	8007194 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d013      	beq.n	8007194 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0204 	bic.w	r2, r2, #4
 800717a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007180:	2208      	movs	r2, #8
 8007182:	409a      	lsls	r2, r3
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718c:	f043 0201 	orr.w	r2, r3, #1
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007198:	2201      	movs	r2, #1
 800719a:	409a      	lsls	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d012      	beq.n	80071ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00b      	beq.n	80071ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b6:	2201      	movs	r2, #1
 80071b8:	409a      	lsls	r2, r3
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c2:	f043 0202 	orr.w	r2, r3, #2
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ce:	2204      	movs	r2, #4
 80071d0:	409a      	lsls	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4013      	ands	r3, r2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d012      	beq.n	8007200 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ec:	2204      	movs	r2, #4
 80071ee:	409a      	lsls	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	f043 0204 	orr.w	r2, r3, #4
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007204:	2210      	movs	r2, #16
 8007206:	409a      	lsls	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d043      	beq.n	8007298 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d03c      	beq.n	8007298 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007222:	2210      	movs	r2, #16
 8007224:	409a      	lsls	r2, r3
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d018      	beq.n	800726a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d108      	bne.n	8007258 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	d024      	beq.n	8007298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
 8007256:	e01f      	b.n	8007298 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01b      	beq.n	8007298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4798      	blx	r3
 8007268:	e016      	b.n	8007298 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d107      	bne.n	8007288 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0208 	bic.w	r2, r2, #8
 8007286:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729c:	2220      	movs	r2, #32
 800729e:	409a      	lsls	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4013      	ands	r3, r2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 808f 	beq.w	80073c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 8087 	beq.w	80073c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072be:	2220      	movs	r2, #32
 80072c0:	409a      	lsls	r2, r3
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d136      	bne.n	8007340 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0216 	bic.w	r2, r2, #22
 80072e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <HAL_DMA_IRQHandler+0x1da>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0208 	bic.w	r2, r2, #8
 8007310:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007316:	223f      	movs	r2, #63	; 0x3f
 8007318:	409a      	lsls	r2, r3
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007332:	2b00      	cmp	r3, #0
 8007334:	d07e      	beq.n	8007434 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
        }
        return;
 800733e:	e079      	b.n	8007434 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d01d      	beq.n	800738a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10d      	bne.n	8007378 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007360:	2b00      	cmp	r3, #0
 8007362:	d031      	beq.n	80073c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	4798      	blx	r3
 800736c:	e02c      	b.n	80073c8 <HAL_DMA_IRQHandler+0x2a0>
 800736e:	bf00      	nop
 8007370:	2000004c 	.word	0x2000004c
 8007374:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d023      	beq.n	80073c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
 8007388:	e01e      	b.n	80073c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10f      	bne.n	80073b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0210 	bic.w	r2, r2, #16
 80073a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d032      	beq.n	8007436 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d022      	beq.n	8007422 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2205      	movs	r2, #5
 80073e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0201 	bic.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	3301      	adds	r3, #1
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d307      	bcc.n	8007410 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1f2      	bne.n	80073f4 <HAL_DMA_IRQHandler+0x2cc>
 800740e:	e000      	b.n	8007412 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007410:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
 8007432:	e000      	b.n	8007436 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007434:	bf00      	nop
    }
  }
}
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800744a:	b2db      	uxtb	r3, r3
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007474:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2b40      	cmp	r3, #64	; 0x40
 8007484:	d108      	bne.n	8007498 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007496:	e007      	b.n	80074a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	60da      	str	r2, [r3, #12]
}
 80074a8:	bf00      	nop
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	3b10      	subs	r3, #16
 80074c4:	4a14      	ldr	r2, [pc, #80]	; (8007518 <DMA_CalcBaseAndBitshift+0x64>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	091b      	lsrs	r3, r3, #4
 80074cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80074ce:	4a13      	ldr	r2, [pc, #76]	; (800751c <DMA_CalcBaseAndBitshift+0x68>)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d909      	bls.n	80074f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074ea:	f023 0303 	bic.w	r3, r3, #3
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	659a      	str	r2, [r3, #88]	; 0x58
 80074f4:	e007      	b.n	8007506 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074fe:	f023 0303 	bic.w	r3, r3, #3
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	aaaaaaab 	.word	0xaaaaaaab
 800751c:	080142b0 	.word	0x080142b0

08007520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d11f      	bne.n	800757a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b03      	cmp	r3, #3
 800753e:	d856      	bhi.n	80075ee <DMA_CheckFifoParam+0xce>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <DMA_CheckFifoParam+0x28>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	08007559 	.word	0x08007559
 800754c:	0800756b 	.word	0x0800756b
 8007550:	08007559 	.word	0x08007559
 8007554:	080075ef 	.word	0x080075ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d046      	beq.n	80075f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007568:	e043      	b.n	80075f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007572:	d140      	bne.n	80075f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007578:	e03d      	b.n	80075f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007582:	d121      	bne.n	80075c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b03      	cmp	r3, #3
 8007588:	d837      	bhi.n	80075fa <DMA_CheckFifoParam+0xda>
 800758a:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <DMA_CheckFifoParam+0x70>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	080075a1 	.word	0x080075a1
 8007594:	080075a7 	.word	0x080075a7
 8007598:	080075a1 	.word	0x080075a1
 800759c:	080075b9 	.word	0x080075b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]
      break;
 80075a4:	e030      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d025      	beq.n	80075fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075b6:	e022      	b.n	80075fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075c0:	d11f      	bne.n	8007602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80075c6:	e01c      	b.n	8007602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d903      	bls.n	80075d6 <DMA_CheckFifoParam+0xb6>
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d003      	beq.n	80075dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80075d4:	e018      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	73fb      	strb	r3, [r7, #15]
      break;
 80075da:	e015      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00e      	beq.n	8007606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
      break;
 80075ec:	e00b      	b.n	8007606 <DMA_CheckFifoParam+0xe6>
      break;
 80075ee:	bf00      	nop
 80075f0:	e00a      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
      break;
 80075f2:	bf00      	nop
 80075f4:	e008      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
      break;
 80075f6:	bf00      	nop
 80075f8:	e006      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
      break;
 80075fa:	bf00      	nop
 80075fc:	e004      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
      break;
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
      break;   
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
      break;
 8007606:	bf00      	nop
    }
  } 
  
  return status; 
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop

08007618 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007622:	4b4b      	ldr	r3, [pc, #300]	; (8007750 <HAL_FLASH_IRQHandler+0x138>)
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d020      	beq.n	8007670 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800762e:	4b49      	ldr	r3, [pc, #292]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d107      	bne.n	8007648 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8007638:	4b46      	ldr	r3, [pc, #280]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800763e:	4b45      	ldr	r3, [pc, #276]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 8007640:	f04f 32ff 	mov.w	r2, #4294967295
 8007644:	60da      	str	r2, [r3, #12]
 8007646:	e00b      	b.n	8007660 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8007648:	4b42      	ldr	r3, [pc, #264]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d103      	bne.n	800765a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8007652:	4b40      	ldr	r3, [pc, #256]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	607b      	str	r3, [r7, #4]
 8007658:	e002      	b.n	8007660 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800765a:	4b3e      	ldr	r3, [pc, #248]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8007660:	f000 f88e 	bl	8007780 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f881 	bl	800776c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800766a:	4b3a      	ldr	r3, [pc, #232]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007670:	4b37      	ldr	r3, [pc, #220]	; (8007750 <HAL_FLASH_IRQHandler+0x138>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d04a      	beq.n	8007712 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800767c:	4b34      	ldr	r3, [pc, #208]	; (8007750 <HAL_FLASH_IRQHandler+0x138>)
 800767e:	2201      	movs	r2, #1
 8007680:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007682:	4b34      	ldr	r3, [pc, #208]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	d12d      	bne.n	80076e8 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800768c:	4b31      	ldr	r3, [pc, #196]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	3b01      	subs	r3, #1
 8007692:	4a30      	ldr	r2, [pc, #192]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 8007694:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8007696:	4b2f      	ldr	r3, [pc, #188]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d015      	beq.n	80076ca <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800769e:	4b2d      	ldr	r3, [pc, #180]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f857 	bl	8007758 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 80076aa:	4b2a      	ldr	r3, [pc, #168]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	4a28      	ldr	r2, [pc, #160]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 80076b2:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 80076b4:	4b27      	ldr	r3, [pc, #156]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80076ba:	4b26      	ldr	r3, [pc, #152]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 80076bc:	7a1b      	ldrb	r3, [r3, #8]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f8c2 	bl	800784c <FLASH_Erase_Sector>
 80076c8:	e023      	b.n	8007712 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80076ca:	f04f 33ff 	mov.w	r3, #4294967295
 80076ce:	607b      	str	r3, [r7, #4]
 80076d0:	4a20      	ldr	r2, [pc, #128]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80076d6:	4b1f      	ldr	r3, [pc, #124]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80076dc:	f000 f8fe 	bl	80078dc <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f839 	bl	8007758 <HAL_FLASH_EndOfOperationCallback>
 80076e6:	e014      	b.n	8007712 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80076e8:	4b1a      	ldr	r3, [pc, #104]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d107      	bne.n	8007702 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80076f2:	f000 f8f3 	bl	80078dc <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80076f6:	4b17      	ldr	r3, [pc, #92]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f82c 	bl	8007758 <HAL_FLASH_EndOfOperationCallback>
 8007700:	e004      	b.n	800770c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8007702:	4b14      	ldr	r3, [pc, #80]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f826 	bl	8007758 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800770c:	4b11      	ldr	r3, [pc, #68]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 800770e:	2200      	movs	r2, #0
 8007710:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8007712:	4b10      	ldr	r3, [pc, #64]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d114      	bne.n	8007746 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800771c:	4b0c      	ldr	r3, [pc, #48]	; (8007750 <HAL_FLASH_IRQHandler+0x138>)
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	4a0b      	ldr	r2, [pc, #44]	; (8007750 <HAL_FLASH_IRQHandler+0x138>)
 8007722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007726:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8007728:	4b09      	ldr	r3, [pc, #36]	; (8007750 <HAL_FLASH_IRQHandler+0x138>)
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	4a08      	ldr	r2, [pc, #32]	; (8007750 <HAL_FLASH_IRQHandler+0x138>)
 800772e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007732:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8007734:	4b06      	ldr	r3, [pc, #24]	; (8007750 <HAL_FLASH_IRQHandler+0x138>)
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	4a05      	ldr	r2, [pc, #20]	; (8007750 <HAL_FLASH_IRQHandler+0x138>)
 800773a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800773e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8007740:	4b04      	ldr	r3, [pc, #16]	; (8007754 <HAL_FLASH_IRQHandler+0x13c>)
 8007742:	2200      	movs	r2, #0
 8007744:	761a      	strb	r2, [r3, #24]
  }
}
 8007746:	bf00      	nop
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40023c00 	.word	0x40023c00
 8007754:	200008c8 	.word	0x200008c8

08007758 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007784:	4b2f      	ldr	r3, [pc, #188]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f003 0310 	and.w	r3, r3, #16
 800778c:	2b00      	cmp	r3, #0
 800778e:	d008      	beq.n	80077a2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007790:	4b2d      	ldr	r3, [pc, #180]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	f043 0310 	orr.w	r3, r3, #16
 8007798:	4a2b      	ldr	r2, [pc, #172]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 800779a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800779c:	4b29      	ldr	r3, [pc, #164]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 800779e:	2210      	movs	r2, #16
 80077a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80077a2:	4b28      	ldr	r3, [pc, #160]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d008      	beq.n	80077c0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80077ae:	4b26      	ldr	r3, [pc, #152]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	f043 0308 	orr.w	r3, r3, #8
 80077b6:	4a24      	ldr	r2, [pc, #144]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 80077b8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80077ba:	4b22      	ldr	r3, [pc, #136]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 80077bc:	2220      	movs	r2, #32
 80077be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80077c0:	4b20      	ldr	r3, [pc, #128]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d008      	beq.n	80077de <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80077cc:	4b1e      	ldr	r3, [pc, #120]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f043 0304 	orr.w	r3, r3, #4
 80077d4:	4a1c      	ldr	r2, [pc, #112]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 80077d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80077d8:	4b1a      	ldr	r3, [pc, #104]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 80077da:	2240      	movs	r2, #64	; 0x40
 80077dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80077de:	4b19      	ldr	r3, [pc, #100]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80077ea:	4b17      	ldr	r3, [pc, #92]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	f043 0302 	orr.w	r3, r3, #2
 80077f2:	4a15      	ldr	r2, [pc, #84]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 80077f4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80077f6:	4b13      	ldr	r3, [pc, #76]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 80077f8:	2280      	movs	r2, #128	; 0x80
 80077fa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80077fc:	4b11      	ldr	r3, [pc, #68]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007808:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	f043 0301 	orr.w	r3, r3, #1
 8007810:	4a0d      	ldr	r2, [pc, #52]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 8007812:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007814:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 8007816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800781a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800781c:	4b09      	ldr	r3, [pc, #36]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d008      	beq.n	800783a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007828:	4b07      	ldr	r3, [pc, #28]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f043 0320 	orr.w	r3, r3, #32
 8007830:	4a05      	ldr	r2, [pc, #20]	; (8007848 <FLASH_SetErrorCode+0xc8>)
 8007832:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007834:	4b03      	ldr	r3, [pc, #12]	; (8007844 <FLASH_SetErrorCode+0xc4>)
 8007836:	2202      	movs	r2, #2
 8007838:	60da      	str	r2, [r3, #12]
  }
}
 800783a:	bf00      	nop
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40023c00 	.word	0x40023c00
 8007848:	200008c8 	.word	0x200008c8

0800784c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	e010      	b.n	800788a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d103      	bne.n	8007876 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800786e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e009      	b.n	800788a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	2b02      	cmp	r3, #2
 800787a:	d103      	bne.n	8007884 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800787c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e002      	b.n	800788a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007888:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800788a:	4b13      	ldr	r3, [pc, #76]	; (80078d8 <FLASH_Erase_Sector+0x8c>)
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	4a12      	ldr	r2, [pc, #72]	; (80078d8 <FLASH_Erase_Sector+0x8c>)
 8007890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007894:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007896:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <FLASH_Erase_Sector+0x8c>)
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	490f      	ldr	r1, [pc, #60]	; (80078d8 <FLASH_Erase_Sector+0x8c>)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80078a2:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <FLASH_Erase_Sector+0x8c>)
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	4a0c      	ldr	r2, [pc, #48]	; (80078d8 <FLASH_Erase_Sector+0x8c>)
 80078a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80078ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <FLASH_Erase_Sector+0x8c>)
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	4313      	orrs	r3, r2
 80078b8:	4a07      	ldr	r2, [pc, #28]	; (80078d8 <FLASH_Erase_Sector+0x8c>)
 80078ba:	f043 0302 	orr.w	r3, r3, #2
 80078be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <FLASH_Erase_Sector+0x8c>)
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	4a04      	ldr	r2, [pc, #16]	; (80078d8 <FLASH_Erase_Sector+0x8c>)
 80078c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ca:	6113      	str	r3, [r2, #16]
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	40023c00 	.word	0x40023c00

080078dc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80078dc:	b480      	push	{r7}
 80078de:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80078e0:	4b20      	ldr	r3, [pc, #128]	; (8007964 <FLASH_FlushCaches+0x88>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d017      	beq.n	800791c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80078ec:	4b1d      	ldr	r3, [pc, #116]	; (8007964 <FLASH_FlushCaches+0x88>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1c      	ldr	r2, [pc, #112]	; (8007964 <FLASH_FlushCaches+0x88>)
 80078f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078f6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80078f8:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <FLASH_FlushCaches+0x88>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a19      	ldr	r2, [pc, #100]	; (8007964 <FLASH_FlushCaches+0x88>)
 80078fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	4b17      	ldr	r3, [pc, #92]	; (8007964 <FLASH_FlushCaches+0x88>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a16      	ldr	r2, [pc, #88]	; (8007964 <FLASH_FlushCaches+0x88>)
 800790a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800790e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007910:	4b14      	ldr	r3, [pc, #80]	; (8007964 <FLASH_FlushCaches+0x88>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a13      	ldr	r2, [pc, #76]	; (8007964 <FLASH_FlushCaches+0x88>)
 8007916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800791a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800791c:	4b11      	ldr	r3, [pc, #68]	; (8007964 <FLASH_FlushCaches+0x88>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007924:	2b00      	cmp	r3, #0
 8007926:	d017      	beq.n	8007958 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007928:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <FLASH_FlushCaches+0x88>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a0d      	ldr	r2, [pc, #52]	; (8007964 <FLASH_FlushCaches+0x88>)
 800792e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007932:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <FLASH_FlushCaches+0x88>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a0a      	ldr	r2, [pc, #40]	; (8007964 <FLASH_FlushCaches+0x88>)
 800793a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	4b08      	ldr	r3, [pc, #32]	; (8007964 <FLASH_FlushCaches+0x88>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a07      	ldr	r2, [pc, #28]	; (8007964 <FLASH_FlushCaches+0x88>)
 8007946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800794a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800794c:	4b05      	ldr	r3, [pc, #20]	; (8007964 <FLASH_FlushCaches+0x88>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a04      	ldr	r2, [pc, #16]	; (8007964 <FLASH_FlushCaches+0x88>)
 8007952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007956:	6013      	str	r3, [r2, #0]
  }
}
 8007958:	bf00      	nop
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	40023c00 	.word	0x40023c00

08007968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007968:	b480      	push	{r7}
 800796a:	b089      	sub	sp, #36	; 0x24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007976:	2300      	movs	r3, #0
 8007978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800797a:	2300      	movs	r3, #0
 800797c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
 8007982:	e159      	b.n	8007c38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007984:	2201      	movs	r2, #1
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4013      	ands	r3, r2
 8007996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	429a      	cmp	r2, r3
 800799e:	f040 8148 	bne.w	8007c32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d005      	beq.n	80079ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d130      	bne.n	8007a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	2203      	movs	r2, #3
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	43db      	mvns	r3, r3
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	4013      	ands	r3, r2
 80079d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079f0:	2201      	movs	r2, #1
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	fa02 f303 	lsl.w	r3, r2, r3
 80079f8:	43db      	mvns	r3, r3
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	4013      	ands	r3, r2
 80079fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	091b      	lsrs	r3, r3, #4
 8007a06:	f003 0201 	and.w	r2, r3, #1
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f003 0303 	and.w	r3, r3, #3
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d017      	beq.n	8007a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	2203      	movs	r2, #3
 8007a34:	fa02 f303 	lsl.w	r3, r2, r3
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d123      	bne.n	8007aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	08da      	lsrs	r2, r3, #3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3208      	adds	r2, #8
 8007a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	220f      	movs	r2, #15
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	43db      	mvns	r3, r3
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4013      	ands	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	691a      	ldr	r2, [r3, #16]
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	fa02 f303 	lsl.w	r3, r2, r3
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	08da      	lsrs	r2, r3, #3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3208      	adds	r2, #8
 8007aa6:	69b9      	ldr	r1, [r7, #24]
 8007aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	2203      	movs	r2, #3
 8007ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8007abc:	43db      	mvns	r3, r3
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f003 0203 	and.w	r2, r3, #3
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 80a2 	beq.w	8007c32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	4b57      	ldr	r3, [pc, #348]	; (8007c50 <HAL_GPIO_Init+0x2e8>)
 8007af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af6:	4a56      	ldr	r2, [pc, #344]	; (8007c50 <HAL_GPIO_Init+0x2e8>)
 8007af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007afc:	6453      	str	r3, [r2, #68]	; 0x44
 8007afe:	4b54      	ldr	r3, [pc, #336]	; (8007c50 <HAL_GPIO_Init+0x2e8>)
 8007b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b0a:	4a52      	ldr	r2, [pc, #328]	; (8007c54 <HAL_GPIO_Init+0x2ec>)
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	089b      	lsrs	r3, r3, #2
 8007b10:	3302      	adds	r3, #2
 8007b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	220f      	movs	r2, #15
 8007b22:	fa02 f303 	lsl.w	r3, r2, r3
 8007b26:	43db      	mvns	r3, r3
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a49      	ldr	r2, [pc, #292]	; (8007c58 <HAL_GPIO_Init+0x2f0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d019      	beq.n	8007b6a <HAL_GPIO_Init+0x202>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a48      	ldr	r2, [pc, #288]	; (8007c5c <HAL_GPIO_Init+0x2f4>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d013      	beq.n	8007b66 <HAL_GPIO_Init+0x1fe>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a47      	ldr	r2, [pc, #284]	; (8007c60 <HAL_GPIO_Init+0x2f8>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d00d      	beq.n	8007b62 <HAL_GPIO_Init+0x1fa>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a46      	ldr	r2, [pc, #280]	; (8007c64 <HAL_GPIO_Init+0x2fc>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d007      	beq.n	8007b5e <HAL_GPIO_Init+0x1f6>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a45      	ldr	r2, [pc, #276]	; (8007c68 <HAL_GPIO_Init+0x300>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d101      	bne.n	8007b5a <HAL_GPIO_Init+0x1f2>
 8007b56:	2304      	movs	r3, #4
 8007b58:	e008      	b.n	8007b6c <HAL_GPIO_Init+0x204>
 8007b5a:	2307      	movs	r3, #7
 8007b5c:	e006      	b.n	8007b6c <HAL_GPIO_Init+0x204>
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e004      	b.n	8007b6c <HAL_GPIO_Init+0x204>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e002      	b.n	8007b6c <HAL_GPIO_Init+0x204>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <HAL_GPIO_Init+0x204>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	69fa      	ldr	r2, [r7, #28]
 8007b6e:	f002 0203 	and.w	r2, r2, #3
 8007b72:	0092      	lsls	r2, r2, #2
 8007b74:	4093      	lsls	r3, r2
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b7c:	4935      	ldr	r1, [pc, #212]	; (8007c54 <HAL_GPIO_Init+0x2ec>)
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	089b      	lsrs	r3, r3, #2
 8007b82:	3302      	adds	r3, #2
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b8a:	4b38      	ldr	r3, [pc, #224]	; (8007c6c <HAL_GPIO_Init+0x304>)
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	43db      	mvns	r3, r3
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	4013      	ands	r3, r2
 8007b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bae:	4a2f      	ldr	r2, [pc, #188]	; (8007c6c <HAL_GPIO_Init+0x304>)
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bb4:	4b2d      	ldr	r3, [pc, #180]	; (8007c6c <HAL_GPIO_Init+0x304>)
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	43db      	mvns	r3, r3
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007bd8:	4a24      	ldr	r2, [pc, #144]	; (8007c6c <HAL_GPIO_Init+0x304>)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007bde:	4b23      	ldr	r3, [pc, #140]	; (8007c6c <HAL_GPIO_Init+0x304>)
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	43db      	mvns	r3, r3
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	4013      	ands	r3, r2
 8007bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c02:	4a1a      	ldr	r2, [pc, #104]	; (8007c6c <HAL_GPIO_Init+0x304>)
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c08:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <HAL_GPIO_Init+0x304>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	43db      	mvns	r3, r3
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	4013      	ands	r3, r2
 8007c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c2c:	4a0f      	ldr	r2, [pc, #60]	; (8007c6c <HAL_GPIO_Init+0x304>)
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	3301      	adds	r3, #1
 8007c36:	61fb      	str	r3, [r7, #28]
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	2b0f      	cmp	r3, #15
 8007c3c:	f67f aea2 	bls.w	8007984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	3724      	adds	r7, #36	; 0x24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	40023800 	.word	0x40023800
 8007c54:	40013800 	.word	0x40013800
 8007c58:	40020000 	.word	0x40020000
 8007c5c:	40020400 	.word	0x40020400
 8007c60:	40020800 	.word	0x40020800
 8007c64:	40020c00 	.word	0x40020c00
 8007c68:	40021000 	.word	0x40021000
 8007c6c:	40013c00 	.word	0x40013c00

08007c70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c86:	2300      	movs	r3, #0
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	e0bb      	b.n	8007e04 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	fa02 f303 	lsl.w	r3, r2, r3
 8007c94:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	f040 80ab 	bne.w	8007dfe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007ca8:	4a5c      	ldr	r2, [pc, #368]	; (8007e1c <HAL_GPIO_DeInit+0x1ac>)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	089b      	lsrs	r3, r3, #2
 8007cae:	3302      	adds	r3, #2
 8007cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	220f      	movs	r2, #15
 8007cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a54      	ldr	r2, [pc, #336]	; (8007e20 <HAL_GPIO_DeInit+0x1b0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d019      	beq.n	8007d06 <HAL_GPIO_DeInit+0x96>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a53      	ldr	r2, [pc, #332]	; (8007e24 <HAL_GPIO_DeInit+0x1b4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <HAL_GPIO_DeInit+0x92>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a52      	ldr	r2, [pc, #328]	; (8007e28 <HAL_GPIO_DeInit+0x1b8>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00d      	beq.n	8007cfe <HAL_GPIO_DeInit+0x8e>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a51      	ldr	r2, [pc, #324]	; (8007e2c <HAL_GPIO_DeInit+0x1bc>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d007      	beq.n	8007cfa <HAL_GPIO_DeInit+0x8a>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a50      	ldr	r2, [pc, #320]	; (8007e30 <HAL_GPIO_DeInit+0x1c0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d101      	bne.n	8007cf6 <HAL_GPIO_DeInit+0x86>
 8007cf2:	2304      	movs	r3, #4
 8007cf4:	e008      	b.n	8007d08 <HAL_GPIO_DeInit+0x98>
 8007cf6:	2307      	movs	r3, #7
 8007cf8:	e006      	b.n	8007d08 <HAL_GPIO_DeInit+0x98>
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e004      	b.n	8007d08 <HAL_GPIO_DeInit+0x98>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e002      	b.n	8007d08 <HAL_GPIO_DeInit+0x98>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e000      	b.n	8007d08 <HAL_GPIO_DeInit+0x98>
 8007d06:	2300      	movs	r3, #0
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	f002 0203 	and.w	r2, r2, #3
 8007d0e:	0092      	lsls	r2, r2, #2
 8007d10:	4093      	lsls	r3, r2
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d132      	bne.n	8007d7e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007d18:	4b46      	ldr	r3, [pc, #280]	; (8007e34 <HAL_GPIO_DeInit+0x1c4>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	43db      	mvns	r3, r3
 8007d20:	4944      	ldr	r1, [pc, #272]	; (8007e34 <HAL_GPIO_DeInit+0x1c4>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007d26:	4b43      	ldr	r3, [pc, #268]	; (8007e34 <HAL_GPIO_DeInit+0x1c4>)
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	43db      	mvns	r3, r3
 8007d2e:	4941      	ldr	r1, [pc, #260]	; (8007e34 <HAL_GPIO_DeInit+0x1c4>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007d34:	4b3f      	ldr	r3, [pc, #252]	; (8007e34 <HAL_GPIO_DeInit+0x1c4>)
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	493d      	ldr	r1, [pc, #244]	; (8007e34 <HAL_GPIO_DeInit+0x1c4>)
 8007d3e:	4013      	ands	r3, r2
 8007d40:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007d42:	4b3c      	ldr	r3, [pc, #240]	; (8007e34 <HAL_GPIO_DeInit+0x1c4>)
 8007d44:	689a      	ldr	r2, [r3, #8]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	493a      	ldr	r1, [pc, #232]	; (8007e34 <HAL_GPIO_DeInit+0x1c4>)
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	220f      	movs	r2, #15
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007d60:	4a2e      	ldr	r2, [pc, #184]	; (8007e1c <HAL_GPIO_DeInit+0x1ac>)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	089b      	lsrs	r3, r3, #2
 8007d66:	3302      	adds	r3, #2
 8007d68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	43da      	mvns	r2, r3
 8007d70:	482a      	ldr	r0, [pc, #168]	; (8007e1c <HAL_GPIO_DeInit+0x1ac>)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	089b      	lsrs	r3, r3, #2
 8007d76:	400a      	ands	r2, r1
 8007d78:	3302      	adds	r3, #2
 8007d7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	2103      	movs	r1, #3
 8007d88:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	401a      	ands	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	08da      	lsrs	r2, r3, #3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3208      	adds	r2, #8
 8007d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	220f      	movs	r2, #15
 8007daa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dae:	43db      	mvns	r3, r3
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	08d2      	lsrs	r2, r2, #3
 8007db4:	4019      	ands	r1, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3208      	adds	r2, #8
 8007dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	2103      	movs	r1, #3
 8007dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dcc:	43db      	mvns	r3, r3
 8007dce:	401a      	ands	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	2101      	movs	r1, #1
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8007de0:	43db      	mvns	r3, r3
 8007de2:	401a      	ands	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	2103      	movs	r1, #3
 8007df2:	fa01 f303 	lsl.w	r3, r1, r3
 8007df6:	43db      	mvns	r3, r3
 8007df8:	401a      	ands	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	3301      	adds	r3, #1
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	2b0f      	cmp	r3, #15
 8007e08:	f67f af40 	bls.w	8007c8c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	40013800 	.word	0x40013800
 8007e20:	40020000 	.word	0x40020000
 8007e24:	40020400 	.word	0x40020400
 8007e28:	40020800 	.word	0x40020800
 8007e2c:	40020c00 	.word	0x40020c00
 8007e30:	40021000 	.word	0x40021000
 8007e34:	40013c00 	.word	0x40013c00

08007e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	807b      	strh	r3, [r7, #2]
 8007e44:	4613      	mov	r3, r2
 8007e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e48:	787b      	ldrb	r3, [r7, #1]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e4e:	887a      	ldrh	r2, [r7, #2]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007e54:	e003      	b.n	8007e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007e56:	887b      	ldrh	r3, [r7, #2]
 8007e58:	041a      	lsls	r2, r3, #16
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	619a      	str	r2, [r3, #24]
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e7c:	887a      	ldrh	r2, [r7, #2]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4013      	ands	r3, r2
 8007e82:	041a      	lsls	r2, r3, #16
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	43d9      	mvns	r1, r3
 8007e88:	887b      	ldrh	r3, [r7, #2]
 8007e8a:	400b      	ands	r3, r1
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	619a      	str	r2, [r3, #24]
}
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
	...

08007ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e171      	b.n	8008196 <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d12c      	bne.n	8007f18 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a77      	ldr	r2, [pc, #476]	; (80080a8 <HAL_I2C_Init+0x208>)
 8007eca:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a77      	ldr	r2, [pc, #476]	; (80080ac <HAL_I2C_Init+0x20c>)
 8007ed0:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a76      	ldr	r2, [pc, #472]	; (80080b0 <HAL_I2C_Init+0x210>)
 8007ed6:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a76      	ldr	r2, [pc, #472]	; (80080b4 <HAL_I2C_Init+0x214>)
 8007edc:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a75      	ldr	r2, [pc, #468]	; (80080b8 <HAL_I2C_Init+0x218>)
 8007ee2:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a75      	ldr	r2, [pc, #468]	; (80080bc <HAL_I2C_Init+0x21c>)
 8007ee8:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a74      	ldr	r2, [pc, #464]	; (80080c0 <HAL_I2C_Init+0x220>)
 8007eee:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a74      	ldr	r2, [pc, #464]	; (80080c4 <HAL_I2C_Init+0x224>)
 8007ef4:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a73      	ldr	r2, [pc, #460]	; (80080c8 <HAL_I2C_Init+0x228>)
 8007efa:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a73      	ldr	r2, [pc, #460]	; (80080cc <HAL_I2C_Init+0x22c>)
 8007f00:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d102      	bne.n	8007f10 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a70      	ldr	r2, [pc, #448]	; (80080d0 <HAL_I2C_Init+0x230>)
 8007f0e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2224      	movs	r2, #36	; 0x24
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0201 	bic.w	r2, r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f50:	f002 fbe0 	bl	800a714 <HAL_RCC_GetPCLK1Freq>
 8007f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	4a5e      	ldr	r2, [pc, #376]	; (80080d4 <HAL_I2C_Init+0x234>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d807      	bhi.n	8007f70 <HAL_I2C_Init+0xd0>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4a5d      	ldr	r2, [pc, #372]	; (80080d8 <HAL_I2C_Init+0x238>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	bf94      	ite	ls
 8007f68:	2301      	movls	r3, #1
 8007f6a:	2300      	movhi	r3, #0
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	e006      	b.n	8007f7e <HAL_I2C_Init+0xde>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a5a      	ldr	r2, [pc, #360]	; (80080dc <HAL_I2C_Init+0x23c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	bf94      	ite	ls
 8007f78:	2301      	movls	r3, #1
 8007f7a:	2300      	movhi	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e107      	b.n	8008196 <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4a55      	ldr	r2, [pc, #340]	; (80080e0 <HAL_I2C_Init+0x240>)
 8007f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8e:	0c9b      	lsrs	r3, r3, #18
 8007f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	4a47      	ldr	r2, [pc, #284]	; (80080d4 <HAL_I2C_Init+0x234>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d802      	bhi.n	8007fc0 <HAL_I2C_Init+0x120>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	e009      	b.n	8007fd4 <HAL_I2C_Init+0x134>
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007fc6:	fb02 f303 	mul.w	r3, r2, r3
 8007fca:	4a46      	ldr	r2, [pc, #280]	; (80080e4 <HAL_I2C_Init+0x244>)
 8007fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd0:	099b      	lsrs	r3, r3, #6
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	4939      	ldr	r1, [pc, #228]	; (80080d4 <HAL_I2C_Init+0x234>)
 8007ff0:	428b      	cmp	r3, r1
 8007ff2:	d819      	bhi.n	8008028 <HAL_I2C_Init+0x188>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	1e59      	subs	r1, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008002:	1c59      	adds	r1, r3, #1
 8008004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008008:	400b      	ands	r3, r1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <HAL_I2C_Init+0x184>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1e59      	subs	r1, r3, #1
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	005b      	lsls	r3, r3, #1
 8008018:	fbb1 f3f3 	udiv	r3, r1, r3
 800801c:	3301      	adds	r3, #1
 800801e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008022:	e071      	b.n	8008108 <HAL_I2C_Init+0x268>
 8008024:	2304      	movs	r3, #4
 8008026:	e06f      	b.n	8008108 <HAL_I2C_Init+0x268>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d111      	bne.n	8008054 <HAL_I2C_Init+0x1b4>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	1e58      	subs	r0, r3, #1
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6859      	ldr	r1, [r3, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	440b      	add	r3, r1
 800803e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008042:	3301      	adds	r3, #1
 8008044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008048:	2b00      	cmp	r3, #0
 800804a:	bf0c      	ite	eq
 800804c:	2301      	moveq	r3, #1
 800804e:	2300      	movne	r3, #0
 8008050:	b2db      	uxtb	r3, r3
 8008052:	e012      	b.n	800807a <HAL_I2C_Init+0x1da>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	1e58      	subs	r0, r3, #1
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6859      	ldr	r1, [r3, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	440b      	add	r3, r1
 8008062:	0099      	lsls	r1, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	fbb0 f3f3 	udiv	r3, r0, r3
 800806a:	3301      	adds	r3, #1
 800806c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008070:	2b00      	cmp	r3, #0
 8008072:	bf0c      	ite	eq
 8008074:	2301      	moveq	r3, #1
 8008076:	2300      	movne	r3, #0
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <HAL_I2C_Init+0x1e2>
 800807e:	2301      	movs	r3, #1
 8008080:	e042      	b.n	8008108 <HAL_I2C_Init+0x268>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d12e      	bne.n	80080e8 <HAL_I2C_Init+0x248>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	1e58      	subs	r0, r3, #1
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6859      	ldr	r1, [r3, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	440b      	add	r3, r1
 8008098:	fbb0 f3f3 	udiv	r3, r0, r3
 800809c:	3301      	adds	r3, #1
 800809e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a6:	e02f      	b.n	8008108 <HAL_I2C_Init+0x268>
 80080a8:	080037e5 	.word	0x080037e5
 80080ac:	08008795 	.word	0x08008795
 80080b0:	080087a9 	.word	0x080087a9
 80080b4:	080087bd 	.word	0x080087bd
 80080b8:	080087ed 	.word	0x080087ed
 80080bc:	08008801 	.word	0x08008801
 80080c0:	08008815 	.word	0x08008815
 80080c4:	08003811 	.word	0x08003811
 80080c8:	08008829 	.word	0x08008829
 80080cc:	080087d1 	.word	0x080087d1
 80080d0:	08004b4d 	.word	0x08004b4d
 80080d4:	000186a0 	.word	0x000186a0
 80080d8:	001e847f 	.word	0x001e847f
 80080dc:	003d08ff 	.word	0x003d08ff
 80080e0:	431bde83 	.word	0x431bde83
 80080e4:	10624dd3 	.word	0x10624dd3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	1e58      	subs	r0, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6859      	ldr	r1, [r3, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	440b      	add	r3, r1
 80080f6:	0099      	lsls	r1, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80080fe:	3301      	adds	r3, #1
 8008100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008104:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	6809      	ldr	r1, [r1, #0]
 800810c:	4313      	orrs	r3, r2
 800810e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69da      	ldr	r2, [r3, #28]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6911      	ldr	r1, [r2, #16]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	68d2      	ldr	r2, [r2, #12]
 8008142:	4311      	orrs	r1, r2
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	430b      	orrs	r3, r1
 800814a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695a      	ldr	r2, [r3, #20]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	431a      	orrs	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0201 	orr.w	r2, r2, #1
 8008176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop

080081a0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e02c      	b.n	800820c <HAL_I2C_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2224      	movs	r2, #36	; 0x24
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f022 0201 	bic.w	r2, r2, #1
 80081c8:	601a      	str	r2, [r3, #0]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  if (hi2c->MspDeInitCallback == NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d103      	bne.n	80081dc <HAL_I2C_DeInit+0x3c>
  {
    hi2c->MspDeInitCallback = HAL_I2C_MspDeInit; /* Legacy weak MspDeInit  */
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a0f      	ldr	r2, [pc, #60]	; (8008214 <HAL_I2C_DeInit+0x74>)
 80081d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	08004c85 	.word	0x08004c85

08008218 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	607a      	str	r2, [r7, #4]
 8008222:	461a      	mov	r2, r3
 8008224:	460b      	mov	r3, r1
 8008226:	817b      	strh	r3, [r7, #10]
 8008228:	4613      	mov	r3, r2
 800822a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b20      	cmp	r3, #32
 800823a:	f040 8085 	bne.w	8008348 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800823e:	4b46      	ldr	r3, [pc, #280]	; (8008358 <HAL_I2C_Master_Transmit_IT+0x140>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	08db      	lsrs	r3, r3, #3
 8008244:	4a45      	ldr	r2, [pc, #276]	; (800835c <HAL_I2C_Master_Transmit_IT+0x144>)
 8008246:	fba2 2303 	umull	r2, r3, r2, r3
 800824a:	0a1a      	lsrs	r2, r3, #8
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009a      	lsls	r2, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	3b01      	subs	r3, #1
 800825c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d116      	bne.n	8008292 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2220      	movs	r2, #32
 800826e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	f043 0220 	orr.w	r2, r3, #32
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e05b      	b.n	800834a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b02      	cmp	r3, #2
 800829e:	d0db      	beq.n	8008258 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_I2C_Master_Transmit_IT+0x96>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e04d      	b.n	800834a <HAL_I2C_Master_Transmit_IT+0x132>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d007      	beq.n	80082d4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0201 	orr.w	r2, r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2221      	movs	r2, #33	; 0x21
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2210      	movs	r2, #16
 80082f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	893a      	ldrh	r2, [r7, #8]
 8008304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4a13      	ldr	r2, [pc, #76]	; (8008360 <HAL_I2C_Master_Transmit_IT+0x148>)
 8008314:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8008316:	897a      	ldrh	r2, [r7, #10]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008332:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008342:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	e000      	b.n	800834a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8008348:	2302      	movs	r3, #2
  }
}
 800834a:	4618      	mov	r0, r3
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	2000004c 	.word	0x2000004c
 800835c:	14f8b589 	.word	0x14f8b589
 8008360:	ffff0000 	.word	0xffff0000

08008364 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008384:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	2b10      	cmp	r3, #16
 8008392:	d003      	beq.n	800839c <HAL_I2C_EV_IRQHandler+0x38>
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	f040 80c1 	bne.w	800851e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10d      	bne.n	80083d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80083bc:	d003      	beq.n	80083c6 <HAL_I2C_EV_IRQHandler+0x62>
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80083c4:	d101      	bne.n	80083ca <HAL_I2C_EV_IRQHandler+0x66>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e000      	b.n	80083cc <HAL_I2C_EV_IRQHandler+0x68>
 80083ca:	2300      	movs	r3, #0
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	f000 8132 	beq.w	8008636 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00c      	beq.n	80083f6 <HAL_I2C_EV_IRQHandler+0x92>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	0a5b      	lsrs	r3, r3, #9
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 fc9b 	bl	8009d24 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fd95 	bl	8008f1e <I2C_Master_SB>
 80083f4:	e092      	b.n	800851c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	08db      	lsrs	r3, r3, #3
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <HAL_I2C_EV_IRQHandler+0xb2>
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	0a5b      	lsrs	r3, r3, #9
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fe0b 	bl	800902a <I2C_Master_ADD10>
 8008414:	e082      	b.n	800851c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	085b      	lsrs	r3, r3, #1
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d009      	beq.n	8008436 <HAL_I2C_EV_IRQHandler+0xd2>
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	0a5b      	lsrs	r3, r3, #9
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fe25 	bl	800907e <I2C_Master_ADDR>
 8008434:	e072      	b.n	800851c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	089b      	lsrs	r3, r3, #2
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d03b      	beq.n	80084ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800844c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008450:	f000 80f3 	beq.w	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	09db      	lsrs	r3, r3, #7
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00f      	beq.n	8008480 <HAL_I2C_EV_IRQHandler+0x11c>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	0a9b      	lsrs	r3, r3, #10
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	d009      	beq.n	8008480 <HAL_I2C_EV_IRQHandler+0x11c>
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	089b      	lsrs	r3, r3, #2
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d103      	bne.n	8008480 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f9f9 	bl	8008870 <I2C_MasterTransmit_TXE>
 800847e:	e04d      	b.n	800851c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	089b      	lsrs	r3, r3, #2
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 80d6 	beq.w	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	0a5b      	lsrs	r3, r3, #9
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 80cf 	beq.w	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	2b21      	cmp	r3, #33	; 0x21
 80084a0:	d103      	bne.n	80084aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fa83 	bl	80089ae <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084a8:	e0c7      	b.n	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	2b40      	cmp	r3, #64	; 0x40
 80084ae:	f040 80c4 	bne.w	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 faf4 	bl	8008aa0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084b8:	e0bf      	b.n	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084c8:	f000 80b7 	beq.w	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	099b      	lsrs	r3, r3, #6
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00f      	beq.n	80084f8 <HAL_I2C_EV_IRQHandler+0x194>
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	0a9b      	lsrs	r3, r3, #10
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d009      	beq.n	80084f8 <HAL_I2C_EV_IRQHandler+0x194>
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	089b      	lsrs	r3, r3, #2
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d103      	bne.n	80084f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fb6a 	bl	8008bca <I2C_MasterReceive_RXNE>
 80084f6:	e011      	b.n	800851c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	089b      	lsrs	r3, r3, #2
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 809a 	beq.w	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	0a5b      	lsrs	r3, r3, #9
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 8093 	beq.w	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fc16 	bl	8008d46 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800851a:	e08e      	b.n	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
 800851c:	e08d      	b.n	800863a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	61fb      	str	r3, [r7, #28]
 800852e:	e007      	b.n	8008540 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	085b      	lsrs	r3, r3, #1
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d012      	beq.n	8008572 <HAL_I2C_EV_IRQHandler+0x20e>
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	0a5b      	lsrs	r3, r3, #9
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00c      	beq.n	8008572 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008568:	69b9      	ldr	r1, [r7, #24]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 ffd8 	bl	8009520 <I2C_Slave_ADDR>
 8008570:	e066      	b.n	8008640 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	091b      	lsrs	r3, r3, #4
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d009      	beq.n	8008592 <HAL_I2C_EV_IRQHandler+0x22e>
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	0a5b      	lsrs	r3, r3, #9
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f001 f812 	bl	80095b4 <I2C_Slave_STOPF>
 8008590:	e056      	b.n	8008640 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b21      	cmp	r3, #33	; 0x21
 8008596:	d002      	beq.n	800859e <HAL_I2C_EV_IRQHandler+0x23a>
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	2b29      	cmp	r3, #41	; 0x29
 800859c:	d125      	bne.n	80085ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	09db      	lsrs	r3, r3, #7
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00f      	beq.n	80085ca <HAL_I2C_EV_IRQHandler+0x266>
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	0a9b      	lsrs	r3, r3, #10
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <HAL_I2C_EV_IRQHandler+0x266>
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	089b      	lsrs	r3, r3, #2
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 feec 	bl	80093a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80085c8:	e039      	b.n	800863e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	089b      	lsrs	r3, r3, #2
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d033      	beq.n	800863e <HAL_I2C_EV_IRQHandler+0x2da>
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	0a5b      	lsrs	r3, r3, #9
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d02d      	beq.n	800863e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 ff1a 	bl	800941c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80085e8:	e029      	b.n	800863e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	099b      	lsrs	r3, r3, #6
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00f      	beq.n	8008616 <HAL_I2C_EV_IRQHandler+0x2b2>
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	0a9b      	lsrs	r3, r3, #10
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	089b      	lsrs	r3, r3, #2
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d103      	bne.n	8008616 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 ff25 	bl	800945e <I2C_SlaveReceive_RXNE>
 8008614:	e014      	b.n	8008640 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	089b      	lsrs	r3, r3, #2
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00e      	beq.n	8008640 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	0a5b      	lsrs	r3, r3, #9
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d008      	beq.n	8008640 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 ff54 	bl	80094dc <I2C_SlaveReceive_BTF>
 8008634:	e004      	b.n	8008640 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008636:	bf00      	nop
 8008638:	e002      	b.n	8008640 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800863a:	bf00      	nop
 800863c:	e000      	b.n	8008640 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800863e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008640:	3720      	adds	r7, #32
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b08a      	sub	sp, #40	; 0x28
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800865e:	2300      	movs	r3, #0
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008668:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00e      	beq.n	8008694 <HAL_I2C_ER_IRQHandler+0x4e>
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	0a1b      	lsrs	r3, r3, #8
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d008      	beq.n	8008694 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	f043 0301 	orr.w	r3, r3, #1
 8008688:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008692:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	0a5b      	lsrs	r3, r3, #9
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00e      	beq.n	80086be <HAL_I2C_ER_IRQHandler+0x78>
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	0a1b      	lsrs	r3, r3, #8
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	f043 0302 	orr.w	r3, r3, #2
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80086bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	0a9b      	lsrs	r3, r3, #10
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d03f      	beq.n	800874a <HAL_I2C_ER_IRQHandler+0x104>
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	0a1b      	lsrs	r3, r3, #8
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d039      	beq.n	800874a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80086d6:	7efb      	ldrb	r3, [r7, #27]
 80086d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086de:	b29b      	uxth	r3, r3
 80086e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80086f0:	7ebb      	ldrb	r3, [r7, #26]
 80086f2:	2b20      	cmp	r3, #32
 80086f4:	d112      	bne.n	800871c <HAL_I2C_ER_IRQHandler+0xd6>
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10f      	bne.n	800871c <HAL_I2C_ER_IRQHandler+0xd6>
 80086fc:	7cfb      	ldrb	r3, [r7, #19]
 80086fe:	2b21      	cmp	r3, #33	; 0x21
 8008700:	d008      	beq.n	8008714 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008702:	7cfb      	ldrb	r3, [r7, #19]
 8008704:	2b29      	cmp	r3, #41	; 0x29
 8008706:	d005      	beq.n	8008714 <HAL_I2C_ER_IRQHandler+0xce>
 8008708:	7cfb      	ldrb	r3, [r7, #19]
 800870a:	2b28      	cmp	r3, #40	; 0x28
 800870c:	d106      	bne.n	800871c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b21      	cmp	r3, #33	; 0x21
 8008712:	d103      	bne.n	800871c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 f881 	bl	800981c <I2C_Slave_AF>
 800871a:	e016      	b.n	800874a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008724:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	f043 0304 	orr.w	r3, r3, #4
 800872c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800872e:	7efb      	ldrb	r3, [r7, #27]
 8008730:	2b10      	cmp	r3, #16
 8008732:	d002      	beq.n	800873a <HAL_I2C_ER_IRQHandler+0xf4>
 8008734:	7efb      	ldrb	r3, [r7, #27]
 8008736:	2b40      	cmp	r3, #64	; 0x40
 8008738:	d107      	bne.n	800874a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008748:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	0adb      	lsrs	r3, r3, #11
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00e      	beq.n	8008774 <HAL_I2C_ER_IRQHandler+0x12e>
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	0a1b      	lsrs	r3, r3, #8
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d008      	beq.n	8008774 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	f043 0308 	orr.w	r3, r3, #8
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008772:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	2b00      	cmp	r3, #0
 8008778:	d008      	beq.n	800878c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	431a      	orrs	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 f8ba 	bl	8009900 <I2C_ITError>
  }
}
 800878c:	bf00      	nop
 800878e:	3728      	adds	r7, #40	; 0x28
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
 80087dc:	4613      	mov	r3, r2
 80087de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800884a:	b2db      	uxtb	r3, r3
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800887e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008886:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008892:	2b00      	cmp	r3, #0
 8008894:	d153      	bne.n	800893e <I2C_MasterTransmit_TXE+0xce>
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	2b21      	cmp	r3, #33	; 0x21
 800889a:	d150      	bne.n	800893e <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2b08      	cmp	r3, #8
 80088a0:	d01e      	beq.n	80088e0 <I2C_MasterTransmit_TXE+0x70>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d01b      	beq.n	80088e0 <I2C_MasterTransmit_TXE+0x70>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088ae:	d017      	beq.n	80088e0 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088be:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2211      	movs	r2, #17
 80088c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80088de:	e062      	b.n	80089a6 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088ee:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088fe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b40      	cmp	r3, #64	; 0x40
 8008918:	d108      	bne.n	800892c <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800892a:	e03c      	b.n	80089a6 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800893c:	e033      	b.n	80089a6 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	2b21      	cmp	r3, #33	; 0x21
 8008942:	d005      	beq.n	8008950 <I2C_MasterTransmit_TXE+0xe0>
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	2b40      	cmp	r3, #64	; 0x40
 8008948:	d12d      	bne.n	80089a6 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	2b22      	cmp	r3, #34	; 0x22
 800894e:	d12a      	bne.n	80089a6 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008954:	b29b      	uxth	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d108      	bne.n	800896c <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008968:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800896a:	e01c      	b.n	80089a6 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b40      	cmp	r3, #64	; 0x40
 8008976:	d103      	bne.n	8008980 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f891 	bl	8008aa0 <I2C_MemoryTransmit_TXE_BTF>
}
 800897e:	e012      	b.n	80089a6 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800899a:	b29b      	uxth	r3, r3
 800899c:	3b01      	subs	r3, #1
 800899e:	b29a      	uxth	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80089a4:	e7ff      	b.n	80089a6 <I2C_MasterTransmit_TXE+0x136>
 80089a6:	bf00      	nop
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b21      	cmp	r3, #33	; 0x21
 80089c6:	d167      	bne.n	8008a98 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d012      	beq.n	80089f8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	781a      	ldrb	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	1c5a      	adds	r2, r3, #1
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80089f6:	e04f      	b.n	8008a98 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b08      	cmp	r3, #8
 80089fc:	d01e      	beq.n	8008a3c <I2C_MasterTransmit_BTF+0x8e>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	d01b      	beq.n	8008a3c <I2C_MasterTransmit_BTF+0x8e>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a0a:	d017      	beq.n	8008a3c <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a1a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2211      	movs	r2, #17
 8008a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	4798      	blx	r3
}
 8008a3a:	e02d      	b.n	8008a98 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a4a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a5a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b40      	cmp	r3, #64	; 0x40
 8008a74:	d108      	bne.n	8008a88 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
}
 8008a86:	e007      	b.n	8008a98 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	4798      	blx	r3
}
 8008a98:	bf00      	nop
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d11d      	bne.n	8008af4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d10b      	bne.n	8008ad8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad0:	1c9a      	adds	r2, r3, #2
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008ad6:	e074      	b.n	8008bc2 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	121b      	asrs	r3, r3, #8
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008af2:	e066      	b.n	8008bc2 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d10b      	bne.n	8008b14 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008b12:	e056      	b.n	8008bc2 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d152      	bne.n	8008bc2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	2b22      	cmp	r3, #34	; 0x22
 8008b20:	d10d      	bne.n	8008b3e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b30:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008b3c:	e041      	b.n	8008bc2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d015      	beq.n	8008b74 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	2b21      	cmp	r3, #33	; 0x21
 8008b4c:	d112      	bne.n	8008b74 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	781a      	ldrb	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008b72:	e026      	b.n	8008bc2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d121      	bne.n	8008bc2 <I2C_MemoryTransmit_TXE_BTF+0x122>
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	2b21      	cmp	r3, #33	; 0x21
 8008b82:	d11e      	bne.n	8008bc2 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b92:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ba2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2220      	movs	r2, #32
 8008bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b22      	cmp	r3, #34	; 0x22
 8008bdc:	f040 80af 	bne.w	8008d3e <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d921      	bls.n	8008c32 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	b2d2      	uxtb	r2, r2
 8008bfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	f040 808f 	bne.w	8008d3e <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c2e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008c30:	e085      	b.n	8008d3e <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d078      	beq.n	8008d2c <I2C_MasterReceive_RXNE+0x162>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d002      	beq.n	8008c46 <I2C_MasterReceive_RXNE+0x7c>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d172      	bne.n	8008d2c <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f001 f83a 	bl	8009cc0 <I2C_WaitOnSTOPRequestThroughIT>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d144      	bne.n	8008cdc <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c60:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008c70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	691a      	ldr	r2, [r3, #16]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	b2d2      	uxtb	r2, r2
 8008c7e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	3b01      	subs	r3, #1
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b40      	cmp	r3, #64	; 0x40
 8008caa:	d10b      	bne.n	8008cc4 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008cc2:	e03c      	b.n	8008d3e <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2212      	movs	r2, #18
 8008cd0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008cda:	e030      	b.n	8008d3e <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008cea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	691a      	ldr	r2, [r3, #16]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	b2d2      	uxtb	r2, r2
 8008cf8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	1c5a      	adds	r2, r3, #1
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2220      	movs	r2, #32
 8008d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008d2a:	e008      	b.n	8008d3e <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d3a:	605a      	str	r2, [r3, #4]
}
 8008d3c:	e7ff      	b.n	8008d3e <I2C_MasterReceive_RXNE+0x174>
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d52:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	d11b      	bne.n	8008d96 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d6c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	691a      	ldr	r2, [r3, #16]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	b2d2      	uxtb	r2, r2
 8008d7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008d94:	e0bf      	b.n	8008f16 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d129      	bne.n	8008df4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b04      	cmp	r3, #4
 8008db4:	d00a      	beq.n	8008dcc <I2C_MasterReceive_BTF+0x86>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d007      	beq.n	8008dcc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691a      	ldr	r2, [r3, #16]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008df2:	e090      	b.n	8008f16 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d178      	bne.n	8008ef0 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d002      	beq.n	8008e0a <I2C_MasterReceive_BTF+0xc4>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b10      	cmp	r3, #16
 8008e08:	d108      	bne.n	8008e1c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	e019      	b.n	8008e50 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d002      	beq.n	8008e28 <I2C_MasterReceive_BTF+0xe2>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d108      	bne.n	8008e3a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e00a      	b.n	8008e50 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b10      	cmp	r3, #16
 8008e3e:	d007      	beq.n	8008e50 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e4e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	691a      	ldr	r2, [r3, #16]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	691a      	ldr	r2, [r3, #16]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008eaa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b40      	cmp	r3, #64	; 0x40
 8008ebe:	d10b      	bne.n	8008ed8 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	4798      	blx	r3
}
 8008ed6:	e01e      	b.n	8008f16 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2212      	movs	r2, #18
 8008ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4798      	blx	r3
}
 8008eee:	e012      	b.n	8008f16 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	691a      	ldr	r2, [r3, #16]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	b2d2      	uxtb	r2, r2
 8008efc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008f16:	bf00      	nop
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b40      	cmp	r3, #64	; 0x40
 8008f30:	d117      	bne.n	8008f62 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f4a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008f4c:	e067      	b.n	800901e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f043 0301 	orr.w	r3, r3, #1
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	611a      	str	r2, [r3, #16]
}
 8008f60:	e05d      	b.n	800901e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f6a:	d133      	bne.n	8008fd4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b21      	cmp	r3, #33	; 0x21
 8008f76:	d109      	bne.n	8008f8c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f88:	611a      	str	r2, [r3, #16]
 8008f8a:	e008      	b.n	8008f9e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f043 0301 	orr.w	r3, r3, #1
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d004      	beq.n	8008fb0 <I2C_Master_SB+0x92>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d108      	bne.n	8008fc2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d032      	beq.n	800901e <I2C_Master_SB+0x100>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d02d      	beq.n	800901e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fd0:	605a      	str	r2, [r3, #4]
}
 8008fd2:	e024      	b.n	800901e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10e      	bne.n	8008ffa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	11db      	asrs	r3, r3, #7
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	f003 0306 	and.w	r3, r3, #6
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f063 030f 	orn	r3, r3, #15
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	611a      	str	r2, [r3, #16]
}
 8008ff8:	e011      	b.n	800901e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d10d      	bne.n	800901e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009006:	b29b      	uxth	r3, r3
 8009008:	11db      	asrs	r3, r3, #7
 800900a:	b2db      	uxtb	r3, r3
 800900c:	f003 0306 	and.w	r3, r3, #6
 8009010:	b2db      	uxtb	r3, r3
 8009012:	f063 030e 	orn	r3, r3, #14
 8009016:	b2da      	uxtb	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	611a      	str	r2, [r3, #16]
}
 800901e:	bf00      	nop
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009036:	b2da      	uxtb	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009042:	2b00      	cmp	r3, #0
 8009044:	d004      	beq.n	8009050 <I2C_Master_ADD10+0x26>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800904a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d108      	bne.n	8009062 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00c      	beq.n	8009072 <I2C_Master_ADD10+0x48>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905e:	2b00      	cmp	r3, #0
 8009060:	d007      	beq.n	8009072 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009070:	605a      	str	r2, [r3, #4]
  }
}
 8009072:	bf00      	nop
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800907e:	b480      	push	{r7}
 8009080:	b091      	sub	sp, #68	; 0x44
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800908c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b22      	cmp	r3, #34	; 0x22
 80090a6:	f040 8169 	bne.w	800937c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10f      	bne.n	80090d2 <I2C_Master_ADDR+0x54>
 80090b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d10b      	bne.n	80090d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ba:	2300      	movs	r3, #0
 80090bc:	633b      	str	r3, [r7, #48]	; 0x30
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	695b      	ldr	r3, [r3, #20]
 80090c4:	633b      	str	r3, [r7, #48]	; 0x30
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	633b      	str	r3, [r7, #48]	; 0x30
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	e160      	b.n	8009394 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d11d      	bne.n	8009116 <I2C_Master_ADDR+0x98>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80090e2:	d118      	bne.n	8009116 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090e4:	2300      	movs	r3, #0
 80090e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009108:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	651a      	str	r2, [r3, #80]	; 0x50
 8009114:	e13e      	b.n	8009394 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911a:	b29b      	uxth	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d113      	bne.n	8009148 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009120:	2300      	movs	r3, #0
 8009122:	62bb      	str	r3, [r7, #40]	; 0x28
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	62bb      	str	r3, [r7, #40]	; 0x28
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	62bb      	str	r3, [r7, #40]	; 0x28
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	e115      	b.n	8009374 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b01      	cmp	r3, #1
 8009150:	f040 808a 	bne.w	8009268 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800915a:	d137      	bne.n	80091cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800916a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800917a:	d113      	bne.n	80091a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800918a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800918c:	2300      	movs	r3, #0
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	e0e7      	b.n	8009374 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091a4:	2300      	movs	r3, #0
 80091a6:	623b      	str	r3, [r7, #32]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	623b      	str	r3, [r7, #32]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	623b      	str	r3, [r7, #32]
 80091b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	e0d3      	b.n	8009374 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	2b08      	cmp	r3, #8
 80091d0:	d02e      	beq.n	8009230 <I2C_Master_ADDR+0x1b2>
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d02b      	beq.n	8009230 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80091d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091da:	2b12      	cmp	r3, #18
 80091dc:	d102      	bne.n	80091e4 <I2C_Master_ADDR+0x166>
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d125      	bne.n	8009230 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d00e      	beq.n	8009208 <I2C_Master_ADDR+0x18a>
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d00b      	beq.n	8009208 <I2C_Master_ADDR+0x18a>
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	2b10      	cmp	r3, #16
 80091f4:	d008      	beq.n	8009208 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	e007      	b.n	8009218 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009216:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009218:	2300      	movs	r3, #0
 800921a:	61fb      	str	r3, [r7, #28]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	61fb      	str	r3, [r7, #28]
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	e0a1      	b.n	8009374 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800923e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009240:	2300      	movs	r3, #0
 8009242:	61bb      	str	r3, [r7, #24]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	61bb      	str	r3, [r7, #24]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	61bb      	str	r3, [r7, #24]
 8009254:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	e085      	b.n	8009374 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926c:	b29b      	uxth	r3, r3
 800926e:	2b02      	cmp	r3, #2
 8009270:	d14d      	bne.n	800930e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	2b04      	cmp	r3, #4
 8009276:	d016      	beq.n	80092a6 <I2C_Master_ADDR+0x228>
 8009278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927a:	2b02      	cmp	r3, #2
 800927c:	d013      	beq.n	80092a6 <I2C_Master_ADDR+0x228>
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	2b10      	cmp	r3, #16
 8009282:	d010      	beq.n	80092a6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009292:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	e007      	b.n	80092b6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092b4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092c4:	d117      	bne.n	80092f6 <I2C_Master_ADDR+0x278>
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092cc:	d00b      	beq.n	80092e6 <I2C_Master_ADDR+0x268>
 80092ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d008      	beq.n	80092e6 <I2C_Master_ADDR+0x268>
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	2b08      	cmp	r3, #8
 80092d8:	d005      	beq.n	80092e6 <I2C_Master_ADDR+0x268>
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	2b10      	cmp	r3, #16
 80092de:	d002      	beq.n	80092e6 <I2C_Master_ADDR+0x268>
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d107      	bne.n	80092f6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80092f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092f6:	2300      	movs	r3, #0
 80092f8:	617b      	str	r3, [r7, #20]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	617b      	str	r3, [r7, #20]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	e032      	b.n	8009374 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800931c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800932c:	d117      	bne.n	800935e <I2C_Master_ADDR+0x2e0>
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009334:	d00b      	beq.n	800934e <I2C_Master_ADDR+0x2d0>
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	2b01      	cmp	r3, #1
 800933a:	d008      	beq.n	800934e <I2C_Master_ADDR+0x2d0>
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	2b08      	cmp	r3, #8
 8009340:	d005      	beq.n	800934e <I2C_Master_ADDR+0x2d0>
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	2b10      	cmp	r3, #16
 8009346:	d002      	beq.n	800934e <I2C_Master_ADDR+0x2d0>
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	2b20      	cmp	r3, #32
 800934c:	d107      	bne.n	800935e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800935c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800935e:	2300      	movs	r3, #0
 8009360:	613b      	str	r3, [r7, #16]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	613b      	str	r3, [r7, #16]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	613b      	str	r3, [r7, #16]
 8009372:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800937a:	e00b      	b.n	8009394 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800937c:	2300      	movs	r3, #0
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	68fb      	ldr	r3, [r7, #12]
}
 8009392:	e7ff      	b.n	8009394 <I2C_Master_ADDR+0x316>
 8009394:	bf00      	nop
 8009396:	3744      	adds	r7, #68	; 0x44
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d02c      	beq.n	8009414 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	3b01      	subs	r3, #1
 80093d8:	b29a      	uxth	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d115      	bne.n	8009414 <I2C_SlaveTransmit_TXE+0x74>
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	2b29      	cmp	r3, #41	; 0x29
 80093ec:	d112      	bne.n	8009414 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2221      	movs	r2, #33	; 0x21
 8009402:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2228      	movs	r2, #40	; 0x28
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009414:	bf00      	nop
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d011      	beq.n	8009452 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	781a      	ldrb	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009448:	b29b      	uxth	r3, r3
 800944a:	3b01      	subs	r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009472:	b29b      	uxth	r3, r3
 8009474:	2b00      	cmp	r3, #0
 8009476:	d02d      	beq.n	80094d4 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	691a      	ldr	r2, [r3, #16]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	b2d2      	uxtb	r2, r2
 8009484:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009494:	b29b      	uxth	r3, r3
 8009496:	3b01      	subs	r3, #1
 8009498:	b29a      	uxth	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d115      	bne.n	80094d4 <I2C_SlaveReceive_RXNE+0x76>
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	2b2a      	cmp	r3, #42	; 0x2a
 80094ac:	d112      	bne.n	80094d4 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2222      	movs	r2, #34	; 0x22
 80094c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2228      	movs	r2, #40	; 0x28
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d012      	beq.n	8009514 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	691a      	ldr	r2, [r3, #16]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	b2d2      	uxtb	r2, r2
 80094fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950a:	b29b      	uxth	r3, r3
 800950c:	3b01      	subs	r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800953a:	2b28      	cmp	r3, #40	; 0x28
 800953c:	d127      	bne.n	800958e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800954c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	089b      	lsrs	r3, r3, #2
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800955a:	2301      	movs	r3, #1
 800955c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	09db      	lsrs	r3, r3, #7
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d103      	bne.n	8009572 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	81bb      	strh	r3, [r7, #12]
 8009570:	e002      	b.n	8009578 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009584:	89ba      	ldrh	r2, [r7, #12]
 8009586:	7bf9      	ldrb	r1, [r7, #15]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800958c:	e00e      	b.n	80095ac <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800958e:	2300      	movs	r3, #0
 8009590:	60bb      	str	r3, [r7, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	60bb      	str	r3, [r7, #8]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	60bb      	str	r3, [r7, #8]
 80095a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685a      	ldr	r2, [r3, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80095d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80095d4:	2300      	movs	r3, #0
 80095d6:	60bb      	str	r3, [r7, #8]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	60bb      	str	r3, [r7, #8]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0201 	orr.w	r2, r2, #1
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009600:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800960c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009610:	d172      	bne.n	80096f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2b22      	cmp	r3, #34	; 0x22
 8009616:	d002      	beq.n	800961e <I2C_Slave_STOPF+0x6a>
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	2b2a      	cmp	r3, #42	; 0x2a
 800961c:	d135      	bne.n	800968a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	b29a      	uxth	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009630:	b29b      	uxth	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d005      	beq.n	8009642 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	f043 0204 	orr.w	r2, r3, #4
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009650:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009656:	4618      	mov	r0, r3
 8009658:	f7fd fef0 	bl	800743c <HAL_DMA_GetState>
 800965c:	4603      	mov	r3, r0
 800965e:	2b01      	cmp	r3, #1
 8009660:	d049      	beq.n	80096f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	4a6b      	ldr	r2, [pc, #428]	; (8009814 <I2C_Slave_STOPF+0x260>)
 8009668:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966e:	4618      	mov	r0, r3
 8009670:	f7fd fd38 	bl	80070e4 <HAL_DMA_Abort_IT>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d03d      	beq.n	80096f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009684:	4610      	mov	r0, r2
 8009686:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009688:	e035      	b.n	80096f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	b29a      	uxth	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	f043 0204 	orr.w	r2, r3, #4
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fd feba 	bl	800743c <HAL_DMA_GetState>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d014      	beq.n	80096f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d2:	4a50      	ldr	r2, [pc, #320]	; (8009814 <I2C_Slave_STOPF+0x260>)
 80096d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fd fd02 	bl	80070e4 <HAL_DMA_Abort_IT>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d008      	beq.n	80096f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
 80096f4:	e000      	b.n	80096f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d03e      	beq.n	8009780 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b04      	cmp	r3, #4
 800970e:	d112      	bne.n	8009736 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	b2d2      	uxtb	r2, r2
 800971c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800972c:	b29b      	uxth	r3, r3
 800972e:	3b01      	subs	r3, #1
 8009730:	b29a      	uxth	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009740:	2b40      	cmp	r3, #64	; 0x40
 8009742:	d112      	bne.n	800976a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691a      	ldr	r2, [r3, #16]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b01      	subs	r3, #1
 8009764:	b29a      	uxth	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800976e:	b29b      	uxth	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009778:	f043 0204 	orr.w	r2, r3, #4
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f8b9 	bl	8009900 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800978e:	e03c      	b.n	800980a <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	2b2a      	cmp	r3, #42	; 0x2a
 8009794:	d10a      	bne.n	80097ac <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2228      	movs	r2, #40	; 0x28
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b28      	cmp	r3, #40	; 0x28
 80097b6:	d112      	bne.n	80097de <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a17      	ldr	r2, [pc, #92]	; (8009818 <I2C_Slave_STOPF+0x264>)
 80097bc:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	4798      	blx	r3
}
 80097dc:	e015      	b.n	800980a <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	2b22      	cmp	r3, #34	; 0x22
 80097e4:	d002      	beq.n	80097ec <I2C_Slave_STOPF+0x238>
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	2b22      	cmp	r3, #34	; 0x22
 80097ea:	d10e      	bne.n	800980a <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
}
 800980a:	bf00      	nop
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	08009b6d 	.word	0x08009b6d
 8009818:	ffff0000 	.word	0xffff0000

0800981c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800982a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009830:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2b08      	cmp	r3, #8
 8009836:	d002      	beq.n	800983e <I2C_Slave_AF+0x22>
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b20      	cmp	r3, #32
 800983c:	d12a      	bne.n	8009894 <I2C_Slave_AF+0x78>
 800983e:	7bfb      	ldrb	r3, [r7, #15]
 8009840:	2b28      	cmp	r3, #40	; 0x28
 8009842:	d127      	bne.n	8009894 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a2d      	ldr	r2, [pc, #180]	; (80098fc <I2C_Slave_AF+0xe0>)
 8009848:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009858:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009862:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009872:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2220      	movs	r2, #32
 800987e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009892:	e02f      	b.n	80098f4 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	2b21      	cmp	r3, #33	; 0x21
 8009898:	d127      	bne.n	80098ea <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a17      	ldr	r2, [pc, #92]	; (80098fc <I2C_Slave_AF+0xe0>)
 800989e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2221      	movs	r2, #33	; 0x21
 80098a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2220      	movs	r2, #32
 80098aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80098c4:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098ce:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098de:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	4798      	blx	r3
}
 80098e8:	e004      	b.n	80098f4 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098f2:	615a      	str	r2, [r3, #20]
}
 80098f4:	bf00      	nop
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	ffff0000 	.word	0xffff0000

08009900 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800990e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009916:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	2b10      	cmp	r3, #16
 800991c:	d002      	beq.n	8009924 <I2C_ITError+0x24>
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	2b40      	cmp	r3, #64	; 0x40
 8009922:	d10a      	bne.n	800993a <I2C_ITError+0x3a>
 8009924:	7bfb      	ldrb	r3, [r7, #15]
 8009926:	2b22      	cmp	r3, #34	; 0x22
 8009928:	d107      	bne.n	800993a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009938:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009940:	2b28      	cmp	r3, #40	; 0x28
 8009942:	d107      	bne.n	8009954 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2228      	movs	r2, #40	; 0x28
 800994e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009952:	e015      	b.n	8009980 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800995e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009962:	d00a      	beq.n	800997a <I2C_ITError+0x7a>
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	2b60      	cmp	r3, #96	; 0x60
 8009968:	d007      	beq.n	800997a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2220      	movs	r2, #32
 800996e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800998a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800998e:	d162      	bne.n	8009a56 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800999e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d020      	beq.n	80099f0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b2:	4a6c      	ldr	r2, [pc, #432]	; (8009b64 <I2C_ITError+0x264>)
 80099b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fd fb92 	bl	80070e4 <HAL_DMA_Abort_IT>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 808b 	beq.w	8009ade <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 0201 	bic.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80099ea:	4610      	mov	r0, r2
 80099ec:	4798      	blx	r3
 80099ee:	e076      	b.n	8009ade <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f4:	4a5b      	ldr	r2, [pc, #364]	; (8009b64 <I2C_ITError+0x264>)
 80099f6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fd fb71 	bl	80070e4 <HAL_DMA_Abort_IT>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d06a      	beq.n	8009ade <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a12:	2b40      	cmp	r3, #64	; 0x40
 8009a14:	d10b      	bne.n	8009a2e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	691a      	ldr	r2, [r3, #16]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0201 	bic.w	r2, r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2220      	movs	r2, #32
 8009a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a50:	4610      	mov	r0, r2
 8009a52:	4798      	blx	r3
 8009a54:	e043      	b.n	8009ade <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b60      	cmp	r3, #96	; 0x60
 8009a60:	d126      	bne.n	8009ab0 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7a:	2b40      	cmp	r3, #64	; 0x40
 8009a7c:	d10b      	bne.n	8009a96 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	b2d2      	uxtb	r2, r2
 8009a8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0201 	bic.w	r2, r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	4798      	blx	r3
 8009aae:	e016      	b.n	8009ade <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aba:	2b40      	cmp	r3, #64	; 0x40
 8009abc:	d10b      	bne.n	8009ad6 <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	691a      	ldr	r2, [r3, #16]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	b2d2      	uxtb	r2, r2
 8009aca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10e      	bne.n	8009b0c <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d109      	bne.n	8009b0c <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d104      	bne.n	8009b0c <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009b1a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b22:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d114      	bne.n	8009b5a <I2C_ITError+0x25a>
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	2b28      	cmp	r3, #40	; 0x28
 8009b34:	d111      	bne.n	8009b5a <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a0b      	ldr	r2, [pc, #44]	; (8009b68 <I2C_ITError+0x268>)
 8009b3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2220      	movs	r2, #32
 8009b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	08009b6d 	.word	0x08009b6d
 8009b68:	ffff0000 	.word	0xffff0000

08009b6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b84:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009b86:	4b4c      	ldr	r3, [pc, #304]	; (8009cb8 <I2C_DMAAbort+0x14c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	08db      	lsrs	r3, r3, #3
 8009b8c:	4a4b      	ldr	r2, [pc, #300]	; (8009cbc <I2C_DMAAbort+0x150>)
 8009b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b92:	0a1a      	lsrs	r2, r3, #8
 8009b94:	4613      	mov	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	00da      	lsls	r2, r3, #3
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d106      	bne.n	8009bb4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	f043 0220 	orr.w	r2, r3, #32
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009bb2:	e00a      	b.n	8009bca <I2C_DMAAbort+0x5e>
    }
    count--;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc8:	d0ea      	beq.n	8009ba0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d003      	beq.n	8009bea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be6:	2200      	movs	r2, #0
 8009be8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bf8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d003      	beq.n	8009c20 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 0201 	bic.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b60      	cmp	r3, #96	; 0x60
 8009c3a:	d10f      	bne.n	8009c5c <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	2220      	movs	r2, #32
 8009c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c56:	6978      	ldr	r0, [r7, #20]
 8009c58:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009c5a:	e028      	b.n	8009cae <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c5c:	7cfb      	ldrb	r3, [r7, #19]
 8009c5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c62:	2b28      	cmp	r3, #40	; 0x28
 8009c64:	d117      	bne.n	8009c96 <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f042 0201 	orr.w	r2, r2, #1
 8009c74:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c84:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2228      	movs	r2, #40	; 0x28
 8009c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009c94:	e007      	b.n	8009ca6 <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009caa:	6978      	ldr	r0, [r7, #20]
 8009cac:	4798      	blx	r3
}
 8009cae:	bf00      	nop
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	2000004c 	.word	0x2000004c
 8009cbc:	14f8b589 	.word	0x14f8b589

08009cc0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009ccc:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	08db      	lsrs	r3, r3, #3
 8009cd2:	4a13      	ldr	r2, [pc, #76]	; (8009d20 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd8:	0a1a      	lsrs	r2, r3, #8
 8009cda:	4613      	mov	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d107      	bne.n	8009cfe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	f043 0220 	orr.w	r2, r3, #32
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e008      	b.n	8009d10 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d0c:	d0e9      	beq.n	8009ce2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	2000004c 	.word	0x2000004c
 8009d20:	14f8b589 	.word	0x14f8b589

08009d24 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009d34:	d103      	bne.n	8009d3e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009d3c:	e007      	b.n	8009d4e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d42:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009d46:	d102      	bne.n	8009d4e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2208      	movs	r2, #8
 8009d4c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d101      	bne.n	8009d6c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e034      	b.n	8009dd6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009d74:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f245 5255 	movw	r2, #21845	; 0x5555
 8009d7e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6852      	ldr	r2, [r2, #4]
 8009d88:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	6892      	ldr	r2, [r2, #8]
 8009d92:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009d94:	f7fb ffda 	bl	8005d4c <HAL_GetTick>
 8009d98:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009d9a:	e00f      	b.n	8009dbc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009d9c:	f7fb ffd6 	bl	8005d4c <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	2b31      	cmp	r3, #49	; 0x31
 8009da8:	d908      	bls.n	8009dbc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f003 0303 	and.w	r3, r3, #3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e00c      	b.n	8009dd6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f003 0303 	and.w	r3, r3, #3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e8      	bne.n	8009d9c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009dd2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b083      	sub	sp, #12
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009dee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
	...

08009e00 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8009e04:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <HAL_PWR_PVD_IRQHandler+0x20>)
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d005      	beq.n	8009e1c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8009e10:	f000 f808 	bl	8009e24 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8009e14:	4b02      	ldr	r3, [pc, #8]	; (8009e20 <HAL_PWR_PVD_IRQHandler+0x20>)
 8009e16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e1a:	615a      	str	r2, [r3, #20]
  }
}
 8009e1c:	bf00      	nop
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	40013c00 	.word	0x40013c00

08009e24 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8009e24:	b480      	push	{r7}
 8009e26:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8009e28:	bf00      	nop
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
	...

08009e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e267      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d075      	beq.n	8009f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e52:	4b88      	ldr	r3, [pc, #544]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f003 030c 	and.w	r3, r3, #12
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	d00c      	beq.n	8009e78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e5e:	4b85      	ldr	r3, [pc, #532]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	d112      	bne.n	8009e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e6a:	4b82      	ldr	r3, [pc, #520]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e76:	d10b      	bne.n	8009e90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e78:	4b7e      	ldr	r3, [pc, #504]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d05b      	beq.n	8009f3c <HAL_RCC_OscConfig+0x108>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d157      	bne.n	8009f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e242      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e98:	d106      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x74>
 8009e9a:	4b76      	ldr	r3, [pc, #472]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a75      	ldr	r2, [pc, #468]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	e01d      	b.n	8009ee4 <HAL_RCC_OscConfig+0xb0>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009eb0:	d10c      	bne.n	8009ecc <HAL_RCC_OscConfig+0x98>
 8009eb2:	4b70      	ldr	r3, [pc, #448]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a6f      	ldr	r2, [pc, #444]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	4b6d      	ldr	r3, [pc, #436]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a6c      	ldr	r2, [pc, #432]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	e00b      	b.n	8009ee4 <HAL_RCC_OscConfig+0xb0>
 8009ecc:	4b69      	ldr	r3, [pc, #420]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a68      	ldr	r2, [pc, #416]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ed6:	6013      	str	r3, [r2, #0]
 8009ed8:	4b66      	ldr	r3, [pc, #408]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a65      	ldr	r2, [pc, #404]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d013      	beq.n	8009f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eec:	f7fb ff2e 	bl	8005d4c <HAL_GetTick>
 8009ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ef2:	e008      	b.n	8009f06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ef4:	f7fb ff2a 	bl	8005d4c <HAL_GetTick>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	2b64      	cmp	r3, #100	; 0x64
 8009f00:	d901      	bls.n	8009f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e207      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f06:	4b5b      	ldr	r3, [pc, #364]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0f0      	beq.n	8009ef4 <HAL_RCC_OscConfig+0xc0>
 8009f12:	e014      	b.n	8009f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f14:	f7fb ff1a 	bl	8005d4c <HAL_GetTick>
 8009f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f1a:	e008      	b.n	8009f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f1c:	f7fb ff16 	bl	8005d4c <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	2b64      	cmp	r3, #100	; 0x64
 8009f28:	d901      	bls.n	8009f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e1f3      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f2e:	4b51      	ldr	r3, [pc, #324]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1f0      	bne.n	8009f1c <HAL_RCC_OscConfig+0xe8>
 8009f3a:	e000      	b.n	8009f3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0302 	and.w	r3, r3, #2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d063      	beq.n	800a012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f4a:	4b4a      	ldr	r3, [pc, #296]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f003 030c 	and.w	r3, r3, #12
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00b      	beq.n	8009f6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f56:	4b47      	ldr	r3, [pc, #284]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f5e:	2b08      	cmp	r3, #8
 8009f60:	d11c      	bne.n	8009f9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f62:	4b44      	ldr	r3, [pc, #272]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d116      	bne.n	8009f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f6e:	4b41      	ldr	r3, [pc, #260]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 0302 	and.w	r3, r3, #2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d005      	beq.n	8009f86 <HAL_RCC_OscConfig+0x152>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d001      	beq.n	8009f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e1c7      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f86:	4b3b      	ldr	r3, [pc, #236]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	00db      	lsls	r3, r3, #3
 8009f94:	4937      	ldr	r1, [pc, #220]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f9a:	e03a      	b.n	800a012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d020      	beq.n	8009fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009fa4:	4b34      	ldr	r3, [pc, #208]	; (800a078 <HAL_RCC_OscConfig+0x244>)
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009faa:	f7fb fecf 	bl	8005d4c <HAL_GetTick>
 8009fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fb0:	e008      	b.n	8009fc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fb2:	f7fb fecb 	bl	8005d4c <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d901      	bls.n	8009fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e1a8      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fc4:	4b2b      	ldr	r3, [pc, #172]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0f0      	beq.n	8009fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fd0:	4b28      	ldr	r3, [pc, #160]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	00db      	lsls	r3, r3, #3
 8009fde:	4925      	ldr	r1, [pc, #148]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	600b      	str	r3, [r1, #0]
 8009fe4:	e015      	b.n	800a012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fe6:	4b24      	ldr	r3, [pc, #144]	; (800a078 <HAL_RCC_OscConfig+0x244>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fec:	f7fb feae 	bl	8005d4c <HAL_GetTick>
 8009ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ff2:	e008      	b.n	800a006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ff4:	f7fb feaa 	bl	8005d4c <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d901      	bls.n	800a006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e187      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a006:	4b1b      	ldr	r3, [pc, #108]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0302 	and.w	r3, r3, #2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1f0      	bne.n	8009ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0308 	and.w	r3, r3, #8
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d036      	beq.n	800a08c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d016      	beq.n	800a054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a026:	4b15      	ldr	r3, [pc, #84]	; (800a07c <HAL_RCC_OscConfig+0x248>)
 800a028:	2201      	movs	r2, #1
 800a02a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a02c:	f7fb fe8e 	bl	8005d4c <HAL_GetTick>
 800a030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a032:	e008      	b.n	800a046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a034:	f7fb fe8a 	bl	8005d4c <HAL_GetTick>
 800a038:	4602      	mov	r2, r0
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d901      	bls.n	800a046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e167      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a046:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <HAL_RCC_OscConfig+0x240>)
 800a048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0f0      	beq.n	800a034 <HAL_RCC_OscConfig+0x200>
 800a052:	e01b      	b.n	800a08c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a054:	4b09      	ldr	r3, [pc, #36]	; (800a07c <HAL_RCC_OscConfig+0x248>)
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a05a:	f7fb fe77 	bl	8005d4c <HAL_GetTick>
 800a05e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a060:	e00e      	b.n	800a080 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a062:	f7fb fe73 	bl	8005d4c <HAL_GetTick>
 800a066:	4602      	mov	r2, r0
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d907      	bls.n	800a080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e150      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
 800a074:	40023800 	.word	0x40023800
 800a078:	42470000 	.word	0x42470000
 800a07c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a080:	4b88      	ldr	r3, [pc, #544]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a084:	f003 0302 	and.w	r3, r3, #2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1ea      	bne.n	800a062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 8097 	beq.w	800a1c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a09a:	2300      	movs	r3, #0
 800a09c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a09e:	4b81      	ldr	r3, [pc, #516]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10f      	bne.n	800a0ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60bb      	str	r3, [r7, #8]
 800a0ae:	4b7d      	ldr	r3, [pc, #500]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	4a7c      	ldr	r2, [pc, #496]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a0b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0b8:	6413      	str	r3, [r2, #64]	; 0x40
 800a0ba:	4b7a      	ldr	r3, [pc, #488]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0c2:	60bb      	str	r3, [r7, #8]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0ca:	4b77      	ldr	r3, [pc, #476]	; (800a2a8 <HAL_RCC_OscConfig+0x474>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d118      	bne.n	800a108 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a0d6:	4b74      	ldr	r3, [pc, #464]	; (800a2a8 <HAL_RCC_OscConfig+0x474>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a73      	ldr	r2, [pc, #460]	; (800a2a8 <HAL_RCC_OscConfig+0x474>)
 800a0dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0e2:	f7fb fe33 	bl	8005d4c <HAL_GetTick>
 800a0e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0e8:	e008      	b.n	800a0fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0ea:	f7fb fe2f 	bl	8005d4c <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d901      	bls.n	800a0fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e10c      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0fc:	4b6a      	ldr	r3, [pc, #424]	; (800a2a8 <HAL_RCC_OscConfig+0x474>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a104:	2b00      	cmp	r3, #0
 800a106:	d0f0      	beq.n	800a0ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d106      	bne.n	800a11e <HAL_RCC_OscConfig+0x2ea>
 800a110:	4b64      	ldr	r3, [pc, #400]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a114:	4a63      	ldr	r2, [pc, #396]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a116:	f043 0301 	orr.w	r3, r3, #1
 800a11a:	6713      	str	r3, [r2, #112]	; 0x70
 800a11c:	e01c      	b.n	800a158 <HAL_RCC_OscConfig+0x324>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	2b05      	cmp	r3, #5
 800a124:	d10c      	bne.n	800a140 <HAL_RCC_OscConfig+0x30c>
 800a126:	4b5f      	ldr	r3, [pc, #380]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12a:	4a5e      	ldr	r2, [pc, #376]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a12c:	f043 0304 	orr.w	r3, r3, #4
 800a130:	6713      	str	r3, [r2, #112]	; 0x70
 800a132:	4b5c      	ldr	r3, [pc, #368]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a136:	4a5b      	ldr	r2, [pc, #364]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a138:	f043 0301 	orr.w	r3, r3, #1
 800a13c:	6713      	str	r3, [r2, #112]	; 0x70
 800a13e:	e00b      	b.n	800a158 <HAL_RCC_OscConfig+0x324>
 800a140:	4b58      	ldr	r3, [pc, #352]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a144:	4a57      	ldr	r2, [pc, #348]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a146:	f023 0301 	bic.w	r3, r3, #1
 800a14a:	6713      	str	r3, [r2, #112]	; 0x70
 800a14c:	4b55      	ldr	r3, [pc, #340]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a150:	4a54      	ldr	r2, [pc, #336]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a152:	f023 0304 	bic.w	r3, r3, #4
 800a156:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d015      	beq.n	800a18c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a160:	f7fb fdf4 	bl	8005d4c <HAL_GetTick>
 800a164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a166:	e00a      	b.n	800a17e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a168:	f7fb fdf0 	bl	8005d4c <HAL_GetTick>
 800a16c:	4602      	mov	r2, r0
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	f241 3288 	movw	r2, #5000	; 0x1388
 800a176:	4293      	cmp	r3, r2
 800a178:	d901      	bls.n	800a17e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e0cb      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a17e:	4b49      	ldr	r3, [pc, #292]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a182:	f003 0302 	and.w	r3, r3, #2
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0ee      	beq.n	800a168 <HAL_RCC_OscConfig+0x334>
 800a18a:	e014      	b.n	800a1b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a18c:	f7fb fdde 	bl	8005d4c <HAL_GetTick>
 800a190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a192:	e00a      	b.n	800a1aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a194:	f7fb fdda 	bl	8005d4c <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d901      	bls.n	800a1aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e0b5      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a1aa:	4b3e      	ldr	r3, [pc, #248]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1ee      	bne.n	800a194 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d105      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1bc:	4b39      	ldr	r3, [pc, #228]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	4a38      	ldr	r2, [pc, #224]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a1c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f000 80a1 	beq.w	800a314 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a1d2:	4b34      	ldr	r3, [pc, #208]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f003 030c 	and.w	r3, r3, #12
 800a1da:	2b08      	cmp	r3, #8
 800a1dc:	d05c      	beq.n	800a298 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d141      	bne.n	800a26a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1e6:	4b31      	ldr	r3, [pc, #196]	; (800a2ac <HAL_RCC_OscConfig+0x478>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1ec:	f7fb fdae 	bl	8005d4c <HAL_GetTick>
 800a1f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1f2:	e008      	b.n	800a206 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1f4:	f7fb fdaa 	bl	8005d4c <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d901      	bls.n	800a206 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e087      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a206:	4b27      	ldr	r3, [pc, #156]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1f0      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	69da      	ldr	r2, [r3, #28]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	431a      	orrs	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a220:	019b      	lsls	r3, r3, #6
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a228:	085b      	lsrs	r3, r3, #1
 800a22a:	3b01      	subs	r3, #1
 800a22c:	041b      	lsls	r3, r3, #16
 800a22e:	431a      	orrs	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	061b      	lsls	r3, r3, #24
 800a236:	491b      	ldr	r1, [pc, #108]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a23c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ac <HAL_RCC_OscConfig+0x478>)
 800a23e:	2201      	movs	r2, #1
 800a240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a242:	f7fb fd83 	bl	8005d4c <HAL_GetTick>
 800a246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a248:	e008      	b.n	800a25c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a24a:	f7fb fd7f 	bl	8005d4c <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	2b02      	cmp	r3, #2
 800a256:	d901      	bls.n	800a25c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e05c      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a25c:	4b11      	ldr	r3, [pc, #68]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d0f0      	beq.n	800a24a <HAL_RCC_OscConfig+0x416>
 800a268:	e054      	b.n	800a314 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a26a:	4b10      	ldr	r3, [pc, #64]	; (800a2ac <HAL_RCC_OscConfig+0x478>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a270:	f7fb fd6c 	bl	8005d4c <HAL_GetTick>
 800a274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a276:	e008      	b.n	800a28a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a278:	f7fb fd68 	bl	8005d4c <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b02      	cmp	r3, #2
 800a284:	d901      	bls.n	800a28a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e045      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a28a:	4b06      	ldr	r3, [pc, #24]	; (800a2a4 <HAL_RCC_OscConfig+0x470>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1f0      	bne.n	800a278 <HAL_RCC_OscConfig+0x444>
 800a296:	e03d      	b.n	800a314 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d107      	bne.n	800a2b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e038      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
 800a2a4:	40023800 	.word	0x40023800
 800a2a8:	40007000 	.word	0x40007000
 800a2ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a2b0:	4b1b      	ldr	r3, [pc, #108]	; (800a320 <HAL_RCC_OscConfig+0x4ec>)
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d028      	beq.n	800a310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d121      	bne.n	800a310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d11a      	bne.n	800a310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d111      	bne.n	800a310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f6:	085b      	lsrs	r3, r3, #1
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d107      	bne.n	800a310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d001      	beq.n	800a314 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e000      	b.n	800a316 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	40023800 	.word	0x40023800

0800a324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d101      	bne.n	800a338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e0cc      	b.n	800a4d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a338:	4b68      	ldr	r3, [pc, #416]	; (800a4dc <HAL_RCC_ClockConfig+0x1b8>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0307 	and.w	r3, r3, #7
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	429a      	cmp	r2, r3
 800a344:	d90c      	bls.n	800a360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a346:	4b65      	ldr	r3, [pc, #404]	; (800a4dc <HAL_RCC_ClockConfig+0x1b8>)
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	b2d2      	uxtb	r2, r2
 800a34c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a34e:	4b63      	ldr	r3, [pc, #396]	; (800a4dc <HAL_RCC_ClockConfig+0x1b8>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d001      	beq.n	800a360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e0b8      	b.n	800a4d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d020      	beq.n	800a3ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b00      	cmp	r3, #0
 800a376:	d005      	beq.n	800a384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a378:	4b59      	ldr	r3, [pc, #356]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	4a58      	ldr	r2, [pc, #352]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a37e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0308 	and.w	r3, r3, #8
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a390:	4b53      	ldr	r3, [pc, #332]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	4a52      	ldr	r2, [pc, #328]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a39a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a39c:	4b50      	ldr	r3, [pc, #320]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	494d      	ldr	r1, [pc, #308]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d044      	beq.n	800a444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d107      	bne.n	800a3d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3c2:	4b47      	ldr	r3, [pc, #284]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d119      	bne.n	800a402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e07f      	b.n	800a4d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d003      	beq.n	800a3e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d107      	bne.n	800a3f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3e2:	4b3f      	ldr	r3, [pc, #252]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d109      	bne.n	800a402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e06f      	b.n	800a4d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3f2:	4b3b      	ldr	r3, [pc, #236]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e067      	b.n	800a4d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a402:	4b37      	ldr	r3, [pc, #220]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f023 0203 	bic.w	r2, r3, #3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	4934      	ldr	r1, [pc, #208]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a410:	4313      	orrs	r3, r2
 800a412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a414:	f7fb fc9a 	bl	8005d4c <HAL_GetTick>
 800a418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a41a:	e00a      	b.n	800a432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a41c:	f7fb fc96 	bl	8005d4c <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	f241 3288 	movw	r2, #5000	; 0x1388
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d901      	bls.n	800a432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e04f      	b.n	800a4d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a432:	4b2b      	ldr	r3, [pc, #172]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f003 020c 	and.w	r2, r3, #12
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	429a      	cmp	r2, r3
 800a442:	d1eb      	bne.n	800a41c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a444:	4b25      	ldr	r3, [pc, #148]	; (800a4dc <HAL_RCC_ClockConfig+0x1b8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0307 	and.w	r3, r3, #7
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d20c      	bcs.n	800a46c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a452:	4b22      	ldr	r3, [pc, #136]	; (800a4dc <HAL_RCC_ClockConfig+0x1b8>)
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	b2d2      	uxtb	r2, r2
 800a458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a45a:	4b20      	ldr	r3, [pc, #128]	; (800a4dc <HAL_RCC_ClockConfig+0x1b8>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	429a      	cmp	r2, r3
 800a466:	d001      	beq.n	800a46c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e032      	b.n	800a4d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 0304 	and.w	r3, r3, #4
 800a474:	2b00      	cmp	r3, #0
 800a476:	d008      	beq.n	800a48a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a478:	4b19      	ldr	r3, [pc, #100]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	4916      	ldr	r1, [pc, #88]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a486:	4313      	orrs	r3, r2
 800a488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 0308 	and.w	r3, r3, #8
 800a492:	2b00      	cmp	r3, #0
 800a494:	d009      	beq.n	800a4aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a496:	4b12      	ldr	r3, [pc, #72]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	490e      	ldr	r1, [pc, #56]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a4aa:	f000 f821 	bl	800a4f0 <HAL_RCC_GetSysClockFreq>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	091b      	lsrs	r3, r3, #4
 800a4b6:	f003 030f 	and.w	r3, r3, #15
 800a4ba:	490a      	ldr	r1, [pc, #40]	; (800a4e4 <HAL_RCC_ClockConfig+0x1c0>)
 800a4bc:	5ccb      	ldrb	r3, [r1, r3]
 800a4be:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c2:	4a09      	ldr	r2, [pc, #36]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c4>)
 800a4c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a4c6:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <HAL_RCC_ClockConfig+0x1c8>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fa fc6a 	bl	8004da4 <HAL_InitTick>

  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	40023c00 	.word	0x40023c00
 800a4e0:	40023800 	.word	0x40023800
 800a4e4:	08014298 	.word	0x08014298
 800a4e8:	2000004c 	.word	0x2000004c
 800a4ec:	20000050 	.word	0x20000050

0800a4f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4f4:	b094      	sub	sp, #80	; 0x50
 800a4f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	647b      	str	r3, [r7, #68]	; 0x44
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a500:	2300      	movs	r3, #0
 800a502:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a504:	2300      	movs	r3, #0
 800a506:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a508:	4b79      	ldr	r3, [pc, #484]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f003 030c 	and.w	r3, r3, #12
 800a510:	2b08      	cmp	r3, #8
 800a512:	d00d      	beq.n	800a530 <HAL_RCC_GetSysClockFreq+0x40>
 800a514:	2b08      	cmp	r3, #8
 800a516:	f200 80e1 	bhi.w	800a6dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d002      	beq.n	800a524 <HAL_RCC_GetSysClockFreq+0x34>
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d003      	beq.n	800a52a <HAL_RCC_GetSysClockFreq+0x3a>
 800a522:	e0db      	b.n	800a6dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a524:	4b73      	ldr	r3, [pc, #460]	; (800a6f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800a526:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a528:	e0db      	b.n	800a6e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a52a:	4b73      	ldr	r3, [pc, #460]	; (800a6f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800a52c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a52e:	e0d8      	b.n	800a6e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a530:	4b6f      	ldr	r3, [pc, #444]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a538:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a53a:	4b6d      	ldr	r3, [pc, #436]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a542:	2b00      	cmp	r3, #0
 800a544:	d063      	beq.n	800a60e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a546:	4b6a      	ldr	r3, [pc, #424]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	099b      	lsrs	r3, r3, #6
 800a54c:	2200      	movs	r2, #0
 800a54e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a550:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a558:	633b      	str	r3, [r7, #48]	; 0x30
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34
 800a55e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a562:	4622      	mov	r2, r4
 800a564:	462b      	mov	r3, r5
 800a566:	f04f 0000 	mov.w	r0, #0
 800a56a:	f04f 0100 	mov.w	r1, #0
 800a56e:	0159      	lsls	r1, r3, #5
 800a570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a574:	0150      	lsls	r0, r2, #5
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	4621      	mov	r1, r4
 800a57c:	1a51      	subs	r1, r2, r1
 800a57e:	6139      	str	r1, [r7, #16]
 800a580:	4629      	mov	r1, r5
 800a582:	eb63 0301 	sbc.w	r3, r3, r1
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	f04f 0200 	mov.w	r2, #0
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a594:	4659      	mov	r1, fp
 800a596:	018b      	lsls	r3, r1, #6
 800a598:	4651      	mov	r1, sl
 800a59a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a59e:	4651      	mov	r1, sl
 800a5a0:	018a      	lsls	r2, r1, #6
 800a5a2:	4651      	mov	r1, sl
 800a5a4:	ebb2 0801 	subs.w	r8, r2, r1
 800a5a8:	4659      	mov	r1, fp
 800a5aa:	eb63 0901 	sbc.w	r9, r3, r1
 800a5ae:	f04f 0200 	mov.w	r2, #0
 800a5b2:	f04f 0300 	mov.w	r3, #0
 800a5b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a5ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a5be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a5c2:	4690      	mov	r8, r2
 800a5c4:	4699      	mov	r9, r3
 800a5c6:	4623      	mov	r3, r4
 800a5c8:	eb18 0303 	adds.w	r3, r8, r3
 800a5cc:	60bb      	str	r3, [r7, #8]
 800a5ce:	462b      	mov	r3, r5
 800a5d0:	eb49 0303 	adc.w	r3, r9, r3
 800a5d4:	60fb      	str	r3, [r7, #12]
 800a5d6:	f04f 0200 	mov.w	r2, #0
 800a5da:	f04f 0300 	mov.w	r3, #0
 800a5de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	024b      	lsls	r3, r1, #9
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	024a      	lsls	r2, r1, #9
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a600:	f7f6 fa34 	bl	8000a6c <__aeabi_uldivmod>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4613      	mov	r3, r2
 800a60a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a60c:	e058      	b.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a60e:	4b38      	ldr	r3, [pc, #224]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	099b      	lsrs	r3, r3, #6
 800a614:	2200      	movs	r2, #0
 800a616:	4618      	mov	r0, r3
 800a618:	4611      	mov	r1, r2
 800a61a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a61e:	623b      	str	r3, [r7, #32]
 800a620:	2300      	movs	r3, #0
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
 800a624:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a628:	4642      	mov	r2, r8
 800a62a:	464b      	mov	r3, r9
 800a62c:	f04f 0000 	mov.w	r0, #0
 800a630:	f04f 0100 	mov.w	r1, #0
 800a634:	0159      	lsls	r1, r3, #5
 800a636:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a63a:	0150      	lsls	r0, r2, #5
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4641      	mov	r1, r8
 800a642:	ebb2 0a01 	subs.w	sl, r2, r1
 800a646:	4649      	mov	r1, r9
 800a648:	eb63 0b01 	sbc.w	fp, r3, r1
 800a64c:	f04f 0200 	mov.w	r2, #0
 800a650:	f04f 0300 	mov.w	r3, #0
 800a654:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a658:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a65c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a660:	ebb2 040a 	subs.w	r4, r2, sl
 800a664:	eb63 050b 	sbc.w	r5, r3, fp
 800a668:	f04f 0200 	mov.w	r2, #0
 800a66c:	f04f 0300 	mov.w	r3, #0
 800a670:	00eb      	lsls	r3, r5, #3
 800a672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a676:	00e2      	lsls	r2, r4, #3
 800a678:	4614      	mov	r4, r2
 800a67a:	461d      	mov	r5, r3
 800a67c:	4643      	mov	r3, r8
 800a67e:	18e3      	adds	r3, r4, r3
 800a680:	603b      	str	r3, [r7, #0]
 800a682:	464b      	mov	r3, r9
 800a684:	eb45 0303 	adc.w	r3, r5, r3
 800a688:	607b      	str	r3, [r7, #4]
 800a68a:	f04f 0200 	mov.w	r2, #0
 800a68e:	f04f 0300 	mov.w	r3, #0
 800a692:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a696:	4629      	mov	r1, r5
 800a698:	028b      	lsls	r3, r1, #10
 800a69a:	4621      	mov	r1, r4
 800a69c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	028a      	lsls	r2, r1, #10
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	61bb      	str	r3, [r7, #24]
 800a6ae:	61fa      	str	r2, [r7, #28]
 800a6b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6b4:	f7f6 f9da 	bl	8000a6c <__aeabi_uldivmod>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4613      	mov	r3, r2
 800a6be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	0c1b      	lsrs	r3, r3, #16
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	005b      	lsls	r3, r3, #1
 800a6ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a6d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a6da:	e002      	b.n	800a6e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a6dc:	4b05      	ldr	r3, [pc, #20]	; (800a6f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800a6de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a6e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a6e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3750      	adds	r7, #80	; 0x50
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6ee:	bf00      	nop
 800a6f0:	40023800 	.word	0x40023800
 800a6f4:	00f42400 	.word	0x00f42400
 800a6f8:	007a1200 	.word	0x007a1200

0800a6fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a700:	4b03      	ldr	r3, [pc, #12]	; (800a710 <HAL_RCC_GetHCLKFreq+0x14>)
 800a702:	681b      	ldr	r3, [r3, #0]
}
 800a704:	4618      	mov	r0, r3
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	2000004c 	.word	0x2000004c

0800a714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a718:	f7ff fff0 	bl	800a6fc <HAL_RCC_GetHCLKFreq>
 800a71c:	4602      	mov	r2, r0
 800a71e:	4b05      	ldr	r3, [pc, #20]	; (800a734 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	0a9b      	lsrs	r3, r3, #10
 800a724:	f003 0307 	and.w	r3, r3, #7
 800a728:	4903      	ldr	r1, [pc, #12]	; (800a738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a72a:	5ccb      	ldrb	r3, [r1, r3]
 800a72c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a730:	4618      	mov	r0, r3
 800a732:	bd80      	pop	{r7, pc}
 800a734:	40023800 	.word	0x40023800
 800a738:	080142a8 	.word	0x080142a8

0800a73c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a740:	f7ff ffdc 	bl	800a6fc <HAL_RCC_GetHCLKFreq>
 800a744:	4602      	mov	r2, r0
 800a746:	4b05      	ldr	r3, [pc, #20]	; (800a75c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	0b5b      	lsrs	r3, r3, #13
 800a74c:	f003 0307 	and.w	r3, r3, #7
 800a750:	4903      	ldr	r1, [pc, #12]	; (800a760 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a752:	5ccb      	ldrb	r3, [r1, r3]
 800a754:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a758:	4618      	mov	r0, r3
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	40023800 	.word	0x40023800
 800a760:	080142a8 	.word	0x080142a8

0800a764 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	220f      	movs	r2, #15
 800a772:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a774:	4b12      	ldr	r3, [pc, #72]	; (800a7c0 <HAL_RCC_GetClockConfig+0x5c>)
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	f003 0203 	and.w	r2, r3, #3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a780:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <HAL_RCC_GetClockConfig+0x5c>)
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a78c:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <HAL_RCC_GetClockConfig+0x5c>)
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a798:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <HAL_RCC_GetClockConfig+0x5c>)
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	08db      	lsrs	r3, r3, #3
 800a79e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a7a6:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <HAL_RCC_GetClockConfig+0x60>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0207 	and.w	r2, r3, #7
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	601a      	str	r2, [r3, #0]
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	40023800 	.word	0x40023800
 800a7c4:	40023c00 	.word	0x40023c00

0800a7c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d101      	bne.n	800a7da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e04c      	b.n	800a874 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d111      	bne.n	800a80a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f001 fc0e 	bl	800c010 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d102      	bne.n	800a802 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a1f      	ldr	r2, [pc, #124]	; (800a87c <HAL_TIM_Base_Init+0xb4>)
 800a800:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2202      	movs	r2, #2
 800a80e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	3304      	adds	r3, #4
 800a81a:	4619      	mov	r1, r3
 800a81c:	4610      	mov	r0, r2
 800a81e:	f001 f80d 	bl	800b83c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	08005299 	.word	0x08005299

0800a880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	2b01      	cmp	r3, #1
 800a892:	d001      	beq.n	800a898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e044      	b.n	800a922 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2202      	movs	r2, #2
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f042 0201 	orr.w	r2, r2, #1
 800a8ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a1e      	ldr	r2, [pc, #120]	; (800a930 <HAL_TIM_Base_Start_IT+0xb0>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d018      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x6c>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8c2:	d013      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x6c>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a1a      	ldr	r2, [pc, #104]	; (800a934 <HAL_TIM_Base_Start_IT+0xb4>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d00e      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x6c>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a19      	ldr	r2, [pc, #100]	; (800a938 <HAL_TIM_Base_Start_IT+0xb8>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d009      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x6c>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a17      	ldr	r2, [pc, #92]	; (800a93c <HAL_TIM_Base_Start_IT+0xbc>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d004      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x6c>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a16      	ldr	r2, [pc, #88]	; (800a940 <HAL_TIM_Base_Start_IT+0xc0>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d111      	bne.n	800a910 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f003 0307 	and.w	r3, r3, #7
 800a8f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2b06      	cmp	r3, #6
 800a8fc:	d010      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f042 0201 	orr.w	r2, r2, #1
 800a90c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a90e:	e007      	b.n	800a920 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0201 	orr.w	r2, r2, #1
 800a91e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	40010000 	.word	0x40010000
 800a934:	40000400 	.word	0x40000400
 800a938:	40000800 	.word	0x40000800
 800a93c:	40000c00 	.word	0x40000c00
 800a940:	40014000 	.word	0x40014000

0800a944 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e04c      	b.n	800a9f0 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d111      	bne.n	800a986 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f001 fb50 	bl	800c010 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a974:	2b00      	cmp	r3, #0
 800a976:	d102      	bne.n	800a97e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a1f      	ldr	r2, [pc, #124]	; (800a9f8 <HAL_TIM_PWM_Init+0xb4>)
 800a97c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2202      	movs	r2, #2
 800a98a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3304      	adds	r3, #4
 800a996:	4619      	mov	r1, r3
 800a998:	4610      	mov	r0, r2
 800a99a:	f000 ff4f 	bl	800b83c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	0800a9fd 	.word	0x0800a9fd

0800a9fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d109      	bne.n	800aa38 <HAL_TIM_PWM_Start_IT+0x28>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	bf14      	ite	ne
 800aa30:	2301      	movne	r3, #1
 800aa32:	2300      	moveq	r3, #0
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	e022      	b.n	800aa7e <HAL_TIM_PWM_Start_IT+0x6e>
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	d109      	bne.n	800aa52 <HAL_TIM_PWM_Start_IT+0x42>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	bf14      	ite	ne
 800aa4a:	2301      	movne	r3, #1
 800aa4c:	2300      	moveq	r3, #0
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	e015      	b.n	800aa7e <HAL_TIM_PWM_Start_IT+0x6e>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b08      	cmp	r3, #8
 800aa56:	d109      	bne.n	800aa6c <HAL_TIM_PWM_Start_IT+0x5c>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	bf14      	ite	ne
 800aa64:	2301      	movne	r3, #1
 800aa66:	2300      	moveq	r3, #0
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	e008      	b.n	800aa7e <HAL_TIM_PWM_Start_IT+0x6e>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	bf14      	ite	ne
 800aa78:	2301      	movne	r3, #1
 800aa7a:	2300      	moveq	r3, #0
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e0b3      	b.n	800abee <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d104      	bne.n	800aa96 <HAL_TIM_PWM_Start_IT+0x86>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa94:	e013      	b.n	800aabe <HAL_TIM_PWM_Start_IT+0xae>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b04      	cmp	r3, #4
 800aa9a:	d104      	bne.n	800aaa6 <HAL_TIM_PWM_Start_IT+0x96>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaa4:	e00b      	b.n	800aabe <HAL_TIM_PWM_Start_IT+0xae>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b08      	cmp	r3, #8
 800aaaa:	d104      	bne.n	800aab6 <HAL_TIM_PWM_Start_IT+0xa6>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2202      	movs	r2, #2
 800aab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aab4:	e003      	b.n	800aabe <HAL_TIM_PWM_Start_IT+0xae>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2202      	movs	r2, #2
 800aaba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2b0c      	cmp	r3, #12
 800aac2:	d841      	bhi.n	800ab48 <HAL_TIM_PWM_Start_IT+0x138>
 800aac4:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <HAL_TIM_PWM_Start_IT+0xbc>)
 800aac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaca:	bf00      	nop
 800aacc:	0800ab01 	.word	0x0800ab01
 800aad0:	0800ab49 	.word	0x0800ab49
 800aad4:	0800ab49 	.word	0x0800ab49
 800aad8:	0800ab49 	.word	0x0800ab49
 800aadc:	0800ab13 	.word	0x0800ab13
 800aae0:	0800ab49 	.word	0x0800ab49
 800aae4:	0800ab49 	.word	0x0800ab49
 800aae8:	0800ab49 	.word	0x0800ab49
 800aaec:	0800ab25 	.word	0x0800ab25
 800aaf0:	0800ab49 	.word	0x0800ab49
 800aaf4:	0800ab49 	.word	0x0800ab49
 800aaf8:	0800ab49 	.word	0x0800ab49
 800aafc:	0800ab37 	.word	0x0800ab37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68da      	ldr	r2, [r3, #12]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f042 0202 	orr.w	r2, r2, #2
 800ab0e:	60da      	str	r2, [r3, #12]
      break;
 800ab10:	e01d      	b.n	800ab4e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68da      	ldr	r2, [r3, #12]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f042 0204 	orr.w	r2, r2, #4
 800ab20:	60da      	str	r2, [r3, #12]
      break;
 800ab22:	e014      	b.n	800ab4e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68da      	ldr	r2, [r3, #12]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f042 0208 	orr.w	r2, r2, #8
 800ab32:	60da      	str	r2, [r3, #12]
      break;
 800ab34:	e00b      	b.n	800ab4e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68da      	ldr	r2, [r3, #12]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f042 0210 	orr.w	r2, r2, #16
 800ab44:	60da      	str	r2, [r3, #12]
      break;
 800ab46:	e002      	b.n	800ab4e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab4c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d14b      	bne.n	800abec <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f001 fa31 	bl	800bfc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a24      	ldr	r2, [pc, #144]	; (800abf8 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d107      	bne.n	800ab7c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a1d      	ldr	r2, [pc, #116]	; (800abf8 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d018      	beq.n	800abb8 <HAL_TIM_PWM_Start_IT+0x1a8>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab8e:	d013      	beq.n	800abb8 <HAL_TIM_PWM_Start_IT+0x1a8>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a19      	ldr	r2, [pc, #100]	; (800abfc <HAL_TIM_PWM_Start_IT+0x1ec>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d00e      	beq.n	800abb8 <HAL_TIM_PWM_Start_IT+0x1a8>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a18      	ldr	r2, [pc, #96]	; (800ac00 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d009      	beq.n	800abb8 <HAL_TIM_PWM_Start_IT+0x1a8>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a16      	ldr	r2, [pc, #88]	; (800ac04 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d004      	beq.n	800abb8 <HAL_TIM_PWM_Start_IT+0x1a8>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a15      	ldr	r2, [pc, #84]	; (800ac08 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d111      	bne.n	800abdc <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f003 0307 	and.w	r3, r3, #7
 800abc2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2b06      	cmp	r3, #6
 800abc8:	d010      	beq.n	800abec <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f042 0201 	orr.w	r2, r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abda:	e007      	b.n	800abec <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f042 0201 	orr.w	r2, r2, #1
 800abea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800abec:	7bfb      	ldrb	r3, [r7, #15]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	40010000 	.word	0x40010000
 800abfc:	40000400 	.word	0x40000400
 800ac00:	40000800 	.word	0x40000800
 800ac04:	40000c00 	.word	0x40000c00
 800ac08:	40014000 	.word	0x40014000

0800ac0c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b0c      	cmp	r3, #12
 800ac1e:	d841      	bhi.n	800aca4 <HAL_TIM_PWM_Stop_IT+0x98>
 800ac20:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800ac22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac26:	bf00      	nop
 800ac28:	0800ac5d 	.word	0x0800ac5d
 800ac2c:	0800aca5 	.word	0x0800aca5
 800ac30:	0800aca5 	.word	0x0800aca5
 800ac34:	0800aca5 	.word	0x0800aca5
 800ac38:	0800ac6f 	.word	0x0800ac6f
 800ac3c:	0800aca5 	.word	0x0800aca5
 800ac40:	0800aca5 	.word	0x0800aca5
 800ac44:	0800aca5 	.word	0x0800aca5
 800ac48:	0800ac81 	.word	0x0800ac81
 800ac4c:	0800aca5 	.word	0x0800aca5
 800ac50:	0800aca5 	.word	0x0800aca5
 800ac54:	0800aca5 	.word	0x0800aca5
 800ac58:	0800ac93 	.word	0x0800ac93
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68da      	ldr	r2, [r3, #12]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f022 0202 	bic.w	r2, r2, #2
 800ac6a:	60da      	str	r2, [r3, #12]
      break;
 800ac6c:	e01d      	b.n	800acaa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68da      	ldr	r2, [r3, #12]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 0204 	bic.w	r2, r2, #4
 800ac7c:	60da      	str	r2, [r3, #12]
      break;
 800ac7e:	e014      	b.n	800acaa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 0208 	bic.w	r2, r2, #8
 800ac8e:	60da      	str	r2, [r3, #12]
      break;
 800ac90:	e00b      	b.n	800acaa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68da      	ldr	r2, [r3, #12]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f022 0210 	bic.w	r2, r2, #16
 800aca0:	60da      	str	r2, [r3, #12]
      break;
 800aca2:	e002      	b.n	800acaa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	73fb      	strb	r3, [r7, #15]
      break;
 800aca8:	bf00      	nop
  }

  if (status == HAL_OK)
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d157      	bne.n	800ad60 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2200      	movs	r2, #0
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 f983 	bl	800bfc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a2a      	ldr	r2, [pc, #168]	; (800ad6c <HAL_TIM_PWM_Stop_IT+0x160>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d117      	bne.n	800acf8 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6a1a      	ldr	r2, [r3, #32]
 800acce:	f241 1311 	movw	r3, #4369	; 0x1111
 800acd2:	4013      	ands	r3, r2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10f      	bne.n	800acf8 <HAL_TIM_PWM_Stop_IT+0xec>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6a1a      	ldr	r2, [r3, #32]
 800acde:	f240 4344 	movw	r3, #1092	; 0x444
 800ace2:	4013      	ands	r3, r2
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d107      	bne.n	800acf8 <HAL_TIM_PWM_Stop_IT+0xec>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800acf6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6a1a      	ldr	r2, [r3, #32]
 800acfe:	f241 1311 	movw	r3, #4369	; 0x1111
 800ad02:	4013      	ands	r3, r2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10f      	bne.n	800ad28 <HAL_TIM_PWM_Stop_IT+0x11c>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6a1a      	ldr	r2, [r3, #32]
 800ad0e:	f240 4344 	movw	r3, #1092	; 0x444
 800ad12:	4013      	ands	r3, r2
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d107      	bne.n	800ad28 <HAL_TIM_PWM_Stop_IT+0x11c>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f022 0201 	bic.w	r2, r2, #1
 800ad26:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d104      	bne.n	800ad38 <HAL_TIM_PWM_Stop_IT+0x12c>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad36:	e013      	b.n	800ad60 <HAL_TIM_PWM_Stop_IT+0x154>
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	2b04      	cmp	r3, #4
 800ad3c:	d104      	bne.n	800ad48 <HAL_TIM_PWM_Stop_IT+0x13c>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad46:	e00b      	b.n	800ad60 <HAL_TIM_PWM_Stop_IT+0x154>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	2b08      	cmp	r3, #8
 800ad4c:	d104      	bne.n	800ad58 <HAL_TIM_PWM_Stop_IT+0x14c>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad56:	e003      	b.n	800ad60 <HAL_TIM_PWM_Stop_IT+0x154>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	40010000 	.word	0x40010000

0800ad70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e04c      	b.n	800ae1c <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d111      	bne.n	800adb2 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f001 f93a 	bl	800c010 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d102      	bne.n	800adaa <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a1f      	ldr	r2, [pc, #124]	; (800ae24 <HAL_TIM_IC_Init+0xb4>)
 800ada8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2202      	movs	r2, #2
 800adb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f000 fd39 	bl	800b83c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	0800ae29 	.word	0x0800ae29

0800ae28 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d104      	bne.n	800ae5a <HAL_TIM_IC_Start_IT+0x1e>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	e013      	b.n	800ae82 <HAL_TIM_IC_Start_IT+0x46>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	d104      	bne.n	800ae6a <HAL_TIM_IC_Start_IT+0x2e>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	e00b      	b.n	800ae82 <HAL_TIM_IC_Start_IT+0x46>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b08      	cmp	r3, #8
 800ae6e:	d104      	bne.n	800ae7a <HAL_TIM_IC_Start_IT+0x3e>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	e003      	b.n	800ae82 <HAL_TIM_IC_Start_IT+0x46>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d104      	bne.n	800ae94 <HAL_TIM_IC_Start_IT+0x58>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	e013      	b.n	800aebc <HAL_TIM_IC_Start_IT+0x80>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d104      	bne.n	800aea4 <HAL_TIM_IC_Start_IT+0x68>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	e00b      	b.n	800aebc <HAL_TIM_IC_Start_IT+0x80>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b08      	cmp	r3, #8
 800aea8:	d104      	bne.n	800aeb4 <HAL_TIM_IC_Start_IT+0x78>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	e003      	b.n	800aebc <HAL_TIM_IC_Start_IT+0x80>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d102      	bne.n	800aeca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800aec4:	7b7b      	ldrb	r3, [r7, #13]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d001      	beq.n	800aece <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e0c2      	b.n	800b054 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d104      	bne.n	800aede <HAL_TIM_IC_Start_IT+0xa2>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aedc:	e013      	b.n	800af06 <HAL_TIM_IC_Start_IT+0xca>
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2b04      	cmp	r3, #4
 800aee2:	d104      	bne.n	800aeee <HAL_TIM_IC_Start_IT+0xb2>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2202      	movs	r2, #2
 800aee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aeec:	e00b      	b.n	800af06 <HAL_TIM_IC_Start_IT+0xca>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b08      	cmp	r3, #8
 800aef2:	d104      	bne.n	800aefe <HAL_TIM_IC_Start_IT+0xc2>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2202      	movs	r2, #2
 800aef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aefc:	e003      	b.n	800af06 <HAL_TIM_IC_Start_IT+0xca>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2202      	movs	r2, #2
 800af02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d104      	bne.n	800af16 <HAL_TIM_IC_Start_IT+0xda>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2202      	movs	r2, #2
 800af10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af14:	e013      	b.n	800af3e <HAL_TIM_IC_Start_IT+0x102>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b04      	cmp	r3, #4
 800af1a:	d104      	bne.n	800af26 <HAL_TIM_IC_Start_IT+0xea>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2202      	movs	r2, #2
 800af20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af24:	e00b      	b.n	800af3e <HAL_TIM_IC_Start_IT+0x102>
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2b08      	cmp	r3, #8
 800af2a:	d104      	bne.n	800af36 <HAL_TIM_IC_Start_IT+0xfa>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af34:	e003      	b.n	800af3e <HAL_TIM_IC_Start_IT+0x102>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2202      	movs	r2, #2
 800af3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2b0c      	cmp	r3, #12
 800af42:	d841      	bhi.n	800afc8 <HAL_TIM_IC_Start_IT+0x18c>
 800af44:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <HAL_TIM_IC_Start_IT+0x110>)
 800af46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4a:	bf00      	nop
 800af4c:	0800af81 	.word	0x0800af81
 800af50:	0800afc9 	.word	0x0800afc9
 800af54:	0800afc9 	.word	0x0800afc9
 800af58:	0800afc9 	.word	0x0800afc9
 800af5c:	0800af93 	.word	0x0800af93
 800af60:	0800afc9 	.word	0x0800afc9
 800af64:	0800afc9 	.word	0x0800afc9
 800af68:	0800afc9 	.word	0x0800afc9
 800af6c:	0800afa5 	.word	0x0800afa5
 800af70:	0800afc9 	.word	0x0800afc9
 800af74:	0800afc9 	.word	0x0800afc9
 800af78:	0800afc9 	.word	0x0800afc9
 800af7c:	0800afb7 	.word	0x0800afb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f042 0202 	orr.w	r2, r2, #2
 800af8e:	60da      	str	r2, [r3, #12]
      break;
 800af90:	e01d      	b.n	800afce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68da      	ldr	r2, [r3, #12]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f042 0204 	orr.w	r2, r2, #4
 800afa0:	60da      	str	r2, [r3, #12]
      break;
 800afa2:	e014      	b.n	800afce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68da      	ldr	r2, [r3, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f042 0208 	orr.w	r2, r2, #8
 800afb2:	60da      	str	r2, [r3, #12]
      break;
 800afb4:	e00b      	b.n	800afce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68da      	ldr	r2, [r3, #12]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f042 0210 	orr.w	r2, r2, #16
 800afc4:	60da      	str	r2, [r3, #12]
      break;
 800afc6:	e002      	b.n	800afce <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	73fb      	strb	r3, [r7, #15]
      break;
 800afcc:	bf00      	nop
  }

  if (status == HAL_OK)
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d13e      	bne.n	800b052 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2201      	movs	r2, #1
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 fff1 	bl	800bfc4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a1d      	ldr	r2, [pc, #116]	; (800b05c <HAL_TIM_IC_Start_IT+0x220>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d018      	beq.n	800b01e <HAL_TIM_IC_Start_IT+0x1e2>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff4:	d013      	beq.n	800b01e <HAL_TIM_IC_Start_IT+0x1e2>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a19      	ldr	r2, [pc, #100]	; (800b060 <HAL_TIM_IC_Start_IT+0x224>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d00e      	beq.n	800b01e <HAL_TIM_IC_Start_IT+0x1e2>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a17      	ldr	r2, [pc, #92]	; (800b064 <HAL_TIM_IC_Start_IT+0x228>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d009      	beq.n	800b01e <HAL_TIM_IC_Start_IT+0x1e2>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a16      	ldr	r2, [pc, #88]	; (800b068 <HAL_TIM_IC_Start_IT+0x22c>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d004      	beq.n	800b01e <HAL_TIM_IC_Start_IT+0x1e2>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a14      	ldr	r2, [pc, #80]	; (800b06c <HAL_TIM_IC_Start_IT+0x230>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d111      	bne.n	800b042 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f003 0307 	and.w	r3, r3, #7
 800b028:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2b06      	cmp	r3, #6
 800b02e:	d010      	beq.n	800b052 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f042 0201 	orr.w	r2, r2, #1
 800b03e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b040:	e007      	b.n	800b052 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f042 0201 	orr.w	r2, r2, #1
 800b050:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b052:	7bfb      	ldrb	r3, [r7, #15]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	40010000 	.word	0x40010000
 800b060:	40000400 	.word	0x40000400
 800b064:	40000800 	.word	0x40000800
 800b068:	40000c00 	.word	0x40000c00
 800b06c:	40014000 	.word	0x40014000

0800b070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	f003 0302 	and.w	r3, r3, #2
 800b082:	2b02      	cmp	r3, #2
 800b084:	d128      	bne.n	800b0d8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	f003 0302 	and.w	r3, r3, #2
 800b090:	2b02      	cmp	r3, #2
 800b092:	d121      	bne.n	800b0d8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f06f 0202 	mvn.w	r2, #2
 800b09c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	f003 0303 	and.w	r3, r3, #3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d005      	beq.n	800b0be <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	4798      	blx	r3
 800b0bc:	e009      	b.n	800b0d2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	f003 0304 	and.w	r3, r3, #4
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	d128      	bne.n	800b138 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	f003 0304 	and.w	r3, r3, #4
 800b0f0:	2b04      	cmp	r3, #4
 800b0f2:	d121      	bne.n	800b138 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f06f 0204 	mvn.w	r2, #4
 800b0fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2202      	movs	r2, #2
 800b102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d005      	beq.n	800b11e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	4798      	blx	r3
 800b11c:	e009      	b.n	800b132 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	f003 0308 	and.w	r3, r3, #8
 800b142:	2b08      	cmp	r3, #8
 800b144:	d128      	bne.n	800b198 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	f003 0308 	and.w	r3, r3, #8
 800b150:	2b08      	cmp	r3, #8
 800b152:	d121      	bne.n	800b198 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f06f 0208 	mvn.w	r2, #8
 800b15c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2204      	movs	r2, #4
 800b162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d005      	beq.n	800b17e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	4798      	blx	r3
 800b17c:	e009      	b.n	800b192 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	f003 0310 	and.w	r3, r3, #16
 800b1a2:	2b10      	cmp	r3, #16
 800b1a4:	d128      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	f003 0310 	and.w	r3, r3, #16
 800b1b0:	2b10      	cmp	r3, #16
 800b1b2:	d121      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f06f 0210 	mvn.w	r2, #16
 800b1bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	69db      	ldr	r3, [r3, #28]
 800b1ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d005      	beq.n	800b1de <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	4798      	blx	r3
 800b1dc:	e009      	b.n	800b1f2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b01      	cmp	r3, #1
 800b204:	d110      	bne.n	800b228 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	2b01      	cmp	r3, #1
 800b212:	d109      	bne.n	800b228 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f06f 0201 	mvn.w	r2, #1
 800b21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b232:	2b80      	cmp	r3, #128	; 0x80
 800b234:	d110      	bne.n	800b258 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b240:	2b80      	cmp	r3, #128	; 0x80
 800b242:	d109      	bne.n	800b258 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b262:	2b40      	cmp	r3, #64	; 0x40
 800b264:	d110      	bne.n	800b288 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b270:	2b40      	cmp	r3, #64	; 0x40
 800b272:	d109      	bne.n	800b288 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	f003 0320 	and.w	r3, r3, #32
 800b292:	2b20      	cmp	r3, #32
 800b294:	d110      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	f003 0320 	and.w	r3, r3, #32
 800b2a0:	2b20      	cmp	r3, #32
 800b2a2:	d109      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f06f 0220 	mvn.w	r2, #32
 800b2ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d101      	bne.n	800b2de <HAL_TIM_IC_ConfigChannel+0x1e>
 800b2da:	2302      	movs	r3, #2
 800b2dc:	e088      	b.n	800b3f0 <HAL_TIM_IC_ConfigChannel+0x130>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d11b      	bne.n	800b324 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6818      	ldr	r0, [r3, #0]
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	6819      	ldr	r1, [r3, #0]
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	f000 fcaa 	bl	800bc54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	699a      	ldr	r2, [r3, #24]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f022 020c 	bic.w	r2, r2, #12
 800b30e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6999      	ldr	r1, [r3, #24]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	689a      	ldr	r2, [r3, #8]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	430a      	orrs	r2, r1
 800b320:	619a      	str	r2, [r3, #24]
 800b322:	e060      	b.n	800b3e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b04      	cmp	r3, #4
 800b328:	d11c      	bne.n	800b364 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	6819      	ldr	r1, [r3, #0]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	f000 fd22 	bl	800bd82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	699a      	ldr	r2, [r3, #24]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b34c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	6999      	ldr	r1, [r3, #24]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	021a      	lsls	r2, r3, #8
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	619a      	str	r2, [r3, #24]
 800b362:	e040      	b.n	800b3e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b08      	cmp	r3, #8
 800b368:	d11b      	bne.n	800b3a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	f000 fd6f 	bl	800be5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	69da      	ldr	r2, [r3, #28]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f022 020c 	bic.w	r2, r2, #12
 800b38c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	69d9      	ldr	r1, [r3, #28]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	430a      	orrs	r2, r1
 800b39e:	61da      	str	r2, [r3, #28]
 800b3a0:	e021      	b.n	800b3e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b0c      	cmp	r3, #12
 800b3a6:	d11c      	bne.n	800b3e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	6819      	ldr	r1, [r3, #0]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	f000 fd8c 	bl	800bed4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	69da      	ldr	r2, [r3, #28]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b3ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	69d9      	ldr	r1, [r3, #28]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	021a      	lsls	r2, r3, #8
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	430a      	orrs	r2, r1
 800b3de:	61da      	str	r2, [r3, #28]
 800b3e0:	e001      	b.n	800b3e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3718      	adds	r7, #24
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d101      	bne.n	800b416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b412:	2302      	movs	r3, #2
 800b414:	e0ae      	b.n	800b574 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b0c      	cmp	r3, #12
 800b422:	f200 809f 	bhi.w	800b564 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b426:	a201      	add	r2, pc, #4	; (adr r2, 800b42c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42c:	0800b461 	.word	0x0800b461
 800b430:	0800b565 	.word	0x0800b565
 800b434:	0800b565 	.word	0x0800b565
 800b438:	0800b565 	.word	0x0800b565
 800b43c:	0800b4a1 	.word	0x0800b4a1
 800b440:	0800b565 	.word	0x0800b565
 800b444:	0800b565 	.word	0x0800b565
 800b448:	0800b565 	.word	0x0800b565
 800b44c:	0800b4e3 	.word	0x0800b4e3
 800b450:	0800b565 	.word	0x0800b565
 800b454:	0800b565 	.word	0x0800b565
 800b458:	0800b565 	.word	0x0800b565
 800b45c:	0800b523 	.word	0x0800b523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68b9      	ldr	r1, [r7, #8]
 800b466:	4618      	mov	r0, r3
 800b468:	f000 fa68 	bl	800b93c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	699a      	ldr	r2, [r3, #24]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f042 0208 	orr.w	r2, r2, #8
 800b47a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	699a      	ldr	r2, [r3, #24]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f022 0204 	bic.w	r2, r2, #4
 800b48a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	6999      	ldr	r1, [r3, #24]
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	691a      	ldr	r2, [r3, #16]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	619a      	str	r2, [r3, #24]
      break;
 800b49e:	e064      	b.n	800b56a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68b9      	ldr	r1, [r7, #8]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 faae 	bl	800ba08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	699a      	ldr	r2, [r3, #24]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	699a      	ldr	r2, [r3, #24]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	6999      	ldr	r1, [r3, #24]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	021a      	lsls	r2, r3, #8
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	430a      	orrs	r2, r1
 800b4de:	619a      	str	r2, [r3, #24]
      break;
 800b4e0:	e043      	b.n	800b56a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68b9      	ldr	r1, [r7, #8]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 faf9 	bl	800bae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	69da      	ldr	r2, [r3, #28]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f042 0208 	orr.w	r2, r2, #8
 800b4fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	69da      	ldr	r2, [r3, #28]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f022 0204 	bic.w	r2, r2, #4
 800b50c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	69d9      	ldr	r1, [r3, #28]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	691a      	ldr	r2, [r3, #16]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	430a      	orrs	r2, r1
 800b51e:	61da      	str	r2, [r3, #28]
      break;
 800b520:	e023      	b.n	800b56a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	68b9      	ldr	r1, [r7, #8]
 800b528:	4618      	mov	r0, r3
 800b52a:	f000 fb43 	bl	800bbb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	69da      	ldr	r2, [r3, #28]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b53c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	69da      	ldr	r2, [r3, #28]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b54c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	69d9      	ldr	r1, [r3, #28]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	021a      	lsls	r2, r3, #8
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	430a      	orrs	r2, r1
 800b560:	61da      	str	r2, [r3, #28]
      break;
 800b562:	e002      	b.n	800b56a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	75fb      	strb	r3, [r7, #23]
      break;
 800b568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b572:	7dfb      	ldrb	r3, [r7, #23]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b586:	2300      	movs	r3, #0
 800b588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_TIM_ConfigClockSource+0x1c>
 800b594:	2302      	movs	r3, #2
 800b596:	e0b4      	b.n	800b702 <HAL_TIM_ConfigClockSource+0x186>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b5b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5d0:	d03e      	beq.n	800b650 <HAL_TIM_ConfigClockSource+0xd4>
 800b5d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5d6:	f200 8087 	bhi.w	800b6e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5de:	f000 8086 	beq.w	800b6ee <HAL_TIM_ConfigClockSource+0x172>
 800b5e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5e6:	d87f      	bhi.n	800b6e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5e8:	2b70      	cmp	r3, #112	; 0x70
 800b5ea:	d01a      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0xa6>
 800b5ec:	2b70      	cmp	r3, #112	; 0x70
 800b5ee:	d87b      	bhi.n	800b6e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5f0:	2b60      	cmp	r3, #96	; 0x60
 800b5f2:	d050      	beq.n	800b696 <HAL_TIM_ConfigClockSource+0x11a>
 800b5f4:	2b60      	cmp	r3, #96	; 0x60
 800b5f6:	d877      	bhi.n	800b6e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5f8:	2b50      	cmp	r3, #80	; 0x50
 800b5fa:	d03c      	beq.n	800b676 <HAL_TIM_ConfigClockSource+0xfa>
 800b5fc:	2b50      	cmp	r3, #80	; 0x50
 800b5fe:	d873      	bhi.n	800b6e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b600:	2b40      	cmp	r3, #64	; 0x40
 800b602:	d058      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x13a>
 800b604:	2b40      	cmp	r3, #64	; 0x40
 800b606:	d86f      	bhi.n	800b6e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b608:	2b30      	cmp	r3, #48	; 0x30
 800b60a:	d064      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b60c:	2b30      	cmp	r3, #48	; 0x30
 800b60e:	d86b      	bhi.n	800b6e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b610:	2b20      	cmp	r3, #32
 800b612:	d060      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b614:	2b20      	cmp	r3, #32
 800b616:	d867      	bhi.n	800b6e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d05c      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b61c:	2b10      	cmp	r3, #16
 800b61e:	d05a      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b620:	e062      	b.n	800b6e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	6899      	ldr	r1, [r3, #8]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	685a      	ldr	r2, [r3, #4]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f000 fca7 	bl	800bf84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	609a      	str	r2, [r3, #8]
      break;
 800b64e:	e04f      	b.n	800b6f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	6899      	ldr	r1, [r3, #8]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	f000 fc90 	bl	800bf84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689a      	ldr	r2, [r3, #8]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b672:	609a      	str	r2, [r3, #8]
      break;
 800b674:	e03c      	b.n	800b6f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	6859      	ldr	r1, [r3, #4]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	461a      	mov	r2, r3
 800b684:	f000 fb4e 	bl	800bd24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2150      	movs	r1, #80	; 0x50
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 fc5d 	bl	800bf4e <TIM_ITRx_SetConfig>
      break;
 800b694:	e02c      	b.n	800b6f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	6859      	ldr	r1, [r3, #4]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	f000 fbaa 	bl	800bdfc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2160      	movs	r1, #96	; 0x60
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 fc4d 	bl	800bf4e <TIM_ITRx_SetConfig>
      break;
 800b6b4:	e01c      	b.n	800b6f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6818      	ldr	r0, [r3, #0]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	6859      	ldr	r1, [r3, #4]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f000 fb2e 	bl	800bd24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2140      	movs	r1, #64	; 0x40
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 fc3d 	bl	800bf4e <TIM_ITRx_SetConfig>
      break;
 800b6d4:	e00c      	b.n	800b6f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4619      	mov	r1, r3
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	f000 fc34 	bl	800bf4e <TIM_ITRx_SetConfig>
      break;
 800b6e6:	e003      	b.n	800b6f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ec:	e000      	b.n	800b6f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b6ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b700:	7bfb      	ldrb	r3, [r7, #15]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b716:	2300      	movs	r3, #0
 800b718:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	2b0c      	cmp	r3, #12
 800b71e:	d831      	bhi.n	800b784 <HAL_TIM_ReadCapturedValue+0x78>
 800b720:	a201      	add	r2, pc, #4	; (adr r2, 800b728 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b726:	bf00      	nop
 800b728:	0800b75d 	.word	0x0800b75d
 800b72c:	0800b785 	.word	0x0800b785
 800b730:	0800b785 	.word	0x0800b785
 800b734:	0800b785 	.word	0x0800b785
 800b738:	0800b767 	.word	0x0800b767
 800b73c:	0800b785 	.word	0x0800b785
 800b740:	0800b785 	.word	0x0800b785
 800b744:	0800b785 	.word	0x0800b785
 800b748:	0800b771 	.word	0x0800b771
 800b74c:	0800b785 	.word	0x0800b785
 800b750:	0800b785 	.word	0x0800b785
 800b754:	0800b785 	.word	0x0800b785
 800b758:	0800b77b 	.word	0x0800b77b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b762:	60fb      	str	r3, [r7, #12]

      break;
 800b764:	e00f      	b.n	800b786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76c:	60fb      	str	r3, [r7, #12]

      break;
 800b76e:	e00a      	b.n	800b786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b776:	60fb      	str	r3, [r7, #12]

      break;
 800b778:	e005      	b.n	800b786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b780:	60fb      	str	r3, [r7, #12]

      break;
 800b782:	e000      	b.n	800b786 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b784:	bf00      	nop
  }

  return tmpreg;
 800b786:	68fb      	ldr	r3, [r7, #12]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  return htim->State;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b82e:	b2db      	uxtb	r3, r3
}
 800b830:	4618      	mov	r0, r3
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a34      	ldr	r2, [pc, #208]	; (800b920 <TIM_Base_SetConfig+0xe4>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d00f      	beq.n	800b874 <TIM_Base_SetConfig+0x38>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b85a:	d00b      	beq.n	800b874 <TIM_Base_SetConfig+0x38>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a31      	ldr	r2, [pc, #196]	; (800b924 <TIM_Base_SetConfig+0xe8>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d007      	beq.n	800b874 <TIM_Base_SetConfig+0x38>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a30      	ldr	r2, [pc, #192]	; (800b928 <TIM_Base_SetConfig+0xec>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d003      	beq.n	800b874 <TIM_Base_SetConfig+0x38>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a2f      	ldr	r2, [pc, #188]	; (800b92c <TIM_Base_SetConfig+0xf0>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d108      	bne.n	800b886 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b87a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4313      	orrs	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a25      	ldr	r2, [pc, #148]	; (800b920 <TIM_Base_SetConfig+0xe4>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d01b      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b894:	d017      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a22      	ldr	r2, [pc, #136]	; (800b924 <TIM_Base_SetConfig+0xe8>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d013      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a21      	ldr	r2, [pc, #132]	; (800b928 <TIM_Base_SetConfig+0xec>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d00f      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a20      	ldr	r2, [pc, #128]	; (800b92c <TIM_Base_SetConfig+0xf0>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d00b      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a1f      	ldr	r2, [pc, #124]	; (800b930 <TIM_Base_SetConfig+0xf4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d007      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a1e      	ldr	r2, [pc, #120]	; (800b934 <TIM_Base_SetConfig+0xf8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d003      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4a1d      	ldr	r2, [pc, #116]	; (800b938 <TIM_Base_SetConfig+0xfc>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d108      	bne.n	800b8d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	689a      	ldr	r2, [r3, #8]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a08      	ldr	r2, [pc, #32]	; (800b920 <TIM_Base_SetConfig+0xe4>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d103      	bne.n	800b90c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	691a      	ldr	r2, [r3, #16]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	615a      	str	r2, [r3, #20]
}
 800b912:	bf00      	nop
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	40010000 	.word	0x40010000
 800b924:	40000400 	.word	0x40000400
 800b928:	40000800 	.word	0x40000800
 800b92c:	40000c00 	.word	0x40000c00
 800b930:	40014000 	.word	0x40014000
 800b934:	40014400 	.word	0x40014400
 800b938:	40014800 	.word	0x40014800

0800b93c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	f023 0201 	bic.w	r2, r3, #1
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f023 0303 	bic.w	r3, r3, #3
 800b972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f023 0302 	bic.w	r3, r3, #2
 800b984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	697a      	ldr	r2, [r7, #20]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a1c      	ldr	r2, [pc, #112]	; (800ba04 <TIM_OC1_SetConfig+0xc8>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d10c      	bne.n	800b9b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f023 0308 	bic.w	r3, r3, #8
 800b99e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	f023 0304 	bic.w	r3, r3, #4
 800b9b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a13      	ldr	r2, [pc, #76]	; (800ba04 <TIM_OC1_SetConfig+0xc8>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d111      	bne.n	800b9de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	621a      	str	r2, [r3, #32]
}
 800b9f8:	bf00      	nop
 800b9fa:	371c      	adds	r7, #28
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	40010000 	.word	0x40010000

0800ba08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a1b      	ldr	r3, [r3, #32]
 800ba16:	f023 0210 	bic.w	r2, r3, #16
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	021b      	lsls	r3, r3, #8
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f023 0320 	bic.w	r3, r3, #32
 800ba52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	011b      	lsls	r3, r3, #4
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a1e      	ldr	r2, [pc, #120]	; (800badc <TIM_OC2_SetConfig+0xd4>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d10d      	bne.n	800ba84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	011b      	lsls	r3, r3, #4
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a15      	ldr	r2, [pc, #84]	; (800badc <TIM_OC2_SetConfig+0xd4>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d113      	bne.n	800bab4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	695b      	ldr	r3, [r3, #20]
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	693a      	ldr	r2, [r7, #16]
 800baa4:	4313      	orrs	r3, r2
 800baa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	621a      	str	r2, [r3, #32]
}
 800bace:	bf00      	nop
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	40010000 	.word	0x40010000

0800bae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f023 0303 	bic.w	r3, r3, #3
 800bb16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	021b      	lsls	r3, r3, #8
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a1d      	ldr	r2, [pc, #116]	; (800bbb0 <TIM_OC3_SetConfig+0xd0>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d10d      	bne.n	800bb5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a14      	ldr	r2, [pc, #80]	; (800bbb0 <TIM_OC3_SetConfig+0xd0>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d113      	bne.n	800bb8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	011b      	lsls	r3, r3, #4
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	621a      	str	r2, [r3, #32]
}
 800bba4:	bf00      	nop
 800bba6:	371c      	adds	r7, #28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	40010000 	.word	0x40010000

0800bbb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	021b      	lsls	r3, r3, #8
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bbfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	031b      	lsls	r3, r3, #12
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a10      	ldr	r2, [pc, #64]	; (800bc50 <TIM_OC4_SetConfig+0x9c>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d109      	bne.n	800bc28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	019b      	lsls	r3, r3, #6
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	685a      	ldr	r2, [r3, #4]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	621a      	str	r2, [r3, #32]
}
 800bc42:	bf00      	nop
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	40010000 	.word	0x40010000

0800bc54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b087      	sub	sp, #28
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
 800bc60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	f023 0201 	bic.w	r2, r3, #1
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	4a24      	ldr	r2, [pc, #144]	; (800bd10 <TIM_TI1_SetConfig+0xbc>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d013      	beq.n	800bcaa <TIM_TI1_SetConfig+0x56>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc88:	d00f      	beq.n	800bcaa <TIM_TI1_SetConfig+0x56>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	4a21      	ldr	r2, [pc, #132]	; (800bd14 <TIM_TI1_SetConfig+0xc0>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d00b      	beq.n	800bcaa <TIM_TI1_SetConfig+0x56>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	4a20      	ldr	r2, [pc, #128]	; (800bd18 <TIM_TI1_SetConfig+0xc4>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d007      	beq.n	800bcaa <TIM_TI1_SetConfig+0x56>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4a1f      	ldr	r2, [pc, #124]	; (800bd1c <TIM_TI1_SetConfig+0xc8>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d003      	beq.n	800bcaa <TIM_TI1_SetConfig+0x56>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	4a1e      	ldr	r2, [pc, #120]	; (800bd20 <TIM_TI1_SetConfig+0xcc>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d101      	bne.n	800bcae <TIM_TI1_SetConfig+0x5a>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e000      	b.n	800bcb0 <TIM_TI1_SetConfig+0x5c>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d008      	beq.n	800bcc6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f023 0303 	bic.w	r3, r3, #3
 800bcba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800bcbc:	697a      	ldr	r2, [r7, #20]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	617b      	str	r3, [r7, #20]
 800bcc4:	e003      	b.n	800bcce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f043 0301 	orr.w	r3, r3, #1
 800bccc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bcd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	f023 030a 	bic.w	r3, r3, #10
 800bce8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	f003 030a 	and.w	r3, r3, #10
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	697a      	ldr	r2, [r7, #20]
 800bcfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	621a      	str	r2, [r3, #32]
}
 800bd02:	bf00      	nop
 800bd04:	371c      	adds	r7, #28
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	40010000 	.word	0x40010000
 800bd14:	40000400 	.word	0x40000400
 800bd18:	40000800 	.word	0x40000800
 800bd1c:	40000c00 	.word	0x40000c00
 800bd20:	40014000 	.word	0x40014000

0800bd24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6a1b      	ldr	r3, [r3, #32]
 800bd3a:	f023 0201 	bic.w	r2, r3, #1
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	011b      	lsls	r3, r3, #4
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	f023 030a 	bic.w	r3, r3, #10
 800bd60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	621a      	str	r2, [r3, #32]
}
 800bd76:	bf00      	nop
 800bd78:	371c      	adds	r7, #28
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b087      	sub	sp, #28
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	60f8      	str	r0, [r7, #12]
 800bd8a:	60b9      	str	r1, [r7, #8]
 800bd8c:	607a      	str	r2, [r7, #4]
 800bd8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6a1b      	ldr	r3, [r3, #32]
 800bd94:	f023 0210 	bic.w	r2, r3, #16
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	699b      	ldr	r3, [r3, #24]
 800bda0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	021b      	lsls	r3, r3, #8
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	031b      	lsls	r3, r3, #12
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bdd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	011b      	lsls	r3, r3, #4
 800bdda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	697a      	ldr	r2, [r7, #20]
 800bde8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	621a      	str	r2, [r3, #32]
}
 800bdf0:	bf00      	nop
 800bdf2:	371c      	adds	r7, #28
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b087      	sub	sp, #28
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6a1b      	ldr	r3, [r3, #32]
 800be0c:	f023 0210 	bic.w	r2, r3, #16
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	031b      	lsls	r3, r3, #12
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	4313      	orrs	r3, r2
 800be30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	011b      	lsls	r3, r3, #4
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	4313      	orrs	r3, r2
 800be42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	621a      	str	r2, [r3, #32]
}
 800be50:	bf00      	nop
 800be52:	371c      	adds	r7, #28
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b087      	sub	sp, #28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6a1b      	ldr	r3, [r3, #32]
 800be6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f023 0303 	bic.w	r3, r3, #3
 800be88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4313      	orrs	r3, r2
 800be90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	011b      	lsls	r3, r3, #4
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	697a      	ldr	r2, [r7, #20]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800beac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	021b      	lsls	r3, r3, #8
 800beb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	4313      	orrs	r3, r2
 800beba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	693a      	ldr	r2, [r7, #16]
 800bec6:	621a      	str	r2, [r3, #32]
}
 800bec8:	bf00      	nop
 800beca:	371c      	adds	r7, #28
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b087      	sub	sp, #28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
 800bee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6a1b      	ldr	r3, [r3, #32]
 800bef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	021b      	lsls	r3, r3, #8
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bf12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	031b      	lsls	r3, r3, #12
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	697a      	ldr	r2, [r7, #20]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bf26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	031b      	lsls	r3, r3, #12
 800bf2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bf30:	693a      	ldr	r2, [r7, #16]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	621a      	str	r2, [r3, #32]
}
 800bf42:	bf00      	nop
 800bf44:	371c      	adds	r7, #28
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf4e:	b480      	push	{r7}
 800bf50:	b085      	sub	sp, #20
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	f043 0307 	orr.w	r3, r3, #7
 800bf70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	609a      	str	r2, [r3, #8]
}
 800bf78:	bf00      	nop
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b087      	sub	sp, #28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
 800bf90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	021a      	lsls	r2, r3, #8
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	697a      	ldr	r2, [r7, #20]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	697a      	ldr	r2, [r7, #20]
 800bfb6:	609a      	str	r2, [r3, #8]
}
 800bfb8:	bf00      	nop
 800bfba:	371c      	adds	r7, #28
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	f003 031f 	and.w	r3, r3, #31
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6a1a      	ldr	r2, [r3, #32]
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	43db      	mvns	r3, r3
 800bfe6:	401a      	ands	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6a1a      	ldr	r2, [r3, #32]
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	f003 031f 	and.w	r3, r3, #31
 800bff6:	6879      	ldr	r1, [r7, #4]
 800bff8:	fa01 f303 	lsl.w	r3, r1, r3
 800bffc:	431a      	orrs	r2, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	621a      	str	r2, [r3, #32]
}
 800c002:	bf00      	nop
 800c004:	371c      	adds	r7, #28
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
	...

0800c010 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a1c      	ldr	r2, [pc, #112]	; (800c08c <TIM_ResetCallback+0x7c>)
 800c01c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a1b      	ldr	r2, [pc, #108]	; (800c090 <TIM_ResetCallback+0x80>)
 800c024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4a1a      	ldr	r2, [pc, #104]	; (800c094 <TIM_ResetCallback+0x84>)
 800c02c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a19      	ldr	r2, [pc, #100]	; (800c098 <TIM_ResetCallback+0x88>)
 800c034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4a18      	ldr	r2, [pc, #96]	; (800c09c <TIM_ResetCallback+0x8c>)
 800c03c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a17      	ldr	r2, [pc, #92]	; (800c0a0 <TIM_ResetCallback+0x90>)
 800c044:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a16      	ldr	r2, [pc, #88]	; (800c0a4 <TIM_ResetCallback+0x94>)
 800c04c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a15      	ldr	r2, [pc, #84]	; (800c0a8 <TIM_ResetCallback+0x98>)
 800c054:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a14      	ldr	r2, [pc, #80]	; (800c0ac <TIM_ResetCallback+0x9c>)
 800c05c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a13      	ldr	r2, [pc, #76]	; (800c0b0 <TIM_ResetCallback+0xa0>)
 800c064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4a12      	ldr	r2, [pc, #72]	; (800c0b4 <TIM_ResetCallback+0xa4>)
 800c06c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4a11      	ldr	r2, [pc, #68]	; (800c0b8 <TIM_ResetCallback+0xa8>)
 800c074:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a10      	ldr	r2, [pc, #64]	; (800c0bc <TIM_ResetCallback+0xac>)
 800c07c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	0800e465 	.word	0x0800e465
 800c090:	0800b795 	.word	0x0800b795
 800c094:	0800b7f9 	.word	0x0800b7f9
 800c098:	0800b80d 	.word	0x0800b80d
 800c09c:	0800da41 	.word	0x0800da41
 800c0a0:	0800b7bd 	.word	0x0800b7bd
 800c0a4:	0800b7a9 	.word	0x0800b7a9
 800c0a8:	0800b7d1 	.word	0x0800b7d1
 800c0ac:	0800b7e5 	.word	0x0800b7e5
 800c0b0:	0800e141 	.word	0x0800e141
 800c0b4:	0800c19d 	.word	0x0800c19d
 800c0b8:	0800c1b1 	.word	0x0800c1b1
 800c0bc:	0800c1c5 	.word	0x0800c1c5

0800c0c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d101      	bne.n	800c0d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	e050      	b.n	800c17a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	4313      	orrs	r3, r2
 800c108:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a1c      	ldr	r2, [pc, #112]	; (800c188 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d018      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c124:	d013      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a18      	ldr	r2, [pc, #96]	; (800c18c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d00e      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a16      	ldr	r2, [pc, #88]	; (800c190 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d009      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a15      	ldr	r2, [pc, #84]	; (800c194 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d004      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a13      	ldr	r2, [pc, #76]	; (800c198 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d10c      	bne.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	40010000 	.word	0x40010000
 800c18c:	40000400 	.word	0x40000400
 800c190:	40000800 	.word	0x40000800
 800c194:	40000c00 	.word	0x40000c00
 800c198:	40014000 	.word	0x40014000

0800c19c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1a4:	bf00      	nop
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e04a      	b.n	800c280 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d111      	bne.n	800c21a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fbf8 	bl	800c9f4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d102      	bne.n	800c212 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4a1e      	ldr	r2, [pc, #120]	; (800c288 <HAL_UART_Init+0xb0>)
 800c210:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2224      	movs	r2, #36	; 0x24
 800c21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68da      	ldr	r2, [r3, #12]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c230:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fdf2 	bl	800ce1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	691a      	ldr	r2, [r3, #16]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c246:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	695a      	ldr	r2, [r3, #20]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c256:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68da      	ldr	r2, [r3, #12]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c266:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2220      	movs	r2, #32
 800c272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2220      	movs	r2, #32
 800c27a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	080055a1 	.word	0x080055a1

0800c28c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d101      	bne.n	800c29e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e029      	b.n	800c2f2 <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2224      	movs	r2, #36	; 0x24
 800c2a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	68da      	ldr	r2, [r3, #12]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2b4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d102      	bne.n	800c2c4 <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a0e      	ldr	r2, [pc, #56]	; (800c2fc <HAL_UART_DeInit+0x70>)
 800c2c2:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	08005631 	.word	0x08005631

0800c300 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	4613      	mov	r3, r2
 800c30c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c314:	b2db      	uxtb	r3, r3
 800c316:	2b20      	cmp	r3, #32
 800c318:	d130      	bne.n	800c37c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <HAL_UART_Transmit_IT+0x26>
 800c320:	88fb      	ldrh	r3, [r7, #6]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e029      	b.n	800c37e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c330:	2b01      	cmp	r3, #1
 800c332:	d101      	bne.n	800c338 <HAL_UART_Transmit_IT+0x38>
 800c334:	2302      	movs	r3, #2
 800c336:	e022      	b.n	800c37e <HAL_UART_Transmit_IT+0x7e>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	88fa      	ldrh	r2, [r7, #6]
 800c34a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	88fa      	ldrh	r2, [r7, #6]
 800c350:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2200      	movs	r2, #0
 800c356:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2221      	movs	r2, #33	; 0x21
 800c35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	68da      	ldr	r2, [r3, #12]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c376:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	e000      	b.n	800c37e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c37c:	2302      	movs	r3, #2
  }
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	60b9      	str	r1, [r7, #8]
 800c394:	4613      	mov	r3, r2
 800c396:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b20      	cmp	r3, #32
 800c3a2:	d11d      	bne.n	800c3e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <HAL_UART_Receive_IT+0x26>
 800c3aa:	88fb      	ldrh	r3, [r7, #6]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e016      	b.n	800c3e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d101      	bne.n	800c3c2 <HAL_UART_Receive_IT+0x38>
 800c3be:	2302      	movs	r3, #2
 800c3c0:	e00f      	b.n	800c3e2 <HAL_UART_Receive_IT+0x58>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c3d0:	88fb      	ldrh	r3, [r7, #6]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	68b9      	ldr	r1, [r7, #8]
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f000 fb44 	bl	800ca64 <UART_Start_Receive_IT>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	e000      	b.n	800c3e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c3e0:	2302      	movs	r3, #2
  }
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b0ba      	sub	sp, #232	; 0xe8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	695b      	ldr	r3, [r3, #20]
 800c40e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c412:	2300      	movs	r3, #0
 800c414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c418:	2300      	movs	r3, #0
 800c41a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c422:	f003 030f 	and.w	r3, r3, #15
 800c426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c42a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10f      	bne.n	800c452 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c436:	f003 0320 	and.w	r3, r3, #32
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d009      	beq.n	800c452 <HAL_UART_IRQHandler+0x66>
 800c43e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c442:	f003 0320 	and.w	r3, r3, #32
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fc29 	bl	800cca2 <UART_Receive_IT>
      return;
 800c450:	e25b      	b.n	800c90a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c456:	2b00      	cmp	r3, #0
 800c458:	f000 80e1 	beq.w	800c61e <HAL_UART_IRQHandler+0x232>
 800c45c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c460:	f003 0301 	and.w	r3, r3, #1
 800c464:	2b00      	cmp	r3, #0
 800c466:	d106      	bne.n	800c476 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c46c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c470:	2b00      	cmp	r3, #0
 800c472:	f000 80d4 	beq.w	800c61e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c47a:	f003 0301 	and.w	r3, r3, #1
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00b      	beq.n	800c49a <HAL_UART_IRQHandler+0xae>
 800c482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d005      	beq.n	800c49a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c492:	f043 0201 	orr.w	r2, r3, #1
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c49e:	f003 0304 	and.w	r3, r3, #4
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <HAL_UART_IRQHandler+0xd2>
 800c4a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b6:	f043 0202 	orr.w	r2, r3, #2
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c4be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4c2:	f003 0302 	and.w	r3, r3, #2
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00b      	beq.n	800c4e2 <HAL_UART_IRQHandler+0xf6>
 800c4ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d005      	beq.n	800c4e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4da:	f043 0204 	orr.w	r2, r3, #4
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4e6:	f003 0308 	and.w	r3, r3, #8
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d011      	beq.n	800c512 <HAL_UART_IRQHandler+0x126>
 800c4ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4f2:	f003 0320 	and.w	r3, r3, #32
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d105      	bne.n	800c506 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c4fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	d005      	beq.n	800c512 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50a:	f043 0208 	orr.w	r2, r3, #8
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c516:	2b00      	cmp	r3, #0
 800c518:	f000 81f2 	beq.w	800c900 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c520:	f003 0320 	and.w	r3, r3, #32
 800c524:	2b00      	cmp	r3, #0
 800c526:	d008      	beq.n	800c53a <HAL_UART_IRQHandler+0x14e>
 800c528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c52c:	f003 0320 	and.w	r3, r3, #32
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fbb4 	bl	800cca2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	695b      	ldr	r3, [r3, #20]
 800c540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c544:	2b40      	cmp	r3, #64	; 0x40
 800c546:	bf0c      	ite	eq
 800c548:	2301      	moveq	r3, #1
 800c54a:	2300      	movne	r3, #0
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c556:	f003 0308 	and.w	r3, r3, #8
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d103      	bne.n	800c566 <HAL_UART_IRQHandler+0x17a>
 800c55e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c562:	2b00      	cmp	r3, #0
 800c564:	d051      	beq.n	800c60a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 faba 	bl	800cae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c576:	2b40      	cmp	r3, #64	; 0x40
 800c578:	d142      	bne.n	800c600 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	3314      	adds	r3, #20
 800c580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c588:	e853 3f00 	ldrex	r3, [r3]
 800c58c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3314      	adds	r3, #20
 800c5a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c5a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c5aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c5b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c5b6:	e841 2300 	strex	r3, r2, [r1]
 800c5ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c5be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1d9      	bne.n	800c57a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d013      	beq.n	800c5f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d2:	4a7f      	ldr	r2, [pc, #508]	; (800c7d0 <HAL_UART_IRQHandler+0x3e4>)
 800c5d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fa fd82 	bl	80070e4 <HAL_DMA_Abort_IT>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d019      	beq.n	800c61a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c5f0:	4610      	mov	r0, r2
 800c5f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5f4:	e011      	b.n	800c61a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5fe:	e00c      	b.n	800c61a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c608:	e007      	b.n	800c61a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c618:	e172      	b.n	800c900 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c61a:	bf00      	nop
    return;
 800c61c:	e170      	b.n	800c900 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c622:	2b01      	cmp	r3, #1
 800c624:	f040 814c 	bne.w	800c8c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c62c:	f003 0310 	and.w	r3, r3, #16
 800c630:	2b00      	cmp	r3, #0
 800c632:	f000 8145 	beq.w	800c8c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c63a:	f003 0310 	and.w	r3, r3, #16
 800c63e:	2b00      	cmp	r3, #0
 800c640:	f000 813e 	beq.w	800c8c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c644:	2300      	movs	r3, #0
 800c646:	60bb      	str	r3, [r7, #8]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	60bb      	str	r3, [r7, #8]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	60bb      	str	r3, [r7, #8]
 800c658:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	695b      	ldr	r3, [r3, #20]
 800c660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c664:	2b40      	cmp	r3, #64	; 0x40
 800c666:	f040 80b5 	bne.w	800c7d4 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c676:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 8142 	beq.w	800c904 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c684:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c688:	429a      	cmp	r2, r3
 800c68a:	f080 813b 	bcs.w	800c904 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c694:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69a:	69db      	ldr	r3, [r3, #28]
 800c69c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6a0:	f000 8088 	beq.w	800c7b4 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	330c      	adds	r3, #12
 800c6aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6b2:	e853 3f00 	ldrex	r3, [r3]
 800c6b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c6ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c6be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	330c      	adds	r3, #12
 800c6cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c6d0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c6d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c6dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6e0:	e841 2300 	strex	r3, r2, [r1]
 800c6e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c6e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1d9      	bne.n	800c6a4 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	3314      	adds	r3, #20
 800c6f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6fa:	e853 3f00 	ldrex	r3, [r3]
 800c6fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c702:	f023 0301 	bic.w	r3, r3, #1
 800c706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	3314      	adds	r3, #20
 800c710:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c714:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c718:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c71c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c720:	e841 2300 	strex	r3, r2, [r1]
 800c724:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1e1      	bne.n	800c6f0 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	3314      	adds	r3, #20
 800c732:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c734:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c736:	e853 3f00 	ldrex	r3, [r3]
 800c73a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c73c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c73e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3314      	adds	r3, #20
 800c74c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c750:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c752:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c754:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c756:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c758:	e841 2300 	strex	r3, r2, [r1]
 800c75c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c75e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1e3      	bne.n	800c72c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2220      	movs	r2, #32
 800c768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	330c      	adds	r3, #12
 800c778:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c77c:	e853 3f00 	ldrex	r3, [r3]
 800c780:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c784:	f023 0310 	bic.w	r3, r3, #16
 800c788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	330c      	adds	r3, #12
 800c792:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c796:	65ba      	str	r2, [r7, #88]	; 0x58
 800c798:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c79c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c79e:	e841 2300 	strex	r3, r2, [r1]
 800c7a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1e3      	bne.n	800c772 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7fa fc28 	bl	8007004 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800c7c0:	b292      	uxth	r2, r2
 800c7c2:	1a8a      	subs	r2, r1, r2
 800c7c4:	b292      	uxth	r2, r2
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7cc:	e09a      	b.n	800c904 <HAL_UART_IRQHandler+0x518>
 800c7ce:	bf00      	nop
 800c7d0:	0800cba7 	.word	0x0800cba7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	f000 808c 	beq.w	800c908 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c7f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f000 8087 	beq.w	800c908 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	330c      	adds	r3, #12
 800c800:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c804:	e853 3f00 	ldrex	r3, [r3]
 800c808:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c80c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	330c      	adds	r3, #12
 800c81a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c81e:	647a      	str	r2, [r7, #68]	; 0x44
 800c820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c822:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c826:	e841 2300 	strex	r3, r2, [r1]
 800c82a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1e3      	bne.n	800c7fa <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	3314      	adds	r3, #20
 800c838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83c:	e853 3f00 	ldrex	r3, [r3]
 800c840:	623b      	str	r3, [r7, #32]
   return(result);
 800c842:	6a3b      	ldr	r3, [r7, #32]
 800c844:	f023 0301 	bic.w	r3, r3, #1
 800c848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3314      	adds	r3, #20
 800c852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c856:	633a      	str	r2, [r7, #48]	; 0x30
 800c858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c85e:	e841 2300 	strex	r3, r2, [r1]
 800c862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	2b00      	cmp	r3, #0
 800c868:	d1e3      	bne.n	800c832 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2220      	movs	r2, #32
 800c86e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	330c      	adds	r3, #12
 800c87e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	e853 3f00 	ldrex	r3, [r3]
 800c886:	60fb      	str	r3, [r7, #12]
   return(result);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f023 0310 	bic.w	r3, r3, #16
 800c88e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	330c      	adds	r3, #12
 800c898:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c89c:	61fa      	str	r2, [r7, #28]
 800c89e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a0:	69b9      	ldr	r1, [r7, #24]
 800c8a2:	69fa      	ldr	r2, [r7, #28]
 800c8a4:	e841 2300 	strex	r3, r2, [r1]
 800c8a8:	617b      	str	r3, [r7, #20]
   return(result);
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1e3      	bne.n	800c878 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8b4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c8be:	e023      	b.n	800c908 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d009      	beq.n	800c8e0 <HAL_UART_IRQHandler+0x4f4>
 800c8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d003      	beq.n	800c8e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f979 	bl	800cbd0 <UART_Transmit_IT>
    return;
 800c8de:	e014      	b.n	800c90a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00e      	beq.n	800c90a <HAL_UART_IRQHandler+0x51e>
 800c8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d008      	beq.n	800c90a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f9b9 	bl	800cc70 <UART_EndTransmit_IT>
    return;
 800c8fe:	e004      	b.n	800c90a <HAL_UART_IRQHandler+0x51e>
    return;
 800c900:	bf00      	nop
 800c902:	e002      	b.n	800c90a <HAL_UART_IRQHandler+0x51e>
      return;
 800c904:	bf00      	nop
 800c906:	e000      	b.n	800c90a <HAL_UART_IRQHandler+0x51e>
      return;
 800c908:	bf00      	nop
  }
}
 800c90a:	37e8      	adds	r7, #232	; 0xe8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c918:	bf00      	nop
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c954:	bf00      	nop
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	460b      	mov	r3, r1
 800c992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c994:	bf00      	nop
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	60fb      	str	r3, [r7, #12]
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	b2db      	uxtb	r3, r3
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3714      	adds	r7, #20
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a10      	ldr	r2, [pc, #64]	; (800ca40 <UART_InitCallbacksToDefault+0x4c>)
 800ca00:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a0f      	ldr	r2, [pc, #60]	; (800ca44 <UART_InitCallbacksToDefault+0x50>)
 800ca06:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a0f      	ldr	r2, [pc, #60]	; (800ca48 <UART_InitCallbacksToDefault+0x54>)
 800ca0c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a0e      	ldr	r2, [pc, #56]	; (800ca4c <UART_InitCallbacksToDefault+0x58>)
 800ca12:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a0e      	ldr	r2, [pc, #56]	; (800ca50 <UART_InitCallbacksToDefault+0x5c>)
 800ca18:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a0d      	ldr	r2, [pc, #52]	; (800ca54 <UART_InitCallbacksToDefault+0x60>)
 800ca1e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a0d      	ldr	r2, [pc, #52]	; (800ca58 <UART_InitCallbacksToDefault+0x64>)
 800ca24:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a0c      	ldr	r2, [pc, #48]	; (800ca5c <UART_InitCallbacksToDefault+0x68>)
 800ca2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a0c      	ldr	r2, [pc, #48]	; (800ca60 <UART_InitCallbacksToDefault+0x6c>)
 800ca30:	669a      	str	r2, [r3, #104]	; 0x68

}
 800ca32:	bf00      	nop
 800ca34:	370c      	adds	r7, #12
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	0800c925 	.word	0x0800c925
 800ca44:	0800c911 	.word	0x0800c911
 800ca48:	0800c939 	.word	0x0800c939
 800ca4c:	08004089 	.word	0x08004089
 800ca50:	08003fd5 	.word	0x08003fd5
 800ca54:	0800c94d 	.word	0x0800c94d
 800ca58:	0800c961 	.word	0x0800c961
 800ca5c:	0800c975 	.word	0x0800c975
 800ca60:	0800c989 	.word	0x0800c989

0800ca64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	88fa      	ldrh	r2, [r7, #6]
 800ca7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	88fa      	ldrh	r2, [r7, #6]
 800ca82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2200      	movs	r2, #0
 800ca88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2222      	movs	r2, #34	; 0x22
 800ca8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d007      	beq.n	800cab2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	68da      	ldr	r2, [r3, #12]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cab0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	695a      	ldr	r2, [r3, #20]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f042 0201 	orr.w	r2, r2, #1
 800cac0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68da      	ldr	r2, [r3, #12]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f042 0220 	orr.w	r2, r2, #32
 800cad0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b095      	sub	sp, #84	; 0x54
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	330c      	adds	r3, #12
 800caee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf2:	e853 3f00 	ldrex	r3, [r3]
 800caf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800caf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cafe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	330c      	adds	r3, #12
 800cb06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb08:	643a      	str	r2, [r7, #64]	; 0x40
 800cb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb10:	e841 2300 	strex	r3, r2, [r1]
 800cb14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1e5      	bne.n	800cae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	3314      	adds	r3, #20
 800cb22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	e853 3f00 	ldrex	r3, [r3]
 800cb2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	f023 0301 	bic.w	r3, r3, #1
 800cb32:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	3314      	adds	r3, #20
 800cb3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb44:	e841 2300 	strex	r3, r2, [r1]
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1e5      	bne.n	800cb1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d119      	bne.n	800cb8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	330c      	adds	r3, #12
 800cb5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	e853 3f00 	ldrex	r3, [r3]
 800cb66:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	f023 0310 	bic.w	r3, r3, #16
 800cb6e:	647b      	str	r3, [r7, #68]	; 0x44
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	330c      	adds	r3, #12
 800cb76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb78:	61ba      	str	r2, [r7, #24]
 800cb7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb7c:	6979      	ldr	r1, [r7, #20]
 800cb7e:	69ba      	ldr	r2, [r7, #24]
 800cb80:	e841 2300 	strex	r3, r2, [r1]
 800cb84:	613b      	str	r3, [r7, #16]
   return(result);
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1e5      	bne.n	800cb58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2220      	movs	r2, #32
 800cb90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cb9a:	bf00      	nop
 800cb9c:	3754      	adds	r7, #84	; 0x54
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr

0800cba6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b084      	sub	sp, #16
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbc8:	bf00      	nop
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	2b21      	cmp	r3, #33	; 0x21
 800cbe2:	d13e      	bne.n	800cc62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbec:	d114      	bne.n	800cc18 <UART_Transmit_IT+0x48>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d110      	bne.n	800cc18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	461a      	mov	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6a1b      	ldr	r3, [r3, #32]
 800cc10:	1c9a      	adds	r2, r3, #2
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	621a      	str	r2, [r3, #32]
 800cc16:	e008      	b.n	800cc2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6a1b      	ldr	r3, [r3, #32]
 800cc1c:	1c59      	adds	r1, r3, #1
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	6211      	str	r1, [r2, #32]
 800cc22:	781a      	ldrb	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	3b01      	subs	r3, #1
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	4619      	mov	r1, r3
 800cc38:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10f      	bne.n	800cc5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	68da      	ldr	r2, [r3, #12]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68da      	ldr	r2, [r3, #12]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e000      	b.n	800cc64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc62:	2302      	movs	r3, #2
  }
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3714      	adds	r7, #20
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68da      	ldr	r2, [r3, #12]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2220      	movs	r2, #32
 800cc8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b08c      	sub	sp, #48	; 0x30
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	2b22      	cmp	r3, #34	; 0x22
 800ccb4:	f040 80ad 	bne.w	800ce12 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccc0:	d117      	bne.n	800ccf2 <UART_Receive_IT+0x50>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d113      	bne.n	800ccf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccea:	1c9a      	adds	r2, r3, #2
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	629a      	str	r2, [r3, #40]	; 0x28
 800ccf0:	e026      	b.n	800cd40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd04:	d007      	beq.n	800cd16 <UART_Receive_IT+0x74>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10a      	bne.n	800cd24 <UART_Receive_IT+0x82>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	691b      	ldr	r3, [r3, #16]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d106      	bne.n	800cd24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	701a      	strb	r2, [r3, #0]
 800cd22:	e008      	b.n	800cd36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3a:	1c5a      	adds	r2, r3, #1
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	3b01      	subs	r3, #1
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d15c      	bne.n	800ce0e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68da      	ldr	r2, [r3, #12]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f022 0220 	bic.w	r2, r2, #32
 800cd62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	68da      	ldr	r2, [r3, #12]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	695a      	ldr	r2, [r3, #20]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f022 0201 	bic.w	r2, r2, #1
 800cd82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2220      	movs	r2, #32
 800cd88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d136      	bne.n	800ce02 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	330c      	adds	r3, #12
 800cda0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	e853 3f00 	ldrex	r3, [r3]
 800cda8:	613b      	str	r3, [r7, #16]
   return(result);
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	f023 0310 	bic.w	r3, r3, #16
 800cdb0:	627b      	str	r3, [r7, #36]	; 0x24
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	330c      	adds	r3, #12
 800cdb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdba:	623a      	str	r2, [r7, #32]
 800cdbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbe:	69f9      	ldr	r1, [r7, #28]
 800cdc0:	6a3a      	ldr	r2, [r7, #32]
 800cdc2:	e841 2300 	strex	r3, r2, [r1]
 800cdc6:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1e5      	bne.n	800cd9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f003 0310 	and.w	r3, r3, #16
 800cdd8:	2b10      	cmp	r3, #16
 800cdda:	d10a      	bne.n	800cdf2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cddc:	2300      	movs	r3, #0
 800cdde:	60fb      	str	r3, [r7, #12]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	60fb      	str	r3, [r7, #12]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	4798      	blx	r3
 800ce00:	e003      	b.n	800ce0a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	e002      	b.n	800ce14 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e000      	b.n	800ce14 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800ce12:	2302      	movs	r3, #2
  }
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3730      	adds	r7, #48	; 0x30
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce20:	b0c0      	sub	sp, #256	; 0x100
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	691b      	ldr	r3, [r3, #16]
 800ce30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce38:	68d9      	ldr	r1, [r3, #12]
 800ce3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	ea40 0301 	orr.w	r3, r0, r1
 800ce44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce4a:	689a      	ldr	r2, [r3, #8]
 800ce4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	431a      	orrs	r2, r3
 800ce54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce58:	695b      	ldr	r3, [r3, #20]
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce60:	69db      	ldr	r3, [r3, #28]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ce74:	f021 010c 	bic.w	r1, r1, #12
 800ce78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce82:	430b      	orrs	r3, r1
 800ce84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	695b      	ldr	r3, [r3, #20]
 800ce8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ce92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce96:	6999      	ldr	r1, [r3, #24]
 800ce98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	ea40 0301 	orr.w	r3, r0, r1
 800cea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	4b8f      	ldr	r3, [pc, #572]	; (800d0e8 <UART_SetConfig+0x2cc>)
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d005      	beq.n	800cebc <UART_SetConfig+0xa0>
 800ceb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	4b8d      	ldr	r3, [pc, #564]	; (800d0ec <UART_SetConfig+0x2d0>)
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d104      	bne.n	800cec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cebc:	f7fd fc3e 	bl	800a73c <HAL_RCC_GetPCLK2Freq>
 800cec0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cec4:	e003      	b.n	800cece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cec6:	f7fd fc25 	bl	800a714 <HAL_RCC_GetPCLK1Freq>
 800ceca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced2:	69db      	ldr	r3, [r3, #28]
 800ced4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ced8:	f040 810c 	bne.w	800d0f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cedc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cee0:	2200      	movs	r2, #0
 800cee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cee6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ceea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ceee:	4622      	mov	r2, r4
 800cef0:	462b      	mov	r3, r5
 800cef2:	1891      	adds	r1, r2, r2
 800cef4:	65b9      	str	r1, [r7, #88]	; 0x58
 800cef6:	415b      	adcs	r3, r3
 800cef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cefa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cefe:	4621      	mov	r1, r4
 800cf00:	eb12 0801 	adds.w	r8, r2, r1
 800cf04:	4629      	mov	r1, r5
 800cf06:	eb43 0901 	adc.w	r9, r3, r1
 800cf0a:	f04f 0200 	mov.w	r2, #0
 800cf0e:	f04f 0300 	mov.w	r3, #0
 800cf12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf1e:	4690      	mov	r8, r2
 800cf20:	4699      	mov	r9, r3
 800cf22:	4623      	mov	r3, r4
 800cf24:	eb18 0303 	adds.w	r3, r8, r3
 800cf28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf2c:	462b      	mov	r3, r5
 800cf2e:	eb49 0303 	adc.w	r3, r9, r3
 800cf32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cf42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cf46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	18db      	adds	r3, r3, r3
 800cf4e:	653b      	str	r3, [r7, #80]	; 0x50
 800cf50:	4613      	mov	r3, r2
 800cf52:	eb42 0303 	adc.w	r3, r2, r3
 800cf56:	657b      	str	r3, [r7, #84]	; 0x54
 800cf58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf60:	f7f3 fd84 	bl	8000a6c <__aeabi_uldivmod>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	4b61      	ldr	r3, [pc, #388]	; (800d0f0 <UART_SetConfig+0x2d4>)
 800cf6a:	fba3 2302 	umull	r2, r3, r3, r2
 800cf6e:	095b      	lsrs	r3, r3, #5
 800cf70:	011c      	lsls	r4, r3, #4
 800cf72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf76:	2200      	movs	r2, #0
 800cf78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cf80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cf84:	4642      	mov	r2, r8
 800cf86:	464b      	mov	r3, r9
 800cf88:	1891      	adds	r1, r2, r2
 800cf8a:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf8c:	415b      	adcs	r3, r3
 800cf8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cf94:	4641      	mov	r1, r8
 800cf96:	eb12 0a01 	adds.w	sl, r2, r1
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	eb43 0b01 	adc.w	fp, r3, r1
 800cfa0:	f04f 0200 	mov.w	r2, #0
 800cfa4:	f04f 0300 	mov.w	r3, #0
 800cfa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cfac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cfb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfb4:	4692      	mov	sl, r2
 800cfb6:	469b      	mov	fp, r3
 800cfb8:	4643      	mov	r3, r8
 800cfba:	eb1a 0303 	adds.w	r3, sl, r3
 800cfbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cfc2:	464b      	mov	r3, r9
 800cfc4:	eb4b 0303 	adc.w	r3, fp, r3
 800cfc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cfcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cfdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	18db      	adds	r3, r3, r3
 800cfe4:	643b      	str	r3, [r7, #64]	; 0x40
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	eb42 0303 	adc.w	r3, r2, r3
 800cfec:	647b      	str	r3, [r7, #68]	; 0x44
 800cfee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cff6:	f7f3 fd39 	bl	8000a6c <__aeabi_uldivmod>
 800cffa:	4602      	mov	r2, r0
 800cffc:	460b      	mov	r3, r1
 800cffe:	4611      	mov	r1, r2
 800d000:	4b3b      	ldr	r3, [pc, #236]	; (800d0f0 <UART_SetConfig+0x2d4>)
 800d002:	fba3 2301 	umull	r2, r3, r3, r1
 800d006:	095b      	lsrs	r3, r3, #5
 800d008:	2264      	movs	r2, #100	; 0x64
 800d00a:	fb02 f303 	mul.w	r3, r2, r3
 800d00e:	1acb      	subs	r3, r1, r3
 800d010:	00db      	lsls	r3, r3, #3
 800d012:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d016:	4b36      	ldr	r3, [pc, #216]	; (800d0f0 <UART_SetConfig+0x2d4>)
 800d018:	fba3 2302 	umull	r2, r3, r3, r2
 800d01c:	095b      	lsrs	r3, r3, #5
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d024:	441c      	add	r4, r3
 800d026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d02a:	2200      	movs	r2, #0
 800d02c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d030:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d038:	4642      	mov	r2, r8
 800d03a:	464b      	mov	r3, r9
 800d03c:	1891      	adds	r1, r2, r2
 800d03e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d040:	415b      	adcs	r3, r3
 800d042:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d048:	4641      	mov	r1, r8
 800d04a:	1851      	adds	r1, r2, r1
 800d04c:	6339      	str	r1, [r7, #48]	; 0x30
 800d04e:	4649      	mov	r1, r9
 800d050:	414b      	adcs	r3, r1
 800d052:	637b      	str	r3, [r7, #52]	; 0x34
 800d054:	f04f 0200 	mov.w	r2, #0
 800d058:	f04f 0300 	mov.w	r3, #0
 800d05c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d060:	4659      	mov	r1, fp
 800d062:	00cb      	lsls	r3, r1, #3
 800d064:	4651      	mov	r1, sl
 800d066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d06a:	4651      	mov	r1, sl
 800d06c:	00ca      	lsls	r2, r1, #3
 800d06e:	4610      	mov	r0, r2
 800d070:	4619      	mov	r1, r3
 800d072:	4603      	mov	r3, r0
 800d074:	4642      	mov	r2, r8
 800d076:	189b      	adds	r3, r3, r2
 800d078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d07c:	464b      	mov	r3, r9
 800d07e:	460a      	mov	r2, r1
 800d080:	eb42 0303 	adc.w	r3, r2, r3
 800d084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d094:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d09c:	460b      	mov	r3, r1
 800d09e:	18db      	adds	r3, r3, r3
 800d0a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	eb42 0303 	adc.w	r3, r2, r3
 800d0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d0ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d0b2:	f7f3 fcdb 	bl	8000a6c <__aeabi_uldivmod>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	4b0d      	ldr	r3, [pc, #52]	; (800d0f0 <UART_SetConfig+0x2d4>)
 800d0bc:	fba3 1302 	umull	r1, r3, r3, r2
 800d0c0:	095b      	lsrs	r3, r3, #5
 800d0c2:	2164      	movs	r1, #100	; 0x64
 800d0c4:	fb01 f303 	mul.w	r3, r1, r3
 800d0c8:	1ad3      	subs	r3, r2, r3
 800d0ca:	00db      	lsls	r3, r3, #3
 800d0cc:	3332      	adds	r3, #50	; 0x32
 800d0ce:	4a08      	ldr	r2, [pc, #32]	; (800d0f0 <UART_SetConfig+0x2d4>)
 800d0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d4:	095b      	lsrs	r3, r3, #5
 800d0d6:	f003 0207 	and.w	r2, r3, #7
 800d0da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4422      	add	r2, r4
 800d0e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0e4:	e105      	b.n	800d2f2 <UART_SetConfig+0x4d6>
 800d0e6:	bf00      	nop
 800d0e8:	40011000 	.word	0x40011000
 800d0ec:	40011400 	.word	0x40011400
 800d0f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d0fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d106:	4642      	mov	r2, r8
 800d108:	464b      	mov	r3, r9
 800d10a:	1891      	adds	r1, r2, r2
 800d10c:	6239      	str	r1, [r7, #32]
 800d10e:	415b      	adcs	r3, r3
 800d110:	627b      	str	r3, [r7, #36]	; 0x24
 800d112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d116:	4641      	mov	r1, r8
 800d118:	1854      	adds	r4, r2, r1
 800d11a:	4649      	mov	r1, r9
 800d11c:	eb43 0501 	adc.w	r5, r3, r1
 800d120:	f04f 0200 	mov.w	r2, #0
 800d124:	f04f 0300 	mov.w	r3, #0
 800d128:	00eb      	lsls	r3, r5, #3
 800d12a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d12e:	00e2      	lsls	r2, r4, #3
 800d130:	4614      	mov	r4, r2
 800d132:	461d      	mov	r5, r3
 800d134:	4643      	mov	r3, r8
 800d136:	18e3      	adds	r3, r4, r3
 800d138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d13c:	464b      	mov	r3, r9
 800d13e:	eb45 0303 	adc.w	r3, r5, r3
 800d142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d152:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d156:	f04f 0200 	mov.w	r2, #0
 800d15a:	f04f 0300 	mov.w	r3, #0
 800d15e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d162:	4629      	mov	r1, r5
 800d164:	008b      	lsls	r3, r1, #2
 800d166:	4621      	mov	r1, r4
 800d168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d16c:	4621      	mov	r1, r4
 800d16e:	008a      	lsls	r2, r1, #2
 800d170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d174:	f7f3 fc7a 	bl	8000a6c <__aeabi_uldivmod>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4b60      	ldr	r3, [pc, #384]	; (800d300 <UART_SetConfig+0x4e4>)
 800d17e:	fba3 2302 	umull	r2, r3, r3, r2
 800d182:	095b      	lsrs	r3, r3, #5
 800d184:	011c      	lsls	r4, r3, #4
 800d186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d18a:	2200      	movs	r2, #0
 800d18c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d190:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d198:	4642      	mov	r2, r8
 800d19a:	464b      	mov	r3, r9
 800d19c:	1891      	adds	r1, r2, r2
 800d19e:	61b9      	str	r1, [r7, #24]
 800d1a0:	415b      	adcs	r3, r3
 800d1a2:	61fb      	str	r3, [r7, #28]
 800d1a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d1a8:	4641      	mov	r1, r8
 800d1aa:	1851      	adds	r1, r2, r1
 800d1ac:	6139      	str	r1, [r7, #16]
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	414b      	adcs	r3, r1
 800d1b2:	617b      	str	r3, [r7, #20]
 800d1b4:	f04f 0200 	mov.w	r2, #0
 800d1b8:	f04f 0300 	mov.w	r3, #0
 800d1bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1c0:	4659      	mov	r1, fp
 800d1c2:	00cb      	lsls	r3, r1, #3
 800d1c4:	4651      	mov	r1, sl
 800d1c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1ca:	4651      	mov	r1, sl
 800d1cc:	00ca      	lsls	r2, r1, #3
 800d1ce:	4610      	mov	r0, r2
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	4642      	mov	r2, r8
 800d1d6:	189b      	adds	r3, r3, r2
 800d1d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d1dc:	464b      	mov	r3, r9
 800d1de:	460a      	mov	r2, r1
 800d1e0:	eb42 0303 	adc.w	r3, r2, r3
 800d1e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d1f4:	f04f 0200 	mov.w	r2, #0
 800d1f8:	f04f 0300 	mov.w	r3, #0
 800d1fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d200:	4649      	mov	r1, r9
 800d202:	008b      	lsls	r3, r1, #2
 800d204:	4641      	mov	r1, r8
 800d206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d20a:	4641      	mov	r1, r8
 800d20c:	008a      	lsls	r2, r1, #2
 800d20e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d212:	f7f3 fc2b 	bl	8000a6c <__aeabi_uldivmod>
 800d216:	4602      	mov	r2, r0
 800d218:	460b      	mov	r3, r1
 800d21a:	4b39      	ldr	r3, [pc, #228]	; (800d300 <UART_SetConfig+0x4e4>)
 800d21c:	fba3 1302 	umull	r1, r3, r3, r2
 800d220:	095b      	lsrs	r3, r3, #5
 800d222:	2164      	movs	r1, #100	; 0x64
 800d224:	fb01 f303 	mul.w	r3, r1, r3
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	011b      	lsls	r3, r3, #4
 800d22c:	3332      	adds	r3, #50	; 0x32
 800d22e:	4a34      	ldr	r2, [pc, #208]	; (800d300 <UART_SetConfig+0x4e4>)
 800d230:	fba2 2303 	umull	r2, r3, r2, r3
 800d234:	095b      	lsrs	r3, r3, #5
 800d236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d23a:	441c      	add	r4, r3
 800d23c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d240:	2200      	movs	r2, #0
 800d242:	673b      	str	r3, [r7, #112]	; 0x70
 800d244:	677a      	str	r2, [r7, #116]	; 0x74
 800d246:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d24a:	4642      	mov	r2, r8
 800d24c:	464b      	mov	r3, r9
 800d24e:	1891      	adds	r1, r2, r2
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	415b      	adcs	r3, r3
 800d254:	60fb      	str	r3, [r7, #12]
 800d256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d25a:	4641      	mov	r1, r8
 800d25c:	1851      	adds	r1, r2, r1
 800d25e:	6039      	str	r1, [r7, #0]
 800d260:	4649      	mov	r1, r9
 800d262:	414b      	adcs	r3, r1
 800d264:	607b      	str	r3, [r7, #4]
 800d266:	f04f 0200 	mov.w	r2, #0
 800d26a:	f04f 0300 	mov.w	r3, #0
 800d26e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d272:	4659      	mov	r1, fp
 800d274:	00cb      	lsls	r3, r1, #3
 800d276:	4651      	mov	r1, sl
 800d278:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d27c:	4651      	mov	r1, sl
 800d27e:	00ca      	lsls	r2, r1, #3
 800d280:	4610      	mov	r0, r2
 800d282:	4619      	mov	r1, r3
 800d284:	4603      	mov	r3, r0
 800d286:	4642      	mov	r2, r8
 800d288:	189b      	adds	r3, r3, r2
 800d28a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d28c:	464b      	mov	r3, r9
 800d28e:	460a      	mov	r2, r1
 800d290:	eb42 0303 	adc.w	r3, r2, r3
 800d294:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	663b      	str	r3, [r7, #96]	; 0x60
 800d2a0:	667a      	str	r2, [r7, #100]	; 0x64
 800d2a2:	f04f 0200 	mov.w	r2, #0
 800d2a6:	f04f 0300 	mov.w	r3, #0
 800d2aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d2ae:	4649      	mov	r1, r9
 800d2b0:	008b      	lsls	r3, r1, #2
 800d2b2:	4641      	mov	r1, r8
 800d2b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2b8:	4641      	mov	r1, r8
 800d2ba:	008a      	lsls	r2, r1, #2
 800d2bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d2c0:	f7f3 fbd4 	bl	8000a6c <__aeabi_uldivmod>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	4b0d      	ldr	r3, [pc, #52]	; (800d300 <UART_SetConfig+0x4e4>)
 800d2ca:	fba3 1302 	umull	r1, r3, r3, r2
 800d2ce:	095b      	lsrs	r3, r3, #5
 800d2d0:	2164      	movs	r1, #100	; 0x64
 800d2d2:	fb01 f303 	mul.w	r3, r1, r3
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	011b      	lsls	r3, r3, #4
 800d2da:	3332      	adds	r3, #50	; 0x32
 800d2dc:	4a08      	ldr	r2, [pc, #32]	; (800d300 <UART_SetConfig+0x4e4>)
 800d2de:	fba2 2303 	umull	r2, r3, r2, r3
 800d2e2:	095b      	lsrs	r3, r3, #5
 800d2e4:	f003 020f 	and.w	r2, r3, #15
 800d2e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4422      	add	r2, r4
 800d2f0:	609a      	str	r2, [r3, #8]
}
 800d2f2:	bf00      	nop
 800d2f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2fe:	bf00      	nop
 800d300:	51eb851f 	.word	0x51eb851f

0800d304 <HAL_ADC_ConvCpltCallback>:
* Function: HAL_ADC_ConvCpltCallback										   	   *
* Description: Conversion callback to process conversion complete in the 		   *
* 			   peripheral.														   *
************************************************************************************/
VOID HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	if(Rte_P_Os_OsPort_Os_Counter % 200 == 0)
 800d30c:	4b09      	ldr	r3, [pc, #36]	; (800d334 <HAL_ADC_ConvCpltCallback+0x30>)
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	4b09      	ldr	r3, [pc, #36]	; (800d338 <HAL_ADC_ConvCpltCallback+0x34>)
 800d312:	fba3 1302 	umull	r1, r3, r3, r2
 800d316:	099b      	lsrs	r3, r3, #6
 800d318:	21c8      	movs	r1, #200	; 0xc8
 800d31a:	fb01 f303 	mul.w	r3, r1, r3
 800d31e:	1ad3      	subs	r3, r2, r3
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <HAL_ADC_ConvCpltCallback+0x26>
	{
		Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(Adc_ChannelOne_Buffer);
 800d324:	4805      	ldr	r0, [pc, #20]	; (800d33c <HAL_ADC_ConvCpltCallback+0x38>)
 800d326:	f004 fac1 	bl	80118ac <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>
	}
	else
	{
		/* do nothing */
	}
}
 800d32a:	bf00      	nop
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	200002d8 	.word	0x200002d8
 800d338:	51eb851f 	.word	0x51eb851f
 800d33c:	200008ec 	.word	0x200008ec

0800d340 <HAL_ADC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_ADC_ErrorCallback										   		   *
* Description: Error callback to process fault in the peripheral.		 		   *
************************************************************************************/
VOID HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
	/* Local variable to store error status. */
	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 800d348:	481b      	ldr	r0, [pc, #108]	; (800d3b8 <HAL_ADC_ErrorCallback+0x78>)
 800d34a:	f7f9 f927 	bl	800659c <HAL_ADC_GetError>
 800d34e:	60f8      	str	r0, [r7, #12]
	/* Process error status.
	 * Perform re-initialization on each error to prevent faults in the peripheral. */
	switch(receivedStatus)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2b04      	cmp	r3, #4
 800d354:	d82a      	bhi.n	800d3ac <HAL_ADC_ErrorCallback+0x6c>
 800d356:	a201      	add	r2, pc, #4	; (adr r2, 800d35c <HAL_ADC_ErrorCallback+0x1c>)
 800d358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d35c:	0800d3ad 	.word	0x0800d3ad
 800d360:	0800d371 	.word	0x0800d371
 800d364:	0800d385 	.word	0x0800d385
 800d368:	0800d3ad 	.word	0x0800d3ad
 800d36c:	0800d399 	.word	0x0800d399
	{
		case HAL_ADC_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_ADC_ERROR_INTERNAL:
			SystemManager_Fault[ADC_ERROR_INTERNAL]++;
 800d370:	4b12      	ldr	r3, [pc, #72]	; (800d3bc <HAL_ADC_ErrorCallback+0x7c>)
 800d372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d374:	3301      	adds	r3, #1
 800d376:	4a11      	ldr	r2, [pc, #68]	; (800d3bc <HAL_ADC_ErrorCallback+0x7c>)
 800d378:	6393      	str	r3, [r2, #56]	; 0x38
			Adc_DeInit();
 800d37a:	f000 f897 	bl	800d4ac <Adc_DeInit>
			Adc_Init();
 800d37e:	f000 f89f 	bl	800d4c0 <Adc_Init>
			break;
 800d382:	e014      	b.n	800d3ae <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_OVR:
			SystemManager_Fault[ADC_ERROR_OVR]++;
 800d384:	4b0d      	ldr	r3, [pc, #52]	; (800d3bc <HAL_ADC_ErrorCallback+0x7c>)
 800d386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d388:	3301      	adds	r3, #1
 800d38a:	4a0c      	ldr	r2, [pc, #48]	; (800d3bc <HAL_ADC_ErrorCallback+0x7c>)
 800d38c:	63d3      	str	r3, [r2, #60]	; 0x3c
			Adc_DeInit();
 800d38e:	f000 f88d 	bl	800d4ac <Adc_DeInit>
			Adc_Init();
 800d392:	f000 f895 	bl	800d4c0 <Adc_Init>
			break;
 800d396:	e00a      	b.n	800d3ae <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_DMA:
			SystemManager_Fault[ADC_ERROR_DMA]++;
 800d398:	4b08      	ldr	r3, [pc, #32]	; (800d3bc <HAL_ADC_ErrorCallback+0x7c>)
 800d39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39c:	3301      	adds	r3, #1
 800d39e:	4a07      	ldr	r2, [pc, #28]	; (800d3bc <HAL_ADC_ErrorCallback+0x7c>)
 800d3a0:	6413      	str	r3, [r2, #64]	; 0x40
			Adc_DeInit();
 800d3a2:	f000 f883 	bl	800d4ac <Adc_DeInit>
			Adc_Init();
 800d3a6:	f000 f88b 	bl	800d4c0 <Adc_Init>
			break;
 800d3aa:	e000      	b.n	800d3ae <HAL_ADC_ErrorCallback+0x6e>
		default:
			break;
 800d3ac:	bf00      	nop
	}
}
 800d3ae:	bf00      	nop
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	2000020c 	.word	0x2000020c
 800d3bc:	2000941c 	.word	0x2000941c

0800d3c0 <Adc_MainFunction>:
/***********************************************************************************
* Function: Adc_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Adc_MainFunction()
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
	/* Local variable to store the error status. */
	uint32 statusValue = STD_LOW;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	607b      	str	r3, [r7, #4]
	/* Get error status. */
	statusValue = HAL_ADC_GetState(&hadc1);
 800d3ca:	4836      	ldr	r0, [pc, #216]	; (800d4a4 <Adc_MainFunction+0xe4>)
 800d3cc:	f7f9 f8da 	bl	8006584 <HAL_ADC_GetState>
 800d3d0:	6078      	str	r0, [r7, #4]

	/* Process module states. */
	switch(statusValue)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3d8:	d049      	beq.n	800d46e <Adc_MainFunction+0xae>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3e0:	d85a      	bhi.n	800d498 <Adc_MainFunction+0xd8>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b10      	cmp	r3, #16
 800d3e6:	d827      	bhi.n	800d438 <Adc_MainFunction+0x78>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b10      	cmp	r3, #16
 800d3ec:	d854      	bhi.n	800d498 <Adc_MainFunction+0xd8>
 800d3ee:	a201      	add	r2, pc, #4	; (adr r2, 800d3f4 <Adc_MainFunction+0x34>)
 800d3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f4:	0800d443 	.word	0x0800d443
 800d3f8:	0800d451 	.word	0x0800d451
 800d3fc:	0800d45b 	.word	0x0800d45b
 800d400:	0800d499 	.word	0x0800d499
 800d404:	0800d479 	.word	0x0800d479
 800d408:	0800d499 	.word	0x0800d499
 800d40c:	0800d499 	.word	0x0800d499
 800d410:	0800d499 	.word	0x0800d499
 800d414:	0800d499 	.word	0x0800d499
 800d418:	0800d499 	.word	0x0800d499
 800d41c:	0800d499 	.word	0x0800d499
 800d420:	0800d499 	.word	0x0800d499
 800d424:	0800d499 	.word	0x0800d499
 800d428:	0800d499 	.word	0x0800d499
 800d42c:	0800d499 	.word	0x0800d499
 800d430:	0800d499 	.word	0x0800d499
 800d434:	0800d489 	.word	0x0800d489
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d43e:	d011      	beq.n	800d464 <Adc_MainFunction+0xa4>
		case HAL_ADC_STATE_ERROR:
			Adc_BswState = statusValue;
			HAL_ADC_ErrorCallback(&hadc1);
			break;
		default:
			break;
 800d440:	e02a      	b.n	800d498 <Adc_MainFunction+0xd8>
			Adc_BswState = statusValue;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	b2da      	uxtb	r2, r3
 800d446:	4b18      	ldr	r3, [pc, #96]	; (800d4a8 <Adc_MainFunction+0xe8>)
 800d448:	701a      	strb	r2, [r3, #0]
			Adc_Init();
 800d44a:	f000 f839 	bl	800d4c0 <Adc_Init>
			break;
 800d44e:	e024      	b.n	800d49a <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	b2da      	uxtb	r2, r3
 800d454:	4b14      	ldr	r3, [pc, #80]	; (800d4a8 <Adc_MainFunction+0xe8>)
 800d456:	701a      	strb	r2, [r3, #0]
			break;
 800d458:	e01f      	b.n	800d49a <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	4b12      	ldr	r3, [pc, #72]	; (800d4a8 <Adc_MainFunction+0xe8>)
 800d460:	701a      	strb	r2, [r3, #0]
			break;
 800d462:	e01a      	b.n	800d49a <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	b2da      	uxtb	r2, r3
 800d468:	4b0f      	ldr	r3, [pc, #60]	; (800d4a8 <Adc_MainFunction+0xe8>)
 800d46a:	701a      	strb	r2, [r3, #0]
			break;
 800d46c:	e015      	b.n	800d49a <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	b2da      	uxtb	r2, r3
 800d472:	4b0d      	ldr	r3, [pc, #52]	; (800d4a8 <Adc_MainFunction+0xe8>)
 800d474:	701a      	strb	r2, [r3, #0]
			break;
 800d476:	e010      	b.n	800d49a <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	b2da      	uxtb	r2, r3
 800d47c:	4b0a      	ldr	r3, [pc, #40]	; (800d4a8 <Adc_MainFunction+0xe8>)
 800d47e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 800d480:	4808      	ldr	r0, [pc, #32]	; (800d4a4 <Adc_MainFunction+0xe4>)
 800d482:	f7ff ff5d 	bl	800d340 <HAL_ADC_ErrorCallback>
			break;
 800d486:	e008      	b.n	800d49a <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	b2da      	uxtb	r2, r3
 800d48c:	4b06      	ldr	r3, [pc, #24]	; (800d4a8 <Adc_MainFunction+0xe8>)
 800d48e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 800d490:	4804      	ldr	r0, [pc, #16]	; (800d4a4 <Adc_MainFunction+0xe4>)
 800d492:	f7ff ff55 	bl	800d340 <HAL_ADC_ErrorCallback>
			break;
 800d496:	e000      	b.n	800d49a <Adc_MainFunction+0xda>
			break;
 800d498:	bf00      	nop
	}
}
 800d49a:	bf00      	nop
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	2000020c 	.word	0x2000020c
 800d4a8:	200008e8 	.word	0x200008e8

0800d4ac <Adc_DeInit>:
/***********************************************************************************
* Function: Adc_DeInit										   					   *
* Description: De-initialize the peripheral.									   *
************************************************************************************/
StdReturnType Adc_DeInit()
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	af00      	add	r7, sp, #0
	/* Call for de-intialization function. */
	HAL_ADC_DeInit(&hadc1);
 800d4b0:	4802      	ldr	r0, [pc, #8]	; (800d4bc <Adc_DeInit+0x10>)
 800d4b2:	f7f8 fce1 	bl	8005e78 <HAL_ADC_DeInit>
	return E_OK;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	2000020c 	.word	0x2000020c

0800d4c0 <Adc_Init>:
/***********************************************************************************
* Function: Adc_Init										   					   *
* Description: Initialize the protocol.									       	   *
************************************************************************************/
StdReturnType Adc_Init()
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800d4c6:	463b      	mov	r3, r7
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	605a      	str	r2, [r3, #4]
 800d4ce:	609a      	str	r2, [r3, #8]
 800d4d0:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADC1;
 800d4d2:	4b96      	ldr	r3, [pc, #600]	; (800d72c <Adc_Init+0x26c>)
 800d4d4:	4a96      	ldr	r2, [pc, #600]	; (800d730 <Adc_Init+0x270>)
 800d4d6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800d4d8:	4b94      	ldr	r3, [pc, #592]	; (800d72c <Adc_Init+0x26c>)
 800d4da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d4de:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d4e0:	4b92      	ldr	r3, [pc, #584]	; (800d72c <Adc_Init+0x26c>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800d4e6:	4b91      	ldr	r3, [pc, #580]	; (800d72c <Adc_Init+0x26c>)
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800d4ec:	4b8f      	ldr	r3, [pc, #572]	; (800d72c <Adc_Init+0x26c>)
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d4f2:	4b8e      	ldr	r3, [pc, #568]	; (800d72c <Adc_Init+0x26c>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d4fa:	4b8c      	ldr	r3, [pc, #560]	; (800d72c <Adc_Init+0x26c>)
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d500:	4b8a      	ldr	r3, [pc, #552]	; (800d72c <Adc_Init+0x26c>)
 800d502:	4a8c      	ldr	r2, [pc, #560]	; (800d734 <Adc_Init+0x274>)
 800d504:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d506:	4b89      	ldr	r3, [pc, #548]	; (800d72c <Adc_Init+0x26c>)
 800d508:	2200      	movs	r2, #0
 800d50a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 14;
 800d50c:	4b87      	ldr	r3, [pc, #540]	; (800d72c <Adc_Init+0x26c>)
 800d50e:	220e      	movs	r2, #14
 800d510:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800d512:	4b86      	ldr	r3, [pc, #536]	; (800d72c <Adc_Init+0x26c>)
 800d514:	2201      	movs	r2, #1
 800d516:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d51a:	4b84      	ldr	r3, [pc, #528]	; (800d72c <Adc_Init+0x26c>)
 800d51c:	2201      	movs	r2, #1
 800d51e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d520:	4882      	ldr	r0, [pc, #520]	; (800d72c <Adc_Init+0x26c>)
 800d522:	f7f8 fc43 	bl	8005dac <HAL_ADC_Init>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <Adc_Init+0x72>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d52c:	487f      	ldr	r0, [pc, #508]	; (800d72c <Adc_Init+0x26c>)
 800d52e:	f7ff ff07 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
	/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_13;
 800d532:	230d      	movs	r3, #13
 800d534:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800d536:	2301      	movs	r3, #1
 800d538:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800d53a:	2307      	movs	r3, #7
 800d53c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d53e:	463b      	mov	r3, r7
 800d540:	4619      	mov	r1, r3
 800d542:	487a      	ldr	r0, [pc, #488]	; (800d72c <Adc_Init+0x26c>)
 800d544:	f7f8 feec 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <Adc_Init+0x94>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d54e:	4877      	ldr	r0, [pc, #476]	; (800d72c <Adc_Init+0x26c>)
 800d550:	f7ff fef6 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_2;
 800d554:	2302      	movs	r3, #2
 800d556:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800d558:	2302      	movs	r3, #2
 800d55a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d55c:	463b      	mov	r3, r7
 800d55e:	4619      	mov	r1, r3
 800d560:	4872      	ldr	r0, [pc, #456]	; (800d72c <Adc_Init+0x26c>)
 800d562:	f7f8 fedd 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d002      	beq.n	800d572 <Adc_Init+0xb2>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d56c:	486f      	ldr	r0, [pc, #444]	; (800d72c <Adc_Init+0x26c>)
 800d56e:	f7ff fee7 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_12;
 800d572:	230c      	movs	r3, #12
 800d574:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 800d576:	2303      	movs	r3, #3
 800d578:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d57a:	463b      	mov	r3, r7
 800d57c:	4619      	mov	r1, r3
 800d57e:	486b      	ldr	r0, [pc, #428]	; (800d72c <Adc_Init+0x26c>)
 800d580:	f7f8 fece 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <Adc_Init+0xd0>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d58a:	4868      	ldr	r0, [pc, #416]	; (800d72c <Adc_Init+0x26c>)
 800d58c:	f7ff fed8 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_10;
 800d590:	230a      	movs	r3, #10
 800d592:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 800d594:	2304      	movs	r3, #4
 800d596:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d598:	463b      	mov	r3, r7
 800d59a:	4619      	mov	r1, r3
 800d59c:	4863      	ldr	r0, [pc, #396]	; (800d72c <Adc_Init+0x26c>)
 800d59e:	f7f8 febf 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d002      	beq.n	800d5ae <Adc_Init+0xee>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d5a8:	4860      	ldr	r0, [pc, #384]	; (800d72c <Adc_Init+0x26c>)
 800d5aa:	f7ff fec9 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_4;
 800d5ae:	2304      	movs	r3, #4
 800d5b0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 800d5b2:	2305      	movs	r3, #5
 800d5b4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d5b6:	463b      	mov	r3, r7
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	485c      	ldr	r0, [pc, #368]	; (800d72c <Adc_Init+0x26c>)
 800d5bc:	f7f8 feb0 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d002      	beq.n	800d5cc <Adc_Init+0x10c>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d5c6:	4859      	ldr	r0, [pc, #356]	; (800d72c <Adc_Init+0x26c>)
 800d5c8:	f7ff feba 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_5;
 800d5cc:	2305      	movs	r3, #5
 800d5ce:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 800d5d0:	2306      	movs	r3, #6
 800d5d2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d5d4:	463b      	mov	r3, r7
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	4854      	ldr	r0, [pc, #336]	; (800d72c <Adc_Init+0x26c>)
 800d5da:	f7f8 fea1 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d002      	beq.n	800d5ea <Adc_Init+0x12a>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d5e4:	4851      	ldr	r0, [pc, #324]	; (800d72c <Adc_Init+0x26c>)
 800d5e6:	f7ff feab 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_6;
 800d5ea:	2306      	movs	r3, #6
 800d5ec:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 800d5ee:	2307      	movs	r3, #7
 800d5f0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d5f2:	463b      	mov	r3, r7
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	484d      	ldr	r0, [pc, #308]	; (800d72c <Adc_Init+0x26c>)
 800d5f8:	f7f8 fe92 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d002      	beq.n	800d608 <Adc_Init+0x148>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d602:	484a      	ldr	r0, [pc, #296]	; (800d72c <Adc_Init+0x26c>)
 800d604:	f7ff fe9c 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_7;
 800d608:	2307      	movs	r3, #7
 800d60a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 800d60c:	2308      	movs	r3, #8
 800d60e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d610:	463b      	mov	r3, r7
 800d612:	4619      	mov	r1, r3
 800d614:	4845      	ldr	r0, [pc, #276]	; (800d72c <Adc_Init+0x26c>)
 800d616:	f7f8 fe83 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <Adc_Init+0x166>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d620:	4842      	ldr	r0, [pc, #264]	; (800d72c <Adc_Init+0x26c>)
 800d622:	f7ff fe8d 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_8;
 800d626:	2308      	movs	r3, #8
 800d628:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 9;
 800d62a:	2309      	movs	r3, #9
 800d62c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d62e:	463b      	mov	r3, r7
 800d630:	4619      	mov	r1, r3
 800d632:	483e      	ldr	r0, [pc, #248]	; (800d72c <Adc_Init+0x26c>)
 800d634:	f7f8 fe74 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <Adc_Init+0x184>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d63e:	483b      	ldr	r0, [pc, #236]	; (800d72c <Adc_Init+0x26c>)
 800d640:	f7ff fe7e 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_9;
 800d644:	2309      	movs	r3, #9
 800d646:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 10;
 800d648:	230a      	movs	r3, #10
 800d64a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d64c:	463b      	mov	r3, r7
 800d64e:	4619      	mov	r1, r3
 800d650:	4836      	ldr	r0, [pc, #216]	; (800d72c <Adc_Init+0x26c>)
 800d652:	f7f8 fe65 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <Adc_Init+0x1a2>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d65c:	4833      	ldr	r0, [pc, #204]	; (800d72c <Adc_Init+0x26c>)
 800d65e:	f7ff fe6f 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_15;
 800d662:	230f      	movs	r3, #15
 800d664:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 11;
 800d666:	230b      	movs	r3, #11
 800d668:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d66a:	463b      	mov	r3, r7
 800d66c:	4619      	mov	r1, r3
 800d66e:	482f      	ldr	r0, [pc, #188]	; (800d72c <Adc_Init+0x26c>)
 800d670:	f7f8 fe56 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d002      	beq.n	800d680 <Adc_Init+0x1c0>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d67a:	482c      	ldr	r0, [pc, #176]	; (800d72c <Adc_Init+0x26c>)
 800d67c:	f7ff fe60 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_14;
 800d680:	230e      	movs	r3, #14
 800d682:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 12;
 800d684:	230c      	movs	r3, #12
 800d686:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d688:	463b      	mov	r3, r7
 800d68a:	4619      	mov	r1, r3
 800d68c:	4827      	ldr	r0, [pc, #156]	; (800d72c <Adc_Init+0x26c>)
 800d68e:	f7f8 fe47 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d002      	beq.n	800d69e <Adc_Init+0x1de>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d698:	4824      	ldr	r0, [pc, #144]	; (800d72c <Adc_Init+0x26c>)
 800d69a:	f7ff fe51 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_3;
 800d69e:	2303      	movs	r3, #3
 800d6a0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 13;
 800d6a2:	230d      	movs	r3, #13
 800d6a4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d6a6:	463b      	mov	r3, r7
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	4820      	ldr	r0, [pc, #128]	; (800d72c <Adc_Init+0x26c>)
 800d6ac:	f7f8 fe38 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d002      	beq.n	800d6bc <Adc_Init+0x1fc>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d6b6:	481d      	ldr	r0, [pc, #116]	; (800d72c <Adc_Init+0x26c>)
 800d6b8:	f7ff fe42 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_11;
 800d6bc:	230b      	movs	r3, #11
 800d6be:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 14;
 800d6c0:	230e      	movs	r3, #14
 800d6c2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d6c4:	463b      	mov	r3, r7
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4818      	ldr	r0, [pc, #96]	; (800d72c <Adc_Init+0x26c>)
 800d6ca:	f7f8 fe29 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d002      	beq.n	800d6da <Adc_Init+0x21a>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d6d4:	4815      	ldr	r0, [pc, #84]	; (800d72c <Adc_Init+0x26c>)
 800d6d6:	f7ff fe33 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800d6da:	4b17      	ldr	r3, [pc, #92]	; (800d738 <Adc_Init+0x278>)
 800d6dc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 15;
 800d6de:	230f      	movs	r3, #15
 800d6e0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d6e2:	463b      	mov	r3, r7
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	4811      	ldr	r0, [pc, #68]	; (800d72c <Adc_Init+0x26c>)
 800d6e8:	f7f8 fe1a 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d002      	beq.n	800d6f8 <Adc_Init+0x238>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d6f2:	480e      	ldr	r0, [pc, #56]	; (800d72c <Adc_Init+0x26c>)
 800d6f4:	f7ff fe24 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800d6f8:	2311      	movs	r3, #17
 800d6fa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 16;
 800d6fc:	2310      	movs	r3, #16
 800d6fe:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d700:	463b      	mov	r3, r7
 800d702:	4619      	mov	r1, r3
 800d704:	4809      	ldr	r0, [pc, #36]	; (800d72c <Adc_Init+0x26c>)
 800d706:	f7f8 fe0b 	bl	8006320 <HAL_ADC_ConfigChannel>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <Adc_Init+0x256>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d710:	4806      	ldr	r0, [pc, #24]	; (800d72c <Adc_Init+0x26c>)
 800d712:	f7ff fe15 	bl	800d340 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 800d716:	220e      	movs	r2, #14
 800d718:	4908      	ldr	r1, [pc, #32]	; (800d73c <Adc_Init+0x27c>)
 800d71a:	4804      	ldr	r0, [pc, #16]	; (800d72c <Adc_Init+0x26c>)
 800d71c:	f7f8 fcfc 	bl	8006118 <HAL_ADC_Start_DMA>
	return E_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	2000020c 	.word	0x2000020c
 800d730:	40012000 	.word	0x40012000
 800d734:	0f000001 	.word	0x0f000001
 800d738:	10000012 	.word	0x10000012
 800d73c:	200008ec 	.word	0x200008ec

0800d740 <Port_Init>:
/***********************************************************************************
* Function: Port_Init										       				   *
* Description: Initialize the peripheral.									 	   *
************************************************************************************/
StdReturnType Port_Init()
{
 800d740:	b580      	push	{r7, lr}
 800d742:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 800d744:	f7f7 f950 	bl	80049e8 <MX_GPIO_Init>
	return E_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <CanOverSpi_Init>:
/***********************************************************************************
* Function: CanOverSpi_Init									   					   *
* Description: Driver initialization.		 		   							   *
************************************************************************************/
StdReturnType CanOverSpi_Init()
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b088      	sub	sp, #32
 800d752:	af00      	add	r7, sp, #0
	RXF3 RXF3reg;
	RXF4 RXF4reg;
	RXF5 RXF5reg;
	RXM0 RXM0reg;
	RXM1 RXM1reg;
	RXM0reg.RXM0SIDH = 0x00;
 800d754:	2300      	movs	r3, #0
 800d756:	713b      	strb	r3, [r7, #4]
	RXM0reg.RXM0SIDL = 0x00;
 800d758:	2300      	movs	r3, #0
 800d75a:	717b      	strb	r3, [r7, #5]
	RXM0reg.RXM0EID8 = 0x00;
 800d75c:	2300      	movs	r3, #0
 800d75e:	71bb      	strb	r3, [r7, #6]
	RXM0reg.RXM0EID0 = 0x00;
 800d760:	2300      	movs	r3, #0
 800d762:	71fb      	strb	r3, [r7, #7]
	RXM1reg.RXM1SIDH = 0x00;
 800d764:	2300      	movs	r3, #0
 800d766:	703b      	strb	r3, [r7, #0]
	RXM1reg.RXM1SIDL = 0x00;
 800d768:	2300      	movs	r3, #0
 800d76a:	707b      	strb	r3, [r7, #1]
	RXM1reg.RXM1EID8 = 0x00;
 800d76c:	2300      	movs	r3, #0
 800d76e:	70bb      	strb	r3, [r7, #2]
	RXM1reg.RXM1EID0 = 0x00;
 800d770:	2300      	movs	r3, #0
 800d772:	70fb      	strb	r3, [r7, #3]
	RXF0reg.RXF0SIDH = 0x00;
 800d774:	2300      	movs	r3, #0
 800d776:	773b      	strb	r3, [r7, #28]
	RXF0reg.RXF0SIDL = 0x00;
 800d778:	2300      	movs	r3, #0
 800d77a:	777b      	strb	r3, [r7, #29]
	RXF0reg.RXF0EID8 = 0x00;
 800d77c:	2300      	movs	r3, #0
 800d77e:	77bb      	strb	r3, [r7, #30]
	RXF0reg.RXF0EID0 = 0x00;
 800d780:	2300      	movs	r3, #0
 800d782:	77fb      	strb	r3, [r7, #31]
	RXF1reg.RXF1SIDH = 0x00;
 800d784:	2300      	movs	r3, #0
 800d786:	763b      	strb	r3, [r7, #24]
	RXF1reg.RXF1SIDL = 0x08;
 800d788:	2308      	movs	r3, #8
 800d78a:	767b      	strb	r3, [r7, #25]
	RXF1reg.RXF1EID8 = 0x00;
 800d78c:	2300      	movs	r3, #0
 800d78e:	76bb      	strb	r3, [r7, #26]
	RXF1reg.RXF1EID0 = 0x00;
 800d790:	2300      	movs	r3, #0
 800d792:	76fb      	strb	r3, [r7, #27]
	RXF2reg.RXF2SIDH = 0x00;
 800d794:	2300      	movs	r3, #0
 800d796:	753b      	strb	r3, [r7, #20]
	RXF2reg.RXF2SIDL = 0x00;
 800d798:	2300      	movs	r3, #0
 800d79a:	757b      	strb	r3, [r7, #21]
	RXF2reg.RXF2EID8 = 0x00;
 800d79c:	2300      	movs	r3, #0
 800d79e:	75bb      	strb	r3, [r7, #22]
	RXF2reg.RXF2EID0 = 0x00;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	75fb      	strb	r3, [r7, #23]
	RXF3reg.RXF3SIDH = 0x00;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	743b      	strb	r3, [r7, #16]
	RXF3reg.RXF3SIDL = 0x00;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	747b      	strb	r3, [r7, #17]
	RXF3reg.RXF3EID8 = 0x00;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	74bb      	strb	r3, [r7, #18]
	RXF3reg.RXF3EID0 = 0x00;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	74fb      	strb	r3, [r7, #19]
	RXF4reg.RXF4SIDH = 0x00;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	733b      	strb	r3, [r7, #12]
	RXF4reg.RXF4SIDL = 0x00;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	737b      	strb	r3, [r7, #13]
	RXF4reg.RXF4EID8 = 0x00;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	73bb      	strb	r3, [r7, #14]
	RXF4reg.RXF4EID0 = 0x00;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	73fb      	strb	r3, [r7, #15]
	RXF5reg.RXF5SIDH = 0x00;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	723b      	strb	r3, [r7, #8]
	RXF5reg.RXF5SIDL = 0x08;
 800d7c8:	2308      	movs	r3, #8
 800d7ca:	727b      	strb	r3, [r7, #9]
	RXF5reg.RXF5EID8 = 0x00;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	72bb      	strb	r3, [r7, #10]
	RXF5reg.RXF5EID0 = 0x00;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	72fb      	strb	r3, [r7, #11]
	if(MCP2515_CanOverSpi_Initialize() == E_NOT_OK)
 800d7d4:	f000 f862 	bl	800d89c <MCP2515_CanOverSpi_Initialize>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d101      	bne.n	800d7e2 <CanOverSpi_Init+0x94>
	{
		return E_NOT_OK;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e058      	b.n	800d894 <CanOverSpi_Init+0x146>
	else
	{
		/* do nothing */
	}

	if(MCP2515_CanOverSpi_SetConfigMode() == E_NOT_OK)
 800d7e2:	f000 f869 	bl	800d8b8 <MCP2515_CanOverSpi_SetConfigMode>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d101      	bne.n	800d7f0 <CanOverSpi_Init+0xa2>
	{
		return E_NOT_OK;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e051      	b.n	800d894 <CanOverSpi_Init+0x146>
	}
	else
	{
		/* do nothing */
	}
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXM0SIDH, MCP2515_CanOverSpi_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800d7f0:	1d3b      	adds	r3, r7, #4
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	2123      	movs	r1, #35	; 0x23
 800d7f6:	2020      	movs	r0, #32
 800d7f8:	f000 f8ce 	bl	800d998 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXM1SIDH, MCP2515_CanOverSpi_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800d7fc:	463b      	mov	r3, r7
 800d7fe:	461a      	mov	r2, r3
 800d800:	2127      	movs	r1, #39	; 0x27
 800d802:	2024      	movs	r0, #36	; 0x24
 800d804:	f000 f8c8 	bl	800d998 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF0SIDH, MCP2515_CanOverSpi_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800d808:	f107 031c 	add.w	r3, r7, #28
 800d80c:	461a      	mov	r2, r3
 800d80e:	2103      	movs	r1, #3
 800d810:	2000      	movs	r0, #0
 800d812:	f000 f8c1 	bl	800d998 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF1SIDH, MCP2515_CanOverSpi_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800d816:	f107 0318 	add.w	r3, r7, #24
 800d81a:	461a      	mov	r2, r3
 800d81c:	2107      	movs	r1, #7
 800d81e:	2004      	movs	r0, #4
 800d820:	f000 f8ba 	bl	800d998 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF2SIDH, MCP2515_CanOverSpi_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800d824:	f107 0314 	add.w	r3, r7, #20
 800d828:	461a      	mov	r2, r3
 800d82a:	210b      	movs	r1, #11
 800d82c:	2008      	movs	r0, #8
 800d82e:	f000 f8b3 	bl	800d998 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF3SIDH, MCP2515_CanOverSpi_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800d832:	f107 0310 	add.w	r3, r7, #16
 800d836:	461a      	mov	r2, r3
 800d838:	2113      	movs	r1, #19
 800d83a:	2010      	movs	r0, #16
 800d83c:	f000 f8ac 	bl	800d998 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF4SIDH, MCP2515_CanOverSpi_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800d840:	f107 030c 	add.w	r3, r7, #12
 800d844:	461a      	mov	r2, r3
 800d846:	2117      	movs	r1, #23
 800d848:	2014      	movs	r0, #20
 800d84a:	f000 f8a5 	bl	800d998 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF5SIDH, MCP2515_CanOverSpi_RXF5EID0, &(RXF5reg.RXF5SIDH));
 800d84e:	f107 0308 	add.w	r3, r7, #8
 800d852:	461a      	mov	r2, r3
 800d854:	211b      	movs	r1, #27
 800d856:	2018      	movs	r0, #24
 800d858:	f000 f89e 	bl	800d998 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_RXB0CTRL, 0x04);
 800d85c:	2104      	movs	r1, #4
 800d85e:	2060      	movs	r0, #96	; 0x60
 800d860:	f000 f874 	bl	800d94c <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_RXB1CTRL, 0x00);
 800d864:	2100      	movs	r1, #0
 800d866:	2070      	movs	r0, #112	; 0x70
 800d868:	f000 f870 	bl	800d94c <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF1, 0x00);
 800d86c:	2100      	movs	r1, #0
 800d86e:	202a      	movs	r0, #42	; 0x2a
 800d870:	f000 f86c 	bl	800d94c <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF2, 0x90);
 800d874:	2190      	movs	r1, #144	; 0x90
 800d876:	2029      	movs	r0, #41	; 0x29
 800d878:	f000 f868 	bl	800d94c <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF3, 0x02);
 800d87c:	2102      	movs	r1, #2
 800d87e:	2028      	movs	r0, #40	; 0x28
 800d880:	f000 f864 	bl	800d94c <MCP2515_CanOverSpi_WriteByte>
	if(MCP2515_CanOverSpi_SetNormalMode() == E_NOT_OK)
 800d884:	f000 f82b 	bl	800d8de <MCP2515_CanOverSpi_SetNormalMode>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d101      	bne.n	800d892 <CanOverSpi_Init+0x144>
	{
		return E_NOT_OK;
 800d88e:	2301      	movs	r3, #1
 800d890:	e000      	b.n	800d894 <CanOverSpi_Init+0x146>
	}
	else
	{
		/* do nothing */
	}
	return true;
 800d892:	2301      	movs	r3, #1
}
 800d894:	4618      	mov	r0, r3
 800d896:	3720      	adds	r7, #32
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <MCP2515_CanOverSpi_Initialize>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_Initialize									       *
* Description: Set the CAN CS pin high.		 	   								   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_Initialize()
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_CS_HIGH();
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d8a6:	4803      	ldr	r0, [pc, #12]	; (800d8b4 <MCP2515_CanOverSpi_Initialize+0x18>)
 800d8a8:	f7fa fac6 	bl	8007e38 <HAL_GPIO_WritePin>
//	}
//	else
//	{
//		/* do nothing */
//	}
	return E_NOT_OK;
 800d8ac:	2301      	movs	r3, #1
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	40020000 	.word	0x40020000

0800d8b8 <MCP2515_CanOverSpi_SetConfigMode>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_SetConfigMode									   *
* Description: Set the mode to config.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_SetConfigMode()
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CANCTRL, MODE_CONFIG);
 800d8bc:	2180      	movs	r1, #128	; 0x80
 800d8be:	200f      	movs	r0, #15
 800d8c0:	f000 f844 	bl	800d94c <MCP2515_CanOverSpi_WriteByte>
	if((MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_CANSTAT) & MODE_MASK) == MODE_CONFIG)
 800d8c4:	200e      	movs	r0, #14
 800d8c6:	f000 f81d 	bl	800d904 <MCP2515_CanOverSpi_ReadByte>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d8d0:	2b80      	cmp	r3, #128	; 0x80
 800d8d2:	d101      	bne.n	800d8d8 <MCP2515_CanOverSpi_SetConfigMode+0x20>
	{
		return E_OK;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	e000      	b.n	800d8da <MCP2515_CanOverSpi_SetConfigMode+0x22>
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
 800d8d8:	2301      	movs	r3, #1
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <MCP2515_CanOverSpi_SetNormalMode>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_SetNormalMode									   *
* Description: Set the mode to normal.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_SetNormalMode()
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CANCTRL, MODE_NORMAL);
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	200f      	movs	r0, #15
 800d8e6:	f000 f831 	bl	800d94c <MCP2515_CanOverSpi_WriteByte>
	if((MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_CANSTAT) & MODE_MASK) == MODE_NORMAL)
 800d8ea:	200e      	movs	r0, #14
 800d8ec:	f000 f80a 	bl	800d904 <MCP2515_CanOverSpi_ReadByte>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d101      	bne.n	800d8fe <MCP2515_CanOverSpi_SetNormalMode+0x20>
	{
		return E_OK;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	e000      	b.n	800d900 <MCP2515_CanOverSpi_SetNormalMode+0x22>
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
 800d8fe:	2301      	movs	r3, #1
}
 800d900:	4618      	mov	r0, r3
 800d902:	bd80      	pop	{r7, pc}

0800d904 <MCP2515_CanOverSpi_ReadByte>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_ReadByte											   *
* Description: Read the byte from the bus.		 		   						   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_ReadByte (uint8 address)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	4603      	mov	r3, r0
 800d90c:	71fb      	strb	r3, [r7, #7]
	uint8 retVal;
	MCP2515_CanOverSpi_CS_LOW();
 800d90e:	2201      	movs	r2, #1
 800d910:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d914:	480c      	ldr	r0, [pc, #48]	; (800d948 <MCP2515_CanOverSpi_ReadByte+0x44>)
 800d916:	f7fa fa8f 	bl	8007e38 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_READ);
 800d91a:	2003      	movs	r0, #3
 800d91c:	f000 f868 	bl	800d9f0 <SPI_Tx>
	SPI_Tx(address);
 800d920:	79fb      	ldrb	r3, [r7, #7]
 800d922:	4618      	mov	r0, r3
 800d924:	f000 f864 	bl	800d9f0 <SPI_Tx>
	retVal = SPI_Rx();
 800d928:	f000 f879 	bl	800da1e <SPI_Rx>
 800d92c:	4603      	mov	r3, r0
 800d92e:	73fb      	strb	r3, [r7, #15]
	MCP2515_CanOverSpi_CS_HIGH();
 800d930:	2201      	movs	r2, #1
 800d932:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d936:	4804      	ldr	r0, [pc, #16]	; (800d948 <MCP2515_CanOverSpi_ReadByte+0x44>)
 800d938:	f7fa fa7e 	bl	8007e38 <HAL_GPIO_WritePin>
	return retVal;
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	40020000 	.word	0x40020000

0800d94c <MCP2515_CanOverSpi_WriteByte>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_WriteByte										   *
* Description: Write the byte on the bus.		 		   						   *
************************************************************************************/
VOID MCP2515_CanOverSpi_WriteByte(uint8 address, uint8 data)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	4603      	mov	r3, r0
 800d954:	460a      	mov	r2, r1
 800d956:	71fb      	strb	r3, [r7, #7]
 800d958:	4613      	mov	r3, r2
 800d95a:	71bb      	strb	r3, [r7, #6]
	MCP2515_CanOverSpi_CS_LOW();
 800d95c:	2201      	movs	r2, #1
 800d95e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d962:	480c      	ldr	r0, [pc, #48]	; (800d994 <MCP2515_CanOverSpi_WriteByte+0x48>)
 800d964:	f7fa fa68 	bl	8007e38 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_WRITE);
 800d968:	2002      	movs	r0, #2
 800d96a:	f000 f841 	bl	800d9f0 <SPI_Tx>
	SPI_Tx(address);
 800d96e:	79fb      	ldrb	r3, [r7, #7]
 800d970:	4618      	mov	r0, r3
 800d972:	f000 f83d 	bl	800d9f0 <SPI_Tx>
	SPI_Tx(data);
 800d976:	79bb      	ldrb	r3, [r7, #6]
 800d978:	4618      	mov	r0, r3
 800d97a:	f000 f839 	bl	800d9f0 <SPI_Tx>
	MCP2515_CanOverSpi_CS_HIGH();
 800d97e:	2201      	movs	r2, #1
 800d980:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d984:	4803      	ldr	r0, [pc, #12]	; (800d994 <MCP2515_CanOverSpi_WriteByte+0x48>)
 800d986:	f7fa fa57 	bl	8007e38 <HAL_GPIO_WritePin>
}
 800d98a:	bf00      	nop
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	40020000 	.word	0x40020000

0800d998 <MCP2515_CanOverSpi_WriteByteSequence>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_WriteByteSequence								   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
VOID MCP2515_CanOverSpi_WriteByteSequence(uint8 startAddress, uint8 endAddress, uint8 *data)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	4603      	mov	r3, r0
 800d9a0:	603a      	str	r2, [r7, #0]
 800d9a2:	71fb      	strb	r3, [r7, #7]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	71bb      	strb	r3, [r7, #6]
	MCP2515_CanOverSpi_CS_LOW();
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9ae:	480f      	ldr	r0, [pc, #60]	; (800d9ec <MCP2515_CanOverSpi_WriteByteSequence+0x54>)
 800d9b0:	f7fa fa42 	bl	8007e38 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_WRITE);
 800d9b4:	2002      	movs	r0, #2
 800d9b6:	f000 f81b 	bl	800d9f0 <SPI_Tx>
	SPI_Tx(startAddress);
 800d9ba:	79fb      	ldrb	r3, [r7, #7]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f000 f817 	bl	800d9f0 <SPI_Tx>
	SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800d9c2:	79ba      	ldrb	r2, [r7, #6]
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	1ad3      	subs	r3, r2, r3
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	6838      	ldr	r0, [r7, #0]
 800d9d2:	f000 f818 	bl	800da06 <SPI_TxBuffer>
	MCP2515_CanOverSpi_CS_HIGH();
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9dc:	4803      	ldr	r0, [pc, #12]	; (800d9ec <MCP2515_CanOverSpi_WriteByteSequence+0x54>)
 800d9de:	f7fa fa2b 	bl	8007e38 <HAL_GPIO_WritePin>
}
 800d9e2:	bf00      	nop
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	40020000 	.word	0x40020000

0800d9f0 <SPI_Tx>:
/***********************************************************************************
* Function: SPI_Tx													   		   	   *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC VOID SPI_Tx(uint8 data)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	71fb      	strb	r3, [r7, #7]
	//HAL_SPI_Transmit_IT(SPI_CAN, &data, 1);
}
 800d9fa:	bf00      	nop
 800d9fc:	370c      	adds	r7, #12
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr

0800da06 <SPI_TxBuffer>:
/***********************************************************************************
* Function: SPI_TxBuffer													   	   *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC VOID SPI_TxBuffer(uint8 *buffer, uint8 length)
{
 800da06:	b480      	push	{r7}
 800da08:	b083      	sub	sp, #12
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
 800da0e:	460b      	mov	r3, r1
 800da10:	70fb      	strb	r3, [r7, #3]
	//HAL_SPI_Transmit_IT(SPI_CAN, buffer, length);
}
 800da12:	bf00      	nop
 800da14:	370c      	adds	r7, #12
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr

0800da1e <SPI_Rx>:
/***********************************************************************************
* Function: SPI_Rx													   	           *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC StdReturnType SPI_Rx(VOID)
{
 800da1e:	b480      	push	{r7}
 800da20:	af00      	add	r7, sp, #0
	//uint8 retVal;
	//HAL_SPI_Receive_IT(SPI_CAN, &retVal, 1);
	//return retVal;
	return 0;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <Spi_Init>:
/***********************************************************************************
* Function: Spi_Init											 		 		   *
* Description: Module initialization.					           				   *
************************************************************************************/
StdReturnType Spi_Init()
{
 800da2e:	b480      	push	{r7}
 800da30:	af00      	add	r7, sp, #0
//	}
//	else
//	{
//		/* do nothing */
//	}
	return E_OK;
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
	...

0800da40 <HAL_TIM_IC_CaptureCallback>:
/***********************************************************************************
* Function: HAL_TIM_IC_CaptureCallback										   	   *
* Description: Input capture callback to process information received.		 	   *
************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
	/* If channel 3 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	7f1b      	ldrb	r3, [r3, #28]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	f040 8081 	bne.w	800db54 <HAL_TIM_IC_CaptureCallback+0x114>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelThree == STD_LOW)
 800da52:	4b87      	ldr	r3, [pc, #540]	; (800dc70 <HAL_TIM_IC_CaptureCallback+0x230>)
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d11a      	bne.n	800da90 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800da5a:	2100      	movs	r1, #0
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7fd fe55 	bl	800b70c <HAL_TIM_ReadCapturedValue>
 800da62:	4603      	mov	r3, r0
 800da64:	4a83      	ldr	r2, [pc, #524]	; (800dc74 <HAL_TIM_IC_CaptureCallback+0x234>)
 800da66:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelThree = STD_HIGH;
 800da68:	4b81      	ldr	r3, [pc, #516]	; (800dc70 <HAL_TIM_IC_CaptureCallback+0x230>)
 800da6a:	2201      	movs	r2, #1
 800da6c:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	6a1a      	ldr	r2, [r3, #32]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f022 020a 	bic.w	r2, r2, #10
 800da7c:	621a      	str	r2, [r3, #32]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6a1a      	ldr	r2, [r3, #32]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f042 0202 	orr.w	r2, r2, #2
 800da8c:	621a      	str	r2, [r3, #32]
 800da8e:	e061      	b.n	800db54 <HAL_TIM_IC_CaptureCallback+0x114>
		}/* If the first input capture has been stored. */
		else if(Tim5_InputCaptureFlag_ChannelThree == STD_HIGH)
 800da90:	4b77      	ldr	r3, [pc, #476]	; (800dc70 <HAL_TIM_IC_CaptureCallback+0x230>)
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	2b01      	cmp	r3, #1
 800da96:	d15d      	bne.n	800db54 <HAL_TIM_IC_CaptureCallback+0x114>
		{
			/* Store the second input capture. */
			Tim5_InputCompare_ValueTwo_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800da98:	2100      	movs	r1, #0
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7fd fe36 	bl	800b70c <HAL_TIM_ReadCapturedValue>
 800daa0:	4603      	mov	r3, r0
 800daa2:	4a75      	ldr	r2, [pc, #468]	; (800dc78 <HAL_TIM_IC_CaptureCallback+0x238>)
 800daa4:	6013      	str	r3, [r2, #0]
			/* Set the timer counter to 0. */
			__HAL_TIM_SET_COUNTER(htim, 0);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2200      	movs	r2, #0
 800daac:	625a      	str	r2, [r3, #36]	; 0x24
			/* If the second input capture is greater than the first, then subtract the first one from the second one. */
			if (Tim5_InputCompare_ValueTwo_ChannelThree > Tim5_InputCompare_ValueOne_ChannelThree)
 800daae:	4b72      	ldr	r3, [pc, #456]	; (800dc78 <HAL_TIM_IC_CaptureCallback+0x238>)
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	4b70      	ldr	r3, [pc, #448]	; (800dc74 <HAL_TIM_IC_CaptureCallback+0x234>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d907      	bls.n	800daca <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Tim5_Difference_ChannelThree = Tim5_InputCompare_ValueTwo_ChannelThree - Tim5_InputCompare_ValueOne_ChannelThree;
 800daba:	4b6f      	ldr	r3, [pc, #444]	; (800dc78 <HAL_TIM_IC_CaptureCallback+0x238>)
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	4b6d      	ldr	r3, [pc, #436]	; (800dc74 <HAL_TIM_IC_CaptureCallback+0x234>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	4a6d      	ldr	r2, [pc, #436]	; (800dc7c <HAL_TIM_IC_CaptureCallback+0x23c>)
 800dac6:	6013      	str	r3, [r2, #0]
 800dac8:	e00d      	b.n	800dae6 <HAL_TIM_IC_CaptureCallback+0xa6>
			}/* Else subtract the first value from maximum uint32 value and add the second value. */
			else if(Tim5_InputCompare_ValueOne_ChannelThree > Tim5_InputCompare_ValueTwo_ChannelThree)
 800daca:	4b6a      	ldr	r3, [pc, #424]	; (800dc74 <HAL_TIM_IC_CaptureCallback+0x234>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	4b6a      	ldr	r3, [pc, #424]	; (800dc78 <HAL_TIM_IC_CaptureCallback+0x238>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d907      	bls.n	800dae6 <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Tim5_Difference_ChannelThree = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelThree) + Tim5_InputCompare_ValueTwo_ChannelThree;
 800dad6:	4b68      	ldr	r3, [pc, #416]	; (800dc78 <HAL_TIM_IC_CaptureCallback+0x238>)
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	4b66      	ldr	r3, [pc, #408]	; (800dc74 <HAL_TIM_IC_CaptureCallback+0x234>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	3b01      	subs	r3, #1
 800dae2:	4a66      	ldr	r2, [pc, #408]	; (800dc7c <HAL_TIM_IC_CaptureCallback+0x23c>)
 800dae4:	6013      	str	r3, [r2, #0]
			else
			{
				/* do nothing */
			}
			/* Calculate the distance the sound traveled between the first measurement and the second. */
			Tim5_CalculatedDistance_ChannelThree = Tim5_Difference_ChannelThree * 0.034 / 2;
 800dae6:	4b65      	ldr	r3, [pc, #404]	; (800dc7c <HAL_TIM_IC_CaptureCallback+0x23c>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4618      	mov	r0, r3
 800daec:	f7f2 fd12 	bl	8000514 <__aeabi_ui2d>
 800daf0:	a35d      	add	r3, pc, #372	; (adr r3, 800dc68 <HAL_TIM_IC_CaptureCallback+0x228>)
 800daf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf6:	f7f2 fd87 	bl	8000608 <__aeabi_dmul>
 800dafa:	4602      	mov	r2, r0
 800dafc:	460b      	mov	r3, r1
 800dafe:	4610      	mov	r0, r2
 800db00:	4619      	mov	r1, r3
 800db02:	f04f 0200 	mov.w	r2, #0
 800db06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db0a:	f7f2 fea7 	bl	800085c <__aeabi_ddiv>
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	4610      	mov	r0, r2
 800db14:	4619      	mov	r1, r3
 800db16:	f7f2 ff89 	bl	8000a2c <__aeabi_d2uiz>
 800db1a:	4603      	mov	r3, r0
 800db1c:	b2da      	uxtb	r2, r3
 800db1e:	4b58      	ldr	r3, [pc, #352]	; (800dc80 <HAL_TIM_IC_CaptureCallback+0x240>)
 800db20:	701a      	strb	r2, [r3, #0]
			/* Set the flag to low. */
			Tim5_InputCaptureFlag_ChannelThree = STD_LOW;
 800db22:	4b53      	ldr	r3, [pc, #332]	; (800dc70 <HAL_TIM_IC_CaptureCallback+0x230>)
 800db24:	2200      	movs	r2, #0
 800db26:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	6a1a      	ldr	r2, [r3, #32]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f022 020a 	bic.w	r2, r2, #10
 800db36:	621a      	str	r2, [r3, #32]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	6a12      	ldr	r2, [r2, #32]
 800db42:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt for the timer 5 channel 3. */
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 800db44:	4b4f      	ldr	r3, [pc, #316]	; (800dc84 <HAL_TIM_IC_CaptureCallback+0x244>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	68da      	ldr	r2, [r3, #12]
 800db4a:	4b4e      	ldr	r3, [pc, #312]	; (800dc84 <HAL_TIM_IC_CaptureCallback+0x244>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f022 0202 	bic.w	r2, r2, #2
 800db52:	60da      	str	r2, [r3, #12]
		{
			/* do nothing */
		}
	}/* If channel 4 requests. */

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	7f1b      	ldrb	r3, [r3, #28]
 800db58:	2b02      	cmp	r3, #2
 800db5a:	f040 8081 	bne.w	800dc60 <HAL_TIM_IC_CaptureCallback+0x220>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelFour == STD_LOW)
 800db5e:	4b4a      	ldr	r3, [pc, #296]	; (800dc88 <HAL_TIM_IC_CaptureCallback+0x248>)
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d11a      	bne.n	800db9c <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800db66:	2104      	movs	r1, #4
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7fd fdcf 	bl	800b70c <HAL_TIM_ReadCapturedValue>
 800db6e:	4603      	mov	r3, r0
 800db70:	4a46      	ldr	r2, [pc, #280]	; (800dc8c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800db72:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelFour = STD_HIGH;
 800db74:	4b44      	ldr	r3, [pc, #272]	; (800dc88 <HAL_TIM_IC_CaptureCallback+0x248>)
 800db76:	2201      	movs	r2, #1
 800db78:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6a1a      	ldr	r2, [r3, #32]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800db88:	621a      	str	r2, [r3, #32]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	6a1a      	ldr	r2, [r3, #32]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f042 0220 	orr.w	r2, r2, #32
 800db98:	621a      	str	r2, [r3, #32]
	}
	else
	{
		/* do nothing */
	}
}
 800db9a:	e061      	b.n	800dc60 <HAL_TIM_IC_CaptureCallback+0x220>
		else if(Tim5_InputCaptureFlag_ChannelFour == STD_HIGH)
 800db9c:	4b3a      	ldr	r3, [pc, #232]	; (800dc88 <HAL_TIM_IC_CaptureCallback+0x248>)
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d15d      	bne.n	800dc60 <HAL_TIM_IC_CaptureCallback+0x220>
			Tim5_InputCompare_ValueTwo_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800dba4:	2104      	movs	r1, #4
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7fd fdb0 	bl	800b70c <HAL_TIM_ReadCapturedValue>
 800dbac:	4603      	mov	r3, r0
 800dbae:	4a38      	ldr	r2, [pc, #224]	; (800dc90 <HAL_TIM_IC_CaptureCallback+0x250>)
 800dbb0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	625a      	str	r2, [r3, #36]	; 0x24
			if (Tim5_InputCompare_ValueTwo_ChannelFour > Tim5_InputCompare_ValueOne_ChannelFour)
 800dbba:	4b35      	ldr	r3, [pc, #212]	; (800dc90 <HAL_TIM_IC_CaptureCallback+0x250>)
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	4b33      	ldr	r3, [pc, #204]	; (800dc8c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d907      	bls.n	800dbd6 <HAL_TIM_IC_CaptureCallback+0x196>
				Tim5_Difference_ChannelFour = Tim5_InputCompare_ValueTwo_ChannelFour - Tim5_InputCompare_ValueOne_ChannelFour;
 800dbc6:	4b32      	ldr	r3, [pc, #200]	; (800dc90 <HAL_TIM_IC_CaptureCallback+0x250>)
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	4b30      	ldr	r3, [pc, #192]	; (800dc8c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	1ad3      	subs	r3, r2, r3
 800dbd0:	4a30      	ldr	r2, [pc, #192]	; (800dc94 <HAL_TIM_IC_CaptureCallback+0x254>)
 800dbd2:	6013      	str	r3, [r2, #0]
 800dbd4:	e00d      	b.n	800dbf2 <HAL_TIM_IC_CaptureCallback+0x1b2>
			else if(Tim5_InputCompare_ValueOne_ChannelFour > Tim5_InputCompare_ValueTwo_ChannelFour)
 800dbd6:	4b2d      	ldr	r3, [pc, #180]	; (800dc8c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	4b2d      	ldr	r3, [pc, #180]	; (800dc90 <HAL_TIM_IC_CaptureCallback+0x250>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d907      	bls.n	800dbf2 <HAL_TIM_IC_CaptureCallback+0x1b2>
				Tim5_Difference_ChannelFour = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelFour) + Tim5_InputCompare_ValueTwo_ChannelFour;
 800dbe2:	4b2b      	ldr	r3, [pc, #172]	; (800dc90 <HAL_TIM_IC_CaptureCallback+0x250>)
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	4b29      	ldr	r3, [pc, #164]	; (800dc8c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	1ad3      	subs	r3, r2, r3
 800dbec:	3b01      	subs	r3, #1
 800dbee:	4a29      	ldr	r2, [pc, #164]	; (800dc94 <HAL_TIM_IC_CaptureCallback+0x254>)
 800dbf0:	6013      	str	r3, [r2, #0]
			Tim5_CalculatedDistance_ChannelFour = Tim5_Difference_ChannelFour * 0.034 / 2;
 800dbf2:	4b28      	ldr	r3, [pc, #160]	; (800dc94 <HAL_TIM_IC_CaptureCallback+0x254>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7f2 fc8c 	bl	8000514 <__aeabi_ui2d>
 800dbfc:	a31a      	add	r3, pc, #104	; (adr r3, 800dc68 <HAL_TIM_IC_CaptureCallback+0x228>)
 800dbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc02:	f7f2 fd01 	bl	8000608 <__aeabi_dmul>
 800dc06:	4602      	mov	r2, r0
 800dc08:	460b      	mov	r3, r1
 800dc0a:	4610      	mov	r0, r2
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	f04f 0200 	mov.w	r2, #0
 800dc12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc16:	f7f2 fe21 	bl	800085c <__aeabi_ddiv>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	4610      	mov	r0, r2
 800dc20:	4619      	mov	r1, r3
 800dc22:	f7f2 ff03 	bl	8000a2c <__aeabi_d2uiz>
 800dc26:	4603      	mov	r3, r0
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	4b1b      	ldr	r3, [pc, #108]	; (800dc98 <HAL_TIM_IC_CaptureCallback+0x258>)
 800dc2c:	701a      	strb	r2, [r3, #0]
			Tim5_InputCaptureFlag_ChannelFour = 0;
 800dc2e:	4b16      	ldr	r3, [pc, #88]	; (800dc88 <HAL_TIM_IC_CaptureCallback+0x248>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	6a1a      	ldr	r2, [r3, #32]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dc42:	621a      	str	r2, [r3, #32]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6a12      	ldr	r2, [r2, #32]
 800dc4e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 800dc50:	4b0c      	ldr	r3, [pc, #48]	; (800dc84 <HAL_TIM_IC_CaptureCallback+0x244>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	68da      	ldr	r2, [r3, #12]
 800dc56:	4b0b      	ldr	r3, [pc, #44]	; (800dc84 <HAL_TIM_IC_CaptureCallback+0x244>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f022 0204 	bic.w	r2, r2, #4
 800dc5e:	60da      	str	r2, [r3, #12]
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	b020c49c 	.word	0xb020c49c
 800dc6c:	3fa16872 	.word	0x3fa16872
 800dc70:	20000934 	.word	0x20000934
 800dc74:	20000928 	.word	0x20000928
 800dc78:	2000092c 	.word	0x2000092c
 800dc7c:	20000930 	.word	0x20000930
 800dc80:	20000935 	.word	0x20000935
 800dc84:	2000075c 	.word	0x2000075c
 800dc88:	20000944 	.word	0x20000944
 800dc8c:	20000938 	.word	0x20000938
 800dc90:	2000093c 	.word	0x2000093c
 800dc94:	20000940 	.word	0x20000940
 800dc98:	20000945 	.word	0x20000945

0800dc9c <Tim_Init>:
/***********************************************************************************
* Function: Tim_Init										   			           *
* Description: Peripheral initialization.									       *
************************************************************************************/
StdReturnType Tim_Init(uint8 TimerChannel)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	4603      	mov	r3, r0
 800dca4:	71fb      	strb	r3, [r7, #7]
	/* Set the timer channel value into a local variable. */
	uint8 localValue = TimerChannel;
 800dca6:	79fb      	ldrb	r3, [r7, #7]
 800dca8:	73fb      	strb	r3, [r7, #15]
	switch(localValue)
 800dcaa:	7bfb      	ldrb	r3, [r7, #15]
 800dcac:	3b02      	subs	r3, #2
 800dcae:	2b03      	cmp	r3, #3
 800dcb0:	f200 81f4 	bhi.w	800e09c <Tim_Init+0x400>
 800dcb4:	a201      	add	r2, pc, #4	; (adr r2, 800dcbc <Tim_Init+0x20>)
 800dcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcba:	bf00      	nop
 800dcbc:	0800dccd 	.word	0x0800dccd
 800dcc0:	0800ddb9 	.word	0x0800ddb9
 800dcc4:	0800dedd 	.word	0x0800dedd
 800dcc8:	0800dfb3 	.word	0x0800dfb3
	{
		/* Initialize the timer two. */
		case TIMER_TWO:
			/* Configure the timer parameters. */
			htim2.Instance = TIM2;
 800dccc:	4b7a      	ldr	r3, [pc, #488]	; (800deb8 <Tim_Init+0x21c>)
 800dcce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dcd2:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 1000-1;
 800dcd4:	4b78      	ldr	r3, [pc, #480]	; (800deb8 <Tim_Init+0x21c>)
 800dcd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dcda:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dcdc:	4b76      	ldr	r3, [pc, #472]	; (800deb8 <Tim_Init+0x21c>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 2000-1;
 800dce2:	4b75      	ldr	r3, [pc, #468]	; (800deb8 <Tim_Init+0x21c>)
 800dce4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800dce8:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dcea:	4b73      	ldr	r3, [pc, #460]	; (800deb8 <Tim_Init+0x21c>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dcf0:	4b71      	ldr	r3, [pc, #452]	; (800deb8 <Tim_Init+0x21c>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800dcf6:	4870      	ldr	r0, [pc, #448]	; (800deb8 <Tim_Init+0x21c>)
 800dcf8:	f7fc fd66 	bl	800a7c8 <HAL_TIM_Base_Init>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d002      	beq.n	800dd08 <Tim_Init+0x6c>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800dd02:	486d      	ldr	r0, [pc, #436]	; (800deb8 <Tim_Init+0x21c>)
 800dd04:	f000 fa1c 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the timer clock source. */
			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dd08:	4b6c      	ldr	r3, [pc, #432]	; (800debc <Tim_Init+0x220>)
 800dd0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dd0e:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 800dd10:	496a      	ldr	r1, [pc, #424]	; (800debc <Tim_Init+0x220>)
 800dd12:	4869      	ldr	r0, [pc, #420]	; (800deb8 <Tim_Init+0x21c>)
 800dd14:	f7fd fc32 	bl	800b57c <HAL_TIM_ConfigClockSource>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d002      	beq.n	800dd24 <Tim_Init+0x88>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800dd1e:	4866      	ldr	r0, [pc, #408]	; (800deb8 <Tim_Init+0x21c>)
 800dd20:	f000 fa0e 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dd24:	4864      	ldr	r0, [pc, #400]	; (800deb8 <Tim_Init+0x21c>)
 800dd26:	f7fc fe0d 	bl	800a944 <HAL_TIM_PWM_Init>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d002      	beq.n	800dd36 <Tim_Init+0x9a>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800dd30:	4861      	ldr	r0, [pc, #388]	; (800deb8 <Tim_Init+0x21c>)
 800dd32:	f000 fa05 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the master slave mode and output trigger. */
			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd36:	4b62      	ldr	r3, [pc, #392]	; (800dec0 <Tim_Init+0x224>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd3c:	4b60      	ldr	r3, [pc, #384]	; (800dec0 <Tim_Init+0x224>)
 800dd3e:	2200      	movs	r2, #0
 800dd40:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 800dd42:	495f      	ldr	r1, [pc, #380]	; (800dec0 <Tim_Init+0x224>)
 800dd44:	485c      	ldr	r0, [pc, #368]	; (800deb8 <Tim_Init+0x21c>)
 800dd46:	f7fe f9bb 	bl	800c0c0 <HAL_TIMEx_MasterConfigSynchronization>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d002      	beq.n	800dd56 <Tim_Init+0xba>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800dd50:	4859      	ldr	r0, [pc, #356]	; (800deb8 <Tim_Init+0x21c>)
 800dd52:	f000 f9f5 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the PWM parameters. */
			sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 800dd56:	4b5b      	ldr	r3, [pc, #364]	; (800dec4 <Tim_Init+0x228>)
 800dd58:	2260      	movs	r2, #96	; 0x60
 800dd5a:	601a      	str	r2, [r3, #0]
			sConfigOC2.Pulse = 0;
 800dd5c:	4b59      	ldr	r3, [pc, #356]	; (800dec4 <Tim_Init+0x228>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	605a      	str	r2, [r3, #4]
			sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dd62:	4b58      	ldr	r3, [pc, #352]	; (800dec4 <Tim_Init+0x228>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	609a      	str	r2, [r3, #8]
			sConfigOC2.OCFastMode = TIM_OCFAST_ENABLE;
 800dd68:	4b56      	ldr	r3, [pc, #344]	; (800dec4 <Tim_Init+0x228>)
 800dd6a:	2204      	movs	r2, #4
 800dd6c:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_1) != HAL_OK)
 800dd6e:	2200      	movs	r2, #0
 800dd70:	4954      	ldr	r1, [pc, #336]	; (800dec4 <Tim_Init+0x228>)
 800dd72:	4851      	ldr	r0, [pc, #324]	; (800deb8 <Tim_Init+0x21c>)
 800dd74:	f7fd fb40 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d002      	beq.n	800dd84 <Tim_Init+0xe8>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800dd7e:	484e      	ldr	r0, [pc, #312]	; (800deb8 <Tim_Init+0x21c>)
 800dd80:	f000 f9de 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 800dd84:	2204      	movs	r2, #4
 800dd86:	494f      	ldr	r1, [pc, #316]	; (800dec4 <Tim_Init+0x228>)
 800dd88:	484b      	ldr	r0, [pc, #300]	; (800deb8 <Tim_Init+0x21c>)
 800dd8a:	f7fd fb35 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d002      	beq.n	800dd9a <Tim_Init+0xfe>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800dd94:	4848      	ldr	r0, [pc, #288]	; (800deb8 <Tim_Init+0x21c>)
 800dd96:	f000 f9d3 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_3) != HAL_OK)
 800dd9a:	2208      	movs	r2, #8
 800dd9c:	4949      	ldr	r1, [pc, #292]	; (800dec4 <Tim_Init+0x228>)
 800dd9e:	4846      	ldr	r0, [pc, #280]	; (800deb8 <Tim_Init+0x21c>)
 800dda0:	f7fd fb2a 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d002      	beq.n	800ddb0 <Tim_Init+0x114>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800ddaa:	4843      	ldr	r0, [pc, #268]	; (800deb8 <Tim_Init+0x21c>)
 800ddac:	f000 f9c8 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the GPIO. */
			HAL_TIM_MspPostInit(&htim2);
 800ddb0:	4841      	ldr	r0, [pc, #260]	; (800deb8 <Tim_Init+0x21c>)
 800ddb2:	f7f7 faf9 	bl	80053a8 <HAL_TIM_MspPostInit>

			break;
 800ddb6:	e174      	b.n	800e0a2 <Tim_Init+0x406>
		/* Initialize the timer three. */
		case TIMER_THREE:
			/* Configure the timer parameters. */
			htim3.Instance = TIM3;
 800ddb8:	4b43      	ldr	r3, [pc, #268]	; (800dec8 <Tim_Init+0x22c>)
 800ddba:	4a44      	ldr	r2, [pc, #272]	; (800decc <Tim_Init+0x230>)
 800ddbc:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 1000-1;
 800ddbe:	4b42      	ldr	r3, [pc, #264]	; (800dec8 <Tim_Init+0x22c>)
 800ddc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ddc4:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ddc6:	4b40      	ldr	r3, [pc, #256]	; (800dec8 <Tim_Init+0x22c>)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 2000-1;
 800ddcc:	4b3e      	ldr	r3, [pc, #248]	; (800dec8 <Tim_Init+0x22c>)
 800ddce:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800ddd2:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ddd4:	4b3c      	ldr	r3, [pc, #240]	; (800dec8 <Tim_Init+0x22c>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ddda:	4b3b      	ldr	r3, [pc, #236]	; (800dec8 <Tim_Init+0x22c>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800dde0:	4839      	ldr	r0, [pc, #228]	; (800dec8 <Tim_Init+0x22c>)
 800dde2:	f7fc fcf1 	bl	800a7c8 <HAL_TIM_Base_Init>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <Tim_Init+0x156>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800ddec:	4836      	ldr	r0, [pc, #216]	; (800dec8 <Tim_Init+0x22c>)
 800ddee:	f000 f9a7 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Set the clock source. */
			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ddf2:	4b37      	ldr	r3, [pc, #220]	; (800ded0 <Tim_Init+0x234>)
 800ddf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ddf8:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 800ddfa:	4935      	ldr	r1, [pc, #212]	; (800ded0 <Tim_Init+0x234>)
 800ddfc:	4832      	ldr	r0, [pc, #200]	; (800dec8 <Tim_Init+0x22c>)
 800ddfe:	f7fd fbbd 	bl	800b57c <HAL_TIM_ConfigClockSource>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <Tim_Init+0x172>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800de08:	482f      	ldr	r0, [pc, #188]	; (800dec8 <Tim_Init+0x22c>)
 800de0a:	f000 f999 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800de0e:	482e      	ldr	r0, [pc, #184]	; (800dec8 <Tim_Init+0x22c>)
 800de10:	f7fc fd98 	bl	800a944 <HAL_TIM_PWM_Init>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d002      	beq.n	800de20 <Tim_Init+0x184>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800de1a:	482b      	ldr	r0, [pc, #172]	; (800dec8 <Tim_Init+0x22c>)
 800de1c:	f000 f990 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure master slave mode. */
			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 800de20:	4b2c      	ldr	r3, [pc, #176]	; (800ded4 <Tim_Init+0x238>)
 800de22:	2200      	movs	r2, #0
 800de24:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de26:	4b2b      	ldr	r3, [pc, #172]	; (800ded4 <Tim_Init+0x238>)
 800de28:	2200      	movs	r2, #0
 800de2a:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 800de2c:	4929      	ldr	r1, [pc, #164]	; (800ded4 <Tim_Init+0x238>)
 800de2e:	4826      	ldr	r0, [pc, #152]	; (800dec8 <Tim_Init+0x22c>)
 800de30:	f7fe f946 	bl	800c0c0 <HAL_TIMEx_MasterConfigSynchronization>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d002      	beq.n	800de40 <Tim_Init+0x1a4>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800de3a:	4823      	ldr	r0, [pc, #140]	; (800dec8 <Tim_Init+0x22c>)
 800de3c:	f000 f980 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure PWM parameters. */
			sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 800de40:	4b25      	ldr	r3, [pc, #148]	; (800ded8 <Tim_Init+0x23c>)
 800de42:	2260      	movs	r2, #96	; 0x60
 800de44:	601a      	str	r2, [r3, #0]
			sConfigOC3.Pulse = 0;
 800de46:	4b24      	ldr	r3, [pc, #144]	; (800ded8 <Tim_Init+0x23c>)
 800de48:	2200      	movs	r2, #0
 800de4a:	605a      	str	r2, [r3, #4]
			sConfigOC3.OCPolarity = TIM_OCPOLARITY_HIGH;
 800de4c:	4b22      	ldr	r3, [pc, #136]	; (800ded8 <Tim_Init+0x23c>)
 800de4e:	2200      	movs	r2, #0
 800de50:	609a      	str	r2, [r3, #8]
			sConfigOC3.OCFastMode = TIM_OCFAST_ENABLE;
 800de52:	4b21      	ldr	r3, [pc, #132]	; (800ded8 <Tim_Init+0x23c>)
 800de54:	2204      	movs	r2, #4
 800de56:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_1) != HAL_OK)
 800de58:	2200      	movs	r2, #0
 800de5a:	491f      	ldr	r1, [pc, #124]	; (800ded8 <Tim_Init+0x23c>)
 800de5c:	481a      	ldr	r0, [pc, #104]	; (800dec8 <Tim_Init+0x22c>)
 800de5e:	f7fd facb 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d002      	beq.n	800de6e <Tim_Init+0x1d2>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800de68:	4817      	ldr	r0, [pc, #92]	; (800dec8 <Tim_Init+0x22c>)
 800de6a:	f000 f969 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_2) != HAL_OK)
 800de6e:	2204      	movs	r2, #4
 800de70:	4919      	ldr	r1, [pc, #100]	; (800ded8 <Tim_Init+0x23c>)
 800de72:	4815      	ldr	r0, [pc, #84]	; (800dec8 <Tim_Init+0x22c>)
 800de74:	f7fd fac0 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d002      	beq.n	800de84 <Tim_Init+0x1e8>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800de7e:	4812      	ldr	r0, [pc, #72]	; (800dec8 <Tim_Init+0x22c>)
 800de80:	f000 f95e 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 800de84:	2208      	movs	r2, #8
 800de86:	4914      	ldr	r1, [pc, #80]	; (800ded8 <Tim_Init+0x23c>)
 800de88:	480f      	ldr	r0, [pc, #60]	; (800dec8 <Tim_Init+0x22c>)
 800de8a:	f7fd fab5 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d002      	beq.n	800de9a <Tim_Init+0x1fe>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800de94:	480c      	ldr	r0, [pc, #48]	; (800dec8 <Tim_Init+0x22c>)
 800de96:	f000 f953 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_4) != HAL_OK)
 800de9a:	220c      	movs	r2, #12
 800de9c:	490e      	ldr	r1, [pc, #56]	; (800ded8 <Tim_Init+0x23c>)
 800de9e:	480a      	ldr	r0, [pc, #40]	; (800dec8 <Tim_Init+0x22c>)
 800dea0:	f7fd faaa 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d002      	beq.n	800deb0 <Tim_Init+0x214>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800deaa:	4807      	ldr	r0, [pc, #28]	; (800dec8 <Tim_Init+0x22c>)
 800deac:	f000 f948 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure timer GPIO. */
			HAL_TIM_MspPostInit(&htim3);
 800deb0:	4805      	ldr	r0, [pc, #20]	; (800dec8 <Tim_Init+0x22c>)
 800deb2:	f7f7 fa79 	bl	80053a8 <HAL_TIM_MspPostInit>
			break;
 800deb6:	e0f4      	b.n	800e0a2 <Tim_Init+0x406>
 800deb8:	20000540 	.word	0x20000540
 800debc:	20000948 	.word	0x20000948
 800dec0:	20000958 	.word	0x20000958
 800dec4:	20000960 	.word	0x20000960
 800dec8:	200005f4 	.word	0x200005f4
 800decc:	40000400 	.word	0x40000400
 800ded0:	200009b4 	.word	0x200009b4
 800ded4:	200009c4 	.word	0x200009c4
 800ded8:	2000097c 	.word	0x2000097c
		/* Initialize the timer four. */
		case TIMER_FOUR:
			/* Configure timer parameters. */
			htim4.Instance = TIM4;
 800dedc:	4b73      	ldr	r3, [pc, #460]	; (800e0ac <Tim_Init+0x410>)
 800dede:	4a74      	ldr	r2, [pc, #464]	; (800e0b0 <Tim_Init+0x414>)
 800dee0:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 800dee2:	4b72      	ldr	r3, [pc, #456]	; (800e0ac <Tim_Init+0x410>)
 800dee4:	f242 720f 	movw	r2, #9999	; 0x270f
 800dee8:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800deea:	4b70      	ldr	r3, [pc, #448]	; (800e0ac <Tim_Init+0x410>)
 800deec:	2200      	movs	r2, #0
 800deee:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 1000-1;
 800def0:	4b6e      	ldr	r3, [pc, #440]	; (800e0ac <Tim_Init+0x410>)
 800def2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800def6:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800def8:	4b6c      	ldr	r3, [pc, #432]	; (800e0ac <Tim_Init+0x410>)
 800defa:	2200      	movs	r2, #0
 800defc:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800defe:	4b6b      	ldr	r3, [pc, #428]	; (800e0ac <Tim_Init+0x410>)
 800df00:	2200      	movs	r2, #0
 800df02:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800df04:	4869      	ldr	r0, [pc, #420]	; (800e0ac <Tim_Init+0x410>)
 800df06:	f7fc fc5f 	bl	800a7c8 <HAL_TIM_Base_Init>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <Tim_Init+0x27a>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800df10:	4866      	ldr	r0, [pc, #408]	; (800e0ac <Tim_Init+0x410>)
 800df12:	f000 f915 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the clock source. */
			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800df16:	4b67      	ldr	r3, [pc, #412]	; (800e0b4 <Tim_Init+0x418>)
 800df18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800df1c:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 800df1e:	4965      	ldr	r1, [pc, #404]	; (800e0b4 <Tim_Init+0x418>)
 800df20:	4862      	ldr	r0, [pc, #392]	; (800e0ac <Tim_Init+0x410>)
 800df22:	f7fd fb2b 	bl	800b57c <HAL_TIM_ConfigClockSource>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d002      	beq.n	800df32 <Tim_Init+0x296>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800df2c:	485f      	ldr	r0, [pc, #380]	; (800e0ac <Tim_Init+0x410>)
 800df2e:	f000 f907 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800df32:	485e      	ldr	r0, [pc, #376]	; (800e0ac <Tim_Init+0x410>)
 800df34:	f7fc fd06 	bl	800a944 <HAL_TIM_PWM_Init>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d002      	beq.n	800df44 <Tim_Init+0x2a8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800df3e:	485b      	ldr	r0, [pc, #364]	; (800e0ac <Tim_Init+0x410>)
 800df40:	f000 f8fe 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the master slave mode. */
			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 800df44:	4b5c      	ldr	r3, [pc, #368]	; (800e0b8 <Tim_Init+0x41c>)
 800df46:	2200      	movs	r2, #0
 800df48:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df4a:	4b5b      	ldr	r3, [pc, #364]	; (800e0b8 <Tim_Init+0x41c>)
 800df4c:	2200      	movs	r2, #0
 800df4e:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 800df50:	4959      	ldr	r1, [pc, #356]	; (800e0b8 <Tim_Init+0x41c>)
 800df52:	4856      	ldr	r0, [pc, #344]	; (800e0ac <Tim_Init+0x410>)
 800df54:	f7fe f8b4 	bl	800c0c0 <HAL_TIMEx_MasterConfigSynchronization>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d002      	beq.n	800df64 <Tim_Init+0x2c8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800df5e:	4853      	ldr	r0, [pc, #332]	; (800e0ac <Tim_Init+0x410>)
 800df60:	f000 f8ee 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the PWM parameters. */
			sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 800df64:	4b55      	ldr	r3, [pc, #340]	; (800e0bc <Tim_Init+0x420>)
 800df66:	2260      	movs	r2, #96	; 0x60
 800df68:	601a      	str	r2, [r3, #0]
			sConfigOC4.Pulse = 999;
 800df6a:	4b54      	ldr	r3, [pc, #336]	; (800e0bc <Tim_Init+0x420>)
 800df6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800df70:	605a      	str	r2, [r3, #4]
			sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 800df72:	4b52      	ldr	r3, [pc, #328]	; (800e0bc <Tim_Init+0x420>)
 800df74:	2200      	movs	r2, #0
 800df76:	609a      	str	r2, [r3, #8]
			sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 800df78:	4b50      	ldr	r3, [pc, #320]	; (800e0bc <Tim_Init+0x420>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_3) != HAL_OK)
 800df7e:	2208      	movs	r2, #8
 800df80:	494e      	ldr	r1, [pc, #312]	; (800e0bc <Tim_Init+0x420>)
 800df82:	484a      	ldr	r0, [pc, #296]	; (800e0ac <Tim_Init+0x410>)
 800df84:	f7fd fa38 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <Tim_Init+0x2f8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800df8e:	4847      	ldr	r0, [pc, #284]	; (800e0ac <Tim_Init+0x410>)
 800df90:	f000 f8d6 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 800df94:	220c      	movs	r2, #12
 800df96:	4949      	ldr	r1, [pc, #292]	; (800e0bc <Tim_Init+0x420>)
 800df98:	4844      	ldr	r0, [pc, #272]	; (800e0ac <Tim_Init+0x410>)
 800df9a:	f7fd fa2d 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d002      	beq.n	800dfaa <Tim_Init+0x30e>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800dfa4:	4841      	ldr	r0, [pc, #260]	; (800e0ac <Tim_Init+0x410>)
 800dfa6:	f000 f8cb 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the timer GPIO. */
			HAL_TIM_MspPostInit(&htim4);
 800dfaa:	4840      	ldr	r0, [pc, #256]	; (800e0ac <Tim_Init+0x410>)
 800dfac:	f7f7 f9fc 	bl	80053a8 <HAL_TIM_MspPostInit>
			break;
 800dfb0:	e077      	b.n	800e0a2 <Tim_Init+0x406>
		/* Initialize the timer five. */
		case TIMER_FIVE:
			htim5.Instance = TIM5;
 800dfb2:	4b43      	ldr	r3, [pc, #268]	; (800e0c0 <Tim_Init+0x424>)
 800dfb4:	4a43      	ldr	r2, [pc, #268]	; (800e0c4 <Tim_Init+0x428>)
 800dfb6:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 100-1;
 800dfb8:	4b41      	ldr	r3, [pc, #260]	; (800e0c0 <Tim_Init+0x424>)
 800dfba:	2263      	movs	r2, #99	; 0x63
 800dfbc:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dfbe:	4b40      	ldr	r3, [pc, #256]	; (800e0c0 <Tim_Init+0x424>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 0xffffffff;
 800dfc4:	4b3e      	ldr	r3, [pc, #248]	; (800e0c0 <Tim_Init+0x424>)
 800dfc6:	f04f 32ff 	mov.w	r2, #4294967295
 800dfca:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dfcc:	4b3c      	ldr	r3, [pc, #240]	; (800e0c0 <Tim_Init+0x424>)
 800dfce:	2200      	movs	r2, #0
 800dfd0:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dfd2:	4b3b      	ldr	r3, [pc, #236]	; (800e0c0 <Tim_Init+0x424>)
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	619a      	str	r2, [r3, #24]
			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800dfd8:	4839      	ldr	r0, [pc, #228]	; (800e0c0 <Tim_Init+0x424>)
 800dfda:	f7fc fbf5 	bl	800a7c8 <HAL_TIM_Base_Init>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d002      	beq.n	800dfea <Tim_Init+0x34e>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800dfe4:	4836      	ldr	r0, [pc, #216]	; (800e0c0 <Tim_Init+0x424>)
 800dfe6:	f000 f8ab 	bl	800e140 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dfea:	4b37      	ldr	r3, [pc, #220]	; (800e0c8 <Tim_Init+0x42c>)
 800dfec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dff0:	601a      	str	r2, [r3, #0]
			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 800dff2:	4935      	ldr	r1, [pc, #212]	; (800e0c8 <Tim_Init+0x42c>)
 800dff4:	4832      	ldr	r0, [pc, #200]	; (800e0c0 <Tim_Init+0x424>)
 800dff6:	f7fd fac1 	bl	800b57c <HAL_TIM_ConfigClockSource>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d002      	beq.n	800e006 <Tim_Init+0x36a>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e000:	482f      	ldr	r0, [pc, #188]	; (800e0c0 <Tim_Init+0x424>)
 800e002:	f000 f89d 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800e006:	482e      	ldr	r0, [pc, #184]	; (800e0c0 <Tim_Init+0x424>)
 800e008:	f7fc feb2 	bl	800ad70 <HAL_TIM_IC_Init>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d002      	beq.n	800e018 <Tim_Init+0x37c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e012:	482b      	ldr	r0, [pc, #172]	; (800e0c0 <Tim_Init+0x424>)
 800e014:	f000 f894 	bl	800e140 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 800e018:	4b2c      	ldr	r3, [pc, #176]	; (800e0cc <Tim_Init+0x430>)
 800e01a:	2200      	movs	r2, #0
 800e01c:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e01e:	4b2b      	ldr	r3, [pc, #172]	; (800e0cc <Tim_Init+0x430>)
 800e020:	2200      	movs	r2, #0
 800e022:	605a      	str	r2, [r3, #4]
			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 800e024:	4929      	ldr	r1, [pc, #164]	; (800e0cc <Tim_Init+0x430>)
 800e026:	4826      	ldr	r0, [pc, #152]	; (800e0c0 <Tim_Init+0x424>)
 800e028:	f7fe f84a 	bl	800c0c0 <HAL_TIMEx_MasterConfigSynchronization>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d002      	beq.n	800e038 <Tim_Init+0x39c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e032:	4823      	ldr	r0, [pc, #140]	; (800e0c0 <Tim_Init+0x424>)
 800e034:	f000 f884 	bl	800e140 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sConfigIC5.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800e038:	4b25      	ldr	r3, [pc, #148]	; (800e0d0 <Tim_Init+0x434>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	601a      	str	r2, [r3, #0]
			sConfigIC5.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800e03e:	4b24      	ldr	r3, [pc, #144]	; (800e0d0 <Tim_Init+0x434>)
 800e040:	2201      	movs	r2, #1
 800e042:	605a      	str	r2, [r3, #4]
			sConfigIC5.ICPrescaler = TIM_ICPSC_DIV1;
 800e044:	4b22      	ldr	r3, [pc, #136]	; (800e0d0 <Tim_Init+0x434>)
 800e046:	2200      	movs	r2, #0
 800e048:	609a      	str	r2, [r3, #8]
			sConfigIC5.ICFilter = 0;
 800e04a:	4b21      	ldr	r3, [pc, #132]	; (800e0d0 <Tim_Init+0x434>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_1) != HAL_OK)
 800e050:	2200      	movs	r2, #0
 800e052:	491f      	ldr	r1, [pc, #124]	; (800e0d0 <Tim_Init+0x434>)
 800e054:	481a      	ldr	r0, [pc, #104]	; (800e0c0 <Tim_Init+0x424>)
 800e056:	f7fd f933 	bl	800b2c0 <HAL_TIM_IC_ConfigChannel>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <Tim_Init+0x3ca>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e060:	4817      	ldr	r0, [pc, #92]	; (800e0c0 <Tim_Init+0x424>)
 800e062:	f000 f86d 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_2) != HAL_OK)
 800e066:	2204      	movs	r2, #4
 800e068:	4919      	ldr	r1, [pc, #100]	; (800e0d0 <Tim_Init+0x434>)
 800e06a:	4815      	ldr	r0, [pc, #84]	; (800e0c0 <Tim_Init+0x424>)
 800e06c:	f7fd f928 	bl	800b2c0 <HAL_TIM_IC_ConfigChannel>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <Tim_Init+0x3e0>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800e076:	4812      	ldr	r0, [pc, #72]	; (800e0c0 <Tim_Init+0x424>)
 800e078:	f000 f862 	bl	800e140 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if(TimH_MainFunctionFirstCall == STD_LOW)
 800e07c:	4b15      	ldr	r3, [pc, #84]	; (800e0d4 <Tim_Init+0x438>)
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10d      	bne.n	800e0a0 <Tim_Init+0x404>
			{
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800e084:	2100      	movs	r1, #0
 800e086:	480e      	ldr	r0, [pc, #56]	; (800e0c0 <Tim_Init+0x424>)
 800e088:	f7fc fed8 	bl	800ae3c <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 800e08c:	2104      	movs	r1, #4
 800e08e:	480c      	ldr	r0, [pc, #48]	; (800e0c0 <Tim_Init+0x424>)
 800e090:	f7fc fed4 	bl	800ae3c <HAL_TIM_IC_Start_IT>
				TimH_MainFunctionFirstCall = STD_HIGH;
 800e094:	4b0f      	ldr	r3, [pc, #60]	; (800e0d4 <Tim_Init+0x438>)
 800e096:	2201      	movs	r2, #1
 800e098:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}

			break;
 800e09a:	e001      	b.n	800e0a0 <Tim_Init+0x404>
		default:
			break;
 800e09c:	bf00      	nop
 800e09e:	e000      	b.n	800e0a2 <Tim_Init+0x406>
			break;
 800e0a0:	bf00      	nop
	}
	return E_OK;
 800e0a2:	2300      	movs	r3, #0
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	200006a8 	.word	0x200006a8
 800e0b0:	40000800 	.word	0x40000800
 800e0b4:	200009cc 	.word	0x200009cc
 800e0b8:	200009dc 	.word	0x200009dc
 800e0bc:	20000998 	.word	0x20000998
 800e0c0:	2000075c 	.word	0x2000075c
 800e0c4:	40000c00 	.word	0x40000c00
 800e0c8:	200009e4 	.word	0x200009e4
 800e0cc:	200009f4 	.word	0x200009f4
 800e0d0:	200009fc 	.word	0x200009fc
 800e0d4:	20000946 	.word	0x20000946

0800e0d8 <Tim_DeInit>:
/***********************************************************************************
* Function: Tim_DeInit										   			           *
* Description: Peripheral de-initialization.									   *
************************************************************************************/
StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	4603      	mov	r3, r0
 800e0e0:	71fb      	strb	r3, [r7, #7]
	/* Store the timer channel value into a local variable. */
	uint8 localVariable = TimerChannel;
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	73fb      	strb	r3, [r7, #15]
	/* Process the request for timer de-init. */
	switch(localVariable)
 800e0e6:	7bfb      	ldrb	r3, [r7, #15]
 800e0e8:	3b02      	subs	r3, #2
 800e0ea:	2b03      	cmp	r3, #3
 800e0ec:	d81a      	bhi.n	800e124 <Tim_DeInit+0x4c>
 800e0ee:	a201      	add	r2, pc, #4	; (adr r2, 800e0f4 <Tim_DeInit+0x1c>)
 800e0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f4:	0800e105 	.word	0x0800e105
 800e0f8:	0800e10d 	.word	0x0800e10d
 800e0fc:	0800e115 	.word	0x0800e115
 800e100:	0800e11d 	.word	0x0800e11d
	{
		case TIMER_TWO:
			HAL_TIM_Base_MspDeInit(&htim2);
 800e104:	480a      	ldr	r0, [pc, #40]	; (800e130 <Tim_DeInit+0x58>)
 800e106:	f7f7 f9f9 	bl	80054fc <HAL_TIM_Base_MspDeInit>
			break;
 800e10a:	e00c      	b.n	800e126 <Tim_DeInit+0x4e>
		case TIMER_THREE:
			HAL_TIM_Base_MspDeInit(&htim3);
 800e10c:	4809      	ldr	r0, [pc, #36]	; (800e134 <Tim_DeInit+0x5c>)
 800e10e:	f7f7 f9f5 	bl	80054fc <HAL_TIM_Base_MspDeInit>
			break;
 800e112:	e008      	b.n	800e126 <Tim_DeInit+0x4e>
		case TIMER_FOUR:
			HAL_TIM_Base_MspDeInit(&htim4);
 800e114:	4808      	ldr	r0, [pc, #32]	; (800e138 <Tim_DeInit+0x60>)
 800e116:	f7f7 f9f1 	bl	80054fc <HAL_TIM_Base_MspDeInit>
			break;
 800e11a:	e004      	b.n	800e126 <Tim_DeInit+0x4e>
		case TIMER_FIVE:
			HAL_TIM_Base_MspDeInit(&htim5);
 800e11c:	4807      	ldr	r0, [pc, #28]	; (800e13c <Tim_DeInit+0x64>)
 800e11e:	f7f7 f9ed 	bl	80054fc <HAL_TIM_Base_MspDeInit>
			break;
 800e122:	e000      	b.n	800e126 <Tim_DeInit+0x4e>
		default:
			break;
 800e124:	bf00      	nop
	}
	return E_OK;
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	20000540 	.word	0x20000540
 800e134:	200005f4 	.word	0x200005f4
 800e138:	200006a8 	.word	0x200006a8
 800e13c:	2000075c 	.word	0x2000075c

0800e140 <HAL_TIM_ErrorCallback>:
/***********************************************************************************
* Function: HAL_TIM_ErrorCallback										   		   *
* Description: Error callback called when timer fault occurs.					   *
************************************************************************************/
VOID HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization of the peripheral in case of error. */
	if(htim->Instance == TIM2)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e150:	d10b      	bne.n	800e16a <HAL_TIM_ErrorCallback+0x2a>
	{
		SystemManager_Fault[TIMER2_ERROR]++;
 800e152:	4b21      	ldr	r3, [pc, #132]	; (800e1d8 <HAL_TIM_ErrorCallback+0x98>)
 800e154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e156:	3301      	adds	r3, #1
 800e158:	4a1f      	ldr	r2, [pc, #124]	; (800e1d8 <HAL_TIM_ErrorCallback+0x98>)
 800e15a:	6593      	str	r3, [r2, #88]	; 0x58
		Tim_DeInit(TIMER_TWO);
 800e15c:	2002      	movs	r0, #2
 800e15e:	f7ff ffbb 	bl	800e0d8 <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 800e162:	2002      	movs	r0, #2
 800e164:	f7ff fd9a 	bl	800dc9c <Tim_Init>
	}
	else
	{
		/* do nothing */
	}
}
 800e168:	e031      	b.n	800e1ce <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM3)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4a1b      	ldr	r2, [pc, #108]	; (800e1dc <HAL_TIM_ErrorCallback+0x9c>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d10b      	bne.n	800e18c <HAL_TIM_ErrorCallback+0x4c>
		SystemManager_Fault[TIMER3_ERROR]++;
 800e174:	4b18      	ldr	r3, [pc, #96]	; (800e1d8 <HAL_TIM_ErrorCallback+0x98>)
 800e176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e178:	3301      	adds	r3, #1
 800e17a:	4a17      	ldr	r2, [pc, #92]	; (800e1d8 <HAL_TIM_ErrorCallback+0x98>)
 800e17c:	65d3      	str	r3, [r2, #92]	; 0x5c
		Tim_DeInit(TIMER_THREE);
 800e17e:	2003      	movs	r0, #3
 800e180:	f7ff ffaa 	bl	800e0d8 <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 800e184:	2003      	movs	r0, #3
 800e186:	f7ff fd89 	bl	800dc9c <Tim_Init>
}
 800e18a:	e020      	b.n	800e1ce <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM4)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a13      	ldr	r2, [pc, #76]	; (800e1e0 <HAL_TIM_ErrorCallback+0xa0>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d10b      	bne.n	800e1ae <HAL_TIM_ErrorCallback+0x6e>
		SystemManager_Fault[TIMER4_ERROR]++;
 800e196:	4b10      	ldr	r3, [pc, #64]	; (800e1d8 <HAL_TIM_ErrorCallback+0x98>)
 800e198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e19a:	3301      	adds	r3, #1
 800e19c:	4a0e      	ldr	r2, [pc, #56]	; (800e1d8 <HAL_TIM_ErrorCallback+0x98>)
 800e19e:	6613      	str	r3, [r2, #96]	; 0x60
		Tim_DeInit(TIMER_FOUR);
 800e1a0:	2004      	movs	r0, #4
 800e1a2:	f7ff ff99 	bl	800e0d8 <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 800e1a6:	2004      	movs	r0, #4
 800e1a8:	f7ff fd78 	bl	800dc9c <Tim_Init>
}
 800e1ac:	e00f      	b.n	800e1ce <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM5)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4a0c      	ldr	r2, [pc, #48]	; (800e1e4 <HAL_TIM_ErrorCallback+0xa4>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d10a      	bne.n	800e1ce <HAL_TIM_ErrorCallback+0x8e>
		SystemManager_Fault[TIMER5_ERROR]++;
 800e1b8:	4b07      	ldr	r3, [pc, #28]	; (800e1d8 <HAL_TIM_ErrorCallback+0x98>)
 800e1ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1bc:	3301      	adds	r3, #1
 800e1be:	4a06      	ldr	r2, [pc, #24]	; (800e1d8 <HAL_TIM_ErrorCallback+0x98>)
 800e1c0:	6653      	str	r3, [r2, #100]	; 0x64
		Tim_DeInit(TIMER_FIVE);
 800e1c2:	2005      	movs	r0, #5
 800e1c4:	f7ff ff88 	bl	800e0d8 <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 800e1c8:	2005      	movs	r0, #5
 800e1ca:	f7ff fd67 	bl	800dc9c <Tim_Init>
}
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	2000941c 	.word	0x2000941c
 800e1dc:	40000400 	.word	0x40000400
 800e1e0:	40000800 	.word	0x40000800
 800e1e4:	40000c00 	.word	0x40000c00

0800e1e8 <Tim_MainFunction>:
/***********************************************************************************
* Function: Tim_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Tim_MainFunction()
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
	/* Check each timer for error status into local variables. */
	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 800e1ee:	4891      	ldr	r0, [pc, #580]	; (800e434 <Tim_MainFunction+0x24c>)
 800e1f0:	f7fd fb16 	bl	800b820 <HAL_TIM_Base_GetState>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 800e1f8:	488f      	ldr	r0, [pc, #572]	; (800e438 <Tim_MainFunction+0x250>)
 800e1fa:	f7fd fb11 	bl	800b820 <HAL_TIM_Base_GetState>
 800e1fe:	4603      	mov	r3, r0
 800e200:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 800e202:	488e      	ldr	r0, [pc, #568]	; (800e43c <Tim_MainFunction+0x254>)
 800e204:	f7fd fb0c 	bl	800b820 <HAL_TIM_Base_GetState>
 800e208:	4603      	mov	r3, r0
 800e20a:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 800e20c:	488c      	ldr	r0, [pc, #560]	; (800e440 <Tim_MainFunction+0x258>)
 800e20e:	f7fd fb07 	bl	800b820 <HAL_TIM_Base_GetState>
 800e212:	4603      	mov	r3, r0
 800e214:	603b      	str	r3, [r7, #0]
	/* Process timers state. */
	switch(localStateTimerFive)
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	2b04      	cmp	r3, #4
 800e21a:	d86a      	bhi.n	800e2f2 <Tim_MainFunction+0x10a>
 800e21c:	a201      	add	r2, pc, #4	; (adr r2, 800e224 <Tim_MainFunction+0x3c>)
 800e21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e222:	bf00      	nop
 800e224:	0800e239 	.word	0x0800e239
 800e228:	0800e249 	.word	0x0800e249
 800e22c:	0800e2c9 	.word	0x0800e2c9
 800e230:	0800e2d3 	.word	0x0800e2d3
 800e234:	0800e2e3 	.word	0x0800e2e3
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFive = localStateTimerFive;
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	4b81      	ldr	r3, [pc, #516]	; (800e444 <Tim_MainFunction+0x25c>)
 800e23e:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FIVE);
 800e240:	2005      	movs	r0, #5
 800e242:	f7ff fd2b 	bl	800dc9c <Tim_Init>
			break;
 800e246:	e055      	b.n	800e2f4 <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_READY:
			if(Os_Counter % 500)
 800e248:	4b7f      	ldr	r3, [pc, #508]	; (800e448 <Tim_MainFunction+0x260>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	4b7f      	ldr	r3, [pc, #508]	; (800e44c <Tim_MainFunction+0x264>)
 800e24e:	fba3 1302 	umull	r1, r3, r3, r2
 800e252:	095b      	lsrs	r3, r3, #5
 800e254:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e258:	fb01 f303 	mul.w	r3, r1, r3
 800e25c:	1ad3      	subs	r3, r2, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d02d      	beq.n	800e2be <Tim_MainFunction+0xd6>
			{
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_SET);
 800e262:	2201      	movs	r2, #1
 800e264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e268:	4879      	ldr	r0, [pc, #484]	; (800e450 <Tim_MainFunction+0x268>)
 800e26a:	f7f9 fde5 	bl	8007e38 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 800e26e:	2001      	movs	r0, #1
 800e270:	f7f7 fd78 	bl	8005d64 <HAL_Delay>
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_RESET);
 800e274:	2200      	movs	r2, #0
 800e276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e27a:	4875      	ldr	r0, [pc, #468]	; (800e450 <Tim_MainFunction+0x268>)
 800e27c:	f7f9 fddc 	bl	8007e38 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 800e280:	4b6f      	ldr	r3, [pc, #444]	; (800e440 <Tim_MainFunction+0x258>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	68da      	ldr	r2, [r3, #12]
 800e286:	4b6e      	ldr	r3, [pc, #440]	; (800e440 <Tim_MainFunction+0x258>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f042 0204 	orr.w	r2, r2, #4
 800e28e:	60da      	str	r2, [r3, #12]
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_SET);
 800e290:	2201      	movs	r2, #1
 800e292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e296:	486f      	ldr	r0, [pc, #444]	; (800e454 <Tim_MainFunction+0x26c>)
 800e298:	f7f9 fdce 	bl	8007e38 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 800e29c:	2001      	movs	r0, #1
 800e29e:	f7f7 fd61 	bl	8005d64 <HAL_Delay>
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_RESET);
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e2a8:	486a      	ldr	r0, [pc, #424]	; (800e454 <Tim_MainFunction+0x26c>)
 800e2aa:	f7f9 fdc5 	bl	8007e38 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 800e2ae:	4b64      	ldr	r3, [pc, #400]	; (800e440 <Tim_MainFunction+0x258>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	68da      	ldr	r2, [r3, #12]
 800e2b4:	4b62      	ldr	r3, [pc, #392]	; (800e440 <Tim_MainFunction+0x258>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f042 0202 	orr.w	r2, r2, #2
 800e2bc:	60da      	str	r2, [r3, #12]
			}
			else
			{
				/* do nothing */
			}
			TimH_BswState_TimerFive = localStateTimerFive;
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	b2da      	uxtb	r2, r3
 800e2c2:	4b60      	ldr	r3, [pc, #384]	; (800e444 <Tim_MainFunction+0x25c>)
 800e2c4:	701a      	strb	r2, [r3, #0]
			break;
 800e2c6:	e015      	b.n	800e2f4 <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFive = localStateTimerFive;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	4b5d      	ldr	r3, [pc, #372]	; (800e444 <Tim_MainFunction+0x25c>)
 800e2ce:	701a      	strb	r2, [r3, #0]
			break;
 800e2d0:	e010      	b.n	800e2f4 <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFive = localStateTimerFive;
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	b2da      	uxtb	r2, r3
 800e2d6:	4b5b      	ldr	r3, [pc, #364]	; (800e444 <Tim_MainFunction+0x25c>)
 800e2d8:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 800e2da:	4859      	ldr	r0, [pc, #356]	; (800e440 <Tim_MainFunction+0x258>)
 800e2dc:	f7ff ff30 	bl	800e140 <HAL_TIM_ErrorCallback>
			break;
 800e2e0:	e008      	b.n	800e2f4 <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFive = localStateTimerFive;
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	4b57      	ldr	r3, [pc, #348]	; (800e444 <Tim_MainFunction+0x25c>)
 800e2e8:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 800e2ea:	4855      	ldr	r0, [pc, #340]	; (800e440 <Tim_MainFunction+0x258>)
 800e2ec:	f7ff ff28 	bl	800e140 <HAL_TIM_ErrorCallback>
			break;
 800e2f0:	e000      	b.n	800e2f4 <Tim_MainFunction+0x10c>
		default:
			break;
 800e2f2:	bf00      	nop
	}
	switch(localStateTimerTwo)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2b04      	cmp	r3, #4
 800e2f8:	d82e      	bhi.n	800e358 <Tim_MainFunction+0x170>
 800e2fa:	a201      	add	r2, pc, #4	; (adr r2, 800e300 <Tim_MainFunction+0x118>)
 800e2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e300:	0800e315 	.word	0x0800e315
 800e304:	0800e325 	.word	0x0800e325
 800e308:	0800e32f 	.word	0x0800e32f
 800e30c:	0800e339 	.word	0x0800e339
 800e310:	0800e349 	.word	0x0800e349
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	b2da      	uxtb	r2, r3
 800e318:	4b4f      	ldr	r3, [pc, #316]	; (800e458 <Tim_MainFunction+0x270>)
 800e31a:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_TWO);
 800e31c:	2002      	movs	r0, #2
 800e31e:	f7ff fcbd 	bl	800dc9c <Tim_Init>
			break;
 800e322:	e01a      	b.n	800e35a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	b2da      	uxtb	r2, r3
 800e328:	4b4b      	ldr	r3, [pc, #300]	; (800e458 <Tim_MainFunction+0x270>)
 800e32a:	701a      	strb	r2, [r3, #0]
			break;
 800e32c:	e015      	b.n	800e35a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	b2da      	uxtb	r2, r3
 800e332:	4b49      	ldr	r3, [pc, #292]	; (800e458 <Tim_MainFunction+0x270>)
 800e334:	701a      	strb	r2, [r3, #0]
			break;
 800e336:	e010      	b.n	800e35a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	b2da      	uxtb	r2, r3
 800e33c:	4b46      	ldr	r3, [pc, #280]	; (800e458 <Tim_MainFunction+0x270>)
 800e33e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 800e340:	483c      	ldr	r0, [pc, #240]	; (800e434 <Tim_MainFunction+0x24c>)
 800e342:	f7ff fefd 	bl	800e140 <HAL_TIM_ErrorCallback>
			break;
 800e346:	e008      	b.n	800e35a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	b2da      	uxtb	r2, r3
 800e34c:	4b42      	ldr	r3, [pc, #264]	; (800e458 <Tim_MainFunction+0x270>)
 800e34e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 800e350:	4838      	ldr	r0, [pc, #224]	; (800e434 <Tim_MainFunction+0x24c>)
 800e352:	f7ff fef5 	bl	800e140 <HAL_TIM_ErrorCallback>
			break;
 800e356:	e000      	b.n	800e35a <Tim_MainFunction+0x172>
		default:
			break;
 800e358:	bf00      	nop
	}
	switch(localStateTimerThree)
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	2b04      	cmp	r3, #4
 800e35e:	d82f      	bhi.n	800e3c0 <Tim_MainFunction+0x1d8>
 800e360:	a201      	add	r2, pc, #4	; (adr r2, 800e368 <Tim_MainFunction+0x180>)
 800e362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e366:	bf00      	nop
 800e368:	0800e37d 	.word	0x0800e37d
 800e36c:	0800e38d 	.word	0x0800e38d
 800e370:	0800e397 	.word	0x0800e397
 800e374:	0800e3a1 	.word	0x0800e3a1
 800e378:	0800e3b1 	.word	0x0800e3b1
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerThree = localStateTimerThree;
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	b2da      	uxtb	r2, r3
 800e380:	4b36      	ldr	r3, [pc, #216]	; (800e45c <Tim_MainFunction+0x274>)
 800e382:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_THREE);
 800e384:	2003      	movs	r0, #3
 800e386:	f7ff fc89 	bl	800dc9c <Tim_Init>
			break;
 800e38a:	e01a      	b.n	800e3c2 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerThree = localStateTimerThree;
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	b2da      	uxtb	r2, r3
 800e390:	4b32      	ldr	r3, [pc, #200]	; (800e45c <Tim_MainFunction+0x274>)
 800e392:	701a      	strb	r2, [r3, #0]
			break;
 800e394:	e015      	b.n	800e3c2 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerThree = localStateTimerThree;
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	b2da      	uxtb	r2, r3
 800e39a:	4b30      	ldr	r3, [pc, #192]	; (800e45c <Tim_MainFunction+0x274>)
 800e39c:	701a      	strb	r2, [r3, #0]
			break;
 800e39e:	e010      	b.n	800e3c2 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerThree = localStateTimerThree;
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	4b2d      	ldr	r3, [pc, #180]	; (800e45c <Tim_MainFunction+0x274>)
 800e3a6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 800e3a8:	4823      	ldr	r0, [pc, #140]	; (800e438 <Tim_MainFunction+0x250>)
 800e3aa:	f7ff fec9 	bl	800e140 <HAL_TIM_ErrorCallback>
			break;
 800e3ae:	e008      	b.n	800e3c2 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerThree = localStateTimerThree;
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	b2da      	uxtb	r2, r3
 800e3b4:	4b29      	ldr	r3, [pc, #164]	; (800e45c <Tim_MainFunction+0x274>)
 800e3b6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 800e3b8:	481f      	ldr	r0, [pc, #124]	; (800e438 <Tim_MainFunction+0x250>)
 800e3ba:	f7ff fec1 	bl	800e140 <HAL_TIM_ErrorCallback>
			break;
 800e3be:	e000      	b.n	800e3c2 <Tim_MainFunction+0x1da>
		default:
			break;
 800e3c0:	bf00      	nop
	}
	switch(localStateTimerFour)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2b04      	cmp	r3, #4
 800e3c6:	d82f      	bhi.n	800e428 <Tim_MainFunction+0x240>
 800e3c8:	a201      	add	r2, pc, #4	; (adr r2, 800e3d0 <Tim_MainFunction+0x1e8>)
 800e3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ce:	bf00      	nop
 800e3d0:	0800e3e5 	.word	0x0800e3e5
 800e3d4:	0800e3f5 	.word	0x0800e3f5
 800e3d8:	0800e3ff 	.word	0x0800e3ff
 800e3dc:	0800e409 	.word	0x0800e409
 800e3e0:	0800e419 	.word	0x0800e419
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFour = localStateTimerFour;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	4b1d      	ldr	r3, [pc, #116]	; (800e460 <Tim_MainFunction+0x278>)
 800e3ea:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FOUR);
 800e3ec:	2004      	movs	r0, #4
 800e3ee:	f7ff fc55 	bl	800dc9c <Tim_Init>
			break;
 800e3f2:	e01a      	b.n	800e42a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerFour = localStateTimerFour;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	4b19      	ldr	r3, [pc, #100]	; (800e460 <Tim_MainFunction+0x278>)
 800e3fa:	701a      	strb	r2, [r3, #0]
			break;
 800e3fc:	e015      	b.n	800e42a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFour = localStateTimerFour;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	b2da      	uxtb	r2, r3
 800e402:	4b17      	ldr	r3, [pc, #92]	; (800e460 <Tim_MainFunction+0x278>)
 800e404:	701a      	strb	r2, [r3, #0]
			break;
 800e406:	e010      	b.n	800e42a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFour = localStateTimerFour;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	b2da      	uxtb	r2, r3
 800e40c:	4b14      	ldr	r3, [pc, #80]	; (800e460 <Tim_MainFunction+0x278>)
 800e40e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 800e410:	480a      	ldr	r0, [pc, #40]	; (800e43c <Tim_MainFunction+0x254>)
 800e412:	f7ff fe95 	bl	800e140 <HAL_TIM_ErrorCallback>
			break;
 800e416:	e008      	b.n	800e42a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFour = localStateTimerFour;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	4b10      	ldr	r3, [pc, #64]	; (800e460 <Tim_MainFunction+0x278>)
 800e41e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 800e420:	4806      	ldr	r0, [pc, #24]	; (800e43c <Tim_MainFunction+0x254>)
 800e422:	f7ff fe8d 	bl	800e140 <HAL_TIM_ErrorCallback>
			break;
 800e426:	e000      	b.n	800e42a <Tim_MainFunction+0x242>
		default:
			break;
 800e428:	bf00      	nop
	}
}
 800e42a:	bf00      	nop
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	20000540 	.word	0x20000540
 800e438:	200005f4 	.word	0x200005f4
 800e43c:	200006a8 	.word	0x200006a8
 800e440:	2000075c 	.word	0x2000075c
 800e444:	20000927 	.word	0x20000927
 800e448:	200002d8 	.word	0x200002d8
 800e44c:	10624dd3 	.word	0x10624dd3
 800e450:	40020400 	.word	0x40020400
 800e454:	40020000 	.word	0x40020000
 800e458:	20000924 	.word	0x20000924
 800e45c:	20000925 	.word	0x20000925
 800e460:	20000926 	.word	0x20000926

0800e464 <HAL_TIM_PeriodElapsedCallback>:
* Function: HAL_TIM_PeriodElapsedCallback										   *
* Description: Peripheral period elapsed callback to process system state          *
* 			   when timer expires.									               *
************************************************************************************/
VOID HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
	/* Timer 1 is used for the time base source of FreeRTOS. Upon expiration increase the clock counter of the system. */
	if (htim->Instance == TIM1)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a04      	ldr	r2, [pc, #16]	; (800e484 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d101      	bne.n	800e47a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800e476:	f7f7 fc55 	bl	8005d24 <HAL_IncTick>
	}
	else
	{
		/* do nothing */
	}
}
 800e47a:	bf00      	nop
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	40010000 	.word	0x40010000

0800e488 <__NVIC_SetPriority>:
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	4603      	mov	r3, r0
 800e490:	6039      	str	r1, [r7, #0]
 800e492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	db0a      	blt.n	800e4b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	b2da      	uxtb	r2, r3
 800e4a0:	490c      	ldr	r1, [pc, #48]	; (800e4d4 <__NVIC_SetPriority+0x4c>)
 800e4a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4a6:	0112      	lsls	r2, r2, #4
 800e4a8:	b2d2      	uxtb	r2, r2
 800e4aa:	440b      	add	r3, r1
 800e4ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e4b0:	e00a      	b.n	800e4c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	b2da      	uxtb	r2, r3
 800e4b6:	4908      	ldr	r1, [pc, #32]	; (800e4d8 <__NVIC_SetPriority+0x50>)
 800e4b8:	79fb      	ldrb	r3, [r7, #7]
 800e4ba:	f003 030f 	and.w	r3, r3, #15
 800e4be:	3b04      	subs	r3, #4
 800e4c0:	0112      	lsls	r2, r2, #4
 800e4c2:	b2d2      	uxtb	r2, r2
 800e4c4:	440b      	add	r3, r1
 800e4c6:	761a      	strb	r2, [r3, #24]
}
 800e4c8:	bf00      	nop
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr
 800e4d4:	e000e100 	.word	0xe000e100
 800e4d8:	e000ed00 	.word	0xe000ed00

0800e4dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e4e0:	4b05      	ldr	r3, [pc, #20]	; (800e4f8 <SysTick_Handler+0x1c>)
 800e4e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e4e4:	f002 faea 	bl	8010abc <xTaskGetSchedulerState>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d001      	beq.n	800e4f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e4ee:	f000 fd0b 	bl	800ef08 <xPortSysTickHandler>
  }
}
 800e4f2:	bf00      	nop
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	e000e010 	.word	0xe000e010

0800e4fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e500:	2100      	movs	r1, #0
 800e502:	f06f 0004 	mvn.w	r0, #4
 800e506:	f7ff ffbf 	bl	800e488 <__NVIC_SetPriority>
#endif
}
 800e50a:	bf00      	nop
 800e50c:	bd80      	pop	{r7, pc}
	...

0800e510 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e516:	f3ef 8305 	mrs	r3, IPSR
 800e51a:	603b      	str	r3, [r7, #0]
  return(result);
 800e51c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d003      	beq.n	800e52a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e522:	f06f 0305 	mvn.w	r3, #5
 800e526:	607b      	str	r3, [r7, #4]
 800e528:	e00c      	b.n	800e544 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e52a:	4b0a      	ldr	r3, [pc, #40]	; (800e554 <osKernelInitialize+0x44>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d105      	bne.n	800e53e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e532:	4b08      	ldr	r3, [pc, #32]	; (800e554 <osKernelInitialize+0x44>)
 800e534:	2201      	movs	r2, #1
 800e536:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e538:	2300      	movs	r3, #0
 800e53a:	607b      	str	r3, [r7, #4]
 800e53c:	e002      	b.n	800e544 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e53e:	f04f 33ff 	mov.w	r3, #4294967295
 800e542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e544:	687b      	ldr	r3, [r7, #4]
}
 800e546:	4618      	mov	r0, r3
 800e548:	370c      	adds	r7, #12
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop
 800e554:	20000a0c 	.word	0x20000a0c

0800e558 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e55e:	f3ef 8305 	mrs	r3, IPSR
 800e562:	603b      	str	r3, [r7, #0]
  return(result);
 800e564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e566:	2b00      	cmp	r3, #0
 800e568:	d003      	beq.n	800e572 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e56a:	f06f 0305 	mvn.w	r3, #5
 800e56e:	607b      	str	r3, [r7, #4]
 800e570:	e010      	b.n	800e594 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e572:	4b0b      	ldr	r3, [pc, #44]	; (800e5a0 <osKernelStart+0x48>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d109      	bne.n	800e58e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e57a:	f7ff ffbf 	bl	800e4fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e57e:	4b08      	ldr	r3, [pc, #32]	; (800e5a0 <osKernelStart+0x48>)
 800e580:	2202      	movs	r2, #2
 800e582:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e584:	f001 fe00 	bl	8010188 <vTaskStartScheduler>
      stat = osOK;
 800e588:	2300      	movs	r3, #0
 800e58a:	607b      	str	r3, [r7, #4]
 800e58c:	e002      	b.n	800e594 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e58e:	f04f 33ff 	mov.w	r3, #4294967295
 800e592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e594:	687b      	ldr	r3, [r7, #4]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	20000a0c 	.word	0x20000a0c

0800e5a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b08e      	sub	sp, #56	; 0x38
 800e5a8:	af04      	add	r7, sp, #16
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5b4:	f3ef 8305 	mrs	r3, IPSR
 800e5b8:	617b      	str	r3, [r7, #20]
  return(result);
 800e5ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d17f      	bne.n	800e6c0 <osThreadNew+0x11c>
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d07c      	beq.n	800e6c0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800e5c6:	2380      	movs	r3, #128	; 0x80
 800e5c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e5ca:	2318      	movs	r3, #24
 800e5cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d046      	beq.n	800e66c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d002      	beq.n	800e5ec <osThreadNew+0x48>
        name = attr->name;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	699b      	ldr	r3, [r3, #24]
 800e5f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d008      	beq.n	800e612 <osThreadNew+0x6e>
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	2b38      	cmp	r3, #56	; 0x38
 800e604:	d805      	bhi.n	800e612 <osThreadNew+0x6e>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	f003 0301 	and.w	r3, r3, #1
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d001      	beq.n	800e616 <osThreadNew+0x72>
        return (NULL);
 800e612:	2300      	movs	r3, #0
 800e614:	e055      	b.n	800e6c2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	695b      	ldr	r3, [r3, #20]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d003      	beq.n	800e626 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	695b      	ldr	r3, [r3, #20]
 800e622:	089b      	lsrs	r3, r3, #2
 800e624:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00f      	beq.n	800e64e <osThreadNew+0xaa>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800e636:	d30a      	bcc.n	800e64e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d006      	beq.n	800e64e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	695b      	ldr	r3, [r3, #20]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d002      	beq.n	800e64e <osThreadNew+0xaa>
        mem = 1;
 800e648:	2301      	movs	r3, #1
 800e64a:	61bb      	str	r3, [r7, #24]
 800e64c:	e010      	b.n	800e670 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d10c      	bne.n	800e670 <osThreadNew+0xcc>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d108      	bne.n	800e670 <osThreadNew+0xcc>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d104      	bne.n	800e670 <osThreadNew+0xcc>
          mem = 0;
 800e666:	2300      	movs	r3, #0
 800e668:	61bb      	str	r3, [r7, #24]
 800e66a:	e001      	b.n	800e670 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d110      	bne.n	800e698 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e67e:	9202      	str	r2, [sp, #8]
 800e680:	9301      	str	r3, [sp, #4]
 800e682:	69fb      	ldr	r3, [r7, #28]
 800e684:	9300      	str	r3, [sp, #0]
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	6a3a      	ldr	r2, [r7, #32]
 800e68a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f001 f9b7 	bl	800fa00 <xTaskCreateStatic>
 800e692:	4603      	mov	r3, r0
 800e694:	613b      	str	r3, [r7, #16]
 800e696:	e013      	b.n	800e6c0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d110      	bne.n	800e6c0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e69e:	6a3b      	ldr	r3, [r7, #32]
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	f107 0310 	add.w	r3, r7, #16
 800e6a6:	9301      	str	r3, [sp, #4]
 800e6a8:	69fb      	ldr	r3, [r7, #28]
 800e6aa:	9300      	str	r3, [sp, #0]
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f001 fa04 	bl	800fabe <xTaskCreate>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d001      	beq.n	800e6c0 <osThreadNew+0x11c>
            hTask = NULL;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e6c0:	693b      	ldr	r3, [r7, #16]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3728      	adds	r7, #40	; 0x28
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b084      	sub	sp, #16
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f002 feef 	bl	80114b6 <pvTimerGetTimerID>
 800e6d8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d005      	beq.n	800e6ec <TimerCallback+0x22>
    callb->func (callb->arg);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	6852      	ldr	r2, [r2, #4]
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	4798      	blx	r3
  }
}
 800e6ec:	bf00      	nop
 800e6ee:	3710      	adds	r7, #16
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b08c      	sub	sp, #48	; 0x30
 800e6f8:	af02      	add	r7, sp, #8
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	607a      	str	r2, [r7, #4]
 800e6fe:	603b      	str	r3, [r7, #0]
 800e700:	460b      	mov	r3, r1
 800e702:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e704:	2300      	movs	r3, #0
 800e706:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e708:	f3ef 8305 	mrs	r3, IPSR
 800e70c:	613b      	str	r3, [r7, #16]
  return(result);
 800e70e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800e710:	2b00      	cmp	r3, #0
 800e712:	d163      	bne.n	800e7dc <osTimerNew+0xe8>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d060      	beq.n	800e7dc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e71a:	2008      	movs	r0, #8
 800e71c:	f000 f91c 	bl	800e958 <pvPortMalloc>
 800e720:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d059      	beq.n	800e7dc <osTimerNew+0xe8>
      callb->func = func;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	68fa      	ldr	r2, [r7, #12]
 800e72c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e734:	7afb      	ldrb	r3, [r7, #11]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d102      	bne.n	800e740 <osTimerNew+0x4c>
        reload = pdFALSE;
 800e73a:	2300      	movs	r3, #0
 800e73c:	61fb      	str	r3, [r7, #28]
 800e73e:	e001      	b.n	800e744 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800e740:	2301      	movs	r3, #1
 800e742:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800e744:	f04f 33ff 	mov.w	r3, #4294967295
 800e748:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800e74a:	2300      	movs	r3, #0
 800e74c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d01c      	beq.n	800e78e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d002      	beq.n	800e762 <osTimerNew+0x6e>
          name = attr->name;
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d006      	beq.n	800e778 <osTimerNew+0x84>
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	2b2b      	cmp	r3, #43	; 0x2b
 800e770:	d902      	bls.n	800e778 <osTimerNew+0x84>
          mem = 1;
 800e772:	2301      	movs	r3, #1
 800e774:	61bb      	str	r3, [r7, #24]
 800e776:	e00c      	b.n	800e792 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d108      	bne.n	800e792 <osTimerNew+0x9e>
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d104      	bne.n	800e792 <osTimerNew+0x9e>
            mem = 0;
 800e788:	2300      	movs	r3, #0
 800e78a:	61bb      	str	r3, [r7, #24]
 800e78c:	e001      	b.n	800e792 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800e78e:	2300      	movs	r3, #0
 800e790:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	2b01      	cmp	r3, #1
 800e796:	d10c      	bne.n	800e7b2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	9301      	str	r3, [sp, #4]
 800e79e:	4b12      	ldr	r3, [pc, #72]	; (800e7e8 <osTimerNew+0xf4>)
 800e7a0:	9300      	str	r3, [sp, #0]
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	69fa      	ldr	r2, [r7, #28]
 800e7a6:	2101      	movs	r1, #1
 800e7a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7aa:	f002 fadc 	bl	8010d66 <xTimerCreateStatic>
 800e7ae:	6238      	str	r0, [r7, #32]
 800e7b0:	e00b      	b.n	800e7ca <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d108      	bne.n	800e7ca <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e7b8:	4b0b      	ldr	r3, [pc, #44]	; (800e7e8 <osTimerNew+0xf4>)
 800e7ba:	9300      	str	r3, [sp, #0]
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	69fa      	ldr	r2, [r7, #28]
 800e7c0:	2101      	movs	r1, #1
 800e7c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7c4:	f002 faae 	bl	8010d24 <xTimerCreate>
 800e7c8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d105      	bne.n	800e7dc <osTimerNew+0xe8>
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d002      	beq.n	800e7dc <osTimerNew+0xe8>
        vPortFree (callb);
 800e7d6:	6978      	ldr	r0, [r7, #20]
 800e7d8:	f000 f908 	bl	800e9ec <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e7dc:	6a3b      	ldr	r3, [r7, #32]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3728      	adds	r7, #40	; 0x28
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	0800e6cb 	.word	0x0800e6cb

0800e7ec <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b088      	sub	sp, #32
 800e7f0:	af02      	add	r7, sp, #8
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7fa:	f3ef 8305 	mrs	r3, IPSR
 800e7fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800e800:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <osTimerStart+0x22>
    stat = osErrorISR;
 800e806:	f06f 0305 	mvn.w	r3, #5
 800e80a:	617b      	str	r3, [r7, #20]
 800e80c:	e017      	b.n	800e83e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d103      	bne.n	800e81c <osTimerStart+0x30>
    stat = osErrorParameter;
 800e814:	f06f 0303 	mvn.w	r3, #3
 800e818:	617b      	str	r3, [r7, #20]
 800e81a:	e010      	b.n	800e83e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e81c:	2300      	movs	r3, #0
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	2300      	movs	r3, #0
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	2104      	movs	r1, #4
 800e826:	6938      	ldr	r0, [r7, #16]
 800e828:	f002 fb16 	bl	8010e58 <xTimerGenericCommand>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d102      	bne.n	800e838 <osTimerStart+0x4c>
      stat = osOK;
 800e832:	2300      	movs	r3, #0
 800e834:	617b      	str	r3, [r7, #20]
 800e836:	e002      	b.n	800e83e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800e838:	f06f 0302 	mvn.w	r3, #2
 800e83c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e83e:	697b      	ldr	r3, [r7, #20]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3718      	adds	r7, #24
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800e848:	b580      	push	{r7, lr}
 800e84a:	b088      	sub	sp, #32
 800e84c:	af02      	add	r7, sp, #8
 800e84e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e854:	f3ef 8305 	mrs	r3, IPSR
 800e858:	60fb      	str	r3, [r7, #12]
  return(result);
 800e85a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d003      	beq.n	800e868 <osTimerStop+0x20>
    stat = osErrorISR;
 800e860:	f06f 0305 	mvn.w	r3, #5
 800e864:	617b      	str	r3, [r7, #20]
 800e866:	e021      	b.n	800e8ac <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d103      	bne.n	800e876 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800e86e:	f06f 0303 	mvn.w	r3, #3
 800e872:	617b      	str	r3, [r7, #20]
 800e874:	e01a      	b.n	800e8ac <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800e876:	6938      	ldr	r0, [r7, #16]
 800e878:	f002 fdf4 	bl	8011464 <xTimerIsTimerActive>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d103      	bne.n	800e88a <osTimerStop+0x42>
      stat = osErrorResource;
 800e882:	f06f 0302 	mvn.w	r3, #2
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	e010      	b.n	800e8ac <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800e88a:	2300      	movs	r3, #0
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	2300      	movs	r3, #0
 800e890:	2200      	movs	r2, #0
 800e892:	2103      	movs	r1, #3
 800e894:	6938      	ldr	r0, [r7, #16]
 800e896:	f002 fadf 	bl	8010e58 <xTimerGenericCommand>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d102      	bne.n	800e8a6 <osTimerStop+0x5e>
        stat = osOK;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	617b      	str	r3, [r7, #20]
 800e8a4:	e002      	b.n	800e8ac <osTimerStop+0x64>
      } else {
        stat = osError;
 800e8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e8ac:	697b      	ldr	r3, [r7, #20]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3718      	adds	r7, #24
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b086      	sub	sp, #24
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8c2:	f3ef 8305 	mrs	r3, IPSR
 800e8c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d102      	bne.n	800e8d4 <osTimerIsRunning+0x1e>
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d102      	bne.n	800e8da <osTimerIsRunning+0x24>
    running = 0U;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	617b      	str	r3, [r7, #20]
 800e8d8:	e004      	b.n	800e8e4 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 800e8da:	6938      	ldr	r0, [r7, #16]
 800e8dc:	f002 fdc2 	bl	8011464 <xTimerIsTimerActive>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800e8e4:	697b      	ldr	r3, [r7, #20]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3718      	adds	r7, #24
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
	...

0800e8f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e8f0:	b480      	push	{r7}
 800e8f2:	b085      	sub	sp, #20
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	4a07      	ldr	r2, [pc, #28]	; (800e91c <vApplicationGetIdleTaskMemory+0x2c>)
 800e900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	4a06      	ldr	r2, [pc, #24]	; (800e920 <vApplicationGetIdleTaskMemory+0x30>)
 800e906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2280      	movs	r2, #128	; 0x80
 800e90c:	601a      	str	r2, [r3, #0]
}
 800e90e:	bf00      	nop
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	20000a10 	.word	0x20000a10
 800e920:	20000bc8 	.word	0x20000bc8

0800e924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e924:	b480      	push	{r7}
 800e926:	b085      	sub	sp, #20
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	4a07      	ldr	r2, [pc, #28]	; (800e950 <vApplicationGetTimerTaskMemory+0x2c>)
 800e934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	4a06      	ldr	r2, [pc, #24]	; (800e954 <vApplicationGetTimerTaskMemory+0x30>)
 800e93a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e942:	601a      	str	r2, [r3, #0]
}
 800e944:	bf00      	nop
 800e946:	3714      	adds	r7, #20
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr
 800e950:	20000dc8 	.word	0x20000dc8
 800e954:	20000f80 	.word	0x20000f80

0800e958 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b084      	sub	sp, #16
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800e960:	2300      	movs	r3, #0
 800e962:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f003 0307 	and.w	r3, r3, #7
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d004      	beq.n	800e978 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f023 0307 	bic.w	r3, r3, #7
 800e974:	3308      	adds	r3, #8
 800e976:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800e978:	f001 fc76 	bl	8010268 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800e97c:	4b18      	ldr	r3, [pc, #96]	; (800e9e0 <pvPortMalloc+0x88>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d105      	bne.n	800e990 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800e984:	4b17      	ldr	r3, [pc, #92]	; (800e9e4 <pvPortMalloc+0x8c>)
 800e986:	f023 0307 	bic.w	r3, r3, #7
 800e98a:	461a      	mov	r2, r3
 800e98c:	4b14      	ldr	r3, [pc, #80]	; (800e9e0 <pvPortMalloc+0x88>)
 800e98e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800e990:	4b15      	ldr	r3, [pc, #84]	; (800e9e8 <pvPortMalloc+0x90>)
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	4413      	add	r3, r2
 800e998:	f644 6217 	movw	r2, #19991	; 0x4e17
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d813      	bhi.n	800e9c8 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800e9a0:	4b11      	ldr	r3, [pc, #68]	; (800e9e8 <pvPortMalloc+0x90>)
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	441a      	add	r2, r3
 800e9a8:	4b0f      	ldr	r3, [pc, #60]	; (800e9e8 <pvPortMalloc+0x90>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d90b      	bls.n	800e9c8 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800e9b0:	4b0b      	ldr	r3, [pc, #44]	; (800e9e0 <pvPortMalloc+0x88>)
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	4b0c      	ldr	r3, [pc, #48]	; (800e9e8 <pvPortMalloc+0x90>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800e9bc:	4b0a      	ldr	r3, [pc, #40]	; (800e9e8 <pvPortMalloc+0x90>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	4a08      	ldr	r2, [pc, #32]	; (800e9e8 <pvPortMalloc+0x90>)
 800e9c6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e9c8:	f001 fc5c 	bl	8010284 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d101      	bne.n	800e9d6 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e9d2:	f7f5 fd0b 	bl	80043ec <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3710      	adds	r7, #16
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	20007da4 	.word	0x20007da4
 800e9e4:	20002f88 	.word	0x20002f88
 800e9e8:	20007da0 	.word	0x20007da0

0800e9ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b085      	sub	sp, #20
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00a      	beq.n	800ea10 <vPortFree+0x24>
	__asm volatile
 800e9fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e9fe:	f383 8811 	msr	BASEPRI, r3
 800ea02:	f3bf 8f6f 	isb	sy
 800ea06:	f3bf 8f4f 	dsb	sy
 800ea0a:	60fb      	str	r3, [r7, #12]
}
 800ea0c:	bf00      	nop
 800ea0e:	e7fe      	b.n	800ea0e <vPortFree+0x22>
}
 800ea10:	bf00      	nop
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f103 0208 	add.w	r2, r3, #8
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f04f 32ff 	mov.w	r2, #4294967295
 800ea34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f103 0208 	add.w	r2, r3, #8
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f103 0208 	add.w	r2, r3, #8
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ea50:	bf00      	nop
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ea6a:	bf00      	nop
 800ea6c:	370c      	adds	r7, #12
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea76:	b480      	push	{r7}
 800ea78:	b085      	sub	sp, #20
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
 800ea7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	689a      	ldr	r2, [r3, #8]
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	683a      	ldr	r2, [r7, #0]
 800eaa0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	1c5a      	adds	r2, r3, #1
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	601a      	str	r2, [r3, #0]
}
 800eab2:	bf00      	nop
 800eab4:	3714      	adds	r7, #20
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr

0800eabe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eabe:	b480      	push	{r7}
 800eac0:	b085      	sub	sp, #20
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead4:	d103      	bne.n	800eade <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	691b      	ldr	r3, [r3, #16]
 800eada:	60fb      	str	r3, [r7, #12]
 800eadc:	e00c      	b.n	800eaf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	3308      	adds	r3, #8
 800eae2:	60fb      	str	r3, [r7, #12]
 800eae4:	e002      	b.n	800eaec <vListInsert+0x2e>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	60fb      	str	r3, [r7, #12]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	68ba      	ldr	r2, [r7, #8]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d2f6      	bcs.n	800eae6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	683a      	ldr	r2, [r7, #0]
 800eb06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	683a      	ldr	r2, [r7, #0]
 800eb12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	1c5a      	adds	r2, r3, #1
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	601a      	str	r2, [r3, #0]
}
 800eb24:	bf00      	nop
 800eb26:	3714      	adds	r7, #20
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eb30:	b480      	push	{r7}
 800eb32:	b085      	sub	sp, #20
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	6892      	ldr	r2, [r2, #8]
 800eb46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	689b      	ldr	r3, [r3, #8]
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	6852      	ldr	r2, [r2, #4]
 800eb50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d103      	bne.n	800eb64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	689a      	ldr	r2, [r3, #8]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	1e5a      	subs	r2, r3, #1
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3714      	adds	r7, #20
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eb84:	b480      	push	{r7}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	60b9      	str	r1, [r7, #8]
 800eb8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	3b04      	subs	r3, #4
 800eb94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eb9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	3b04      	subs	r3, #4
 800eba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	f023 0201 	bic.w	r2, r3, #1
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	3b04      	subs	r3, #4
 800ebb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ebb4:	4a0c      	ldr	r2, [pc, #48]	; (800ebe8 <pxPortInitialiseStack+0x64>)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	3b14      	subs	r3, #20
 800ebbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	3b04      	subs	r3, #4
 800ebca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f06f 0202 	mvn.w	r2, #2
 800ebd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	3b20      	subs	r3, #32
 800ebd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ebda:	68fb      	ldr	r3, [r7, #12]
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3714      	adds	r7, #20
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr
 800ebe8:	0800ebed 	.word	0x0800ebed

0800ebec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ebf6:	4b12      	ldr	r3, [pc, #72]	; (800ec40 <prvTaskExitError+0x54>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfe:	d00a      	beq.n	800ec16 <prvTaskExitError+0x2a>
	__asm volatile
 800ec00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ec04:	f383 8811 	msr	BASEPRI, r3
 800ec08:	f3bf 8f6f 	isb	sy
 800ec0c:	f3bf 8f4f 	dsb	sy
 800ec10:	60fb      	str	r3, [r7, #12]
}
 800ec12:	bf00      	nop
 800ec14:	e7fe      	b.n	800ec14 <prvTaskExitError+0x28>
	__asm volatile
 800ec16:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ec1a:	f383 8811 	msr	BASEPRI, r3
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	60bb      	str	r3, [r7, #8]
}
 800ec28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec2a:	bf00      	nop
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d0fc      	beq.n	800ec2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec32:	bf00      	nop
 800ec34:	bf00      	nop
 800ec36:	3714      	adds	r7, #20
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr
 800ec40:	20000058 	.word	0x20000058
	...

0800ec50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec50:	4b07      	ldr	r3, [pc, #28]	; (800ec70 <pxCurrentTCBConst2>)
 800ec52:	6819      	ldr	r1, [r3, #0]
 800ec54:	6808      	ldr	r0, [r1, #0]
 800ec56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5a:	f380 8809 	msr	PSP, r0
 800ec5e:	f3bf 8f6f 	isb	sy
 800ec62:	f04f 0000 	mov.w	r0, #0
 800ec66:	f380 8811 	msr	BASEPRI, r0
 800ec6a:	4770      	bx	lr
 800ec6c:	f3af 8000 	nop.w

0800ec70 <pxCurrentTCBConst2>:
 800ec70:	20007df0 	.word	0x20007df0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec74:	bf00      	nop
 800ec76:	bf00      	nop

0800ec78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec78:	4808      	ldr	r0, [pc, #32]	; (800ec9c <prvPortStartFirstTask+0x24>)
 800ec7a:	6800      	ldr	r0, [r0, #0]
 800ec7c:	6800      	ldr	r0, [r0, #0]
 800ec7e:	f380 8808 	msr	MSP, r0
 800ec82:	f04f 0000 	mov.w	r0, #0
 800ec86:	f380 8814 	msr	CONTROL, r0
 800ec8a:	b662      	cpsie	i
 800ec8c:	b661      	cpsie	f
 800ec8e:	f3bf 8f4f 	dsb	sy
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	df00      	svc	0
 800ec98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ec9a:	bf00      	nop
 800ec9c:	e000ed08 	.word	0xe000ed08

0800eca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b086      	sub	sp, #24
 800eca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eca6:	4b46      	ldr	r3, [pc, #280]	; (800edc0 <xPortStartScheduler+0x120>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a46      	ldr	r2, [pc, #280]	; (800edc4 <xPortStartScheduler+0x124>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d10a      	bne.n	800ecc6 <xPortStartScheduler+0x26>
	__asm volatile
 800ecb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	613b      	str	r3, [r7, #16]
}
 800ecc2:	bf00      	nop
 800ecc4:	e7fe      	b.n	800ecc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ecc6:	4b3e      	ldr	r3, [pc, #248]	; (800edc0 <xPortStartScheduler+0x120>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a3f      	ldr	r2, [pc, #252]	; (800edc8 <xPortStartScheduler+0x128>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d10a      	bne.n	800ece6 <xPortStartScheduler+0x46>
	__asm volatile
 800ecd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	60fb      	str	r3, [r7, #12]
}
 800ece2:	bf00      	nop
 800ece4:	e7fe      	b.n	800ece4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ece6:	4b39      	ldr	r3, [pc, #228]	; (800edcc <xPortStartScheduler+0x12c>)
 800ece8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	22ff      	movs	r2, #255	; 0xff
 800ecf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed00:	78fb      	ldrb	r3, [r7, #3]
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800ed08:	b2da      	uxtb	r2, r3
 800ed0a:	4b31      	ldr	r3, [pc, #196]	; (800edd0 <xPortStartScheduler+0x130>)
 800ed0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed0e:	4b31      	ldr	r3, [pc, #196]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed10:	2207      	movs	r2, #7
 800ed12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed14:	e009      	b.n	800ed2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ed16:	4b2f      	ldr	r3, [pc, #188]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	4a2d      	ldr	r2, [pc, #180]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed20:	78fb      	ldrb	r3, [r7, #3]
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	005b      	lsls	r3, r3, #1
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed2a:	78fb      	ldrb	r3, [r7, #3]
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed32:	2b80      	cmp	r3, #128	; 0x80
 800ed34:	d0ef      	beq.n	800ed16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed36:	4b27      	ldr	r3, [pc, #156]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f1c3 0307 	rsb	r3, r3, #7
 800ed3e:	2b04      	cmp	r3, #4
 800ed40:	d00a      	beq.n	800ed58 <xPortStartScheduler+0xb8>
	__asm volatile
 800ed42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	60bb      	str	r3, [r7, #8]
}
 800ed54:	bf00      	nop
 800ed56:	e7fe      	b.n	800ed56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed58:	4b1e      	ldr	r3, [pc, #120]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	021b      	lsls	r3, r3, #8
 800ed5e:	4a1d      	ldr	r2, [pc, #116]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed62:	4b1c      	ldr	r3, [pc, #112]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed6a:	4a1a      	ldr	r2, [pc, #104]	; (800edd4 <xPortStartScheduler+0x134>)
 800ed6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	b2da      	uxtb	r2, r3
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed76:	4b18      	ldr	r3, [pc, #96]	; (800edd8 <xPortStartScheduler+0x138>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a17      	ldr	r2, [pc, #92]	; (800edd8 <xPortStartScheduler+0x138>)
 800ed7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ed80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed82:	4b15      	ldr	r3, [pc, #84]	; (800edd8 <xPortStartScheduler+0x138>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a14      	ldr	r2, [pc, #80]	; (800edd8 <xPortStartScheduler+0x138>)
 800ed88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ed8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ed8e:	f000 f8dd 	bl	800ef4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ed92:	4b12      	ldr	r3, [pc, #72]	; (800eddc <xPortStartScheduler+0x13c>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ed98:	f000 f8fc 	bl	800ef94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed9c:	4b10      	ldr	r3, [pc, #64]	; (800ede0 <xPortStartScheduler+0x140>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a0f      	ldr	r2, [pc, #60]	; (800ede0 <xPortStartScheduler+0x140>)
 800eda2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eda6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eda8:	f7ff ff66 	bl	800ec78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800edac:	f001 fbda 	bl	8010564 <vTaskSwitchContext>
	prvTaskExitError();
 800edb0:	f7ff ff1c 	bl	800ebec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800edb4:	2300      	movs	r3, #0
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3718      	adds	r7, #24
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	e000ed00 	.word	0xe000ed00
 800edc4:	410fc271 	.word	0x410fc271
 800edc8:	410fc270 	.word	0x410fc270
 800edcc:	e000e400 	.word	0xe000e400
 800edd0:	20007da8 	.word	0x20007da8
 800edd4:	20007dac 	.word	0x20007dac
 800edd8:	e000ed20 	.word	0xe000ed20
 800eddc:	20000058 	.word	0x20000058
 800ede0:	e000ef34 	.word	0xe000ef34

0800ede4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
	__asm volatile
 800edea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800edee:	f383 8811 	msr	BASEPRI, r3
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	f3bf 8f4f 	dsb	sy
 800edfa:	607b      	str	r3, [r7, #4]
}
 800edfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800edfe:	4b0f      	ldr	r3, [pc, #60]	; (800ee3c <vPortEnterCritical+0x58>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	3301      	adds	r3, #1
 800ee04:	4a0d      	ldr	r2, [pc, #52]	; (800ee3c <vPortEnterCritical+0x58>)
 800ee06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee08:	4b0c      	ldr	r3, [pc, #48]	; (800ee3c <vPortEnterCritical+0x58>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d10f      	bne.n	800ee30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee10:	4b0b      	ldr	r3, [pc, #44]	; (800ee40 <vPortEnterCritical+0x5c>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00a      	beq.n	800ee30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ee1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	603b      	str	r3, [r7, #0]
}
 800ee2c:	bf00      	nop
 800ee2e:	e7fe      	b.n	800ee2e <vPortEnterCritical+0x4a>
	}
}
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr
 800ee3c:	20000058 	.word	0x20000058
 800ee40:	e000ed04 	.word	0xe000ed04

0800ee44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee4a:	4b12      	ldr	r3, [pc, #72]	; (800ee94 <vPortExitCritical+0x50>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d10a      	bne.n	800ee68 <vPortExitCritical+0x24>
	__asm volatile
 800ee52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ee56:	f383 8811 	msr	BASEPRI, r3
 800ee5a:	f3bf 8f6f 	isb	sy
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	607b      	str	r3, [r7, #4]
}
 800ee64:	bf00      	nop
 800ee66:	e7fe      	b.n	800ee66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ee68:	4b0a      	ldr	r3, [pc, #40]	; (800ee94 <vPortExitCritical+0x50>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	3b01      	subs	r3, #1
 800ee6e:	4a09      	ldr	r2, [pc, #36]	; (800ee94 <vPortExitCritical+0x50>)
 800ee70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee72:	4b08      	ldr	r3, [pc, #32]	; (800ee94 <vPortExitCritical+0x50>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d105      	bne.n	800ee86 <vPortExitCritical+0x42>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	f383 8811 	msr	BASEPRI, r3
}
 800ee84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ee86:	bf00      	nop
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	20000058 	.word	0x20000058
	...

0800eea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eea0:	f3ef 8009 	mrs	r0, PSP
 800eea4:	f3bf 8f6f 	isb	sy
 800eea8:	4b15      	ldr	r3, [pc, #84]	; (800ef00 <pxCurrentTCBConst>)
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	f01e 0f10 	tst.w	lr, #16
 800eeb0:	bf08      	it	eq
 800eeb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eeb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeba:	6010      	str	r0, [r2, #0]
 800eebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eec0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800eec4:	f380 8811 	msr	BASEPRI, r0
 800eec8:	f3bf 8f4f 	dsb	sy
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f001 fb48 	bl	8010564 <vTaskSwitchContext>
 800eed4:	f04f 0000 	mov.w	r0, #0
 800eed8:	f380 8811 	msr	BASEPRI, r0
 800eedc:	bc09      	pop	{r0, r3}
 800eede:	6819      	ldr	r1, [r3, #0]
 800eee0:	6808      	ldr	r0, [r1, #0]
 800eee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee6:	f01e 0f10 	tst.w	lr, #16
 800eeea:	bf08      	it	eq
 800eeec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eef0:	f380 8809 	msr	PSP, r0
 800eef4:	f3bf 8f6f 	isb	sy
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	f3af 8000 	nop.w

0800ef00 <pxCurrentTCBConst>:
 800ef00:	20007df0 	.word	0x20007df0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef04:	bf00      	nop
 800ef06:	bf00      	nop

0800ef08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	607b      	str	r3, [r7, #4]
}
 800ef20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef22:	f001 fa5d 	bl	80103e0 <xTaskIncrementTick>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d003      	beq.n	800ef34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef2c:	4b06      	ldr	r3, [pc, #24]	; (800ef48 <xPortSysTickHandler+0x40>)
 800ef2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	2300      	movs	r3, #0
 800ef36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	f383 8811 	msr	BASEPRI, r3
}
 800ef3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef40:	bf00      	nop
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	e000ed04 	.word	0xe000ed04

0800ef4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef50:	4b0b      	ldr	r3, [pc, #44]	; (800ef80 <vPortSetupTimerInterrupt+0x34>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef56:	4b0b      	ldr	r3, [pc, #44]	; (800ef84 <vPortSetupTimerInterrupt+0x38>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef5c:	4b0a      	ldr	r3, [pc, #40]	; (800ef88 <vPortSetupTimerInterrupt+0x3c>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4a0a      	ldr	r2, [pc, #40]	; (800ef8c <vPortSetupTimerInterrupt+0x40>)
 800ef62:	fba2 2303 	umull	r2, r3, r2, r3
 800ef66:	099b      	lsrs	r3, r3, #6
 800ef68:	4a09      	ldr	r2, [pc, #36]	; (800ef90 <vPortSetupTimerInterrupt+0x44>)
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef6e:	4b04      	ldr	r3, [pc, #16]	; (800ef80 <vPortSetupTimerInterrupt+0x34>)
 800ef70:	2207      	movs	r2, #7
 800ef72:	601a      	str	r2, [r3, #0]
}
 800ef74:	bf00      	nop
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop
 800ef80:	e000e010 	.word	0xe000e010
 800ef84:	e000e018 	.word	0xe000e018
 800ef88:	2000004c 	.word	0x2000004c
 800ef8c:	10624dd3 	.word	0x10624dd3
 800ef90:	e000e014 	.word	0xe000e014

0800ef94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ef94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800efa4 <vPortEnableVFP+0x10>
 800ef98:	6801      	ldr	r1, [r0, #0]
 800ef9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef9e:	6001      	str	r1, [r0, #0]
 800efa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800efa2:	bf00      	nop
 800efa4:	e000ed88 	.word	0xe000ed88

0800efa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800efae:	f3ef 8305 	mrs	r3, IPSR
 800efb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2b0f      	cmp	r3, #15
 800efb8:	d914      	bls.n	800efe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800efba:	4a17      	ldr	r2, [pc, #92]	; (800f018 <vPortValidateInterruptPriority+0x70>)
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	4413      	add	r3, r2
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800efc4:	4b15      	ldr	r3, [pc, #84]	; (800f01c <vPortValidateInterruptPriority+0x74>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	7afa      	ldrb	r2, [r7, #11]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d20a      	bcs.n	800efe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800efce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	607b      	str	r3, [r7, #4]
}
 800efe0:	bf00      	nop
 800efe2:	e7fe      	b.n	800efe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800efe4:	4b0e      	ldr	r3, [pc, #56]	; (800f020 <vPortValidateInterruptPriority+0x78>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800efec:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <vPortValidateInterruptPriority+0x7c>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d90a      	bls.n	800f00a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eff4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	603b      	str	r3, [r7, #0]
}
 800f006:	bf00      	nop
 800f008:	e7fe      	b.n	800f008 <vPortValidateInterruptPriority+0x60>
	}
 800f00a:	bf00      	nop
 800f00c:	3714      	adds	r7, #20
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr
 800f016:	bf00      	nop
 800f018:	e000e3f0 	.word	0xe000e3f0
 800f01c:	20007da8 	.word	0x20007da8
 800f020:	e000ed0c 	.word	0xe000ed0c
 800f024:	20007dac 	.word	0x20007dac

0800f028 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d10a      	bne.n	800f052 <xQueueGenericReset+0x2a>
	__asm volatile
 800f03c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f040:	f383 8811 	msr	BASEPRI, r3
 800f044:	f3bf 8f6f 	isb	sy
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	60bb      	str	r3, [r7, #8]
}
 800f04e:	bf00      	nop
 800f050:	e7fe      	b.n	800f050 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f052:	f7ff fec7 	bl	800ede4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f05e:	68f9      	ldr	r1, [r7, #12]
 800f060:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f062:	fb01 f303 	mul.w	r3, r1, r3
 800f066:	441a      	add	r2, r3
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f082:	3b01      	subs	r3, #1
 800f084:	68f9      	ldr	r1, [r7, #12]
 800f086:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f088:	fb01 f303 	mul.w	r3, r1, r3
 800f08c:	441a      	add	r2, r3
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	22ff      	movs	r2, #255	; 0xff
 800f096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	22ff      	movs	r2, #255	; 0xff
 800f09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d114      	bne.n	800f0d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d01a      	beq.n	800f0e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	3310      	adds	r3, #16
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f001 fb3d 	bl	8010734 <xTaskRemoveFromEventList>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d012      	beq.n	800f0e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f0c0:	4b0c      	ldr	r3, [pc, #48]	; (800f0f4 <xQueueGenericReset+0xcc>)
 800f0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0c6:	601a      	str	r2, [r3, #0]
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	f3bf 8f6f 	isb	sy
 800f0d0:	e009      	b.n	800f0e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	3310      	adds	r3, #16
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7ff fca0 	bl	800ea1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	3324      	adds	r3, #36	; 0x24
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7ff fc9b 	bl	800ea1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f0e6:	f7ff fead 	bl	800ee44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f0ea:	2301      	movs	r3, #1
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	e000ed04 	.word	0xe000ed04

0800f0f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b08e      	sub	sp, #56	; 0x38
 800f0fc:	af02      	add	r7, sp, #8
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
 800f104:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d10a      	bne.n	800f122 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f10c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f110:	f383 8811 	msr	BASEPRI, r3
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f11e:	bf00      	nop
 800f120:	e7fe      	b.n	800f120 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d10a      	bne.n	800f13e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f128:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f12c:	f383 8811 	msr	BASEPRI, r3
 800f130:	f3bf 8f6f 	isb	sy
 800f134:	f3bf 8f4f 	dsb	sy
 800f138:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f13a:	bf00      	nop
 800f13c:	e7fe      	b.n	800f13c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d002      	beq.n	800f14a <xQueueGenericCreateStatic+0x52>
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d001      	beq.n	800f14e <xQueueGenericCreateStatic+0x56>
 800f14a:	2301      	movs	r3, #1
 800f14c:	e000      	b.n	800f150 <xQueueGenericCreateStatic+0x58>
 800f14e:	2300      	movs	r3, #0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10a      	bne.n	800f16a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f154:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f158:	f383 8811 	msr	BASEPRI, r3
 800f15c:	f3bf 8f6f 	isb	sy
 800f160:	f3bf 8f4f 	dsb	sy
 800f164:	623b      	str	r3, [r7, #32]
}
 800f166:	bf00      	nop
 800f168:	e7fe      	b.n	800f168 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d102      	bne.n	800f176 <xQueueGenericCreateStatic+0x7e>
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d101      	bne.n	800f17a <xQueueGenericCreateStatic+0x82>
 800f176:	2301      	movs	r3, #1
 800f178:	e000      	b.n	800f17c <xQueueGenericCreateStatic+0x84>
 800f17a:	2300      	movs	r3, #0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d10a      	bne.n	800f196 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f180:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f184:	f383 8811 	msr	BASEPRI, r3
 800f188:	f3bf 8f6f 	isb	sy
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	61fb      	str	r3, [r7, #28]
}
 800f192:	bf00      	nop
 800f194:	e7fe      	b.n	800f194 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f196:	2350      	movs	r3, #80	; 0x50
 800f198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	2b50      	cmp	r3, #80	; 0x50
 800f19e:	d00a      	beq.n	800f1b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f1a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f1a4:	f383 8811 	msr	BASEPRI, r3
 800f1a8:	f3bf 8f6f 	isb	sy
 800f1ac:	f3bf 8f4f 	dsb	sy
 800f1b0:	61bb      	str	r3, [r7, #24]
}
 800f1b2:	bf00      	nop
 800f1b4:	e7fe      	b.n	800f1b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f1b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d00d      	beq.n	800f1de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f1ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d0:	9300      	str	r3, [sp, #0]
 800f1d2:	4613      	mov	r3, r2
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	68b9      	ldr	r1, [r7, #8]
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f000 f805 	bl	800f1e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3730      	adds	r7, #48	; 0x30
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	60b9      	str	r1, [r7, #8]
 800f1f2:	607a      	str	r2, [r7, #4]
 800f1f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d103      	bne.n	800f204 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	69ba      	ldr	r2, [r7, #24]
 800f200:	601a      	str	r2, [r3, #0]
 800f202:	e002      	b.n	800f20a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f204:	69bb      	ldr	r3, [r7, #24]
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f216:	2101      	movs	r1, #1
 800f218:	69b8      	ldr	r0, [r7, #24]
 800f21a:	f7ff ff05 	bl	800f028 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	78fa      	ldrb	r2, [r7, #3]
 800f222:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f226:	bf00      	nop
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
	...

0800f230 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b08e      	sub	sp, #56	; 0x38
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
 800f23c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f23e:	2300      	movs	r3, #0
 800f240:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d10a      	bne.n	800f262 <xQueueGenericSend+0x32>
	__asm volatile
 800f24c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f250:	f383 8811 	msr	BASEPRI, r3
 800f254:	f3bf 8f6f 	isb	sy
 800f258:	f3bf 8f4f 	dsb	sy
 800f25c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f25e:	bf00      	nop
 800f260:	e7fe      	b.n	800f260 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d103      	bne.n	800f270 <xQueueGenericSend+0x40>
 800f268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d101      	bne.n	800f274 <xQueueGenericSend+0x44>
 800f270:	2301      	movs	r3, #1
 800f272:	e000      	b.n	800f276 <xQueueGenericSend+0x46>
 800f274:	2300      	movs	r3, #0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d10a      	bne.n	800f290 <xQueueGenericSend+0x60>
	__asm volatile
 800f27a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f27e:	f383 8811 	msr	BASEPRI, r3
 800f282:	f3bf 8f6f 	isb	sy
 800f286:	f3bf 8f4f 	dsb	sy
 800f28a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f28c:	bf00      	nop
 800f28e:	e7fe      	b.n	800f28e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	2b02      	cmp	r3, #2
 800f294:	d103      	bne.n	800f29e <xQueueGenericSend+0x6e>
 800f296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d101      	bne.n	800f2a2 <xQueueGenericSend+0x72>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e000      	b.n	800f2a4 <xQueueGenericSend+0x74>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10a      	bne.n	800f2be <xQueueGenericSend+0x8e>
	__asm volatile
 800f2a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	623b      	str	r3, [r7, #32]
}
 800f2ba:	bf00      	nop
 800f2bc:	e7fe      	b.n	800f2bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2be:	f001 fbfd 	bl	8010abc <xTaskGetSchedulerState>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d102      	bne.n	800f2ce <xQueueGenericSend+0x9e>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d101      	bne.n	800f2d2 <xQueueGenericSend+0xa2>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e000      	b.n	800f2d4 <xQueueGenericSend+0xa4>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d10a      	bne.n	800f2ee <xQueueGenericSend+0xbe>
	__asm volatile
 800f2d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f2dc:	f383 8811 	msr	BASEPRI, r3
 800f2e0:	f3bf 8f6f 	isb	sy
 800f2e4:	f3bf 8f4f 	dsb	sy
 800f2e8:	61fb      	str	r3, [r7, #28]
}
 800f2ea:	bf00      	nop
 800f2ec:	e7fe      	b.n	800f2ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2ee:	f7ff fd79 	bl	800ede4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d302      	bcc.n	800f304 <xQueueGenericSend+0xd4>
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	2b02      	cmp	r3, #2
 800f302:	d129      	bne.n	800f358 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f304:	683a      	ldr	r2, [r7, #0]
 800f306:	68b9      	ldr	r1, [r7, #8]
 800f308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f30a:	f000 fa0b 	bl	800f724 <prvCopyDataToQueue>
 800f30e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f314:	2b00      	cmp	r3, #0
 800f316:	d010      	beq.n	800f33a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31a:	3324      	adds	r3, #36	; 0x24
 800f31c:	4618      	mov	r0, r3
 800f31e:	f001 fa09 	bl	8010734 <xTaskRemoveFromEventList>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d013      	beq.n	800f350 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f328:	4b3f      	ldr	r3, [pc, #252]	; (800f428 <xQueueGenericSend+0x1f8>)
 800f32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f32e:	601a      	str	r2, [r3, #0]
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	f3bf 8f6f 	isb	sy
 800f338:	e00a      	b.n	800f350 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d007      	beq.n	800f350 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f340:	4b39      	ldr	r3, [pc, #228]	; (800f428 <xQueueGenericSend+0x1f8>)
 800f342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f346:	601a      	str	r2, [r3, #0]
 800f348:	f3bf 8f4f 	dsb	sy
 800f34c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f350:	f7ff fd78 	bl	800ee44 <vPortExitCritical>
				return pdPASS;
 800f354:	2301      	movs	r3, #1
 800f356:	e063      	b.n	800f420 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d103      	bne.n	800f366 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f35e:	f7ff fd71 	bl	800ee44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f362:	2300      	movs	r3, #0
 800f364:	e05c      	b.n	800f420 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d106      	bne.n	800f37a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f36c:	f107 0314 	add.w	r3, r7, #20
 800f370:	4618      	mov	r0, r3
 800f372:	f001 fa43 	bl	80107fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f376:	2301      	movs	r3, #1
 800f378:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f37a:	f7ff fd63 	bl	800ee44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f37e:	f000 ff73 	bl	8010268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f382:	f7ff fd2f 	bl	800ede4 <vPortEnterCritical>
 800f386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f38c:	b25b      	sxtb	r3, r3
 800f38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f392:	d103      	bne.n	800f39c <xQueueGenericSend+0x16c>
 800f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f396:	2200      	movs	r2, #0
 800f398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3a2:	b25b      	sxtb	r3, r3
 800f3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3a8:	d103      	bne.n	800f3b2 <xQueueGenericSend+0x182>
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3b2:	f7ff fd47 	bl	800ee44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f3b6:	1d3a      	adds	r2, r7, #4
 800f3b8:	f107 0314 	add.w	r3, r7, #20
 800f3bc:	4611      	mov	r1, r2
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f001 fa32 	bl	8010828 <xTaskCheckForTimeOut>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d124      	bne.n	800f414 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f3ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3cc:	f000 faa2 	bl	800f914 <prvIsQueueFull>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d018      	beq.n	800f408 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d8:	3310      	adds	r3, #16
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	4611      	mov	r1, r2
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f001 f958 	bl	8010694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f3e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3e6:	f000 fa2d 	bl	800f844 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f3ea:	f000 ff4b 	bl	8010284 <xTaskResumeAll>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	f47f af7c 	bne.w	800f2ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f3f6:	4b0c      	ldr	r3, [pc, #48]	; (800f428 <xQueueGenericSend+0x1f8>)
 800f3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3fc:	601a      	str	r2, [r3, #0]
 800f3fe:	f3bf 8f4f 	dsb	sy
 800f402:	f3bf 8f6f 	isb	sy
 800f406:	e772      	b.n	800f2ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f40a:	f000 fa1b 	bl	800f844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f40e:	f000 ff39 	bl	8010284 <xTaskResumeAll>
 800f412:	e76c      	b.n	800f2ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f416:	f000 fa15 	bl	800f844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f41a:	f000 ff33 	bl	8010284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f41e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f420:	4618      	mov	r0, r3
 800f422:	3738      	adds	r7, #56	; 0x38
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	e000ed04 	.word	0xe000ed04

0800f42c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b090      	sub	sp, #64	; 0x40
 800f430:	af00      	add	r7, sp, #0
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	60b9      	str	r1, [r7, #8]
 800f436:	607a      	str	r2, [r7, #4]
 800f438:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10a      	bne.n	800f45a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f444:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f448:	f383 8811 	msr	BASEPRI, r3
 800f44c:	f3bf 8f6f 	isb	sy
 800f450:	f3bf 8f4f 	dsb	sy
 800f454:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f456:	bf00      	nop
 800f458:	e7fe      	b.n	800f458 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d103      	bne.n	800f468 <xQueueGenericSendFromISR+0x3c>
 800f460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f464:	2b00      	cmp	r3, #0
 800f466:	d101      	bne.n	800f46c <xQueueGenericSendFromISR+0x40>
 800f468:	2301      	movs	r3, #1
 800f46a:	e000      	b.n	800f46e <xQueueGenericSendFromISR+0x42>
 800f46c:	2300      	movs	r3, #0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d10a      	bne.n	800f488 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f472:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f476:	f383 8811 	msr	BASEPRI, r3
 800f47a:	f3bf 8f6f 	isb	sy
 800f47e:	f3bf 8f4f 	dsb	sy
 800f482:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f484:	bf00      	nop
 800f486:	e7fe      	b.n	800f486 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	2b02      	cmp	r3, #2
 800f48c:	d103      	bne.n	800f496 <xQueueGenericSendFromISR+0x6a>
 800f48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f492:	2b01      	cmp	r3, #1
 800f494:	d101      	bne.n	800f49a <xQueueGenericSendFromISR+0x6e>
 800f496:	2301      	movs	r3, #1
 800f498:	e000      	b.n	800f49c <xQueueGenericSendFromISR+0x70>
 800f49a:	2300      	movs	r3, #0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d10a      	bne.n	800f4b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f4a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f4a4:	f383 8811 	msr	BASEPRI, r3
 800f4a8:	f3bf 8f6f 	isb	sy
 800f4ac:	f3bf 8f4f 	dsb	sy
 800f4b0:	623b      	str	r3, [r7, #32]
}
 800f4b2:	bf00      	nop
 800f4b4:	e7fe      	b.n	800f4b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f4b6:	f7ff fd77 	bl	800efa8 <vPortValidateInterruptPriority>
	__asm volatile
 800f4ba:	f3ef 8211 	mrs	r2, BASEPRI
 800f4be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f4c2:	f383 8811 	msr	BASEPRI, r3
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	61fa      	str	r2, [r7, #28]
 800f4d0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800f4d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d302      	bcc.n	800f4e8 <xQueueGenericSendFromISR+0xbc>
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	2b02      	cmp	r3, #2
 800f4e6:	d12f      	bne.n	800f548 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4f8:	683a      	ldr	r2, [r7, #0]
 800f4fa:	68b9      	ldr	r1, [r7, #8]
 800f4fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4fe:	f000 f911 	bl	800f724 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f502:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f50a:	d112      	bne.n	800f532 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f510:	2b00      	cmp	r3, #0
 800f512:	d016      	beq.n	800f542 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f516:	3324      	adds	r3, #36	; 0x24
 800f518:	4618      	mov	r0, r3
 800f51a:	f001 f90b 	bl	8010734 <xTaskRemoveFromEventList>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00e      	beq.n	800f542 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d00b      	beq.n	800f542 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2201      	movs	r2, #1
 800f52e:	601a      	str	r2, [r3, #0]
 800f530:	e007      	b.n	800f542 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f532:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f536:	3301      	adds	r3, #1
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	b25a      	sxtb	r2, r3
 800f53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f542:	2301      	movs	r3, #1
 800f544:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f546:	e001      	b.n	800f54c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f548:	2300      	movs	r3, #0
 800f54a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f54e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	f383 8811 	msr	BASEPRI, r3
}
 800f556:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3740      	adds	r7, #64	; 0x40
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
	...

0800f564 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08c      	sub	sp, #48	; 0x30
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f570:	2300      	movs	r3, #0
 800f572:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d10a      	bne.n	800f594 <xQueueReceive+0x30>
	__asm volatile
 800f57e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	623b      	str	r3, [r7, #32]
}
 800f590:	bf00      	nop
 800f592:	e7fe      	b.n	800f592 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d103      	bne.n	800f5a2 <xQueueReceive+0x3e>
 800f59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d101      	bne.n	800f5a6 <xQueueReceive+0x42>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	e000      	b.n	800f5a8 <xQueueReceive+0x44>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10a      	bne.n	800f5c2 <xQueueReceive+0x5e>
	__asm volatile
 800f5ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	61fb      	str	r3, [r7, #28]
}
 800f5be:	bf00      	nop
 800f5c0:	e7fe      	b.n	800f5c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5c2:	f001 fa7b 	bl	8010abc <xTaskGetSchedulerState>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d102      	bne.n	800f5d2 <xQueueReceive+0x6e>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d101      	bne.n	800f5d6 <xQueueReceive+0x72>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e000      	b.n	800f5d8 <xQueueReceive+0x74>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d10a      	bne.n	800f5f2 <xQueueReceive+0x8e>
	__asm volatile
 800f5dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f5e0:	f383 8811 	msr	BASEPRI, r3
 800f5e4:	f3bf 8f6f 	isb	sy
 800f5e8:	f3bf 8f4f 	dsb	sy
 800f5ec:	61bb      	str	r3, [r7, #24]
}
 800f5ee:	bf00      	nop
 800f5f0:	e7fe      	b.n	800f5f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5f2:	f7ff fbf7 	bl	800ede4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d01f      	beq.n	800f642 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f602:	68b9      	ldr	r1, [r7, #8]
 800f604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f606:	f000 f8f7 	bl	800f7f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60c:	1e5a      	subs	r2, r3, #1
 800f60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f610:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f614:	691b      	ldr	r3, [r3, #16]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d00f      	beq.n	800f63a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61c:	3310      	adds	r3, #16
 800f61e:	4618      	mov	r0, r3
 800f620:	f001 f888 	bl	8010734 <xTaskRemoveFromEventList>
 800f624:	4603      	mov	r3, r0
 800f626:	2b00      	cmp	r3, #0
 800f628:	d007      	beq.n	800f63a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f62a:	4b3d      	ldr	r3, [pc, #244]	; (800f720 <xQueueReceive+0x1bc>)
 800f62c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f630:	601a      	str	r2, [r3, #0]
 800f632:	f3bf 8f4f 	dsb	sy
 800f636:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f63a:	f7ff fc03 	bl	800ee44 <vPortExitCritical>
				return pdPASS;
 800f63e:	2301      	movs	r3, #1
 800f640:	e069      	b.n	800f716 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d103      	bne.n	800f650 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f648:	f7ff fbfc 	bl	800ee44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f64c:	2300      	movs	r3, #0
 800f64e:	e062      	b.n	800f716 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f652:	2b00      	cmp	r3, #0
 800f654:	d106      	bne.n	800f664 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f656:	f107 0310 	add.w	r3, r7, #16
 800f65a:	4618      	mov	r0, r3
 800f65c:	f001 f8ce 	bl	80107fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f660:	2301      	movs	r3, #1
 800f662:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f664:	f7ff fbee 	bl	800ee44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f668:	f000 fdfe 	bl	8010268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f66c:	f7ff fbba 	bl	800ede4 <vPortEnterCritical>
 800f670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f676:	b25b      	sxtb	r3, r3
 800f678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f67c:	d103      	bne.n	800f686 <xQueueReceive+0x122>
 800f67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f680:	2200      	movs	r2, #0
 800f682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f68c:	b25b      	sxtb	r3, r3
 800f68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f692:	d103      	bne.n	800f69c <xQueueReceive+0x138>
 800f694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f696:	2200      	movs	r2, #0
 800f698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f69c:	f7ff fbd2 	bl	800ee44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6a0:	1d3a      	adds	r2, r7, #4
 800f6a2:	f107 0310 	add.w	r3, r7, #16
 800f6a6:	4611      	mov	r1, r2
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f001 f8bd 	bl	8010828 <xTaskCheckForTimeOut>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d123      	bne.n	800f6fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6b6:	f000 f917 	bl	800f8e8 <prvIsQueueEmpty>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d017      	beq.n	800f6f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c2:	3324      	adds	r3, #36	; 0x24
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	4611      	mov	r1, r2
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f000 ffe3 	bl	8010694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f6ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6d0:	f000 f8b8 	bl	800f844 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f6d4:	f000 fdd6 	bl	8010284 <xTaskResumeAll>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d189      	bne.n	800f5f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f6de:	4b10      	ldr	r3, [pc, #64]	; (800f720 <xQueueReceive+0x1bc>)
 800f6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	f3bf 8f4f 	dsb	sy
 800f6ea:	f3bf 8f6f 	isb	sy
 800f6ee:	e780      	b.n	800f5f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6f2:	f000 f8a7 	bl	800f844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6f6:	f000 fdc5 	bl	8010284 <xTaskResumeAll>
 800f6fa:	e77a      	b.n	800f5f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f6fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6fe:	f000 f8a1 	bl	800f844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f702:	f000 fdbf 	bl	8010284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f708:	f000 f8ee 	bl	800f8e8 <prvIsQueueEmpty>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f43f af6f 	beq.w	800f5f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f714:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f716:	4618      	mov	r0, r3
 800f718:	3730      	adds	r7, #48	; 0x30
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	e000ed04 	.word	0xe000ed04

0800f724 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b086      	sub	sp, #24
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f730:	2300      	movs	r3, #0
 800f732:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f738:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d10d      	bne.n	800f75e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d14d      	bne.n	800f7e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	4618      	mov	r0, r3
 800f750:	f001 f9d2 	bl	8010af8 <xTaskPriorityDisinherit>
 800f754:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2200      	movs	r2, #0
 800f75a:	609a      	str	r2, [r3, #8]
 800f75c:	e043      	b.n	800f7e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d119      	bne.n	800f798 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	6858      	ldr	r0, [r3, #4]
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f76c:	461a      	mov	r2, r3
 800f76e:	68b9      	ldr	r1, [r7, #8]
 800f770:	f003 fcf8 	bl	8013164 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	685a      	ldr	r2, [r3, #4]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f77c:	441a      	add	r2, r3
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	689b      	ldr	r3, [r3, #8]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d32b      	bcc.n	800f7e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	605a      	str	r2, [r3, #4]
 800f796:	e026      	b.n	800f7e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68d8      	ldr	r0, [r3, #12]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	68b9      	ldr	r1, [r7, #8]
 800f7a4:	f003 fcde 	bl	8013164 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	68da      	ldr	r2, [r3, #12]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7b0:	425b      	negs	r3, r3
 800f7b2:	441a      	add	r2, r3
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	68da      	ldr	r2, [r3, #12]
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d207      	bcs.n	800f7d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	689a      	ldr	r2, [r3, #8]
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7cc:	425b      	negs	r3, r3
 800f7ce:	441a      	add	r2, r3
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	d105      	bne.n	800f7e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d002      	beq.n	800f7e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	3b01      	subs	r3, #1
 800f7e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	1c5a      	adds	r2, r3, #1
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f7ee:	697b      	ldr	r3, [r7, #20]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3718      	adds	r7, #24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f806:	2b00      	cmp	r3, #0
 800f808:	d018      	beq.n	800f83c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	68da      	ldr	r2, [r3, #12]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f812:	441a      	add	r2, r3
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	68da      	ldr	r2, [r3, #12]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	429a      	cmp	r2, r3
 800f822:	d303      	bcc.n	800f82c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	68d9      	ldr	r1, [r3, #12]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f834:	461a      	mov	r2, r3
 800f836:	6838      	ldr	r0, [r7, #0]
 800f838:	f003 fc94 	bl	8013164 <memcpy>
	}
}
 800f83c:	bf00      	nop
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f84c:	f7ff faca 	bl	800ede4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f856:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f858:	e011      	b.n	800f87e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d012      	beq.n	800f888 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	3324      	adds	r3, #36	; 0x24
 800f866:	4618      	mov	r0, r3
 800f868:	f000 ff64 	bl	8010734 <xTaskRemoveFromEventList>
 800f86c:	4603      	mov	r3, r0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d001      	beq.n	800f876 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f872:	f001 f84b 	bl	801090c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f876:	7bfb      	ldrb	r3, [r7, #15]
 800f878:	3b01      	subs	r3, #1
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f87e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f882:	2b00      	cmp	r3, #0
 800f884:	dce9      	bgt.n	800f85a <prvUnlockQueue+0x16>
 800f886:	e000      	b.n	800f88a <prvUnlockQueue+0x46>
					break;
 800f888:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	22ff      	movs	r2, #255	; 0xff
 800f88e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f892:	f7ff fad7 	bl	800ee44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f896:	f7ff faa5 	bl	800ede4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f8a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f8a2:	e011      	b.n	800f8c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d012      	beq.n	800f8d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	3310      	adds	r3, #16
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f000 ff3f 	bl	8010734 <xTaskRemoveFromEventList>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d001      	beq.n	800f8c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f8bc:	f001 f826 	bl	801090c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f8c0:	7bbb      	ldrb	r3, [r7, #14]
 800f8c2:	3b01      	subs	r3, #1
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f8c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	dce9      	bgt.n	800f8a4 <prvUnlockQueue+0x60>
 800f8d0:	e000      	b.n	800f8d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f8d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	22ff      	movs	r2, #255	; 0xff
 800f8d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f8dc:	f7ff fab2 	bl	800ee44 <vPortExitCritical>
}
 800f8e0:	bf00      	nop
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8f0:	f7ff fa78 	bl	800ede4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d102      	bne.n	800f902 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	60fb      	str	r3, [r7, #12]
 800f900:	e001      	b.n	800f906 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f902:	2300      	movs	r3, #0
 800f904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f906:	f7ff fa9d 	bl	800ee44 <vPortExitCritical>

	return xReturn;
 800f90a:	68fb      	ldr	r3, [r7, #12]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f91c:	f7ff fa62 	bl	800ede4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f928:	429a      	cmp	r2, r3
 800f92a:	d102      	bne.n	800f932 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f92c:	2301      	movs	r3, #1
 800f92e:	60fb      	str	r3, [r7, #12]
 800f930:	e001      	b.n	800f936 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f932:	2300      	movs	r3, #0
 800f934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f936:	f7ff fa85 	bl	800ee44 <vPortExitCritical>

	return xReturn;
 800f93a:	68fb      	ldr	r3, [r7, #12]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f944:	b480      	push	{r7}
 800f946:	b085      	sub	sp, #20
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f94e:	2300      	movs	r3, #0
 800f950:	60fb      	str	r3, [r7, #12]
 800f952:	e014      	b.n	800f97e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f954:	4a0f      	ldr	r2, [pc, #60]	; (800f994 <vQueueAddToRegistry+0x50>)
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d10b      	bne.n	800f978 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f960:	490c      	ldr	r1, [pc, #48]	; (800f994 <vQueueAddToRegistry+0x50>)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	683a      	ldr	r2, [r7, #0]
 800f966:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f96a:	4a0a      	ldr	r2, [pc, #40]	; (800f994 <vQueueAddToRegistry+0x50>)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	00db      	lsls	r3, r3, #3
 800f970:	4413      	add	r3, r2
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f976:	e006      	b.n	800f986 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	3301      	adds	r3, #1
 800f97c:	60fb      	str	r3, [r7, #12]
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2b07      	cmp	r3, #7
 800f982:	d9e7      	bls.n	800f954 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f984:	bf00      	nop
 800f986:	bf00      	nop
 800f988:	3714      	adds	r7, #20
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	20007db0 	.word	0x20007db0

0800f998 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b086      	sub	sp, #24
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f9a8:	f7ff fa1c 	bl	800ede4 <vPortEnterCritical>
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9b2:	b25b      	sxtb	r3, r3
 800f9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b8:	d103      	bne.n	800f9c2 <vQueueWaitForMessageRestricted+0x2a>
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9c8:	b25b      	sxtb	r3, r3
 800f9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ce:	d103      	bne.n	800f9d8 <vQueueWaitForMessageRestricted+0x40>
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9d8:	f7ff fa34 	bl	800ee44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d106      	bne.n	800f9f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	3324      	adds	r3, #36	; 0x24
 800f9e8:	687a      	ldr	r2, [r7, #4]
 800f9ea:	68b9      	ldr	r1, [r7, #8]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f000 fe75 	bl	80106dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f9f2:	6978      	ldr	r0, [r7, #20]
 800f9f4:	f7ff ff26 	bl	800f844 <prvUnlockQueue>
	}
 800f9f8:	bf00      	nop
 800f9fa:	3718      	adds	r7, #24
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b08e      	sub	sp, #56	; 0x38
 800fa04:	af04      	add	r7, sp, #16
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	607a      	str	r2, [r7, #4]
 800fa0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fa0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d10a      	bne.n	800fa2a <xTaskCreateStatic+0x2a>
	__asm volatile
 800fa14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fa18:	f383 8811 	msr	BASEPRI, r3
 800fa1c:	f3bf 8f6f 	isb	sy
 800fa20:	f3bf 8f4f 	dsb	sy
 800fa24:	623b      	str	r3, [r7, #32]
}
 800fa26:	bf00      	nop
 800fa28:	e7fe      	b.n	800fa28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d10a      	bne.n	800fa46 <xTaskCreateStatic+0x46>
	__asm volatile
 800fa30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fa34:	f383 8811 	msr	BASEPRI, r3
 800fa38:	f3bf 8f6f 	isb	sy
 800fa3c:	f3bf 8f4f 	dsb	sy
 800fa40:	61fb      	str	r3, [r7, #28]
}
 800fa42:	bf00      	nop
 800fa44:	e7fe      	b.n	800fa44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fa46:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800fa4a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800fa52:	d00a      	beq.n	800fa6a <xTaskCreateStatic+0x6a>
	__asm volatile
 800fa54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fa58:	f383 8811 	msr	BASEPRI, r3
 800fa5c:	f3bf 8f6f 	isb	sy
 800fa60:	f3bf 8f4f 	dsb	sy
 800fa64:	61bb      	str	r3, [r7, #24]
}
 800fa66:	bf00      	nop
 800fa68:	e7fe      	b.n	800fa68 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fa6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d01e      	beq.n	800fab0 <xTaskCreateStatic+0xb0>
 800fa72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d01b      	beq.n	800fab0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa84:	2202      	movs	r2, #2
 800fa86:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	9303      	str	r3, [sp, #12]
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa90:	9302      	str	r3, [sp, #8]
 800fa92:	f107 0314 	add.w	r3, r7, #20
 800fa96:	9301      	str	r3, [sp, #4]
 800fa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	68b9      	ldr	r1, [r7, #8]
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f000 f852 	bl	800fb4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800faa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800faaa:	f000 f907 	bl	800fcbc <prvAddNewTaskToReadyList>
 800faae:	e001      	b.n	800fab4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800fab0:	2300      	movs	r3, #0
 800fab2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fab4:	697b      	ldr	r3, [r7, #20]
	}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3728      	adds	r7, #40	; 0x28
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b08c      	sub	sp, #48	; 0x30
 800fac2:	af04      	add	r7, sp, #16
 800fac4:	60f8      	str	r0, [r7, #12]
 800fac6:	60b9      	str	r1, [r7, #8]
 800fac8:	603b      	str	r3, [r7, #0]
 800faca:	4613      	mov	r3, r2
 800facc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800face:	88fb      	ldrh	r3, [r7, #6]
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe ff40 	bl	800e958 <pvPortMalloc>
 800fad8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d00f      	beq.n	800fb00 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fae0:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 800fae4:	f7fe ff38 	bl	800e958 <pvPortMalloc>
 800fae8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d003      	beq.n	800faf8 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	697a      	ldr	r2, [r7, #20]
 800faf4:	631a      	str	r2, [r3, #48]	; 0x30
 800faf6:	e005      	b.n	800fb04 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800faf8:	6978      	ldr	r0, [r7, #20]
 800fafa:	f7fe ff77 	bl	800e9ec <vPortFree>
 800fafe:	e001      	b.n	800fb04 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fb00:	2300      	movs	r3, #0
 800fb02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d017      	beq.n	800fb3a <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fb12:	88fa      	ldrh	r2, [r7, #6]
 800fb14:	2300      	movs	r3, #0
 800fb16:	9303      	str	r3, [sp, #12]
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	9302      	str	r3, [sp, #8]
 800fb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1e:	9301      	str	r3, [sp, #4]
 800fb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb22:	9300      	str	r3, [sp, #0]
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	68b9      	ldr	r1, [r7, #8]
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f000 f80f 	bl	800fb4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb2e:	69f8      	ldr	r0, [r7, #28]
 800fb30:	f000 f8c4 	bl	800fcbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fb34:	2301      	movs	r3, #1
 800fb36:	61bb      	str	r3, [r7, #24]
 800fb38:	e002      	b.n	800fb40 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fb40:	69bb      	ldr	r3, [r7, #24]
	}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3720      	adds	r7, #32
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
	...

0800fb4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b088      	sub	sp, #32
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]
 800fb58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	009b      	lsls	r3, r3, #2
 800fb62:	461a      	mov	r2, r3
 800fb64:	21a5      	movs	r1, #165	; 0xa5
 800fb66:	f003 fb0b 	bl	8013180 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fb74:	3b01      	subs	r3, #1
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4413      	add	r3, r2
 800fb7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fb7c:	69bb      	ldr	r3, [r7, #24]
 800fb7e:	f023 0307 	bic.w	r3, r3, #7
 800fb82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fb84:	69bb      	ldr	r3, [r7, #24]
 800fb86:	f003 0307 	and.w	r3, r3, #7
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00a      	beq.n	800fba4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fb8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	617b      	str	r3, [r7, #20]
}
 800fba0:	bf00      	nop
 800fba2:	e7fe      	b.n	800fba2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800fba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba6:	69ba      	ldr	r2, [r7, #24]
 800fba8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d01f      	beq.n	800fbf2 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	61fb      	str	r3, [r7, #28]
 800fbb6:	e012      	b.n	800fbde <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fbb8:	68ba      	ldr	r2, [r7, #8]
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	7819      	ldrb	r1, [r3, #0]
 800fbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	3334      	adds	r3, #52	; 0x34
 800fbc8:	460a      	mov	r2, r1
 800fbca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fbcc:	68ba      	ldr	r2, [r7, #8]
 800fbce:	69fb      	ldr	r3, [r7, #28]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d006      	beq.n	800fbe6 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	61fb      	str	r3, [r7, #28]
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	2bfe      	cmp	r3, #254	; 0xfe
 800fbe2:	d9e9      	bls.n	800fbb8 <prvInitialiseNewTask+0x6c>
 800fbe4:	e000      	b.n	800fbe8 <prvInitialiseNewTask+0x9c>
			{
				break;
 800fbe6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbea:	2200      	movs	r2, #0
 800fbec:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800fbf0:	e003      	b.n	800fbfa <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfc:	2b37      	cmp	r3, #55	; 0x37
 800fbfe:	d901      	bls.n	800fc04 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fc00:	2337      	movs	r3, #55	; 0x37
 800fc02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc0e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800fc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc14:	2200      	movs	r2, #0
 800fc16:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1c:	3304      	adds	r3, #4
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fe ff1c 	bl	800ea5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc26:	3318      	adds	r3, #24
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fe ff17 	bl	800ea5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800fc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc46:	2200      	movs	r2, #0
 800fc48:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4e:	2200      	movs	r2, #0
 800fc50:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc56:	2200      	movs	r2, #0
 800fc58:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc5e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800fc62:	2260      	movs	r2, #96	; 0x60
 800fc64:	2100      	movs	r1, #0
 800fc66:	4618      	mov	r0, r3
 800fc68:	f003 fa8a 	bl	8013180 <memset>
 800fc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc6e:	4a10      	ldr	r2, [pc, #64]	; (800fcb0 <prvInitialiseNewTask+0x164>)
 800fc70:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800fc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc76:	4a0f      	ldr	r2, [pc, #60]	; (800fcb4 <prvInitialiseNewTask+0x168>)
 800fc78:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7e:	4a0e      	ldr	r2, [pc, #56]	; (800fcb8 <prvInitialiseNewTask+0x16c>)
 800fc80:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800fc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fc8c:	683a      	ldr	r2, [r7, #0]
 800fc8e:	68f9      	ldr	r1, [r7, #12]
 800fc90:	69b8      	ldr	r0, [r7, #24]
 800fc92:	f7fe ff77 	bl	800eb84 <pxPortInitialiseStack>
 800fc96:	4602      	mov	r2, r0
 800fc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d002      	beq.n	800fca8 <prvInitialiseNewTask+0x15c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fca6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fca8:	bf00      	nop
 800fcaa:	3720      	adds	r7, #32
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	080142d8 	.word	0x080142d8
 800fcb4:	080142f8 	.word	0x080142f8
 800fcb8:	080142b8 	.word	0x080142b8

0800fcbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fcc4:	f7ff f88e 	bl	800ede4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fcc8:	4b2d      	ldr	r3, [pc, #180]	; (800fd80 <prvAddNewTaskToReadyList+0xc4>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	3301      	adds	r3, #1
 800fcce:	4a2c      	ldr	r2, [pc, #176]	; (800fd80 <prvAddNewTaskToReadyList+0xc4>)
 800fcd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fcd2:	4b2c      	ldr	r3, [pc, #176]	; (800fd84 <prvAddNewTaskToReadyList+0xc8>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d109      	bne.n	800fcee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fcda:	4a2a      	ldr	r2, [pc, #168]	; (800fd84 <prvAddNewTaskToReadyList+0xc8>)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fce0:	4b27      	ldr	r3, [pc, #156]	; (800fd80 <prvAddNewTaskToReadyList+0xc4>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d110      	bne.n	800fd0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fce8:	f000 fe24 	bl	8010934 <prvInitialiseTaskLists>
 800fcec:	e00d      	b.n	800fd0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fcee:	4b26      	ldr	r3, [pc, #152]	; (800fd88 <prvAddNewTaskToReadyList+0xcc>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d109      	bne.n	800fd0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fcf6:	4b23      	ldr	r3, [pc, #140]	; (800fd84 <prvAddNewTaskToReadyList+0xc8>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d802      	bhi.n	800fd0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fd04:	4a1f      	ldr	r2, [pc, #124]	; (800fd84 <prvAddNewTaskToReadyList+0xc8>)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fd0a:	4b20      	ldr	r3, [pc, #128]	; (800fd8c <prvAddNewTaskToReadyList+0xd0>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	4a1e      	ldr	r2, [pc, #120]	; (800fd8c <prvAddNewTaskToReadyList+0xd0>)
 800fd12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fd14:	4b1d      	ldr	r3, [pc, #116]	; (800fd8c <prvAddNewTaskToReadyList+0xd0>)
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd22:	4b1b      	ldr	r3, [pc, #108]	; (800fd90 <prvAddNewTaskToReadyList+0xd4>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d903      	bls.n	800fd32 <prvAddNewTaskToReadyList+0x76>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd2e:	4a18      	ldr	r2, [pc, #96]	; (800fd90 <prvAddNewTaskToReadyList+0xd4>)
 800fd30:	6013      	str	r3, [r2, #0]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd36:	4613      	mov	r3, r2
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	4413      	add	r3, r2
 800fd3c:	009b      	lsls	r3, r3, #2
 800fd3e:	4a15      	ldr	r2, [pc, #84]	; (800fd94 <prvAddNewTaskToReadyList+0xd8>)
 800fd40:	441a      	add	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	3304      	adds	r3, #4
 800fd46:	4619      	mov	r1, r3
 800fd48:	4610      	mov	r0, r2
 800fd4a:	f7fe fe94 	bl	800ea76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fd4e:	f7ff f879 	bl	800ee44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fd52:	4b0d      	ldr	r3, [pc, #52]	; (800fd88 <prvAddNewTaskToReadyList+0xcc>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00e      	beq.n	800fd78 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fd5a:	4b0a      	ldr	r3, [pc, #40]	; (800fd84 <prvAddNewTaskToReadyList+0xc8>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d207      	bcs.n	800fd78 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fd68:	4b0b      	ldr	r3, [pc, #44]	; (800fd98 <prvAddNewTaskToReadyList+0xdc>)
 800fd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	f3bf 8f4f 	dsb	sy
 800fd74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd78:	bf00      	nop
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	200082c8 	.word	0x200082c8
 800fd84:	20007df0 	.word	0x20007df0
 800fd88:	200082d4 	.word	0x200082d4
 800fd8c:	200082e4 	.word	0x200082e4
 800fd90:	200082d0 	.word	0x200082d0
 800fd94:	20007df4 	.word	0x20007df4
 800fd98:	e000ed04 	.word	0xe000ed04

0800fd9c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b08a      	sub	sp, #40	; 0x28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800fda6:	2300      	movs	r3, #0
 800fda8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d10a      	bne.n	800fdc6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800fdb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fdb4:	f383 8811 	msr	BASEPRI, r3
 800fdb8:	f3bf 8f6f 	isb	sy
 800fdbc:	f3bf 8f4f 	dsb	sy
 800fdc0:	617b      	str	r3, [r7, #20]
}
 800fdc2:	bf00      	nop
 800fdc4:	e7fe      	b.n	800fdc4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d10a      	bne.n	800fde2 <vTaskDelayUntil+0x46>
	__asm volatile
 800fdcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fdd0:	f383 8811 	msr	BASEPRI, r3
 800fdd4:	f3bf 8f6f 	isb	sy
 800fdd8:	f3bf 8f4f 	dsb	sy
 800fddc:	613b      	str	r3, [r7, #16]
}
 800fdde:	bf00      	nop
 800fde0:	e7fe      	b.n	800fde0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800fde2:	4b2a      	ldr	r3, [pc, #168]	; (800fe8c <vTaskDelayUntil+0xf0>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d00a      	beq.n	800fe00 <vTaskDelayUntil+0x64>
	__asm volatile
 800fdea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fdee:	f383 8811 	msr	BASEPRI, r3
 800fdf2:	f3bf 8f6f 	isb	sy
 800fdf6:	f3bf 8f4f 	dsb	sy
 800fdfa:	60fb      	str	r3, [r7, #12]
}
 800fdfc:	bf00      	nop
 800fdfe:	e7fe      	b.n	800fdfe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800fe00:	f000 fa32 	bl	8010268 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800fe04:	4b22      	ldr	r3, [pc, #136]	; (800fe90 <vTaskDelayUntil+0xf4>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	683a      	ldr	r2, [r7, #0]
 800fe10:	4413      	add	r3, r2
 800fe12:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	6a3a      	ldr	r2, [r7, #32]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d20b      	bcs.n	800fe36 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	69fa      	ldr	r2, [r7, #28]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d211      	bcs.n	800fe4c <vTaskDelayUntil+0xb0>
 800fe28:	69fa      	ldr	r2, [r7, #28]
 800fe2a:	6a3b      	ldr	r3, [r7, #32]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d90d      	bls.n	800fe4c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800fe30:	2301      	movs	r3, #1
 800fe32:	627b      	str	r3, [r7, #36]	; 0x24
 800fe34:	e00a      	b.n	800fe4c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	69fa      	ldr	r2, [r7, #28]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d303      	bcc.n	800fe48 <vTaskDelayUntil+0xac>
 800fe40:	69fa      	ldr	r2, [r7, #28]
 800fe42:	6a3b      	ldr	r3, [r7, #32]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d901      	bls.n	800fe4c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	69fa      	ldr	r2, [r7, #28]
 800fe50:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800fe52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d006      	beq.n	800fe66 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800fe58:	69fa      	ldr	r2, [r7, #28]
 800fe5a:	6a3b      	ldr	r3, [r7, #32]
 800fe5c:	1ad3      	subs	r3, r2, r3
 800fe5e:	2100      	movs	r1, #0
 800fe60:	4618      	mov	r0, r3
 800fe62:	f000 febd 	bl	8010be0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800fe66:	f000 fa0d 	bl	8010284 <xTaskResumeAll>
 800fe6a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d107      	bne.n	800fe82 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800fe72:	4b08      	ldr	r3, [pc, #32]	; (800fe94 <vTaskDelayUntil+0xf8>)
 800fe74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe78:	601a      	str	r2, [r3, #0]
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe82:	bf00      	nop
 800fe84:	3728      	adds	r7, #40	; 0x28
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	200082f0 	.word	0x200082f0
 800fe90:	200082cc 	.word	0x200082cc
 800fe94:	e000ed04 	.word	0xe000ed04

0800fe98 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fea0:	f7fe ffa0 	bl	800ede4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d102      	bne.n	800feb0 <vTaskSuspend+0x18>
 800feaa:	4b30      	ldr	r3, [pc, #192]	; (800ff6c <vTaskSuspend+0xd4>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	e000      	b.n	800feb2 <vTaskSuspend+0x1a>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	3304      	adds	r3, #4
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe fe39 	bl	800eb30 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d004      	beq.n	800fed0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	3318      	adds	r3, #24
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fe fe30 	bl	800eb30 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	3304      	adds	r3, #4
 800fed4:	4619      	mov	r1, r3
 800fed6:	4826      	ldr	r0, [pc, #152]	; (800ff70 <vTaskSuspend+0xd8>)
 800fed8:	f7fe fdcd 	bl	800ea76 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d103      	bne.n	800fef0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2200      	movs	r2, #0
 800feec:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800fef0:	f7fe ffa8 	bl	800ee44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800fef4:	4b1f      	ldr	r3, [pc, #124]	; (800ff74 <vTaskSuspend+0xdc>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d005      	beq.n	800ff08 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800fefc:	f7fe ff72 	bl	800ede4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ff00:	f000 fdbc 	bl	8010a7c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ff04:	f7fe ff9e 	bl	800ee44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ff08:	4b18      	ldr	r3, [pc, #96]	; (800ff6c <vTaskSuspend+0xd4>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	68fa      	ldr	r2, [r7, #12]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d127      	bne.n	800ff62 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800ff12:	4b18      	ldr	r3, [pc, #96]	; (800ff74 <vTaskSuspend+0xdc>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d017      	beq.n	800ff4a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ff1a:	4b17      	ldr	r3, [pc, #92]	; (800ff78 <vTaskSuspend+0xe0>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00a      	beq.n	800ff38 <vTaskSuspend+0xa0>
	__asm volatile
 800ff22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ff26:	f383 8811 	msr	BASEPRI, r3
 800ff2a:	f3bf 8f6f 	isb	sy
 800ff2e:	f3bf 8f4f 	dsb	sy
 800ff32:	60bb      	str	r3, [r7, #8]
}
 800ff34:	bf00      	nop
 800ff36:	e7fe      	b.n	800ff36 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ff38:	4b10      	ldr	r3, [pc, #64]	; (800ff7c <vTaskSuspend+0xe4>)
 800ff3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff3e:	601a      	str	r2, [r3, #0]
 800ff40:	f3bf 8f4f 	dsb	sy
 800ff44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff48:	e00b      	b.n	800ff62 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ff4a:	4b09      	ldr	r3, [pc, #36]	; (800ff70 <vTaskSuspend+0xd8>)
 800ff4c:	681a      	ldr	r2, [r3, #0]
 800ff4e:	4b0c      	ldr	r3, [pc, #48]	; (800ff80 <vTaskSuspend+0xe8>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d103      	bne.n	800ff5e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800ff56:	4b05      	ldr	r3, [pc, #20]	; (800ff6c <vTaskSuspend+0xd4>)
 800ff58:	2200      	movs	r2, #0
 800ff5a:	601a      	str	r2, [r3, #0]
	}
 800ff5c:	e001      	b.n	800ff62 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800ff5e:	f000 fb01 	bl	8010564 <vTaskSwitchContext>
	}
 800ff62:	bf00      	nop
 800ff64:	3710      	adds	r7, #16
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	20007df0 	.word	0x20007df0
 800ff70:	200082b0 	.word	0x200082b0
 800ff74:	200082d4 	.word	0x200082d4
 800ff78:	200082f0 	.word	0x200082f0
 800ff7c:	e000ed04 	.word	0xe000ed04
 800ff80:	200082c8 	.word	0x200082c8

0800ff84 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ff84:	b480      	push	{r7}
 800ff86:	b087      	sub	sp, #28
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d10a      	bne.n	800ffb0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ff9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ff9e:	f383 8811 	msr	BASEPRI, r3
 800ffa2:	f3bf 8f6f 	isb	sy
 800ffa6:	f3bf 8f4f 	dsb	sy
 800ffaa:	60fb      	str	r3, [r7, #12]
}
 800ffac:	bf00      	nop
 800ffae:	e7fe      	b.n	800ffae <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	695b      	ldr	r3, [r3, #20]
 800ffb4:	4a0a      	ldr	r2, [pc, #40]	; (800ffe0 <prvTaskIsTaskSuspended+0x5c>)
 800ffb6:	4293      	cmp	r3, r2
 800ffb8:	d10a      	bne.n	800ffd0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffbe:	4a09      	ldr	r2, [pc, #36]	; (800ffe4 <prvTaskIsTaskSuspended+0x60>)
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d005      	beq.n	800ffd0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d101      	bne.n	800ffd0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ffd0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	371c      	adds	r7, #28
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr
 800ffde:	bf00      	nop
 800ffe0:	200082b0 	.word	0x200082b0
 800ffe4:	20008284 	.word	0x20008284

0800ffe8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d10a      	bne.n	8010010 <vTaskResume+0x28>
	__asm volatile
 800fffa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fffe:	f383 8811 	msr	BASEPRI, r3
 8010002:	f3bf 8f6f 	isb	sy
 8010006:	f3bf 8f4f 	dsb	sy
 801000a:	60bb      	str	r3, [r7, #8]
}
 801000c:	bf00      	nop
 801000e:	e7fe      	b.n	801000e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8010010:	4b20      	ldr	r3, [pc, #128]	; (8010094 <vTaskResume+0xac>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	68fa      	ldr	r2, [r7, #12]
 8010016:	429a      	cmp	r2, r3
 8010018:	d038      	beq.n	801008c <vTaskResume+0xa4>
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d035      	beq.n	801008c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8010020:	f7fe fee0 	bl	800ede4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8010024:	68f8      	ldr	r0, [r7, #12]
 8010026:	f7ff ffad 	bl	800ff84 <prvTaskIsTaskSuspended>
 801002a:	4603      	mov	r3, r0
 801002c:	2b00      	cmp	r3, #0
 801002e:	d02b      	beq.n	8010088 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	3304      	adds	r3, #4
 8010034:	4618      	mov	r0, r3
 8010036:	f7fe fd7b 	bl	800eb30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801003e:	4b16      	ldr	r3, [pc, #88]	; (8010098 <vTaskResume+0xb0>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	429a      	cmp	r2, r3
 8010044:	d903      	bls.n	801004e <vTaskResume+0x66>
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801004a:	4a13      	ldr	r2, [pc, #76]	; (8010098 <vTaskResume+0xb0>)
 801004c:	6013      	str	r3, [r2, #0]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010052:	4613      	mov	r3, r2
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	4413      	add	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4a10      	ldr	r2, [pc, #64]	; (801009c <vTaskResume+0xb4>)
 801005c:	441a      	add	r2, r3
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	3304      	adds	r3, #4
 8010062:	4619      	mov	r1, r3
 8010064:	4610      	mov	r0, r2
 8010066:	f7fe fd06 	bl	800ea76 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006e:	4b09      	ldr	r3, [pc, #36]	; (8010094 <vTaskResume+0xac>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010074:	429a      	cmp	r2, r3
 8010076:	d307      	bcc.n	8010088 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8010078:	4b09      	ldr	r3, [pc, #36]	; (80100a0 <vTaskResume+0xb8>)
 801007a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801007e:	601a      	str	r2, [r3, #0]
 8010080:	f3bf 8f4f 	dsb	sy
 8010084:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8010088:	f7fe fedc 	bl	800ee44 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801008c:	bf00      	nop
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	20007df0 	.word	0x20007df0
 8010098:	200082d0 	.word	0x200082d0
 801009c:	20007df4 	.word	0x20007df4
 80100a0:	e000ed04 	.word	0xe000ed04

080100a4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b08a      	sub	sp, #40	; 0x28
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80100ac:	2300      	movs	r3, #0
 80100ae:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d10a      	bne.n	80100d0 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80100ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80100be:	f383 8811 	msr	BASEPRI, r3
 80100c2:	f3bf 8f6f 	isb	sy
 80100c6:	f3bf 8f4f 	dsb	sy
 80100ca:	61bb      	str	r3, [r7, #24]
}
 80100cc:	bf00      	nop
 80100ce:	e7fe      	b.n	80100ce <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80100d0:	f7fe ff6a 	bl	800efa8 <vPortValidateInterruptPriority>
	__asm volatile
 80100d4:	f3ef 8211 	mrs	r2, BASEPRI
 80100d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80100dc:	f383 8811 	msr	BASEPRI, r3
 80100e0:	f3bf 8f6f 	isb	sy
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	617a      	str	r2, [r7, #20]
 80100ea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80100ec:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80100ee:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80100f0:	6a38      	ldr	r0, [r7, #32]
 80100f2:	f7ff ff47 	bl	800ff84 <prvTaskIsTaskSuspended>
 80100f6:	4603      	mov	r3, r0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d030      	beq.n	801015e <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100fc:	4b1d      	ldr	r3, [pc, #116]	; (8010174 <xTaskResumeFromISR+0xd0>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d126      	bne.n	8010152 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010104:	6a3b      	ldr	r3, [r7, #32]
 8010106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010108:	4b1b      	ldr	r3, [pc, #108]	; (8010178 <xTaskResumeFromISR+0xd4>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801010e:	429a      	cmp	r2, r3
 8010110:	d301      	bcc.n	8010116 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8010112:	2301      	movs	r3, #1
 8010114:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010116:	6a3b      	ldr	r3, [r7, #32]
 8010118:	3304      	adds	r3, #4
 801011a:	4618      	mov	r0, r3
 801011c:	f7fe fd08 	bl	800eb30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010120:	6a3b      	ldr	r3, [r7, #32]
 8010122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010124:	4b15      	ldr	r3, [pc, #84]	; (801017c <xTaskResumeFromISR+0xd8>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	429a      	cmp	r2, r3
 801012a:	d903      	bls.n	8010134 <xTaskResumeFromISR+0x90>
 801012c:	6a3b      	ldr	r3, [r7, #32]
 801012e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010130:	4a12      	ldr	r2, [pc, #72]	; (801017c <xTaskResumeFromISR+0xd8>)
 8010132:	6013      	str	r3, [r2, #0]
 8010134:	6a3b      	ldr	r3, [r7, #32]
 8010136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010138:	4613      	mov	r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4413      	add	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4a0f      	ldr	r2, [pc, #60]	; (8010180 <xTaskResumeFromISR+0xdc>)
 8010142:	441a      	add	r2, r3
 8010144:	6a3b      	ldr	r3, [r7, #32]
 8010146:	3304      	adds	r3, #4
 8010148:	4619      	mov	r1, r3
 801014a:	4610      	mov	r0, r2
 801014c:	f7fe fc93 	bl	800ea76 <vListInsertEnd>
 8010150:	e005      	b.n	801015e <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010152:	6a3b      	ldr	r3, [r7, #32]
 8010154:	3318      	adds	r3, #24
 8010156:	4619      	mov	r1, r3
 8010158:	480a      	ldr	r0, [pc, #40]	; (8010184 <xTaskResumeFromISR+0xe0>)
 801015a:	f7fe fc8c 	bl	800ea76 <vListInsertEnd>
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f383 8811 	msr	BASEPRI, r3
}
 8010168:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801016a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801016c:	4618      	mov	r0, r3
 801016e:	3728      	adds	r7, #40	; 0x28
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	200082f0 	.word	0x200082f0
 8010178:	20007df0 	.word	0x20007df0
 801017c:	200082d0 	.word	0x200082d0
 8010180:	20007df4 	.word	0x20007df4
 8010184:	20008284 	.word	0x20008284

08010188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b08a      	sub	sp, #40	; 0x28
 801018c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801018e:	2300      	movs	r3, #0
 8010190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010192:	2300      	movs	r3, #0
 8010194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010196:	463a      	mov	r2, r7
 8010198:	1d39      	adds	r1, r7, #4
 801019a:	f107 0308 	add.w	r3, r7, #8
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe fba6 	bl	800e8f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80101a4:	6839      	ldr	r1, [r7, #0]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	68ba      	ldr	r2, [r7, #8]
 80101aa:	9202      	str	r2, [sp, #8]
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	2300      	movs	r3, #0
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	2300      	movs	r3, #0
 80101b4:	460a      	mov	r2, r1
 80101b6:	4924      	ldr	r1, [pc, #144]	; (8010248 <vTaskStartScheduler+0xc0>)
 80101b8:	4824      	ldr	r0, [pc, #144]	; (801024c <vTaskStartScheduler+0xc4>)
 80101ba:	f7ff fc21 	bl	800fa00 <xTaskCreateStatic>
 80101be:	4603      	mov	r3, r0
 80101c0:	4a23      	ldr	r2, [pc, #140]	; (8010250 <vTaskStartScheduler+0xc8>)
 80101c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80101c4:	4b22      	ldr	r3, [pc, #136]	; (8010250 <vTaskStartScheduler+0xc8>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d002      	beq.n	80101d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80101cc:	2301      	movs	r3, #1
 80101ce:	617b      	str	r3, [r7, #20]
 80101d0:	e001      	b.n	80101d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80101d2:	2300      	movs	r3, #0
 80101d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	2b01      	cmp	r3, #1
 80101da:	d102      	bne.n	80101e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80101dc:	f000 fd5a 	bl	8010c94 <xTimerCreateTimerTask>
 80101e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d11c      	bne.n	8010222 <vTaskStartScheduler+0x9a>
	__asm volatile
 80101e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80101ec:	f383 8811 	msr	BASEPRI, r3
 80101f0:	f3bf 8f6f 	isb	sy
 80101f4:	f3bf 8f4f 	dsb	sy
 80101f8:	613b      	str	r3, [r7, #16]
}
 80101fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80101fc:	4b15      	ldr	r3, [pc, #84]	; (8010254 <vTaskStartScheduler+0xcc>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8010204:	4a14      	ldr	r2, [pc, #80]	; (8010258 <vTaskStartScheduler+0xd0>)
 8010206:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010208:	4b14      	ldr	r3, [pc, #80]	; (801025c <vTaskStartScheduler+0xd4>)
 801020a:	f04f 32ff 	mov.w	r2, #4294967295
 801020e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010210:	4b13      	ldr	r3, [pc, #76]	; (8010260 <vTaskStartScheduler+0xd8>)
 8010212:	2201      	movs	r2, #1
 8010214:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010216:	4b13      	ldr	r3, [pc, #76]	; (8010264 <vTaskStartScheduler+0xdc>)
 8010218:	2200      	movs	r2, #0
 801021a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801021c:	f7fe fd40 	bl	800eca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010220:	e00e      	b.n	8010240 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010228:	d10a      	bne.n	8010240 <vTaskStartScheduler+0xb8>
	__asm volatile
 801022a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801022e:	f383 8811 	msr	BASEPRI, r3
 8010232:	f3bf 8f6f 	isb	sy
 8010236:	f3bf 8f4f 	dsb	sy
 801023a:	60fb      	str	r3, [r7, #12]
}
 801023c:	bf00      	nop
 801023e:	e7fe      	b.n	801023e <vTaskStartScheduler+0xb6>
}
 8010240:	bf00      	nop
 8010242:	3718      	adds	r7, #24
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	0801401c 	.word	0x0801401c
 801024c:	08010925 	.word	0x08010925
 8010250:	200082ec 	.word	0x200082ec
 8010254:	20007df0 	.word	0x20007df0
 8010258:	2000005c 	.word	0x2000005c
 801025c:	200082e8 	.word	0x200082e8
 8010260:	200082d4 	.word	0x200082d4
 8010264:	200082cc 	.word	0x200082cc

08010268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010268:	b480      	push	{r7}
 801026a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801026c:	4b04      	ldr	r3, [pc, #16]	; (8010280 <vTaskSuspendAll+0x18>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	3301      	adds	r3, #1
 8010272:	4a03      	ldr	r2, [pc, #12]	; (8010280 <vTaskSuspendAll+0x18>)
 8010274:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010276:	bf00      	nop
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	200082f0 	.word	0x200082f0

08010284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801028a:	2300      	movs	r3, #0
 801028c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801028e:	2300      	movs	r3, #0
 8010290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010292:	4b42      	ldr	r3, [pc, #264]	; (801039c <xTaskResumeAll+0x118>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d10a      	bne.n	80102b0 <xTaskResumeAll+0x2c>
	__asm volatile
 801029a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801029e:	f383 8811 	msr	BASEPRI, r3
 80102a2:	f3bf 8f6f 	isb	sy
 80102a6:	f3bf 8f4f 	dsb	sy
 80102aa:	603b      	str	r3, [r7, #0]
}
 80102ac:	bf00      	nop
 80102ae:	e7fe      	b.n	80102ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80102b0:	f7fe fd98 	bl	800ede4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80102b4:	4b39      	ldr	r3, [pc, #228]	; (801039c <xTaskResumeAll+0x118>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	3b01      	subs	r3, #1
 80102ba:	4a38      	ldr	r2, [pc, #224]	; (801039c <xTaskResumeAll+0x118>)
 80102bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102be:	4b37      	ldr	r3, [pc, #220]	; (801039c <xTaskResumeAll+0x118>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d162      	bne.n	801038c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80102c6:	4b36      	ldr	r3, [pc, #216]	; (80103a0 <xTaskResumeAll+0x11c>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d05e      	beq.n	801038c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80102ce:	e02f      	b.n	8010330 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102d0:	4b34      	ldr	r3, [pc, #208]	; (80103a4 <xTaskResumeAll+0x120>)
 80102d2:	68db      	ldr	r3, [r3, #12]
 80102d4:	68db      	ldr	r3, [r3, #12]
 80102d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	3318      	adds	r3, #24
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fe fc27 	bl	800eb30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	3304      	adds	r3, #4
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fc22 	bl	800eb30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102f0:	4b2d      	ldr	r3, [pc, #180]	; (80103a8 <xTaskResumeAll+0x124>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d903      	bls.n	8010300 <xTaskResumeAll+0x7c>
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102fc:	4a2a      	ldr	r2, [pc, #168]	; (80103a8 <xTaskResumeAll+0x124>)
 80102fe:	6013      	str	r3, [r2, #0]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010304:	4613      	mov	r3, r2
 8010306:	009b      	lsls	r3, r3, #2
 8010308:	4413      	add	r3, r2
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	4a27      	ldr	r2, [pc, #156]	; (80103ac <xTaskResumeAll+0x128>)
 801030e:	441a      	add	r2, r3
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	3304      	adds	r3, #4
 8010314:	4619      	mov	r1, r3
 8010316:	4610      	mov	r0, r2
 8010318:	f7fe fbad 	bl	800ea76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010320:	4b23      	ldr	r3, [pc, #140]	; (80103b0 <xTaskResumeAll+0x12c>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010326:	429a      	cmp	r2, r3
 8010328:	d302      	bcc.n	8010330 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801032a:	4b22      	ldr	r3, [pc, #136]	; (80103b4 <xTaskResumeAll+0x130>)
 801032c:	2201      	movs	r2, #1
 801032e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010330:	4b1c      	ldr	r3, [pc, #112]	; (80103a4 <xTaskResumeAll+0x120>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1cb      	bne.n	80102d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d001      	beq.n	8010342 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801033e:	f000 fb9d 	bl	8010a7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010342:	4b1d      	ldr	r3, [pc, #116]	; (80103b8 <xTaskResumeAll+0x134>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d010      	beq.n	8010370 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801034e:	f000 f847 	bl	80103e0 <xTaskIncrementTick>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d002      	beq.n	801035e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010358:	4b16      	ldr	r3, [pc, #88]	; (80103b4 <xTaskResumeAll+0x130>)
 801035a:	2201      	movs	r2, #1
 801035c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	3b01      	subs	r3, #1
 8010362:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d1f1      	bne.n	801034e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801036a:	4b13      	ldr	r3, [pc, #76]	; (80103b8 <xTaskResumeAll+0x134>)
 801036c:	2200      	movs	r2, #0
 801036e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010370:	4b10      	ldr	r3, [pc, #64]	; (80103b4 <xTaskResumeAll+0x130>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d009      	beq.n	801038c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010378:	2301      	movs	r3, #1
 801037a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801037c:	4b0f      	ldr	r3, [pc, #60]	; (80103bc <xTaskResumeAll+0x138>)
 801037e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801038c:	f7fe fd5a 	bl	800ee44 <vPortExitCritical>

	return xAlreadyYielded;
 8010390:	68bb      	ldr	r3, [r7, #8]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3710      	adds	r7, #16
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	200082f0 	.word	0x200082f0
 80103a0:	200082c8 	.word	0x200082c8
 80103a4:	20008284 	.word	0x20008284
 80103a8:	200082d0 	.word	0x200082d0
 80103ac:	20007df4 	.word	0x20007df4
 80103b0:	20007df0 	.word	0x20007df0
 80103b4:	200082dc 	.word	0x200082dc
 80103b8:	200082d8 	.word	0x200082d8
 80103bc:	e000ed04 	.word	0xe000ed04

080103c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80103c6:	4b05      	ldr	r3, [pc, #20]	; (80103dc <xTaskGetTickCount+0x1c>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80103cc:	687b      	ldr	r3, [r7, #4]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	370c      	adds	r7, #12
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	200082cc 	.word	0x200082cc

080103e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b086      	sub	sp, #24
 80103e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80103e6:	2300      	movs	r3, #0
 80103e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103ea:	4b53      	ldr	r3, [pc, #332]	; (8010538 <xTaskIncrementTick+0x158>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	f040 8095 	bne.w	801051e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80103f4:	4b51      	ldr	r3, [pc, #324]	; (801053c <xTaskIncrementTick+0x15c>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	3301      	adds	r3, #1
 80103fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80103fc:	4a4f      	ldr	r2, [pc, #316]	; (801053c <xTaskIncrementTick+0x15c>)
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d120      	bne.n	801044a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010408:	4b4d      	ldr	r3, [pc, #308]	; (8010540 <xTaskIncrementTick+0x160>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d00a      	beq.n	8010428 <xTaskIncrementTick+0x48>
	__asm volatile
 8010412:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010416:	f383 8811 	msr	BASEPRI, r3
 801041a:	f3bf 8f6f 	isb	sy
 801041e:	f3bf 8f4f 	dsb	sy
 8010422:	603b      	str	r3, [r7, #0]
}
 8010424:	bf00      	nop
 8010426:	e7fe      	b.n	8010426 <xTaskIncrementTick+0x46>
 8010428:	4b45      	ldr	r3, [pc, #276]	; (8010540 <xTaskIncrementTick+0x160>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	60fb      	str	r3, [r7, #12]
 801042e:	4b45      	ldr	r3, [pc, #276]	; (8010544 <xTaskIncrementTick+0x164>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	4a43      	ldr	r2, [pc, #268]	; (8010540 <xTaskIncrementTick+0x160>)
 8010434:	6013      	str	r3, [r2, #0]
 8010436:	4a43      	ldr	r2, [pc, #268]	; (8010544 <xTaskIncrementTick+0x164>)
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6013      	str	r3, [r2, #0]
 801043c:	4b42      	ldr	r3, [pc, #264]	; (8010548 <xTaskIncrementTick+0x168>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	3301      	adds	r3, #1
 8010442:	4a41      	ldr	r2, [pc, #260]	; (8010548 <xTaskIncrementTick+0x168>)
 8010444:	6013      	str	r3, [r2, #0]
 8010446:	f000 fb19 	bl	8010a7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801044a:	4b40      	ldr	r3, [pc, #256]	; (801054c <xTaskIncrementTick+0x16c>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	693a      	ldr	r2, [r7, #16]
 8010450:	429a      	cmp	r2, r3
 8010452:	d349      	bcc.n	80104e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010454:	4b3a      	ldr	r3, [pc, #232]	; (8010540 <xTaskIncrementTick+0x160>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d104      	bne.n	8010468 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801045e:	4b3b      	ldr	r3, [pc, #236]	; (801054c <xTaskIncrementTick+0x16c>)
 8010460:	f04f 32ff 	mov.w	r2, #4294967295
 8010464:	601a      	str	r2, [r3, #0]
					break;
 8010466:	e03f      	b.n	80104e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010468:	4b35      	ldr	r3, [pc, #212]	; (8010540 <xTaskIncrementTick+0x160>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	68db      	ldr	r3, [r3, #12]
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010478:	693a      	ldr	r2, [r7, #16]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	429a      	cmp	r2, r3
 801047e:	d203      	bcs.n	8010488 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010480:	4a32      	ldr	r2, [pc, #200]	; (801054c <xTaskIncrementTick+0x16c>)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010486:	e02f      	b.n	80104e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	3304      	adds	r3, #4
 801048c:	4618      	mov	r0, r3
 801048e:	f7fe fb4f 	bl	800eb30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010496:	2b00      	cmp	r3, #0
 8010498:	d004      	beq.n	80104a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	3318      	adds	r3, #24
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fe fb46 	bl	800eb30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104a8:	4b29      	ldr	r3, [pc, #164]	; (8010550 <xTaskIncrementTick+0x170>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d903      	bls.n	80104b8 <xTaskIncrementTick+0xd8>
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b4:	4a26      	ldr	r2, [pc, #152]	; (8010550 <xTaskIncrementTick+0x170>)
 80104b6:	6013      	str	r3, [r2, #0]
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104bc:	4613      	mov	r3, r2
 80104be:	009b      	lsls	r3, r3, #2
 80104c0:	4413      	add	r3, r2
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	4a23      	ldr	r2, [pc, #140]	; (8010554 <xTaskIncrementTick+0x174>)
 80104c6:	441a      	add	r2, r3
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	3304      	adds	r3, #4
 80104cc:	4619      	mov	r1, r3
 80104ce:	4610      	mov	r0, r2
 80104d0:	f7fe fad1 	bl	800ea76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104d8:	4b1f      	ldr	r3, [pc, #124]	; (8010558 <xTaskIncrementTick+0x178>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104de:	429a      	cmp	r2, r3
 80104e0:	d3b8      	bcc.n	8010454 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80104e2:	2301      	movs	r3, #1
 80104e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104e6:	e7b5      	b.n	8010454 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80104e8:	4b1b      	ldr	r3, [pc, #108]	; (8010558 <xTaskIncrementTick+0x178>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104ee:	4919      	ldr	r1, [pc, #100]	; (8010554 <xTaskIncrementTick+0x174>)
 80104f0:	4613      	mov	r3, r2
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	4413      	add	r3, r2
 80104f6:	009b      	lsls	r3, r3, #2
 80104f8:	440b      	add	r3, r1
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d901      	bls.n	8010504 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010500:	2301      	movs	r3, #1
 8010502:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8010504:	4b15      	ldr	r3, [pc, #84]	; (801055c <xTaskIncrementTick+0x17c>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d101      	bne.n	8010510 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801050c:	f7f3 ff52 	bl	80043b4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010510:	4b13      	ldr	r3, [pc, #76]	; (8010560 <xTaskIncrementTick+0x180>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d009      	beq.n	801052c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8010518:	2301      	movs	r3, #1
 801051a:	617b      	str	r3, [r7, #20]
 801051c:	e006      	b.n	801052c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801051e:	4b0f      	ldr	r3, [pc, #60]	; (801055c <xTaskIncrementTick+0x17c>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	3301      	adds	r3, #1
 8010524:	4a0d      	ldr	r2, [pc, #52]	; (801055c <xTaskIncrementTick+0x17c>)
 8010526:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8010528:	f7f3 ff44 	bl	80043b4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 801052c:	697b      	ldr	r3, [r7, #20]
}
 801052e:	4618      	mov	r0, r3
 8010530:	3718      	adds	r7, #24
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	200082f0 	.word	0x200082f0
 801053c:	200082cc 	.word	0x200082cc
 8010540:	2000827c 	.word	0x2000827c
 8010544:	20008280 	.word	0x20008280
 8010548:	200082e0 	.word	0x200082e0
 801054c:	200082e8 	.word	0x200082e8
 8010550:	200082d0 	.word	0x200082d0
 8010554:	20007df4 	.word	0x20007df4
 8010558:	20007df0 	.word	0x20007df0
 801055c:	200082d8 	.word	0x200082d8
 8010560:	200082dc 	.word	0x200082dc

08010564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b086      	sub	sp, #24
 8010568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801056a:	4b43      	ldr	r3, [pc, #268]	; (8010678 <vTaskSwitchContext+0x114>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d003      	beq.n	801057a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010572:	4b42      	ldr	r3, [pc, #264]	; (801067c <vTaskSwitchContext+0x118>)
 8010574:	2201      	movs	r2, #1
 8010576:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010578:	e07a      	b.n	8010670 <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 801057a:	4b40      	ldr	r3, [pc, #256]	; (801067c <vTaskSwitchContext+0x118>)
 801057c:	2200      	movs	r2, #0
 801057e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010580:	4b3f      	ldr	r3, [pc, #252]	; (8010680 <vTaskSwitchContext+0x11c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010586:	613b      	str	r3, [r7, #16]
 8010588:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801058c:	60fb      	str	r3, [r7, #12]
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	429a      	cmp	r2, r3
 8010596:	d111      	bne.n	80105bc <vTaskSwitchContext+0x58>
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	3304      	adds	r3, #4
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	68fa      	ldr	r2, [r7, #12]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d10b      	bne.n	80105bc <vTaskSwitchContext+0x58>
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	3308      	adds	r3, #8
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	68fa      	ldr	r2, [r7, #12]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d105      	bne.n	80105bc <vTaskSwitchContext+0x58>
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	330c      	adds	r3, #12
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d008      	beq.n	80105ce <vTaskSwitchContext+0x6a>
 80105bc:	4b30      	ldr	r3, [pc, #192]	; (8010680 <vTaskSwitchContext+0x11c>)
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	4b2f      	ldr	r3, [pc, #188]	; (8010680 <vTaskSwitchContext+0x11c>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	3334      	adds	r3, #52	; 0x34
 80105c6:	4619      	mov	r1, r3
 80105c8:	4610      	mov	r0, r2
 80105ca:	f7f3 ff01 	bl	80043d0 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 80105ce:	4b2c      	ldr	r3, [pc, #176]	; (8010680 <vTaskSwitchContext+0x11c>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	4a2c      	ldr	r2, [pc, #176]	; (8010684 <vTaskSwitchContext+0x120>)
 80105d4:	6812      	ldr	r2, [r2, #0]
 80105d6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105da:	4b2b      	ldr	r3, [pc, #172]	; (8010688 <vTaskSwitchContext+0x124>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	617b      	str	r3, [r7, #20]
 80105e0:	e010      	b.n	8010604 <vTaskSwitchContext+0xa0>
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d10a      	bne.n	80105fe <vTaskSwitchContext+0x9a>
	__asm volatile
 80105e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80105ec:	f383 8811 	msr	BASEPRI, r3
 80105f0:	f3bf 8f6f 	isb	sy
 80105f4:	f3bf 8f4f 	dsb	sy
 80105f8:	607b      	str	r3, [r7, #4]
}
 80105fa:	bf00      	nop
 80105fc:	e7fe      	b.n	80105fc <vTaskSwitchContext+0x98>
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	3b01      	subs	r3, #1
 8010602:	617b      	str	r3, [r7, #20]
 8010604:	4921      	ldr	r1, [pc, #132]	; (801068c <vTaskSwitchContext+0x128>)
 8010606:	697a      	ldr	r2, [r7, #20]
 8010608:	4613      	mov	r3, r2
 801060a:	009b      	lsls	r3, r3, #2
 801060c:	4413      	add	r3, r2
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	440b      	add	r3, r1
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d0e4      	beq.n	80105e2 <vTaskSwitchContext+0x7e>
 8010618:	697a      	ldr	r2, [r7, #20]
 801061a:	4613      	mov	r3, r2
 801061c:	009b      	lsls	r3, r3, #2
 801061e:	4413      	add	r3, r2
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	4a1a      	ldr	r2, [pc, #104]	; (801068c <vTaskSwitchContext+0x128>)
 8010624:	4413      	add	r3, r2
 8010626:	60bb      	str	r3, [r7, #8]
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	685a      	ldr	r2, [r3, #4]
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	605a      	str	r2, [r3, #4]
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	685a      	ldr	r2, [r3, #4]
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	3308      	adds	r3, #8
 801063a:	429a      	cmp	r2, r3
 801063c:	d104      	bne.n	8010648 <vTaskSwitchContext+0xe4>
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	685a      	ldr	r2, [r3, #4]
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	605a      	str	r2, [r3, #4]
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	68db      	ldr	r3, [r3, #12]
 801064e:	4a0c      	ldr	r2, [pc, #48]	; (8010680 <vTaskSwitchContext+0x11c>)
 8010650:	6013      	str	r3, [r2, #0]
 8010652:	4a0d      	ldr	r2, [pc, #52]	; (8010688 <vTaskSwitchContext+0x124>)
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8010658:	4b09      	ldr	r3, [pc, #36]	; (8010680 <vTaskSwitchContext+0x11c>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8010660:	4a08      	ldr	r2, [pc, #32]	; (8010684 <vTaskSwitchContext+0x120>)
 8010662:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010664:	4b06      	ldr	r3, [pc, #24]	; (8010680 <vTaskSwitchContext+0x11c>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801066c:	4a08      	ldr	r2, [pc, #32]	; (8010690 <vTaskSwitchContext+0x12c>)
 801066e:	6013      	str	r3, [r2, #0]
}
 8010670:	bf00      	nop
 8010672:	3718      	adds	r7, #24
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	200082f0 	.word	0x200082f0
 801067c:	200082dc 	.word	0x200082dc
 8010680:	20007df0 	.word	0x20007df0
 8010684:	200082c4 	.word	0x200082c4
 8010688:	200082d0 	.word	0x200082d0
 801068c:	20007df4 	.word	0x20007df4
 8010690:	2000005c 	.word	0x2000005c

08010694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d10a      	bne.n	80106ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80106a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80106a8:	f383 8811 	msr	BASEPRI, r3
 80106ac:	f3bf 8f6f 	isb	sy
 80106b0:	f3bf 8f4f 	dsb	sy
 80106b4:	60fb      	str	r3, [r7, #12]
}
 80106b6:	bf00      	nop
 80106b8:	e7fe      	b.n	80106b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80106ba:	4b07      	ldr	r3, [pc, #28]	; (80106d8 <vTaskPlaceOnEventList+0x44>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	3318      	adds	r3, #24
 80106c0:	4619      	mov	r1, r3
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7fe f9fb 	bl	800eabe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80106c8:	2101      	movs	r1, #1
 80106ca:	6838      	ldr	r0, [r7, #0]
 80106cc:	f000 fa88 	bl	8010be0 <prvAddCurrentTaskToDelayedList>
}
 80106d0:	bf00      	nop
 80106d2:	3710      	adds	r7, #16
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	20007df0 	.word	0x20007df0

080106dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b086      	sub	sp, #24
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	60f8      	str	r0, [r7, #12]
 80106e4:	60b9      	str	r1, [r7, #8]
 80106e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d10a      	bne.n	8010704 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80106ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80106f2:	f383 8811 	msr	BASEPRI, r3
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	617b      	str	r3, [r7, #20]
}
 8010700:	bf00      	nop
 8010702:	e7fe      	b.n	8010702 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010704:	4b0a      	ldr	r3, [pc, #40]	; (8010730 <vTaskPlaceOnEventListRestricted+0x54>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	3318      	adds	r3, #24
 801070a:	4619      	mov	r1, r3
 801070c:	68f8      	ldr	r0, [r7, #12]
 801070e:	f7fe f9b2 	bl	800ea76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d002      	beq.n	801071e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010718:	f04f 33ff 	mov.w	r3, #4294967295
 801071c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801071e:	6879      	ldr	r1, [r7, #4]
 8010720:	68b8      	ldr	r0, [r7, #8]
 8010722:	f000 fa5d 	bl	8010be0 <prvAddCurrentTaskToDelayedList>
	}
 8010726:	bf00      	nop
 8010728:	3718      	adds	r7, #24
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	20007df0 	.word	0x20007df0

08010734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b086      	sub	sp, #24
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d10a      	bne.n	8010760 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801074a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801074e:	f383 8811 	msr	BASEPRI, r3
 8010752:	f3bf 8f6f 	isb	sy
 8010756:	f3bf 8f4f 	dsb	sy
 801075a:	60fb      	str	r3, [r7, #12]
}
 801075c:	bf00      	nop
 801075e:	e7fe      	b.n	801075e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	3318      	adds	r3, #24
 8010764:	4618      	mov	r0, r3
 8010766:	f7fe f9e3 	bl	800eb30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801076a:	4b1e      	ldr	r3, [pc, #120]	; (80107e4 <xTaskRemoveFromEventList+0xb0>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d11d      	bne.n	80107ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	3304      	adds	r3, #4
 8010776:	4618      	mov	r0, r3
 8010778:	f7fe f9da 	bl	800eb30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010780:	4b19      	ldr	r3, [pc, #100]	; (80107e8 <xTaskRemoveFromEventList+0xb4>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	429a      	cmp	r2, r3
 8010786:	d903      	bls.n	8010790 <xTaskRemoveFromEventList+0x5c>
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078c:	4a16      	ldr	r2, [pc, #88]	; (80107e8 <xTaskRemoveFromEventList+0xb4>)
 801078e:	6013      	str	r3, [r2, #0]
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010794:	4613      	mov	r3, r2
 8010796:	009b      	lsls	r3, r3, #2
 8010798:	4413      	add	r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	4a13      	ldr	r2, [pc, #76]	; (80107ec <xTaskRemoveFromEventList+0xb8>)
 801079e:	441a      	add	r2, r3
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	3304      	adds	r3, #4
 80107a4:	4619      	mov	r1, r3
 80107a6:	4610      	mov	r0, r2
 80107a8:	f7fe f965 	bl	800ea76 <vListInsertEnd>
 80107ac:	e005      	b.n	80107ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	3318      	adds	r3, #24
 80107b2:	4619      	mov	r1, r3
 80107b4:	480e      	ldr	r0, [pc, #56]	; (80107f0 <xTaskRemoveFromEventList+0xbc>)
 80107b6:	f7fe f95e 	bl	800ea76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107be:	4b0d      	ldr	r3, [pc, #52]	; (80107f4 <xTaskRemoveFromEventList+0xc0>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d905      	bls.n	80107d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80107c8:	2301      	movs	r3, #1
 80107ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80107cc:	4b0a      	ldr	r3, [pc, #40]	; (80107f8 <xTaskRemoveFromEventList+0xc4>)
 80107ce:	2201      	movs	r2, #1
 80107d0:	601a      	str	r2, [r3, #0]
 80107d2:	e001      	b.n	80107d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80107d4:	2300      	movs	r3, #0
 80107d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80107d8:	697b      	ldr	r3, [r7, #20]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3718      	adds	r7, #24
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	200082f0 	.word	0x200082f0
 80107e8:	200082d0 	.word	0x200082d0
 80107ec:	20007df4 	.word	0x20007df4
 80107f0:	20008284 	.word	0x20008284
 80107f4:	20007df0 	.word	0x20007df0
 80107f8:	200082dc 	.word	0x200082dc

080107fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80107fc:	b480      	push	{r7}
 80107fe:	b083      	sub	sp, #12
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010804:	4b06      	ldr	r3, [pc, #24]	; (8010820 <vTaskInternalSetTimeOutState+0x24>)
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801080c:	4b05      	ldr	r3, [pc, #20]	; (8010824 <vTaskInternalSetTimeOutState+0x28>)
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	605a      	str	r2, [r3, #4]
}
 8010814:	bf00      	nop
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr
 8010820:	200082e0 	.word	0x200082e0
 8010824:	200082cc 	.word	0x200082cc

08010828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b088      	sub	sp, #32
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d10a      	bne.n	801084e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010838:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801083c:	f383 8811 	msr	BASEPRI, r3
 8010840:	f3bf 8f6f 	isb	sy
 8010844:	f3bf 8f4f 	dsb	sy
 8010848:	613b      	str	r3, [r7, #16]
}
 801084a:	bf00      	nop
 801084c:	e7fe      	b.n	801084c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d10a      	bne.n	801086a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010854:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010858:	f383 8811 	msr	BASEPRI, r3
 801085c:	f3bf 8f6f 	isb	sy
 8010860:	f3bf 8f4f 	dsb	sy
 8010864:	60fb      	str	r3, [r7, #12]
}
 8010866:	bf00      	nop
 8010868:	e7fe      	b.n	8010868 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801086a:	f7fe fabb 	bl	800ede4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801086e:	4b24      	ldr	r3, [pc, #144]	; (8010900 <xTaskCheckForTimeOut+0xd8>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	69ba      	ldr	r2, [r7, #24]
 801087a:	1ad3      	subs	r3, r2, r3
 801087c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 801087e:	4b21      	ldr	r3, [pc, #132]	; (8010904 <xTaskCheckForTimeOut+0xdc>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f893 31b2 	ldrb.w	r3, [r3, #434]	; 0x1b2
 8010886:	2b00      	cmp	r3, #0
 8010888:	d007      	beq.n	801089a <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 801088a:	4b1e      	ldr	r3, [pc, #120]	; (8010904 <xTaskCheckForTimeOut+0xdc>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2200      	movs	r2, #0
 8010890:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
				xReturn = pdTRUE;
 8010894:	2301      	movs	r3, #1
 8010896:	61fb      	str	r3, [r7, #28]
 8010898:	e02b      	b.n	80108f2 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108a2:	d102      	bne.n	80108aa <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80108a4:	2300      	movs	r3, #0
 80108a6:	61fb      	str	r3, [r7, #28]
 80108a8:	e023      	b.n	80108f2 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681a      	ldr	r2, [r3, #0]
 80108ae:	4b16      	ldr	r3, [pc, #88]	; (8010908 <xTaskCheckForTimeOut+0xe0>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d007      	beq.n	80108c6 <xTaskCheckForTimeOut+0x9e>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	69ba      	ldr	r2, [r7, #24]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d302      	bcc.n	80108c6 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80108c0:	2301      	movs	r3, #1
 80108c2:	61fb      	str	r3, [r7, #28]
 80108c4:	e015      	b.n	80108f2 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	697a      	ldr	r2, [r7, #20]
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d20b      	bcs.n	80108e8 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	1ad2      	subs	r2, r2, r3
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f7ff ff8d 	bl	80107fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80108e2:	2300      	movs	r3, #0
 80108e4:	61fb      	str	r3, [r7, #28]
 80108e6:	e004      	b.n	80108f2 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	2200      	movs	r2, #0
 80108ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80108ee:	2301      	movs	r3, #1
 80108f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80108f2:	f7fe faa7 	bl	800ee44 <vPortExitCritical>

	return xReturn;
 80108f6:	69fb      	ldr	r3, [r7, #28]
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3720      	adds	r7, #32
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	200082cc 	.word	0x200082cc
 8010904:	20007df0 	.word	0x20007df0
 8010908:	200082e0 	.word	0x200082e0

0801090c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801090c:	b480      	push	{r7}
 801090e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010910:	4b03      	ldr	r3, [pc, #12]	; (8010920 <vTaskMissedYield+0x14>)
 8010912:	2201      	movs	r2, #1
 8010914:	601a      	str	r2, [r3, #0]
}
 8010916:	bf00      	nop
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr
 8010920:	200082dc 	.word	0x200082dc

08010924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801092c:	f000 f842 	bl	80109b4 <prvCheckTasksWaitingTermination>
 8010930:	e7fc      	b.n	801092c <prvIdleTask+0x8>
	...

08010934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801093a:	2300      	movs	r3, #0
 801093c:	607b      	str	r3, [r7, #4]
 801093e:	e00c      	b.n	801095a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	4613      	mov	r3, r2
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	4413      	add	r3, r2
 8010948:	009b      	lsls	r3, r3, #2
 801094a:	4a12      	ldr	r2, [pc, #72]	; (8010994 <prvInitialiseTaskLists+0x60>)
 801094c:	4413      	add	r3, r2
 801094e:	4618      	mov	r0, r3
 8010950:	f7fe f864 	bl	800ea1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	3301      	adds	r3, #1
 8010958:	607b      	str	r3, [r7, #4]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2b37      	cmp	r3, #55	; 0x37
 801095e:	d9ef      	bls.n	8010940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010960:	480d      	ldr	r0, [pc, #52]	; (8010998 <prvInitialiseTaskLists+0x64>)
 8010962:	f7fe f85b 	bl	800ea1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010966:	480d      	ldr	r0, [pc, #52]	; (801099c <prvInitialiseTaskLists+0x68>)
 8010968:	f7fe f858 	bl	800ea1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801096c:	480c      	ldr	r0, [pc, #48]	; (80109a0 <prvInitialiseTaskLists+0x6c>)
 801096e:	f7fe f855 	bl	800ea1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010972:	480c      	ldr	r0, [pc, #48]	; (80109a4 <prvInitialiseTaskLists+0x70>)
 8010974:	f7fe f852 	bl	800ea1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010978:	480b      	ldr	r0, [pc, #44]	; (80109a8 <prvInitialiseTaskLists+0x74>)
 801097a:	f7fe f84f 	bl	800ea1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801097e:	4b0b      	ldr	r3, [pc, #44]	; (80109ac <prvInitialiseTaskLists+0x78>)
 8010980:	4a05      	ldr	r2, [pc, #20]	; (8010998 <prvInitialiseTaskLists+0x64>)
 8010982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010984:	4b0a      	ldr	r3, [pc, #40]	; (80109b0 <prvInitialiseTaskLists+0x7c>)
 8010986:	4a05      	ldr	r2, [pc, #20]	; (801099c <prvInitialiseTaskLists+0x68>)
 8010988:	601a      	str	r2, [r3, #0]
}
 801098a:	bf00      	nop
 801098c:	3708      	adds	r7, #8
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	20007df4 	.word	0x20007df4
 8010998:	20008254 	.word	0x20008254
 801099c:	20008268 	.word	0x20008268
 80109a0:	20008284 	.word	0x20008284
 80109a4:	20008298 	.word	0x20008298
 80109a8:	200082b0 	.word	0x200082b0
 80109ac:	2000827c 	.word	0x2000827c
 80109b0:	20008280 	.word	0x20008280

080109b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80109ba:	e019      	b.n	80109f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80109bc:	f7fe fa12 	bl	800ede4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109c0:	4b10      	ldr	r3, [pc, #64]	; (8010a04 <prvCheckTasksWaitingTermination+0x50>)
 80109c2:	68db      	ldr	r3, [r3, #12]
 80109c4:	68db      	ldr	r3, [r3, #12]
 80109c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	3304      	adds	r3, #4
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fe f8af 	bl	800eb30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80109d2:	4b0d      	ldr	r3, [pc, #52]	; (8010a08 <prvCheckTasksWaitingTermination+0x54>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	3b01      	subs	r3, #1
 80109d8:	4a0b      	ldr	r2, [pc, #44]	; (8010a08 <prvCheckTasksWaitingTermination+0x54>)
 80109da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80109dc:	4b0b      	ldr	r3, [pc, #44]	; (8010a0c <prvCheckTasksWaitingTermination+0x58>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	3b01      	subs	r3, #1
 80109e2:	4a0a      	ldr	r2, [pc, #40]	; (8010a0c <prvCheckTasksWaitingTermination+0x58>)
 80109e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80109e6:	f7fe fa2d 	bl	800ee44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 f810 	bl	8010a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80109f0:	4b06      	ldr	r3, [pc, #24]	; (8010a0c <prvCheckTasksWaitingTermination+0x58>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1e1      	bne.n	80109bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80109f8:	bf00      	nop
 80109fa:	bf00      	nop
 80109fc:	3708      	adds	r7, #8
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20008298 	.word	0x20008298
 8010a08:	200082c8 	.word	0x200082c8
 8010a0c:	200082ac 	.word	0x200082ac

08010a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f002 fca4 	bl	801336c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d108      	bne.n	8010a40 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fd ffda 	bl	800e9ec <vPortFree>
				vPortFree( pxTCB );
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f7fd ffd7 	bl	800e9ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010a3e:	e018      	b.n	8010a72 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 8010a46:	2b01      	cmp	r3, #1
 8010a48:	d103      	bne.n	8010a52 <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f7fd ffce 	bl	800e9ec <vPortFree>
	}
 8010a50:	e00f      	b.n	8010a72 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 8010a58:	2b02      	cmp	r3, #2
 8010a5a:	d00a      	beq.n	8010a72 <prvDeleteTCB+0x62>
	__asm volatile
 8010a5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010a60:	f383 8811 	msr	BASEPRI, r3
 8010a64:	f3bf 8f6f 	isb	sy
 8010a68:	f3bf 8f4f 	dsb	sy
 8010a6c:	60fb      	str	r3, [r7, #12]
}
 8010a6e:	bf00      	nop
 8010a70:	e7fe      	b.n	8010a70 <prvDeleteTCB+0x60>
	}
 8010a72:	bf00      	nop
 8010a74:	3710      	adds	r7, #16
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
	...

08010a7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a82:	4b0c      	ldr	r3, [pc, #48]	; (8010ab4 <prvResetNextTaskUnblockTime+0x38>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d104      	bne.n	8010a96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010a8c:	4b0a      	ldr	r3, [pc, #40]	; (8010ab8 <prvResetNextTaskUnblockTime+0x3c>)
 8010a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010a94:	e008      	b.n	8010aa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a96:	4b07      	ldr	r3, [pc, #28]	; (8010ab4 <prvResetNextTaskUnblockTime+0x38>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	68db      	ldr	r3, [r3, #12]
 8010a9c:	68db      	ldr	r3, [r3, #12]
 8010a9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	4a04      	ldr	r2, [pc, #16]	; (8010ab8 <prvResetNextTaskUnblockTime+0x3c>)
 8010aa6:	6013      	str	r3, [r2, #0]
}
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr
 8010ab4:	2000827c 	.word	0x2000827c
 8010ab8:	200082e8 	.word	0x200082e8

08010abc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010abc:	b480      	push	{r7}
 8010abe:	b083      	sub	sp, #12
 8010ac0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010ac2:	4b0b      	ldr	r3, [pc, #44]	; (8010af0 <xTaskGetSchedulerState+0x34>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d102      	bne.n	8010ad0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010aca:	2301      	movs	r3, #1
 8010acc:	607b      	str	r3, [r7, #4]
 8010ace:	e008      	b.n	8010ae2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ad0:	4b08      	ldr	r3, [pc, #32]	; (8010af4 <xTaskGetSchedulerState+0x38>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d102      	bne.n	8010ade <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010ad8:	2302      	movs	r3, #2
 8010ada:	607b      	str	r3, [r7, #4]
 8010adc:	e001      	b.n	8010ae2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010ae2:	687b      	ldr	r3, [r7, #4]
	}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	370c      	adds	r7, #12
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr
 8010af0:	200082d4 	.word	0x200082d4
 8010af4:	200082f0 	.word	0x200082f0

08010af8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b086      	sub	sp, #24
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010b04:	2300      	movs	r3, #0
 8010b06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d05c      	beq.n	8010bc8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010b0e:	4b31      	ldr	r3, [pc, #196]	; (8010bd4 <xTaskPriorityDisinherit+0xdc>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	693a      	ldr	r2, [r7, #16]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d00a      	beq.n	8010b2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010b18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010b1c:	f383 8811 	msr	BASEPRI, r3
 8010b20:	f3bf 8f6f 	isb	sy
 8010b24:	f3bf 8f4f 	dsb	sy
 8010b28:	60fb      	str	r3, [r7, #12]
}
 8010b2a:	bf00      	nop
 8010b2c:	e7fe      	b.n	8010b2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d10a      	bne.n	8010b4e <xTaskPriorityDisinherit+0x56>
	__asm volatile
 8010b38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010b3c:	f383 8811 	msr	BASEPRI, r3
 8010b40:	f3bf 8f6f 	isb	sy
 8010b44:	f3bf 8f4f 	dsb	sy
 8010b48:	60bb      	str	r3, [r7, #8]
}
 8010b4a:	bf00      	nop
 8010b4c:	e7fe      	b.n	8010b4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010b54:	1e5a      	subs	r2, r3, #1
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d02e      	beq.n	8010bc8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d129      	bne.n	8010bc8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	3304      	adds	r3, #4
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fd ffd9 	bl	800eb30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b98:	4b0f      	ldr	r3, [pc, #60]	; (8010bd8 <xTaskPriorityDisinherit+0xe0>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d903      	bls.n	8010ba8 <xTaskPriorityDisinherit+0xb0>
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba4:	4a0c      	ldr	r2, [pc, #48]	; (8010bd8 <xTaskPriorityDisinherit+0xe0>)
 8010ba6:	6013      	str	r3, [r2, #0]
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bac:	4613      	mov	r3, r2
 8010bae:	009b      	lsls	r3, r3, #2
 8010bb0:	4413      	add	r3, r2
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	4a09      	ldr	r2, [pc, #36]	; (8010bdc <xTaskPriorityDisinherit+0xe4>)
 8010bb6:	441a      	add	r2, r3
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	3304      	adds	r3, #4
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	4610      	mov	r0, r2
 8010bc0:	f7fd ff59 	bl	800ea76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010bc8:	697b      	ldr	r3, [r7, #20]
	}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3718      	adds	r7, #24
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	20007df0 	.word	0x20007df0
 8010bd8:	200082d0 	.word	0x200082d0
 8010bdc:	20007df4 	.word	0x20007df4

08010be0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010bea:	4b24      	ldr	r3, [pc, #144]	; (8010c7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8010bf0:	4b23      	ldr	r3, [pc, #140]	; (8010c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bfa:	4b21      	ldr	r3, [pc, #132]	; (8010c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	3304      	adds	r3, #4
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7fd ff95 	bl	800eb30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c0c:	d10a      	bne.n	8010c24 <prvAddCurrentTaskToDelayedList+0x44>
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d007      	beq.n	8010c24 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c14:	4b1a      	ldr	r3, [pc, #104]	; (8010c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	3304      	adds	r3, #4
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	4819      	ldr	r0, [pc, #100]	; (8010c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010c1e:	f7fd ff2a 	bl	800ea76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010c22:	e026      	b.n	8010c72 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010c24:	68fa      	ldr	r2, [r7, #12]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4413      	add	r3, r2
 8010c2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010c2c:	4b14      	ldr	r3, [pc, #80]	; (8010c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	68ba      	ldr	r2, [r7, #8]
 8010c32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010c34:	68ba      	ldr	r2, [r7, #8]
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d209      	bcs.n	8010c50 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c3c:	4b12      	ldr	r3, [pc, #72]	; (8010c88 <prvAddCurrentTaskToDelayedList+0xa8>)
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	4b0f      	ldr	r3, [pc, #60]	; (8010c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3304      	adds	r3, #4
 8010c46:	4619      	mov	r1, r3
 8010c48:	4610      	mov	r0, r2
 8010c4a:	f7fd ff38 	bl	800eabe <vListInsert>
}
 8010c4e:	e010      	b.n	8010c72 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c50:	4b0e      	ldr	r3, [pc, #56]	; (8010c8c <prvAddCurrentTaskToDelayedList+0xac>)
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	4b0a      	ldr	r3, [pc, #40]	; (8010c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	3304      	adds	r3, #4
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	4610      	mov	r0, r2
 8010c5e:	f7fd ff2e 	bl	800eabe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010c62:	4b0b      	ldr	r3, [pc, #44]	; (8010c90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	68ba      	ldr	r2, [r7, #8]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d202      	bcs.n	8010c72 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8010c6c:	4a08      	ldr	r2, [pc, #32]	; (8010c90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	6013      	str	r3, [r2, #0]
}
 8010c72:	bf00      	nop
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	200082cc 	.word	0x200082cc
 8010c80:	20007df0 	.word	0x20007df0
 8010c84:	200082b0 	.word	0x200082b0
 8010c88:	20008280 	.word	0x20008280
 8010c8c:	2000827c 	.word	0x2000827c
 8010c90:	200082e8 	.word	0x200082e8

08010c94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b08a      	sub	sp, #40	; 0x28
 8010c98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010c9e:	f000 fba1 	bl	80113e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010ca2:	4b1c      	ldr	r3, [pc, #112]	; (8010d14 <xTimerCreateTimerTask+0x80>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d021      	beq.n	8010cee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010caa:	2300      	movs	r3, #0
 8010cac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010cb2:	1d3a      	adds	r2, r7, #4
 8010cb4:	f107 0108 	add.w	r1, r7, #8
 8010cb8:	f107 030c 	add.w	r3, r7, #12
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fd fe31 	bl	800e924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010cc2:	6879      	ldr	r1, [r7, #4]
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	68fa      	ldr	r2, [r7, #12]
 8010cc8:	9202      	str	r2, [sp, #8]
 8010cca:	9301      	str	r3, [sp, #4]
 8010ccc:	2337      	movs	r3, #55	; 0x37
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	460a      	mov	r2, r1
 8010cd4:	4910      	ldr	r1, [pc, #64]	; (8010d18 <xTimerCreateTimerTask+0x84>)
 8010cd6:	4811      	ldr	r0, [pc, #68]	; (8010d1c <xTimerCreateTimerTask+0x88>)
 8010cd8:	f7fe fe92 	bl	800fa00 <xTaskCreateStatic>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	4a10      	ldr	r2, [pc, #64]	; (8010d20 <xTimerCreateTimerTask+0x8c>)
 8010ce0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010ce2:	4b0f      	ldr	r3, [pc, #60]	; (8010d20 <xTimerCreateTimerTask+0x8c>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d001      	beq.n	8010cee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010cea:	2301      	movs	r3, #1
 8010cec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d10a      	bne.n	8010d0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010cf4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010cf8:	f383 8811 	msr	BASEPRI, r3
 8010cfc:	f3bf 8f6f 	isb	sy
 8010d00:	f3bf 8f4f 	dsb	sy
 8010d04:	613b      	str	r3, [r7, #16]
}
 8010d06:	bf00      	nop
 8010d08:	e7fe      	b.n	8010d08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010d0a:	697b      	ldr	r3, [r7, #20]
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3718      	adds	r7, #24
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}
 8010d14:	20008324 	.word	0x20008324
 8010d18:	08014024 	.word	0x08014024
 8010d1c:	08010f8d 	.word	0x08010f8d
 8010d20:	20008328 	.word	0x20008328

08010d24 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b088      	sub	sp, #32
 8010d28:	af02      	add	r7, sp, #8
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	60b9      	str	r1, [r7, #8]
 8010d2e:	607a      	str	r2, [r7, #4]
 8010d30:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010d32:	202c      	movs	r0, #44	; 0x2c
 8010d34:	f7fd fe10 	bl	800e958 <pvPortMalloc>
 8010d38:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d00d      	beq.n	8010d5c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	2200      	movs	r2, #0
 8010d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	9301      	str	r3, [sp, #4]
 8010d4c:	6a3b      	ldr	r3, [r7, #32]
 8010d4e:	9300      	str	r3, [sp, #0]
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	68b9      	ldr	r1, [r7, #8]
 8010d56:	68f8      	ldr	r0, [r7, #12]
 8010d58:	f000 f843 	bl	8010de2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010d5c:	697b      	ldr	r3, [r7, #20]
	}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3718      	adds	r7, #24
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}

08010d66 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b08a      	sub	sp, #40	; 0x28
 8010d6a:	af02      	add	r7, sp, #8
 8010d6c:	60f8      	str	r0, [r7, #12]
 8010d6e:	60b9      	str	r1, [r7, #8]
 8010d70:	607a      	str	r2, [r7, #4]
 8010d72:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8010d74:	232c      	movs	r3, #44	; 0x2c
 8010d76:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	2b2c      	cmp	r3, #44	; 0x2c
 8010d7c:	d00a      	beq.n	8010d94 <xTimerCreateStatic+0x2e>
	__asm volatile
 8010d7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010d82:	f383 8811 	msr	BASEPRI, r3
 8010d86:	f3bf 8f6f 	isb	sy
 8010d8a:	f3bf 8f4f 	dsb	sy
 8010d8e:	61bb      	str	r3, [r7, #24]
}
 8010d90:	bf00      	nop
 8010d92:	e7fe      	b.n	8010d92 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010d94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8010d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d10a      	bne.n	8010db2 <xTimerCreateStatic+0x4c>
	__asm volatile
 8010d9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010da0:	f383 8811 	msr	BASEPRI, r3
 8010da4:	f3bf 8f6f 	isb	sy
 8010da8:	f3bf 8f4f 	dsb	sy
 8010dac:	617b      	str	r3, [r7, #20]
}
 8010dae:	bf00      	nop
 8010db0:	e7fe      	b.n	8010db0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8010db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8010db6:	69fb      	ldr	r3, [r7, #28]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d00d      	beq.n	8010dd8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8010dbc:	69fb      	ldr	r3, [r7, #28]
 8010dbe:	2202      	movs	r2, #2
 8010dc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010dc4:	69fb      	ldr	r3, [r7, #28]
 8010dc6:	9301      	str	r3, [sp, #4]
 8010dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dca:	9300      	str	r3, [sp, #0]
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	68b9      	ldr	r1, [r7, #8]
 8010dd2:	68f8      	ldr	r0, [r7, #12]
 8010dd4:	f000 f805 	bl	8010de2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010dd8:	69fb      	ldr	r3, [r7, #28]
	}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3720      	adds	r7, #32
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}

08010de2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010de2:	b580      	push	{r7, lr}
 8010de4:	b086      	sub	sp, #24
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	60f8      	str	r0, [r7, #12]
 8010dea:	60b9      	str	r1, [r7, #8]
 8010dec:	607a      	str	r2, [r7, #4]
 8010dee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d10a      	bne.n	8010e0c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8010df6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010dfa:	f383 8811 	msr	BASEPRI, r3
 8010dfe:	f3bf 8f6f 	isb	sy
 8010e02:	f3bf 8f4f 	dsb	sy
 8010e06:	617b      	str	r3, [r7, #20]
}
 8010e08:	bf00      	nop
 8010e0a:	e7fe      	b.n	8010e0a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8010e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d01e      	beq.n	8010e50 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8010e12:	f000 fae7 	bl	80113e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e18:	68fa      	ldr	r2, [r7, #12]
 8010e1a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1e:	68ba      	ldr	r2, [r7, #8]
 8010e20:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e24:	683a      	ldr	r2, [r7, #0]
 8010e26:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2a:	6a3a      	ldr	r2, [r7, #32]
 8010e2c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e30:	3304      	adds	r3, #4
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fd fe12 	bl	800ea5c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d008      	beq.n	8010e50 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8010e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e44:	f043 0304 	orr.w	r3, r3, #4
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010e50:	bf00      	nop
 8010e52:	3718      	adds	r7, #24
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b08a      	sub	sp, #40	; 0x28
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	607a      	str	r2, [r7, #4]
 8010e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010e66:	2300      	movs	r3, #0
 8010e68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d10a      	bne.n	8010e86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010e70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010e74:	f383 8811 	msr	BASEPRI, r3
 8010e78:	f3bf 8f6f 	isb	sy
 8010e7c:	f3bf 8f4f 	dsb	sy
 8010e80:	623b      	str	r3, [r7, #32]
}
 8010e82:	bf00      	nop
 8010e84:	e7fe      	b.n	8010e84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010e86:	4b1a      	ldr	r3, [pc, #104]	; (8010ef0 <xTimerGenericCommand+0x98>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d02a      	beq.n	8010ee4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	2b05      	cmp	r3, #5
 8010e9e:	dc18      	bgt.n	8010ed2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010ea0:	f7ff fe0c 	bl	8010abc <xTaskGetSchedulerState>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	2b02      	cmp	r3, #2
 8010ea8:	d109      	bne.n	8010ebe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010eaa:	4b11      	ldr	r3, [pc, #68]	; (8010ef0 <xTimerGenericCommand+0x98>)
 8010eac:	6818      	ldr	r0, [r3, #0]
 8010eae:	f107 0110 	add.w	r1, r7, #16
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eb6:	f7fe f9bb 	bl	800f230 <xQueueGenericSend>
 8010eba:	6278      	str	r0, [r7, #36]	; 0x24
 8010ebc:	e012      	b.n	8010ee4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010ebe:	4b0c      	ldr	r3, [pc, #48]	; (8010ef0 <xTimerGenericCommand+0x98>)
 8010ec0:	6818      	ldr	r0, [r3, #0]
 8010ec2:	f107 0110 	add.w	r1, r7, #16
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	2200      	movs	r2, #0
 8010eca:	f7fe f9b1 	bl	800f230 <xQueueGenericSend>
 8010ece:	6278      	str	r0, [r7, #36]	; 0x24
 8010ed0:	e008      	b.n	8010ee4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010ed2:	4b07      	ldr	r3, [pc, #28]	; (8010ef0 <xTimerGenericCommand+0x98>)
 8010ed4:	6818      	ldr	r0, [r3, #0]
 8010ed6:	f107 0110 	add.w	r1, r7, #16
 8010eda:	2300      	movs	r3, #0
 8010edc:	683a      	ldr	r2, [r7, #0]
 8010ede:	f7fe faa5 	bl	800f42c <xQueueGenericSendFromISR>
 8010ee2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3728      	adds	r7, #40	; 0x28
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	20008324 	.word	0x20008324

08010ef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b088      	sub	sp, #32
 8010ef8:	af02      	add	r7, sp, #8
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010efe:	4b22      	ldr	r3, [pc, #136]	; (8010f88 <prvProcessExpiredTimer+0x94>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	3304      	adds	r3, #4
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fd fe0f 	bl	800eb30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f18:	f003 0304 	and.w	r3, r3, #4
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d022      	beq.n	8010f66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	699a      	ldr	r2, [r3, #24]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	18d1      	adds	r1, r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	683a      	ldr	r2, [r7, #0]
 8010f2c:	6978      	ldr	r0, [r7, #20]
 8010f2e:	f000 f8d1 	bl	80110d4 <prvInsertTimerInActiveList>
 8010f32:	4603      	mov	r3, r0
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d01f      	beq.n	8010f78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010f38:	2300      	movs	r3, #0
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	687a      	ldr	r2, [r7, #4]
 8010f40:	2100      	movs	r1, #0
 8010f42:	6978      	ldr	r0, [r7, #20]
 8010f44:	f7ff ff88 	bl	8010e58 <xTimerGenericCommand>
 8010f48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d113      	bne.n	8010f78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010f50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010f54:	f383 8811 	msr	BASEPRI, r3
 8010f58:	f3bf 8f6f 	isb	sy
 8010f5c:	f3bf 8f4f 	dsb	sy
 8010f60:	60fb      	str	r3, [r7, #12]
}
 8010f62:	bf00      	nop
 8010f64:	e7fe      	b.n	8010f64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f6c:	f023 0301 	bic.w	r3, r3, #1
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	6a1b      	ldr	r3, [r3, #32]
 8010f7c:	6978      	ldr	r0, [r7, #20]
 8010f7e:	4798      	blx	r3
}
 8010f80:	bf00      	nop
 8010f82:	3718      	adds	r7, #24
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	2000831c 	.word	0x2000831c

08010f8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010f94:	f107 0308 	add.w	r3, r7, #8
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f000 f857 	bl	801104c <prvGetNextExpireTime>
 8010f9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f000 f803 	bl	8010fb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010faa:	f000 f8d5 	bl	8011158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010fae:	e7f1      	b.n	8010f94 <prvTimerTask+0x8>

08010fb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010fba:	f7ff f955 	bl	8010268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010fbe:	f107 0308 	add.w	r3, r7, #8
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f000 f866 	bl	8011094 <prvSampleTimeNow>
 8010fc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d130      	bne.n	8011032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d10a      	bne.n	8010fec <prvProcessTimerOrBlockTask+0x3c>
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d806      	bhi.n	8010fec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010fde:	f7ff f951 	bl	8010284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010fe2:	68f9      	ldr	r1, [r7, #12]
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f7ff ff85 	bl	8010ef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010fea:	e024      	b.n	8011036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d008      	beq.n	8011004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010ff2:	4b13      	ldr	r3, [pc, #76]	; (8011040 <prvProcessTimerOrBlockTask+0x90>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d101      	bne.n	8011000 <prvProcessTimerOrBlockTask+0x50>
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	e000      	b.n	8011002 <prvProcessTimerOrBlockTask+0x52>
 8011000:	2300      	movs	r3, #0
 8011002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011004:	4b0f      	ldr	r3, [pc, #60]	; (8011044 <prvProcessTimerOrBlockTask+0x94>)
 8011006:	6818      	ldr	r0, [r3, #0]
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	1ad3      	subs	r3, r2, r3
 801100e:	683a      	ldr	r2, [r7, #0]
 8011010:	4619      	mov	r1, r3
 8011012:	f7fe fcc1 	bl	800f998 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011016:	f7ff f935 	bl	8010284 <xTaskResumeAll>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	d10a      	bne.n	8011036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011020:	4b09      	ldr	r3, [pc, #36]	; (8011048 <prvProcessTimerOrBlockTask+0x98>)
 8011022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011026:	601a      	str	r2, [r3, #0]
 8011028:	f3bf 8f4f 	dsb	sy
 801102c:	f3bf 8f6f 	isb	sy
}
 8011030:	e001      	b.n	8011036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011032:	f7ff f927 	bl	8010284 <xTaskResumeAll>
}
 8011036:	bf00      	nop
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	20008320 	.word	0x20008320
 8011044:	20008324 	.word	0x20008324
 8011048:	e000ed04 	.word	0xe000ed04

0801104c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801104c:	b480      	push	{r7}
 801104e:	b085      	sub	sp, #20
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011054:	4b0e      	ldr	r3, [pc, #56]	; (8011090 <prvGetNextExpireTime+0x44>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d101      	bne.n	8011062 <prvGetNextExpireTime+0x16>
 801105e:	2201      	movs	r2, #1
 8011060:	e000      	b.n	8011064 <prvGetNextExpireTime+0x18>
 8011062:	2200      	movs	r2, #0
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d105      	bne.n	801107c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011070:	4b07      	ldr	r3, [pc, #28]	; (8011090 <prvGetNextExpireTime+0x44>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	60fb      	str	r3, [r7, #12]
 801107a:	e001      	b.n	8011080 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801107c:	2300      	movs	r3, #0
 801107e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011080:	68fb      	ldr	r3, [r7, #12]
}
 8011082:	4618      	mov	r0, r3
 8011084:	3714      	adds	r7, #20
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop
 8011090:	2000831c 	.word	0x2000831c

08011094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801109c:	f7ff f990 	bl	80103c0 <xTaskGetTickCount>
 80110a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80110a2:	4b0b      	ldr	r3, [pc, #44]	; (80110d0 <prvSampleTimeNow+0x3c>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	68fa      	ldr	r2, [r7, #12]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d205      	bcs.n	80110b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80110ac:	f000 f936 	bl	801131c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2201      	movs	r2, #1
 80110b4:	601a      	str	r2, [r3, #0]
 80110b6:	e002      	b.n	80110be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2200      	movs	r2, #0
 80110bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80110be:	4a04      	ldr	r2, [pc, #16]	; (80110d0 <prvSampleTimeNow+0x3c>)
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80110c4:	68fb      	ldr	r3, [r7, #12]
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	2000832c 	.word	0x2000832c

080110d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b086      	sub	sp, #24
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	60b9      	str	r1, [r7, #8]
 80110de:	607a      	str	r2, [r7, #4]
 80110e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80110e2:	2300      	movs	r3, #0
 80110e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	68ba      	ldr	r2, [r7, #8]
 80110ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	68fa      	ldr	r2, [r7, #12]
 80110f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80110f2:	68ba      	ldr	r2, [r7, #8]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d812      	bhi.n	8011120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	1ad2      	subs	r2, r2, r3
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	699b      	ldr	r3, [r3, #24]
 8011104:	429a      	cmp	r2, r3
 8011106:	d302      	bcc.n	801110e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011108:	2301      	movs	r3, #1
 801110a:	617b      	str	r3, [r7, #20]
 801110c:	e01b      	b.n	8011146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801110e:	4b10      	ldr	r3, [pc, #64]	; (8011150 <prvInsertTimerInActiveList+0x7c>)
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	3304      	adds	r3, #4
 8011116:	4619      	mov	r1, r3
 8011118:	4610      	mov	r0, r2
 801111a:	f7fd fcd0 	bl	800eabe <vListInsert>
 801111e:	e012      	b.n	8011146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011120:	687a      	ldr	r2, [r7, #4]
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	429a      	cmp	r2, r3
 8011126:	d206      	bcs.n	8011136 <prvInsertTimerInActiveList+0x62>
 8011128:	68ba      	ldr	r2, [r7, #8]
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	429a      	cmp	r2, r3
 801112e:	d302      	bcc.n	8011136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011130:	2301      	movs	r3, #1
 8011132:	617b      	str	r3, [r7, #20]
 8011134:	e007      	b.n	8011146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011136:	4b07      	ldr	r3, [pc, #28]	; (8011154 <prvInsertTimerInActiveList+0x80>)
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	3304      	adds	r3, #4
 801113e:	4619      	mov	r1, r3
 8011140:	4610      	mov	r0, r2
 8011142:	f7fd fcbc 	bl	800eabe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011146:	697b      	ldr	r3, [r7, #20]
}
 8011148:	4618      	mov	r0, r3
 801114a:	3718      	adds	r7, #24
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}
 8011150:	20008320 	.word	0x20008320
 8011154:	2000831c 	.word	0x2000831c

08011158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b08e      	sub	sp, #56	; 0x38
 801115c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801115e:	e0ca      	b.n	80112f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	da18      	bge.n	8011198 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011166:	1d3b      	adds	r3, r7, #4
 8011168:	3304      	adds	r3, #4
 801116a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116e:	2b00      	cmp	r3, #0
 8011170:	d10a      	bne.n	8011188 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011172:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8011176:	f383 8811 	msr	BASEPRI, r3
 801117a:	f3bf 8f6f 	isb	sy
 801117e:	f3bf 8f4f 	dsb	sy
 8011182:	61fb      	str	r3, [r7, #28]
}
 8011184:	bf00      	nop
 8011186:	e7fe      	b.n	8011186 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801118e:	6850      	ldr	r0, [r2, #4]
 8011190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011192:	6892      	ldr	r2, [r2, #8]
 8011194:	4611      	mov	r1, r2
 8011196:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2b00      	cmp	r3, #0
 801119c:	f2c0 80aa 	blt.w	80112f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80111a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a6:	695b      	ldr	r3, [r3, #20]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d004      	beq.n	80111b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80111ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ae:	3304      	adds	r3, #4
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fd fcbd 	bl	800eb30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80111b6:	463b      	mov	r3, r7
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7ff ff6b 	bl	8011094 <prvSampleTimeNow>
 80111be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2b09      	cmp	r3, #9
 80111c4:	f200 8097 	bhi.w	80112f6 <prvProcessReceivedCommands+0x19e>
 80111c8:	a201      	add	r2, pc, #4	; (adr r2, 80111d0 <prvProcessReceivedCommands+0x78>)
 80111ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ce:	bf00      	nop
 80111d0:	080111f9 	.word	0x080111f9
 80111d4:	080111f9 	.word	0x080111f9
 80111d8:	080111f9 	.word	0x080111f9
 80111dc:	0801126d 	.word	0x0801126d
 80111e0:	08011281 	.word	0x08011281
 80111e4:	080112cb 	.word	0x080112cb
 80111e8:	080111f9 	.word	0x080111f9
 80111ec:	080111f9 	.word	0x080111f9
 80111f0:	0801126d 	.word	0x0801126d
 80111f4:	08011281 	.word	0x08011281
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80111f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111fe:	f043 0301 	orr.w	r3, r3, #1
 8011202:	b2da      	uxtb	r2, r3
 8011204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801120a:	68ba      	ldr	r2, [r7, #8]
 801120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801120e:	699b      	ldr	r3, [r3, #24]
 8011210:	18d1      	adds	r1, r2, r3
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011218:	f7ff ff5c 	bl	80110d4 <prvInsertTimerInActiveList>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d069      	beq.n	80112f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011224:	6a1b      	ldr	r3, [r3, #32]
 8011226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011228:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011230:	f003 0304 	and.w	r3, r3, #4
 8011234:	2b00      	cmp	r3, #0
 8011236:	d05e      	beq.n	80112f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011238:	68ba      	ldr	r2, [r7, #8]
 801123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123c:	699b      	ldr	r3, [r3, #24]
 801123e:	441a      	add	r2, r3
 8011240:	2300      	movs	r3, #0
 8011242:	9300      	str	r3, [sp, #0]
 8011244:	2300      	movs	r3, #0
 8011246:	2100      	movs	r1, #0
 8011248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801124a:	f7ff fe05 	bl	8010e58 <xTimerGenericCommand>
 801124e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011250:	6a3b      	ldr	r3, [r7, #32]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d14f      	bne.n	80112f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011256:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801125a:	f383 8811 	msr	BASEPRI, r3
 801125e:	f3bf 8f6f 	isb	sy
 8011262:	f3bf 8f4f 	dsb	sy
 8011266:	61bb      	str	r3, [r7, #24]
}
 8011268:	bf00      	nop
 801126a:	e7fe      	b.n	801126a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801126e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011272:	f023 0301 	bic.w	r3, r3, #1
 8011276:	b2da      	uxtb	r2, r3
 8011278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801127e:	e03a      	b.n	80112f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011286:	f043 0301 	orr.w	r3, r3, #1
 801128a:	b2da      	uxtb	r2, r3
 801128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011292:	68ba      	ldr	r2, [r7, #8]
 8011294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011296:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129a:	699b      	ldr	r3, [r3, #24]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d10a      	bne.n	80112b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80112a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80112a4:	f383 8811 	msr	BASEPRI, r3
 80112a8:	f3bf 8f6f 	isb	sy
 80112ac:	f3bf 8f4f 	dsb	sy
 80112b0:	617b      	str	r3, [r7, #20]
}
 80112b2:	bf00      	nop
 80112b4:	e7fe      	b.n	80112b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80112b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b8:	699a      	ldr	r2, [r3, #24]
 80112ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112bc:	18d1      	adds	r1, r2, r3
 80112be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112c4:	f7ff ff06 	bl	80110d4 <prvInsertTimerInActiveList>
					break;
 80112c8:	e015      	b.n	80112f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80112ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112d0:	f003 0302 	and.w	r3, r3, #2
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d103      	bne.n	80112e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80112d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112da:	f7fd fb87 	bl	800e9ec <vPortFree>
 80112de:	e00a      	b.n	80112f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80112e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112e6:	f023 0301 	bic.w	r3, r3, #1
 80112ea:	b2da      	uxtb	r2, r3
 80112ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80112f2:	e000      	b.n	80112f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80112f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80112f6:	4b08      	ldr	r3, [pc, #32]	; (8011318 <prvProcessReceivedCommands+0x1c0>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	1d39      	adds	r1, r7, #4
 80112fc:	2200      	movs	r2, #0
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fe f930 	bl	800f564 <xQueueReceive>
 8011304:	4603      	mov	r3, r0
 8011306:	2b00      	cmp	r3, #0
 8011308:	f47f af2a 	bne.w	8011160 <prvProcessReceivedCommands+0x8>
	}
}
 801130c:	bf00      	nop
 801130e:	bf00      	nop
 8011310:	3730      	adds	r7, #48	; 0x30
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	20008324 	.word	0x20008324

0801131c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b088      	sub	sp, #32
 8011320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011322:	e048      	b.n	80113b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011324:	4b2d      	ldr	r3, [pc, #180]	; (80113dc <prvSwitchTimerLists+0xc0>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801132e:	4b2b      	ldr	r3, [pc, #172]	; (80113dc <prvSwitchTimerLists+0xc0>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	3304      	adds	r3, #4
 801133c:	4618      	mov	r0, r3
 801133e:	f7fd fbf7 	bl	800eb30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	6a1b      	ldr	r3, [r3, #32]
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011350:	f003 0304 	and.w	r3, r3, #4
 8011354:	2b00      	cmp	r3, #0
 8011356:	d02e      	beq.n	80113b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	699b      	ldr	r3, [r3, #24]
 801135c:	693a      	ldr	r2, [r7, #16]
 801135e:	4413      	add	r3, r2
 8011360:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	429a      	cmp	r2, r3
 8011368:	d90e      	bls.n	8011388 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	68ba      	ldr	r2, [r7, #8]
 801136e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	68fa      	ldr	r2, [r7, #12]
 8011374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011376:	4b19      	ldr	r3, [pc, #100]	; (80113dc <prvSwitchTimerLists+0xc0>)
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	3304      	adds	r3, #4
 801137e:	4619      	mov	r1, r3
 8011380:	4610      	mov	r0, r2
 8011382:	f7fd fb9c 	bl	800eabe <vListInsert>
 8011386:	e016      	b.n	80113b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011388:	2300      	movs	r3, #0
 801138a:	9300      	str	r3, [sp, #0]
 801138c:	2300      	movs	r3, #0
 801138e:	693a      	ldr	r2, [r7, #16]
 8011390:	2100      	movs	r1, #0
 8011392:	68f8      	ldr	r0, [r7, #12]
 8011394:	f7ff fd60 	bl	8010e58 <xTimerGenericCommand>
 8011398:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d10a      	bne.n	80113b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80113a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80113a4:	f383 8811 	msr	BASEPRI, r3
 80113a8:	f3bf 8f6f 	isb	sy
 80113ac:	f3bf 8f4f 	dsb	sy
 80113b0:	603b      	str	r3, [r7, #0]
}
 80113b2:	bf00      	nop
 80113b4:	e7fe      	b.n	80113b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80113b6:	4b09      	ldr	r3, [pc, #36]	; (80113dc <prvSwitchTimerLists+0xc0>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d1b1      	bne.n	8011324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80113c0:	4b06      	ldr	r3, [pc, #24]	; (80113dc <prvSwitchTimerLists+0xc0>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80113c6:	4b06      	ldr	r3, [pc, #24]	; (80113e0 <prvSwitchTimerLists+0xc4>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	4a04      	ldr	r2, [pc, #16]	; (80113dc <prvSwitchTimerLists+0xc0>)
 80113cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80113ce:	4a04      	ldr	r2, [pc, #16]	; (80113e0 <prvSwitchTimerLists+0xc4>)
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	6013      	str	r3, [r2, #0]
}
 80113d4:	bf00      	nop
 80113d6:	3718      	adds	r7, #24
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	2000831c 	.word	0x2000831c
 80113e0:	20008320 	.word	0x20008320

080113e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80113ea:	f7fd fcfb 	bl	800ede4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80113ee:	4b15      	ldr	r3, [pc, #84]	; (8011444 <prvCheckForValidListAndQueue+0x60>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d120      	bne.n	8011438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80113f6:	4814      	ldr	r0, [pc, #80]	; (8011448 <prvCheckForValidListAndQueue+0x64>)
 80113f8:	f7fd fb10 	bl	800ea1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80113fc:	4813      	ldr	r0, [pc, #76]	; (801144c <prvCheckForValidListAndQueue+0x68>)
 80113fe:	f7fd fb0d 	bl	800ea1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011402:	4b13      	ldr	r3, [pc, #76]	; (8011450 <prvCheckForValidListAndQueue+0x6c>)
 8011404:	4a10      	ldr	r2, [pc, #64]	; (8011448 <prvCheckForValidListAndQueue+0x64>)
 8011406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011408:	4b12      	ldr	r3, [pc, #72]	; (8011454 <prvCheckForValidListAndQueue+0x70>)
 801140a:	4a10      	ldr	r2, [pc, #64]	; (801144c <prvCheckForValidListAndQueue+0x68>)
 801140c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801140e:	2300      	movs	r3, #0
 8011410:	9300      	str	r3, [sp, #0]
 8011412:	4b11      	ldr	r3, [pc, #68]	; (8011458 <prvCheckForValidListAndQueue+0x74>)
 8011414:	4a11      	ldr	r2, [pc, #68]	; (801145c <prvCheckForValidListAndQueue+0x78>)
 8011416:	2110      	movs	r1, #16
 8011418:	20ff      	movs	r0, #255	; 0xff
 801141a:	f7fd fe6d 	bl	800f0f8 <xQueueGenericCreateStatic>
 801141e:	4603      	mov	r3, r0
 8011420:	4a08      	ldr	r2, [pc, #32]	; (8011444 <prvCheckForValidListAndQueue+0x60>)
 8011422:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011424:	4b07      	ldr	r3, [pc, #28]	; (8011444 <prvCheckForValidListAndQueue+0x60>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d005      	beq.n	8011438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801142c:	4b05      	ldr	r3, [pc, #20]	; (8011444 <prvCheckForValidListAndQueue+0x60>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	490b      	ldr	r1, [pc, #44]	; (8011460 <prvCheckForValidListAndQueue+0x7c>)
 8011432:	4618      	mov	r0, r3
 8011434:	f7fe fa86 	bl	800f944 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011438:	f7fd fd04 	bl	800ee44 <vPortExitCritical>
}
 801143c:	bf00      	nop
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	20008324 	.word	0x20008324
 8011448:	200082f4 	.word	0x200082f4
 801144c:	20008308 	.word	0x20008308
 8011450:	2000831c 	.word	0x2000831c
 8011454:	20008320 	.word	0x20008320
 8011458:	20009320 	.word	0x20009320
 801145c:	20008330 	.word	0x20008330
 8011460:	0801402c 	.word	0x0801402c

08011464 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b086      	sub	sp, #24
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d10a      	bne.n	801148c <xTimerIsTimerActive+0x28>
	__asm volatile
 8011476:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801147a:	f383 8811 	msr	BASEPRI, r3
 801147e:	f3bf 8f6f 	isb	sy
 8011482:	f3bf 8f4f 	dsb	sy
 8011486:	60fb      	str	r3, [r7, #12]
}
 8011488:	bf00      	nop
 801148a:	e7fe      	b.n	801148a <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 801148c:	f7fd fcaa 	bl	800ede4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011496:	f003 0301 	and.w	r3, r3, #1
 801149a:	2b00      	cmp	r3, #0
 801149c:	d102      	bne.n	80114a4 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 801149e:	2300      	movs	r3, #0
 80114a0:	617b      	str	r3, [r7, #20]
 80114a2:	e001      	b.n	80114a8 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 80114a4:	2301      	movs	r3, #1
 80114a6:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80114a8:	f7fd fccc 	bl	800ee44 <vPortExitCritical>

	return xReturn;
 80114ac:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80114ae:	4618      	mov	r0, r3
 80114b0:	3718      	adds	r7, #24
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}

080114b6 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80114b6:	b580      	push	{r7, lr}
 80114b8:	b086      	sub	sp, #24
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d10a      	bne.n	80114de <pvTimerGetTimerID+0x28>
	__asm volatile
 80114c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80114cc:	f383 8811 	msr	BASEPRI, r3
 80114d0:	f3bf 8f6f 	isb	sy
 80114d4:	f3bf 8f4f 	dsb	sy
 80114d8:	60fb      	str	r3, [r7, #12]
}
 80114da:	bf00      	nop
 80114dc:	e7fe      	b.n	80114dc <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80114de:	f7fd fc81 	bl	800ede4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	69db      	ldr	r3, [r3, #28]
 80114e6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80114e8:	f7fd fcac 	bl	800ee44 <vPortExitCritical>

	return pvReturn;
 80114ec:	693b      	ldr	r3, [r7, #16]
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3718      	adds	r7, #24
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
	...

080114f8 <Rte_Read_Dem_DemPort_Dem_DtcArray>:
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/* Run time environment interface. */
VOID Rte_Read_Dem_DemPort_Dem_DtcArray(uint8* data, uint8 position)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b083      	sub	sp, #12
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	460b      	mov	r3, r1
 8011502:	70fb      	strb	r3, [r7, #3]
	if(Dem_DtcArray[0] > 250)
 8011504:	4b3a      	ldr	r3, [pc, #232]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	2bfa      	cmp	r3, #250	; 0xfa
 801150a:	d904      	bls.n	8011516 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x1e>
	{
		ExtLights_DtcArray[0] = Dem_DtcArray[0];
 801150c:	4b38      	ldr	r3, [pc, #224]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 801150e:	781a      	ldrb	r2, [r3, #0]
 8011510:	4b38      	ldr	r3, [pc, #224]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011512:	701a      	strb	r2, [r3, #0]
 8011514:	e002      	b.n	801151c <Rte_Read_Dem_DemPort_Dem_DtcArray+0x24>
	}
	else
	{
		ExtLights_DtcArray[0] = 0;
 8011516:	4b37      	ldr	r3, [pc, #220]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011518:	2200      	movs	r2, #0
 801151a:	701a      	strb	r2, [r3, #0]
	}
	if(Dem_DtcArray[1] > 250)
 801151c:	4b34      	ldr	r3, [pc, #208]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 801151e:	785b      	ldrb	r3, [r3, #1]
 8011520:	2bfa      	cmp	r3, #250	; 0xfa
 8011522:	d904      	bls.n	801152e <Rte_Read_Dem_DemPort_Dem_DtcArray+0x36>
	{
		ExtLights_DtcArray[1] = Dem_DtcArray[1];
 8011524:	4b32      	ldr	r3, [pc, #200]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011526:	785a      	ldrb	r2, [r3, #1]
 8011528:	4b32      	ldr	r3, [pc, #200]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 801152a:	705a      	strb	r2, [r3, #1]
 801152c:	e002      	b.n	8011534 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x3c>
	}
	else
	{
		ExtLights_DtcArray[1] = 0;
 801152e:	4b31      	ldr	r3, [pc, #196]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011530:	2200      	movs	r2, #0
 8011532:	705a      	strb	r2, [r3, #1]
	}
	if(Dem_DtcArray[2] > 250)
 8011534:	4b2e      	ldr	r3, [pc, #184]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011536:	789b      	ldrb	r3, [r3, #2]
 8011538:	2bfa      	cmp	r3, #250	; 0xfa
 801153a:	d904      	bls.n	8011546 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x4e>
	{
		ExtLights_DtcArray[2] = Dem_DtcArray[2];
 801153c:	4b2c      	ldr	r3, [pc, #176]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 801153e:	789a      	ldrb	r2, [r3, #2]
 8011540:	4b2c      	ldr	r3, [pc, #176]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011542:	709a      	strb	r2, [r3, #2]
 8011544:	e002      	b.n	801154c <Rte_Read_Dem_DemPort_Dem_DtcArray+0x54>
	}
	else
	{
		ExtLights_DtcArray[2] = 0;
 8011546:	4b2b      	ldr	r3, [pc, #172]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011548:	2200      	movs	r2, #0
 801154a:	709a      	strb	r2, [r3, #2]
	}
	if(Dem_DtcArray[3] > 250)
 801154c:	4b28      	ldr	r3, [pc, #160]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 801154e:	78db      	ldrb	r3, [r3, #3]
 8011550:	2bfa      	cmp	r3, #250	; 0xfa
 8011552:	d904      	bls.n	801155e <Rte_Read_Dem_DemPort_Dem_DtcArray+0x66>
	{
		ExtLights_DtcArray[3] = Dem_DtcArray[3];
 8011554:	4b26      	ldr	r3, [pc, #152]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011556:	78da      	ldrb	r2, [r3, #3]
 8011558:	4b26      	ldr	r3, [pc, #152]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 801155a:	70da      	strb	r2, [r3, #3]
 801155c:	e002      	b.n	8011564 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>
	}
	else
	{
		ExtLights_DtcArray[3] = 0;
 801155e:	4b25      	ldr	r3, [pc, #148]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011560:	2200      	movs	r2, #0
 8011562:	70da      	strb	r2, [r3, #3]
	}

	if(Dem_DtcArray[4] > 250)
 8011564:	4b22      	ldr	r3, [pc, #136]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011566:	791b      	ldrb	r3, [r3, #4]
 8011568:	2bfa      	cmp	r3, #250	; 0xfa
 801156a:	d904      	bls.n	8011576 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x7e>
	{
		ExtLights_DtcArray[4] = Dem_DtcArray[4];
 801156c:	4b20      	ldr	r3, [pc, #128]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 801156e:	791a      	ldrb	r2, [r3, #4]
 8011570:	4b20      	ldr	r3, [pc, #128]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011572:	711a      	strb	r2, [r3, #4]
 8011574:	e002      	b.n	801157c <Rte_Read_Dem_DemPort_Dem_DtcArray+0x84>
	}
	else
	{
		ExtLights_DtcArray[4] = 0;
 8011576:	4b1f      	ldr	r3, [pc, #124]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011578:	2200      	movs	r2, #0
 801157a:	711a      	strb	r2, [r3, #4]
	}
	if(Dem_DtcArray[5] > 250)
 801157c:	4b1c      	ldr	r3, [pc, #112]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 801157e:	795b      	ldrb	r3, [r3, #5]
 8011580:	2bfa      	cmp	r3, #250	; 0xfa
 8011582:	d904      	bls.n	801158e <Rte_Read_Dem_DemPort_Dem_DtcArray+0x96>
	{
		ExtLights_DtcArray[5] = Dem_DtcArray[5];
 8011584:	4b1a      	ldr	r3, [pc, #104]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011586:	795a      	ldrb	r2, [r3, #5]
 8011588:	4b1a      	ldr	r3, [pc, #104]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 801158a:	715a      	strb	r2, [r3, #5]
 801158c:	e002      	b.n	8011594 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x9c>
	}
	else
	{
		ExtLights_DtcArray[5] = 0;
 801158e:	4b19      	ldr	r3, [pc, #100]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011590:	2200      	movs	r2, #0
 8011592:	715a      	strb	r2, [r3, #5]
	}
	if(Dem_DtcArray[6] > 250)
 8011594:	4b16      	ldr	r3, [pc, #88]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011596:	799b      	ldrb	r3, [r3, #6]
 8011598:	2bfa      	cmp	r3, #250	; 0xfa
 801159a:	d904      	bls.n	80115a6 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xae>
	{
		ExtLights_DtcArray[6] = Dem_DtcArray[6];
 801159c:	4b14      	ldr	r3, [pc, #80]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 801159e:	799a      	ldrb	r2, [r3, #6]
 80115a0:	4b14      	ldr	r3, [pc, #80]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 80115a2:	719a      	strb	r2, [r3, #6]
 80115a4:	e002      	b.n	80115ac <Rte_Read_Dem_DemPort_Dem_DtcArray+0xb4>
	}
	else
	{
		ExtLights_DtcArray[6] = 0;
 80115a6:	4b13      	ldr	r3, [pc, #76]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 80115a8:	2200      	movs	r2, #0
 80115aa:	719a      	strb	r2, [r3, #6]
	}
	if(Dem_DtcArray[7] > 250)
 80115ac:	4b10      	ldr	r3, [pc, #64]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 80115ae:	79db      	ldrb	r3, [r3, #7]
 80115b0:	2bfa      	cmp	r3, #250	; 0xfa
 80115b2:	d904      	bls.n	80115be <Rte_Read_Dem_DemPort_Dem_DtcArray+0xc6>
	{
		ExtLights_DtcArray[7] = Dem_DtcArray[7];
 80115b4:	4b0e      	ldr	r3, [pc, #56]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 80115b6:	79da      	ldrb	r2, [r3, #7]
 80115b8:	4b0e      	ldr	r3, [pc, #56]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 80115ba:	71da      	strb	r2, [r3, #7]
 80115bc:	e002      	b.n	80115c4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xcc>
	}
	else
	{
		ExtLights_DtcArray[7] = 0;
 80115be:	4b0d      	ldr	r3, [pc, #52]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 80115c0:	2200      	movs	r2, #0
 80115c2:	71da      	strb	r2, [r3, #7]
	{
		ExtLights_DtcArray[8] = Dem_DtcArray[8];
	}
	else
	{
		ExtLights_DtcArray[8] = 0;
 80115c4:	4b0b      	ldr	r3, [pc, #44]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 80115c6:	2200      	movs	r2, #0
 80115c8:	721a      	strb	r2, [r3, #8]
	}
	if(Dem_DtcArray[9] > 250)
 80115ca:	4b09      	ldr	r3, [pc, #36]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 80115cc:	7a5b      	ldrb	r3, [r3, #9]
 80115ce:	2bfa      	cmp	r3, #250	; 0xfa
 80115d0:	d904      	bls.n	80115dc <Rte_Read_Dem_DemPort_Dem_DtcArray+0xe4>
	{
		ExtLights_DtcArray[9] = Dem_DtcArray[9];
 80115d2:	4b07      	ldr	r3, [pc, #28]	; (80115f0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 80115d4:	7a5a      	ldrb	r2, [r3, #9]
 80115d6:	4b07      	ldr	r3, [pc, #28]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 80115d8:	725a      	strb	r2, [r3, #9]
	}
	else
	{
		ExtLights_DtcArray[9] = 0;
	}
}
 80115da:	e002      	b.n	80115e2 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xea>
		ExtLights_DtcArray[9] = 0;
 80115dc:	4b05      	ldr	r3, [pc, #20]	; (80115f4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 80115de:	2200      	movs	r2, #0
 80115e0:	725a      	strb	r2, [r3, #9]
}
 80115e2:	bf00      	nop
 80115e4:	370c      	adds	r7, #12
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr
 80115ee:	bf00      	nop
 80115f0:	20000890 	.word	0x20000890
 80115f4:	20000170 	.word	0x20000170

080115f8 <Rte_Write_TimH_TimHPort_Tim3Ccr2>:
{
	TIM3->CCR1 = data;
}
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr2(uint8 data)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	4603      	mov	r3, r0
 8011600:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR2 = data;
 8011602:	4a04      	ldr	r2, [pc, #16]	; (8011614 <Rte_Write_TimH_TimHPort_Tim3Ccr2+0x1c>)
 8011604:	79fb      	ldrb	r3, [r7, #7]
 8011606:	6393      	str	r3, [r2, #56]	; 0x38
}
 8011608:	bf00      	nop
 801160a:	370c      	adds	r7, #12
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr
 8011614:	40000400 	.word	0x40000400

08011618 <Rte_Write_TimH_TimHPort_Tim3Ccr3>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr3(uint8 data)
{
 8011618:	b480      	push	{r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	4603      	mov	r3, r0
 8011620:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR3 = data;
 8011622:	4a04      	ldr	r2, [pc, #16]	; (8011634 <Rte_Write_TimH_TimHPort_Tim3Ccr3+0x1c>)
 8011624:	79fb      	ldrb	r3, [r7, #7]
 8011626:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8011628:	bf00      	nop
 801162a:	370c      	adds	r7, #12
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr
 8011634:	40000400 	.word	0x40000400

08011638 <Rte_Write_TimH_TimHPort_Tim3Ccr4>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr4(uint8 data)
{
 8011638:	b480      	push	{r7}
 801163a:	b083      	sub	sp, #12
 801163c:	af00      	add	r7, sp, #0
 801163e:	4603      	mov	r3, r0
 8011640:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR4 = data;
 8011642:	4a04      	ldr	r2, [pc, #16]	; (8011654 <Rte_Write_TimH_TimHPort_Tim3Ccr4+0x1c>)
 8011644:	79fb      	ldrb	r3, [r7, #7]
 8011646:	6413      	str	r3, [r2, #64]	; 0x40
}
 8011648:	bf00      	nop
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr
 8011654:	40000400 	.word	0x40000400

08011658 <Rte_Write_TimH_TimHPort_Tim2Ccr1>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr1(uint16 data)
{
 8011658:	b480      	push	{r7}
 801165a:	b083      	sub	sp, #12
 801165c:	af00      	add	r7, sp, #0
 801165e:	4603      	mov	r3, r0
 8011660:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = data;
 8011662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011666:	88fb      	ldrh	r3, [r7, #6]
 8011668:	6353      	str	r3, [r2, #52]	; 0x34
}
 801166a:	bf00      	nop
 801166c:	370c      	adds	r7, #12
 801166e:	46bd      	mov	sp, r7
 8011670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011674:	4770      	bx	lr

08011676 <Rte_Write_TimH_TimHPort_Tim2Ccr2>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr2(uint16 data)
{
 8011676:	b480      	push	{r7}
 8011678:	b083      	sub	sp, #12
 801167a:	af00      	add	r7, sp, #0
 801167c:	4603      	mov	r3, r0
 801167e:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = data;
 8011680:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011684:	88fb      	ldrh	r3, [r7, #6]
 8011686:	6393      	str	r3, [r2, #56]	; 0x38
}
 8011688:	bf00      	nop
 801168a:	370c      	adds	r7, #12
 801168c:	46bd      	mov	sp, r7
 801168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011692:	4770      	bx	lr

08011694 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>:
{
	TIM2->CCR3 = data;
}
/* Run time environment interface. */
VOID Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(uint8* data, uint8 position)
{
 8011694:	b480      	push	{r7}
 8011696:	b083      	sub	sp, #12
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	460b      	mov	r3, r1
 801169e:	70fb      	strb	r3, [r7, #3]
	*data = SystemManager_Fault[position];
 80116a0:	78fb      	ldrb	r3, [r7, #3]
 80116a2:	4a06      	ldr	r2, [pc, #24]	; (80116bc <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault+0x28>)
 80116a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	701a      	strb	r2, [r3, #0]
}
 80116ae:	bf00      	nop
 80116b0:	370c      	adds	r7, #12
 80116b2:	46bd      	mov	sp, r7
 80116b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b8:	4770      	bx	lr
 80116ba:	bf00      	nop
 80116bc:	2000941c 	.word	0x2000941c

080116c0 <Rte_Write_Hvac_HvacPort_Hvac_FanValue>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_FanValue(uint8* data)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b083      	sub	sp, #12
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
	Hvac_FanValue = *data - 30;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	3b1e      	subs	r3, #30
 80116ce:	b2da      	uxtb	r2, r3
 80116d0:	4b03      	ldr	r3, [pc, #12]	; (80116e0 <Rte_Write_Hvac_HvacPort_Hvac_FanValue+0x20>)
 80116d2:	701a      	strb	r2, [r3, #0]
}
 80116d4:	bf00      	nop
 80116d6:	370c      	adds	r7, #12
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr
 80116e0:	20000182 	.word	0x20000182

080116e4 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue(uint8* data)
{
 80116e4:	b480      	push	{r7}
 80116e6:	b083      	sub	sp, #12
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
	Hvac_TemperatureValue = *data - 22;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	3b16      	subs	r3, #22
 80116f2:	b2da      	uxtb	r2, r3
 80116f4:	4b03      	ldr	r3, [pc, #12]	; (8011704 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue+0x20>)
 80116f6:	701a      	strb	r2, [r3, #0]
}
 80116f8:	bf00      	nop
 80116fa:	370c      	adds	r7, #12
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr
 8011704:	20000183 	.word	0x20000183

08011708 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_LegVent(uint8* data)
{
 8011708:	b480      	push	{r7}
 801170a:	b083      	sub	sp, #12
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
	Hvac_LegVent = *data;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	781a      	ldrb	r2, [r3, #0]
 8011714:	4b03      	ldr	r3, [pc, #12]	; (8011724 <Rte_Write_Hvac_HvacPort_Hvac_LegVent+0x1c>)
 8011716:	701a      	strb	r2, [r3, #0]
}
 8011718:	bf00      	nop
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr
 8011724:	20000184 	.word	0x20000184

08011728 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_MidVent(uint8* data)
{
 8011728:	b480      	push	{r7}
 801172a:	b083      	sub	sp, #12
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
	Hvac_MidVent = *data;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	781a      	ldrb	r2, [r3, #0]
 8011734:	4b03      	ldr	r3, [pc, #12]	; (8011744 <Rte_Write_Hvac_HvacPort_Hvac_MidVent+0x1c>)
 8011736:	701a      	strb	r2, [r3, #0]
}
 8011738:	bf00      	nop
 801173a:	370c      	adds	r7, #12
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr
 8011744:	20000185 	.word	0x20000185

08011748 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(uint8* data)
{
 8011748:	b480      	push	{r7}
 801174a:	b083      	sub	sp, #12
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
	Hvac_WindshieldVent = *data;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	781a      	ldrb	r2, [r3, #0]
 8011754:	4b03      	ldr	r3, [pc, #12]	; (8011764 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent+0x1c>)
 8011756:	701a      	strb	r2, [r3, #0]
}
 8011758:	bf00      	nop
 801175a:	370c      	adds	r7, #12
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr
 8011764:	20000186 	.word	0x20000186

08011768 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(uint8* data)
{
 8011768:	b480      	push	{r7}
 801176a:	b083      	sub	sp, #12
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
	Hvac_WindshieldDefrost = *data;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	781a      	ldrb	r2, [r3, #0]
 8011774:	4b03      	ldr	r3, [pc, #12]	; (8011784 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost+0x1c>)
 8011776:	701a      	strb	r2, [r3, #0]
}
 8011778:	bf00      	nop
 801177a:	370c      	adds	r7, #12
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr
 8011784:	20000187 	.word	0x20000187

08011788 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(uint8* data)
{
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
	Hvac_RearWindshieldDefrost = *data;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	781a      	ldrb	r2, [r3, #0]
 8011794:	4b03      	ldr	r3, [pc, #12]	; (80117a4 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost+0x1c>)
 8011796:	701a      	strb	r2, [r3, #0]
}
 8011798:	bf00      	nop
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr
 80117a4:	20000188 	.word	0x20000188

080117a8 <Rte_Write_Hvac_HvacPort_Hvac_Ac>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_Ac(uint8* data)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
	Hvac_Ac = *data;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	781a      	ldrb	r2, [r3, #0]
 80117b4:	4b03      	ldr	r3, [pc, #12]	; (80117c4 <Rte_Write_Hvac_HvacPort_Hvac_Ac+0x1c>)
 80117b6:	701a      	strb	r2, [r3, #0]
}
 80117b8:	bf00      	nop
 80117ba:	370c      	adds	r7, #12
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr
 80117c4:	20000189 	.word	0x20000189

080117c8 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_Recirculation(uint8* data)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b083      	sub	sp, #12
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
	Hvac_Recirculation = *data;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	781a      	ldrb	r2, [r3, #0]
 80117d4:	4b03      	ldr	r3, [pc, #12]	; (80117e4 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation+0x1c>)
 80117d6:	701a      	strb	r2, [r3, #0]
}
 80117d8:	bf00      	nop
 80117da:	370c      	adds	r7, #12
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr
 80117e4:	2000018a 	.word	0x2000018a

080117e8 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(uint8* data)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
	Hvac_NoRecirculation = *data;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	781a      	ldrb	r2, [r3, #0]
 80117f4:	4b03      	ldr	r3, [pc, #12]	; (8011804 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation+0x1c>)
 80117f6:	701a      	strb	r2, [r3, #0]
}
 80117f8:	bf00      	nop
 80117fa:	370c      	adds	r7, #12
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr
 8011804:	2000018b 	.word	0x2000018b

08011808 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(uint8* data)
{
 8011808:	b480      	push	{r7}
 801180a:	b083      	sub	sp, #12
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
	Hvac_AutomaticMode = *data;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	781a      	ldrb	r2, [r3, #0]
 8011814:	4b03      	ldr	r3, [pc, #12]	; (8011824 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode+0x1c>)
 8011816:	701a      	strb	r2, [r3, #0]
}
 8011818:	bf00      	nop
 801181a:	370c      	adds	r7, #12
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr
 8011824:	2000018c 	.word	0x2000018c

08011828 <Rte_Write_Hvac_HvacPort_Hvac_TsState>:
{
	 Hvac_AqsState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_TsState(uint8* data)
{
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
	Hvac_TsState = *data;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	781a      	ldrb	r2, [r3, #0]
 8011834:	4b03      	ldr	r3, [pc, #12]	; (8011844 <Rte_Write_Hvac_HvacPort_Hvac_TsState+0x1c>)
 8011836:	701a      	strb	r2, [r3, #0]
}
 8011838:	bf00      	nop
 801183a:	370c      	adds	r7, #12
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr
 8011844:	20000180 	.word	0x20000180

08011848 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>:
{
	*data = DiagCtrl_FaultValue;
}
/* Run time environment interface. */
VOID Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(uint8 data)
{
 8011848:	b480      	push	{r7}
 801184a:	b083      	sub	sp, #12
 801184c:	af00      	add	r7, sp, #0
 801184e:	4603      	mov	r3, r0
 8011850:	71fb      	strb	r3, [r7, #7]
	DiagCtrl_FaultValue = data;
 8011852:	4a04      	ldr	r2, [pc, #16]	; (8011864 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue+0x1c>)
 8011854:	79fb      	ldrb	r3, [r7, #7]
 8011856:	7013      	strb	r3, [r2, #0]
}
 8011858:	bf00      	nop
 801185a:	370c      	adds	r7, #12
 801185c:	46bd      	mov	sp, r7
 801185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011862:	4770      	bx	lr
 8011864:	2000012a 	.word	0x2000012a

08011868 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>:
{
	*data = SecAlm_SensorState;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(uint32* data)
{
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
	SecAlm_SensorState = *data;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	b2da      	uxtb	r2, r3
 8011876:	4b04      	ldr	r3, [pc, #16]	; (8011888 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState+0x20>)
 8011878:	701a      	strb	r2, [r3, #0]
}
 801187a:	bf00      	nop
 801187c:	370c      	adds	r7, #12
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop
 8011888:	200001ac 	.word	0x200001ac

0801188c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>:
{
	*data = ExtLights_LightSensorState;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(uint32* data)
{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
	ExtLights_LightSensorState = *data;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a03      	ldr	r2, [pc, #12]	; (80118a8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState+0x1c>)
 801189a:	6013      	str	r3, [r2, #0]
}
 801189c:	bf00      	nop
 801189e:	370c      	adds	r7, #12
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr
 80118a8:	20000168 	.word	0x20000168

080118ac <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>:
	Adc_ChannelOne_Buffer[14] = SenCtrl_MeasuredValues[14];
	Adc_ChannelOne_Buffer[15] = SenCtrl_MeasuredValues[15];
}
/* Run time environment interface. */
VOID Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(uint32* data)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b083      	sub	sp, #12
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
	SenCtrl_MeasuredValues[0] = Adc_ChannelOne_Buffer[0];
 80118b4:	4b1a      	ldr	r3, [pc, #104]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	4a1a      	ldr	r2, [pc, #104]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 80118ba:	6013      	str	r3, [r2, #0]
	SenCtrl_MeasuredValues[2] = Adc_ChannelOne_Buffer[2];
 80118bc:	4b18      	ldr	r3, [pc, #96]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80118be:	689b      	ldr	r3, [r3, #8]
 80118c0:	4a18      	ldr	r2, [pc, #96]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 80118c2:	6093      	str	r3, [r2, #8]
	SenCtrl_MeasuredValues[3] = Adc_ChannelOne_Buffer[3];
 80118c4:	4b16      	ldr	r3, [pc, #88]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	4a16      	ldr	r2, [pc, #88]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 80118ca:	60d3      	str	r3, [r2, #12]
	SenCtrl_MeasuredValues[4] = Adc_ChannelOne_Buffer[4];
 80118cc:	4b14      	ldr	r3, [pc, #80]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80118ce:	691b      	ldr	r3, [r3, #16]
 80118d0:	4a14      	ldr	r2, [pc, #80]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 80118d2:	6113      	str	r3, [r2, #16]
	SenCtrl_MeasuredValues[5] = Adc_ChannelOne_Buffer[5];
 80118d4:	4b12      	ldr	r3, [pc, #72]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80118d6:	695b      	ldr	r3, [r3, #20]
 80118d8:	4a12      	ldr	r2, [pc, #72]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 80118da:	6153      	str	r3, [r2, #20]
	SenCtrl_MeasuredValues[6] = Adc_ChannelOne_Buffer[6];
 80118dc:	4b10      	ldr	r3, [pc, #64]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80118de:	699b      	ldr	r3, [r3, #24]
 80118e0:	4a10      	ldr	r2, [pc, #64]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 80118e2:	6193      	str	r3, [r2, #24]
	SenCtrl_MeasuredValues[7] = Adc_ChannelOne_Buffer[7];
 80118e4:	4b0e      	ldr	r3, [pc, #56]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80118e6:	69db      	ldr	r3, [r3, #28]
 80118e8:	4a0e      	ldr	r2, [pc, #56]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 80118ea:	61d3      	str	r3, [r2, #28]
	SenCtrl_MeasuredValues[8] = Adc_ChannelOne_Buffer[8];
 80118ec:	4b0c      	ldr	r3, [pc, #48]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80118ee:	6a1b      	ldr	r3, [r3, #32]
 80118f0:	4a0c      	ldr	r2, [pc, #48]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 80118f2:	6213      	str	r3, [r2, #32]
	SenCtrl_MeasuredValues[9] = Adc_ChannelOne_Buffer[9];
 80118f4:	4b0a      	ldr	r3, [pc, #40]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80118f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f8:	4a0a      	ldr	r2, [pc, #40]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 80118fa:	6253      	str	r3, [r2, #36]	; 0x24
	SenCtrl_MeasuredValues[10] = Adc_ChannelOne_Buffer[10];
 80118fc:	4b08      	ldr	r3, [pc, #32]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80118fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011900:	4a08      	ldr	r2, [pc, #32]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011902:	6293      	str	r3, [r2, #40]	; 0x28
	SenCtrl_MeasuredValues[11] = Adc_ChannelOne_Buffer[11];
 8011904:	4b06      	ldr	r3, [pc, #24]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011908:	4a06      	ldr	r2, [pc, #24]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 801190a:	62d3      	str	r3, [r2, #44]	; 0x2c
	SenCtrl_MeasuredValues[13] = Adc_ChannelOne_Buffer[13];
 801190c:	4b04      	ldr	r3, [pc, #16]	; (8011920 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 801190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011910:	4a04      	ldr	r2, [pc, #16]	; (8011924 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011912:	6353      	str	r3, [r2, #52]	; 0x34
}
 8011914:	bf00      	nop
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr
 8011920:	200008ec 	.word	0x200008ec
 8011924:	200001b0 	.word	0x200001b0

08011928 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>:
{
	*data = CenLoc_FollowMeHomeCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(uint8* data)
{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeCounter = *data;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	781a      	ldrb	r2, [r3, #0]
 8011934:	4b03      	ldr	r3, [pc, #12]	; (8011944 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter+0x1c>)
 8011936:	701a      	strb	r2, [r3, #0]
}
 8011938:	bf00      	nop
 801193a:	370c      	adds	r7, #12
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr
 8011944:	20000126 	.word	0x20000126

08011948 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>:
{
	*data = CenLoc_TurnOnLedCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(uint8* data)
{
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
	CenLoc_TurnOnLedCounter = *data;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	781a      	ldrb	r2, [r3, #0]
 8011954:	4b03      	ldr	r3, [pc, #12]	; (8011964 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter+0x1c>)
 8011956:	701a      	strb	r2, [r3, #0]
}
 8011958:	bf00      	nop
 801195a:	370c      	adds	r7, #12
 801195c:	46bd      	mov	sp, r7
 801195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011962:	4770      	bx	lr
 8011964:	20000127 	.word	0x20000127

08011968 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>:
{
	*data = CenLoc_CyclicAlarmCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(uint8* data)
{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
	CenLoc_CyclicAlarmCounter = *data;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	781a      	ldrb	r2, [r3, #0]
 8011974:	4b03      	ldr	r3, [pc, #12]	; (8011984 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter+0x1c>)
 8011976:	701a      	strb	r2, [r3, #0]
}
 8011978:	bf00      	nop
 801197a:	370c      	adds	r7, #12
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr
 8011984:	20000125 	.word	0x20000125

08011988 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>:
{
	*data = CenLoc_BlinkCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(uint8* data)
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
	CenLoc_BlinkCounter = *data;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	781a      	ldrb	r2, [r3, #0]
 8011994:	4b03      	ldr	r3, [pc, #12]	; (80119a4 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter+0x1c>)
 8011996:	701a      	strb	r2, [r3, #0]
}
 8011998:	bf00      	nop
 801199a:	370c      	adds	r7, #12
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr
 80119a4:	20000124 	.word	0x20000124

080119a8 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>:
{
	*data = Os_Alarm_Counter;
}
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(uint8* data)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b083      	sub	sp, #12
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
	Os_LockUnlockSequence_Counter = *data;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	781a      	ldrb	r2, [r3, #0]
 80119b4:	4b03      	ldr	r3, [pc, #12]	; (80119c4 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter+0x1c>)
 80119b6:	701a      	strb	r2, [r3, #0]
}
 80119b8:	bf00      	nop
 80119ba:	370c      	adds	r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr
 80119c4:	200002dc 	.word	0x200002dc

080119c8 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(uint8* data)
{
 80119c8:	b480      	push	{r7}
 80119ca:	b083      	sub	sp, #12
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
	Os_TurnOnCyclic_Counter = *data;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	781a      	ldrb	r2, [r3, #0]
 80119d4:	4b03      	ldr	r3, [pc, #12]	; (80119e4 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter+0x1c>)
 80119d6:	701a      	strb	r2, [r3, #0]
}
 80119d8:	bf00      	nop
 80119da:	370c      	adds	r7, #12
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr
 80119e4:	200002dd 	.word	0x200002dd

080119e8 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(uint8* data)
{
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
	Os_TurnOnLed_Counter = *data;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	781a      	ldrb	r2, [r3, #0]
 80119f4:	4b03      	ldr	r3, [pc, #12]	; (8011a04 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter+0x1c>)
 80119f6:	701a      	strb	r2, [r3, #0]
}
 80119f8:	bf00      	nop
 80119fa:	370c      	adds	r7, #12
 80119fc:	46bd      	mov	sp, r7
 80119fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a02:	4770      	bx	lr
 8011a04:	200002de 	.word	0x200002de

08011a08 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(uint8* data)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b083      	sub	sp, #12
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
	Os_FollowMeHome_Counter = *data;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	781a      	ldrb	r2, [r3, #0]
 8011a14:	4b03      	ldr	r3, [pc, #12]	; (8011a24 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter+0x1c>)
 8011a16:	701a      	strb	r2, [r3, #0]
}
 8011a18:	bf00      	nop
 8011a1a:	370c      	adds	r7, #12
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a22:	4770      	bx	lr
 8011a24:	200002df 	.word	0x200002df

08011a28 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Lts_Counter(uint32* data)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b083      	sub	sp, #12
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
	Os_Lts_Counter = *data;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	4a03      	ldr	r2, [pc, #12]	; (8011a44 <Rte_Write_Os_R_OsPort_Os_Lts_Counter+0x1c>)
 8011a36:	6013      	str	r3, [r2, #0]
}
 8011a38:	bf00      	nop
 8011a3a:	370c      	adds	r7, #12
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr
 8011a44:	200002e0 	.word	0x200002e0

08011a48 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Rts_Counter(uint32* data)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b083      	sub	sp, #12
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
	Os_Rts_Counter = *data;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4a03      	ldr	r2, [pc, #12]	; (8011a64 <Rte_Write_Os_R_OsPort_Os_Rts_Counter+0x1c>)
 8011a56:	6013      	str	r3, [r2, #0]
}
 8011a58:	bf00      	nop
 8011a5a:	370c      	adds	r7, #12
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr
 8011a64:	200002e4 	.word	0x200002e4

08011a68 <Rte_Write_Os_R_OsPort_Os_HL_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_HL_Counter(uint32* data)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b083      	sub	sp, #12
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
	Os_HL_Counter = *data;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	4a03      	ldr	r2, [pc, #12]	; (8011a84 <Rte_Write_Os_R_OsPort_Os_HL_Counter+0x1c>)
 8011a76:	6013      	str	r3, [r2, #0]
}
 8011a78:	bf00      	nop
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr
 8011a84:	200002e8 	.word	0x200002e8

08011a88 <Rte_Runnable_EcuM_MainFunction>:
{
	Os_Alarm_Counter = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_EcuM_MainFunction()
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	af00      	add	r7, sp, #0
	EcuM_MainFunction();
 8011a8c:	f001 f8e6 	bl	8012c5c <EcuM_MainFunction>
}
 8011a90:	bf00      	nop
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <Rte_Runnable_SystemManager_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SystemManager_MainFunction()
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	af00      	add	r7, sp, #0
	SystemManager_MainFunction();
 8011a98:	f001 f9f0 	bl	8012e7c <SystemManager_MainFunction>
}
 8011a9c:	bf00      	nop
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <Rte_Runnable_Crc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Crc_MainFunction()
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	af00      	add	r7, sp, #0
	Crc_MainFunction();
 8011aa4:	f000 ff3c 	bl	8012920 <Crc_MainFunction>
}
 8011aa8:	bf00      	nop
 8011aaa:	bd80      	pop	{r7, pc}

08011aac <Rte_Runnable_Wdg_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Wdg_MainFunction()
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	af00      	add	r7, sp, #0
	Watchdog_MainFunction();
 8011ab0:	f001 fb20 	bl	80130f4 <Watchdog_MainFunction>
}
 8011ab4:	bf00      	nop
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <Rte_Runnable_Adc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Adc_MainFunction()
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	af00      	add	r7, sp, #0
	Adc_MainFunction();
 8011abc:	f7fb fc80 	bl	800d3c0 <Adc_MainFunction>
}
 8011ac0:	bf00      	nop
 8011ac2:	bd80      	pop	{r7, pc}

08011ac4 <Rte_Runnable_Tim_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Tim_MainFunction()
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	af00      	add	r7, sp, #0
	Tim_MainFunction();
 8011ac8:	f7fc fb8e 	bl	800e1e8 <Tim_MainFunction>
}
 8011acc:	bf00      	nop
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <Rte_Runnable_Uart_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Uart_MainFunction()
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	af00      	add	r7, sp, #0
	Uart_MainFunction();
 8011ad4:	f7f2 f9de 	bl	8003e94 <Uart_MainFunction>
}
 8011ad8:	bf00      	nop
 8011ada:	bd80      	pop	{r7, pc}

08011adc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_IT(htim, Channel);
 8011ae6:	6839      	ldr	r1, [r7, #0]
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f7f8 ff91 	bl	800aa10 <HAL_TIM_PWM_Start_IT>
}
 8011aee:	bf00      	nop
 8011af0:	3708      	adds	r7, #8
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}

08011af6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 8011af6:	b580      	push	{r7, lr}
 8011af8:	b082      	sub	sp, #8
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]
 8011afe:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(htim, Channel);
 8011b00:	6839      	ldr	r1, [r7, #0]
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f7f9 f882 	bl	800ac0c <HAL_TIM_PWM_Stop_IT>
}
 8011b08:	bf00      	nop
 8011b0a:	3708      	adds	r7, #8
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}

08011b10 <Rte_Write_Btc_BtcPort_Btc_RxData>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
	Btc_RxData = *data;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	781a      	ldrb	r2, [r3, #0]
 8011b1c:	4b03      	ldr	r3, [pc, #12]	; (8011b2c <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>)
 8011b1e:	701a      	strb	r2, [r3, #0]
}
 8011b20:	bf00      	nop
 8011b22:	370c      	adds	r7, #12
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	200000e0 	.word	0x200000e0

08011b30 <Rte_Write_Btc_BtcPort_Btc_RxCount>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data)
{
 8011b30:	b480      	push	{r7}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
	Btc_RxCount = *data;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	781a      	ldrb	r2, [r3, #0]
 8011b3c:	4b03      	ldr	r3, [pc, #12]	; (8011b4c <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>)
 8011b3e:	701a      	strb	r2, [r3, #0]
}
 8011b40:	bf00      	nop
 8011b42:	370c      	adds	r7, #12
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr
 8011b4c:	200000e1 	.word	0x200000e1

08011b50 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	460b      	mov	r3, r1
 8011b5a:	70fb      	strb	r3, [r7, #3]
	Btc_DataBuffer[position] = *data;
 8011b5c:	78fb      	ldrb	r3, [r7, #3]
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	7811      	ldrb	r1, [r2, #0]
 8011b62:	4a04      	ldr	r2, [pc, #16]	; (8011b74 <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x24>)
 8011b64:	54d1      	strb	r1, [r2, r3]
}
 8011b66:	bf00      	nop
 8011b68:	370c      	adds	r7, #12
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b70:	4770      	bx	lr
 8011b72:	bf00      	nop
 8011b74:	200000dc 	.word	0x200000dc

08011b78 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:
/* Run time environment interface. */
VOID Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	460b      	mov	r3, r1
 8011b82:	70fb      	strb	r3, [r7, #3]
	*data = Adc_ChannelOne_Buffer[position];
 8011b84:	78fb      	ldrb	r3, [r7, #3]
 8011b86:	4a05      	ldr	r2, [pc, #20]	; (8011b9c <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>)
 8011b88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	601a      	str	r2, [r3, #0]
}
 8011b90:	bf00      	nop
 8011b92:	370c      	adds	r7, #12
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	200008ec 	.word	0x200008ec

08011ba0 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
	Btc_ReceivedDataOnBluetooth = *data;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	781a      	ldrb	r2, [r3, #0]
 8011bac:	4b03      	ldr	r3, [pc, #12]	; (8011bbc <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 8011bae:	701a      	strb	r2, [r3, #0]
}
 8011bb0:	bf00      	nop
 8011bb2:	370c      	adds	r7, #12
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr
 8011bbc:	200000e2 	.word	0x200000e2

08011bc0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
	CenLoc_CurrentState = *data;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	781a      	ldrb	r2, [r3, #0]
 8011bcc:	4b03      	ldr	r3, [pc, #12]	; (8011bdc <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>)
 8011bce:	701a      	strb	r2, [r3, #0]
}
 8011bd0:	bf00      	nop
 8011bd2:	370c      	adds	r7, #12
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr
 8011bdc:	20000120 	.word	0x20000120

08011be0 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
{
	CenLoc_PreviousState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 8011be0:	b480      	push	{r7}
 8011be2:	b083      	sub	sp, #12
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeState = *data;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	781a      	ldrb	r2, [r3, #0]
 8011bec:	4b03      	ldr	r3, [pc, #12]	; (8011bfc <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>)
 8011bee:	701a      	strb	r2, [r3, #0]
}
 8011bf0:	bf00      	nop
 8011bf2:	370c      	adds	r7, #12
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr
 8011bfc:	20000122 	.word	0x20000122

08011c00 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
{
	CenLoc_PreviousStateFlag = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
	ExtLights_ReverseLight_CurrentState = *data;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	781a      	ldrb	r2, [r3, #0]
 8011c0c:	4b03      	ldr	r3, [pc, #12]	; (8011c1c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>)
 8011c0e:	701a      	strb	r2, [r3, #0]
}
 8011c10:	bf00      	nop
 8011c12:	370c      	adds	r7, #12
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr
 8011c1c:	2000014c 	.word	0x2000014c

08011c20 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 8011c20:	b480      	push	{r7}
 8011c22:	b083      	sub	sp, #12
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
	ExtLights_BrakeLight_CurrentState = *data;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	781a      	ldrb	r2, [r3, #0]
 8011c2c:	4b03      	ldr	r3, [pc, #12]	; (8011c3c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>)
 8011c2e:	701a      	strb	r2, [r3, #0]
}
 8011c30:	bf00      	nop
 8011c32:	370c      	adds	r7, #12
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr
 8011c3c:	2000014e 	.word	0x2000014e

08011c40 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b083      	sub	sp, #12
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
	ExtLights_LightsSwitch_CurrentState = *data;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	781a      	ldrb	r2, [r3, #0]
 8011c4c:	4b03      	ldr	r3, [pc, #12]	; (8011c5c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>)
 8011c4e:	701a      	strb	r2, [r3, #0]
}
 8011c50:	bf00      	nop
 8011c52:	370c      	adds	r7, #12
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr
 8011c5c:	2000014f 	.word	0x2000014f

08011c60 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
	ExtLights_HighBeam_CurrentState = *data;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	781a      	ldrb	r2, [r3, #0]
 8011c6c:	4b03      	ldr	r3, [pc, #12]	; (8011c7c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>)
 8011c6e:	701a      	strb	r2, [r3, #0]
}
 8011c70:	bf00      	nop
 8011c72:	370c      	adds	r7, #12
 8011c74:	46bd      	mov	sp, r7
 8011c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7a:	4770      	bx	lr
 8011c7c:	20000150 	.word	0x20000150

08011c80 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b083      	sub	sp, #12
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
	ExtLights_FrontFogLight_CurrentState = *data;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	781a      	ldrb	r2, [r3, #0]
 8011c8c:	4b03      	ldr	r3, [pc, #12]	; (8011c9c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>)
 8011c8e:	701a      	strb	r2, [r3, #0]
}
 8011c90:	bf00      	nop
 8011c92:	370c      	adds	r7, #12
 8011c94:	46bd      	mov	sp, r7
 8011c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9a:	4770      	bx	lr
 8011c9c:	20000151 	.word	0x20000151

08011ca0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalLeft_CurrentState = *data;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	781a      	ldrb	r2, [r3, #0]
 8011cac:	4b03      	ldr	r3, [pc, #12]	; (8011cbc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>)
 8011cae:	701a      	strb	r2, [r3, #0]
}
 8011cb0:	bf00      	nop
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr
 8011cbc:	20000152 	.word	0x20000152

08011cc0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalRight_CurrentState = *data;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	781a      	ldrb	r2, [r3, #0]
 8011ccc:	4b03      	ldr	r3, [pc, #12]	; (8011cdc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>)
 8011cce:	701a      	strb	r2, [r3, #0]
}
 8011cd0:	bf00      	nop
 8011cd2:	370c      	adds	r7, #12
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cda:	4770      	bx	lr
 8011cdc:	20000153 	.word	0x20000153

08011ce0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b083      	sub	sp, #12
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
	ExtLights_HazardLight_CurrentState = *data;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	781a      	ldrb	r2, [r3, #0]
 8011cec:	4b03      	ldr	r3, [pc, #12]	; (8011cfc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>)
 8011cee:	701a      	strb	r2, [r3, #0]
}
 8011cf0:	bf00      	nop
 8011cf2:	370c      	adds	r7, #12
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr
 8011cfc:	20000156 	.word	0x20000156

08011d00 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b083      	sub	sp, #12
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
	ExtLights_RearFogLight_CurrentState = *data;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	781a      	ldrb	r2, [r3, #0]
 8011d0c:	4b03      	ldr	r3, [pc, #12]	; (8011d1c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>)
 8011d0e:	701a      	strb	r2, [r3, #0]
}
 8011d10:	bf00      	nop
 8011d12:	370c      	adds	r7, #12
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr
 8011d1c:	20000157 	.word	0x20000157

08011d20 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
{
	ExtLights_HL_PrevState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b083      	sub	sp, #12
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
	ExtLights_RTSFlag = *data;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4a03      	ldr	r2, [pc, #12]	; (8011d3c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>)
 8011d2e:	6013      	str	r3, [r2, #0]
}
 8011d30:	bf00      	nop
 8011d32:	370c      	adds	r7, #12
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr
 8011d3c:	2000015c 	.word	0x2000015c

08011d40 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b083      	sub	sp, #12
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
	ExtLights_LTSFlag = *data;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4a03      	ldr	r2, [pc, #12]	; (8011d5c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>)
 8011d4e:	6013      	str	r3, [r2, #0]
}
 8011d50:	bf00      	nop
 8011d52:	370c      	adds	r7, #12
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr
 8011d5c:	20000160 	.word	0x20000160

08011d60 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
	ExtLights_HLFlag = *data;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	4a03      	ldr	r2, [pc, #12]	; (8011d7c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>)
 8011d6e:	6013      	str	r3, [r2, #0]
}
 8011d70:	bf00      	nop
 8011d72:	370c      	adds	r7, #12
 8011d74:	46bd      	mov	sp, r7
 8011d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7a:	4770      	bx	lr
 8011d7c:	20000164 	.word	0x20000164

08011d80 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b083      	sub	sp, #12
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
	IntLights_CurrentState = *data;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	781a      	ldrb	r2, [r3, #0]
 8011d8c:	4b03      	ldr	r3, [pc, #12]	; (8011d9c <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>)
 8011d8e:	701a      	strb	r2, [r3, #0]
}
 8011d90:	bf00      	nop
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr
 8011d9c:	20000199 	.word	0x20000199

08011da0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
{
	SecAlm_PinStateChange = *data;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b083      	sub	sp, #12
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
	SecAlm_TriggerIRQCounterForTimer4 = *data;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	781a      	ldrb	r2, [r3, #0]
 8011dac:	4b03      	ldr	r3, [pc, #12]	; (8011dbc <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>)
 8011dae:	701a      	strb	r2, [r3, #0]
}
 8011db0:	bf00      	nop
 8011db2:	370c      	adds	r7, #12
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	200001a6 	.word	0x200001a6

08011dc0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
	SecAlm_SensorStatusCounter = *data;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	881a      	ldrh	r2, [r3, #0]
 8011dcc:	4b03      	ldr	r3, [pc, #12]	; (8011ddc <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>)
 8011dce:	801a      	strh	r2, [r3, #0]
}
 8011dd0:	bf00      	nop
 8011dd2:	370c      	adds	r7, #12
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dda:	4770      	bx	lr
 8011ddc:	200001a8 	.word	0x200001a8

08011de0 <Rte_Runnable_Btc_MainFunction>:
{
	SecAlm_SensorStatus = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_Btc_MainFunction()
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	af00      	add	r7, sp, #0
	Btc_MainFunction();
 8011de4:	f7ef fda8 	bl	8001938 <Btc_MainFunction>
}
 8011de8:	bf00      	nop
 8011dea:	bd80      	pop	{r7, pc}

08011dec <Rte_Runnable_CenLoc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_CenLoc_MainFunction()
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	af00      	add	r7, sp, #0
	CenLoc_MainFunction();
 8011df0:	f7ef fff6 	bl	8001de0 <CenLoc_MainFunction>
}
 8011df4:	bf00      	nop
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <Rte_Runnable_ExtLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_ExtLights_MainFunction()
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	af00      	add	r7, sp, #0
	ExtLights_MainFunction();
 8011dfc:	f7f0 fc58 	bl	80026b0 <ExtLights_MainFunction>
}
 8011e00:	bf00      	nop
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <Rte_Runnable_IntLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_IntLights_MainFunction()
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	af00      	add	r7, sp, #0
	IntLights_MainFunction();
 8011e08:	f7f1 f938 	bl	800307c <IntLights_MainFunction>
}
 8011e0c:	bf00      	nop
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <Rte_Runnable_SecAlm_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SecAlm_MainFunction()
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	af00      	add	r7, sp, #0
	SecAlm_MainFunction();
 8011e14:	f7f1 fba2 	bl	800355c <SecAlm_MainFunction>
}
 8011e18:	bf00      	nop
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b083      	sub	sp, #12
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
	*data = Btc_ReceivedDataOnBluetooth;
 8011e24:	4b04      	ldr	r3, [pc, #16]	; (8011e38 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 8011e26:	781a      	ldrb	r2, [r3, #0]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	701a      	strb	r2, [r3, #0]
}
 8011e2c:	bf00      	nop
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr
 8011e38:	200000e2 	.word	0x200000e2

08011e3c <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>:
{
	*data = SecAlm_SensorStatus;
}
/* Run time environment interface. */
VOID Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	4613      	mov	r3, r2
 8011e48:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(huart, pData, Size);
 8011e4a:	88fb      	ldrh	r3, [r7, #6]
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	68b9      	ldr	r1, [r7, #8]
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f7fa fa9a 	bl	800c38a <HAL_UART_Receive_IT>
}
 8011e56:	bf00      	nop
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:
{
	HAL_TIM_Base_Stop_IT(htim);
}
/* Run time environment interface. */
VOID Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b082      	sub	sp, #8
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
 8011e66:	460b      	mov	r3, r1
 8011e68:	807b      	strh	r3, [r7, #2]
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8011e6e:	787a      	ldrb	r2, [r7, #1]
 8011e70:	887b      	ldrh	r3, [r7, #2]
 8011e72:	4619      	mov	r1, r3
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7f5 ffdf 	bl	8007e38 <HAL_GPIO_WritePin>
}
 8011e7a:	bf00      	nop
 8011e7c:	3708      	adds	r7, #8
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}

08011e82 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
{
	HAL_GetTick();
}
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 8011e82:	b580      	push	{r7, lr}
 8011e84:	b082      	sub	sp, #8
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
 8011e8a:	6039      	str	r1, [r7, #0]
	osTimerStart(timer_id, ticks);
 8011e8c:	6839      	ldr	r1, [r7, #0]
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f7fc fcac 	bl	800e7ec <osTimerStart>
}
 8011e94:	bf00      	nop
 8011e96:	3708      	adds	r7, #8
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}

08011e9c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
	osTimerStop(timer_id);
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f7fc fccf 	bl	800e848 <osTimerStop>
}
 8011eaa:	bf00      	nop
 8011eac:	3708      	adds	r7, #8
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}

08011eb2 <Rte_Runnable_DiagCtrl_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_DiagCtrl_MainFunction()
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	af00      	add	r7, sp, #0
	DiagCtrl_MainFunction();
 8011eb6:	f7ef ff9b 	bl	8001df0 <DiagCtrl_MainFunction>
}
 8011eba:	bf00      	nop
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <Rte_Runnable_Hvac_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Hvac_MainFunction()
{
 8011ebe:	b580      	push	{r7, lr}
 8011ec0:	af00      	add	r7, sp, #0
	Hvac_MainFunction();
 8011ec2:	f7f0 fd0d 	bl	80028e0 <Hvac_MainFunction>
}
 8011ec6:	bf00      	nop
 8011ec8:	bd80      	pop	{r7, pc}

08011eca <Rte_Runnable_Pdc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Pdc_MainFunction()
{
 8011eca:	b580      	push	{r7, lr}
 8011ecc:	af00      	add	r7, sp, #0
	Pdc_MainFunction();
 8011ece:	f7f1 f8db 	bl	8003088 <Pdc_MainFunction>
}
 8011ed2:	bf00      	nop
 8011ed4:	bd80      	pop	{r7, pc}

08011ed6 <Rte_Runnable_I2c_MainFunction>:
{
	Can_MainFunction();
}
/* Run time environment interface. */
VOID Rte_Runnable_I2c_MainFunction()
{
 8011ed6:	b580      	push	{r7, lr}
 8011ed8:	af00      	add	r7, sp, #0
	I2c_MainFunction();
 8011eda:	f7f1 fd93 	bl	8003a04 <I2c_MainFunction>
}
 8011ede:	bf00      	nop
 8011ee0:	bd80      	pop	{r7, pc}

08011ee2 <Rte_Runnable_Dem_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Dem_MainFunction()
{
 8011ee2:	b580      	push	{r7, lr}
 8011ee4:	af00      	add	r7, sp, #0
	Dem_MainFunction();
 8011ee6:	f7f3 fc70 	bl	80057ca <Dem_MainFunction>
}
 8011eea:	bf00      	nop
 8011eec:	bd80      	pop	{r7, pc}
	...

08011ef0 <Crc_VerifyUartData>:
/***********************************************************************************
* Function: Crc_VerifyUartData													   *
* Description: Verifies the UART data received.							 		   *
************************************************************************************/
StdReturnType Crc_VerifyUartData()
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
	/* Local variable to store return value. */
	uint8 returnValue = E_NOT_OK;
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	73fb      	strb	r3, [r7, #15]
	/* Local variable to store received value. */
	uint8 receivedValue = STD_LOW;
 8011efa:	2300      	movs	r3, #0
 8011efc:	71fb      	strb	r3, [r7, #7]
	/* Local value to calculate CRC. */
	uint32 calculatedCrc = STD_LOW;
 8011efe:	2300      	movs	r3, #0
 8011f00:	60bb      	str	r3, [r7, #8]
	/* Read the received data from UART. */
	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 8011f02:	1dfb      	adds	r3, r7, #7
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7ff ff89 	bl	8011e1c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 8011f0a:	4bb7      	ldr	r3, [pc, #732]	; (80121e8 <Crc_VerifyUartData+0x2f8>)
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	701a      	strb	r2, [r3, #0]
	/* Calculate the CRC. */
	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 8011f10:	1dfb      	adds	r3, r7, #7
 8011f12:	2201      	movs	r2, #1
 8011f14:	4619      	mov	r1, r3
 8011f16:	48b5      	ldr	r0, [pc, #724]	; (80121ec <Crc_VerifyUartData+0x2fc>)
 8011f18:	f7f4 fed0 	bl	8006cbc <HAL_CRC_Calculate>
 8011f1c:	60b8      	str	r0, [r7, #8]
	/* Check the value if it has correct CRC. */
	if(receivedValue >= 30 && receivedValue <= 54)
 8011f1e:	79fb      	ldrb	r3, [r7, #7]
 8011f20:	2b1d      	cmp	r3, #29
 8011f22:	d904      	bls.n	8011f2e <Crc_VerifyUartData+0x3e>
 8011f24:	79fb      	ldrb	r3, [r7, #7]
 8011f26:	2b36      	cmp	r3, #54	; 0x36
 8011f28:	d801      	bhi.n	8011f2e <Crc_VerifyUartData+0x3e>
	{
		return E_OK;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	e278      	b.n	8012420 <Crc_VerifyUartData+0x530>
	else
	{
		/* do nothing */
	}
	/* Check the value if it has correct CRC. */
	switch(receivedValue)
 8011f2e:	79fb      	ldrb	r3, [r7, #7]
 8011f30:	3b01      	subs	r3, #1
 8011f32:	2b46      	cmp	r3, #70	; 0x46
 8011f34:	f200 8272 	bhi.w	801241c <Crc_VerifyUartData+0x52c>
 8011f38:	a201      	add	r2, pc, #4	; (adr r2, 8011f40 <Crc_VerifyUartData+0x50>)
 8011f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f3e:	bf00      	nop
 8011f40:	080120e1 	.word	0x080120e1
 8011f44:	080120f7 	.word	0x080120f7
 8011f48:	0801210d 	.word	0x0801210d
 8011f4c:	08012123 	.word	0x08012123
 8011f50:	0801241d 	.word	0x0801241d
 8011f54:	0801241d 	.word	0x0801241d
 8011f58:	08012139 	.word	0x08012139
 8011f5c:	0801214f 	.word	0x0801214f
 8011f60:	08012165 	.word	0x08012165
 8011f64:	0801217b 	.word	0x0801217b
 8011f68:	08012191 	.word	0x08012191
 8011f6c:	080121a7 	.word	0x080121a7
 8011f70:	080121bd 	.word	0x080121bd
 8011f74:	080121d3 	.word	0x080121d3
 8011f78:	08012239 	.word	0x08012239
 8011f7c:	0801224f 	.word	0x0801224f
 8011f80:	08012265 	.word	0x08012265
 8011f84:	0801227b 	.word	0x0801227b
 8011f88:	08012291 	.word	0x08012291
 8011f8c:	080122a7 	.word	0x080122a7
 8011f90:	0801205d 	.word	0x0801205d
 8011f94:	08012073 	.word	0x08012073
 8011f98:	08012089 	.word	0x08012089
 8011f9c:	0801209f 	.word	0x0801209f
 8011fa0:	080120b5 	.word	0x080120b5
 8011fa4:	080120cb 	.word	0x080120cb
 8011fa8:	0801241d 	.word	0x0801241d
 8011fac:	0801241d 	.word	0x0801241d
 8011fb0:	0801241d 	.word	0x0801241d
 8011fb4:	0801241d 	.word	0x0801241d
 8011fb8:	0801241d 	.word	0x0801241d
 8011fbc:	0801241d 	.word	0x0801241d
 8011fc0:	0801241d 	.word	0x0801241d
 8011fc4:	0801241d 	.word	0x0801241d
 8011fc8:	0801241d 	.word	0x0801241d
 8011fcc:	0801241d 	.word	0x0801241d
 8011fd0:	0801241d 	.word	0x0801241d
 8011fd4:	0801241d 	.word	0x0801241d
 8011fd8:	0801241d 	.word	0x0801241d
 8011fdc:	0801241d 	.word	0x0801241d
 8011fe0:	0801241d 	.word	0x0801241d
 8011fe4:	0801241d 	.word	0x0801241d
 8011fe8:	0801241d 	.word	0x0801241d
 8011fec:	0801241d 	.word	0x0801241d
 8011ff0:	0801241d 	.word	0x0801241d
 8011ff4:	0801241d 	.word	0x0801241d
 8011ff8:	0801241d 	.word	0x0801241d
 8011ffc:	0801241d 	.word	0x0801241d
 8012000:	0801241d 	.word	0x0801241d
 8012004:	0801241d 	.word	0x0801241d
 8012008:	0801241d 	.word	0x0801241d
 801200c:	0801241d 	.word	0x0801241d
 8012010:	0801241d 	.word	0x0801241d
 8012014:	0801241d 	.word	0x0801241d
 8012018:	080122bd 	.word	0x080122bd
 801201c:	080122d3 	.word	0x080122d3
 8012020:	080122e9 	.word	0x080122e9
 8012024:	080122ff 	.word	0x080122ff
 8012028:	08012315 	.word	0x08012315
 801202c:	0801232b 	.word	0x0801232b
 8012030:	08012341 	.word	0x08012341
 8012034:	08012357 	.word	0x08012357
 8012038:	0801236d 	.word	0x0801236d
 801203c:	08012383 	.word	0x08012383
 8012040:	08012399 	.word	0x08012399
 8012044:	080123af 	.word	0x080123af
 8012048:	0801241d 	.word	0x0801241d
 801204c:	080123c5 	.word	0x080123c5
 8012050:	080123db 	.word	0x080123db
 8012054:	080123f1 	.word	0x080123f1
 8012058:	08012407 	.word	0x08012407
	{
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 801205c:	4b64      	ldr	r3, [pc, #400]	; (80121f0 <Crc_VerifyUartData+0x300>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	68ba      	ldr	r2, [r7, #8]
 8012062:	429a      	cmp	r2, r3
 8012064:	d102      	bne.n	801206c <Crc_VerifyUartData+0x17c>
			{
				returnValue = E_OK;
 8012066:	2300      	movs	r3, #0
 8012068:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801206a:	e1d8      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801206c:	2301      	movs	r3, #1
 801206e:	73fb      	strb	r3, [r7, #15]
			break;
 8012070:	e1d5      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 8012072:	4b60      	ldr	r3, [pc, #384]	; (80121f4 <Crc_VerifyUartData+0x304>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	68ba      	ldr	r2, [r7, #8]
 8012078:	429a      	cmp	r2, r3
 801207a:	d102      	bne.n	8012082 <Crc_VerifyUartData+0x192>
			{
				returnValue = E_OK;
 801207c:	2300      	movs	r3, #0
 801207e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012080:	e1cd      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012082:	2301      	movs	r3, #1
 8012084:	73fb      	strb	r3, [r7, #15]
			break;
 8012086:	e1ca      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:
			if(calculatedCrc == Crc_ExtLights_PositionZero)
 8012088:	4b5b      	ldr	r3, [pc, #364]	; (80121f8 <Crc_VerifyUartData+0x308>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	68ba      	ldr	r2, [r7, #8]
 801208e:	429a      	cmp	r2, r3
 8012090:	d102      	bne.n	8012098 <Crc_VerifyUartData+0x1a8>
			{
				returnValue = E_OK;
 8012092:	2300      	movs	r3, #0
 8012094:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012096:	e1c2      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012098:	2301      	movs	r3, #1
 801209a:	73fb      	strb	r3, [r7, #15]
			break;
 801209c:	e1bf      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 801209e:	4b57      	ldr	r3, [pc, #348]	; (80121fc <Crc_VerifyUartData+0x30c>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	68ba      	ldr	r2, [r7, #8]
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d102      	bne.n	80120ae <Crc_VerifyUartData+0x1be>
			{
				returnValue = E_OK;
 80120a8:	2300      	movs	r3, #0
 80120aa:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80120ac:	e1b7      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80120ae:	2301      	movs	r3, #1
 80120b0:	73fb      	strb	r3, [r7, #15]
			break;
 80120b2:	e1b4      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
			if(calculatedCrc == Crc_ExtLights_PositionLights)
 80120b4:	4b52      	ldr	r3, [pc, #328]	; (8012200 <Crc_VerifyUartData+0x310>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	68ba      	ldr	r2, [r7, #8]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d102      	bne.n	80120c4 <Crc_VerifyUartData+0x1d4>
			{
				returnValue = E_OK;
 80120be:	2300      	movs	r3, #0
 80120c0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80120c2:	e1ac      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80120c4:	2301      	movs	r3, #1
 80120c6:	73fb      	strb	r3, [r7, #15]
			break;
 80120c8:	e1a9      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 80120ca:	4b4e      	ldr	r3, [pc, #312]	; (8012204 <Crc_VerifyUartData+0x314>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	68ba      	ldr	r2, [r7, #8]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d102      	bne.n	80120da <Crc_VerifyUartData+0x1ea>
			{
				returnValue = E_OK;
 80120d4:	2300      	movs	r3, #0
 80120d6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80120d8:	e1a1      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80120da:	2301      	movs	r3, #1
 80120dc:	73fb      	strb	r3, [r7, #15]
			break;
 80120de:	e19e      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_CENLOC_ON:
			if(calculatedCrc == Crc_CenLoc_On)
 80120e0:	4b49      	ldr	r3, [pc, #292]	; (8012208 <Crc_VerifyUartData+0x318>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	68ba      	ldr	r2, [r7, #8]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d102      	bne.n	80120f0 <Crc_VerifyUartData+0x200>
			{
				returnValue = E_OK;
 80120ea:	2300      	movs	r3, #0
 80120ec:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80120ee:	e196      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80120f0:	2301      	movs	r3, #1
 80120f2:	73fb      	strb	r3, [r7, #15]
			break;
 80120f4:	e193      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_CENLOC_OFF:
			if(calculatedCrc == Crc_CenLoc_Off)
 80120f6:	4b45      	ldr	r3, [pc, #276]	; (801220c <Crc_VerifyUartData+0x31c>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	68ba      	ldr	r2, [r7, #8]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d102      	bne.n	8012106 <Crc_VerifyUartData+0x216>
			{
				returnValue = E_OK;
 8012100:	2300      	movs	r3, #0
 8012102:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012104:	e18b      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012106:	2301      	movs	r3, #1
 8012108:	73fb      	strb	r3, [r7, #15]
			break;
 801210a:	e188      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 801210c:	4b40      	ldr	r3, [pc, #256]	; (8012210 <Crc_VerifyUartData+0x320>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	68ba      	ldr	r2, [r7, #8]
 8012112:	429a      	cmp	r2, r3
 8012114:	d102      	bne.n	801211c <Crc_VerifyUartData+0x22c>
			{
				returnValue = E_OK;
 8012116:	2300      	movs	r3, #0
 8012118:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801211a:	e180      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801211c:	2301      	movs	r3, #1
 801211e:	73fb      	strb	r3, [r7, #15]
			break;
 8012120:	e17d      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 8012122:	4b3c      	ldr	r3, [pc, #240]	; (8012214 <Crc_VerifyUartData+0x324>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	68ba      	ldr	r2, [r7, #8]
 8012128:	429a      	cmp	r2, r3
 801212a:	d102      	bne.n	8012132 <Crc_VerifyUartData+0x242>
			{
				returnValue = E_OK;
 801212c:	2300      	movs	r3, #0
 801212e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012130:	e175      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012132:	2301      	movs	r3, #1
 8012134:	73fb      	strb	r3, [r7, #15]
			break;
 8012136:	e172      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 8012138:	4b37      	ldr	r3, [pc, #220]	; (8012218 <Crc_VerifyUartData+0x328>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	68ba      	ldr	r2, [r7, #8]
 801213e:	429a      	cmp	r2, r3
 8012140:	d102      	bne.n	8012148 <Crc_VerifyUartData+0x258>
			{
				returnValue = E_OK;
 8012142:	2300      	movs	r3, #0
 8012144:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012146:	e16a      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012148:	2301      	movs	r3, #1
 801214a:	73fb      	strb	r3, [r7, #15]
			break;
 801214c:	e167      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 801214e:	4b33      	ldr	r3, [pc, #204]	; (801221c <Crc_VerifyUartData+0x32c>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	68ba      	ldr	r2, [r7, #8]
 8012154:	429a      	cmp	r2, r3
 8012156:	d102      	bne.n	801215e <Crc_VerifyUartData+0x26e>
			{
				returnValue = E_OK;
 8012158:	2300      	movs	r3, #0
 801215a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801215c:	e15f      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801215e:	2301      	movs	r3, #1
 8012160:	73fb      	strb	r3, [r7, #15]
			break;
 8012162:	e15c      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 8012164:	4b2e      	ldr	r3, [pc, #184]	; (8012220 <Crc_VerifyUartData+0x330>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	68ba      	ldr	r2, [r7, #8]
 801216a:	429a      	cmp	r2, r3
 801216c:	d102      	bne.n	8012174 <Crc_VerifyUartData+0x284>
			{
				returnValue = E_OK;
 801216e:	2300      	movs	r3, #0
 8012170:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012172:	e154      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012174:	2301      	movs	r3, #1
 8012176:	73fb      	strb	r3, [r7, #15]
			break;
 8012178:	e151      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 801217a:	4b2a      	ldr	r3, [pc, #168]	; (8012224 <Crc_VerifyUartData+0x334>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	68ba      	ldr	r2, [r7, #8]
 8012180:	429a      	cmp	r2, r3
 8012182:	d102      	bne.n	801218a <Crc_VerifyUartData+0x29a>
			{
				returnValue = E_OK;
 8012184:	2300      	movs	r3, #0
 8012186:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012188:	e149      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801218a:	2301      	movs	r3, #1
 801218c:	73fb      	strb	r3, [r7, #15]
			break;
 801218e:	e146      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 8012190:	4b25      	ldr	r3, [pc, #148]	; (8012228 <Crc_VerifyUartData+0x338>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	68ba      	ldr	r2, [r7, #8]
 8012196:	429a      	cmp	r2, r3
 8012198:	d102      	bne.n	80121a0 <Crc_VerifyUartData+0x2b0>
			{
				returnValue = E_OK;
 801219a:	2300      	movs	r3, #0
 801219c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801219e:	e13e      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80121a0:	2301      	movs	r3, #1
 80121a2:	73fb      	strb	r3, [r7, #15]
			break;
 80121a4:	e13b      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 80121a6:	4b21      	ldr	r3, [pc, #132]	; (801222c <Crc_VerifyUartData+0x33c>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d102      	bne.n	80121b6 <Crc_VerifyUartData+0x2c6>
			{
				returnValue = E_OK;
 80121b0:	2300      	movs	r3, #0
 80121b2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80121b4:	e133      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80121b6:	2301      	movs	r3, #1
 80121b8:	73fb      	strb	r3, [r7, #15]
			break;
 80121ba:	e130      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 80121bc:	4b1c      	ldr	r3, [pc, #112]	; (8012230 <Crc_VerifyUartData+0x340>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	68ba      	ldr	r2, [r7, #8]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d102      	bne.n	80121cc <Crc_VerifyUartData+0x2dc>
			{
				returnValue = E_OK;
 80121c6:	2300      	movs	r3, #0
 80121c8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80121ca:	e128      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80121cc:	2301      	movs	r3, #1
 80121ce:	73fb      	strb	r3, [r7, #15]
			break;
 80121d0:	e125      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 80121d2:	4b18      	ldr	r3, [pc, #96]	; (8012234 <Crc_VerifyUartData+0x344>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	68ba      	ldr	r2, [r7, #8]
 80121d8:	429a      	cmp	r2, r3
 80121da:	d102      	bne.n	80121e2 <Crc_VerifyUartData+0x2f2>
			{
				returnValue = E_OK;
 80121dc:	2300      	movs	r3, #0
 80121de:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80121e0:	e11d      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80121e2:	2301      	movs	r3, #1
 80121e4:	73fb      	strb	r3, [r7, #15]
			break;
 80121e6:	e11a      	b.n	801241e <Crc_VerifyUartData+0x52e>
 80121e8:	20009370 	.word	0x20009370
 80121ec:	200002d0 	.word	0x200002d0
 80121f0:	200093ac 	.word	0x200093ac
 80121f4:	200093b0 	.word	0x200093b0
 80121f8:	200093b4 	.word	0x200093b4
 80121fc:	200093b8 	.word	0x200093b8
 8012200:	200093bc 	.word	0x200093bc
 8012204:	200093c0 	.word	0x200093c0
 8012208:	20009374 	.word	0x20009374
 801220c:	20009378 	.word	0x20009378
 8012210:	2000937c 	.word	0x2000937c
 8012214:	20009380 	.word	0x20009380
 8012218:	20009384 	.word	0x20009384
 801221c:	20009388 	.word	0x20009388
 8012220:	2000938c 	.word	0x2000938c
 8012224:	20009390 	.word	0x20009390
 8012228:	20009394 	.word	0x20009394
 801222c:	20009398 	.word	0x20009398
 8012230:	2000939c 	.word	0x2000939c
 8012234:	200093a0 	.word	0x200093a0
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 8012238:	4b7b      	ldr	r3, [pc, #492]	; (8012428 <Crc_VerifyUartData+0x538>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	68ba      	ldr	r2, [r7, #8]
 801223e:	429a      	cmp	r2, r3
 8012240:	d102      	bne.n	8012248 <Crc_VerifyUartData+0x358>
			{
				returnValue = E_OK;
 8012242:	2300      	movs	r3, #0
 8012244:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012246:	e0ea      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012248:	2301      	movs	r3, #1
 801224a:	73fb      	strb	r3, [r7, #15]
			break;
 801224c:	e0e7      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 801224e:	4b77      	ldr	r3, [pc, #476]	; (801242c <Crc_VerifyUartData+0x53c>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	68ba      	ldr	r2, [r7, #8]
 8012254:	429a      	cmp	r2, r3
 8012256:	d102      	bne.n	801225e <Crc_VerifyUartData+0x36e>
			{
				returnValue = E_OK;
 8012258:	2300      	movs	r3, #0
 801225a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801225c:	e0df      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801225e:	2301      	movs	r3, #1
 8012260:	73fb      	strb	r3, [r7, #15]
			break;
 8012262:	e0dc      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 8012264:	4b72      	ldr	r3, [pc, #456]	; (8012430 <Crc_VerifyUartData+0x540>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	68ba      	ldr	r2, [r7, #8]
 801226a:	429a      	cmp	r2, r3
 801226c:	d102      	bne.n	8012274 <Crc_VerifyUartData+0x384>
			{
				returnValue = E_OK;
 801226e:	2300      	movs	r3, #0
 8012270:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012272:	e0d4      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012274:	2301      	movs	r3, #1
 8012276:	73fb      	strb	r3, [r7, #15]
			break;
 8012278:	e0d1      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 801227a:	4b6e      	ldr	r3, [pc, #440]	; (8012434 <Crc_VerifyUartData+0x544>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	68ba      	ldr	r2, [r7, #8]
 8012280:	429a      	cmp	r2, r3
 8012282:	d102      	bne.n	801228a <Crc_VerifyUartData+0x39a>
			{
				returnValue = E_OK;
 8012284:	2300      	movs	r3, #0
 8012286:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012288:	e0c9      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801228a:	2301      	movs	r3, #1
 801228c:	73fb      	strb	r3, [r7, #15]
			break;
 801228e:	e0c6      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 8012290:	4b69      	ldr	r3, [pc, #420]	; (8012438 <Crc_VerifyUartData+0x548>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	68ba      	ldr	r2, [r7, #8]
 8012296:	429a      	cmp	r2, r3
 8012298:	d102      	bne.n	80122a0 <Crc_VerifyUartData+0x3b0>
			{
				returnValue = E_OK;
 801229a:	2300      	movs	r3, #0
 801229c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801229e:	e0be      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80122a0:	2301      	movs	r3, #1
 80122a2:	73fb      	strb	r3, [r7, #15]
			break;
 80122a4:	e0bb      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 80122a6:	4b65      	ldr	r3, [pc, #404]	; (801243c <Crc_VerifyUartData+0x54c>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	68ba      	ldr	r2, [r7, #8]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d102      	bne.n	80122b6 <Crc_VerifyUartData+0x3c6>
			{
				returnValue = E_OK;
 80122b0:	2300      	movs	r3, #0
 80122b2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80122b4:	e0b3      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80122b6:	2301      	movs	r3, #1
 80122b8:	73fb      	strb	r3, [r7, #15]
			break;
 80122ba:	e0b0      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_LEGVENT_ON:
			if(calculatedCrc == Crc_Hvac_LegVent_On)
 80122bc:	4b60      	ldr	r3, [pc, #384]	; (8012440 <Crc_VerifyUartData+0x550>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	68ba      	ldr	r2, [r7, #8]
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d102      	bne.n	80122cc <Crc_VerifyUartData+0x3dc>
			{
				returnValue = E_OK;
 80122c6:	2300      	movs	r3, #0
 80122c8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80122ca:	e0a8      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80122cc:	2301      	movs	r3, #1
 80122ce:	73fb      	strb	r3, [r7, #15]
			break;
 80122d0:	e0a5      	b.n	801241e <Crc_VerifyUartData+0x52e>
			break;
		case RTE_P_BTC_RX_HVAC_LEGVENT_OFF:
			if(calculatedCrc == Crc_Hvac_LegVent_Off)
 80122d2:	4b5c      	ldr	r3, [pc, #368]	; (8012444 <Crc_VerifyUartData+0x554>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	68ba      	ldr	r2, [r7, #8]
 80122d8:	429a      	cmp	r2, r3
 80122da:	d102      	bne.n	80122e2 <Crc_VerifyUartData+0x3f2>
			{
				returnValue = E_OK;
 80122dc:	2300      	movs	r3, #0
 80122de:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80122e0:	e09d      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80122e2:	2301      	movs	r3, #1
 80122e4:	73fb      	strb	r3, [r7, #15]
			break;
 80122e6:	e09a      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_MIDVENT_ON:
			if(calculatedCrc == Crc_Hvac_MidVent_On)
 80122e8:	4b57      	ldr	r3, [pc, #348]	; (8012448 <Crc_VerifyUartData+0x558>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	68ba      	ldr	r2, [r7, #8]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d102      	bne.n	80122f8 <Crc_VerifyUartData+0x408>
			{
				returnValue = E_OK;
 80122f2:	2300      	movs	r3, #0
 80122f4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80122f6:	e092      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80122f8:	2301      	movs	r3, #1
 80122fa:	73fb      	strb	r3, [r7, #15]
			break;
 80122fc:	e08f      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_MIDVENT_OFF:
			if(calculatedCrc == Crc_Hvac_MidVent_Off)
 80122fe:	4b53      	ldr	r3, [pc, #332]	; (801244c <Crc_VerifyUartData+0x55c>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	68ba      	ldr	r2, [r7, #8]
 8012304:	429a      	cmp	r2, r3
 8012306:	d102      	bne.n	801230e <Crc_VerifyUartData+0x41e>
			{
				returnValue = E_OK;
 8012308:	2300      	movs	r3, #0
 801230a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801230c:	e087      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801230e:	2301      	movs	r3, #1
 8012310:	73fb      	strb	r3, [r7, #15]
			break;
 8012312:	e084      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_ON:
			if(calculatedCrc == Crc_Hvac_WindshieldVent_On)
 8012314:	4b4e      	ldr	r3, [pc, #312]	; (8012450 <Crc_VerifyUartData+0x560>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	68ba      	ldr	r2, [r7, #8]
 801231a:	429a      	cmp	r2, r3
 801231c:	d102      	bne.n	8012324 <Crc_VerifyUartData+0x434>
			{
				returnValue = E_OK;
 801231e:	2300      	movs	r3, #0
 8012320:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012322:	e07c      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012324:	2301      	movs	r3, #1
 8012326:	73fb      	strb	r3, [r7, #15]
			break;
 8012328:	e079      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_OFF:
			if(calculatedCrc == Crc_Hvac_WindshieldVent_Off)
 801232a:	4b4a      	ldr	r3, [pc, #296]	; (8012454 <Crc_VerifyUartData+0x564>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	68ba      	ldr	r2, [r7, #8]
 8012330:	429a      	cmp	r2, r3
 8012332:	d102      	bne.n	801233a <Crc_VerifyUartData+0x44a>
			{
				returnValue = E_OK;
 8012334:	2300      	movs	r3, #0
 8012336:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012338:	e071      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801233a:	2301      	movs	r3, #1
 801233c:	73fb      	strb	r3, [r7, #15]
			break;
 801233e:	e06e      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_ON:
			if(calculatedCrc == Crc_Hvac_WindshieldDefrost_On)
 8012340:	4b45      	ldr	r3, [pc, #276]	; (8012458 <Crc_VerifyUartData+0x568>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	68ba      	ldr	r2, [r7, #8]
 8012346:	429a      	cmp	r2, r3
 8012348:	d102      	bne.n	8012350 <Crc_VerifyUartData+0x460>
			{
				returnValue = E_OK;
 801234a:	2300      	movs	r3, #0
 801234c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801234e:	e066      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012350:	2301      	movs	r3, #1
 8012352:	73fb      	strb	r3, [r7, #15]
			break;
 8012354:	e063      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:
			if(calculatedCrc == Crc_Hvac_WindshieldDefrost_Off)
 8012356:	4b41      	ldr	r3, [pc, #260]	; (801245c <Crc_VerifyUartData+0x56c>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	68ba      	ldr	r2, [r7, #8]
 801235c:	429a      	cmp	r2, r3
 801235e:	d102      	bne.n	8012366 <Crc_VerifyUartData+0x476>
			{
				returnValue = E_OK;
 8012360:	2300      	movs	r3, #0
 8012362:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012364:	e05b      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012366:	2301      	movs	r3, #1
 8012368:	73fb      	strb	r3, [r7, #15]
			break;
 801236a:	e058      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AC_ON:
			if(calculatedCrc == Crc_Hvac_Ac_On)
 801236c:	4b3c      	ldr	r3, [pc, #240]	; (8012460 <Crc_VerifyUartData+0x570>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	68ba      	ldr	r2, [r7, #8]
 8012372:	429a      	cmp	r2, r3
 8012374:	d102      	bne.n	801237c <Crc_VerifyUartData+0x48c>
			{
				returnValue = E_OK;
 8012376:	2300      	movs	r3, #0
 8012378:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801237a:	e050      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 801237c:	2301      	movs	r3, #1
 801237e:	73fb      	strb	r3, [r7, #15]
			break;
 8012380:	e04d      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AC_OFF:
			if(calculatedCrc == Crc_Hvac_Ac_Off)
 8012382:	4b38      	ldr	r3, [pc, #224]	; (8012464 <Crc_VerifyUartData+0x574>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	68ba      	ldr	r2, [r7, #8]
 8012388:	429a      	cmp	r2, r3
 801238a:	d102      	bne.n	8012392 <Crc_VerifyUartData+0x4a2>
			{
				returnValue = E_OK;
 801238c:	2300      	movs	r3, #0
 801238e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012390:	e045      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012392:	2301      	movs	r3, #1
 8012394:	73fb      	strb	r3, [r7, #15]
			break;
 8012396:	e042      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_RECIRCULATION:
			if(calculatedCrc == Crc_Hvac_Recirculation)
 8012398:	4b33      	ldr	r3, [pc, #204]	; (8012468 <Crc_VerifyUartData+0x578>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	68ba      	ldr	r2, [r7, #8]
 801239e:	429a      	cmp	r2, r3
 80123a0:	d102      	bne.n	80123a8 <Crc_VerifyUartData+0x4b8>
			{
				returnValue = E_OK;
 80123a2:	2300      	movs	r3, #0
 80123a4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80123a6:	e03a      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80123a8:	2301      	movs	r3, #1
 80123aa:	73fb      	strb	r3, [r7, #15]
			break;
 80123ac:	e037      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_NORECIRCULATION:
			if(calculatedCrc == Crc_Hvac_NoRecirculation)
 80123ae:	4b2f      	ldr	r3, [pc, #188]	; (801246c <Crc_VerifyUartData+0x57c>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	68ba      	ldr	r2, [r7, #8]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d102      	bne.n	80123be <Crc_VerifyUartData+0x4ce>
			{
				returnValue = E_OK;
 80123b8:	2300      	movs	r3, #0
 80123ba:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80123bc:	e02f      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80123be:	2301      	movs	r3, #1
 80123c0:	73fb      	strb	r3, [r7, #15]
			break;
 80123c2:	e02c      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AUTOMATICMODE_ON:
			if(calculatedCrc == Crc_Hvac_AutomaticMode_On)
 80123c4:	4b2a      	ldr	r3, [pc, #168]	; (8012470 <Crc_VerifyUartData+0x580>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	68ba      	ldr	r2, [r7, #8]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d102      	bne.n	80123d4 <Crc_VerifyUartData+0x4e4>
			{
				returnValue = E_OK;
 80123ce:	2300      	movs	r3, #0
 80123d0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80123d2:	e024      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80123d4:	2301      	movs	r3, #1
 80123d6:	73fb      	strb	r3, [r7, #15]
			break;
 80123d8:	e021      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AUTOMATICMODE_OFF:
			if(calculatedCrc == Crc_Hvac_AutomaticMode_Off)
 80123da:	4b26      	ldr	r3, [pc, #152]	; (8012474 <Crc_VerifyUartData+0x584>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	68ba      	ldr	r2, [r7, #8]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d102      	bne.n	80123ea <Crc_VerifyUartData+0x4fa>
			{
				returnValue = E_OK;
 80123e4:	2300      	movs	r3, #0
 80123e6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80123e8:	e019      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 80123ea:	2301      	movs	r3, #1
 80123ec:	73fb      	strb	r3, [r7, #15]
			break;
 80123ee:	e016      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON:
			if(calculatedCrc == Crc_Hvac_RearWindshieldDefrost_On)
 80123f0:	4b21      	ldr	r3, [pc, #132]	; (8012478 <Crc_VerifyUartData+0x588>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	68ba      	ldr	r2, [r7, #8]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d102      	bne.n	8012400 <Crc_VerifyUartData+0x510>
			{
				returnValue = E_OK;
 80123fa:	2300      	movs	r3, #0
 80123fc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80123fe:	e00e      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012400:	2301      	movs	r3, #1
 8012402:	73fb      	strb	r3, [r7, #15]
			break;
 8012404:	e00b      	b.n	801241e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF:
			if(calculatedCrc == Crc_Hvac_RearWindshieldDefrost_Off)
 8012406:	4b1d      	ldr	r3, [pc, #116]	; (801247c <Crc_VerifyUartData+0x58c>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	68ba      	ldr	r2, [r7, #8]
 801240c:	429a      	cmp	r2, r3
 801240e:	d102      	bne.n	8012416 <Crc_VerifyUartData+0x526>
			{
				returnValue = E_OK;
 8012410:	2300      	movs	r3, #0
 8012412:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8012414:	e003      	b.n	801241e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8012416:	2301      	movs	r3, #1
 8012418:	73fb      	strb	r3, [r7, #15]
			break;
 801241a:	e000      	b.n	801241e <Crc_VerifyUartData+0x52e>
		default:
			break;
 801241c:	bf00      	nop
	}
	return returnValue;
 801241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012420:	4618      	mov	r0, r3
 8012422:	3710      	adds	r7, #16
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}
 8012428:	200093d0 	.word	0x200093d0
 801242c:	200093d4 	.word	0x200093d4
 8012430:	200093a4 	.word	0x200093a4
 8012434:	200093a8 	.word	0x200093a8
 8012438:	200093c8 	.word	0x200093c8
 801243c:	200093cc 	.word	0x200093cc
 8012440:	200093d8 	.word	0x200093d8
 8012444:	200093dc 	.word	0x200093dc
 8012448:	200093e0 	.word	0x200093e0
 801244c:	200093e4 	.word	0x200093e4
 8012450:	200093e8 	.word	0x200093e8
 8012454:	200093ec 	.word	0x200093ec
 8012458:	200093f0 	.word	0x200093f0
 801245c:	200093f4 	.word	0x200093f4
 8012460:	20009400 	.word	0x20009400
 8012464:	20009404 	.word	0x20009404
 8012468:	20009408 	.word	0x20009408
 801246c:	2000940c 	.word	0x2000940c
 8012470:	20009410 	.word	0x20009410
 8012474:	20009414 	.word	0x20009414
 8012478:	200093f8 	.word	0x200093f8
 801247c:	200093fc 	.word	0x200093fc

08012480 <Crc_InitCrcValuesForUart>:
/***********************************************************************************
* Function: Crc_InitCrcValuesForUart									   		   *
* Description: Initialize the CRC default values for UART data.			 		   *
************************************************************************************/
VOID Crc_InitCrcValuesForUart()
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
	/* Local variable to store default value of possible
	 * received data from UART. */
	uint32 value = 0;
 8012486:	2300      	movs	r3, #0
 8012488:	607b      	str	r3, [r7, #4]
	/* Calculate CRC for each defined bluetooth command. */
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 801248a:	230f      	movs	r3, #15
 801248c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 801248e:	1d3b      	adds	r3, r7, #4
 8012490:	2201      	movs	r2, #1
 8012492:	4619      	mov	r1, r3
 8012494:	48ba      	ldr	r0, [pc, #744]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012496:	f7f4 fc11 	bl	8006cbc <HAL_CRC_Calculate>
 801249a:	4603      	mov	r3, r0
 801249c:	4ab9      	ldr	r2, [pc, #740]	; (8012784 <Crc_InitCrcValuesForUart+0x304>)
 801249e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 80124a0:	2310      	movs	r3, #16
 80124a2:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80124a4:	1d3b      	adds	r3, r7, #4
 80124a6:	2201      	movs	r2, #1
 80124a8:	4619      	mov	r1, r3
 80124aa:	48b5      	ldr	r0, [pc, #724]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80124ac:	f7f4 fc06 	bl	8006cbc <HAL_CRC_Calculate>
 80124b0:	4603      	mov	r3, r0
 80124b2:	4ab5      	ldr	r2, [pc, #724]	; (8012788 <Crc_InitCrcValuesForUart+0x308>)
 80124b4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_ON;
 80124b6:	2301      	movs	r3, #1
 80124b8:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 80124ba:	1d3b      	adds	r3, r7, #4
 80124bc:	2201      	movs	r2, #1
 80124be:	4619      	mov	r1, r3
 80124c0:	48af      	ldr	r0, [pc, #700]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80124c2:	f7f4 fbfb 	bl	8006cbc <HAL_CRC_Calculate>
 80124c6:	4603      	mov	r3, r0
 80124c8:	4ab0      	ldr	r2, [pc, #704]	; (801278c <Crc_InitCrcValuesForUart+0x30c>)
 80124ca:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_OFF;
 80124cc:	2302      	movs	r3, #2
 80124ce:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80124d0:	1d3b      	adds	r3, r7, #4
 80124d2:	2201      	movs	r2, #1
 80124d4:	4619      	mov	r1, r3
 80124d6:	48aa      	ldr	r0, [pc, #680]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80124d8:	f7f4 fbf0 	bl	8006cbc <HAL_CRC_Calculate>
 80124dc:	4603      	mov	r3, r0
 80124de:	4aac      	ldr	r2, [pc, #688]	; (8012790 <Crc_InitCrcValuesForUart+0x310>)
 80124e0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 80124e2:	2303      	movs	r3, #3
 80124e4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 80124e6:	1d3b      	adds	r3, r7, #4
 80124e8:	2201      	movs	r2, #1
 80124ea:	4619      	mov	r1, r3
 80124ec:	48a4      	ldr	r0, [pc, #656]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80124ee:	f7f4 fbe5 	bl	8006cbc <HAL_CRC_Calculate>
 80124f2:	4603      	mov	r3, r0
 80124f4:	4aa7      	ldr	r2, [pc, #668]	; (8012794 <Crc_InitCrcValuesForUart+0x314>)
 80124f6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 80124f8:	2304      	movs	r3, #4
 80124fa:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80124fc:	1d3b      	adds	r3, r7, #4
 80124fe:	2201      	movs	r2, #1
 8012500:	4619      	mov	r1, r3
 8012502:	489f      	ldr	r0, [pc, #636]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012504:	f7f4 fbda 	bl	8006cbc <HAL_CRC_Calculate>
 8012508:	4603      	mov	r3, r0
 801250a:	4aa3      	ldr	r2, [pc, #652]	; (8012798 <Crc_InitCrcValuesForUart+0x318>)
 801250c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 801250e:	2307      	movs	r3, #7
 8012510:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012512:	1d3b      	adds	r3, r7, #4
 8012514:	2201      	movs	r2, #1
 8012516:	4619      	mov	r1, r3
 8012518:	4899      	ldr	r0, [pc, #612]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 801251a:	f7f4 fbcf 	bl	8006cbc <HAL_CRC_Calculate>
 801251e:	4603      	mov	r3, r0
 8012520:	4a9e      	ldr	r2, [pc, #632]	; (801279c <Crc_InitCrcValuesForUart+0x31c>)
 8012522:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 8012524:	2308      	movs	r3, #8
 8012526:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012528:	1d3b      	adds	r3, r7, #4
 801252a:	2201      	movs	r2, #1
 801252c:	4619      	mov	r1, r3
 801252e:	4894      	ldr	r0, [pc, #592]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012530:	f7f4 fbc4 	bl	8006cbc <HAL_CRC_Calculate>
 8012534:	4603      	mov	r3, r0
 8012536:	4a9a      	ldr	r2, [pc, #616]	; (80127a0 <Crc_InitCrcValuesForUart+0x320>)
 8012538:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 801253a:	2309      	movs	r3, #9
 801253c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 801253e:	1d3b      	adds	r3, r7, #4
 8012540:	2201      	movs	r2, #1
 8012542:	4619      	mov	r1, r3
 8012544:	488e      	ldr	r0, [pc, #568]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012546:	f7f4 fbb9 	bl	8006cbc <HAL_CRC_Calculate>
 801254a:	4603      	mov	r3, r0
 801254c:	4a95      	ldr	r2, [pc, #596]	; (80127a4 <Crc_InitCrcValuesForUart+0x324>)
 801254e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 8012550:	230a      	movs	r3, #10
 8012552:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012554:	1d3b      	adds	r3, r7, #4
 8012556:	2201      	movs	r2, #1
 8012558:	4619      	mov	r1, r3
 801255a:	4889      	ldr	r0, [pc, #548]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 801255c:	f7f4 fbae 	bl	8006cbc <HAL_CRC_Calculate>
 8012560:	4603      	mov	r3, r0
 8012562:	4a91      	ldr	r2, [pc, #580]	; (80127a8 <Crc_InitCrcValuesForUart+0x328>)
 8012564:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 8012566:	230b      	movs	r3, #11
 8012568:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 801256a:	1d3b      	adds	r3, r7, #4
 801256c:	2201      	movs	r2, #1
 801256e:	4619      	mov	r1, r3
 8012570:	4883      	ldr	r0, [pc, #524]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012572:	f7f4 fba3 	bl	8006cbc <HAL_CRC_Calculate>
 8012576:	4603      	mov	r3, r0
 8012578:	4a8c      	ldr	r2, [pc, #560]	; (80127ac <Crc_InitCrcValuesForUart+0x32c>)
 801257a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 801257c:	230c      	movs	r3, #12
 801257e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012580:	1d3b      	adds	r3, r7, #4
 8012582:	2201      	movs	r2, #1
 8012584:	4619      	mov	r1, r3
 8012586:	487e      	ldr	r0, [pc, #504]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012588:	f7f4 fb98 	bl	8006cbc <HAL_CRC_Calculate>
 801258c:	4603      	mov	r3, r0
 801258e:	4a88      	ldr	r2, [pc, #544]	; (80127b0 <Crc_InitCrcValuesForUart+0x330>)
 8012590:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 8012592:	230d      	movs	r3, #13
 8012594:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012596:	1d3b      	adds	r3, r7, #4
 8012598:	2201      	movs	r2, #1
 801259a:	4619      	mov	r1, r3
 801259c:	4878      	ldr	r0, [pc, #480]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 801259e:	f7f4 fb8d 	bl	8006cbc <HAL_CRC_Calculate>
 80125a2:	4603      	mov	r3, r0
 80125a4:	4a83      	ldr	r2, [pc, #524]	; (80127b4 <Crc_InitCrcValuesForUart+0x334>)
 80125a6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 80125a8:	230e      	movs	r3, #14
 80125aa:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80125ac:	1d3b      	adds	r3, r7, #4
 80125ae:	2201      	movs	r2, #1
 80125b0:	4619      	mov	r1, r3
 80125b2:	4873      	ldr	r0, [pc, #460]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80125b4:	f7f4 fb82 	bl	8006cbc <HAL_CRC_Calculate>
 80125b8:	4603      	mov	r3, r0
 80125ba:	4a7f      	ldr	r2, [pc, #508]	; (80127b8 <Crc_InitCrcValuesForUart+0x338>)
 80125bc:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 80125be:	2311      	movs	r3, #17
 80125c0:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 80125c2:	1d3b      	adds	r3, r7, #4
 80125c4:	2201      	movs	r2, #1
 80125c6:	4619      	mov	r1, r3
 80125c8:	486d      	ldr	r0, [pc, #436]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80125ca:	f7f4 fb77 	bl	8006cbc <HAL_CRC_Calculate>
 80125ce:	4603      	mov	r3, r0
 80125d0:	4a7a      	ldr	r2, [pc, #488]	; (80127bc <Crc_InitCrcValuesForUart+0x33c>)
 80125d2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 80125d4:	2312      	movs	r3, #18
 80125d6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80125d8:	1d3b      	adds	r3, r7, #4
 80125da:	2201      	movs	r2, #1
 80125dc:	4619      	mov	r1, r3
 80125de:	4868      	ldr	r0, [pc, #416]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80125e0:	f7f4 fb6c 	bl	8006cbc <HAL_CRC_Calculate>
 80125e4:	4603      	mov	r3, r0
 80125e6:	4a76      	ldr	r2, [pc, #472]	; (80127c0 <Crc_InitCrcValuesForUart+0x340>)
 80125e8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 80125ea:	2315      	movs	r3, #21
 80125ec:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 80125ee:	1d3b      	adds	r3, r7, #4
 80125f0:	2201      	movs	r2, #1
 80125f2:	4619      	mov	r1, r3
 80125f4:	4862      	ldr	r0, [pc, #392]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80125f6:	f7f4 fb61 	bl	8006cbc <HAL_CRC_Calculate>
 80125fa:	4603      	mov	r3, r0
 80125fc:	4a71      	ldr	r2, [pc, #452]	; (80127c4 <Crc_InitCrcValuesForUart+0x344>)
 80125fe:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 8012600:	2316      	movs	r3, #22
 8012602:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012604:	1d3b      	adds	r3, r7, #4
 8012606:	2201      	movs	r2, #1
 8012608:	4619      	mov	r1, r3
 801260a:	485d      	ldr	r0, [pc, #372]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 801260c:	f7f4 fb56 	bl	8006cbc <HAL_CRC_Calculate>
 8012610:	4603      	mov	r3, r0
 8012612:	4a6d      	ldr	r2, [pc, #436]	; (80127c8 <Crc_InitCrcValuesForUart+0x348>)
 8012614:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 8012616:	2317      	movs	r3, #23
 8012618:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 801261a:	1d3b      	adds	r3, r7, #4
 801261c:	2201      	movs	r2, #1
 801261e:	4619      	mov	r1, r3
 8012620:	4857      	ldr	r0, [pc, #348]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012622:	f7f4 fb4b 	bl	8006cbc <HAL_CRC_Calculate>
 8012626:	4603      	mov	r3, r0
 8012628:	4a68      	ldr	r2, [pc, #416]	; (80127cc <Crc_InitCrcValuesForUart+0x34c>)
 801262a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 801262c:	2318      	movs	r3, #24
 801262e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012630:	1d3b      	adds	r3, r7, #4
 8012632:	2201      	movs	r2, #1
 8012634:	4619      	mov	r1, r3
 8012636:	4852      	ldr	r0, [pc, #328]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012638:	f7f4 fb40 	bl	8006cbc <HAL_CRC_Calculate>
 801263c:	4603      	mov	r3, r0
 801263e:	4a64      	ldr	r2, [pc, #400]	; (80127d0 <Crc_InitCrcValuesForUart+0x350>)
 8012640:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8012642:	2319      	movs	r3, #25
 8012644:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012646:	1d3b      	adds	r3, r7, #4
 8012648:	2201      	movs	r2, #1
 801264a:	4619      	mov	r1, r3
 801264c:	484c      	ldr	r0, [pc, #304]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 801264e:	f7f4 fb35 	bl	8006cbc <HAL_CRC_Calculate>
 8012652:	4603      	mov	r3, r0
 8012654:	4a5f      	ldr	r2, [pc, #380]	; (80127d4 <Crc_InitCrcValuesForUart+0x354>)
 8012656:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 8012658:	231a      	movs	r3, #26
 801265a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 801265c:	1d3b      	adds	r3, r7, #4
 801265e:	2201      	movs	r2, #1
 8012660:	4619      	mov	r1, r3
 8012662:	4847      	ldr	r0, [pc, #284]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012664:	f7f4 fb2a 	bl	8006cbc <HAL_CRC_Calculate>
 8012668:	4603      	mov	r3, r0
 801266a:	4a5b      	ldr	r2, [pc, #364]	; (80127d8 <Crc_InitCrcValuesForUart+0x358>)
 801266c:	6013      	str	r3, [r2, #0]
	Crc_Ignition_Turn_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 801266e:	1d3b      	adds	r3, r7, #4
 8012670:	2201      	movs	r2, #1
 8012672:	4619      	mov	r1, r3
 8012674:	4842      	ldr	r0, [pc, #264]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012676:	f7f4 fb21 	bl	8006cbc <HAL_CRC_Calculate>
 801267a:	4603      	mov	r3, r0
 801267c:	4a57      	ldr	r2, [pc, #348]	; (80127dc <Crc_InitCrcValuesForUart+0x35c>)
 801267e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 8012680:	2313      	movs	r3, #19
 8012682:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012684:	1d3b      	adds	r3, r7, #4
 8012686:	2201      	movs	r2, #1
 8012688:	4619      	mov	r1, r3
 801268a:	483d      	ldr	r0, [pc, #244]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 801268c:	f7f4 fb16 	bl	8006cbc <HAL_CRC_Calculate>
 8012690:	4603      	mov	r3, r0
 8012692:	4a53      	ldr	r2, [pc, #332]	; (80127e0 <Crc_InitCrcValuesForUart+0x360>)
 8012694:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 8012696:	2314      	movs	r3, #20
 8012698:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 801269a:	1d3b      	adds	r3, r7, #4
 801269c:	2201      	movs	r2, #1
 801269e:	4619      	mov	r1, r3
 80126a0:	4837      	ldr	r0, [pc, #220]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80126a2:	f7f4 fb0b 	bl	8006cbc <HAL_CRC_Calculate>
 80126a6:	4603      	mov	r3, r0
 80126a8:	4a4e      	ldr	r2, [pc, #312]	; (80127e4 <Crc_InitCrcValuesForUart+0x364>)
 80126aa:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_LEGVENT_ON;
 80126ac:	2337      	movs	r3, #55	; 0x37
 80126ae:	607b      	str	r3, [r7, #4]
	Crc_Hvac_LegVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 80126b0:	1d3b      	adds	r3, r7, #4
 80126b2:	2201      	movs	r2, #1
 80126b4:	4619      	mov	r1, r3
 80126b6:	4832      	ldr	r0, [pc, #200]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80126b8:	f7f4 fb00 	bl	8006cbc <HAL_CRC_Calculate>
 80126bc:	4603      	mov	r3, r0
 80126be:	4a4a      	ldr	r2, [pc, #296]	; (80127e8 <Crc_InitCrcValuesForUart+0x368>)
 80126c0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_LEGVENT_OFF;
 80126c2:	2338      	movs	r3, #56	; 0x38
 80126c4:	607b      	str	r3, [r7, #4]
	Crc_Hvac_LegVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80126c6:	1d3b      	adds	r3, r7, #4
 80126c8:	2201      	movs	r2, #1
 80126ca:	4619      	mov	r1, r3
 80126cc:	482c      	ldr	r0, [pc, #176]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80126ce:	f7f4 faf5 	bl	8006cbc <HAL_CRC_Calculate>
 80126d2:	4603      	mov	r3, r0
 80126d4:	4a45      	ldr	r2, [pc, #276]	; (80127ec <Crc_InitCrcValuesForUart+0x36c>)
 80126d6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_MIDVENT_ON;
 80126d8:	2339      	movs	r3, #57	; 0x39
 80126da:	607b      	str	r3, [r7, #4]
	Crc_Hvac_MidVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 80126dc:	1d3b      	adds	r3, r7, #4
 80126de:	2201      	movs	r2, #1
 80126e0:	4619      	mov	r1, r3
 80126e2:	4827      	ldr	r0, [pc, #156]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80126e4:	f7f4 faea 	bl	8006cbc <HAL_CRC_Calculate>
 80126e8:	4603      	mov	r3, r0
 80126ea:	4a41      	ldr	r2, [pc, #260]	; (80127f0 <Crc_InitCrcValuesForUart+0x370>)
 80126ec:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_MIDVENT_OFF;
 80126ee:	233a      	movs	r3, #58	; 0x3a
 80126f0:	607b      	str	r3, [r7, #4]
	Crc_Hvac_MidVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80126f2:	1d3b      	adds	r3, r7, #4
 80126f4:	2201      	movs	r2, #1
 80126f6:	4619      	mov	r1, r3
 80126f8:	4821      	ldr	r0, [pc, #132]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 80126fa:	f7f4 fadf 	bl	8006cbc <HAL_CRC_Calculate>
 80126fe:	4603      	mov	r3, r0
 8012700:	4a3c      	ldr	r2, [pc, #240]	; (80127f4 <Crc_InitCrcValuesForUart+0x374>)
 8012702:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_ON;
 8012704:	233b      	movs	r3, #59	; 0x3b
 8012706:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012708:	1d3b      	adds	r3, r7, #4
 801270a:	2201      	movs	r2, #1
 801270c:	4619      	mov	r1, r3
 801270e:	481c      	ldr	r0, [pc, #112]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012710:	f7f4 fad4 	bl	8006cbc <HAL_CRC_Calculate>
 8012714:	4603      	mov	r3, r0
 8012716:	4a38      	ldr	r2, [pc, #224]	; (80127f8 <Crc_InitCrcValuesForUart+0x378>)
 8012718:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_OFF;
 801271a:	233c      	movs	r3, #60	; 0x3c
 801271c:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 801271e:	1d3b      	adds	r3, r7, #4
 8012720:	2201      	movs	r2, #1
 8012722:	4619      	mov	r1, r3
 8012724:	4816      	ldr	r0, [pc, #88]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012726:	f7f4 fac9 	bl	8006cbc <HAL_CRC_Calculate>
 801272a:	4603      	mov	r3, r0
 801272c:	4a33      	ldr	r2, [pc, #204]	; (80127fc <Crc_InitCrcValuesForUart+0x37c>)
 801272e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_ON;
 8012730:	233d      	movs	r3, #61	; 0x3d
 8012732:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldDefrost_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012734:	1d3b      	adds	r3, r7, #4
 8012736:	2201      	movs	r2, #1
 8012738:	4619      	mov	r1, r3
 801273a:	4811      	ldr	r0, [pc, #68]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 801273c:	f7f4 fabe 	bl	8006cbc <HAL_CRC_Calculate>
 8012740:	4603      	mov	r3, r0
 8012742:	4a2f      	ldr	r2, [pc, #188]	; (8012800 <Crc_InitCrcValuesForUart+0x380>)
 8012744:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_OFF;
 8012746:	233e      	movs	r3, #62	; 0x3e
 8012748:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldDefrost_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 801274a:	1d3b      	adds	r3, r7, #4
 801274c:	2201      	movs	r2, #1
 801274e:	4619      	mov	r1, r3
 8012750:	480b      	ldr	r0, [pc, #44]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012752:	f7f4 fab3 	bl	8006cbc <HAL_CRC_Calculate>
 8012756:	4603      	mov	r3, r0
 8012758:	4a2a      	ldr	r2, [pc, #168]	; (8012804 <Crc_InitCrcValuesForUart+0x384>)
 801275a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON;
 801275c:	2346      	movs	r3, #70	; 0x46
 801275e:	607b      	str	r3, [r7, #4]
	Crc_Hvac_RearWindshieldDefrost_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012760:	1d3b      	adds	r3, r7, #4
 8012762:	2201      	movs	r2, #1
 8012764:	4619      	mov	r1, r3
 8012766:	4806      	ldr	r0, [pc, #24]	; (8012780 <Crc_InitCrcValuesForUart+0x300>)
 8012768:	f7f4 faa8 	bl	8006cbc <HAL_CRC_Calculate>
 801276c:	4603      	mov	r3, r0
 801276e:	4a26      	ldr	r2, [pc, #152]	; (8012808 <Crc_InitCrcValuesForUart+0x388>)
 8012770:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF;
 8012772:	2347      	movs	r3, #71	; 0x47
 8012774:	607b      	str	r3, [r7, #4]
	Crc_Hvac_RearWindshieldDefrost_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012776:	1d3b      	adds	r3, r7, #4
 8012778:	2201      	movs	r2, #1
 801277a:	4619      	mov	r1, r3
 801277c:	e046      	b.n	801280c <Crc_InitCrcValuesForUart+0x38c>
 801277e:	bf00      	nop
 8012780:	200002d0 	.word	0x200002d0
 8012784:	200093d0 	.word	0x200093d0
 8012788:	200093d4 	.word	0x200093d4
 801278c:	20009374 	.word	0x20009374
 8012790:	20009378 	.word	0x20009378
 8012794:	2000937c 	.word	0x2000937c
 8012798:	20009380 	.word	0x20009380
 801279c:	20009384 	.word	0x20009384
 80127a0:	20009388 	.word	0x20009388
 80127a4:	2000938c 	.word	0x2000938c
 80127a8:	20009390 	.word	0x20009390
 80127ac:	20009394 	.word	0x20009394
 80127b0:	20009398 	.word	0x20009398
 80127b4:	2000939c 	.word	0x2000939c
 80127b8:	200093a0 	.word	0x200093a0
 80127bc:	200093a4 	.word	0x200093a4
 80127c0:	200093a8 	.word	0x200093a8
 80127c4:	200093ac 	.word	0x200093ac
 80127c8:	200093b0 	.word	0x200093b0
 80127cc:	200093b4 	.word	0x200093b4
 80127d0:	200093b8 	.word	0x200093b8
 80127d4:	200093bc 	.word	0x200093bc
 80127d8:	200093c0 	.word	0x200093c0
 80127dc:	200093c4 	.word	0x200093c4
 80127e0:	200093c8 	.word	0x200093c8
 80127e4:	200093cc 	.word	0x200093cc
 80127e8:	200093d8 	.word	0x200093d8
 80127ec:	200093dc 	.word	0x200093dc
 80127f0:	200093e0 	.word	0x200093e0
 80127f4:	200093e4 	.word	0x200093e4
 80127f8:	200093e8 	.word	0x200093e8
 80127fc:	200093ec 	.word	0x200093ec
 8012800:	200093f0 	.word	0x200093f0
 8012804:	200093f4 	.word	0x200093f4
 8012808:	200093f8 	.word	0x200093f8
 801280c:	4825      	ldr	r0, [pc, #148]	; (80128a4 <Crc_InitCrcValuesForUart+0x424>)
 801280e:	f7f4 fa55 	bl	8006cbc <HAL_CRC_Calculate>
 8012812:	4603      	mov	r3, r0
 8012814:	4a24      	ldr	r2, [pc, #144]	; (80128a8 <Crc_InitCrcValuesForUart+0x428>)
 8012816:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AC_ON;
 8012818:	233f      	movs	r3, #63	; 0x3f
 801281a:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Ac_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 801281c:	1d3b      	adds	r3, r7, #4
 801281e:	2201      	movs	r2, #1
 8012820:	4619      	mov	r1, r3
 8012822:	4820      	ldr	r0, [pc, #128]	; (80128a4 <Crc_InitCrcValuesForUart+0x424>)
 8012824:	f7f4 fa4a 	bl	8006cbc <HAL_CRC_Calculate>
 8012828:	4603      	mov	r3, r0
 801282a:	4a20      	ldr	r2, [pc, #128]	; (80128ac <Crc_InitCrcValuesForUart+0x42c>)
 801282c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AC_OFF;
 801282e:	2340      	movs	r3, #64	; 0x40
 8012830:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Ac_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012832:	1d3b      	adds	r3, r7, #4
 8012834:	2201      	movs	r2, #1
 8012836:	4619      	mov	r1, r3
 8012838:	481a      	ldr	r0, [pc, #104]	; (80128a4 <Crc_InitCrcValuesForUart+0x424>)
 801283a:	f7f4 fa3f 	bl	8006cbc <HAL_CRC_Calculate>
 801283e:	4603      	mov	r3, r0
 8012840:	4a1b      	ldr	r2, [pc, #108]	; (80128b0 <Crc_InitCrcValuesForUart+0x430>)
 8012842:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_RECIRCULATION;
 8012844:	2341      	movs	r3, #65	; 0x41
 8012846:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Recirculation = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012848:	1d3b      	adds	r3, r7, #4
 801284a:	2201      	movs	r2, #1
 801284c:	4619      	mov	r1, r3
 801284e:	4815      	ldr	r0, [pc, #84]	; (80128a4 <Crc_InitCrcValuesForUart+0x424>)
 8012850:	f7f4 fa34 	bl	8006cbc <HAL_CRC_Calculate>
 8012854:	4603      	mov	r3, r0
 8012856:	4a17      	ldr	r2, [pc, #92]	; (80128b4 <Crc_InitCrcValuesForUart+0x434>)
 8012858:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_NORECIRCULATION;
 801285a:	2342      	movs	r3, #66	; 0x42
 801285c:	607b      	str	r3, [r7, #4]
	Crc_Hvac_NoRecirculation = HAL_CRC_Calculate(&hcrc, &value, 1);
 801285e:	1d3b      	adds	r3, r7, #4
 8012860:	2201      	movs	r2, #1
 8012862:	4619      	mov	r1, r3
 8012864:	480f      	ldr	r0, [pc, #60]	; (80128a4 <Crc_InitCrcValuesForUart+0x424>)
 8012866:	f7f4 fa29 	bl	8006cbc <HAL_CRC_Calculate>
 801286a:	4603      	mov	r3, r0
 801286c:	4a12      	ldr	r2, [pc, #72]	; (80128b8 <Crc_InitCrcValuesForUart+0x438>)
 801286e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AUTOMATICMODE_ON;
 8012870:	2344      	movs	r3, #68	; 0x44
 8012872:	607b      	str	r3, [r7, #4]
	Crc_Hvac_AutomaticMode_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012874:	1d3b      	adds	r3, r7, #4
 8012876:	2201      	movs	r2, #1
 8012878:	4619      	mov	r1, r3
 801287a:	480a      	ldr	r0, [pc, #40]	; (80128a4 <Crc_InitCrcValuesForUart+0x424>)
 801287c:	f7f4 fa1e 	bl	8006cbc <HAL_CRC_Calculate>
 8012880:	4603      	mov	r3, r0
 8012882:	4a0e      	ldr	r2, [pc, #56]	; (80128bc <Crc_InitCrcValuesForUart+0x43c>)
 8012884:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AUTOMATICMODE_OFF;
 8012886:	2345      	movs	r3, #69	; 0x45
 8012888:	607b      	str	r3, [r7, #4]
	Crc_Hvac_AutomaticMode_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 801288a:	1d3b      	adds	r3, r7, #4
 801288c:	2201      	movs	r2, #1
 801288e:	4619      	mov	r1, r3
 8012890:	4804      	ldr	r0, [pc, #16]	; (80128a4 <Crc_InitCrcValuesForUart+0x424>)
 8012892:	f7f4 fa13 	bl	8006cbc <HAL_CRC_Calculate>
 8012896:	4603      	mov	r3, r0
 8012898:	4a09      	ldr	r2, [pc, #36]	; (80128c0 <Crc_InitCrcValuesForUart+0x440>)
 801289a:	6013      	str	r3, [r2, #0]
}
 801289c:	bf00      	nop
 801289e:	3708      	adds	r7, #8
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	200002d0 	.word	0x200002d0
 80128a8:	200093fc 	.word	0x200093fc
 80128ac:	20009400 	.word	0x20009400
 80128b0:	20009404 	.word	0x20009404
 80128b4:	20009408 	.word	0x20009408
 80128b8:	2000940c 	.word	0x2000940c
 80128bc:	20009410 	.word	0x20009410
 80128c0:	20009414 	.word	0x20009414

080128c4 <HAL_CRC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_CRC_ErrorCallback												   *
* Description: Called in case of error. 								 		   *
************************************************************************************/
VOID HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization. */
	Crc_DeInit();
 80128cc:	f000 f81e 	bl	801290c <Crc_DeInit>
	Crc_Init();
 80128d0:	f000 f804 	bl	80128dc <Crc_Init>
}
 80128d4:	bf00      	nop
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <Crc_Init>:
/***********************************************************************************
* Function: Crc_Init													   		   *
* Description: Initialize the peripheral.								 		   *
************************************************************************************/
StdReturnType Crc_Init()
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	af00      	add	r7, sp, #0
	/* Initialize the CRC.
	 * Call for the error callback in case of faulty initialization. */
	hcrc.Instance = CRC;
 80128e0:	4b08      	ldr	r3, [pc, #32]	; (8012904 <Crc_Init+0x28>)
 80128e2:	4a09      	ldr	r2, [pc, #36]	; (8012908 <Crc_Init+0x2c>)
 80128e4:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80128e6:	4807      	ldr	r0, [pc, #28]	; (8012904 <Crc_Init+0x28>)
 80128e8:	f7f4 f99c 	bl	8006c24 <HAL_CRC_Init>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d002      	beq.n	80128f8 <Crc_Init+0x1c>
	{
		HAL_CRC_ErrorCallback(&hcrc);
 80128f2:	4804      	ldr	r0, [pc, #16]	; (8012904 <Crc_Init+0x28>)
 80128f4:	f7ff ffe6 	bl	80128c4 <HAL_CRC_ErrorCallback>
	else
	{
		/* do nothing */
	}
	/* Initialize the default CRC UART data received values. */
	Crc_InitCrcValuesForUart();
 80128f8:	f7ff fdc2 	bl	8012480 <Crc_InitCrcValuesForUart>
	return E_OK;
 80128fc:	2300      	movs	r3, #0
}
 80128fe:	4618      	mov	r0, r3
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	200002d0 	.word	0x200002d0
 8012908:	40023000 	.word	0x40023000

0801290c <Crc_DeInit>:
/***********************************************************************************
* Function: Crc_DeInit													   		   *
* Description: De-initialize the peripheral.		 		   					   *
************************************************************************************/
StdReturnType Crc_DeInit()
{
 801290c:	b580      	push	{r7, lr}
 801290e:	af00      	add	r7, sp, #0
	/* De-initialize the CRC. */
	HAL_CRC_DeInit(&hcrc);
 8012910:	4802      	ldr	r0, [pc, #8]	; (801291c <Crc_DeInit+0x10>)
 8012912:	f7f4 f9a3 	bl	8006c5c <HAL_CRC_DeInit>
	return E_OK;
 8012916:	2300      	movs	r3, #0
}
 8012918:	4618      	mov	r0, r3
 801291a:	bd80      	pop	{r7, pc}
 801291c:	200002d0 	.word	0x200002d0

08012920 <Crc_MainFunction>:
/***********************************************************************************
* Function: Crc_MainFunction													   *
* Description: Peripheral main function.		 		   						   *
************************************************************************************/
VOID Crc_MainFunction()
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
	/* Get the error status in the local variable. */
	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 8012926:	4825      	ldr	r0, [pc, #148]	; (80129bc <Crc_MainFunction+0x9c>)
 8012928:	f7f4 f9fb 	bl	8006d22 <HAL_CRC_GetState>
 801292c:	4603      	mov	r3, r0
 801292e:	607b      	str	r3, [r7, #4]
	/* Process module state. */
	switch(Crc_BswState)
 8012930:	4b23      	ldr	r3, [pc, #140]	; (80129c0 <Crc_MainFunction+0xa0>)
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	2b03      	cmp	r3, #3
 8012936:	d81a      	bhi.n	801296e <Crc_MainFunction+0x4e>
 8012938:	a201      	add	r2, pc, #4	; (adr r2, 8012940 <Crc_MainFunction+0x20>)
 801293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801293e:	bf00      	nop
 8012940:	08012951 	.word	0x08012951
 8012944:	0801296f 	.word	0x0801296f
 8012948:	08012963 	.word	0x08012963
 801294c:	0801295d 	.word	0x0801295d
	{
		case CRC_INIT_STATE:
			Crc_Init();
 8012950:	f7ff ffc4 	bl	80128dc <Crc_Init>
			Crc_BswState = CRC_INITCRCVALUES_STATE;
 8012954:	4b1a      	ldr	r3, [pc, #104]	; (80129c0 <Crc_MainFunction+0xa0>)
 8012956:	2202      	movs	r2, #2
 8012958:	701a      	strb	r2, [r3, #0]
			break;
 801295a:	e009      	b.n	8012970 <Crc_MainFunction+0x50>
		case CRC_DEINIT_STATE:
			Crc_DeInit();
 801295c:	f7ff ffd6 	bl	801290c <Crc_DeInit>
			break;
 8012960:	e006      	b.n	8012970 <Crc_MainFunction+0x50>
		case CRC_VERIFYUARTDATA_STATE:
			break;
		case CRC_INITCRCVALUES_STATE:
			Crc_InitCrcValuesForUart();
 8012962:	f7ff fd8d 	bl	8012480 <Crc_InitCrcValuesForUart>
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 8012966:	4b16      	ldr	r3, [pc, #88]	; (80129c0 <Crc_MainFunction+0xa0>)
 8012968:	2201      	movs	r2, #1
 801296a:	701a      	strb	r2, [r3, #0]
			break;
 801296c:	e000      	b.n	8012970 <Crc_MainFunction+0x50>
		default:
			break;
 801296e:	bf00      	nop
	}
	/* Process peripheral state. */
	switch(returnValue)
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2b04      	cmp	r3, #4
 8012974:	d81c      	bhi.n	80129b0 <Crc_MainFunction+0x90>
 8012976:	a201      	add	r2, pc, #4	; (adr r2, 801297c <Crc_MainFunction+0x5c>)
 8012978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801297c:	08012991 	.word	0x08012991
 8012980:	08012999 	.word	0x08012999
 8012984:	080129b1 	.word	0x080129b1
 8012988:	080129a1 	.word	0x080129a1
 801298c:	080129a9 	.word	0x080129a9
	{
		case HAL_CRC_STATE_RESET:
			Crc_BswState = CRC_INIT_STATE;
 8012990:	4b0b      	ldr	r3, [pc, #44]	; (80129c0 <Crc_MainFunction+0xa0>)
 8012992:	2200      	movs	r2, #0
 8012994:	701a      	strb	r2, [r3, #0]
			break;
 8012996:	e00c      	b.n	80129b2 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_READY:
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 8012998:	4b09      	ldr	r3, [pc, #36]	; (80129c0 <Crc_MainFunction+0xa0>)
 801299a:	2201      	movs	r2, #1
 801299c:	701a      	strb	r2, [r3, #0]
			break;
 801299e:	e008      	b.n	80129b2 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_BUSY:
			break;
		case HAL_CRC_STATE_TIMEOUT:
			HAL_CRC_ErrorCallback(&hcrc);
 80129a0:	4806      	ldr	r0, [pc, #24]	; (80129bc <Crc_MainFunction+0x9c>)
 80129a2:	f7ff ff8f 	bl	80128c4 <HAL_CRC_ErrorCallback>
			break;
 80129a6:	e004      	b.n	80129b2 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_ERROR:
			HAL_CRC_ErrorCallback(&hcrc);
 80129a8:	4804      	ldr	r0, [pc, #16]	; (80129bc <Crc_MainFunction+0x9c>)
 80129aa:	f7ff ff8b 	bl	80128c4 <HAL_CRC_ErrorCallback>
			break;
 80129ae:	e000      	b.n	80129b2 <Crc_MainFunction+0x92>
		default:
			break;
 80129b0:	bf00      	nop
	}
}
 80129b2:	bf00      	nop
 80129b4:	3708      	adds	r7, #8
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	200002d0 	.word	0x200002d0
 80129c0:	20009370 	.word	0x20009370

080129c4 <EcuM_CheckForWakeupEvent>:
/***********************************************************************************
* Function: EcuM_CheckForWakeupEvent									   		   *
* Description: Checks for the wake up event and sends it forward for processing.   *
************************************************************************************/
VOID EcuM_CheckForWakeupEvent()
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	af00      	add	r7, sp, #0
	/* Check if power-on reset wake-up event occurred. */
	if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 80129c8:	4b2a      	ldr	r3, [pc, #168]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 80129ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d009      	beq.n	80129e8 <EcuM_CheckForWakeupEvent+0x24>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 80129d4:	2000      	movs	r0, #0
 80129d6:	f000 f84f 	bl	8012a78 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_PORRSTF;
 80129da:	4b26      	ldr	r3, [pc, #152]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 80129dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129de:	4a25      	ldr	r2, [pc, #148]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 80129e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80129e4:	6753      	str	r3, [r2, #116]	; 0x74
 80129e6:	e03c      	b.n	8012a62 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if brown-out reset wake-up event occurred.*/
	else if((RCC->CSR & RCC_CSR_BORRSTF) != 0)
 80129e8:	4b22      	ldr	r3, [pc, #136]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 80129ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d009      	beq.n	8012a08 <EcuM_CheckForWakeupEvent+0x44>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 80129f4:	2001      	movs	r0, #1
 80129f6:	f000 f83f 	bl	8012a78 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_BORRSTF;
 80129fa:	4b1e      	ldr	r3, [pc, #120]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 80129fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129fe:	4a1d      	ldr	r2, [pc, #116]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012a04:	6753      	str	r3, [r2, #116]	; 0x74
 8012a06:	e02c      	b.n	8012a62 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a software reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 8012a08:	4b1a      	ldr	r3, [pc, #104]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d009      	beq.n	8012a28 <EcuM_CheckForWakeupEvent+0x64>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 8012a14:	2002      	movs	r0, #2
 8012a16:	f000 f82f 	bl	8012a78 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_SFTRSTF;
 8012a1a:	4b16      	ldr	r3, [pc, #88]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a1e:	4a15      	ldr	r2, [pc, #84]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a24:	6753      	str	r3, [r2, #116]	; 0x74
 8012a26:	e01c      	b.n	8012a62 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a windowed watchdog reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_IWDGRSTF) != 0)
 8012a28:	4b12      	ldr	r3, [pc, #72]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d009      	beq.n	8012a48 <EcuM_CheckForWakeupEvent+0x84>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 8012a34:	2003      	movs	r0, #3
 8012a36:	f000 f81f 	bl	8012a78 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_IWDGRSTF;
 8012a3a:	4b0e      	ldr	r3, [pc, #56]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a3e:	4a0d      	ldr	r2, [pc, #52]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012a44:	6753      	str	r3, [r2, #116]	; 0x74
 8012a46:	e00c      	b.n	8012a62 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a low power reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 8012a48:	4b0a      	ldr	r3, [pc, #40]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	da08      	bge.n	8012a62 <EcuM_CheckForWakeupEvent+0x9e>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 8012a50:	2004      	movs	r0, #4
 8012a52:	f000 f811 	bl	8012a78 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 8012a56:	4b07      	ldr	r3, [pc, #28]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a5a:	4a06      	ldr	r2, [pc, #24]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012a60:	6753      	str	r3, [r2, #116]	; 0x74
	}/* Check if a button reset wake-up event occurred. */
	else
	{
		/* do nothing */
	}
	RCC->CSR |= RCC_CSR_RMVF;
 8012a62:	4b04      	ldr	r3, [pc, #16]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a66:	4a03      	ldr	r2, [pc, #12]	; (8012a74 <EcuM_CheckForWakeupEvent+0xb0>)
 8012a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a6c:	6753      	str	r3, [r2, #116]	; 0x74
}
 8012a6e:	bf00      	nop
 8012a70:	bd80      	pop	{r7, pc}
 8012a72:	bf00      	nop
 8012a74:	40023800 	.word	0x40023800

08012a78 <EcuM_SetWakeupSource>:
/***********************************************************************************
* Function: EcuM_SetWakeupSource									   		   	   *
* Description: Sets the wake up source received.			 		   			   *
************************************************************************************/
VOID EcuM_SetWakeupSource(uint32 wakeupSource)
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b083      	sub	sp, #12
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
	/* If wake-up source is valid. */
	if(wakeupSource != NULL_PTR)
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d003      	beq.n	8012a8e <EcuM_SetWakeupSource+0x16>
	{
		/* Store the wake-up event. */
		EcuM_GlobalState = wakeupSource;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	b2da      	uxtb	r2, r3
 8012a8a:	4b04      	ldr	r3, [pc, #16]	; (8012a9c <EcuM_SetWakeupSource+0x24>)
 8012a8c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8012a8e:	bf00      	nop
 8012a90:	370c      	adds	r7, #12
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr
 8012a9a:	bf00      	nop
 8012a9c:	20009419 	.word	0x20009419

08012aa0 <EcuM_ProcessWakeupEvent>:
/***********************************************************************************
* Function: EcuM_ProcessWakeupEvent									   		       *
* Description: Sends forward the wake up event.							 		   *
************************************************************************************/
VOID EcuM_ProcessWakeupEvent()
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
	/* Store the wake-up event into local variable. */
	uint8 localWakeupEvent = EcuM_GlobalState;
 8012aa6:	4b1d      	ldr	r3, [pc, #116]	; (8012b1c <EcuM_ProcessWakeupEvent+0x7c>)
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	71fb      	strb	r3, [r7, #7]
	/* Set the system fault for the respective wake-up event. */
	switch(localWakeupEvent)
 8012aac:	79fb      	ldrb	r3, [r7, #7]
 8012aae:	2b04      	cmp	r3, #4
 8012ab0:	d82f      	bhi.n	8012b12 <EcuM_ProcessWakeupEvent+0x72>
 8012ab2:	a201      	add	r2, pc, #4	; (adr r2, 8012ab8 <EcuM_ProcessWakeupEvent+0x18>)
 8012ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab8:	08012acd 	.word	0x08012acd
 8012abc:	08012adb 	.word	0x08012adb
 8012ac0:	08012ae9 	.word	0x08012ae9
 8012ac4:	08012af7 	.word	0x08012af7
 8012ac8:	08012b05 	.word	0x08012b05
	{
		case ECUM_WAKEUPSOURCE_POR:
			EcuM_GlobalState = 255;
 8012acc:	4b13      	ldr	r3, [pc, #76]	; (8012b1c <EcuM_ProcessWakeupEvent+0x7c>)
 8012ace:	22ff      	movs	r2, #255	; 0xff
 8012ad0:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 8012ad2:	2000      	movs	r0, #0
 8012ad4:	f000 f9ae 	bl	8012e34 <SystemManager_SetFault>
			break;
 8012ad8:	e01c      	b.n	8012b14 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_BOR:
			EcuM_GlobalState = 255;
 8012ada:	4b10      	ldr	r3, [pc, #64]	; (8012b1c <EcuM_ProcessWakeupEvent+0x7c>)
 8012adc:	22ff      	movs	r2, #255	; 0xff
 8012ade:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 8012ae0:	2001      	movs	r0, #1
 8012ae2:	f000 f9a7 	bl	8012e34 <SystemManager_SetFault>
			break;
 8012ae6:	e015      	b.n	8012b14 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:
			EcuM_GlobalState = 255;
 8012ae8:	4b0c      	ldr	r3, [pc, #48]	; (8012b1c <EcuM_ProcessWakeupEvent+0x7c>)
 8012aea:	22ff      	movs	r2, #255	; 0xff
 8012aec:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 8012aee:	2002      	movs	r0, #2
 8012af0:	f000 f9a0 	bl	8012e34 <SystemManager_SetFault>
			break;
 8012af4:	e00e      	b.n	8012b14 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:
			EcuM_GlobalState = 255;
 8012af6:	4b09      	ldr	r3, [pc, #36]	; (8012b1c <EcuM_ProcessWakeupEvent+0x7c>)
 8012af8:	22ff      	movs	r2, #255	; 0xff
 8012afa:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 8012afc:	2003      	movs	r0, #3
 8012afe:	f000 f999 	bl	8012e34 <SystemManager_SetFault>
			break;
 8012b02:	e007      	b.n	8012b14 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:
			EcuM_GlobalState = 255;
 8012b04:	4b05      	ldr	r3, [pc, #20]	; (8012b1c <EcuM_ProcessWakeupEvent+0x7c>)
 8012b06:	22ff      	movs	r2, #255	; 0xff
 8012b08:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 8012b0a:	2004      	movs	r0, #4
 8012b0c:	f000 f992 	bl	8012e34 <SystemManager_SetFault>
			break;
 8012b10:	e000      	b.n	8012b14 <EcuM_ProcessWakeupEvent+0x74>
		default:
			break;
 8012b12:	bf00      	nop
	}
}
 8012b14:	bf00      	nop
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}
 8012b1c:	20009419 	.word	0x20009419

08012b20 <EcuM_DriverInit>:
/***********************************************************************************
* Function: EcuM_DriverInit									   		               *
* Description: Initialize the drivers.			 		   						   *
************************************************************************************/
StdReturnType EcuM_DriverInit()
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b084      	sub	sp, #16
 8012b24:	af00      	add	r7, sp, #0
	Port_Init();
 8012b26:	f7fa fe0b 	bl	800d740 <Port_Init>
	MX_DMA_Init();
 8012b2a:	f7f1 fc29 	bl	8004380 <MX_DMA_Init>
	Spi_Init();
 8012b2e:	f7fa ff7e 	bl	800da2e <Spi_Init>
	CanOverSpi_Init();
 8012b32:	f7fa fe0c 	bl	800d74e <CanOverSpi_Init>
	Can_Init();
 8012b36:	f7f0 fe49 	bl	80037cc <Can_Init>
	Tim_Init(TIMER_TWO);
 8012b3a:	2002      	movs	r0, #2
 8012b3c:	f7fb f8ae 	bl	800dc9c <Tim_Init>
	Tim_Init(TIMER_THREE);
 8012b40:	2003      	movs	r0, #3
 8012b42:	f7fb f8ab 	bl	800dc9c <Tim_Init>
	Tim_Init(TIMER_FOUR);
 8012b46:	2004      	movs	r0, #4
 8012b48:	f7fb f8a8 	bl	800dc9c <Tim_Init>
	Tim_Init(TIMER_FIVE);
 8012b4c:	2005      	movs	r0, #5
 8012b4e:	f7fb f8a5 	bl	800dc9c <Tim_Init>
	I2c_Init(I2C_CHANNEL_ONE);
 8012b52:	2001      	movs	r0, #1
 8012b54:	f7f0 ff0c 	bl	8003970 <I2c_Init>
	Adc_Init();
 8012b58:	f7fa fcb2 	bl	800d4c0 <Adc_Init>
	Crc_Init();
 8012b5c:	f7ff febe 	bl	80128dc <Crc_Init>
	Uart_Init();
 8012b60:	f7f1 f962 	bl	8003e28 <Uart_Init>
	Watchdog_Init();
 8012b64:	f000 faac 	bl	80130c0 <Watchdog_Init>
	MX_NVIC_Init();
 8012b68:	f000 f994 	bl	8012e94 <MX_NVIC_Init>
	TIM2->CCR1 = 0;
 8012b6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012b70:	2200      	movs	r2, #0
 8012b72:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = 0;
 8012b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012b78:	2200      	movs	r2, #0
 8012b7a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = 0;
 8012b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012b80:	2200      	movs	r2, #0
 8012b82:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR1 = 0;
 8012b84:	4b25      	ldr	r3, [pc, #148]	; (8012c1c <EcuM_DriverInit+0xfc>)
 8012b86:	2200      	movs	r2, #0
 8012b88:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8012b8a:	4b24      	ldr	r3, [pc, #144]	; (8012c1c <EcuM_DriverInit+0xfc>)
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 8012b90:	4b22      	ldr	r3, [pc, #136]	; (8012c1c <EcuM_DriverInit+0xfc>)
 8012b92:	2200      	movs	r2, #0
 8012b94:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 0;
 8012b96:	4b21      	ldr	r3, [pc, #132]	; (8012c1c <EcuM_DriverInit+0xfc>)
 8012b98:	2200      	movs	r2, #0
 8012b9a:	641a      	str	r2, [r3, #64]	; 0x40
	MPU_Region_InitTypeDef MPU_InitStruct;
	HAL_MPU_Disable();
 8012b9c:	f7f3 ffc6 	bl	8006b2c <HAL_MPU_Disable>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = FLASH_BASE;
 8012ba4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012ba8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8012baa:	2311      	movs	r3, #17
 8012bac:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 8012bae:	2305      	movs	r3, #5
 8012bb0:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8012bce:	2301      	movs	r3, #1
 8012bd0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20000000;
 8012bd2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8012bd6:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8012bd8:	230d      	movs	r3, #13
 8012bda:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8012bdc:	2303      	movs	r3, #3
 8012bde:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8012be0:	2301      	movs	r3, #1
 8012be2:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8012be4:	2301      	movs	r3, #1
 8012be6:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8012be8:	2301      	movs	r3, #1
 8012bea:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8012bec:	2301      	movs	r3, #1
 8012bee:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8012bfc:	463b      	mov	r3, r7
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7f3 ffcc 	bl	8006b9c <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8012c04:	2004      	movs	r0, #4
 8012c06:	f7f3 ffa9 	bl	8006b5c <HAL_MPU_Enable>
	EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 8012c0a:	4b05      	ldr	r3, [pc, #20]	; (8012c20 <EcuM_DriverInit+0x100>)
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8012c10:	2300      	movs	r3, #0
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3710      	adds	r7, #16
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
 8012c1a:	bf00      	nop
 8012c1c:	40000400 	.word	0x40000400
 8012c20:	20009418 	.word	0x20009418

08012c24 <EcuM_DriverDeInit>:
/***********************************************************************************
* Function: EcuM_DriverDeInit									   		           *
* Description: De-initialize the drivers.			 		                       *
************************************************************************************/
StdReturnType EcuM_DriverDeInit()
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	af00      	add	r7, sp, #0
	Adc_DeInit();
 8012c28:	f7fa fc40 	bl	800d4ac <Adc_DeInit>
	Tim_DeInit(TIMER_TWO);
 8012c2c:	2002      	movs	r0, #2
 8012c2e:	f7fb fa53 	bl	800e0d8 <Tim_DeInit>
	Tim_DeInit(TIMER_THREE);
 8012c32:	2003      	movs	r0, #3
 8012c34:	f7fb fa50 	bl	800e0d8 <Tim_DeInit>
	Tim_DeInit(TIMER_FOUR);
 8012c38:	2004      	movs	r0, #4
 8012c3a:	f7fb fa4d 	bl	800e0d8 <Tim_DeInit>
	Tim_DeInit(TIMER_FIVE);
 8012c3e:	2005      	movs	r0, #5
 8012c40:	f7fb fa4a 	bl	800e0d8 <Tim_DeInit>
	Uart_DeInit();
 8012c44:	f7f1 f91c 	bl	8003e80 <Uart_DeInit>
	Crc_DeInit();
 8012c48:	f7ff fe60 	bl	801290c <Crc_DeInit>
	I2c_DeInit(I2C_CHANNEL_ONE);
 8012c4c:	2001      	movs	r0, #1
 8012c4e:	f7f0 fec7 	bl	80039e0 <I2c_DeInit>
#if(CAN_SPI_COMMUNICATION_ENABLE == STD_ON)
	Spi_DeInit();
	Can_DeInit();
#endif
	SystemManager_DeInit();
 8012c52:	f000 f8e9 	bl	8012e28 <SystemManager_DeInit>
	return E_OK;
 8012c56:	2300      	movs	r3, #0
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <EcuM_MainFunction>:
/***********************************************************************************
* Function: EcuM_MainFunction									   		           *
* Description: Electronic control unit manager main function.			 		   *
************************************************************************************/
VOID EcuM_MainFunction()
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	af00      	add	r7, sp, #0
	switch(EcuM_BswState)
 8012c60:	4b12      	ldr	r3, [pc, #72]	; (8012cac <EcuM_MainFunction+0x50>)
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	2b03      	cmp	r3, #3
 8012c66:	d81d      	bhi.n	8012ca4 <EcuM_MainFunction+0x48>
 8012c68:	a201      	add	r2, pc, #4	; (adr r2, 8012c70 <EcuM_MainFunction+0x14>)
 8012c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c6e:	bf00      	nop
 8012c70:	08012c81 	.word	0x08012c81
 8012c74:	08012c8d 	.word	0x08012c8d
 8012c78:	08012c99 	.word	0x08012c99
 8012c7c:	08012c87 	.word	0x08012c87
	{
		case ECUM_INIT_STATE:
			EcuM_DriverInit();
 8012c80:	f7ff ff4e 	bl	8012b20 <EcuM_DriverInit>
			break;
 8012c84:	e00f      	b.n	8012ca6 <EcuM_MainFunction+0x4a>
		case ECUM_DEINIT_STATE:
			EcuM_DriverDeInit();
 8012c86:	f7ff ffcd 	bl	8012c24 <EcuM_DriverDeInit>
			break;
 8012c8a:	e00c      	b.n	8012ca6 <EcuM_MainFunction+0x4a>
		case ECUM_CHECKFORWAKEUP_STATE:
			EcuM_CheckForWakeupEvent();
 8012c8c:	f7ff fe9a 	bl	80129c4 <EcuM_CheckForWakeupEvent>
			EcuM_BswState = ECUM_PROCESSWAKEUP_STATE;
 8012c90:	4b06      	ldr	r3, [pc, #24]	; (8012cac <EcuM_MainFunction+0x50>)
 8012c92:	2202      	movs	r2, #2
 8012c94:	701a      	strb	r2, [r3, #0]
			break;
 8012c96:	e006      	b.n	8012ca6 <EcuM_MainFunction+0x4a>
		case ECUM_PROCESSWAKEUP_STATE:
			EcuM_ProcessWakeupEvent();
 8012c98:	f7ff ff02 	bl	8012aa0 <EcuM_ProcessWakeupEvent>
			EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 8012c9c:	4b03      	ldr	r3, [pc, #12]	; (8012cac <EcuM_MainFunction+0x50>)
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	701a      	strb	r2, [r3, #0]
			break;
 8012ca2:	e000      	b.n	8012ca6 <EcuM_MainFunction+0x4a>
		default:
			break;
 8012ca4:	bf00      	nop
	}
}
 8012ca6:	bf00      	nop
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop
 8012cac:	20009418 	.word	0x20009418

08012cb0 <SystemManager_ProcessFault>:
/***********************************************************************************
* Function: SystemManager_ProcessFault										       *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_ProcessFault()
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
	for(uint8 idx = STD_LOW ; idx < 49; idx++)
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	71fb      	strb	r3, [r7, #7]
 8012cba:	e0a2      	b.n	8012e02 <SystemManager_ProcessFault+0x152>
	{
		if(SystemManager_Fault[idx] != STD_LOW)
 8012cbc:	79fb      	ldrb	r3, [r7, #7]
 8012cbe:	4a55      	ldr	r2, [pc, #340]	; (8012e14 <SystemManager_ProcessFault+0x164>)
 8012cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	f000 8099 	beq.w	8012dfc <SystemManager_ProcessFault+0x14c>
		{
			if(idx == POWER_ON_RESET)
 8012cca:	79fb      	ldrb	r3, [r7, #7]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	f000 8095 	beq.w	8012dfc <SystemManager_ProcessFault+0x14c>
			{
				/* do nothing */
			}
			else if(idx == BROWN_OUT_RESET ||
 8012cd2:	79fb      	ldrb	r3, [r7, #7]
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	d014      	beq.n	8012d02 <SystemManager_ProcessFault+0x52>
 8012cd8:	79fb      	ldrb	r3, [r7, #7]
 8012cda:	2b04      	cmp	r3, #4
 8012cdc:	d011      	beq.n	8012d02 <SystemManager_ProcessFault+0x52>
					idx == LOW_POWER_RESET ||
 8012cde:	79fb      	ldrb	r3, [r7, #7]
 8012ce0:	2b06      	cmp	r3, #6
 8012ce2:	d00e      	beq.n	8012d02 <SystemManager_ProcessFault+0x52>
					idx == HARDWARE_RESET ||
 8012ce4:	79fb      	ldrb	r3, [r7, #7]
 8012ce6:	2b07      	cmp	r3, #7
 8012ce8:	d00b      	beq.n	8012d02 <SystemManager_ProcessFault+0x52>
					idx == FLASH_FAULT_RESET ||
 8012cea:	79fb      	ldrb	r3, [r7, #7]
 8012cec:	2b08      	cmp	r3, #8
 8012cee:	d008      	beq.n	8012d02 <SystemManager_ProcessFault+0x52>
					idx == NMI_RESET ||
 8012cf0:	79fb      	ldrb	r3, [r7, #7]
 8012cf2:	2b09      	cmp	r3, #9
 8012cf4:	d005      	beq.n	8012d02 <SystemManager_ProcessFault+0x52>
					idx == MEMORY_FAULT_RESET ||
 8012cf6:	79fb      	ldrb	r3, [r7, #7]
 8012cf8:	2b0a      	cmp	r3, #10
 8012cfa:	d002      	beq.n	8012d02 <SystemManager_ProcessFault+0x52>
					idx == USAGE_FAULT_RESET ||
 8012cfc:	79fb      	ldrb	r3, [r7, #7]
 8012cfe:	2b0b      	cmp	r3, #11
 8012d00:	d109      	bne.n	8012d16 <SystemManager_ProcessFault+0x66>
					idx == BUS_FAULT_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 8012d02:	79fb      	ldrb	r3, [r7, #7]
 8012d04:	4a43      	ldr	r2, [pc, #268]	; (8012e14 <SystemManager_ProcessFault+0x164>)
 8012d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d0a:	2b01      	cmp	r3, #1
 8012d0c:	d976      	bls.n	8012dfc <SystemManager_ProcessFault+0x14c>
				{
					Dem_ReceiveFault(HARDWARE_RESET_DTC_CODE);
 8012d0e:	2056      	movs	r0, #86	; 0x56
 8012d10:	f7f2 fe00 	bl	8005914 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 8012d14:	e072      	b.n	8012dfc <SystemManager_ProcessFault+0x14c>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == SOFTWARE_RESET ||
 8012d16:	79fb      	ldrb	r3, [r7, #7]
 8012d18:	2b02      	cmp	r3, #2
 8012d1a:	d008      	beq.n	8012d2e <SystemManager_ProcessFault+0x7e>
 8012d1c:	79fb      	ldrb	r3, [r7, #7]
 8012d1e:	2b03      	cmp	r3, #3
 8012d20:	d005      	beq.n	8012d2e <SystemManager_ProcessFault+0x7e>
					idx == WATCHDOG_RESET ||
 8012d22:	79fb      	ldrb	r3, [r7, #7]
 8012d24:	2b0c      	cmp	r3, #12
 8012d26:	d002      	beq.n	8012d2e <SystemManager_ProcessFault+0x7e>
					idx == STACK_OVERFLOW_RESET ||
 8012d28:	79fb      	ldrb	r3, [r7, #7]
 8012d2a:	2b0d      	cmp	r3, #13
 8012d2c:	d109      	bne.n	8012d42 <SystemManager_ProcessFault+0x92>
					idx == MALLOC_FAILED_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 8012d2e:	79fb      	ldrb	r3, [r7, #7]
 8012d30:	4a38      	ldr	r2, [pc, #224]	; (8012e14 <SystemManager_ProcessFault+0x164>)
 8012d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d36:	2b01      	cmp	r3, #1
 8012d38:	d960      	bls.n	8012dfc <SystemManager_ProcessFault+0x14c>
				{
					Dem_ReceiveFault(SOFTWARE_RESET_DTC_CODE);
 8012d3a:	2035      	movs	r0, #53	; 0x35
 8012d3c:	f7f2 fdea 	bl	8005914 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 8012d40:	e05c      	b.n	8012dfc <SystemManager_ProcessFault+0x14c>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == ADC_ERROR_INTERNAL ||
 8012d42:	79fb      	ldrb	r3, [r7, #7]
 8012d44:	2b0e      	cmp	r3, #14
 8012d46:	d050      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
 8012d48:	79fb      	ldrb	r3, [r7, #7]
 8012d4a:	2b0f      	cmp	r3, #15
 8012d4c:	d04d      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == ADC_ERROR_OVR ||
 8012d4e:	79fb      	ldrb	r3, [r7, #7]
 8012d50:	2b10      	cmp	r3, #16
 8012d52:	d04a      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == ADC_ERROR_DMA ||
 8012d54:	79fb      	ldrb	r3, [r7, #7]
 8012d56:	2b11      	cmp	r3, #17
 8012d58:	d047      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_PE ||
 8012d5a:	79fb      	ldrb	r3, [r7, #7]
 8012d5c:	2b12      	cmp	r3, #18
 8012d5e:	d044      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_NE ||
 8012d60:	79fb      	ldrb	r3, [r7, #7]
 8012d62:	2b13      	cmp	r3, #19
 8012d64:	d041      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_FE ||
 8012d66:	79fb      	ldrb	r3, [r7, #7]
 8012d68:	2b14      	cmp	r3, #20
 8012d6a:	d03e      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_ORE ||
 8012d6c:	79fb      	ldrb	r3, [r7, #7]
 8012d6e:	2b15      	cmp	r3, #21
 8012d70:	d03b      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_DMA ||
 8012d72:	79fb      	ldrb	r3, [r7, #7]
 8012d74:	2b16      	cmp	r3, #22
 8012d76:	d038      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == TIMER2_ERROR ||
 8012d78:	79fb      	ldrb	r3, [r7, #7]
 8012d7a:	2b17      	cmp	r3, #23
 8012d7c:	d035      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == TIMER3_ERROR ||
 8012d7e:	79fb      	ldrb	r3, [r7, #7]
 8012d80:	2b18      	cmp	r3, #24
 8012d82:	d032      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == TIMER4_ERROR ||
 8012d84:	79fb      	ldrb	r3, [r7, #7]
 8012d86:	2b19      	cmp	r3, #25
 8012d88:	d02f      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == TIMER5_ERROR ||
 8012d8a:	79fb      	ldrb	r3, [r7, #7]
 8012d8c:	2b21      	cmp	r3, #33	; 0x21
 8012d8e:	d02c      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == SPI_ERROR_OVR ||
					idx == SPI_ERROR_DMA ||
					idx == SPI_ERROR_FLAG ||
					idx == SPI_ERROR_ABORT ||
#endif
					idx == I2C_ERROR_BERR_ONE ||
 8012d90:	79fb      	ldrb	r3, [r7, #7]
 8012d92:	2b22      	cmp	r3, #34	; 0x22
 8012d94:	d029      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_ARLO_ONE ||
 8012d96:	79fb      	ldrb	r3, [r7, #7]
 8012d98:	2b23      	cmp	r3, #35	; 0x23
 8012d9a:	d026      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_AF_ONE ||
 8012d9c:	79fb      	ldrb	r3, [r7, #7]
 8012d9e:	2b24      	cmp	r3, #36	; 0x24
 8012da0:	d023      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_OVR_ONE ||
 8012da2:	79fb      	ldrb	r3, [r7, #7]
 8012da4:	2b25      	cmp	r3, #37	; 0x25
 8012da6:	d020      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_DMA_ONE ||
 8012da8:	79fb      	ldrb	r3, [r7, #7]
 8012daa:	2b26      	cmp	r3, #38	; 0x26
 8012dac:	d01d      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_TIMEOUT_ONE ||
 8012dae:	79fb      	ldrb	r3, [r7, #7]
 8012db0:	2b27      	cmp	r3, #39	; 0x27
 8012db2:	d01a      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_SIZE_ONE ||
 8012db4:	79fb      	ldrb	r3, [r7, #7]
 8012db6:	2b28      	cmp	r3, #40	; 0x28
 8012db8:	d017      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_DMA_PARAM_ONE ||
 8012dba:	79fb      	ldrb	r3, [r7, #7]
 8012dbc:	2b29      	cmp	r3, #41	; 0x29
 8012dbe:	d014      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_BERR_THREE ||
 8012dc0:	79fb      	ldrb	r3, [r7, #7]
 8012dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8012dc4:	d011      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_ARLO_THREE ||
 8012dc6:	79fb      	ldrb	r3, [r7, #7]
 8012dc8:	2b2b      	cmp	r3, #43	; 0x2b
 8012dca:	d00e      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_AF_THREE ||
 8012dcc:	79fb      	ldrb	r3, [r7, #7]
 8012dce:	2b2c      	cmp	r3, #44	; 0x2c
 8012dd0:	d00b      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_OVR_THREE ||
 8012dd2:	79fb      	ldrb	r3, [r7, #7]
 8012dd4:	2b2d      	cmp	r3, #45	; 0x2d
 8012dd6:	d008      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_DMA_THREE ||
 8012dd8:	79fb      	ldrb	r3, [r7, #7]
 8012dda:	2b2e      	cmp	r3, #46	; 0x2e
 8012ddc:	d005      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_TIMEOUT_THREE ||
 8012dde:	79fb      	ldrb	r3, [r7, #7]
 8012de0:	2b2f      	cmp	r3, #47	; 0x2f
 8012de2:	d002      	beq.n	8012dea <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_SIZE_THREE ||
 8012de4:	79fb      	ldrb	r3, [r7, #7]
 8012de6:	2b30      	cmp	r3, #48	; 0x30
 8012de8:	d108      	bne.n	8012dfc <SystemManager_ProcessFault+0x14c>
					idx == I2C_ERROR_DMA_PARAM_THREE)
			{
				if(SystemManager_Fault[idx] >= 2)
 8012dea:	79fb      	ldrb	r3, [r7, #7]
 8012dec:	4a09      	ldr	r2, [pc, #36]	; (8012e14 <SystemManager_ProcessFault+0x164>)
 8012dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012df2:	2b01      	cmp	r3, #1
 8012df4:	d902      	bls.n	8012dfc <SystemManager_ProcessFault+0x14c>
				{
					Dem_ReceiveFault(PERIPHERAL_ERROR_DTC_CODE);
 8012df6:	2099      	movs	r0, #153	; 0x99
 8012df8:	f7f2 fd8c 	bl	8005914 <Dem_ReceiveFault>
	for(uint8 idx = STD_LOW ; idx < 49; idx++)
 8012dfc:	79fb      	ldrb	r3, [r7, #7]
 8012dfe:	3301      	adds	r3, #1
 8012e00:	71fb      	strb	r3, [r7, #7]
 8012e02:	79fb      	ldrb	r3, [r7, #7]
 8012e04:	2b30      	cmp	r3, #48	; 0x30
 8012e06:	f67f af59 	bls.w	8012cbc <SystemManager_ProcessFault+0xc>
		else
		{
			/* do nothing */
		}
	}
}
 8012e0a:	bf00      	nop
 8012e0c:	bf00      	nop
 8012e0e:	3708      	adds	r7, #8
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}
 8012e14:	2000941c 	.word	0x2000941c

08012e18 <SystemManager_Init>:
/***********************************************************************************
* Function: SystemManager_Init													   *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_Init()
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	af00      	add	r7, sp, #0
	/* Perform system initialization sequence. */
	HAL_Init();
 8012e1c:	f7f2 ff2c 	bl	8005c78 <HAL_Init>
	SystemClock_Config();
 8012e20:	f000 f8dc 	bl	8012fdc <SystemClock_Config>
}
 8012e24:	bf00      	nop
 8012e26:	bd80      	pop	{r7, pc}

08012e28 <SystemManager_DeInit>:
/***********************************************************************************
* Function: SystemManager_DeInit												   *
* Description: De-initialize the system.  		   								   *
************************************************************************************/
VOID SystemManager_DeInit()
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	af00      	add	r7, sp, #0
	HAL_DeInit();
 8012e2c:	f7f2 ff46 	bl	8005cbc <HAL_DeInit>
}
 8012e30:	bf00      	nop
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <SystemManager_SetFault>:
/***********************************************************************************
* Function: SystemManager_SetFault										   		   *
* Description: Set the fault in the system.		 		   						   *
************************************************************************************/
StdReturnType SystemManager_SetFault(uint8 faultType)
{
 8012e34:	b480      	push	{r7}
 8012e36:	b085      	sub	sp, #20
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	71fb      	strb	r3, [r7, #7]
	/* Store the fault into the data type. */
	for(uint8 index = 0; index < 14; index++)
 8012e3e:	2300      	movs	r3, #0
 8012e40:	73fb      	strb	r3, [r7, #15]
 8012e42:	e00e      	b.n	8012e62 <SystemManager_SetFault+0x2e>
	{
		if(faultType == index)
 8012e44:	79fa      	ldrb	r2, [r7, #7]
 8012e46:	7bfb      	ldrb	r3, [r7, #15]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d107      	bne.n	8012e5c <SystemManager_SetFault+0x28>
		{
			SystemManager_Fault[index]++;
 8012e4c:	7bfb      	ldrb	r3, [r7, #15]
 8012e4e:	4a0a      	ldr	r2, [pc, #40]	; (8012e78 <SystemManager_SetFault+0x44>)
 8012e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012e54:	3201      	adds	r2, #1
 8012e56:	4908      	ldr	r1, [pc, #32]	; (8012e78 <SystemManager_SetFault+0x44>)
 8012e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8 index = 0; index < 14; index++)
 8012e5c:	7bfb      	ldrb	r3, [r7, #15]
 8012e5e:	3301      	adds	r3, #1
 8012e60:	73fb      	strb	r3, [r7, #15]
 8012e62:	7bfb      	ldrb	r3, [r7, #15]
 8012e64:	2b0d      	cmp	r3, #13
 8012e66:	d9ed      	bls.n	8012e44 <SystemManager_SetFault+0x10>
		else
		{
			/* do nothing */
		}
	}
	return E_OK;
 8012e68:	2300      	movs	r3, #0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3714      	adds	r7, #20
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr
 8012e76:	bf00      	nop
 8012e78:	2000941c 	.word	0x2000941c

08012e7c <SystemManager_MainFunction>:
/***********************************************************************************
* Function: SystemManager_MainFunction									   		   *
* Description: System main function.									 		   *
************************************************************************************/
VOID SystemManager_MainFunction()
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	af00      	add	r7, sp, #0
	SystemManager_ProcessFault();
 8012e80:	f7ff ff16 	bl	8012cb0 <SystemManager_ProcessFault>
}
 8012e84:	bf00      	nop
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <SystemManager_PerformReset>:
/***********************************************************************************
* Function: SystemManager_PerformReset									   		   *
* Description: Perform system reset.		 		   							   *
************************************************************************************/
VOID SystemManager_PerformReset()
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8012e8c:	f7f3 fe49 	bl	8006b22 <HAL_NVIC_SystemReset>
}
 8012e90:	bf00      	nop
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <MX_NVIC_Init>:
* Function: MX_NVIC_Init													   	   *
* Description: Initialize the nested vector interrupt controller with configured   *
* 			   values.		 		   											   *
************************************************************************************/
VOID MX_NVIC_Init(VOID)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	af00      	add	r7, sp, #0
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn, 10, 0);
 8012e98:	2200      	movs	r2, #0
 8012e9a:	210a      	movs	r1, #10
 8012e9c:	2032      	movs	r0, #50	; 0x32
 8012e9e:	f7f3 fe08 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8012ea2:	2032      	movs	r0, #50	; 0x32
 8012ea4:	f7f3 fe21 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* WWDG_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(WWDG_IRQn, 15, 0);
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	210f      	movs	r1, #15
 8012eac:	2000      	movs	r0, #0
 8012eae:	f7f3 fe00 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(WWDG_IRQn);
 8012eb2:	2000      	movs	r0, #0
 8012eb4:	f7f3 fe19 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* FLASH_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FLASH_IRQn, 15, 0);
 8012eb8:	2200      	movs	r2, #0
 8012eba:	210f      	movs	r1, #15
 8012ebc:	2004      	movs	r0, #4
 8012ebe:	f7f3 fdf8 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8012ec2:	2004      	movs	r0, #4
 8012ec4:	f7f3 fe11 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 15, 0);
 8012ec8:	2200      	movs	r2, #0
 8012eca:	210f      	movs	r1, #15
 8012ecc:	2005      	movs	r0, #5
 8012ece:	f7f3 fdf0 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 8012ed2:	2005      	movs	r0, #5
 8012ed4:	f7f3 fe09 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* PVD_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PVD_IRQn, 15, 0);
 8012ed8:	2200      	movs	r2, #0
 8012eda:	210f      	movs	r1, #15
 8012edc:	2001      	movs	r0, #1
 8012ede:	f7f3 fde8 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 8012ee2:	2001      	movs	r0, #1
 8012ee4:	f7f3 fe01 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8012ee8:	2200      	movs	r2, #0
 8012eea:	210f      	movs	r1, #15
 8012eec:	2012      	movs	r0, #18
 8012eee:	f7f3 fde0 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8012ef2:	2012      	movs	r0, #18
 8012ef4:	f7f3 fdf9 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8012ef8:	2200      	movs	r2, #0
 8012efa:	210f      	movs	r1, #15
 8012efc:	201c      	movs	r0, #28
 8012efe:	f7f3 fdd8 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8012f02:	201c      	movs	r0, #28
 8012f04:	f7f3 fdf1 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 8012f08:	2200      	movs	r2, #0
 8012f0a:	210f      	movs	r1, #15
 8012f0c:	201d      	movs	r0, #29
 8012f0e:	f7f3 fdd0 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8012f12:	201d      	movs	r0, #29
 8012f14:	f7f3 fde9 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 8012f18:	2200      	movs	r2, #0
 8012f1a:	210f      	movs	r1, #15
 8012f1c:	201e      	movs	r0, #30
 8012f1e:	f7f3 fdc8 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8012f22:	201e      	movs	r0, #30
 8012f24:	f7f3 fde1 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8012f28:	2200      	movs	r2, #0
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	2025      	movs	r0, #37	; 0x25
 8012f2e:	f7f3 fdc0 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8012f32:	2025      	movs	r0, #37	; 0x25
 8012f34:	f7f3 fdd9 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* SPI3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SPI3_IRQn, 15, 0);
 8012f38:	2200      	movs	r2, #0
 8012f3a:	210f      	movs	r1, #15
 8012f3c:	2033      	movs	r0, #51	; 0x33
 8012f3e:	f7f3 fdb8 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8012f42:	2033      	movs	r0, #51	; 0x33
 8012f44:	f7f3 fdd1 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* I2C3_EV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C3_EV_IRQn, 15, 0);
 8012f48:	2200      	movs	r2, #0
 8012f4a:	210f      	movs	r1, #15
 8012f4c:	2048      	movs	r0, #72	; 0x48
 8012f4e:	f7f3 fdb0 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8012f52:	2048      	movs	r0, #72	; 0x48
 8012f54:	f7f3 fdc9 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* I2C3_ER_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C3_ER_IRQn, 15, 0);
 8012f58:	2200      	movs	r2, #0
 8012f5a:	210f      	movs	r1, #15
 8012f5c:	2049      	movs	r0, #73	; 0x49
 8012f5e:	f7f3 fda8 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8012f62:	2049      	movs	r0, #73	; 0x49
 8012f64:	f7f3 fdc1 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 15, 0);
 8012f68:	2200      	movs	r2, #0
 8012f6a:	210f      	movs	r1, #15
 8012f6c:	2051      	movs	r0, #81	; 0x51
 8012f6e:	f7f3 fda0 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 8012f72:	2051      	movs	r0, #81	; 0x51
 8012f74:	f7f3 fdb9 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 10, 0);
 8012f78:	2200      	movs	r2, #0
 8012f7a:	210a      	movs	r1, #10
 8012f7c:	201a      	movs	r0, #26
 8012f7e:	f7f3 fd98 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8012f82:	201a      	movs	r0, #26
 8012f84:	f7f3 fdb1 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 0);
 8012f88:	2200      	movs	r2, #0
 8012f8a:	210a      	movs	r1, #10
 8012f8c:	2038      	movs	r0, #56	; 0x38
 8012f8e:	f7f3 fd90 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8012f92:	2038      	movs	r0, #56	; 0x38
 8012f94:	f7f3 fda9 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 10, 0);
 8012f98:	2200      	movs	r2, #0
 8012f9a:	210a      	movs	r1, #10
 8012f9c:	200d      	movs	r0, #13
 8012f9e:	f7f3 fd88 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8012fa2:	200d      	movs	r0, #13
 8012fa4:	f7f3 fda1 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 10, 0);
 8012fa8:	2200      	movs	r2, #0
 8012faa:	210a      	movs	r1, #10
 8012fac:	200f      	movs	r0, #15
 8012fae:	f7f3 fd80 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8012fb2:	200f      	movs	r0, #15
 8012fb4:	f7f3 fd99 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* I2C1_ER_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 10, 0);
 8012fb8:	2200      	movs	r2, #0
 8012fba:	210a      	movs	r1, #10
 8012fbc:	2020      	movs	r0, #32
 8012fbe:	f7f3 fd78 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8012fc2:	2020      	movs	r0, #32
 8012fc4:	f7f3 fd91 	bl	8006aea <HAL_NVIC_EnableIRQ>
	/* I2C1_EV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8012fc8:	2200      	movs	r2, #0
 8012fca:	210a      	movs	r1, #10
 8012fcc:	201f      	movs	r0, #31
 8012fce:	f7f3 fd70 	bl	8006ab2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8012fd2:	201f      	movs	r0, #31
 8012fd4:	f7f3 fd89 	bl	8006aea <HAL_NVIC_EnableIRQ>
}
 8012fd8:	bf00      	nop
 8012fda:	bd80      	pop	{r7, pc}

08012fdc <SystemClock_Config>:
/***********************************************************************************
* Function: SystemClock_Config													   *
* Description: Initialize the system clock.		 		   						   *
************************************************************************************/
VOID SystemClock_Config(VOID)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b094      	sub	sp, #80	; 0x50
 8012fe0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012fe2:	f107 0320 	add.w	r3, r7, #32
 8012fe6:	2230      	movs	r2, #48	; 0x30
 8012fe8:	2100      	movs	r1, #0
 8012fea:	4618      	mov	r0, r3
 8012fec:	f000 f8c8 	bl	8013180 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012ff0:	f107 030c 	add.w	r3, r7, #12
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	601a      	str	r2, [r3, #0]
 8012ff8:	605a      	str	r2, [r3, #4]
 8012ffa:	609a      	str	r2, [r3, #8]
 8012ffc:	60da      	str	r2, [r3, #12]
 8012ffe:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 8013000:	2300      	movs	r3, #0
 8013002:	60bb      	str	r3, [r7, #8]
 8013004:	4b28      	ldr	r3, [pc, #160]	; (80130a8 <SystemClock_Config+0xcc>)
 8013006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013008:	4a27      	ldr	r2, [pc, #156]	; (80130a8 <SystemClock_Config+0xcc>)
 801300a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801300e:	6413      	str	r3, [r2, #64]	; 0x40
 8013010:	4b25      	ldr	r3, [pc, #148]	; (80130a8 <SystemClock_Config+0xcc>)
 8013012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013018:	60bb      	str	r3, [r7, #8]
 801301a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801301c:	2300      	movs	r3, #0
 801301e:	607b      	str	r3, [r7, #4]
 8013020:	4b22      	ldr	r3, [pc, #136]	; (80130ac <SystemClock_Config+0xd0>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4a21      	ldr	r2, [pc, #132]	; (80130ac <SystemClock_Config+0xd0>)
 8013026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801302a:	6013      	str	r3, [r2, #0]
 801302c:	4b1f      	ldr	r3, [pc, #124]	; (80130ac <SystemClock_Config+0xd0>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013034:	607b      	str	r3, [r7, #4]
 8013036:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8013038:	2309      	movs	r3, #9
 801303a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801303c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013040:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8013042:	2301      	movs	r3, #1
 8013044:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013046:	2302      	movs	r3, #2
 8013048:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801304a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801304e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8013050:	2304      	movs	r3, #4
 8013052:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8013054:	2364      	movs	r3, #100	; 0x64
 8013056:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013058:	2302      	movs	r3, #2
 801305a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 801305c:	2304      	movs	r3, #4
 801305e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013060:	f107 0320 	add.w	r3, r7, #32
 8013064:	4618      	mov	r0, r3
 8013066:	f7f6 fee5 	bl	8009e34 <HAL_RCC_OscConfig>
 801306a:	4603      	mov	r3, r0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d001      	beq.n	8013074 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8013070:	f000 f81e 	bl	80130b0 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8013074:	230f      	movs	r3, #15
 8013076:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013078:	2302      	movs	r3, #2
 801307a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801307c:	2300      	movs	r3, #0
 801307e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8013080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013084:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8013086:	2300      	movs	r3, #0
 8013088:	61fb      	str	r3, [r7, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801308a:	f107 030c 	add.w	r3, r7, #12
 801308e:	2103      	movs	r1, #3
 8013090:	4618      	mov	r0, r3
 8013092:	f7f7 f947 	bl	800a324 <HAL_RCC_ClockConfig>
 8013096:	4603      	mov	r3, r0
 8013098:	2b00      	cmp	r3, #0
 801309a:	d001      	beq.n	80130a0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 801309c:	f000 f808 	bl	80130b0 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
}
 80130a0:	bf00      	nop
 80130a2:	3750      	adds	r7, #80	; 0x50
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	40023800 	.word	0x40023800
 80130ac:	40007000 	.word	0x40007000

080130b0 <Error_Handler>:
/***********************************************************************************
* Function: Error_Handler													   	   *
* Description: Perform system reset in case of system fault.			 		   *
************************************************************************************/
VOID Error_Handler(VOID)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80130b4:	b672      	cpsid	i
}
 80130b6:	bf00      	nop
	__disable_irq();
	SystemManager_PerformReset();
 80130b8:	f7ff fee6 	bl	8012e88 <SystemManager_PerformReset>
	while (1)
 80130bc:	e7fe      	b.n	80130bc <Error_Handler+0xc>
	...

080130c0 <Watchdog_Init>:
/***********************************************************************************
* Function: Watchdog_Init									   		       		   *
* Description: Peripheral initialization.							 		   	   *
************************************************************************************/
StdReturnType Watchdog_Init()
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 80130c4:	4b09      	ldr	r3, [pc, #36]	; (80130ec <Watchdog_Init+0x2c>)
 80130c6:	4a0a      	ldr	r2, [pc, #40]	; (80130f0 <Watchdog_Init+0x30>)
 80130c8:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 80130ca:	4b08      	ldr	r3, [pc, #32]	; (80130ec <Watchdog_Init+0x2c>)
 80130cc:	2205      	movs	r2, #5
 80130ce:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 63;
 80130d0:	4b06      	ldr	r3, [pc, #24]	; (80130ec <Watchdog_Init+0x2c>)
 80130d2:	223f      	movs	r2, #63	; 0x3f
 80130d4:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80130d6:	4805      	ldr	r0, [pc, #20]	; (80130ec <Watchdog_Init+0x2c>)
 80130d8:	f7f6 fe3f 	bl	8009d5a <HAL_IWDG_Init>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d001      	beq.n	80130e6 <Watchdog_Init+0x26>
	{
		Error_Handler();
 80130e2:	f7ff ffe5 	bl	80130b0 <Error_Handler>
	}
	return E_OK;
 80130e6:	2300      	movs	r3, #0
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	2000047c 	.word	0x2000047c
 80130f0:	40003000 	.word	0x40003000

080130f4 <Watchdog_MainFunction>:
/***********************************************************************************
* Function: Watchdog_MainFunction									   		       *
* Description: Peripheral main function.							 		       *
************************************************************************************/
VOID Watchdog_MainFunction()
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 80130f8:	4802      	ldr	r0, [pc, #8]	; (8013104 <Watchdog_MainFunction+0x10>)
 80130fa:	f7f6 fe70 	bl	8009dde <HAL_IWDG_Refresh>
}
 80130fe:	bf00      	nop
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	2000047c 	.word	0x2000047c

08013108 <atoi>:
 8013108:	220a      	movs	r2, #10
 801310a:	2100      	movs	r1, #0
 801310c:	f000 ba3c 	b.w	8013588 <strtol>

08013110 <__errno>:
 8013110:	4b01      	ldr	r3, [pc, #4]	; (8013118 <__errno+0x8>)
 8013112:	6818      	ldr	r0, [r3, #0]
 8013114:	4770      	bx	lr
 8013116:	bf00      	nop
 8013118:	2000005c 	.word	0x2000005c

0801311c <__libc_init_array>:
 801311c:	b570      	push	{r4, r5, r6, lr}
 801311e:	4d0d      	ldr	r5, [pc, #52]	; (8013154 <__libc_init_array+0x38>)
 8013120:	4c0d      	ldr	r4, [pc, #52]	; (8013158 <__libc_init_array+0x3c>)
 8013122:	1b64      	subs	r4, r4, r5
 8013124:	10a4      	asrs	r4, r4, #2
 8013126:	2600      	movs	r6, #0
 8013128:	42a6      	cmp	r6, r4
 801312a:	d109      	bne.n	8013140 <__libc_init_array+0x24>
 801312c:	4d0b      	ldr	r5, [pc, #44]	; (801315c <__libc_init_array+0x40>)
 801312e:	4c0c      	ldr	r4, [pc, #48]	; (8013160 <__libc_init_array+0x44>)
 8013130:	f000 fd82 	bl	8013c38 <_init>
 8013134:	1b64      	subs	r4, r4, r5
 8013136:	10a4      	asrs	r4, r4, #2
 8013138:	2600      	movs	r6, #0
 801313a:	42a6      	cmp	r6, r4
 801313c:	d105      	bne.n	801314a <__libc_init_array+0x2e>
 801313e:	bd70      	pop	{r4, r5, r6, pc}
 8013140:	f855 3b04 	ldr.w	r3, [r5], #4
 8013144:	4798      	blx	r3
 8013146:	3601      	adds	r6, #1
 8013148:	e7ee      	b.n	8013128 <__libc_init_array+0xc>
 801314a:	f855 3b04 	ldr.w	r3, [r5], #4
 801314e:	4798      	blx	r3
 8013150:	3601      	adds	r6, #1
 8013152:	e7f2      	b.n	801313a <__libc_init_array+0x1e>
 8013154:	08014454 	.word	0x08014454
 8013158:	08014454 	.word	0x08014454
 801315c:	08014454 	.word	0x08014454
 8013160:	08014458 	.word	0x08014458

08013164 <memcpy>:
 8013164:	440a      	add	r2, r1
 8013166:	4291      	cmp	r1, r2
 8013168:	f100 33ff 	add.w	r3, r0, #4294967295
 801316c:	d100      	bne.n	8013170 <memcpy+0xc>
 801316e:	4770      	bx	lr
 8013170:	b510      	push	{r4, lr}
 8013172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013176:	f803 4f01 	strb.w	r4, [r3, #1]!
 801317a:	4291      	cmp	r1, r2
 801317c:	d1f9      	bne.n	8013172 <memcpy+0xe>
 801317e:	bd10      	pop	{r4, pc}

08013180 <memset>:
 8013180:	4402      	add	r2, r0
 8013182:	4603      	mov	r3, r0
 8013184:	4293      	cmp	r3, r2
 8013186:	d100      	bne.n	801318a <memset+0xa>
 8013188:	4770      	bx	lr
 801318a:	f803 1b01 	strb.w	r1, [r3], #1
 801318e:	e7f9      	b.n	8013184 <memset+0x4>

08013190 <_free_r>:
 8013190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013192:	2900      	cmp	r1, #0
 8013194:	d044      	beq.n	8013220 <_free_r+0x90>
 8013196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801319a:	9001      	str	r0, [sp, #4]
 801319c:	2b00      	cmp	r3, #0
 801319e:	f1a1 0404 	sub.w	r4, r1, #4
 80131a2:	bfb8      	it	lt
 80131a4:	18e4      	addlt	r4, r4, r3
 80131a6:	f000 f9f9 	bl	801359c <__malloc_lock>
 80131aa:	4a1e      	ldr	r2, [pc, #120]	; (8013224 <_free_r+0x94>)
 80131ac:	9801      	ldr	r0, [sp, #4]
 80131ae:	6813      	ldr	r3, [r2, #0]
 80131b0:	b933      	cbnz	r3, 80131c0 <_free_r+0x30>
 80131b2:	6063      	str	r3, [r4, #4]
 80131b4:	6014      	str	r4, [r2, #0]
 80131b6:	b003      	add	sp, #12
 80131b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131bc:	f000 b9f4 	b.w	80135a8 <__malloc_unlock>
 80131c0:	42a3      	cmp	r3, r4
 80131c2:	d908      	bls.n	80131d6 <_free_r+0x46>
 80131c4:	6825      	ldr	r5, [r4, #0]
 80131c6:	1961      	adds	r1, r4, r5
 80131c8:	428b      	cmp	r3, r1
 80131ca:	bf01      	itttt	eq
 80131cc:	6819      	ldreq	r1, [r3, #0]
 80131ce:	685b      	ldreq	r3, [r3, #4]
 80131d0:	1949      	addeq	r1, r1, r5
 80131d2:	6021      	streq	r1, [r4, #0]
 80131d4:	e7ed      	b.n	80131b2 <_free_r+0x22>
 80131d6:	461a      	mov	r2, r3
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	b10b      	cbz	r3, 80131e0 <_free_r+0x50>
 80131dc:	42a3      	cmp	r3, r4
 80131de:	d9fa      	bls.n	80131d6 <_free_r+0x46>
 80131e0:	6811      	ldr	r1, [r2, #0]
 80131e2:	1855      	adds	r5, r2, r1
 80131e4:	42a5      	cmp	r5, r4
 80131e6:	d10b      	bne.n	8013200 <_free_r+0x70>
 80131e8:	6824      	ldr	r4, [r4, #0]
 80131ea:	4421      	add	r1, r4
 80131ec:	1854      	adds	r4, r2, r1
 80131ee:	42a3      	cmp	r3, r4
 80131f0:	6011      	str	r1, [r2, #0]
 80131f2:	d1e0      	bne.n	80131b6 <_free_r+0x26>
 80131f4:	681c      	ldr	r4, [r3, #0]
 80131f6:	685b      	ldr	r3, [r3, #4]
 80131f8:	6053      	str	r3, [r2, #4]
 80131fa:	4421      	add	r1, r4
 80131fc:	6011      	str	r1, [r2, #0]
 80131fe:	e7da      	b.n	80131b6 <_free_r+0x26>
 8013200:	d902      	bls.n	8013208 <_free_r+0x78>
 8013202:	230c      	movs	r3, #12
 8013204:	6003      	str	r3, [r0, #0]
 8013206:	e7d6      	b.n	80131b6 <_free_r+0x26>
 8013208:	6825      	ldr	r5, [r4, #0]
 801320a:	1961      	adds	r1, r4, r5
 801320c:	428b      	cmp	r3, r1
 801320e:	bf04      	itt	eq
 8013210:	6819      	ldreq	r1, [r3, #0]
 8013212:	685b      	ldreq	r3, [r3, #4]
 8013214:	6063      	str	r3, [r4, #4]
 8013216:	bf04      	itt	eq
 8013218:	1949      	addeq	r1, r1, r5
 801321a:	6021      	streq	r1, [r4, #0]
 801321c:	6054      	str	r4, [r2, #4]
 801321e:	e7ca      	b.n	80131b6 <_free_r+0x26>
 8013220:	b003      	add	sp, #12
 8013222:	bd30      	pop	{r4, r5, pc}
 8013224:	200094e0 	.word	0x200094e0

08013228 <sbrk_aligned>:
 8013228:	b570      	push	{r4, r5, r6, lr}
 801322a:	4e0e      	ldr	r6, [pc, #56]	; (8013264 <sbrk_aligned+0x3c>)
 801322c:	460c      	mov	r4, r1
 801322e:	6831      	ldr	r1, [r6, #0]
 8013230:	4605      	mov	r5, r0
 8013232:	b911      	cbnz	r1, 801323a <sbrk_aligned+0x12>
 8013234:	f000 f8f6 	bl	8013424 <_sbrk_r>
 8013238:	6030      	str	r0, [r6, #0]
 801323a:	4621      	mov	r1, r4
 801323c:	4628      	mov	r0, r5
 801323e:	f000 f8f1 	bl	8013424 <_sbrk_r>
 8013242:	1c43      	adds	r3, r0, #1
 8013244:	d00a      	beq.n	801325c <sbrk_aligned+0x34>
 8013246:	1cc4      	adds	r4, r0, #3
 8013248:	f024 0403 	bic.w	r4, r4, #3
 801324c:	42a0      	cmp	r0, r4
 801324e:	d007      	beq.n	8013260 <sbrk_aligned+0x38>
 8013250:	1a21      	subs	r1, r4, r0
 8013252:	4628      	mov	r0, r5
 8013254:	f000 f8e6 	bl	8013424 <_sbrk_r>
 8013258:	3001      	adds	r0, #1
 801325a:	d101      	bne.n	8013260 <sbrk_aligned+0x38>
 801325c:	f04f 34ff 	mov.w	r4, #4294967295
 8013260:	4620      	mov	r0, r4
 8013262:	bd70      	pop	{r4, r5, r6, pc}
 8013264:	200094e4 	.word	0x200094e4

08013268 <_malloc_r>:
 8013268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801326c:	1ccd      	adds	r5, r1, #3
 801326e:	f025 0503 	bic.w	r5, r5, #3
 8013272:	3508      	adds	r5, #8
 8013274:	2d0c      	cmp	r5, #12
 8013276:	bf38      	it	cc
 8013278:	250c      	movcc	r5, #12
 801327a:	2d00      	cmp	r5, #0
 801327c:	4607      	mov	r7, r0
 801327e:	db01      	blt.n	8013284 <_malloc_r+0x1c>
 8013280:	42a9      	cmp	r1, r5
 8013282:	d905      	bls.n	8013290 <_malloc_r+0x28>
 8013284:	230c      	movs	r3, #12
 8013286:	603b      	str	r3, [r7, #0]
 8013288:	2600      	movs	r6, #0
 801328a:	4630      	mov	r0, r6
 801328c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013290:	4e2e      	ldr	r6, [pc, #184]	; (801334c <_malloc_r+0xe4>)
 8013292:	f000 f983 	bl	801359c <__malloc_lock>
 8013296:	6833      	ldr	r3, [r6, #0]
 8013298:	461c      	mov	r4, r3
 801329a:	bb34      	cbnz	r4, 80132ea <_malloc_r+0x82>
 801329c:	4629      	mov	r1, r5
 801329e:	4638      	mov	r0, r7
 80132a0:	f7ff ffc2 	bl	8013228 <sbrk_aligned>
 80132a4:	1c43      	adds	r3, r0, #1
 80132a6:	4604      	mov	r4, r0
 80132a8:	d14d      	bne.n	8013346 <_malloc_r+0xde>
 80132aa:	6834      	ldr	r4, [r6, #0]
 80132ac:	4626      	mov	r6, r4
 80132ae:	2e00      	cmp	r6, #0
 80132b0:	d140      	bne.n	8013334 <_malloc_r+0xcc>
 80132b2:	6823      	ldr	r3, [r4, #0]
 80132b4:	4631      	mov	r1, r6
 80132b6:	4638      	mov	r0, r7
 80132b8:	eb04 0803 	add.w	r8, r4, r3
 80132bc:	f000 f8b2 	bl	8013424 <_sbrk_r>
 80132c0:	4580      	cmp	r8, r0
 80132c2:	d13a      	bne.n	801333a <_malloc_r+0xd2>
 80132c4:	6821      	ldr	r1, [r4, #0]
 80132c6:	3503      	adds	r5, #3
 80132c8:	1a6d      	subs	r5, r5, r1
 80132ca:	f025 0503 	bic.w	r5, r5, #3
 80132ce:	3508      	adds	r5, #8
 80132d0:	2d0c      	cmp	r5, #12
 80132d2:	bf38      	it	cc
 80132d4:	250c      	movcc	r5, #12
 80132d6:	4629      	mov	r1, r5
 80132d8:	4638      	mov	r0, r7
 80132da:	f7ff ffa5 	bl	8013228 <sbrk_aligned>
 80132de:	3001      	adds	r0, #1
 80132e0:	d02b      	beq.n	801333a <_malloc_r+0xd2>
 80132e2:	6823      	ldr	r3, [r4, #0]
 80132e4:	442b      	add	r3, r5
 80132e6:	6023      	str	r3, [r4, #0]
 80132e8:	e00e      	b.n	8013308 <_malloc_r+0xa0>
 80132ea:	6822      	ldr	r2, [r4, #0]
 80132ec:	1b52      	subs	r2, r2, r5
 80132ee:	d41e      	bmi.n	801332e <_malloc_r+0xc6>
 80132f0:	2a0b      	cmp	r2, #11
 80132f2:	d916      	bls.n	8013322 <_malloc_r+0xba>
 80132f4:	1961      	adds	r1, r4, r5
 80132f6:	42a3      	cmp	r3, r4
 80132f8:	6025      	str	r5, [r4, #0]
 80132fa:	bf18      	it	ne
 80132fc:	6059      	strne	r1, [r3, #4]
 80132fe:	6863      	ldr	r3, [r4, #4]
 8013300:	bf08      	it	eq
 8013302:	6031      	streq	r1, [r6, #0]
 8013304:	5162      	str	r2, [r4, r5]
 8013306:	604b      	str	r3, [r1, #4]
 8013308:	4638      	mov	r0, r7
 801330a:	f104 060b 	add.w	r6, r4, #11
 801330e:	f000 f94b 	bl	80135a8 <__malloc_unlock>
 8013312:	f026 0607 	bic.w	r6, r6, #7
 8013316:	1d23      	adds	r3, r4, #4
 8013318:	1af2      	subs	r2, r6, r3
 801331a:	d0b6      	beq.n	801328a <_malloc_r+0x22>
 801331c:	1b9b      	subs	r3, r3, r6
 801331e:	50a3      	str	r3, [r4, r2]
 8013320:	e7b3      	b.n	801328a <_malloc_r+0x22>
 8013322:	6862      	ldr	r2, [r4, #4]
 8013324:	42a3      	cmp	r3, r4
 8013326:	bf0c      	ite	eq
 8013328:	6032      	streq	r2, [r6, #0]
 801332a:	605a      	strne	r2, [r3, #4]
 801332c:	e7ec      	b.n	8013308 <_malloc_r+0xa0>
 801332e:	4623      	mov	r3, r4
 8013330:	6864      	ldr	r4, [r4, #4]
 8013332:	e7b2      	b.n	801329a <_malloc_r+0x32>
 8013334:	4634      	mov	r4, r6
 8013336:	6876      	ldr	r6, [r6, #4]
 8013338:	e7b9      	b.n	80132ae <_malloc_r+0x46>
 801333a:	230c      	movs	r3, #12
 801333c:	603b      	str	r3, [r7, #0]
 801333e:	4638      	mov	r0, r7
 8013340:	f000 f932 	bl	80135a8 <__malloc_unlock>
 8013344:	e7a1      	b.n	801328a <_malloc_r+0x22>
 8013346:	6025      	str	r5, [r4, #0]
 8013348:	e7de      	b.n	8013308 <_malloc_r+0xa0>
 801334a:	bf00      	nop
 801334c:	200094e0 	.word	0x200094e0

08013350 <cleanup_glue>:
 8013350:	b538      	push	{r3, r4, r5, lr}
 8013352:	460c      	mov	r4, r1
 8013354:	6809      	ldr	r1, [r1, #0]
 8013356:	4605      	mov	r5, r0
 8013358:	b109      	cbz	r1, 801335e <cleanup_glue+0xe>
 801335a:	f7ff fff9 	bl	8013350 <cleanup_glue>
 801335e:	4621      	mov	r1, r4
 8013360:	4628      	mov	r0, r5
 8013362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013366:	f7ff bf13 	b.w	8013190 <_free_r>
	...

0801336c <_reclaim_reent>:
 801336c:	4b2c      	ldr	r3, [pc, #176]	; (8013420 <_reclaim_reent+0xb4>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4283      	cmp	r3, r0
 8013372:	b570      	push	{r4, r5, r6, lr}
 8013374:	4604      	mov	r4, r0
 8013376:	d051      	beq.n	801341c <_reclaim_reent+0xb0>
 8013378:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801337a:	b143      	cbz	r3, 801338e <_reclaim_reent+0x22>
 801337c:	68db      	ldr	r3, [r3, #12]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d14a      	bne.n	8013418 <_reclaim_reent+0xac>
 8013382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013384:	6819      	ldr	r1, [r3, #0]
 8013386:	b111      	cbz	r1, 801338e <_reclaim_reent+0x22>
 8013388:	4620      	mov	r0, r4
 801338a:	f7ff ff01 	bl	8013190 <_free_r>
 801338e:	6961      	ldr	r1, [r4, #20]
 8013390:	b111      	cbz	r1, 8013398 <_reclaim_reent+0x2c>
 8013392:	4620      	mov	r0, r4
 8013394:	f7ff fefc 	bl	8013190 <_free_r>
 8013398:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801339a:	b111      	cbz	r1, 80133a2 <_reclaim_reent+0x36>
 801339c:	4620      	mov	r0, r4
 801339e:	f7ff fef7 	bl	8013190 <_free_r>
 80133a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80133a4:	b111      	cbz	r1, 80133ac <_reclaim_reent+0x40>
 80133a6:	4620      	mov	r0, r4
 80133a8:	f7ff fef2 	bl	8013190 <_free_r>
 80133ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80133ae:	b111      	cbz	r1, 80133b6 <_reclaim_reent+0x4a>
 80133b0:	4620      	mov	r0, r4
 80133b2:	f7ff feed 	bl	8013190 <_free_r>
 80133b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80133b8:	b111      	cbz	r1, 80133c0 <_reclaim_reent+0x54>
 80133ba:	4620      	mov	r0, r4
 80133bc:	f7ff fee8 	bl	8013190 <_free_r>
 80133c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80133c2:	b111      	cbz	r1, 80133ca <_reclaim_reent+0x5e>
 80133c4:	4620      	mov	r0, r4
 80133c6:	f7ff fee3 	bl	8013190 <_free_r>
 80133ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80133cc:	b111      	cbz	r1, 80133d4 <_reclaim_reent+0x68>
 80133ce:	4620      	mov	r0, r4
 80133d0:	f7ff fede 	bl	8013190 <_free_r>
 80133d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133d6:	b111      	cbz	r1, 80133de <_reclaim_reent+0x72>
 80133d8:	4620      	mov	r0, r4
 80133da:	f7ff fed9 	bl	8013190 <_free_r>
 80133de:	69a3      	ldr	r3, [r4, #24]
 80133e0:	b1e3      	cbz	r3, 801341c <_reclaim_reent+0xb0>
 80133e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80133e4:	4620      	mov	r0, r4
 80133e6:	4798      	blx	r3
 80133e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80133ea:	b1b9      	cbz	r1, 801341c <_reclaim_reent+0xb0>
 80133ec:	4620      	mov	r0, r4
 80133ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133f2:	f7ff bfad 	b.w	8013350 <cleanup_glue>
 80133f6:	5949      	ldr	r1, [r1, r5]
 80133f8:	b941      	cbnz	r1, 801340c <_reclaim_reent+0xa0>
 80133fa:	3504      	adds	r5, #4
 80133fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133fe:	2d80      	cmp	r5, #128	; 0x80
 8013400:	68d9      	ldr	r1, [r3, #12]
 8013402:	d1f8      	bne.n	80133f6 <_reclaim_reent+0x8a>
 8013404:	4620      	mov	r0, r4
 8013406:	f7ff fec3 	bl	8013190 <_free_r>
 801340a:	e7ba      	b.n	8013382 <_reclaim_reent+0x16>
 801340c:	680e      	ldr	r6, [r1, #0]
 801340e:	4620      	mov	r0, r4
 8013410:	f7ff febe 	bl	8013190 <_free_r>
 8013414:	4631      	mov	r1, r6
 8013416:	e7ef      	b.n	80133f8 <_reclaim_reent+0x8c>
 8013418:	2500      	movs	r5, #0
 801341a:	e7ef      	b.n	80133fc <_reclaim_reent+0x90>
 801341c:	bd70      	pop	{r4, r5, r6, pc}
 801341e:	bf00      	nop
 8013420:	2000005c 	.word	0x2000005c

08013424 <_sbrk_r>:
 8013424:	b538      	push	{r3, r4, r5, lr}
 8013426:	4d06      	ldr	r5, [pc, #24]	; (8013440 <_sbrk_r+0x1c>)
 8013428:	2300      	movs	r3, #0
 801342a:	4604      	mov	r4, r0
 801342c:	4608      	mov	r0, r1
 801342e:	602b      	str	r3, [r5, #0]
 8013430:	f7f1 feea 	bl	8005208 <_sbrk>
 8013434:	1c43      	adds	r3, r0, #1
 8013436:	d102      	bne.n	801343e <_sbrk_r+0x1a>
 8013438:	682b      	ldr	r3, [r5, #0]
 801343a:	b103      	cbz	r3, 801343e <_sbrk_r+0x1a>
 801343c:	6023      	str	r3, [r4, #0]
 801343e:	bd38      	pop	{r3, r4, r5, pc}
 8013440:	200094e8 	.word	0x200094e8

08013444 <siprintf>:
 8013444:	b40e      	push	{r1, r2, r3}
 8013446:	b500      	push	{lr}
 8013448:	b09c      	sub	sp, #112	; 0x70
 801344a:	ab1d      	add	r3, sp, #116	; 0x74
 801344c:	9002      	str	r0, [sp, #8]
 801344e:	9006      	str	r0, [sp, #24]
 8013450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013454:	4809      	ldr	r0, [pc, #36]	; (801347c <siprintf+0x38>)
 8013456:	9107      	str	r1, [sp, #28]
 8013458:	9104      	str	r1, [sp, #16]
 801345a:	4909      	ldr	r1, [pc, #36]	; (8013480 <siprintf+0x3c>)
 801345c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013460:	9105      	str	r1, [sp, #20]
 8013462:	6800      	ldr	r0, [r0, #0]
 8013464:	9301      	str	r3, [sp, #4]
 8013466:	a902      	add	r1, sp, #8
 8013468:	f000 f900 	bl	801366c <_svfiprintf_r>
 801346c:	9b02      	ldr	r3, [sp, #8]
 801346e:	2200      	movs	r2, #0
 8013470:	701a      	strb	r2, [r3, #0]
 8013472:	b01c      	add	sp, #112	; 0x70
 8013474:	f85d eb04 	ldr.w	lr, [sp], #4
 8013478:	b003      	add	sp, #12
 801347a:	4770      	bx	lr
 801347c:	2000005c 	.word	0x2000005c
 8013480:	ffff0208 	.word	0xffff0208

08013484 <_strtol_l.constprop.0>:
 8013484:	2b01      	cmp	r3, #1
 8013486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801348a:	d001      	beq.n	8013490 <_strtol_l.constprop.0+0xc>
 801348c:	2b24      	cmp	r3, #36	; 0x24
 801348e:	d906      	bls.n	801349e <_strtol_l.constprop.0+0x1a>
 8013490:	f7ff fe3e 	bl	8013110 <__errno>
 8013494:	2316      	movs	r3, #22
 8013496:	6003      	str	r3, [r0, #0]
 8013498:	2000      	movs	r0, #0
 801349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801349e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013584 <_strtol_l.constprop.0+0x100>
 80134a2:	460d      	mov	r5, r1
 80134a4:	462e      	mov	r6, r5
 80134a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80134aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80134ae:	f017 0708 	ands.w	r7, r7, #8
 80134b2:	d1f7      	bne.n	80134a4 <_strtol_l.constprop.0+0x20>
 80134b4:	2c2d      	cmp	r4, #45	; 0x2d
 80134b6:	d132      	bne.n	801351e <_strtol_l.constprop.0+0x9a>
 80134b8:	782c      	ldrb	r4, [r5, #0]
 80134ba:	2701      	movs	r7, #1
 80134bc:	1cb5      	adds	r5, r6, #2
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d05b      	beq.n	801357a <_strtol_l.constprop.0+0xf6>
 80134c2:	2b10      	cmp	r3, #16
 80134c4:	d109      	bne.n	80134da <_strtol_l.constprop.0+0x56>
 80134c6:	2c30      	cmp	r4, #48	; 0x30
 80134c8:	d107      	bne.n	80134da <_strtol_l.constprop.0+0x56>
 80134ca:	782c      	ldrb	r4, [r5, #0]
 80134cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80134d0:	2c58      	cmp	r4, #88	; 0x58
 80134d2:	d14d      	bne.n	8013570 <_strtol_l.constprop.0+0xec>
 80134d4:	786c      	ldrb	r4, [r5, #1]
 80134d6:	2310      	movs	r3, #16
 80134d8:	3502      	adds	r5, #2
 80134da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80134de:	f108 38ff 	add.w	r8, r8, #4294967295
 80134e2:	f04f 0c00 	mov.w	ip, #0
 80134e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80134ea:	4666      	mov	r6, ip
 80134ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80134f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80134f4:	f1be 0f09 	cmp.w	lr, #9
 80134f8:	d816      	bhi.n	8013528 <_strtol_l.constprop.0+0xa4>
 80134fa:	4674      	mov	r4, lr
 80134fc:	42a3      	cmp	r3, r4
 80134fe:	dd24      	ble.n	801354a <_strtol_l.constprop.0+0xc6>
 8013500:	f1bc 0f00 	cmp.w	ip, #0
 8013504:	db1e      	blt.n	8013544 <_strtol_l.constprop.0+0xc0>
 8013506:	45b1      	cmp	r9, r6
 8013508:	d31c      	bcc.n	8013544 <_strtol_l.constprop.0+0xc0>
 801350a:	d101      	bne.n	8013510 <_strtol_l.constprop.0+0x8c>
 801350c:	45a2      	cmp	sl, r4
 801350e:	db19      	blt.n	8013544 <_strtol_l.constprop.0+0xc0>
 8013510:	fb06 4603 	mla	r6, r6, r3, r4
 8013514:	f04f 0c01 	mov.w	ip, #1
 8013518:	f815 4b01 	ldrb.w	r4, [r5], #1
 801351c:	e7e8      	b.n	80134f0 <_strtol_l.constprop.0+0x6c>
 801351e:	2c2b      	cmp	r4, #43	; 0x2b
 8013520:	bf04      	itt	eq
 8013522:	782c      	ldrbeq	r4, [r5, #0]
 8013524:	1cb5      	addeq	r5, r6, #2
 8013526:	e7ca      	b.n	80134be <_strtol_l.constprop.0+0x3a>
 8013528:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801352c:	f1be 0f19 	cmp.w	lr, #25
 8013530:	d801      	bhi.n	8013536 <_strtol_l.constprop.0+0xb2>
 8013532:	3c37      	subs	r4, #55	; 0x37
 8013534:	e7e2      	b.n	80134fc <_strtol_l.constprop.0+0x78>
 8013536:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801353a:	f1be 0f19 	cmp.w	lr, #25
 801353e:	d804      	bhi.n	801354a <_strtol_l.constprop.0+0xc6>
 8013540:	3c57      	subs	r4, #87	; 0x57
 8013542:	e7db      	b.n	80134fc <_strtol_l.constprop.0+0x78>
 8013544:	f04f 3cff 	mov.w	ip, #4294967295
 8013548:	e7e6      	b.n	8013518 <_strtol_l.constprop.0+0x94>
 801354a:	f1bc 0f00 	cmp.w	ip, #0
 801354e:	da05      	bge.n	801355c <_strtol_l.constprop.0+0xd8>
 8013550:	2322      	movs	r3, #34	; 0x22
 8013552:	6003      	str	r3, [r0, #0]
 8013554:	4646      	mov	r6, r8
 8013556:	b942      	cbnz	r2, 801356a <_strtol_l.constprop.0+0xe6>
 8013558:	4630      	mov	r0, r6
 801355a:	e79e      	b.n	801349a <_strtol_l.constprop.0+0x16>
 801355c:	b107      	cbz	r7, 8013560 <_strtol_l.constprop.0+0xdc>
 801355e:	4276      	negs	r6, r6
 8013560:	2a00      	cmp	r2, #0
 8013562:	d0f9      	beq.n	8013558 <_strtol_l.constprop.0+0xd4>
 8013564:	f1bc 0f00 	cmp.w	ip, #0
 8013568:	d000      	beq.n	801356c <_strtol_l.constprop.0+0xe8>
 801356a:	1e69      	subs	r1, r5, #1
 801356c:	6011      	str	r1, [r2, #0]
 801356e:	e7f3      	b.n	8013558 <_strtol_l.constprop.0+0xd4>
 8013570:	2430      	movs	r4, #48	; 0x30
 8013572:	2b00      	cmp	r3, #0
 8013574:	d1b1      	bne.n	80134da <_strtol_l.constprop.0+0x56>
 8013576:	2308      	movs	r3, #8
 8013578:	e7af      	b.n	80134da <_strtol_l.constprop.0+0x56>
 801357a:	2c30      	cmp	r4, #48	; 0x30
 801357c:	d0a5      	beq.n	80134ca <_strtol_l.constprop.0+0x46>
 801357e:	230a      	movs	r3, #10
 8013580:	e7ab      	b.n	80134da <_strtol_l.constprop.0+0x56>
 8013582:	bf00      	nop
 8013584:	08014319 	.word	0x08014319

08013588 <strtol>:
 8013588:	4613      	mov	r3, r2
 801358a:	460a      	mov	r2, r1
 801358c:	4601      	mov	r1, r0
 801358e:	4802      	ldr	r0, [pc, #8]	; (8013598 <strtol+0x10>)
 8013590:	6800      	ldr	r0, [r0, #0]
 8013592:	f7ff bf77 	b.w	8013484 <_strtol_l.constprop.0>
 8013596:	bf00      	nop
 8013598:	2000005c 	.word	0x2000005c

0801359c <__malloc_lock>:
 801359c:	4801      	ldr	r0, [pc, #4]	; (80135a4 <__malloc_lock+0x8>)
 801359e:	f7f2 b8ec 	b.w	800577a <__retarget_lock_acquire_recursive>
 80135a2:	bf00      	nop
 80135a4:	20000884 	.word	0x20000884

080135a8 <__malloc_unlock>:
 80135a8:	4801      	ldr	r0, [pc, #4]	; (80135b0 <__malloc_unlock+0x8>)
 80135aa:	f7f2 b8fa 	b.w	80057a2 <__retarget_lock_release_recursive>
 80135ae:	bf00      	nop
 80135b0:	20000884 	.word	0x20000884

080135b4 <__ssputs_r>:
 80135b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135b8:	688e      	ldr	r6, [r1, #8]
 80135ba:	429e      	cmp	r6, r3
 80135bc:	4682      	mov	sl, r0
 80135be:	460c      	mov	r4, r1
 80135c0:	4690      	mov	r8, r2
 80135c2:	461f      	mov	r7, r3
 80135c4:	d838      	bhi.n	8013638 <__ssputs_r+0x84>
 80135c6:	898a      	ldrh	r2, [r1, #12]
 80135c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80135cc:	d032      	beq.n	8013634 <__ssputs_r+0x80>
 80135ce:	6825      	ldr	r5, [r4, #0]
 80135d0:	6909      	ldr	r1, [r1, #16]
 80135d2:	eba5 0901 	sub.w	r9, r5, r1
 80135d6:	6965      	ldr	r5, [r4, #20]
 80135d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80135e0:	3301      	adds	r3, #1
 80135e2:	444b      	add	r3, r9
 80135e4:	106d      	asrs	r5, r5, #1
 80135e6:	429d      	cmp	r5, r3
 80135e8:	bf38      	it	cc
 80135ea:	461d      	movcc	r5, r3
 80135ec:	0553      	lsls	r3, r2, #21
 80135ee:	d531      	bpl.n	8013654 <__ssputs_r+0xa0>
 80135f0:	4629      	mov	r1, r5
 80135f2:	f7ff fe39 	bl	8013268 <_malloc_r>
 80135f6:	4606      	mov	r6, r0
 80135f8:	b950      	cbnz	r0, 8013610 <__ssputs_r+0x5c>
 80135fa:	230c      	movs	r3, #12
 80135fc:	f8ca 3000 	str.w	r3, [sl]
 8013600:	89a3      	ldrh	r3, [r4, #12]
 8013602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013606:	81a3      	strh	r3, [r4, #12]
 8013608:	f04f 30ff 	mov.w	r0, #4294967295
 801360c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013610:	6921      	ldr	r1, [r4, #16]
 8013612:	464a      	mov	r2, r9
 8013614:	f7ff fda6 	bl	8013164 <memcpy>
 8013618:	89a3      	ldrh	r3, [r4, #12]
 801361a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801361e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013622:	81a3      	strh	r3, [r4, #12]
 8013624:	6126      	str	r6, [r4, #16]
 8013626:	6165      	str	r5, [r4, #20]
 8013628:	444e      	add	r6, r9
 801362a:	eba5 0509 	sub.w	r5, r5, r9
 801362e:	6026      	str	r6, [r4, #0]
 8013630:	60a5      	str	r5, [r4, #8]
 8013632:	463e      	mov	r6, r7
 8013634:	42be      	cmp	r6, r7
 8013636:	d900      	bls.n	801363a <__ssputs_r+0x86>
 8013638:	463e      	mov	r6, r7
 801363a:	6820      	ldr	r0, [r4, #0]
 801363c:	4632      	mov	r2, r6
 801363e:	4641      	mov	r1, r8
 8013640:	f000 faa8 	bl	8013b94 <memmove>
 8013644:	68a3      	ldr	r3, [r4, #8]
 8013646:	1b9b      	subs	r3, r3, r6
 8013648:	60a3      	str	r3, [r4, #8]
 801364a:	6823      	ldr	r3, [r4, #0]
 801364c:	4433      	add	r3, r6
 801364e:	6023      	str	r3, [r4, #0]
 8013650:	2000      	movs	r0, #0
 8013652:	e7db      	b.n	801360c <__ssputs_r+0x58>
 8013654:	462a      	mov	r2, r5
 8013656:	f000 fab7 	bl	8013bc8 <_realloc_r>
 801365a:	4606      	mov	r6, r0
 801365c:	2800      	cmp	r0, #0
 801365e:	d1e1      	bne.n	8013624 <__ssputs_r+0x70>
 8013660:	6921      	ldr	r1, [r4, #16]
 8013662:	4650      	mov	r0, sl
 8013664:	f7ff fd94 	bl	8013190 <_free_r>
 8013668:	e7c7      	b.n	80135fa <__ssputs_r+0x46>
	...

0801366c <_svfiprintf_r>:
 801366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013670:	4698      	mov	r8, r3
 8013672:	898b      	ldrh	r3, [r1, #12]
 8013674:	061b      	lsls	r3, r3, #24
 8013676:	b09d      	sub	sp, #116	; 0x74
 8013678:	4607      	mov	r7, r0
 801367a:	460d      	mov	r5, r1
 801367c:	4614      	mov	r4, r2
 801367e:	d50e      	bpl.n	801369e <_svfiprintf_r+0x32>
 8013680:	690b      	ldr	r3, [r1, #16]
 8013682:	b963      	cbnz	r3, 801369e <_svfiprintf_r+0x32>
 8013684:	2140      	movs	r1, #64	; 0x40
 8013686:	f7ff fdef 	bl	8013268 <_malloc_r>
 801368a:	6028      	str	r0, [r5, #0]
 801368c:	6128      	str	r0, [r5, #16]
 801368e:	b920      	cbnz	r0, 801369a <_svfiprintf_r+0x2e>
 8013690:	230c      	movs	r3, #12
 8013692:	603b      	str	r3, [r7, #0]
 8013694:	f04f 30ff 	mov.w	r0, #4294967295
 8013698:	e0d1      	b.n	801383e <_svfiprintf_r+0x1d2>
 801369a:	2340      	movs	r3, #64	; 0x40
 801369c:	616b      	str	r3, [r5, #20]
 801369e:	2300      	movs	r3, #0
 80136a0:	9309      	str	r3, [sp, #36]	; 0x24
 80136a2:	2320      	movs	r3, #32
 80136a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80136ac:	2330      	movs	r3, #48	; 0x30
 80136ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013858 <_svfiprintf_r+0x1ec>
 80136b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136b6:	f04f 0901 	mov.w	r9, #1
 80136ba:	4623      	mov	r3, r4
 80136bc:	469a      	mov	sl, r3
 80136be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136c2:	b10a      	cbz	r2, 80136c8 <_svfiprintf_r+0x5c>
 80136c4:	2a25      	cmp	r2, #37	; 0x25
 80136c6:	d1f9      	bne.n	80136bc <_svfiprintf_r+0x50>
 80136c8:	ebba 0b04 	subs.w	fp, sl, r4
 80136cc:	d00b      	beq.n	80136e6 <_svfiprintf_r+0x7a>
 80136ce:	465b      	mov	r3, fp
 80136d0:	4622      	mov	r2, r4
 80136d2:	4629      	mov	r1, r5
 80136d4:	4638      	mov	r0, r7
 80136d6:	f7ff ff6d 	bl	80135b4 <__ssputs_r>
 80136da:	3001      	adds	r0, #1
 80136dc:	f000 80aa 	beq.w	8013834 <_svfiprintf_r+0x1c8>
 80136e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136e2:	445a      	add	r2, fp
 80136e4:	9209      	str	r2, [sp, #36]	; 0x24
 80136e6:	f89a 3000 	ldrb.w	r3, [sl]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f000 80a2 	beq.w	8013834 <_svfiprintf_r+0x1c8>
 80136f0:	2300      	movs	r3, #0
 80136f2:	f04f 32ff 	mov.w	r2, #4294967295
 80136f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136fa:	f10a 0a01 	add.w	sl, sl, #1
 80136fe:	9304      	str	r3, [sp, #16]
 8013700:	9307      	str	r3, [sp, #28]
 8013702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013706:	931a      	str	r3, [sp, #104]	; 0x68
 8013708:	4654      	mov	r4, sl
 801370a:	2205      	movs	r2, #5
 801370c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013710:	4851      	ldr	r0, [pc, #324]	; (8013858 <_svfiprintf_r+0x1ec>)
 8013712:	f7ec fd6d 	bl	80001f0 <memchr>
 8013716:	9a04      	ldr	r2, [sp, #16]
 8013718:	b9d8      	cbnz	r0, 8013752 <_svfiprintf_r+0xe6>
 801371a:	06d0      	lsls	r0, r2, #27
 801371c:	bf44      	itt	mi
 801371e:	2320      	movmi	r3, #32
 8013720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013724:	0711      	lsls	r1, r2, #28
 8013726:	bf44      	itt	mi
 8013728:	232b      	movmi	r3, #43	; 0x2b
 801372a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801372e:	f89a 3000 	ldrb.w	r3, [sl]
 8013732:	2b2a      	cmp	r3, #42	; 0x2a
 8013734:	d015      	beq.n	8013762 <_svfiprintf_r+0xf6>
 8013736:	9a07      	ldr	r2, [sp, #28]
 8013738:	4654      	mov	r4, sl
 801373a:	2000      	movs	r0, #0
 801373c:	f04f 0c0a 	mov.w	ip, #10
 8013740:	4621      	mov	r1, r4
 8013742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013746:	3b30      	subs	r3, #48	; 0x30
 8013748:	2b09      	cmp	r3, #9
 801374a:	d94e      	bls.n	80137ea <_svfiprintf_r+0x17e>
 801374c:	b1b0      	cbz	r0, 801377c <_svfiprintf_r+0x110>
 801374e:	9207      	str	r2, [sp, #28]
 8013750:	e014      	b.n	801377c <_svfiprintf_r+0x110>
 8013752:	eba0 0308 	sub.w	r3, r0, r8
 8013756:	fa09 f303 	lsl.w	r3, r9, r3
 801375a:	4313      	orrs	r3, r2
 801375c:	9304      	str	r3, [sp, #16]
 801375e:	46a2      	mov	sl, r4
 8013760:	e7d2      	b.n	8013708 <_svfiprintf_r+0x9c>
 8013762:	9b03      	ldr	r3, [sp, #12]
 8013764:	1d19      	adds	r1, r3, #4
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	9103      	str	r1, [sp, #12]
 801376a:	2b00      	cmp	r3, #0
 801376c:	bfbb      	ittet	lt
 801376e:	425b      	neglt	r3, r3
 8013770:	f042 0202 	orrlt.w	r2, r2, #2
 8013774:	9307      	strge	r3, [sp, #28]
 8013776:	9307      	strlt	r3, [sp, #28]
 8013778:	bfb8      	it	lt
 801377a:	9204      	strlt	r2, [sp, #16]
 801377c:	7823      	ldrb	r3, [r4, #0]
 801377e:	2b2e      	cmp	r3, #46	; 0x2e
 8013780:	d10c      	bne.n	801379c <_svfiprintf_r+0x130>
 8013782:	7863      	ldrb	r3, [r4, #1]
 8013784:	2b2a      	cmp	r3, #42	; 0x2a
 8013786:	d135      	bne.n	80137f4 <_svfiprintf_r+0x188>
 8013788:	9b03      	ldr	r3, [sp, #12]
 801378a:	1d1a      	adds	r2, r3, #4
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	9203      	str	r2, [sp, #12]
 8013790:	2b00      	cmp	r3, #0
 8013792:	bfb8      	it	lt
 8013794:	f04f 33ff 	movlt.w	r3, #4294967295
 8013798:	3402      	adds	r4, #2
 801379a:	9305      	str	r3, [sp, #20]
 801379c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013868 <_svfiprintf_r+0x1fc>
 80137a0:	7821      	ldrb	r1, [r4, #0]
 80137a2:	2203      	movs	r2, #3
 80137a4:	4650      	mov	r0, sl
 80137a6:	f7ec fd23 	bl	80001f0 <memchr>
 80137aa:	b140      	cbz	r0, 80137be <_svfiprintf_r+0x152>
 80137ac:	2340      	movs	r3, #64	; 0x40
 80137ae:	eba0 000a 	sub.w	r0, r0, sl
 80137b2:	fa03 f000 	lsl.w	r0, r3, r0
 80137b6:	9b04      	ldr	r3, [sp, #16]
 80137b8:	4303      	orrs	r3, r0
 80137ba:	3401      	adds	r4, #1
 80137bc:	9304      	str	r3, [sp, #16]
 80137be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137c2:	4826      	ldr	r0, [pc, #152]	; (801385c <_svfiprintf_r+0x1f0>)
 80137c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137c8:	2206      	movs	r2, #6
 80137ca:	f7ec fd11 	bl	80001f0 <memchr>
 80137ce:	2800      	cmp	r0, #0
 80137d0:	d038      	beq.n	8013844 <_svfiprintf_r+0x1d8>
 80137d2:	4b23      	ldr	r3, [pc, #140]	; (8013860 <_svfiprintf_r+0x1f4>)
 80137d4:	bb1b      	cbnz	r3, 801381e <_svfiprintf_r+0x1b2>
 80137d6:	9b03      	ldr	r3, [sp, #12]
 80137d8:	3307      	adds	r3, #7
 80137da:	f023 0307 	bic.w	r3, r3, #7
 80137de:	3308      	adds	r3, #8
 80137e0:	9303      	str	r3, [sp, #12]
 80137e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137e4:	4433      	add	r3, r6
 80137e6:	9309      	str	r3, [sp, #36]	; 0x24
 80137e8:	e767      	b.n	80136ba <_svfiprintf_r+0x4e>
 80137ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80137ee:	460c      	mov	r4, r1
 80137f0:	2001      	movs	r0, #1
 80137f2:	e7a5      	b.n	8013740 <_svfiprintf_r+0xd4>
 80137f4:	2300      	movs	r3, #0
 80137f6:	3401      	adds	r4, #1
 80137f8:	9305      	str	r3, [sp, #20]
 80137fa:	4619      	mov	r1, r3
 80137fc:	f04f 0c0a 	mov.w	ip, #10
 8013800:	4620      	mov	r0, r4
 8013802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013806:	3a30      	subs	r2, #48	; 0x30
 8013808:	2a09      	cmp	r2, #9
 801380a:	d903      	bls.n	8013814 <_svfiprintf_r+0x1a8>
 801380c:	2b00      	cmp	r3, #0
 801380e:	d0c5      	beq.n	801379c <_svfiprintf_r+0x130>
 8013810:	9105      	str	r1, [sp, #20]
 8013812:	e7c3      	b.n	801379c <_svfiprintf_r+0x130>
 8013814:	fb0c 2101 	mla	r1, ip, r1, r2
 8013818:	4604      	mov	r4, r0
 801381a:	2301      	movs	r3, #1
 801381c:	e7f0      	b.n	8013800 <_svfiprintf_r+0x194>
 801381e:	ab03      	add	r3, sp, #12
 8013820:	9300      	str	r3, [sp, #0]
 8013822:	462a      	mov	r2, r5
 8013824:	4b0f      	ldr	r3, [pc, #60]	; (8013864 <_svfiprintf_r+0x1f8>)
 8013826:	a904      	add	r1, sp, #16
 8013828:	4638      	mov	r0, r7
 801382a:	f3af 8000 	nop.w
 801382e:	1c42      	adds	r2, r0, #1
 8013830:	4606      	mov	r6, r0
 8013832:	d1d6      	bne.n	80137e2 <_svfiprintf_r+0x176>
 8013834:	89ab      	ldrh	r3, [r5, #12]
 8013836:	065b      	lsls	r3, r3, #25
 8013838:	f53f af2c 	bmi.w	8013694 <_svfiprintf_r+0x28>
 801383c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801383e:	b01d      	add	sp, #116	; 0x74
 8013840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013844:	ab03      	add	r3, sp, #12
 8013846:	9300      	str	r3, [sp, #0]
 8013848:	462a      	mov	r2, r5
 801384a:	4b06      	ldr	r3, [pc, #24]	; (8013864 <_svfiprintf_r+0x1f8>)
 801384c:	a904      	add	r1, sp, #16
 801384e:	4638      	mov	r0, r7
 8013850:	f000 f87a 	bl	8013948 <_printf_i>
 8013854:	e7eb      	b.n	801382e <_svfiprintf_r+0x1c2>
 8013856:	bf00      	nop
 8013858:	08014419 	.word	0x08014419
 801385c:	08014423 	.word	0x08014423
 8013860:	00000000 	.word	0x00000000
 8013864:	080135b5 	.word	0x080135b5
 8013868:	0801441f 	.word	0x0801441f

0801386c <_printf_common>:
 801386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013870:	4616      	mov	r6, r2
 8013872:	4699      	mov	r9, r3
 8013874:	688a      	ldr	r2, [r1, #8]
 8013876:	690b      	ldr	r3, [r1, #16]
 8013878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801387c:	4293      	cmp	r3, r2
 801387e:	bfb8      	it	lt
 8013880:	4613      	movlt	r3, r2
 8013882:	6033      	str	r3, [r6, #0]
 8013884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013888:	4607      	mov	r7, r0
 801388a:	460c      	mov	r4, r1
 801388c:	b10a      	cbz	r2, 8013892 <_printf_common+0x26>
 801388e:	3301      	adds	r3, #1
 8013890:	6033      	str	r3, [r6, #0]
 8013892:	6823      	ldr	r3, [r4, #0]
 8013894:	0699      	lsls	r1, r3, #26
 8013896:	bf42      	ittt	mi
 8013898:	6833      	ldrmi	r3, [r6, #0]
 801389a:	3302      	addmi	r3, #2
 801389c:	6033      	strmi	r3, [r6, #0]
 801389e:	6825      	ldr	r5, [r4, #0]
 80138a0:	f015 0506 	ands.w	r5, r5, #6
 80138a4:	d106      	bne.n	80138b4 <_printf_common+0x48>
 80138a6:	f104 0a19 	add.w	sl, r4, #25
 80138aa:	68e3      	ldr	r3, [r4, #12]
 80138ac:	6832      	ldr	r2, [r6, #0]
 80138ae:	1a9b      	subs	r3, r3, r2
 80138b0:	42ab      	cmp	r3, r5
 80138b2:	dc26      	bgt.n	8013902 <_printf_common+0x96>
 80138b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80138b8:	1e13      	subs	r3, r2, #0
 80138ba:	6822      	ldr	r2, [r4, #0]
 80138bc:	bf18      	it	ne
 80138be:	2301      	movne	r3, #1
 80138c0:	0692      	lsls	r2, r2, #26
 80138c2:	d42b      	bmi.n	801391c <_printf_common+0xb0>
 80138c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80138c8:	4649      	mov	r1, r9
 80138ca:	4638      	mov	r0, r7
 80138cc:	47c0      	blx	r8
 80138ce:	3001      	adds	r0, #1
 80138d0:	d01e      	beq.n	8013910 <_printf_common+0xa4>
 80138d2:	6823      	ldr	r3, [r4, #0]
 80138d4:	68e5      	ldr	r5, [r4, #12]
 80138d6:	6832      	ldr	r2, [r6, #0]
 80138d8:	f003 0306 	and.w	r3, r3, #6
 80138dc:	2b04      	cmp	r3, #4
 80138de:	bf08      	it	eq
 80138e0:	1aad      	subeq	r5, r5, r2
 80138e2:	68a3      	ldr	r3, [r4, #8]
 80138e4:	6922      	ldr	r2, [r4, #16]
 80138e6:	bf0c      	ite	eq
 80138e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138ec:	2500      	movne	r5, #0
 80138ee:	4293      	cmp	r3, r2
 80138f0:	bfc4      	itt	gt
 80138f2:	1a9b      	subgt	r3, r3, r2
 80138f4:	18ed      	addgt	r5, r5, r3
 80138f6:	2600      	movs	r6, #0
 80138f8:	341a      	adds	r4, #26
 80138fa:	42b5      	cmp	r5, r6
 80138fc:	d11a      	bne.n	8013934 <_printf_common+0xc8>
 80138fe:	2000      	movs	r0, #0
 8013900:	e008      	b.n	8013914 <_printf_common+0xa8>
 8013902:	2301      	movs	r3, #1
 8013904:	4652      	mov	r2, sl
 8013906:	4649      	mov	r1, r9
 8013908:	4638      	mov	r0, r7
 801390a:	47c0      	blx	r8
 801390c:	3001      	adds	r0, #1
 801390e:	d103      	bne.n	8013918 <_printf_common+0xac>
 8013910:	f04f 30ff 	mov.w	r0, #4294967295
 8013914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013918:	3501      	adds	r5, #1
 801391a:	e7c6      	b.n	80138aa <_printf_common+0x3e>
 801391c:	18e1      	adds	r1, r4, r3
 801391e:	1c5a      	adds	r2, r3, #1
 8013920:	2030      	movs	r0, #48	; 0x30
 8013922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013926:	4422      	add	r2, r4
 8013928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801392c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013930:	3302      	adds	r3, #2
 8013932:	e7c7      	b.n	80138c4 <_printf_common+0x58>
 8013934:	2301      	movs	r3, #1
 8013936:	4622      	mov	r2, r4
 8013938:	4649      	mov	r1, r9
 801393a:	4638      	mov	r0, r7
 801393c:	47c0      	blx	r8
 801393e:	3001      	adds	r0, #1
 8013940:	d0e6      	beq.n	8013910 <_printf_common+0xa4>
 8013942:	3601      	adds	r6, #1
 8013944:	e7d9      	b.n	80138fa <_printf_common+0x8e>
	...

08013948 <_printf_i>:
 8013948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801394c:	7e0f      	ldrb	r7, [r1, #24]
 801394e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013950:	2f78      	cmp	r7, #120	; 0x78
 8013952:	4691      	mov	r9, r2
 8013954:	4680      	mov	r8, r0
 8013956:	460c      	mov	r4, r1
 8013958:	469a      	mov	sl, r3
 801395a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801395e:	d807      	bhi.n	8013970 <_printf_i+0x28>
 8013960:	2f62      	cmp	r7, #98	; 0x62
 8013962:	d80a      	bhi.n	801397a <_printf_i+0x32>
 8013964:	2f00      	cmp	r7, #0
 8013966:	f000 80d8 	beq.w	8013b1a <_printf_i+0x1d2>
 801396a:	2f58      	cmp	r7, #88	; 0x58
 801396c:	f000 80a3 	beq.w	8013ab6 <_printf_i+0x16e>
 8013970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013978:	e03a      	b.n	80139f0 <_printf_i+0xa8>
 801397a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801397e:	2b15      	cmp	r3, #21
 8013980:	d8f6      	bhi.n	8013970 <_printf_i+0x28>
 8013982:	a101      	add	r1, pc, #4	; (adr r1, 8013988 <_printf_i+0x40>)
 8013984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013988:	080139e1 	.word	0x080139e1
 801398c:	080139f5 	.word	0x080139f5
 8013990:	08013971 	.word	0x08013971
 8013994:	08013971 	.word	0x08013971
 8013998:	08013971 	.word	0x08013971
 801399c:	08013971 	.word	0x08013971
 80139a0:	080139f5 	.word	0x080139f5
 80139a4:	08013971 	.word	0x08013971
 80139a8:	08013971 	.word	0x08013971
 80139ac:	08013971 	.word	0x08013971
 80139b0:	08013971 	.word	0x08013971
 80139b4:	08013b01 	.word	0x08013b01
 80139b8:	08013a25 	.word	0x08013a25
 80139bc:	08013ae3 	.word	0x08013ae3
 80139c0:	08013971 	.word	0x08013971
 80139c4:	08013971 	.word	0x08013971
 80139c8:	08013b23 	.word	0x08013b23
 80139cc:	08013971 	.word	0x08013971
 80139d0:	08013a25 	.word	0x08013a25
 80139d4:	08013971 	.word	0x08013971
 80139d8:	08013971 	.word	0x08013971
 80139dc:	08013aeb 	.word	0x08013aeb
 80139e0:	682b      	ldr	r3, [r5, #0]
 80139e2:	1d1a      	adds	r2, r3, #4
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	602a      	str	r2, [r5, #0]
 80139e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80139f0:	2301      	movs	r3, #1
 80139f2:	e0a3      	b.n	8013b3c <_printf_i+0x1f4>
 80139f4:	6820      	ldr	r0, [r4, #0]
 80139f6:	6829      	ldr	r1, [r5, #0]
 80139f8:	0606      	lsls	r6, r0, #24
 80139fa:	f101 0304 	add.w	r3, r1, #4
 80139fe:	d50a      	bpl.n	8013a16 <_printf_i+0xce>
 8013a00:	680e      	ldr	r6, [r1, #0]
 8013a02:	602b      	str	r3, [r5, #0]
 8013a04:	2e00      	cmp	r6, #0
 8013a06:	da03      	bge.n	8013a10 <_printf_i+0xc8>
 8013a08:	232d      	movs	r3, #45	; 0x2d
 8013a0a:	4276      	negs	r6, r6
 8013a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a10:	485e      	ldr	r0, [pc, #376]	; (8013b8c <_printf_i+0x244>)
 8013a12:	230a      	movs	r3, #10
 8013a14:	e019      	b.n	8013a4a <_printf_i+0x102>
 8013a16:	680e      	ldr	r6, [r1, #0]
 8013a18:	602b      	str	r3, [r5, #0]
 8013a1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013a1e:	bf18      	it	ne
 8013a20:	b236      	sxthne	r6, r6
 8013a22:	e7ef      	b.n	8013a04 <_printf_i+0xbc>
 8013a24:	682b      	ldr	r3, [r5, #0]
 8013a26:	6820      	ldr	r0, [r4, #0]
 8013a28:	1d19      	adds	r1, r3, #4
 8013a2a:	6029      	str	r1, [r5, #0]
 8013a2c:	0601      	lsls	r1, r0, #24
 8013a2e:	d501      	bpl.n	8013a34 <_printf_i+0xec>
 8013a30:	681e      	ldr	r6, [r3, #0]
 8013a32:	e002      	b.n	8013a3a <_printf_i+0xf2>
 8013a34:	0646      	lsls	r6, r0, #25
 8013a36:	d5fb      	bpl.n	8013a30 <_printf_i+0xe8>
 8013a38:	881e      	ldrh	r6, [r3, #0]
 8013a3a:	4854      	ldr	r0, [pc, #336]	; (8013b8c <_printf_i+0x244>)
 8013a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8013a3e:	bf0c      	ite	eq
 8013a40:	2308      	moveq	r3, #8
 8013a42:	230a      	movne	r3, #10
 8013a44:	2100      	movs	r1, #0
 8013a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013a4a:	6865      	ldr	r5, [r4, #4]
 8013a4c:	60a5      	str	r5, [r4, #8]
 8013a4e:	2d00      	cmp	r5, #0
 8013a50:	bfa2      	ittt	ge
 8013a52:	6821      	ldrge	r1, [r4, #0]
 8013a54:	f021 0104 	bicge.w	r1, r1, #4
 8013a58:	6021      	strge	r1, [r4, #0]
 8013a5a:	b90e      	cbnz	r6, 8013a60 <_printf_i+0x118>
 8013a5c:	2d00      	cmp	r5, #0
 8013a5e:	d04d      	beq.n	8013afc <_printf_i+0x1b4>
 8013a60:	4615      	mov	r5, r2
 8013a62:	fbb6 f1f3 	udiv	r1, r6, r3
 8013a66:	fb03 6711 	mls	r7, r3, r1, r6
 8013a6a:	5dc7      	ldrb	r7, [r0, r7]
 8013a6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013a70:	4637      	mov	r7, r6
 8013a72:	42bb      	cmp	r3, r7
 8013a74:	460e      	mov	r6, r1
 8013a76:	d9f4      	bls.n	8013a62 <_printf_i+0x11a>
 8013a78:	2b08      	cmp	r3, #8
 8013a7a:	d10b      	bne.n	8013a94 <_printf_i+0x14c>
 8013a7c:	6823      	ldr	r3, [r4, #0]
 8013a7e:	07de      	lsls	r6, r3, #31
 8013a80:	d508      	bpl.n	8013a94 <_printf_i+0x14c>
 8013a82:	6923      	ldr	r3, [r4, #16]
 8013a84:	6861      	ldr	r1, [r4, #4]
 8013a86:	4299      	cmp	r1, r3
 8013a88:	bfde      	ittt	le
 8013a8a:	2330      	movle	r3, #48	; 0x30
 8013a8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013a90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013a94:	1b52      	subs	r2, r2, r5
 8013a96:	6122      	str	r2, [r4, #16]
 8013a98:	f8cd a000 	str.w	sl, [sp]
 8013a9c:	464b      	mov	r3, r9
 8013a9e:	aa03      	add	r2, sp, #12
 8013aa0:	4621      	mov	r1, r4
 8013aa2:	4640      	mov	r0, r8
 8013aa4:	f7ff fee2 	bl	801386c <_printf_common>
 8013aa8:	3001      	adds	r0, #1
 8013aaa:	d14c      	bne.n	8013b46 <_printf_i+0x1fe>
 8013aac:	f04f 30ff 	mov.w	r0, #4294967295
 8013ab0:	b004      	add	sp, #16
 8013ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ab6:	4835      	ldr	r0, [pc, #212]	; (8013b8c <_printf_i+0x244>)
 8013ab8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013abc:	6829      	ldr	r1, [r5, #0]
 8013abe:	6823      	ldr	r3, [r4, #0]
 8013ac0:	f851 6b04 	ldr.w	r6, [r1], #4
 8013ac4:	6029      	str	r1, [r5, #0]
 8013ac6:	061d      	lsls	r5, r3, #24
 8013ac8:	d514      	bpl.n	8013af4 <_printf_i+0x1ac>
 8013aca:	07df      	lsls	r7, r3, #31
 8013acc:	bf44      	itt	mi
 8013ace:	f043 0320 	orrmi.w	r3, r3, #32
 8013ad2:	6023      	strmi	r3, [r4, #0]
 8013ad4:	b91e      	cbnz	r6, 8013ade <_printf_i+0x196>
 8013ad6:	6823      	ldr	r3, [r4, #0]
 8013ad8:	f023 0320 	bic.w	r3, r3, #32
 8013adc:	6023      	str	r3, [r4, #0]
 8013ade:	2310      	movs	r3, #16
 8013ae0:	e7b0      	b.n	8013a44 <_printf_i+0xfc>
 8013ae2:	6823      	ldr	r3, [r4, #0]
 8013ae4:	f043 0320 	orr.w	r3, r3, #32
 8013ae8:	6023      	str	r3, [r4, #0]
 8013aea:	2378      	movs	r3, #120	; 0x78
 8013aec:	4828      	ldr	r0, [pc, #160]	; (8013b90 <_printf_i+0x248>)
 8013aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013af2:	e7e3      	b.n	8013abc <_printf_i+0x174>
 8013af4:	0659      	lsls	r1, r3, #25
 8013af6:	bf48      	it	mi
 8013af8:	b2b6      	uxthmi	r6, r6
 8013afa:	e7e6      	b.n	8013aca <_printf_i+0x182>
 8013afc:	4615      	mov	r5, r2
 8013afe:	e7bb      	b.n	8013a78 <_printf_i+0x130>
 8013b00:	682b      	ldr	r3, [r5, #0]
 8013b02:	6826      	ldr	r6, [r4, #0]
 8013b04:	6961      	ldr	r1, [r4, #20]
 8013b06:	1d18      	adds	r0, r3, #4
 8013b08:	6028      	str	r0, [r5, #0]
 8013b0a:	0635      	lsls	r5, r6, #24
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	d501      	bpl.n	8013b14 <_printf_i+0x1cc>
 8013b10:	6019      	str	r1, [r3, #0]
 8013b12:	e002      	b.n	8013b1a <_printf_i+0x1d2>
 8013b14:	0670      	lsls	r0, r6, #25
 8013b16:	d5fb      	bpl.n	8013b10 <_printf_i+0x1c8>
 8013b18:	8019      	strh	r1, [r3, #0]
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	6123      	str	r3, [r4, #16]
 8013b1e:	4615      	mov	r5, r2
 8013b20:	e7ba      	b.n	8013a98 <_printf_i+0x150>
 8013b22:	682b      	ldr	r3, [r5, #0]
 8013b24:	1d1a      	adds	r2, r3, #4
 8013b26:	602a      	str	r2, [r5, #0]
 8013b28:	681d      	ldr	r5, [r3, #0]
 8013b2a:	6862      	ldr	r2, [r4, #4]
 8013b2c:	2100      	movs	r1, #0
 8013b2e:	4628      	mov	r0, r5
 8013b30:	f7ec fb5e 	bl	80001f0 <memchr>
 8013b34:	b108      	cbz	r0, 8013b3a <_printf_i+0x1f2>
 8013b36:	1b40      	subs	r0, r0, r5
 8013b38:	6060      	str	r0, [r4, #4]
 8013b3a:	6863      	ldr	r3, [r4, #4]
 8013b3c:	6123      	str	r3, [r4, #16]
 8013b3e:	2300      	movs	r3, #0
 8013b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b44:	e7a8      	b.n	8013a98 <_printf_i+0x150>
 8013b46:	6923      	ldr	r3, [r4, #16]
 8013b48:	462a      	mov	r2, r5
 8013b4a:	4649      	mov	r1, r9
 8013b4c:	4640      	mov	r0, r8
 8013b4e:	47d0      	blx	sl
 8013b50:	3001      	adds	r0, #1
 8013b52:	d0ab      	beq.n	8013aac <_printf_i+0x164>
 8013b54:	6823      	ldr	r3, [r4, #0]
 8013b56:	079b      	lsls	r3, r3, #30
 8013b58:	d413      	bmi.n	8013b82 <_printf_i+0x23a>
 8013b5a:	68e0      	ldr	r0, [r4, #12]
 8013b5c:	9b03      	ldr	r3, [sp, #12]
 8013b5e:	4298      	cmp	r0, r3
 8013b60:	bfb8      	it	lt
 8013b62:	4618      	movlt	r0, r3
 8013b64:	e7a4      	b.n	8013ab0 <_printf_i+0x168>
 8013b66:	2301      	movs	r3, #1
 8013b68:	4632      	mov	r2, r6
 8013b6a:	4649      	mov	r1, r9
 8013b6c:	4640      	mov	r0, r8
 8013b6e:	47d0      	blx	sl
 8013b70:	3001      	adds	r0, #1
 8013b72:	d09b      	beq.n	8013aac <_printf_i+0x164>
 8013b74:	3501      	adds	r5, #1
 8013b76:	68e3      	ldr	r3, [r4, #12]
 8013b78:	9903      	ldr	r1, [sp, #12]
 8013b7a:	1a5b      	subs	r3, r3, r1
 8013b7c:	42ab      	cmp	r3, r5
 8013b7e:	dcf2      	bgt.n	8013b66 <_printf_i+0x21e>
 8013b80:	e7eb      	b.n	8013b5a <_printf_i+0x212>
 8013b82:	2500      	movs	r5, #0
 8013b84:	f104 0619 	add.w	r6, r4, #25
 8013b88:	e7f5      	b.n	8013b76 <_printf_i+0x22e>
 8013b8a:	bf00      	nop
 8013b8c:	0801442a 	.word	0x0801442a
 8013b90:	0801443b 	.word	0x0801443b

08013b94 <memmove>:
 8013b94:	4288      	cmp	r0, r1
 8013b96:	b510      	push	{r4, lr}
 8013b98:	eb01 0402 	add.w	r4, r1, r2
 8013b9c:	d902      	bls.n	8013ba4 <memmove+0x10>
 8013b9e:	4284      	cmp	r4, r0
 8013ba0:	4623      	mov	r3, r4
 8013ba2:	d807      	bhi.n	8013bb4 <memmove+0x20>
 8013ba4:	1e43      	subs	r3, r0, #1
 8013ba6:	42a1      	cmp	r1, r4
 8013ba8:	d008      	beq.n	8013bbc <memmove+0x28>
 8013baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013bb2:	e7f8      	b.n	8013ba6 <memmove+0x12>
 8013bb4:	4402      	add	r2, r0
 8013bb6:	4601      	mov	r1, r0
 8013bb8:	428a      	cmp	r2, r1
 8013bba:	d100      	bne.n	8013bbe <memmove+0x2a>
 8013bbc:	bd10      	pop	{r4, pc}
 8013bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013bc6:	e7f7      	b.n	8013bb8 <memmove+0x24>

08013bc8 <_realloc_r>:
 8013bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bcc:	4680      	mov	r8, r0
 8013bce:	4614      	mov	r4, r2
 8013bd0:	460e      	mov	r6, r1
 8013bd2:	b921      	cbnz	r1, 8013bde <_realloc_r+0x16>
 8013bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd8:	4611      	mov	r1, r2
 8013bda:	f7ff bb45 	b.w	8013268 <_malloc_r>
 8013bde:	b92a      	cbnz	r2, 8013bec <_realloc_r+0x24>
 8013be0:	f7ff fad6 	bl	8013190 <_free_r>
 8013be4:	4625      	mov	r5, r4
 8013be6:	4628      	mov	r0, r5
 8013be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bec:	f000 f81b 	bl	8013c26 <_malloc_usable_size_r>
 8013bf0:	4284      	cmp	r4, r0
 8013bf2:	4607      	mov	r7, r0
 8013bf4:	d802      	bhi.n	8013bfc <_realloc_r+0x34>
 8013bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013bfa:	d812      	bhi.n	8013c22 <_realloc_r+0x5a>
 8013bfc:	4621      	mov	r1, r4
 8013bfe:	4640      	mov	r0, r8
 8013c00:	f7ff fb32 	bl	8013268 <_malloc_r>
 8013c04:	4605      	mov	r5, r0
 8013c06:	2800      	cmp	r0, #0
 8013c08:	d0ed      	beq.n	8013be6 <_realloc_r+0x1e>
 8013c0a:	42bc      	cmp	r4, r7
 8013c0c:	4622      	mov	r2, r4
 8013c0e:	4631      	mov	r1, r6
 8013c10:	bf28      	it	cs
 8013c12:	463a      	movcs	r2, r7
 8013c14:	f7ff faa6 	bl	8013164 <memcpy>
 8013c18:	4631      	mov	r1, r6
 8013c1a:	4640      	mov	r0, r8
 8013c1c:	f7ff fab8 	bl	8013190 <_free_r>
 8013c20:	e7e1      	b.n	8013be6 <_realloc_r+0x1e>
 8013c22:	4635      	mov	r5, r6
 8013c24:	e7df      	b.n	8013be6 <_realloc_r+0x1e>

08013c26 <_malloc_usable_size_r>:
 8013c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c2a:	1f18      	subs	r0, r3, #4
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	bfbc      	itt	lt
 8013c30:	580b      	ldrlt	r3, [r1, r0]
 8013c32:	18c0      	addlt	r0, r0, r3
 8013c34:	4770      	bx	lr
	...

08013c38 <_init>:
 8013c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c3a:	bf00      	nop
 8013c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c3e:	bc08      	pop	{r3}
 8013c40:	469e      	mov	lr, r3
 8013c42:	4770      	bx	lr

08013c44 <_fini>:
 8013c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c46:	bf00      	nop
 8013c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c4a:	bc08      	pop	{r3}
 8013c4c:	469e      	mov	lr, r3
 8013c4e:	4770      	bx	lr
