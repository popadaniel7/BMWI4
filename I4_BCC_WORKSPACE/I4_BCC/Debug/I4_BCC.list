
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e490  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800e630  0800e630  0001e630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec60  0800ec60  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec60  0800ec60  0001ec60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec68  0800ec68  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec68  0800ec68  0001ec68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec6c  0800ec6c  0001ec6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ec70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008984  20000090  0800ed00  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008a14  0800ed00  00028a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a76b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006635  00000000  00000000  0004a82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002258  00000000  00000000  00050e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f50  00000000  00000000  000530b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f7b  00000000  00000000  00055008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a51e  00000000  00000000  00077f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5d76  00000000  00000000  000b24a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e70  00000000  00000000  00168268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e618 	.word	0x0800e618

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800e618 	.word	0x0800e618

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b974 	b.w	8000ccc <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468e      	mov	lr, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14d      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	d969      	bls.n	8000ae4 <__udivmoddi4+0xe8>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b152      	cbz	r2, 8000a2c <__udivmoddi4+0x30>
 8000a16:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1a:	f1c2 0120 	rsb	r1, r2, #32
 8000a1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a26:	ea41 0e03 	orr.w	lr, r1, r3
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	0c21      	lsrs	r1, r4, #16
 8000a32:	fbbe f6f8 	udiv	r6, lr, r8
 8000a36:	fa1f f78c 	uxth.w	r7, ip
 8000a3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a42:	fb06 f107 	mul.w	r1, r6, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a52:	f080 811f 	bcs.w	8000c94 <__udivmoddi4+0x298>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 811c 	bls.w	8000c94 <__udivmoddi4+0x298>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3310 	mls	r3, r8, r0, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb00 f707 	mul.w	r7, r0, r7
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a80:	f080 810a 	bcs.w	8000c98 <__udivmoddi4+0x29c>
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	f240 8107 	bls.w	8000c98 <__udivmoddi4+0x29c>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a92:	1be4      	subs	r4, r4, r7
 8000a94:	2600      	movs	r6, #0
 8000a96:	b11d      	cbz	r5, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0xc2>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	f000 80ef 	beq.w	8000c8e <__udivmoddi4+0x292>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	fab3 f683 	clz	r6, r3
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d14a      	bne.n	8000b5c <__udivmoddi4+0x160>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xd4>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80f9 	bhi.w	8000cc2 <__udivmoddi4+0x2c6>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	469e      	mov	lr, r3
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e0      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000ade:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ae2:	e7dd      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000ae4:	b902      	cbnz	r2, 8000ae8 <__udivmoddi4+0xec>
 8000ae6:	deff      	udf	#255	; 0xff
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f040 8092 	bne.w	8000c16 <__udivmoddi4+0x21a>
 8000af2:	eba1 010c 	sub.w	r1, r1, ip
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f fe8c 	uxth.w	lr, ip
 8000afe:	2601      	movs	r6, #1
 8000b00:	0c20      	lsrs	r0, r4, #16
 8000b02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b06:	fb07 1113 	mls	r1, r7, r3, r1
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	fb0e f003 	mul.w	r0, lr, r3
 8000b12:	4288      	cmp	r0, r1
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x12c>
 8000b16:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x12a>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f200 80cb 	bhi.w	8000cbc <__udivmoddi4+0x2c0>
 8000b26:	4643      	mov	r3, r8
 8000b28:	1a09      	subs	r1, r1, r0
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b30:	fb07 1110 	mls	r1, r7, r0, r1
 8000b34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b38:	fb0e fe00 	mul.w	lr, lr, r0
 8000b3c:	45a6      	cmp	lr, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x156>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x154>
 8000b4a:	45a6      	cmp	lr, r4
 8000b4c:	f200 80bb 	bhi.w	8000cc6 <__udivmoddi4+0x2ca>
 8000b50:	4608      	mov	r0, r1
 8000b52:	eba4 040e 	sub.w	r4, r4, lr
 8000b56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b5c:	f1c6 0720 	rsb	r7, r6, #32
 8000b60:	40b3      	lsls	r3, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b72:	431c      	orrs	r4, r3
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b82:	0c20      	lsrs	r0, r4, #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b90:	fb08 f00e 	mul.w	r0, r8, lr
 8000b94:	4288      	cmp	r0, r1
 8000b96:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9a:	d90b      	bls.n	8000bb4 <__udivmoddi4+0x1b8>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba4:	f080 8088 	bcs.w	8000cb8 <__udivmoddi4+0x2bc>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f240 8085 	bls.w	8000cb8 <__udivmoddi4+0x2bc>
 8000bae:	f1a8 0802 	sub.w	r8, r8, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1a09      	subs	r1, r1, r0
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	458e      	cmp	lr, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x1e2>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd4:	d26c      	bcs.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bd6:	458e      	cmp	lr, r1
 8000bd8:	d96a      	bls.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	fba0 9402 	umull	r9, r4, r0, r2
 8000be6:	eba1 010e 	sub.w	r1, r1, lr
 8000bea:	42a1      	cmp	r1, r4
 8000bec:	46c8      	mov	r8, r9
 8000bee:	46a6      	mov	lr, r4
 8000bf0:	d356      	bcc.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bf2:	d053      	beq.n	8000c9c <__udivmoddi4+0x2a0>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x212>
 8000bf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000c02:	fa22 f306 	lsr.w	r3, r2, r6
 8000c06:	40f1      	lsrs	r1, r6
 8000c08:	431f      	orrs	r7, r3
 8000c0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa21 f303 	lsr.w	r3, r1, r3
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4301      	orrs	r1, r0
 8000c28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2c:	fa1f fe8c 	uxth.w	lr, ip
 8000c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c34:	fb07 3610 	mls	r6, r7, r0, r3
 8000c38:	0c0b      	lsrs	r3, r1, #16
 8000c3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c42:	429e      	cmp	r6, r3
 8000c44:	fa04 f402 	lsl.w	r4, r4, r2
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x260>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c52:	d22f      	bcs.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c54:	429e      	cmp	r6, r3
 8000c56:	d92d      	bls.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	b289      	uxth	r1, r1
 8000c60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c64:	fb07 3316 	mls	r3, r7, r6, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x28a>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c7c:	d216      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d914      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c82:	3e02      	subs	r6, #2
 8000c84:	4461      	add	r1, ip
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c8c:	e738      	b.n	8000b00 <__udivmoddi4+0x104>
 8000c8e:	462e      	mov	r6, r5
 8000c90:	4628      	mov	r0, r5
 8000c92:	e705      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c94:	4606      	mov	r6, r0
 8000c96:	e6e3      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c98:	4618      	mov	r0, r3
 8000c9a:	e6f8      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c9c:	454b      	cmp	r3, r9
 8000c9e:	d2a9      	bcs.n	8000bf4 <__udivmoddi4+0x1f8>
 8000ca0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e7a3      	b.n	8000bf4 <__udivmoddi4+0x1f8>
 8000cac:	4646      	mov	r6, r8
 8000cae:	e7ea      	b.n	8000c86 <__udivmoddi4+0x28a>
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	e794      	b.n	8000bde <__udivmoddi4+0x1e2>
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	e7d1      	b.n	8000c5c <__udivmoddi4+0x260>
 8000cb8:	46d0      	mov	r8, sl
 8000cba:	e77b      	b.n	8000bb4 <__udivmoddi4+0x1b8>
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	e732      	b.n	8000b28 <__udivmoddi4+0x12c>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e709      	b.n	8000ada <__udivmoddi4+0xde>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e742      	b.n	8000b52 <__udivmoddi4+0x156>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <main>:
/***********************************************************************************
* Function: main														   		   *
* Description: Defined in the linker file as the start of the application.         *
************************************************************************************/
int main()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	/* Calls for system initialization. */
	SystemManager_Init();
 8000cd4:	f00d f9f6 	bl	800e0c4 <SystemManager_Init>
	/* Initialize the kernel of FreeRTOS. */
	osKernelInitialize();
 8000cd8:	f009 f9b2 	bl	800a040 <osKernelInitialize>
	/* Initialize the FreeRTOS with all its objects.*/
	MX_FREERTOS_Init();
 8000cdc:	f001 fe94 	bl	8002a08 <MX_FREERTOS_Init>
	/* Start the kernel and the scheduler and FreeRTOS takes
	 * control of the application execution. */
	osKernelStart();
 8000ce0:	f009 f9d2 	bl	800a088 <osKernelStart>
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <Btc_RequestState>:
/***********************************************************************************
* Function: Btc_RequestState													   *
* Description: Process bluetooth command for request state 					       *
************************************************************************************/
VOID Btc_RequestState()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	if(Btc_ReceivedDataOnBluetooth == 99)
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <Btc_RequestState+0x14>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b63      	cmp	r3, #99	; 0x63
 8000cf6:	d101      	bne.n	8000cfc <Btc_RequestState+0x10>
	{
		SystemManager_PerformReset();
 8000cf8:	f00d fa1c 	bl	800e134 <SystemManager_PerformReset>
	}
	else
	{
		/* do nothing */
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000b2 	.word	0x200000b2

08000d04 <Btc_RxVal>:
/***********************************************************************************
* Function: Btc_RxVal													   		   *
* Description: Process bluetooth commands.	 		   							   *
************************************************************************************/
VOID Btc_RxVal()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 8000d08:	f00c fcae 	bl	800d668 <Crc_VerifyUartData>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 81a7 	bne.w	8001062 <Btc_RxVal+0x35e>
	{
		/* Process the command on each case and update the respective variable. */
		switch(Btc_ReceivedDataOnBluetooth)
 8000d14:	4bb0      	ldr	r3, [pc, #704]	; (8000fd8 <Btc_RxVal+0x2d4>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	2b19      	cmp	r3, #25
 8000d1c:	f200 8157 	bhi.w	8000fce <Btc_RxVal+0x2ca>
 8000d20:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <Btc_RxVal+0x24>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000e21 	.word	0x08000e21
 8000d2c:	08000e2f 	.word	0x08000e2f
 8000d30:	08000e3d 	.word	0x08000e3d
 8000d34:	08000e5b 	.word	0x08000e5b
 8000d38:	08000fcf 	.word	0x08000fcf
 8000d3c:	08000fcf 	.word	0x08000fcf
 8000d40:	08000e73 	.word	0x08000e73
 8000d44:	08000e97 	.word	0x08000e97
 8000d48:	08000eaf 	.word	0x08000eaf
 8000d4c:	08000ed3 	.word	0x08000ed3
 8000d50:	08000eeb 	.word	0x08000eeb
 8000d54:	08000f03 	.word	0x08000f03
 8000d58:	08000f1b 	.word	0x08000f1b
 8000d5c:	08000f33 	.word	0x08000f33
 8000d60:	08000f4b 	.word	0x08000f4b
 8000d64:	08000f61 	.word	0x08000f61
 8000d68:	08000f77 	.word	0x08000f77
 8000d6c:	08000f8d 	.word	0x08000f8d
 8000d70:	08000fa3 	.word	0x08000fa3
 8000d74:	08000fb9 	.word	0x08000fb9
 8000d78:	08000d91 	.word	0x08000d91
 8000d7c:	08000da9 	.word	0x08000da9
 8000d80:	08000dc1 	.word	0x08000dc1
 8000d84:	08000dd9 	.word	0x08000dd9
 8000d88:	08000df1 	.word	0x08000df1
 8000d8c:	08000e09 	.word	0x08000e09
		{
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000d90:	4b92      	ldr	r3, [pc, #584]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f040 811c 	bne.w	8000fd2 <Btc_RxVal+0x2ce>
				{
					Btc_ReverseLight = STD_HIGH;
 8000d9a:	4b91      	ldr	r3, [pc, #580]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8000da0:	488f      	ldr	r0, [pc, #572]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000da2:	f00c faf5 	bl	800d390 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000da6:	e114      	b.n	8000fd2 <Btc_RxVal+0x2ce>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000da8:	4b8c      	ldr	r3, [pc, #560]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	f040 812f 	bne.w	8001010 <Btc_RxVal+0x30c>
				{
					Btc_ReverseLight = STD_LOW;
 8000db2:	4b8b      	ldr	r3, [pc, #556]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8000db8:	4889      	ldr	r0, [pc, #548]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000dba:	f00c fae9 	bl	800d390 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000dbe:	e127      	b.n	8001010 <Btc_RxVal+0x30c>
			case BTC_RX_EXTLIGHTS_POSITIONZERO:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000dc0:	4b86      	ldr	r3, [pc, #536]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	f040 8125 	bne.w	8001014 <Btc_RxVal+0x310>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000dca:	4b86      	ldr	r3, [pc, #536]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dcc:	2217      	movs	r2, #23
 8000dce:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000dd0:	4884      	ldr	r0, [pc, #528]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dd2:	f00c fafd 	bl	800d3d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000dd6:	e11d      	b.n	8001014 <Btc_RxVal+0x310>
			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000dd8:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	f040 811b 	bne.w	8001018 <Btc_RxVal+0x314>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8000de2:	4b80      	ldr	r3, [pc, #512]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000de4:	2218      	movs	r2, #24
 8000de6:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000de8:	487e      	ldr	r0, [pc, #504]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dea:	f00c faf1 	bl	800d3d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000dee:	e113      	b.n	8001018 <Btc_RxVal+0x314>
			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000df0:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	f040 8111 	bne.w	800101c <Btc_RxVal+0x318>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8000dfa:	4b7a      	ldr	r3, [pc, #488]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dfc:	2219      	movs	r2, #25
 8000dfe:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000e00:	4878      	ldr	r0, [pc, #480]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000e02:	f00c fae5 	bl	800d3d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e06:	e109      	b.n	800101c <Btc_RxVal+0x318>
			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e08:	4b74      	ldr	r3, [pc, #464]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	f040 8107 	bne.w	8001020 <Btc_RxVal+0x31c>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 8000e12:	4b74      	ldr	r3, [pc, #464]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000e14:	221a      	movs	r2, #26
 8000e16:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000e18:	4872      	ldr	r0, [pc, #456]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000e1a:	f00c fad9 	bl	800d3d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e1e:	e0ff      	b.n	8001020 <Btc_RxVal+0x31c>
			case BTC_RX_CENLOC_ON:
				Btc_CenLoc = STD_HIGH;
 8000e20:	4b71      	ldr	r3, [pc, #452]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000e26:	4870      	ldr	r0, [pc, #448]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e28:	f00c fa92 	bl	800d350 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8000e2c:	e119      	b.n	8001062 <Btc_RxVal+0x35e>
			case BTC_RX_CENLOC_OFF:
				Btc_CenLoc = STD_LOW;
 8000e2e:	4b6e      	ldr	r3, [pc, #440]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000e34:	486c      	ldr	r0, [pc, #432]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e36:	f00c fa8b 	bl	800d350 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8000e3a:	e112      	b.n	8001062 <Btc_RxVal+0x35e>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e3c:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	f040 80ef 	bne.w	8001024 <Btc_RxVal+0x320>
				{
					Btc_HighBeam = STD_HIGH;
 8000e46:	4b69      	ldr	r3, [pc, #420]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
					Btc_FlashHighBeam = STD_LOW;
 8000e4c:	4b68      	ldr	r3, [pc, #416]	; (8000ff0 <Btc_RxVal+0x2ec>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8000e52:	4866      	ldr	r0, [pc, #408]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e54:	f00c facc 	bl	800d3f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e58:	e0e4      	b.n	8001024 <Btc_RxVal+0x320>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e5a:	4b60      	ldr	r3, [pc, #384]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	f040 80e2 	bne.w	8001028 <Btc_RxVal+0x324>
				{
					Btc_HighBeam = STD_LOW;
 8000e64:	4b61      	ldr	r3, [pc, #388]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8000e6a:	4860      	ldr	r0, [pc, #384]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e6c:	f00c fac0 	bl	800d3f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e70:	e0da      	b.n	8001028 <Btc_RxVal+0x324>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e72:	4b5a      	ldr	r3, [pc, #360]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	f040 80d8 	bne.w	800102c <Btc_RxVal+0x328>
				{
					Btc_TurnSignalLeft = STD_HIGH;
 8000e7c:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalRight = STD_LOW;
 8000e82:	4b5d      	ldr	r3, [pc, #372]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000e88:	485a      	ldr	r0, [pc, #360]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000e8a:	f00c fad1 	bl	800d430 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000e8e:	485a      	ldr	r0, [pc, #360]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000e90:	f00c fade 	bl	800d450 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e94:	e0ca      	b.n	800102c <Btc_RxVal+0x328>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e96:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	f040 80c8 	bne.w	8001030 <Btc_RxVal+0x32c>
				{
					Btc_TurnSignalLeft = STD_LOW;
 8000ea0:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000ea6:	4853      	ldr	r0, [pc, #332]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ea8:	f00c fac2 	bl	800d430 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000eac:	e0c0      	b.n	8001030 <Btc_RxVal+0x32c>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000eae:	4b4b      	ldr	r3, [pc, #300]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	f040 80be 	bne.w	8001034 <Btc_RxVal+0x330>
				{
					Btc_TurnSignalRight = STD_HIGH;
 8000eb8:	4b4f      	ldr	r3, [pc, #316]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalLeft = STD_LOW;
 8000ebe:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000ec4:	484b      	ldr	r0, [pc, #300]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ec6:	f00c fab3 	bl	800d430 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000eca:	484b      	ldr	r0, [pc, #300]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000ecc:	f00c fac0 	bl	800d450 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000ed0:	e0b0      	b.n	8001034 <Btc_RxVal+0x330>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000ed2:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	f040 80ae 	bne.w	8001038 <Btc_RxVal+0x334>
				{
					Btc_TurnSignalRight = STD_LOW;
 8000edc:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000ee2:	4845      	ldr	r0, [pc, #276]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000ee4:	f00c fab4 	bl	800d450 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000ee8:	e0a6      	b.n	8001038 <Btc_RxVal+0x334>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000eea:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f040 80a4 	bne.w	800103c <Btc_RxVal+0x338>
				{
					Btc_HazardLight = STD_HIGH;
 8000ef4:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8000efa:	4840      	ldr	r0, [pc, #256]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000efc:	f00c fab8 	bl	800d470 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f00:	e09c      	b.n	800103c <Btc_RxVal+0x338>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	f040 809a 	bne.w	8001040 <Btc_RxVal+0x33c>
				{
					Btc_HazardLight = STD_LOW;
 8000f0c:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8000f12:	483a      	ldr	r0, [pc, #232]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000f14:	f00c faac 	bl	800d470 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f18:	e092      	b.n	8001040 <Btc_RxVal+0x33c>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	f040 8090 	bne.w	8001044 <Btc_RxVal+0x340>
				{
					Btc_FrontFogLight = STD_HIGH;
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 8000f2a:	4835      	ldr	r0, [pc, #212]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f2c:	f00c fa70 	bl	800d410 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f30:	e088      	b.n	8001044 <Btc_RxVal+0x340>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	f040 8086 	bne.w	8001048 <Btc_RxVal+0x344>
				{
					Btc_FrontFogLight = STD_LOW;
 8000f3c:	4b30      	ldr	r3, [pc, #192]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 8000f42:	482f      	ldr	r0, [pc, #188]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f44:	f00c fa64 	bl	800d410 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f48:	e07e      	b.n	8001048 <Btc_RxVal+0x344>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d17c      	bne.n	800104c <Btc_RxVal+0x348>
				{
					Btc_RearFogLight = STD_HIGH;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <Btc_RxVal+0x300>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 8000f58:	482a      	ldr	r0, [pc, #168]	; (8001004 <Btc_RxVal+0x300>)
 8000f5a:	f00c fa99 	bl	800d490 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f5e:	e075      	b.n	800104c <Btc_RxVal+0x348>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d173      	bne.n	8001050 <Btc_RxVal+0x34c>
				{
					Btc_RearFogLight = STD_LOW;
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <Btc_RxVal+0x300>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 8000f6e:	4825      	ldr	r0, [pc, #148]	; (8001004 <Btc_RxVal+0x300>)
 8000f70:	f00c fa8e 	bl	800d490 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f74:	e06c      	b.n	8001050 <Btc_RxVal+0x34c>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d16a      	bne.n	8001054 <Btc_RxVal+0x350>
				{
					Btc_BrakeLight = STD_HIGH;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <Btc_RxVal+0x304>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8000f84:	4820      	ldr	r0, [pc, #128]	; (8001008 <Btc_RxVal+0x304>)
 8000f86:	f00c fa13 	bl	800d3b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f8a:	e063      	b.n	8001054 <Btc_RxVal+0x350>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d161      	bne.n	8001058 <Btc_RxVal+0x354>
				{
					Btc_BrakeLight = STD_LOW;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <Btc_RxVal+0x304>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <Btc_RxVal+0x304>)
 8000f9c:	f00c fa08 	bl	800d3b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fa0:	e05a      	b.n	8001058 <Btc_RxVal+0x354>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d158      	bne.n	800105c <Btc_RxVal+0x358>
				{
					Btc_IntLights = STD_HIGH;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <Btc_RxVal+0x308>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <Btc_RxVal+0x308>)
 8000fb2:	f00c faad 	bl	800d510 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fb6:	e051      	b.n	800105c <Btc_RxVal+0x358>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d14f      	bne.n	8001060 <Btc_RxVal+0x35c>
				{
					Btc_IntLights = STD_LOW;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <Btc_RxVal+0x308>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000fc6:	4811      	ldr	r0, [pc, #68]	; (800100c <Btc_RxVal+0x308>)
 8000fc8:	f00c faa2 	bl	800d510 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fcc:	e048      	b.n	8001060 <Btc_RxVal+0x35c>
			default:
				break;
 8000fce:	bf00      	nop
 8000fd0:	e047      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8000fd2:	bf00      	nop
 8000fd4:	e045      	b.n	8001062 <Btc_RxVal+0x35e>
 8000fd6:	bf00      	nop
 8000fd8:	200000b2 	.word	0x200000b2
 8000fdc:	200000bf 	.word	0x200000bf
 8000fe0:	200000bd 	.word	0x200000bd
 8000fe4:	200000b4 	.word	0x200000b4
 8000fe8:	200000b3 	.word	0x200000b3
 8000fec:	200000b5 	.word	0x200000b5
 8000ff0:	200000b6 	.word	0x200000b6
 8000ff4:	200000b8 	.word	0x200000b8
 8000ff8:	200000b9 	.word	0x200000b9
 8000ffc:	200000ba 	.word	0x200000ba
 8001000:	200000b7 	.word	0x200000b7
 8001004:	200000bc 	.word	0x200000bc
 8001008:	200000bb 	.word	0x200000bb
 800100c:	200000be 	.word	0x200000be
				break;
 8001010:	bf00      	nop
 8001012:	e026      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001014:	bf00      	nop
 8001016:	e024      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001018:	bf00      	nop
 800101a:	e022      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800101c:	bf00      	nop
 800101e:	e020      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001020:	bf00      	nop
 8001022:	e01e      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001024:	bf00      	nop
 8001026:	e01c      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001028:	bf00      	nop
 800102a:	e01a      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800102c:	bf00      	nop
 800102e:	e018      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001030:	bf00      	nop
 8001032:	e016      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001034:	bf00      	nop
 8001036:	e014      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001038:	bf00      	nop
 800103a:	e012      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800103c:	bf00      	nop
 800103e:	e010      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001040:	bf00      	nop
 8001042:	e00e      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001044:	bf00      	nop
 8001046:	e00c      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001048:	bf00      	nop
 800104a:	e00a      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800104c:	bf00      	nop
 800104e:	e008      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001050:	bf00      	nop
 8001052:	e006      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001054:	bf00      	nop
 8001056:	e004      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001058:	bf00      	nop
 800105a:	e002      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800105c:	bf00      	nop
 800105e:	e000      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001060:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop

08001068 <Btc_MainFunction>:
/***********************************************************************************
* Function: Btc_MainFunction											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
VOID Btc_MainFunction()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	Btc_RxVal();
 800106c:	f7ff fe4a 	bl	8000d04 <Btc_RxVal>
	Btc_RequestState();
 8001070:	f7ff fe3c 	bl	8000cec <Btc_RequestState>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <CenLoc_State>:
/***********************************************************************************
* Function: CenLoc_State													   	   *
* Description: Process the current and previous state of the central lock.		   *
************************************************************************************/
VOID CenLoc_State()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	/* Every time the state of the central lock changes
	 * set the alarm to off. */
	CenLoc_SecAlmStateToOff();
 800107c:	f000 f854 	bl	8001128 <CenLoc_SecAlmStateToOff>
	/* If the current state is different than the previous state
	 * update the variables respectively.
	 * Initialize the security alarm application.
	 * Calls for start of OS timer for lock unlock sequence.*/
	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <CenLoc_State+0x88>)
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <CenLoc_State+0x8c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d036      	beq.n	80010fa <CenLoc_State+0x82>
	{
		CenLoc_PreviousStateFlag 	= CenLoc_PreviousState;
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <CenLoc_State+0x88>)
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <CenLoc_State+0x90>)
 8001092:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 		= CenLoc_CurrentState;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <CenLoc_State+0x8c>)
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <CenLoc_State+0x88>)
 800109a:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter 		= STD_LOW;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <CenLoc_State+0x94>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter 	= STD_LOW;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <CenLoc_State+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
		CenLoc_CyclicAlarmCounter	= STD_LOW;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <CenLoc_State+0x9c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
		CenLoc_TurnOnLedCounter		= STD_LOW;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <CenLoc_State+0xa0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80010b4:	f001 f942 	bl	800233c <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <CenLoc_State+0xa4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	21fa      	movs	r1, #250	; 0xfa
 80010be:	4618      	mov	r0, r3
 80010c0:	f00c faa7 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <CenLoc_State+0x94>)
 80010c6:	f00c f827 	bl	800d118 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 80010ca:	4812      	ldr	r0, [pc, #72]	; (8001114 <CenLoc_State+0x9c>)
 80010cc:	f00c f834 	bl	800d138 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 80010d0:	4811      	ldr	r0, [pc, #68]	; (8001118 <CenLoc_State+0xa0>)
 80010d2:	f00c f841 	bl	800d158 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <CenLoc_State+0x98>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00c f84c 	bl	800d178 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <CenLoc_State+0xa8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00c faa1 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <CenLoc_State+0xac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00c fa9c 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f001 f95f 	bl	80023b8 <SecAlm_ToggleAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000c0 	.word	0x200000c0
 8001104:	200000bf 	.word	0x200000bf
 8001108:	200000c7 	.word	0x200000c7
 800110c:	200000c3 	.word	0x200000c3
 8001110:	200000c5 	.word	0x200000c5
 8001114:	200000c4 	.word	0x200000c4
 8001118:	200000c6 	.word	0x200000c6
 800111c:	20000268 	.word	0x20000268
 8001120:	2000026c 	.word	0x2000026c
 8001124:	20000270 	.word	0x20000270

08001128 <CenLoc_SecAlmStateToOff>:
/***********************************************************************************
* Function: CenLoc_SecAlmStateToOff												   *
* Description: Turn off the security alarm.										   *
************************************************************************************/
VOID CenLoc_SecAlmStateToOff()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	/* The central lock is on, the security alarm goes off. */
	if(CenLoc_CurrentState == STD_HIGH)
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <CenLoc_SecAlmStateToOff+0x14>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <CenLoc_SecAlmStateToOff+0x10>
	{
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8001134:	f001 f902 	bl	800233c <SecAlm_Init>
	}
	else
	{
		/* do nothing */
	}
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000bf 	.word	0x200000bf

08001140 <CenLoc_FollowMeHome>:
/***********************************************************************************
* Function: CenLoc_FollowMeHome												       *
* Description: Process the state of the follow me home.					 		   *
************************************************************************************/
VOID CenLoc_FollowMeHome()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	/* Follow me home is on as long as the timer is on. */
	if(CenLoc_FollowMeHomeCounter == 1)
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d103      	bne.n	8001154 <CenLoc_FollowMeHome+0x14>
	{
		CenLoc_FollowMeHomeState = STD_HIGH;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <CenLoc_FollowMeHome+0x44>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001152:	e013      	b.n	800117c <CenLoc_FollowMeHome+0x3c>
	else if(CenLoc_FollowMeHomeCounter == 2)
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d10f      	bne.n	800117c <CenLoc_FollowMeHome+0x3c>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <CenLoc_FollowMeHome+0x48>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f00c fa63 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		CenLoc_FollowMeHomeState = STD_LOW;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <CenLoc_FollowMeHome+0x44>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter = 2;
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 800116e:	2202      	movs	r2, #2
 8001170:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f00b fffe 	bl	800d178 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000c5 	.word	0x200000c5
 8001184:	200000c1 	.word	0x200000c1
 8001188:	20000274 	.word	0x20000274

0800118c <CenLoc_UnlockSequence>:
/***********************************************************************************
* Function: CenLoc_UnlockSequence												   *
* Description: Process the unlock sequence. 		   							   *
************************************************************************************/
VOID CenLoc_UnlockSequence()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/* Stop the timer used for the security alarm LED. */
	Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 8001190:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <CenLoc_UnlockSequence+0x12c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f00c fa49 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	/* Process follow me home state. */
	CenLoc_FollowMeHome();
 800119a:	f7ff ffd1 	bl	8001140 <CenLoc_FollowMeHome>
	/* Sets previous state to high so that on locking it is taken into consideration. */
	localPreviousState = STD_HIGH;
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <CenLoc_UnlockSequence+0x130>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
	/* Unlocking sequence consists of triggering the hazard lights twice on and twice off.*/
	if(CenLoc_BlinkCounter <= 3)
 80011a4:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d871      	bhi.n	8001290 <CenLoc_UnlockSequence+0x104>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80011ac:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <CenLoc_UnlockSequence+0x138>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00c fa2c 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == STD_LOW)
 80011ba:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <CenLoc_UnlockSequence+0x13c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f009 f911 	bl	800a3e6 <osTimerIsRunning>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d106      	bne.n	80011d8 <CenLoc_UnlockSequence+0x4c>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 20000);
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <CenLoc_UnlockSequence+0x13c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f644 6120 	movw	r1, #20000	; 0x4e20
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00c fa1d 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = STD_HIGH;
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <CenLoc_UnlockSequence+0x140>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <CenLoc_UnlockSequence+0x140>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00b ffc8 	bl	800d178 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and the buzzer. */
		switch(CenLoc_BlinkCounter)
 80011e8:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d85f      	bhi.n	80012b0 <CenLoc_UnlockSequence+0x124>
 80011f0:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <CenLoc_UnlockSequence+0x6c>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	08001209 	.word	0x08001209
 80011fc:	0800122b 	.word	0x0800122b
 8001200:	0800124d 	.word	0x0800124d
 8001204:	0800126f 	.word	0x0800126f
		{
			case 0:
				CenLoc_BlinkState = STD_HIGH;
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800120e:	2108      	movs	r1, #8
 8001210:	4830      	ldr	r0, [pc, #192]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001212:	f00c f82b 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001216:	210c      	movs	r1, #12
 8001218:	482e      	ldr	r0, [pc, #184]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 800121a:	f00c f827 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f964 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 8001228:	e043      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			case 1:
				CenLoc_BlinkState = STD_LOW;
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001230:	2108      	movs	r1, #8
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001234:	f00c f81a 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001238:	210c      	movs	r1, #12
 800123a:	4826      	ldr	r0, [pc, #152]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 800123c:	f00c f816 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f953 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800124a:	e032      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			case 2:
				CenLoc_BlinkState = STD_HIGH;
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001252:	2108      	movs	r1, #8
 8001254:	481f      	ldr	r0, [pc, #124]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001256:	f00c f809 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800125a:	210c      	movs	r1, #12
 800125c:	481d      	ldr	r0, [pc, #116]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 800125e:	f00c f805 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f942 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800126c:	e021      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			case 3:
				CenLoc_BlinkState = STD_LOW;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001274:	2108      	movs	r1, #8
 8001276:	4817      	ldr	r0, [pc, #92]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001278:	f00b fff8 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800127c:	210c      	movs	r1, #12
 800127e:	4815      	ldr	r0, [pc, #84]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001280:	f00b fff4 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f931 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800128e:	e010      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			default:
				break;
		}
	}/* After the sequence is completed, stop the timers and set the variables related to this sequence to out of bounds values to prevent triggering when not requested. */
	else if(CenLoc_BlinkCounter >= 3)
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d90c      	bls.n	80012b2 <CenLoc_UnlockSequence+0x126>
	{
		CenLoc_BlinkState = 2;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800129a:	2202      	movs	r2, #2
 800129c:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 6;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 80012a0:	2206      	movs	r2, #6
 80012a2:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <CenLoc_UnlockSequence+0x14c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00c f9bf 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	}
	else
	{
		/* do nothing */
	}
}
 80012ae:	e000      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
				break;
 80012b0:	bf00      	nop
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000026c 	.word	0x2000026c
 80012bc:	200000c8 	.word	0x200000c8
 80012c0:	200000c3 	.word	0x200000c3
 80012c4:	20000278 	.word	0x20000278
 80012c8:	20000274 	.word	0x20000274
 80012cc:	200000c5 	.word	0x200000c5
 80012d0:	200000c2 	.word	0x200000c2
 80012d4:	200004b0 	.word	0x200004b0
 80012d8:	20000268 	.word	0x20000268

080012dc <CenLoc_LockSequence>:
/***********************************************************************************
* Function: CenLoc_LockSequence													   *
* Description: Process the lock sequence.								 		   *
************************************************************************************/
VOID CenLoc_LockSequence()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	/* Process follow me home state.*/
	CenLoc_FollowMeHome();
 80012e0:	f7ff ff2e 	bl	8001140 <CenLoc_FollowMeHome>
	/* If the central lock has been on previously
	 * and the variable related to the state of the timer is less than the value of
	 * how many times the hazard lights should turn on on locking, proceed with the processing. */
	if(CenLoc_BlinkCounter <= STD_HIGH && localPreviousState == STD_HIGH)
 80012e4:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d84f      	bhi.n	800138c <CenLoc_LockSequence+0xb0>
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <CenLoc_LockSequence+0xdc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d14b      	bne.n	800138c <CenLoc_LockSequence+0xb0>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80012f4:	4b31      	ldr	r3, [pc, #196]	; (80013bc <CenLoc_LockSequence+0xe0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00c f988 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == STD_LOW)
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <CenLoc_LockSequence+0xe4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f009 f86d 	bl	800a3e6 <osTimerIsRunning>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d106      	bne.n	8001320 <CenLoc_LockSequence+0x44>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 20000);
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <CenLoc_LockSequence+0xe4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f644 6120 	movw	r1, #20000	; 0x4e20
 800131a:	4618      	mov	r0, r3
 800131c:	f00c f979 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = STD_HIGH;
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <CenLoc_LockSequence+0xe8>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <CenLoc_LockSequence+0xe8>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f00b ff24 	bl	800d178 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and buzzer. */
		switch(CenLoc_BlinkCounter)
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <CenLoc_LockSequence+0x62>
 8001338:	2b01      	cmp	r3, #1
 800133a:	d011      	beq.n	8001360 <CenLoc_LockSequence+0x84>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
				localPreviousState = STD_LOW;
				break;
			default:
				break;
 800133c:	e024      	b.n	8001388 <CenLoc_LockSequence+0xac>
				CenLoc_BlinkState = STD_HIGH;
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001344:	2108      	movs	r1, #8
 8001346:	4821      	ldr	r0, [pc, #132]	; (80013cc <CenLoc_LockSequence+0xf0>)
 8001348:	f00b ff90 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800134c:	210c      	movs	r1, #12
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <CenLoc_LockSequence+0xf0>)
 8001350:	f00b ff8c 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f8c9 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800135e:	e013      	b.n	8001388 <CenLoc_LockSequence+0xac>
				CenLoc_BlinkState = STD_LOW;
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001366:	2108      	movs	r1, #8
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <CenLoc_LockSequence+0xf0>)
 800136a:	f00b ff7f 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800136e:	210c      	movs	r1, #12
 8001370:	4816      	ldr	r0, [pc, #88]	; (80013cc <CenLoc_LockSequence+0xf0>)
 8001372:	f00b ff7b 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f8b8 	bl	80014f0 <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <CenLoc_LockSequence+0xdc>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
				break;
 8001386:	bf00      	nop
		switch(CenLoc_BlinkCounter)
 8001388:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 800138a:	e011      	b.n	80013b0 <CenLoc_LockSequence+0xd4>
	else if(CenLoc_BlinkCounter == 2)
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d10d      	bne.n	80013b0 <CenLoc_LockSequence+0xd4>
		CenLoc_BlinkState = 2;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 4;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 800139c:	2204      	movs	r2, #4
 800139e:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 80013a2:	f00b feb9 	bl	800d118 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <CenLoc_LockSequence+0xf4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00c f93e 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200000c3 	.word	0x200000c3
 80013b8:	200000c8 	.word	0x200000c8
 80013bc:	20000278 	.word	0x20000278
 80013c0:	20000274 	.word	0x20000274
 80013c4:	200000c5 	.word	0x200000c5
 80013c8:	200000c2 	.word	0x200000c2
 80013cc:	200004b0 	.word	0x200004b0
 80013d0:	20000268 	.word	0x20000268

080013d4 <CenLoc_ControlAlarmLed>:
/***********************************************************************************
* Function: CenLoc_ControlAlarmLed												   *
* Description: Controls the security alarm LED 		   							   *
************************************************************************************/
VOID CenLoc_ControlAlarmLed()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	/* Check if the central lock state is set to high. */
	if(CenLoc_CurrentState == STD_HIGH)
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <CenLoc_ControlAlarmLed+0xc4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10b      	bne.n	80013f8 <CenLoc_ControlAlarmLed+0x24>
	{
		/* Set the security alarm LED to off. */
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 ffe9 	bl	80023b8 <SecAlm_ToggleAlarmLed>
		/* Set the timer flag to 0. */
		CenLoc_TurnOnLedCounter = STD_LOW;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
		/* Stop the timer related to the LED cyclic trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00c f91b 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		else
		{
			/* do nothing */
		}
	}
}
 80013f6:	e04c      	b.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
	else if(CenLoc_CurrentState == STD_LOW)
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <CenLoc_ControlAlarmLed+0xc4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d148      	bne.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLed_TurnOnCyclic_TimerHandle) == STD_LOW && Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == STD_LOW)
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <CenLoc_ControlAlarmLed+0xd0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f008 ffee 	bl	800a3e6 <osTimerIsRunning>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10e      	bne.n	800142e <CenLoc_ControlAlarmLed+0x5a>
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f008 ffe6 	bl	800a3e6 <osTimerIsRunning>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <CenLoc_ControlAlarmLed+0x5a>
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLed_TurnOnCyclic_TimerHandle, 3750);
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <CenLoc_ControlAlarmLed+0xd0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f640 61a6 	movw	r1, #3750	; 0xea6
 8001428:	4618      	mov	r0, r3
 800142a:	f00c f8f2 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		if(CenLoc_CyclicAlarmCounter == STD_HIGH)
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <CenLoc_ControlAlarmLed+0xd4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d12d      	bne.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
			if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == STD_LOW)
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f008 ffd3 	bl	800a3e6 <osTimerIsRunning>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLedTurnOn_TimerHandle, 250);
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	21fa      	movs	r1, #250	; 0xfa
 800144c:	4618      	mov	r0, r3
 800144e:	f00c f8e0 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
			if(CenLoc_TurnOnLedCounter < STD_HIGH)
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <CenLoc_ControlAlarmLed+0x8e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 800145a:	2001      	movs	r0, #1
 800145c:	f000 ffac 	bl	80023b8 <SecAlm_ToggleAlarmLed>
}
 8001460:	e017      	b.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
			else if(CenLoc_TurnOnLedCounter == STD_HIGH)
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d113      	bne.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 800146a:	2000      	movs	r0, #0
 800146c:	f000 ffa4 	bl	80023b8 <SecAlm_ToggleAlarmLed>
				CenLoc_TurnOnLedCounter = STD_LOW;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
				CenLoc_CyclicAlarmCounter = STD_LOW;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <CenLoc_ControlAlarmLed+0xd4>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
				Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 800147c:	480a      	ldr	r0, [pc, #40]	; (80014a8 <CenLoc_ControlAlarmLed+0xd4>)
 800147e:	f00b fe5b 	bl	800d138 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
				Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001484:	f00b fe68 	bl	800d158 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f00c f8cd 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000bf 	.word	0x200000bf
 800149c:	200000c6 	.word	0x200000c6
 80014a0:	20000270 	.word	0x20000270
 80014a4:	2000026c 	.word	0x2000026c
 80014a8:	200000c4 	.word	0x200000c4

080014ac <CenLoc_LockUnlockStates>:
/***********************************************************************************
* Function: CenLoc_LockUnlockStates												   *
* Description: Check for the state of the central lock.					 		   *
************************************************************************************/
VOID CenLoc_LockUnlockStates()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	/* If the central lock state is set to high and the security alarm is set to off. */
	if(CenLoc_CurrentState == STD_HIGH && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <CenLoc_LockUnlockStates+0x3c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <CenLoc_LockUnlockStates+0x1e>
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <CenLoc_LockUnlockStates+0x40>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d104      	bne.n	80014ca <CenLoc_LockUnlockStates+0x1e>
	{
		/* Perform the related activities. */
		CenLoc_UnlockSequence();
 80014c0:	f7ff fe64 	bl	800118c <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 80014c4:	f7ff ff86 	bl	80013d4 <CenLoc_ControlAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 80014c8:	e00b      	b.n	80014e2 <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <CenLoc_LockUnlockStates+0x3c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d107      	bne.n	80014e2 <CenLoc_LockUnlockStates+0x36>
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <CenLoc_LockUnlockStates+0x40>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 80014da:	f7ff feff 	bl	80012dc <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 80014de:	f7ff ff79 	bl	80013d4 <CenLoc_ControlAlarmLed>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000bf 	.word	0x200000bf
 80014ec:	20000110 	.word	0x20000110

080014f0 <CenLoc_ToggleBuzzer>:
/***********************************************************************************
* Function: CenLoc_ToggleBuzzer													   *
* Description: Trigger central lock buzzer. 		   							   *
************************************************************************************/
VOID CenLoc_ToggleBuzzer(uint8 PinState)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	461a      	mov	r2, r3
 80014fe:	2104      	movs	r1, #4
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <CenLoc_ToggleBuzzer+0x20>)
 8001502:	f00c f874 	bl	800d5ee <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40020400 	.word	0x40020400

08001514 <CenLoc_MainFunction>:
/***********************************************************************************
* Function: CenLoc_MainFunction													   *
* Description: Central lock main function. Process the states of the application.  *
************************************************************************************/
VOID CenLoc_MainFunction()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	CenLoc_State();
 8001518:	f7ff fdae 	bl	8001078 <CenLoc_State>
	CenLoc_LockUnlockStates();
 800151c:	f7ff ffc6 	bl	80014ac <CenLoc_LockUnlockStates>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <DiagCtrl_MainFunction>:
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	DiagCtrl_ProcessRequestedData();
 8001528:	f000 f802 	bl	8001530 <DiagCtrl_ProcessRequestedData>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <DiagCtrl_ProcessRequestedData>:
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	static uint8 I2cOneLcd_FaultValue_Four = 0;
	static uint8 I2cOneLcd_FaultValue_Five = 0;
	static uint8 I2cOneLcd_FaultValue_Six = 0;
	static uint8 I2cOneLcd_FaultValue_Seven = 0;
	static uint8 I2cOneLcd_FaultValue_Eight = 0;
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
 8001534:	2100      	movs	r1, #0
 8001536:	4845      	ldr	r0, [pc, #276]	; (800164c <DiagCtrl_ProcessRequestedData+0x11c>)
 8001538:	f00b fee6 	bl	800d308 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
 800153c:	2101      	movs	r1, #1
 800153e:	4844      	ldr	r0, [pc, #272]	; (8001650 <DiagCtrl_ProcessRequestedData+0x120>)
 8001540:	f00b fee2 	bl	800d308 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_One, 17);
 8001544:	2111      	movs	r1, #17
 8001546:	4843      	ldr	r0, [pc, #268]	; (8001654 <DiagCtrl_ProcessRequestedData+0x124>)
 8001548:	f00b fd54 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Two, 18);
 800154c:	2112      	movs	r1, #18
 800154e:	4842      	ldr	r0, [pc, #264]	; (8001658 <DiagCtrl_ProcessRequestedData+0x128>)
 8001550:	f00b fd50 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Three, 19);
 8001554:	2113      	movs	r1, #19
 8001556:	4841      	ldr	r0, [pc, #260]	; (800165c <DiagCtrl_ProcessRequestedData+0x12c>)
 8001558:	f00b fd4c 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Four, 20);
 800155c:	2114      	movs	r1, #20
 800155e:	4840      	ldr	r0, [pc, #256]	; (8001660 <DiagCtrl_ProcessRequestedData+0x130>)
 8001560:	f00b fd48 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_One, 33);
 8001564:	2121      	movs	r1, #33	; 0x21
 8001566:	483f      	ldr	r0, [pc, #252]	; (8001664 <DiagCtrl_ProcessRequestedData+0x134>)
 8001568:	f00b fd44 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Two, 34);
 800156c:	2122      	movs	r1, #34	; 0x22
 800156e:	483e      	ldr	r0, [pc, #248]	; (8001668 <DiagCtrl_ProcessRequestedData+0x138>)
 8001570:	f00b fd40 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Three, 35);
 8001574:	2123      	movs	r1, #35	; 0x23
 8001576:	483d      	ldr	r0, [pc, #244]	; (800166c <DiagCtrl_ProcessRequestedData+0x13c>)
 8001578:	f00b fd3c 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Four, 36);
 800157c:	2124      	movs	r1, #36	; 0x24
 800157e:	483c      	ldr	r0, [pc, #240]	; (8001670 <DiagCtrl_ProcessRequestedData+0x140>)
 8001580:	f00b fd38 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Five, 37);
 8001584:	2125      	movs	r1, #37	; 0x25
 8001586:	483b      	ldr	r0, [pc, #236]	; (8001674 <DiagCtrl_ProcessRequestedData+0x144>)
 8001588:	f00b fd34 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Six, 38);
 800158c:	2126      	movs	r1, #38	; 0x26
 800158e:	483a      	ldr	r0, [pc, #232]	; (8001678 <DiagCtrl_ProcessRequestedData+0x148>)
 8001590:	f00b fd30 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Seven, 39);
 8001594:	2127      	movs	r1, #39	; 0x27
 8001596:	4839      	ldr	r0, [pc, #228]	; (800167c <DiagCtrl_ProcessRequestedData+0x14c>)
 8001598:	f00b fd2c 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Eight, 40);
 800159c:	2128      	movs	r1, #40	; 0x28
 800159e:	4838      	ldr	r0, [pc, #224]	; (8001680 <DiagCtrl_ProcessRequestedData+0x150>)
 80015a0:	f00b fd28 	bl	800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>

	if(BtcUart_FaultValue_One != 0 ||
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <DiagCtrl_ProcessRequestedData+0x124>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10b      	bne.n	80015c4 <DiagCtrl_ProcessRequestedData+0x94>
			BtcUart_FaultValue_Two != 0 ||
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <DiagCtrl_ProcessRequestedData+0x128>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
	if(BtcUart_FaultValue_One != 0 ||
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d107      	bne.n	80015c4 <DiagCtrl_ProcessRequestedData+0x94>
			BtcUart_FaultValue_Three != 0 ||
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <DiagCtrl_ProcessRequestedData+0x12c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Two != 0 ||
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d103      	bne.n	80015c4 <DiagCtrl_ProcessRequestedData+0x94>
			BtcUart_FaultValue_Four != 0)
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <DiagCtrl_ProcessRequestedData+0x130>)
 80015be:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Three != 0 ||
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <DiagCtrl_ProcessRequestedData+0x9a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_BLUETOOTH_MODULE_MALFUNCTION);
 80015c4:	2022      	movs	r0, #34	; 0x22
 80015c6:	f002 fb4d 	bl	8003c64 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cOneLcd_FaultValue_One != 0 ||
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <DiagCtrl_ProcessRequestedData+0x134>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d11b      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Two != 0 ||
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <DiagCtrl_ProcessRequestedData+0x138>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
	if(I2cOneLcd_FaultValue_One != 0 ||
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d117      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Three != 0 ||
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <DiagCtrl_ProcessRequestedData+0x13c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Two != 0 ||
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d113      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Four != 0 ||
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <DiagCtrl_ProcessRequestedData+0x140>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Three != 0 ||
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Five != 0 ||
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <DiagCtrl_ProcessRequestedData+0x144>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Four != 0 ||
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10b      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Six != 0 ||
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <DiagCtrl_ProcessRequestedData+0x148>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Five != 0 ||
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d107      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Seven != 0 ||
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <DiagCtrl_ProcessRequestedData+0x14c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Six != 0 ||
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Eight != 0)
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <DiagCtrl_ProcessRequestedData+0x150>)
 8001604:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Seven != 0 ||
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <DiagCtrl_ProcessRequestedData+0xe0>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LCD_MODULE_MALFUNCTION);
 800160a:	2062      	movs	r0, #98	; 0x62
 800160c:	f002 fb2a 	bl	8003c64 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(LightSensor_RequestedValue < 100)
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <DiagCtrl_ProcessRequestedData+0x11c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b63      	cmp	r3, #99	; 0x63
 8001616:	d802      	bhi.n	800161e <DiagCtrl_ProcessRequestedData+0xee>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
 8001618:	2003      	movs	r0, #3
 800161a:	f002 fb23 	bl	8003c64 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(VibrationSensor_RequestedValue < 100)
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <DiagCtrl_ProcessRequestedData+0x120>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b63      	cmp	r3, #99	; 0x63
 8001624:	d802      	bhi.n	800162c <DiagCtrl_ProcessRequestedData+0xfc>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
 8001626:	2013      	movs	r0, #19
 8001628:	f002 fb1c 	bl	8003c64 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <DiagCtrl_ProcessRequestedData+0x154>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <DiagCtrl_ProcessRequestedData+0x10a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001634:	2012      	movs	r0, #18
 8001636:	f002 fb15 	bl	8003c64 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <DiagCtrl_ProcessRequestedData+0x158>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <DiagCtrl_ProcessRequestedData+0x118>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001642:	2002      	movs	r0, #2
 8001644:	f002 fb0e 	bl	8003c64 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200000cc 	.word	0x200000cc
 8001650:	200000d0 	.word	0x200000d0
 8001654:	200000d4 	.word	0x200000d4
 8001658:	200000d5 	.word	0x200000d5
 800165c:	200000d6 	.word	0x200000d6
 8001660:	200000d7 	.word	0x200000d7
 8001664:	200000d8 	.word	0x200000d8
 8001668:	200000d9 	.word	0x200000d9
 800166c:	200000da 	.word	0x200000da
 8001670:	200000db 	.word	0x200000db
 8001674:	200000dc 	.word	0x200000dc
 8001678:	200000dd 	.word	0x200000dd
 800167c:	200000de 	.word	0x200000de
 8001680:	200000df 	.word	0x200000df
 8001684:	200006c5 	.word	0x200006c5
 8001688:	200006d5 	.word	0x200006d5

0800168c <ExtLights_TurnSignalHazardLight>:
/***********************************************************************************
* Function: ExtLights_TurnSignalHazardLight										   *
* Description: Process the turn signals and hazard lights states. 		   		   *
************************************************************************************/
VOID ExtLights_TurnSignalHazardLight()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	/* If the turn signal left is set on. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <ExtLights_TurnSignalHazardLight+0x138>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d123      	bne.n	80016e0 <ExtLights_TurnSignalHazardLight+0x54>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f008 fea2 	bl	800a3e6 <osTimerIsRunning>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d106      	bne.n	80016b6 <ExtLights_TurnSignalHazardLight+0x2a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80016a8:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00b ffae 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_LTSFlag % 2 == 1)
 80016b6:	4b45      	ldr	r3, [pc, #276]	; (80017cc <ExtLights_TurnSignalHazardLight+0x140>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <ExtLights_TurnSignalHazardLight+0x40>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80016c2:	2108      	movs	r1, #8
 80016c4:	4842      	ldr	r0, [pc, #264]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80016c6:	f00b fdd1 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80016ca:	e009      	b.n	80016e0 <ExtLights_TurnSignalHazardLight+0x54>
		}
		else if(ExtLights_LTSFlag % 2 == 0)
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <ExtLights_TurnSignalHazardLight+0x140>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d103      	bne.n	80016e0 <ExtLights_TurnSignalHazardLight+0x54>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80016d8:	2108      	movs	r1, #8
 80016da:	483d      	ldr	r0, [pc, #244]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80016dc:	f00b fdd3 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the turn signal right is set on. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <ExtLights_TurnSignalHazardLight+0x148>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d123      	bne.n	8001730 <ExtLights_TurnSignalHazardLight+0xa4>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f008 fe7a 	bl	800a3e6 <osTimerIsRunning>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d106      	bne.n	8001706 <ExtLights_TurnSignalHazardLight+0x7a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001700:	4618      	mov	r0, r3
 8001702:	f00b ff86 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_RTSFlag % 2 == 1)
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <ExtLights_TurnSignalHazardLight+0x14c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d004      	beq.n	800171c <ExtLights_TurnSignalHazardLight+0x90>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001712:	210c      	movs	r1, #12
 8001714:	482e      	ldr	r0, [pc, #184]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 8001716:	f00b fda9 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 800171a:	e009      	b.n	8001730 <ExtLights_TurnSignalHazardLight+0xa4>
		}
		else if(ExtLights_RTSFlag % 2 == 0)
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <ExtLights_TurnSignalHazardLight+0x14c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d103      	bne.n	8001730 <ExtLights_TurnSignalHazardLight+0xa4>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001728:	210c      	movs	r1, #12
 800172a:	4829      	ldr	r0, [pc, #164]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 800172c:	f00b fdab 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the hazard light is set on. */
	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <ExtLights_TurnSignalHazardLight+0x150>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d12b      	bne.n	8001790 <ExtLights_TurnSignalHazardLight+0x104>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f008 fe52 	bl	800a3e6 <osTimerIsRunning>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d106      	bne.n	8001756 <ExtLights_TurnSignalHazardLight+0xca>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001750:	4618      	mov	r0, r3
 8001752:	f00b ff5e 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_HLFlag % 2 == 1)
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <ExtLights_TurnSignalHazardLight+0x154>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <ExtLights_TurnSignalHazardLight+0xe8>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001762:	2108      	movs	r1, #8
 8001764:	481a      	ldr	r0, [pc, #104]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 8001766:	f00b fd81 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800176a:	210c      	movs	r1, #12
 800176c:	4818      	ldr	r0, [pc, #96]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 800176e:	f00b fd7d 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001772:	e00d      	b.n	8001790 <ExtLights_TurnSignalHazardLight+0x104>
		}
		else if(ExtLights_HLFlag % 2 == 0)
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <ExtLights_TurnSignalHazardLight+0x154>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <ExtLights_TurnSignalHazardLight+0x104>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001780:	2108      	movs	r1, #8
 8001782:	4813      	ldr	r0, [pc, #76]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 8001784:	f00b fd7f 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001788:	210c      	movs	r1, #12
 800178a:	4811      	ldr	r0, [pc, #68]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 800178c:	f00b fd7b 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <ExtLights_TurnSignalHazardLight+0x148>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <ExtLights_TurnSignalHazardLight+0x11c>
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <ExtLights_TurnSignalHazardLight+0x150>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <ExtLights_TurnSignalHazardLight+0x11c>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80017a0:	210c      	movs	r1, #12
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80017a4:	f00b fd6f 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <ExtLights_TurnSignalHazardLight+0x138>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <ExtLights_TurnSignalHazardLight+0x134>
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <ExtLights_TurnSignalHazardLight+0x150>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d103      	bne.n	80017c0 <ExtLights_TurnSignalHazardLight+0x134>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80017b8:	2108      	movs	r1, #8
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80017bc:	f00b fd63 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	else
	{
		/* do nothing */
	}
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200000e6 	.word	0x200000e6
 80017c8:	20000278 	.word	0x20000278
 80017cc:	200000f4 	.word	0x200000f4
 80017d0:	200004b0 	.word	0x200004b0
 80017d4:	200000e7 	.word	0x200000e7
 80017d8:	200000f0 	.word	0x200000f0
 80017dc:	200000ea 	.word	0x200000ea
 80017e0:	200000f8 	.word	0x200000f8

080017e4 <ExtLights_PrevStateTSHL>:
* Function: ExtLights_PrevStateTSHL										           *
* Description: Checks the current state and previous state of turn signals and     *
* 			   hazard lights. 		   											   *
************************************************************************************/
VOID ExtLights_PrevStateTSHL()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <ExtLights_PrevStateTSHL+0x68>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <ExtLights_PrevStateTSHL+0x6c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d009      	beq.n	8001808 <ExtLights_PrevStateTSHL+0x24>
	{
		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <ExtLights_PrevStateTSHL+0x68>)
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <ExtLights_PrevStateTSHL+0x6c>)
 80017fa:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <ExtLights_PrevStateTSHL+0x70>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Lts_Counter(&ExtLights_LTSFlag);
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <ExtLights_PrevStateTSHL+0x70>)
 8001804:	f00b fcc8 	bl	800d198 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <ExtLights_PrevStateTSHL+0x74>)
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <ExtLights_PrevStateTSHL+0x78>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d009      	beq.n	8001828 <ExtLights_PrevStateTSHL+0x44>
	{
		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <ExtLights_PrevStateTSHL+0x74>)
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <ExtLights_PrevStateTSHL+0x78>)
 800181a:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <ExtLights_PrevStateTSHL+0x7c>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Rts_Counter(&ExtLights_RTSFlag);
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <ExtLights_PrevStateTSHL+0x7c>)
 8001824:	f00b fcc8 	bl	800d1b8 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <ExtLights_PrevStateTSHL+0x80>)
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <ExtLights_PrevStateTSHL+0x84>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d009      	beq.n	8001848 <ExtLights_PrevStateTSHL+0x64>
	{
		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <ExtLights_PrevStateTSHL+0x80>)
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <ExtLights_PrevStateTSHL+0x84>)
 800183a:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <ExtLights_PrevStateTSHL+0x88>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_HL_Counter(&ExtLights_HLFlag);
 8001842:	480a      	ldr	r0, [pc, #40]	; (800186c <ExtLights_PrevStateTSHL+0x88>)
 8001844:	f00b fcc8 	bl	800d1d8 <Rte_Write_Os_R_OsPort_Os_HL_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200000e6 	.word	0x200000e6
 8001850:	200000ed 	.word	0x200000ed
 8001854:	200000f4 	.word	0x200000f4
 8001858:	200000e7 	.word	0x200000e7
 800185c:	200000ec 	.word	0x200000ec
 8001860:	200000f0 	.word	0x200000f0
 8001864:	200000ea 	.word	0x200000ea
 8001868:	200000ee 	.word	0x200000ee
 800186c:	200000f8 	.word	0x200000f8

08001870 <ExtLights_LightState>:
/***********************************************************************************
* Function: ExtLights_LightState										   		   *
* Description: Controls the lights states.								 		   *
************************************************************************************/
VOID ExtLights_LightState()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	/* Process turn signals state. */
	ExtLights_PrevStateTSHL();
 8001874:	f7ff ffb6 	bl	80017e4 <ExtLights_PrevStateTSHL>
	/* Follow me home is on, then turn on the respective lights. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8001878:	4b9d      	ldr	r3, [pc, #628]	; (8001af0 <ExtLights_LightState+0x280>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d110      	bne.n	80018a2 <ExtLights_LightState+0x32>
	{
		ExtLights_LightSwitchMode();
 8001880:	f000 f966 	bl	8001b50 <ExtLights_LightSwitchMode>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001884:	2100      	movs	r1, #0
 8001886:	489b      	ldr	r0, [pc, #620]	; (8001af4 <ExtLights_LightState+0x284>)
 8001888:	f00b fcf0 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800188c:	2104      	movs	r1, #4
 800188e:	4899      	ldr	r0, [pc, #612]	; (8001af4 <ExtLights_LightState+0x284>)
 8001890:	f00b fcec 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001894:	4b98      	ldr	r3, [pc, #608]	; (8001af8 <ExtLights_LightState+0x288>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
		ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 800189a:	4b98      	ldr	r3, [pc, #608]	; (8001afc <ExtLights_LightState+0x28c>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e017      	b.n	80018d2 <ExtLights_LightState+0x62>
	}/* Follow me home is off, turn off the lights.*/
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 80018a2:	4b93      	ldr	r3, [pc, #588]	; (8001af0 <ExtLights_LightState+0x280>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d113      	bne.n	80018d2 <ExtLights_LightState+0x62>
	{
		ExtLights_LightSwitchMode();
 80018aa:	f000 f951 	bl	8001b50 <ExtLights_LightSwitchMode>
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 80018ae:	4b94      	ldr	r3, [pc, #592]	; (8001b00 <ExtLights_LightState+0x290>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <ExtLights_LightState+0x62>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80018b6:	2100      	movs	r1, #0
 80018b8:	488e      	ldr	r0, [pc, #568]	; (8001af4 <ExtLights_LightState+0x284>)
 80018ba:	f00b fce4 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80018be:	2104      	movs	r1, #4
 80018c0:	488c      	ldr	r0, [pc, #560]	; (8001af4 <ExtLights_LightState+0x284>)
 80018c2:	f00b fce0 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 80018c6:	4b8c      	ldr	r3, [pc, #560]	; (8001af8 <ExtLights_LightState+0x288>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80018cc:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <ExtLights_LightState+0x28c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If any light state is set to on, then stop the follow me home. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 80018d2:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <ExtLights_LightState+0x294>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d017      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 80018da:	4b8b      	ldr	r3, [pc, #556]	; (8001b08 <ExtLights_LightState+0x298>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d013      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 80018e2:	4b87      	ldr	r3, [pc, #540]	; (8001b00 <ExtLights_LightState+0x290>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10f      	bne.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 80018ea:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <ExtLights_LightState+0x29c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d00b      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 80018f2:	4b87      	ldr	r3, [pc, #540]	; (8001b10 <ExtLights_LightState+0x2a0>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d007      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 80018fa:	4b86      	ldr	r3, [pc, #536]	; (8001b14 <ExtLights_LightState+0x2a4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d003      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001902:	4b85      	ldr	r3, [pc, #532]	; (8001b18 <ExtLights_LightState+0x2a8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8001906:	2b01      	cmp	r3, #1
 8001908:	d11a      	bne.n	8001940 <ExtLights_LightState+0xd0>
	{
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 800190a:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <ExtLights_LightState+0x290>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <ExtLights_LightState+0xd0>
		{
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(STD_LOW);
 8001912:	2000      	movs	r0, #0
 8001914:	f00b fd2c 	bl	800d370 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(2);
 8001918:	2002      	movs	r0, #2
 800191a:	f00b fbbd 	bl	800d098 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
			Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(2);
 800191e:	2002      	movs	r0, #2
 8001920:	f00b fc2a 	bl	800d178 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001924:	2100      	movs	r1, #0
 8001926:	4873      	ldr	r0, [pc, #460]	; (8001af4 <ExtLights_LightState+0x284>)
 8001928:	f00b fcad 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800192c:	2104      	movs	r1, #4
 800192e:	4871      	ldr	r0, [pc, #452]	; (8001af4 <ExtLights_LightState+0x284>)
 8001930:	f00b fca9 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <ExtLights_LightState+0x288>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800193a:	4b70      	ldr	r3, [pc, #448]	; (8001afc <ExtLights_LightState+0x28c>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* Control the turn signals for the central lock lock unlock sequence when requested. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <ExtLights_LightState+0x2ac>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d108      	bne.n	800195a <ExtLights_LightState+0xea>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001948:	2108      	movs	r1, #8
 800194a:	4875      	ldr	r0, [pc, #468]	; (8001b20 <ExtLights_LightState+0x2b0>)
 800194c:	f00b fc8e 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001950:	210c      	movs	r1, #12
 8001952:	4873      	ldr	r0, [pc, #460]	; (8001b20 <ExtLights_LightState+0x2b0>)
 8001954:	f00b fc8a 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001958:	e016      	b.n	8001988 <ExtLights_LightState+0x118>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 800195a:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <ExtLights_LightState+0x2ac>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <ExtLights_LightState+0x104>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001962:	2108      	movs	r1, #8
 8001964:	486e      	ldr	r0, [pc, #440]	; (8001b20 <ExtLights_LightState+0x2b0>)
 8001966:	f00b fc8e 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800196a:	210c      	movs	r1, #12
 800196c:	486c      	ldr	r0, [pc, #432]	; (8001b20 <ExtLights_LightState+0x2b0>)
 800196e:	f00b fc8a 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
 8001972:	e009      	b.n	8001988 <ExtLights_LightState+0x118>
	}/* Allows for turning on the hazard lights or turn signals independently of other states in the system. */
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8001974:	4b69      	ldr	r3, [pc, #420]	; (8001b1c <ExtLights_LightState+0x2ac>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d003      	beq.n	8001984 <ExtLights_LightState+0x114>
 800197c:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <ExtLights_LightState+0x2ac>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d101      	bne.n	8001988 <ExtLights_LightState+0x118>
	{
		ExtLights_TurnSignalHazardLight();
 8001984:	f7ff fe82 	bl	800168c <ExtLights_TurnSignalHazardLight>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_FlashHighBeam_CurrentState == STD_HIGH)
 8001988:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <ExtLights_LightState+0x298>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d103      	bne.n	8001998 <ExtLights_LightState+0x128>
	{
		ExtLights_HighBeam(STD_HIGH);
 8001990:	2001      	movs	r0, #1
 8001992:	f000 f9cd 	bl	8001d30 <ExtLights_HighBeam>
 8001996:	e006      	b.n	80019a6 <ExtLights_LightState+0x136>
	}
	else if(ExtLights_FlashHighBeam_CurrentState == STD_LOW)
 8001998:	4b5b      	ldr	r3, [pc, #364]	; (8001b08 <ExtLights_LightState+0x298>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <ExtLights_LightState+0x136>
	{
		ExtLights_HighBeam(STD_LOW);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 f9c5 	bl	8001d30 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_HighBeam_CurrentState == STD_HIGH)
 80019a6:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <ExtLights_LightState+0x29c>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d103      	bne.n	80019b6 <ExtLights_LightState+0x146>
	{
		ExtLights_HighBeam(STD_HIGH);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f000 f9be 	bl	8001d30 <ExtLights_HighBeam>
 80019b4:	e006      	b.n	80019c4 <ExtLights_LightState+0x154>
	}
	else if(ExtLights_HighBeam_CurrentState == STD_LOW)
 80019b6:	4b55      	ldr	r3, [pc, #340]	; (8001b0c <ExtLights_LightState+0x29c>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <ExtLights_LightState+0x154>
	{
		ExtLights_HighBeam(STD_LOW);
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f9b6 	bl	8001d30 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the brake lights. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH)
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <ExtLights_LightState+0x294>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d111      	bne.n	80019f0 <ExtLights_LightState+0x180>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 80019cc:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <ExtLights_LightState+0x294>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b54      	ldr	r3, [pc, #336]	; (8001b24 <ExtLights_LightState+0x2b4>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d006      	beq.n	80019e6 <ExtLights_LightState+0x176>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <ExtLights_LightState+0x294>)
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <ExtLights_LightState+0x2b4>)
 80019de:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f00b fab9 	bl	800cf58 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 80019e6:	2104      	movs	r1, #4
 80019e8:	484f      	ldr	r0, [pc, #316]	; (8001b28 <ExtLights_LightState+0x2b8>)
 80019ea:	f00b fc3f 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80019ee:	e014      	b.n	8001a1a <ExtLights_LightState+0x1aa>
	}
	else if(ExtLights_BrakeLight_CurrentState == STD_LOW)
 80019f0:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <ExtLights_LightState+0x294>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d110      	bne.n	8001a1a <ExtLights_LightState+0x1aa>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <ExtLights_LightState+0x294>)
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <ExtLights_LightState+0x2b4>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d006      	beq.n	8001a12 <ExtLights_LightState+0x1a2>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8001a04:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <ExtLights_LightState+0x294>)
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <ExtLights_LightState+0x2b4>)
 8001a0a:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f00b faa3 	bl	800cf58 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 8001a12:	2104      	movs	r1, #4
 8001a14:	4844      	ldr	r0, [pc, #272]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a16:	f00b fc36 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the rear fog lights. */
	if(ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d111      	bne.n	8001a46 <ExtLights_LightState+0x1d6>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d006      	beq.n	8001a3c <ExtLights_LightState+0x1cc>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a34:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f00b faae 	bl	800cf98 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001a3c:	210c      	movs	r1, #12
 8001a3e:	483a      	ldr	r0, [pc, #232]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a40:	f00b fc14 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001a44:	e014      	b.n	8001a70 <ExtLights_LightState+0x200>
	}
	else if(ExtLights_RearFogLight_CurrentState == STD_LOW)
 8001a46:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d110      	bne.n	8001a70 <ExtLights_LightState+0x200>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d006      	beq.n	8001a68 <ExtLights_LightState+0x1f8>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a60:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f00b fa98 	bl	800cf98 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001a68:	210c      	movs	r1, #12
 8001a6a:	482f      	ldr	r0, [pc, #188]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a6c:	f00b fc0b 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the front fog lights. */
	if(ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d111      	bne.n	8001a9c <ExtLights_LightState+0x22c>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d006      	beq.n	8001a92 <ExtLights_LightState+0x222>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001a8a:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f00b fa73 	bl	800cf78 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001a92:	2108      	movs	r1, #8
 8001a94:	4824      	ldr	r0, [pc, #144]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a96:	f00b fbe9 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001a9a:	e014      	b.n	8001ac6 <ExtLights_LightState+0x256>
	}
	else if(ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d110      	bne.n	8001ac6 <ExtLights_LightState+0x256>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d006      	beq.n	8001abe <ExtLights_LightState+0x24e>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001ab6:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f00b fa5d 	bl	800cf78 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001abe:	2108      	movs	r1, #8
 8001ac0:	4819      	ldr	r0, [pc, #100]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001ac2:	f00b fbe0 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on the reverse light. */
	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <ExtLights_LightState+0x2cc>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f942 	bl	8001d54 <ExtLights_ReverseLight>

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <ExtLights_LightState+0x2d0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d108      	bne.n	8001aea <ExtLights_LightState+0x27a>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <ExtLights_LightState+0x2cc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000c1 	.word	0x200000c1
 8001af4:	20000348 	.word	0x20000348
 8001af8:	200000e8 	.word	0x200000e8
 8001afc:	200000e9 	.word	0x200000e9
 8001b00:	200000e3 	.word	0x200000e3
 8001b04:	200000e2 	.word	0x200000e2
 8001b08:	200000e1 	.word	0x200000e1
 8001b0c:	200000e4 	.word	0x200000e4
 8001b10:	200000e6 	.word	0x200000e6
 8001b14:	200000e7 	.word	0x200000e7
 8001b18:	200000ea 	.word	0x200000ea
 8001b1c:	200000c2 	.word	0x200000c2
 8001b20:	200004b0 	.word	0x200004b0
 8001b24:	20000102 	.word	0x20000102
 8001b28:	200003fc 	.word	0x200003fc
 8001b2c:	200000eb 	.word	0x200000eb
 8001b30:	20000100 	.word	0x20000100
 8001b34:	200000e5 	.word	0x200000e5
 8001b38:	20000101 	.word	0x20000101
 8001b3c:	200000e0 	.word	0x200000e0
 8001b40:	200000bf 	.word	0x200000bf

08001b44 <ExtLights_MainFunction>:
* Function: ExtLights_MainFunction										   		   *
* Description: Exterior lights application main function. Controls application	   *
* 			   states. 		   													   *
************************************************************************************/
VOID ExtLights_MainFunction()
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	ExtLights_LightState();
 8001b48:	f7ff fe92 	bl	8001870 <ExtLights_LightState>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <ExtLights_LightSwitchMode>:
/***********************************************************************************
* Function: ExtLights_LightSwitchMode										   	   *
* Description: Control the light switch.								 		   *
************************************************************************************/
VOID ExtLights_LightSwitchMode()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	/* Switch through the light switch states. */
	switch(ExtLights_LightsSwitch_CurrentState)
 8001b54:	4b6e      	ldr	r3, [pc, #440]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	3b17      	subs	r3, #23
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	f200 80d3 	bhi.w	8001d06 <ExtLights_LightSwitchMode+0x1b6>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <ExtLights_LightSwitchMode+0x18>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001bc3 	.word	0x08001bc3
 8001b70:	08001c63 	.word	0x08001c63
 8001b74:	08001cbd 	.word	0x08001cbd
	{
		/* Switch is on position zero, turn off the lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001b78:	4b66      	ldr	r3, [pc, #408]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d00f      	beq.n	8001ba4 <ExtLights_LightSwitchMode+0x54>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001b84:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001b8a:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f00b fa13 	bl	800cfb8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f00b fa1f 	bl	800cfd6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001b98:	4b5f      	ldr	r3, [pc, #380]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	485e      	ldr	r0, [pc, #376]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001ba8:	f00b fb6d 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001bac:	2104      	movs	r1, #4
 8001bae:	485c      	ldr	r0, [pc, #368]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001bb0:	f00b fb69 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001bb4:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001bba:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
			break;
 8001bc0:	e0a4      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
		/* Switch is on position one, turn automatic lights controlled by sensor's input. */
		case EXTLIGHTS_LIGHTSWITCH_STATEONE:
			/* Read the sensor status. */
			if(Rte_P_Os_OsPort_Os_Counter % 39 == 0)
 8001bc2:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <ExtLights_LightSwitchMode+0x1d4>)
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <ExtLights_LightSwitchMode+0x1d8>)
 8001bc8:	fba3 2301 	umull	r2, r3, r3, r1
 8001bcc:	1aca      	subs	r2, r1, r3
 8001bce:	0852      	lsrs	r2, r2, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	095a      	lsrs	r2, r3, #5
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	1aca      	subs	r2, r1, r3
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	d102      	bne.n	8001bea <ExtLights_LightSwitchMode+0x9a>
			{
				Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(EXTLIGHTS_LS_REQUEST);
 8001be4:	2000      	movs	r0, #0
 8001be6:	f000 fbf9 	bl	80023dc <SenCtrl_ProcessSensorValue>
			}
			else
			{
				/* do nothing */
			}
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b48      	ldr	r3, [pc, #288]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d00f      	beq.n	8001c16 <ExtLights_LightSwitchMode+0xc6>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001bfc:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f00b f9da 	bl	800cfb8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f00b f9e6 	bl	800cfd6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001c0a:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}
			/* If the sensor status is on, turn on the lights to on. */
			if(ExtLights_LightSensorState == 1)
 8001c16:	4b45      	ldr	r3, [pc, #276]	; (8001d2c <ExtLights_LightSwitchMode+0x1dc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10e      	bne.n	8001c3c <ExtLights_LightSwitchMode+0xec>
			{
				ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001c24:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	483c      	ldr	r0, [pc, #240]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c2e:	f00b fb1d 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001c32:	2104      	movs	r1, #4
 8001c34:	483a      	ldr	r0, [pc, #232]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c36:	f00b fb19 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				ExtLights_LowBeam_CurrentState = STD_LOW;
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
			}
			break;
 8001c3a:	e066      	b.n	8001d0a <ExtLights_LightSwitchMode+0x1ba>
			else if(ExtLights_LightSensorState != 1)
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <ExtLights_LightSwitchMode+0x1dc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d062      	beq.n	8001d0a <ExtLights_LightSwitchMode+0x1ba>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001c44:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001c50:	2100      	movs	r1, #0
 8001c52:	4833      	ldr	r0, [pc, #204]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c54:	f00b fb17 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4831      	ldr	r0, [pc, #196]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c5c:	f00b fb13 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			break;
 8001c60:	e053      	b.n	8001d0a <ExtLights_LightSwitchMode+0x1ba>
		/* Switch is on position three, turn on position lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETWO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d00f      	beq.n	8001c8e <ExtLights_LightSwitchMode+0x13e>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001c74:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f00b f99e 	bl	800cfb8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f00b f9aa 	bl	800cfd6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4823      	ldr	r0, [pc, #140]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c92:	f00b faeb 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001c96:	2104      	movs	r1, #4
 8001c98:	4821      	ldr	r0, [pc, #132]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c9a:	f00b fae7 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Write_TimH_TimHPort_Tim2Ccr1(500);
 8001c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca2:	f00b f989 	bl	800cfb8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
			Rte_Write_TimH_TimHPort_Tim2Ccr2(1500);
 8001ca6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001caa:	f00b f994 	bl	800cfd6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
			break;
 8001cba:	e027      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
		/* Switch is on position four, turn on night time lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d00f      	beq.n	8001ce8 <ExtLights_LightSwitchMode+0x198>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001cce:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f00b f971 	bl	800cfb8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f00b f97d 	bl	800cfd6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001cec:	f00b fabe 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001cf4:	f00b faba 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
			break;
 8001d04:	e002      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
		default:
			break;
 8001d06:	bf00      	nop
 8001d08:	e000      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
			break;
 8001d0a:	bf00      	nop
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200000e3 	.word	0x200000e3
 8001d14:	20000103 	.word	0x20000103
 8001d18:	200000e8 	.word	0x200000e8
 8001d1c:	200000e9 	.word	0x200000e9
 8001d20:	20000348 	.word	0x20000348
 8001d24:	200001f8 	.word	0x200001f8
 8001d28:	a41a41a5 	.word	0xa41a41a5
 8001d2c:	200000fc 	.word	0x200000fc

08001d30 <ExtLights_HighBeam>:
/***********************************************************************************
* Function: ExtLights_HighBeam										   			   *
* Description: High beam trigger. 		  										   *
************************************************************************************/
VOID ExtLights_HighBeam(uint8 PinState)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <ExtLights_HighBeam+0x20>)
 8001d44:	f00b fc53 	bl	800d5ee <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40020000 	.word	0x40020000

08001d54 <ExtLights_ReverseLight>:
/***********************************************************************************
* Function: ExtLights_ReverseLight										   		   *
* Description: Reverse light trigger. 		   									   *
************************************************************************************/
VOID ExtLights_ReverseLight(uint8 PinState)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <ExtLights_ReverseLight+0x20>)
 8001d68:	f00b fc41 	bl	800d5ee <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020400 	.word	0x40020400

08001d78 <IntLights_RxBtcState>:
/***********************************************************************************
* Function: IntLights_RxBtcState										   		   *
* Description: Process command. 		   		   						           *
************************************************************************************/
VOID IntLights_RxBtcState()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	/* Process the state of the interior lights according to system state. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <IntLights_RxBtcState+0x4c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d102      	bne.n	8001d8a <IntLights_RxBtcState+0x12>
	{
		IntLights_CurrentState = STD_HIGH;
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <IntLights_RxBtcState+0x50>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_LOW)
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <IntLights_RxBtcState+0x4c>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <IntLights_RxBtcState+0x28>
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <IntLights_RxBtcState+0x54>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <IntLights_RxBtcState+0x28>
	{
		IntLights_CurrentState = STD_LOW;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <IntLights_RxBtcState+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_HIGH)
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <IntLights_RxBtcState+0x4c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <IntLights_RxBtcState+0x3e>
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <IntLights_RxBtcState+0x54>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d102      	bne.n	8001db6 <IntLights_RxBtcState+0x3e>
	{
		IntLights_CurrentState = STD_HIGH;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <IntLights_RxBtcState+0x50>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel3);
 8001db6:	2108      	movs	r1, #8
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <IntLights_RxBtcState+0x58>)
 8001dba:	f00b fa57 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200000c1 	.word	0x200000c1
 8001dc8:	20000104 	.word	0x20000104
 8001dcc:	200000be 	.word	0x200000be
 8001dd0:	20000348 	.word	0x20000348

08001dd4 <IntLights_MainFunction>:
/***********************************************************************************
* Function: IntLights_MainFunction										           *
* Description: Interior lights main function for the application and state process.*
************************************************************************************/
VOID IntLights_MainFunction()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	IntLights_RxBtcState();
 8001dd8:	f7ff ffce 	bl	8001d78 <IntLights_RxBtcState>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <Pdc_MainFunction>:
/***********************************************************************************
* Function: Pdc_MainFunction													   *
* Description: Main function application. 		   			                       *
************************************************************************************/
VOID Pdc_MainFunction()
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	if(Rte_P_Btc_BtcPort_Btc_ReverseLight == STD_HIGH)
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <Pdc_MainFunction+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d104      	bne.n	8001df6 <Pdc_MainFunction+0x16>
	{
		Pdc_Front_ProcessData();
 8001dec:	f000 f864 	bl	8001eb8 <Pdc_Front_ProcessData>
		Pdc_Rear_ProcessData();
 8001df0:	f000 f830 	bl	8001e54 <Pdc_Rear_ProcessData>
	}
	else
	{
		/* do nothing */
	}
}
 8001df4:	e01e      	b.n	8001e34 <Pdc_MainFunction+0x54>
	else if(Rte_P_Btc_BtcPort_Btc_ReverseLight == STD_LOW)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <Pdc_MainFunction+0x58>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11a      	bne.n	8001e34 <Pdc_MainFunction+0x54>
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2120      	movs	r1, #32
 8001e02:	480e      	ldr	r0, [pc, #56]	; (8001e3c <Pdc_MainFunction+0x5c>)
 8001e04:	f00b fbf3 	bl	800d5ee <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <Pdc_MainFunction+0x60>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00b fc0d 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <Pdc_MainFunction+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1e:	480a      	ldr	r0, [pc, #40]	; (8001e48 <Pdc_MainFunction+0x68>)
 8001e20:	f00b fbe5 	bl	800d5ee <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <Pdc_MainFunction+0x6c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00b fbff 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <Pdc_MainFunction+0x70>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200000bd 	.word	0x200000bd
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	20000280 	.word	0x20000280
 8001e44:	20000108 	.word	0x20000108
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	20000284 	.word	0x20000284
 8001e50:	2000010c 	.word	0x2000010c

08001e54 <Pdc_Rear_ProcessData>:
/***********************************************************************************
* Function: Pdc_Rear_ProcessData												   *
* Description: Process distance data.		   			                           *
************************************************************************************/
VOID Pdc_Rear_ProcessData()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Rear_Distance = (3 * Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour) / 4;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <Pdc_Rear_ProcessData+0x50>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da00      	bge.n	8001e6a <Pdc_Rear_ProcessData+0x16>
 8001e68:	3303      	adds	r3, #3
 8001e6a:	109b      	asrs	r3, r3, #2
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <Pdc_Rear_ProcessData+0x54>)
 8001e70:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE)
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <Pdc_Rear_ProcessData+0x54>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b14      	cmp	r3, #20
 8001e78:	d801      	bhi.n	8001e7e <Pdc_Rear_ProcessData+0x2a>
	{
		Pdc_Rear_TriggerBuzzer();
 8001e7a:	f000 f851 	bl	8001f20 <Pdc_Rear_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance >= PDC_MAX_DISTANCE)
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <Pdc_Rear_ProcessData+0x54>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b13      	cmp	r3, #19
 8001e84:	d90c      	bls.n	8001ea0 <Pdc_Rear_ProcessData+0x4c>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2120      	movs	r1, #32
 8001e8a:	4808      	ldr	r0, [pc, #32]	; (8001eac <Pdc_Rear_ProcessData+0x58>)
 8001e8c:	f00b fbaf 	bl	800d5ee <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <Pdc_Rear_ProcessData+0x5c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00b fbc9 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <Pdc_Rear_ProcessData+0x60>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200006d5 	.word	0x200006d5
 8001ea8:	20000105 	.word	0x20000105
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	20000280 	.word	0x20000280
 8001eb4:	20000108 	.word	0x20000108

08001eb8 <Pdc_Front_ProcessData>:
/***********************************************************************************
* Function: Pdc_Front_ProcessData												   *
* Description: Process distance data. 		   			                           *
************************************************************************************/
VOID Pdc_Front_ProcessData()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Front_Distance = (3 * Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree) / 4;
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <Pdc_Front_ProcessData+0x54>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da00      	bge.n	8001ece <Pdc_Front_ProcessData+0x16>
 8001ecc:	3303      	adds	r3, #3
 8001ece:	109b      	asrs	r3, r3, #2
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <Pdc_Front_ProcessData+0x58>)
 8001ed4:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE)
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <Pdc_Front_ProcessData+0x58>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b14      	cmp	r3, #20
 8001edc:	d801      	bhi.n	8001ee2 <Pdc_Front_ProcessData+0x2a>
	{
		Pdc_Front_TriggerBuzzer();
 8001ede:	f000 f897 	bl	8002010 <Pdc_Front_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance >= PDC_MAX_DISTANCE)
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <Pdc_Front_ProcessData+0x58>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b13      	cmp	r3, #19
 8001ee8:	d90d      	bls.n	8001f06 <Pdc_Front_ProcessData+0x4e>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <Pdc_Front_ProcessData+0x5c>)
 8001ef2:	f00b fb7c 	bl	800d5ee <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <Pdc_Front_ProcessData+0x60>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00b fb96 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <Pdc_Front_ProcessData+0x64>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200006c5 	.word	0x200006c5
 8001f10:	20000106 	.word	0x20000106
 8001f14:	40020800 	.word	0x40020800
 8001f18:	20000284 	.word	0x20000284
 8001f1c:	2000010c 	.word	0x2000010c

08001f20 <Pdc_Rear_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Rear_TriggerBuzzer												   *
* Description: Control buzzer.		   			                                   *
************************************************************************************/
VOID Pdc_Rear_TriggerBuzzer()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
 8001f24:	4b37      	ldr	r3, [pc, #220]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f008 fa5c 	bl	800a3e6 <osTimerIsRunning>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d139      	bne.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
	{
		switch(PdcR_DistanceRange)
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d833      	bhi.n	8001fa6 <Pdc_Rear_TriggerBuzzer+0x86>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <Pdc_Rear_TriggerBuzzer+0x24>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f6b 	.word	0x08001f6b
 8001f4c:	08001f7f 	.word	0x08001f7f
 8001f50:	08001f93 	.word	0x08001f93
		{
			case 1:
				PdcR_DistanceRange = 0;
 8001f54:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f62:	4618      	mov	r0, r3
 8001f64:	f00b fb55 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001f68:	e01e      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			case 2:
				PdcR_DistanceRange = 0;
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	21fa      	movs	r1, #250	; 0xfa
 8001f76:	4618      	mov	r0, r3
 8001f78:	f00b fb4b 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001f7c:	e014      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			case 3:
				PdcR_DistanceRange = 0;
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	217d      	movs	r1, #125	; 0x7d
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00b fb41 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001f90:	e00a      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			case 4:
				PdcR_DistanceRange = 0;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	214b      	movs	r1, #75	; 0x4b
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00b fb37 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001fa4:	e000      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			default:
				break;
 8001fa6:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE && Pdc_Rear_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b14      	cmp	r3, #20
 8001fae:	d806      	bhi.n	8001fbe <Pdc_Rear_TriggerBuzzer+0x9e>
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d902      	bls.n	8001fbe <Pdc_Rear_TriggerBuzzer+0x9e>
	{
		PdcR_DistanceRange = 1;
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_SECOND_SAFE_DISTANCE)
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b11      	cmp	r3, #17
 8001fc4:	d806      	bhi.n	8001fd4 <Pdc_Rear_TriggerBuzzer+0xb4>
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b0d      	cmp	r3, #13
 8001fcc:	d902      	bls.n	8001fd4 <Pdc_Rear_TriggerBuzzer+0xb4>
	{
		PdcR_DistanceRange = 2;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_THIRD_SAFE_DISTANCE)
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b0e      	cmp	r3, #14
 8001fda:	d806      	bhi.n	8001fea <Pdc_Rear_TriggerBuzzer+0xca>
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b0a      	cmp	r3, #10
 8001fe2:	d902      	bls.n	8001fea <Pdc_Rear_TriggerBuzzer+0xca>
	{
		PdcR_DistanceRange = 3;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Rear_Distance != 0)
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b0b      	cmp	r3, #11
 8001ff0:	d806      	bhi.n	8002000 <Pdc_Rear_TriggerBuzzer+0xe0>
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <Pdc_Rear_TriggerBuzzer+0xe0>
	{
		PdcR_DistanceRange = 4;
 8001ffa:	4b03      	ldr	r3, [pc, #12]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000280 	.word	0x20000280
 8002008:	20000108 	.word	0x20000108
 800200c:	20000105 	.word	0x20000105

08002010 <Pdc_Front_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Front_TriggerBuzzer												   *
* Description: Control buzzer		   			   								   *
************************************************************************************/
VOID Pdc_Front_TriggerBuzzer()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
 8002014:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f008 f9e4 	bl	800a3e6 <osTimerIsRunning>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d139      	bne.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
	{
		switch(PdcF_DistanceRange)
 8002024:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	2b03      	cmp	r3, #3
 800202c:	d833      	bhi.n	8002096 <Pdc_Front_TriggerBuzzer+0x86>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <Pdc_Front_TriggerBuzzer+0x24>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	0800205b 	.word	0x0800205b
 800203c:	0800206f 	.word	0x0800206f
 8002040:	08002083 	.word	0x08002083
		{
			case 1:
				PdcF_DistanceRange = 0;
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002052:	4618      	mov	r0, r3
 8002054:	f00b fadd 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002058:	e01e      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			case 2:
				PdcF_DistanceRange = 0;
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	21fa      	movs	r1, #250	; 0xfa
 8002066:	4618      	mov	r0, r3
 8002068:	f00b fad3 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 800206c:	e014      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			case 3:
				PdcF_DistanceRange = 0;
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	217d      	movs	r1, #125	; 0x7d
 800207a:	4618      	mov	r0, r3
 800207c:	f00b fac9 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002080:	e00a      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			case 4:
				PdcF_DistanceRange = 0;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	214b      	movs	r1, #75	; 0x4b
 800208e:	4618      	mov	r0, r3
 8002090:	f00b fabf 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002094:	e000      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			default:
				break;
 8002096:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE && Pdc_Front_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b14      	cmp	r3, #20
 800209e:	d806      	bhi.n	80020ae <Pdc_Front_TriggerBuzzer+0x9e>
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d902      	bls.n	80020ae <Pdc_Front_TriggerBuzzer+0x9e>
	{
		PdcF_DistanceRange = 1;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_SECOND_SAFE_DISTANCE)
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b11      	cmp	r3, #17
 80020b4:	d806      	bhi.n	80020c4 <Pdc_Front_TriggerBuzzer+0xb4>
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b0d      	cmp	r3, #13
 80020bc:	d902      	bls.n	80020c4 <Pdc_Front_TriggerBuzzer+0xb4>
	{
		PdcF_DistanceRange = 2;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020c0:	2202      	movs	r2, #2
 80020c2:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_THIRD_SAFE_DISTANCE)
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b0e      	cmp	r3, #14
 80020ca:	d806      	bhi.n	80020da <Pdc_Front_TriggerBuzzer+0xca>
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b0a      	cmp	r3, #10
 80020d2:	d902      	bls.n	80020da <Pdc_Front_TriggerBuzzer+0xca>
	{
		PdcF_DistanceRange = 3;
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020d6:	2203      	movs	r2, #3
 80020d8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Front_Distance != 0)
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b0b      	cmp	r3, #11
 80020e0:	d806      	bhi.n	80020f0 <Pdc_Front_TriggerBuzzer+0xe0>
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <Pdc_Front_TriggerBuzzer+0xe0>
	{
		PdcF_DistanceRange = 4;
 80020ea:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020ec:	2204      	movs	r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000284 	.word	0x20000284
 80020f8:	2000010c 	.word	0x2000010c
 80020fc:	20000106 	.word	0x20000106

08002100 <SecAlm_LightsBuzzerControl>:
/***********************************************************************************
* Function: SecAlm_LightsBuzzerControl										       *
* Description: Controls the lights and buzzer in case of alarm trigger. 		   *
************************************************************************************/
VOID SecAlm_LightsBuzzerControl()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint32 sensorStatus = STD_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
	/* Get the sensor status. */
	sensorStatus = SecAlm_VibSenStatus();
 800210a:	f000 f893 	bl	8002234 <SecAlm_VibSenStatus>
 800210e:	4603      	mov	r3, r0
 8002110:	607b      	str	r3, [r7, #4]
	/* If the trigger was previously on and now it is off. */
	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 8002112:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <SecAlm_LightsBuzzerControl+0x110>)
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d006      	beq.n	800212c <SecAlm_LightsBuzzerControl+0x2c>
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <SecAlm_LightsBuzzerControl+0x2c>
	{
		/* Reset the counter. */
		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 8002126:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the counter exceeded the maximum value, reset the variables. */
	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b13      	cmp	r3, #19
 8002132:	d922      	bls.n	800217a <SecAlm_LightsBuzzerControl+0x7a>
	{
		SecAlm_TriggerPreviousState 						= SecAlm_Trigger;
 8002134:	4b37      	ldr	r3, [pc, #220]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	4b35      	ldr	r3, [pc, #212]	; (8002210 <SecAlm_LightsBuzzerControl+0x110>)
 800213a:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter	= STD_HIGH;
 800213c:	4b37      	ldr	r3, [pc, #220]	; (800221c <SecAlm_LightsBuzzerControl+0x11c>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter 	= STD_LOW;
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <SecAlm_LightsBuzzerControl+0x120>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 										= STD_LOW;
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 								= STD_LOW;
 800214e:	4b35      	ldr	r3, [pc, #212]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 					= STD_LOW;
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <SecAlm_LightsBuzzerControl+0x128>)
 800215c:	2200      	movs	r2, #0
 800215e:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 								= STD_LOW;
 8002160:	4b32      	ldr	r3, [pc, #200]	; (800222c <SecAlm_LightsBuzzerControl+0x12c>)
 8002162:	2200      	movs	r2, #0
 8002164:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <SecAlm_LightsBuzzerControl+0x128>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
		/* Stop the os timer assigned to security alarm trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
 800216c:	4b30      	ldr	r3, [pc, #192]	; (8002230 <SecAlm_LightsBuzzerControl+0x130>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f00b fa5b 	bl	800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		/* Turn off the lights to make sure their state is off before any other action. */
		SecAlm_TurnOnExtLights();
 8002176:	f000 f891 	bl	800229c <SecAlm_TurnOnExtLights>
		/* do nothing */
	}
	/* The counter resets every 10 seconds, if a reset of the timer
	 * occurs, then reset the variables related to the security
	 * alarm trigger. */
	if(SecAlm_SensorStatusCounter == STD_LOW)
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <SecAlm_LightsBuzzerControl+0x128>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <SecAlm_LightsBuzzerControl+0x92>
	{
		sensorStatus 	= STD_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the sensor status is high, trigger the alarm. */
	if(sensorStatus == STD_HIGH)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d102      	bne.n	800219e <SecAlm_LightsBuzzerControl+0x9e>
	{
		SecAlm_Trigger = STD_HIGH;
 8002198:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the trigger is set to high, perform alarm triggering. */
	if(SecAlm_Trigger == STD_HIGH)
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d128      	bne.n	80021f8 <SecAlm_LightsBuzzerControl+0xf8>
	{
		/* One alarm cycle is performed consisting of 10 seconds. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmAlarm_TimerHandle) == 0)
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <SecAlm_LightsBuzzerControl+0x130>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f008 f91b 	bl	800a3e6 <osTimerIsRunning>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <SecAlm_LightsBuzzerControl+0xc4>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 500);
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <SecAlm_LightsBuzzerControl+0x130>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021be:	4618      	mov	r0, r3
 80021c0:	f00b fa27 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Cycle between on and off states of buzzer and lights. */
		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <SecAlm_LightsBuzzerControl+0xde>
		{
			SecAlm_PinStateChange = STD_HIGH;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80021d8:	f000 f860 	bl	800229c <SecAlm_TurnOnExtLights>
	}
	else
	{
		/* do nothing */
	}
}
 80021dc:	e013      	b.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10c      	bne.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
			SecAlm_PinStateChange = STD_LOW;
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80021f2:	f000 f853 	bl	800229c <SecAlm_TurnOnExtLights>
}
 80021f6:	e006      	b.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
	else if(SecAlm_Trigger == STD_LOW)
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 8002200:	2000      	movs	r0, #0
 8002202:	f000 f8c7 	bl	8002394 <SecAlm_ToggleAlarmBuzzer>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000119 	.word	0x20000119
 8002214:	20000110 	.word	0x20000110
 8002218:	20000112 	.word	0x20000112
 800221c:	200000c4 	.word	0x200000c4
 8002220:	200000c6 	.word	0x200000c6
 8002224:	20000111 	.word	0x20000111
 8002228:	20000114 	.word	0x20000114
 800222c:	20000116 	.word	0x20000116
 8002230:	2000027c 	.word	0x2000027c

08002234 <SecAlm_VibSenStatus>:
/***********************************************************************************
* Function: SecAlm_VibSenStatus										               *
* Description: Updates the vibration sensor status based on measurements.		   *
************************************************************************************/
StdReturnType SecAlm_VibSenStatus()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint16 sensorStatus = STD_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	80fb      	strh	r3, [r7, #6]
	/* Read the sensor value. */
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(SECALM_VS_REQUEST);
 800223e:	2002      	movs	r0, #2
 8002240:	f000 f8cc 	bl	80023dc <SenCtrl_ProcessSensorValue>
	/* If the sensor was triggered. */
	if(SecAlm_SensorState == STD_HIGH)
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <SecAlm_VibSenStatus+0x5c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10c      	bne.n	8002266 <SecAlm_VibSenStatus+0x32>
	{
		/* Count for how long it has been triggered. */
		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 8002256:	801a      	strh	r2, [r3, #0]
		/* Start the reset timer for the counter variable. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <SecAlm_VibSenStatus+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002260:	4618      	mov	r0, r3
 8002262:	f00b f9d6 	bl	800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
	else
	{
		/* do nothing */
	}
	/* If the sensor was triggered enough times. */
	if(SecAlm_SensorStatusCounter >= 300)
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800226e:	d302      	bcc.n	8002276 <SecAlm_VibSenStatus+0x42>
	{
		/* Set the sensor status to high. */
		sensorStatus = STD_HIGH;
 8002270:	2301      	movs	r3, #1
 8002272:	80fb      	strh	r3, [r7, #6]
 8002274:	e006      	b.n	8002284 <SecAlm_VibSenStatus+0x50>
	}
	else if(SecAlm_SensorStatusCounter < 300)
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800227e:	d201      	bcs.n	8002284 <SecAlm_VibSenStatus+0x50>
	{
		/* Set the sensor status to low. */
		sensorStatus = STD_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	80fb      	strh	r3, [r7, #6]
	else
	{
		/* do nothing */
	}
	/* Return sensor status. */
	return sensorStatus;
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	b2db      	uxtb	r3, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000118 	.word	0x20000118
 8002294:	20000114 	.word	0x20000114
 8002298:	20000264 	.word	0x20000264

0800229c <SecAlm_TurnOnExtLights>:
/***********************************************************************************
* Function: SecAlm_TurnOnExtLights										           *
* Description: Trigger the exterior lights and buzzer.							   *
************************************************************************************/
VOID SecAlm_TurnOnExtLights()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	/* Turn on the lights and the buzzer. */
	if(SecAlm_PinStateChange == STD_HIGH)
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <SecAlm_TurnOnExtLights+0x84>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d118      	bne.n	80022da <SecAlm_TurnOnExtLights+0x3e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80022a8:	2100      	movs	r1, #0
 80022aa:	481e      	ldr	r0, [pc, #120]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022ac:	f00a ffde 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80022b0:	2104      	movs	r1, #4
 80022b2:	481c      	ldr	r0, [pc, #112]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022b4:	f00a ffda 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80022b8:	2108      	movs	r1, #8
 80022ba:	481b      	ldr	r0, [pc, #108]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022bc:	f00a ffd6 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80022c0:	210c      	movs	r1, #12
 80022c2:	4819      	ldr	r0, [pc, #100]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022c4:	f00a ffd2 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80022c8:	2108      	movs	r1, #8
 80022ca:	4818      	ldr	r0, [pc, #96]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 80022cc:	f00a ffce 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80022d0:	210c      	movs	r1, #12
 80022d2:	4816      	ldr	r0, [pc, #88]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 80022d4:	f00a ffca 	bl	800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80022d8:	e01b      	b.n	8002312 <SecAlm_TurnOnExtLights+0x76>
	}
	else if(SecAlm_PinStateChange == STD_LOW)
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <SecAlm_TurnOnExtLights+0x84>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d117      	bne.n	8002312 <SecAlm_TurnOnExtLights+0x76>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80022e2:	2100      	movs	r1, #0
 80022e4:	480f      	ldr	r0, [pc, #60]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022e6:	f00a ffce 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80022ea:	2104      	movs	r1, #4
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022ee:	f00a ffca 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80022f2:	2108      	movs	r1, #8
 80022f4:	480c      	ldr	r0, [pc, #48]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022f6:	f00a ffc6 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80022fa:	210c      	movs	r1, #12
 80022fc:	480a      	ldr	r0, [pc, #40]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022fe:	f00a ffc2 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002302:	2108      	movs	r1, #8
 8002304:	4809      	ldr	r0, [pc, #36]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 8002306:	f00a ffbe 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800230a:	210c      	movs	r1, #12
 800230c:	4807      	ldr	r0, [pc, #28]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 800230e:	f00a ffba 	bl	800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 8002312:	4b03      	ldr	r3, [pc, #12]	; (8002320 <SecAlm_TurnOnExtLights+0x84>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f83c 	bl	8002394 <SecAlm_ToggleAlarmBuzzer>
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000111 	.word	0x20000111
 8002324:	20000348 	.word	0x20000348
 8002328:	200003fc 	.word	0x200003fc
 800232c:	200004b0 	.word	0x200004b0

08002330 <SecAlm_MainFunction>:
/***********************************************************************************
* Function: SecAlm_MainFunction										           	   *
* Description: Process application states.										   *
************************************************************************************/
VOID SecAlm_MainFunction()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	SecAlm_LightsBuzzerControl();
 8002334:	f7ff fee4 	bl	8002100 <SecAlm_LightsBuzzerControl>
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <SecAlm_Init>:
/***********************************************************************************
* Function: SecAlm_Init										                       *
* Description: Initialize the application.										   *
************************************************************************************/
StdReturnType SecAlm_Init()
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	/* Set the variables to 0. */
	SecAlm_Trigger 						= STD_LOW;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <SecAlm_Init+0x3c>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <SecAlm_Init+0x40>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <SecAlm_Init+0x44>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <SecAlm_Init+0x48>)
 8002354:	2200      	movs	r2, #0
 8002356:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus					= STD_LOW;
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <SecAlm_Init+0x4c>)
 800235a:	2200      	movs	r2, #0
 800235c:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorState 					= STD_LOW;
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <SecAlm_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerPreviousState 		= STD_LOW;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <SecAlm_Init+0x54>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
	Rte_Write_Os_R_OsPort_Os_Alarm_Counter(&SecAlm_TriggerIRQCounterForTimer4);
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <SecAlm_Init+0x44>)
 800236c:	f00a ff44 	bl	800d1f8 <Rte_Write_Os_R_OsPort_Os_Alarm_Counter>
	return E_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000110 	.word	0x20000110
 800237c:	20000111 	.word	0x20000111
 8002380:	20000112 	.word	0x20000112
 8002384:	20000114 	.word	0x20000114
 8002388:	20000116 	.word	0x20000116
 800238c:	20000118 	.word	0x20000118
 8002390:	20000119 	.word	0x20000119

08002394 <SecAlm_ToggleAlarmBuzzer>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmBuzzer										       *
* Description: Alarm buzzer trigger.                                               *
************************************************************************************/
VOID SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a6:	4803      	ldr	r0, [pc, #12]	; (80023b4 <SecAlm_ToggleAlarmBuzzer+0x20>)
 80023a8:	f00b f921 	bl	800d5ee <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40020400 	.word	0x40020400

080023b8 <SecAlm_ToggleAlarmLed>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmLed										           *
* Description: Alarm LED trigger.												   *
************************************************************************************/
VOID SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <SecAlm_ToggleAlarmLed+0x20>)
 80023cc:	f00b f90f 	bl	800d5ee <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020400 	.word	0x40020400

080023dc <SenCtrl_ProcessSensorValue>:
/***********************************************************************************
* Function: SenCtrl_ProcessSensorValue									   	       *
* Description: Process the request for the sensor value. 	                       *
************************************************************************************/
VOID SenCtrl_ProcessSensorValue(uint8 request)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
	/* Store request into local variable. */
	uint8 localRequest = request;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	77fb      	strb	r3, [r7, #31]
	/* Process sensor request. */
	switch(localRequest)
 80023ea:	7ffb      	ldrb	r3, [r7, #31]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <SenCtrl_ProcessSensorValue+0x1a>
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d01c      	beq.n	800242e <SenCtrl_ProcessSensorValue+0x52>
			{
				/* do nothing */
			}
			break;
		default:
			break;
 80023f4:	e03a      	b.n	800246c <SenCtrl_ProcessSensorValue+0x90>
			if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] == 4095)
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80023fe:	4293      	cmp	r3, r2
 8002400:	d107      	bne.n	8002412 <SenCtrl_ProcessSensorValue+0x36>
				uint32 localls = 1;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8002406:	f107 0318 	add.w	r3, r7, #24
 800240a:	4618      	mov	r0, r3
 800240c:	f00a fe1a 	bl	800d044 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 8002410:	e029      	b.n	8002466 <SenCtrl_ProcessSensorValue+0x8a>
			else if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] < 4095)
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f640 72fe 	movw	r2, #4094	; 0xffe
 800241a:	4293      	cmp	r3, r2
 800241c:	d823      	bhi.n	8002466 <SenCtrl_ProcessSensorValue+0x8a>
				uint32 localls = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4618      	mov	r0, r3
 8002428:	f00a fe0c 	bl	800d044 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 800242c:	e01b      	b.n	8002466 <SenCtrl_ProcessSensorValue+0x8a>
			if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] == 4095)
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002436:	4293      	cmp	r3, r2
 8002438:	d107      	bne.n	800244a <SenCtrl_ProcessSensorValue+0x6e>
				uint32 localvs = STD_HIGH;
 800243a:	2301      	movs	r3, #1
 800243c:	613b      	str	r3, [r7, #16]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f00a fdec 	bl	800d020 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 8002448:	e00f      	b.n	800246a <SenCtrl_ProcessSensorValue+0x8e>
			else if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] < 4095)
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002452:	4293      	cmp	r3, r2
 8002454:	d809      	bhi.n	800246a <SenCtrl_ProcessSensorValue+0x8e>
				uint32 localvs = STD_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	4618      	mov	r0, r3
 8002460:	f00a fdde 	bl	800d020 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 8002464:	e001      	b.n	800246a <SenCtrl_ProcessSensorValue+0x8e>
			break;
 8002466:	bf00      	nop
 8002468:	e000      	b.n	800246c <SenCtrl_ProcessSensorValue+0x90>
			break;
 800246a:	bf00      	nop
	}
}
 800246c:	bf00      	nop
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	2000011c 	.word	0x2000011c

08002478 <Uart_Init>:
/***********************************************************************************
* Function: Uart_Init										       				   *
* Description: Initialize the protocol.									 		   *
************************************************************************************/
StdReturnType Uart_Init()
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	/* Set the instance. */
	huart1.Instance = USART1;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <Uart_Init+0x50>)
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <Uart_Init+0x54>)
 8002480:	601a      	str	r2, [r3, #0]
	/* Set the baud rate for the protocol. */
	huart1.Init.BaudRate = 9600;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <Uart_Init+0x50>)
 8002484:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002488:	605a      	str	r2, [r3, #4]
	/* Set the number of data bits transmitted or received. */
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <Uart_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
	/* Set the number of stop bits transmitted. */
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <Uart_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
	/* Set the parity mode. */
	huart1.Init.Parity = UART_PARITY_NONE;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <Uart_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
	/* Set the protocol mode. */
	huart1.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <Uart_Init+0x50>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
	/* Set the hardware flow control. */
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <Uart_Init+0x50>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
	/* Set the over sampling value. */
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <Uart_Init+0x50>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
	/* Call for error callback if the initialization is not performed accordingly. */
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ae:	4806      	ldr	r0, [pc, #24]	; (80024c8 <Uart_Init+0x50>)
 80024b0:	f005 fe40 	bl	8008134 <HAL_UART_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <Uart_Init+0x48>
	{
		HAL_UART_ErrorCallback(&huart1);
 80024ba:	4803      	ldr	r0, [pc, #12]	; (80024c8 <Uart_Init+0x50>)
 80024bc:	f000 f8b2 	bl	8002624 <HAL_UART_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000618 	.word	0x20000618
 80024cc:	40011000 	.word	0x40011000

080024d0 <Uart_DeInit>:
/***********************************************************************************
* Function: Uart_DeInit										   					   *
* Description: De-initialize the protocol.									       *
************************************************************************************/
StdReturnType Uart_DeInit()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	/* Call for protocol de-init function. */
	HAL_UART_DeInit(&huart1);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <Uart_DeInit+0x10>)
 80024d6:	f005 fe87 	bl	80081e8 <HAL_UART_DeInit>
	return E_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000618 	.word	0x20000618

080024e4 <Uart_MainFunction>:
/***********************************************************************************
* Function: Uart_MainFunction										   			   *
* Description: Protocol main function.									           *
************************************************************************************/
VOID Uart_MainFunction()
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
	/* Get the error status in local variable. */
	uint32 localState = HAL_UART_GetState(&huart1);
 80024ea:	484b      	ldr	r0, [pc, #300]	; (8002618 <Uart_MainFunction+0x134>)
 80024ec:	f006 fa06 	bl	80088fc <HAL_UART_GetState>
 80024f0:	4603      	mov	r3, r0
 80024f2:	607b      	str	r3, [r7, #4]
	switch(localState)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2be0      	cmp	r3, #224	; 0xe0
 80024f8:	f000 8082 	beq.w	8002600 <Uart_MainFunction+0x11c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2be0      	cmp	r3, #224	; 0xe0
 8002500:	f200 8085 	bhi.w	800260e <Uart_MainFunction+0x12a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b24      	cmp	r3, #36	; 0x24
 8002508:	d850      	bhi.n	80025ac <Uart_MainFunction+0xc8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b24      	cmp	r3, #36	; 0x24
 800250e:	d87e      	bhi.n	800260e <Uart_MainFunction+0x12a>
 8002510:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <Uart_MainFunction+0x34>)
 8002512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002516:	bf00      	nop
 8002518:	080025b5 	.word	0x080025b5
 800251c:	0800260f 	.word	0x0800260f
 8002520:	0800260f 	.word	0x0800260f
 8002524:	0800260f 	.word	0x0800260f
 8002528:	0800260f 	.word	0x0800260f
 800252c:	0800260f 	.word	0x0800260f
 8002530:	0800260f 	.word	0x0800260f
 8002534:	0800260f 	.word	0x0800260f
 8002538:	0800260f 	.word	0x0800260f
 800253c:	0800260f 	.word	0x0800260f
 8002540:	0800260f 	.word	0x0800260f
 8002544:	0800260f 	.word	0x0800260f
 8002548:	0800260f 	.word	0x0800260f
 800254c:	0800260f 	.word	0x0800260f
 8002550:	0800260f 	.word	0x0800260f
 8002554:	0800260f 	.word	0x0800260f
 8002558:	0800260f 	.word	0x0800260f
 800255c:	0800260f 	.word	0x0800260f
 8002560:	0800260f 	.word	0x0800260f
 8002564:	0800260f 	.word	0x0800260f
 8002568:	0800260f 	.word	0x0800260f
 800256c:	0800260f 	.word	0x0800260f
 8002570:	0800260f 	.word	0x0800260f
 8002574:	0800260f 	.word	0x0800260f
 8002578:	0800260f 	.word	0x0800260f
 800257c:	0800260f 	.word	0x0800260f
 8002580:	0800260f 	.word	0x0800260f
 8002584:	0800260f 	.word	0x0800260f
 8002588:	0800260f 	.word	0x0800260f
 800258c:	0800260f 	.word	0x0800260f
 8002590:	0800260f 	.word	0x0800260f
 8002594:	0800260f 	.word	0x0800260f
 8002598:	080025c1 	.word	0x080025c1
 800259c:	080025db 	.word	0x080025db
 80025a0:	080025e3 	.word	0x080025e3
 80025a4:	080025eb 	.word	0x080025eb
 80025a8:	080025d3 	.word	0x080025d3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2ba0      	cmp	r3, #160	; 0xa0
 80025b0:	d01f      	beq.n	80025f2 <Uart_MainFunction+0x10e>
		case HAL_UART_STATE_ERROR:
			Uart_BswState = localState;
			HAL_UART_ErrorCallback(&huart1);
			break;
		default:
			break;
 80025b2:	e02c      	b.n	800260e <Uart_MainFunction+0x12a>
			Uart_BswState = localState;
 80025b4:	4a19      	ldr	r2, [pc, #100]	; (800261c <Uart_MainFunction+0x138>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
			Uart_Init();
 80025ba:	f7ff ff5d 	bl	8002478 <Uart_Init>
			break;
 80025be:	e027      	b.n	8002610 <Uart_MainFunction+0x12c>
			HAL_UART_Receive_IT(&huart1, &Rte_P_Btc_BtcPort_Btc_RxData, 1);
 80025c0:	2201      	movs	r2, #1
 80025c2:	4917      	ldr	r1, [pc, #92]	; (8002620 <Uart_MainFunction+0x13c>)
 80025c4:	4814      	ldr	r0, [pc, #80]	; (8002618 <Uart_MainFunction+0x134>)
 80025c6:	f005 fe8e 	bl	80082e6 <HAL_UART_Receive_IT>
			Uart_BswState = localState;
 80025ca:	4a14      	ldr	r2, [pc, #80]	; (800261c <Uart_MainFunction+0x138>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6013      	str	r3, [r2, #0]
			break;
 80025d0:	e01e      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <Uart_MainFunction+0x138>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6013      	str	r3, [r2, #0]
			break;
 80025d8:	e01a      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025da:	4a10      	ldr	r2, [pc, #64]	; (800261c <Uart_MainFunction+0x138>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6013      	str	r3, [r2, #0]
			break;
 80025e0:	e016      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <Uart_MainFunction+0x138>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6013      	str	r3, [r2, #0]
			break;
 80025e8:	e012      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025ea:	4a0c      	ldr	r2, [pc, #48]	; (800261c <Uart_MainFunction+0x138>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6013      	str	r3, [r2, #0]
			break;
 80025f0:	e00e      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <Uart_MainFunction+0x138>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 80025f8:	4807      	ldr	r0, [pc, #28]	; (8002618 <Uart_MainFunction+0x134>)
 80025fa:	f000 f813 	bl	8002624 <HAL_UART_ErrorCallback>
			break;
 80025fe:	e007      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <Uart_MainFunction+0x138>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 8002606:	4804      	ldr	r0, [pc, #16]	; (8002618 <Uart_MainFunction+0x134>)
 8002608:	f000 f80c 	bl	8002624 <HAL_UART_ErrorCallback>
			break;
 800260c:	e000      	b.n	8002610 <Uart_MainFunction+0x12c>
			break;
 800260e:	bf00      	nop
	}
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000618 	.word	0x20000618
 800261c:	20000124 	.word	0x20000124
 8002620:	200000b0 	.word	0x200000b0

08002624 <HAL_UART_ErrorCallback>:
/***********************************************************************************
* Function: HAL_UART_ErrorCallback										   		   *
* Description: Process error callback.								               *
************************************************************************************/
VOID HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	/* Get error status in local variable. */
	uint32 receivedValue = HAL_UART_GetError(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f006 f983 	bl	8008938 <HAL_UART_GetError>
 8002632:	60f8      	str	r0, [r7, #12]
	/* Process each error.
	 * Store each in error in the system manager fault array.
	 * In case of DMA error re-initialize the protocol. */
	switch(receivedValue)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b10      	cmp	r3, #16
 8002638:	d846      	bhi.n	80026c8 <HAL_UART_ErrorCallback+0xa4>
 800263a:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <HAL_UART_ErrorCallback+0x1c>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	080026c9 	.word	0x080026c9
 8002644:	08002685 	.word	0x08002685
 8002648:	08002691 	.word	0x08002691
 800264c:	080026c9 	.word	0x080026c9
 8002650:	0800269d 	.word	0x0800269d
 8002654:	080026c9 	.word	0x080026c9
 8002658:	080026c9 	.word	0x080026c9
 800265c:	080026c9 	.word	0x080026c9
 8002660:	080026a9 	.word	0x080026a9
 8002664:	080026c9 	.word	0x080026c9
 8002668:	080026c9 	.word	0x080026c9
 800266c:	080026c9 	.word	0x080026c9
 8002670:	080026c9 	.word	0x080026c9
 8002674:	080026c9 	.word	0x080026c9
 8002678:	080026c9 	.word	0x080026c9
 800267c:	080026c9 	.word	0x080026c9
 8002680:	080026b5 	.word	0x080026b5
	{
		case HAL_UART_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_UART_ERROR_PE:
			SystemManager_Fault[UART_ERROR_PE]++;
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	3301      	adds	r3, #1
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 800268e:	e01c      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_NE:
			SystemManager_Fault[UART_ERROR_NE]++;
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 8002692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002694:	3301      	adds	r3, #1
 8002696:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 8002698:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 800269a:	e016      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_FE:
			SystemManager_Fault[UART_ERROR_FE]++;
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026a4:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 80026a6:	e010      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_ORE:
			SystemManager_Fault[UART_ERROR_ORE]++;
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	3301      	adds	r3, #1
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026b0:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 80026b2:	e00a      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_DMA:
			SystemManager_Fault[UART_ERROR_ORE]++;
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026bc:	6513      	str	r3, [r2, #80]	; 0x50
			Uart_Init();
 80026be:	f7ff fedb 	bl	8002478 <Uart_Init>
			Uart_DeInit();
 80026c2:	f7ff ff05 	bl	80024d0 <Uart_DeInit>
			break;
 80026c6:	e000      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		default:
			break;
 80026c8:	bf00      	nop
	}
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200089a8 	.word	0x200089a8

080026d8 <HAL_UART_RxCpltCallback>:
/***********************************************************************************
* Function: HAL_UART_RxCpltCallback										           *
* Description: Process received data.									   		   *
************************************************************************************/
VOID HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	/* If the UART 1 is calling the callback. */
	if(huart->Instance == USART1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a20      	ldr	r2, [pc, #128]	; (8002768 <HAL_UART_RxCpltCallback+0x90>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13a      	bne.n	8002760 <HAL_UART_RxCpltCallback+0x88>
	{
		/* If the data received is not nullptr. */
		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b0a      	cmp	r3, #10
 80026f0:	d11a      	bne.n	8002728 <HAL_UART_RxCpltCallback+0x50>
		{
			/* If the buffer length counter is less than maximum value. */
			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_UART_RxCpltCallback+0x98>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d80f      	bhi.n	800271a <HAL_UART_RxCpltCallback+0x42>
			{
				/* Convert the data received to uint8.*/
				uint8 asciiToUint = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 80026fe:	481d      	ldr	r0, [pc, #116]	; (8002774 <HAL_UART_RxCpltCallback+0x9c>)
 8002700:	f00b fdf8 	bl	800e2f4 <atoi>
 8002704:	4603      	mov	r3, r0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	73fb      	strb	r3, [r7, #15]
				Rte_Write_Btc_BtcPort_Btc_RxData(&asciiToUint);
 800270a:	f107 030f 	add.w	r3, r7, #15
 800270e:	4618      	mov	r0, r3
 8002710:	f00a fdc6 	bl	800d2a0 <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Rte_P_Btc_BtcPort_Btc_RxData);
 8002714:	4815      	ldr	r0, [pc, #84]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 8002716:	f00a fe0b 	bl	800d330 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
			else
			{
				/* do nothing */
			}
			/* Set the counter to 0 if it is more than maximum value. */
			UartCounter_Btc_RxCount = 0;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8002720:	4815      	ldr	r0, [pc, #84]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002722:	f00a fdcd 	bl	800d2c0 <Rte_Write_Btc_BtcPort_Btc_RxCount>
 8002726:	e016      	b.n	8002756 <HAL_UART_RxCpltCallback+0x7e>
		}/* If the message was not fully processed, continue with the processing into the buffer. */
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_UART_RxCpltCallback+0x98>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d80c      	bhi.n	800274a <HAL_UART_RxCpltCallback+0x72>
		{
			Rte_Write_Btc_BtcPort_Btc_DataBuffer(&Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	480d      	ldr	r0, [pc, #52]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 8002738:	f00a fdd2 	bl	800d2e0 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e005      	b.n	8002756 <HAL_UART_RxCpltCallback+0x7e>
		}
		else
		{
			/* Set the counter to 0 otherwise. */
			UartCounter_Btc_RxCount = 0;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8002750:	4809      	ldr	r0, [pc, #36]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002752:	f00a fdb5 	bl	800d2c0 <Rte_Write_Btc_BtcPort_Btc_RxCount>
		}
		/* Re-enable data transmission throuhg the protocol in interrupt mode. */
		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8002756:	2201      	movs	r2, #1
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 800275a:	4808      	ldr	r0, [pc, #32]	; (800277c <HAL_UART_RxCpltCallback+0xa4>)
 800275c:	f00a ff36 	bl	800d5cc <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40011000 	.word	0x40011000
 800276c:	200000b0 	.word	0x200000b0
 8002770:	200000b1 	.word	0x200000b1
 8002774:	200000ac 	.word	0x200000ac
 8002778:	20000128 	.word	0x20000128
 800277c:	20000618 	.word	0x20000618

08002780 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a34      	ldr	r2, [pc, #208]	; (8002870 <HAL_ADC_MspInit+0xf0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d161      	bne.n	8002866 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b33      	ldr	r3, [pc, #204]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = VS_Pin|LS_Pin;
 80027da:	230c      	movs	r3, #12
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027de:	2303      	movs	r3, #3
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4822      	ldr	r0, [pc, #136]	; (8002878 <HAL_ADC_MspInit+0xf8>)
 80027ee:	f002 ffe1 	bl	80057b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_ADC_MspInit+0xfc>)
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <HAL_ADC_MspInit+0x100>)
 80027f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_ADC_MspInit+0xfc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800280c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002810:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002818:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800281c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002820:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002828:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800282c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002830:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002834:	2204      	movs	r2, #4
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800283a:	2203      	movs	r2, #3
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002840:	2200      	movs	r2, #0
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800284a:	480c      	ldr	r0, [pc, #48]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800284c:	f002 fb52 	bl	8004ef4 <HAL_DMA_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 8002856:	f00b fd21 	bl	800e29c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40012000 	.word	0x40012000
 8002874:	40023800 	.word	0x40023800
 8002878:	40020800 	.word	0x40020800
 800287c:	20000190 	.word	0x20000190
 8002880:	40026410 	.word	0x40026410

08002884 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_ADC_MspDeInit+0x40>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d111      	bne.n	80028ba <HAL_ADC_MspDeInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <HAL_ADC_MspDeInit+0x44>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <HAL_ADC_MspDeInit+0x44>)
 800289c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    HAL_GPIO_DeInit(GPIOC, VS_Pin|LS_Pin);
 80028a2:	210c      	movs	r1, #12
 80028a4:	4809      	ldr	r0, [pc, #36]	; (80028cc <HAL_ADC_MspDeInit+0x48>)
 80028a6:	f003 f909 	bl	8005abc <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 fbce 	bl	8005050 <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 80028b4:	2012      	movs	r0, #18
 80028b6:	f002 fa02 	bl	8004cbe <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40012000 	.word	0x40012000
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020800 	.word	0x40020800

080028d0 <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <HAL_CRC_MspInit+0x3c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_CRC_MspInit+0x40>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_CRC_MspInit+0x40>)
 80028ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <HAL_CRC_MspInit+0x40>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023000 	.word	0x40023000
 8002910:	40023800 	.word	0x40023800

08002914 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_CRC_MspDeInit+0x2c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d105      	bne.n	8002932 <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_CRC_MspDeInit+0x30>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a06      	ldr	r2, [pc, #24]	; (8002944 <HAL_CRC_MspDeInit+0x30>)
 800292c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023000 	.word	0x40023000
 8002944:	40023800 	.word	0x40023800

08002948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <MX_DMA_Init+0x30>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <MX_DMA_Init+0x30>)
 8002958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <MX_DMA_Init+0x30>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]

}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800

0800297c <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
void configureTimerForRunTimeStats(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
return 0;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
	Os_Counter++;
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <vApplicationTickHook+0x18>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <vApplicationTickHook+0x18>)
 80029b4:	6013      	str	r3, [r2, #0]
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	200001f8 	.word	0x200001f8

080029c4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
   SystemManager_SetFault(STACK_OVERFLOW_RESET);
 80029ce:	200c      	movs	r0, #12
 80029d0:	f00b fb86 	bl	800e0e0 <SystemManager_SetFault>
   SystemManager_PerformReset();
 80029d4:	f00b fbae 	bl	800e134 <SystemManager_PerformReset>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
	SystemManager_SetFault(MALLOC_FAILED_RESET);
 80029e4:	200d      	movs	r0, #13
 80029e6:	f00b fb7b 	bl	800e0e0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80029ea:	f00b fba3 	bl	800e134 <SystemManager_PerformReset>
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <vPortSuppressTicksAndSleep>:
/* USER CODE END 5 */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 8002a0c:	4b55      	ldr	r3, [pc, #340]	; (8002b64 <MX_FREERTOS_Init+0x15c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2101      	movs	r1, #1
 8002a12:	4855      	ldr	r0, [pc, #340]	; (8002b68 <MX_FREERTOS_Init+0x160>)
 8002a14:	f007 fc06 	bl	800a224 <osTimerNew>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4a54      	ldr	r2, [pc, #336]	; (8002b6c <MX_FREERTOS_Init+0x164>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 8002a1e:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <MX_FREERTOS_Init+0x168>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	2101      	movs	r1, #1
 8002a24:	4853      	ldr	r0, [pc, #332]	; (8002b74 <MX_FREERTOS_Init+0x16c>)
 8002a26:	f007 fbfd 	bl	800a224 <osTimerNew>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <MX_FREERTOS_Init+0x170>)
 8002a2e:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);
 8002a30:	4b52      	ldr	r3, [pc, #328]	; (8002b7c <MX_FREERTOS_Init+0x174>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	2101      	movs	r1, #1
 8002a36:	4852      	ldr	r0, [pc, #328]	; (8002b80 <MX_FREERTOS_Init+0x178>)
 8002a38:	f007 fbf4 	bl	800a224 <osTimerNew>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4a51      	ldr	r2, [pc, #324]	; (8002b84 <MX_FREERTOS_Init+0x17c>)
 8002a40:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);
 8002a42:	4b51      	ldr	r3, [pc, #324]	; (8002b88 <MX_FREERTOS_Init+0x180>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	2101      	movs	r1, #1
 8002a48:	4850      	ldr	r0, [pc, #320]	; (8002b8c <MX_FREERTOS_Init+0x184>)
 8002a4a:	f007 fbeb 	bl	800a224 <osTimerNew>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a4f      	ldr	r2, [pc, #316]	; (8002b90 <MX_FREERTOS_Init+0x188>)
 8002a52:	6013      	str	r3, [r2, #0]

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);
 8002a54:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <MX_FREERTOS_Init+0x18c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	2101      	movs	r1, #1
 8002a5a:	484f      	ldr	r0, [pc, #316]	; (8002b98 <MX_FREERTOS_Init+0x190>)
 8002a5c:	f007 fbe2 	bl	800a224 <osTimerNew>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4a4e      	ldr	r2, [pc, #312]	; (8002b9c <MX_FREERTOS_Init+0x194>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);
 8002a66:	4b4e      	ldr	r3, [pc, #312]	; (8002ba0 <MX_FREERTOS_Init+0x198>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	484d      	ldr	r0, [pc, #308]	; (8002ba4 <MX_FREERTOS_Init+0x19c>)
 8002a6e:	f007 fbd9 	bl	800a224 <osTimerNew>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <MX_FREERTOS_Init+0x1a0>)
 8002a76:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmAlarm_Timer */
  Os_SecAlmAlarm_TimerHandle = osTimerNew(Os_SecAlmAlarm_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmAlarm_Timer_attributes);
 8002a78:	4b4c      	ldr	r3, [pc, #304]	; (8002bac <MX_FREERTOS_Init+0x1a4>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	484c      	ldr	r0, [pc, #304]	; (8002bb0 <MX_FREERTOS_Init+0x1a8>)
 8002a80:	f007 fbd0 	bl	800a224 <osTimerNew>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4a4b      	ldr	r2, [pc, #300]	; (8002bb4 <MX_FREERTOS_Init+0x1ac>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcR_Buzzer_Timer */
  Os_PdcR_Buzzer_TimerHandle = osTimerNew(Os_PdcR_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcR_Buzzer_Timer_attributes);
 8002a8a:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <MX_FREERTOS_Init+0x1b0>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	484a      	ldr	r0, [pc, #296]	; (8002bbc <MX_FREERTOS_Init+0x1b4>)
 8002a92:	f007 fbc7 	bl	800a224 <osTimerNew>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4a49      	ldr	r2, [pc, #292]	; (8002bc0 <MX_FREERTOS_Init+0x1b8>)
 8002a9a:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcF_Buzzer_Timer */
  Os_PdcF_Buzzer_TimerHandle = osTimerNew(Os_PdcF_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcF_Buzzer_Timer_attributes);
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <MX_FREERTOS_Init+0x1bc>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4849      	ldr	r0, [pc, #292]	; (8002bc8 <MX_FREERTOS_Init+0x1c0>)
 8002aa4:	f007 fbbe 	bl	800a224 <osTimerNew>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4a48      	ldr	r2, [pc, #288]	; (8002bcc <MX_FREERTOS_Init+0x1c4>)
 8002aac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 8002aae:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <MX_FREERTOS_Init+0x1c8>)
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4848      	ldr	r0, [pc, #288]	; (8002bd4 <MX_FREERTOS_Init+0x1cc>)
 8002ab4:	f007 fb0e 	bl	800a0d4 <osThreadNew>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a47      	ldr	r2, [pc, #284]	; (8002bd8 <MX_FREERTOS_Init+0x1d0>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Main */
  ASIL_APPL_MainHandle = osThreadNew(OS_TASK_ASIL_APPL_Main, NULL, &ASIL_APPL_Main_attributes);
 8002abe:	4a47      	ldr	r2, [pc, #284]	; (8002bdc <MX_FREERTOS_Init+0x1d4>)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4847      	ldr	r0, [pc, #284]	; (8002be0 <MX_FREERTOS_Init+0x1d8>)
 8002ac4:	f007 fb06 	bl	800a0d4 <osThreadNew>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a46      	ldr	r2, [pc, #280]	; (8002be4 <MX_FREERTOS_Init+0x1dc>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_PostMain */
  ASIL_APPL_PostMainHandle = osThreadNew(OS_TASK_ASIL_APPL_PostMain, NULL, &ASIL_APPL_PostMain_attributes);
 8002ace:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <MX_FREERTOS_Init+0x1e0>)
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4846      	ldr	r0, [pc, #280]	; (8002bec <MX_FREERTOS_Init+0x1e4>)
 8002ad4:	f007 fafe 	bl	800a0d4 <osThreadNew>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4a45      	ldr	r2, [pc, #276]	; (8002bf0 <MX_FREERTOS_Init+0x1e8>)
 8002adc:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PreMain */
  QM_APPL_PreMainHandle = osThreadNew(OS_TASK_QM_APPL_PreMain, NULL, &QM_APPL_PreMain_attributes);
 8002ade:	4a45      	ldr	r2, [pc, #276]	; (8002bf4 <MX_FREERTOS_Init+0x1ec>)
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4845      	ldr	r0, [pc, #276]	; (8002bf8 <MX_FREERTOS_Init+0x1f0>)
 8002ae4:	f007 faf6 	bl	800a0d4 <osThreadNew>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a44      	ldr	r2, [pc, #272]	; (8002bfc <MX_FREERTOS_Init+0x1f4>)
 8002aec:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Main */
  QM_APPL_MainHandle = osThreadNew(OS_TASK_QM_APPL_Main, NULL, &QM_APPL_Main_attributes);
 8002aee:	4a44      	ldr	r2, [pc, #272]	; (8002c00 <MX_FREERTOS_Init+0x1f8>)
 8002af0:	2100      	movs	r1, #0
 8002af2:	4844      	ldr	r0, [pc, #272]	; (8002c04 <MX_FREERTOS_Init+0x1fc>)
 8002af4:	f007 faee 	bl	800a0d4 <osThreadNew>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a43      	ldr	r2, [pc, #268]	; (8002c08 <MX_FREERTOS_Init+0x200>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PreMain */
  ASIL_BSW_PreMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PreMain, NULL, &ASIL_BSW_PreMain_attributes);
 8002afe:	4a43      	ldr	r2, [pc, #268]	; (8002c0c <MX_FREERTOS_Init+0x204>)
 8002b00:	2100      	movs	r1, #0
 8002b02:	4843      	ldr	r0, [pc, #268]	; (8002c10 <MX_FREERTOS_Init+0x208>)
 8002b04:	f007 fae6 	bl	800a0d4 <osThreadNew>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <MX_FREERTOS_Init+0x20c>)
 8002b0c:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_Main */
  ASIL_BSW_MainHandle = osThreadNew(OS_TASK_ASIL_BSW_Main, NULL, &ASIL_BSW_Main_attributes);
 8002b0e:	4a42      	ldr	r2, [pc, #264]	; (8002c18 <MX_FREERTOS_Init+0x210>)
 8002b10:	2100      	movs	r1, #0
 8002b12:	4842      	ldr	r0, [pc, #264]	; (8002c1c <MX_FREERTOS_Init+0x214>)
 8002b14:	f007 fade 	bl	800a0d4 <osThreadNew>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4a41      	ldr	r2, [pc, #260]	; (8002c20 <MX_FREERTOS_Init+0x218>)
 8002b1c:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PostMain */
  ASIL_BSW_PostMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PostMain, NULL, &ASIL_BSW_PostMain_attributes);
 8002b1e:	4a41      	ldr	r2, [pc, #260]	; (8002c24 <MX_FREERTOS_Init+0x21c>)
 8002b20:	2100      	movs	r1, #0
 8002b22:	4841      	ldr	r0, [pc, #260]	; (8002c28 <MX_FREERTOS_Init+0x220>)
 8002b24:	f007 fad6 	bl	800a0d4 <osThreadNew>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4a40      	ldr	r2, [pc, #256]	; (8002c2c <MX_FREERTOS_Init+0x224>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PreMain */
  QM_BSW_PreMainHandle = osThreadNew(OS_TASK_QM_BSW_PreMain, NULL, &QM_BSW_PreMain_attributes);
 8002b2e:	4a40      	ldr	r2, [pc, #256]	; (8002c30 <MX_FREERTOS_Init+0x228>)
 8002b30:	2100      	movs	r1, #0
 8002b32:	4840      	ldr	r0, [pc, #256]	; (8002c34 <MX_FREERTOS_Init+0x22c>)
 8002b34:	f007 face 	bl	800a0d4 <osThreadNew>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a3f      	ldr	r2, [pc, #252]	; (8002c38 <MX_FREERTOS_Init+0x230>)
 8002b3c:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_Main */
  QM_BSW_MainHandle = osThreadNew(OS_TASK_QM_BSW_Main, NULL, &QM_BSW_Main_attributes);
 8002b3e:	4a3f      	ldr	r2, [pc, #252]	; (8002c3c <MX_FREERTOS_Init+0x234>)
 8002b40:	2100      	movs	r1, #0
 8002b42:	483f      	ldr	r0, [pc, #252]	; (8002c40 <MX_FREERTOS_Init+0x238>)
 8002b44:	f007 fac6 	bl	800a0d4 <osThreadNew>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4a3e      	ldr	r2, [pc, #248]	; (8002c44 <MX_FREERTOS_Init+0x23c>)
 8002b4c:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PostMain */
  QM_BSW_PostMainHandle = osThreadNew(OS_TASK_QM_BSW_PostMain, NULL, &QM_BSW_PostMain_attributes);
 8002b4e:	4a3e      	ldr	r2, [pc, #248]	; (8002c48 <MX_FREERTOS_Init+0x240>)
 8002b50:	2100      	movs	r1, #0
 8002b52:	483e      	ldr	r0, [pc, #248]	; (8002c4c <MX_FREERTOS_Init+0x244>)
 8002b54:	f007 fabe 	bl	800a0d4 <osThreadNew>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4a3d      	ldr	r2, [pc, #244]	; (8002c50 <MX_FREERTOS_Init+0x248>)
 8002b5c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	0800ea4c 	.word	0x0800ea4c
 8002b68:	08002d95 	.word	0x08002d95
 8002b6c:	20000264 	.word	0x20000264
 8002b70:	0800ea5c 	.word	0x0800ea5c
 8002b74:	08002dad 	.word	0x08002dad
 8002b78:	20000268 	.word	0x20000268
 8002b7c:	0800ea6c 	.word	0x0800ea6c
 8002b80:	08002e15 	.word	0x08002e15
 8002b84:	2000026c 	.word	0x2000026c
 8002b88:	0800ea7c 	.word	0x0800ea7c
 8002b8c:	08002e3d 	.word	0x08002e3d
 8002b90:	20000270 	.word	0x20000270
 8002b94:	0800ea8c 	.word	0x0800ea8c
 8002b98:	08002e65 	.word	0x08002e65
 8002b9c:	20000274 	.word	0x20000274
 8002ba0:	0800ea9c 	.word	0x0800ea9c
 8002ba4:	08002e91 	.word	0x08002e91
 8002ba8:	20000278 	.word	0x20000278
 8002bac:	0800eaac 	.word	0x0800eaac
 8002bb0:	08002f01 	.word	0x08002f01
 8002bb4:	2000027c 	.word	0x2000027c
 8002bb8:	0800eabc 	.word	0x0800eabc
 8002bbc:	08002f29 	.word	0x08002f29
 8002bc0:	20000280 	.word	0x20000280
 8002bc4:	0800eacc 	.word	0x0800eacc
 8002bc8:	08002f45 	.word	0x08002f45
 8002bcc:	20000284 	.word	0x20000284
 8002bd0:	0800e8c0 	.word	0x0800e8c0
 8002bd4:	08002c55 	.word	0x08002c55
 8002bd8:	20000238 	.word	0x20000238
 8002bdc:	0800e8e4 	.word	0x0800e8e4
 8002be0:	08002c69 	.word	0x08002c69
 8002be4:	2000023c 	.word	0x2000023c
 8002be8:	0800e908 	.word	0x0800e908
 8002bec:	08002c91 	.word	0x08002c91
 8002bf0:	20000240 	.word	0x20000240
 8002bf4:	0800e92c 	.word	0x0800e92c
 8002bf8:	08002cad 	.word	0x08002cad
 8002bfc:	20000244 	.word	0x20000244
 8002c00:	0800e950 	.word	0x0800e950
 8002c04:	08002cc9 	.word	0x08002cc9
 8002c08:	20000248 	.word	0x20000248
 8002c0c:	0800e974 	.word	0x0800e974
 8002c10:	08002ce5 	.word	0x08002ce5
 8002c14:	2000024c 	.word	0x2000024c
 8002c18:	0800e998 	.word	0x0800e998
 8002c1c:	08002d01 	.word	0x08002d01
 8002c20:	20000250 	.word	0x20000250
 8002c24:	0800e9bc 	.word	0x0800e9bc
 8002c28:	08002d21 	.word	0x08002d21
 8002c2c:	20000254 	.word	0x20000254
 8002c30:	0800e9e0 	.word	0x0800e9e0
 8002c34:	08002d3d 	.word	0x08002d3d
 8002c38:	20000258 	.word	0x20000258
 8002c3c:	0800ea04 	.word	0x0800ea04
 8002c40:	08002d59 	.word	0x08002d59
 8002c44:	2000025c 	.word	0x2000025c
 8002c48:	0800ea28 	.word	0x0800ea28
 8002c4c:	08002d79 	.word	0x08002d79
 8002c50:	20000260 	.word	0x20000260

08002c54 <OS_TASK_OS_INIT>:

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */
	for(;;)
	{
		EcuM_DriverInit();
 8002c5c:	f00b f908 	bl	800de70 <EcuM_DriverInit>

		vTaskSuspend(NULL);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f008 feb5 	bl	800b9d0 <vTaskSuspend>
		EcuM_DriverInit();
 8002c66:	e7f9      	b.n	8002c5c <OS_TASK_OS_INIT+0x8>

08002c68 <OS_TASK_ASIL_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Main */
/* USER CODE END Header_OS_TASK_ASIL_APPL_Main */
void OS_TASK_ASIL_APPL_Main(void *argument)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Btc_MainFunction();
 8002c70:	f00a fc7e 	bl	800d570 <Rte_Runnable_Btc_MainFunction>
		Rte_Runnable_CenLoc_MainFunction();
 8002c74:	f00a fc82 	bl	800d57c <Rte_Runnable_CenLoc_MainFunction>
		Rte_Runnable_ExtLights_MainFunction();
 8002c78:	f00a fc86 	bl	800d588 <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_IntLights_MainFunction();
 8002c7c:	f00a fc8a 	bl	800d594 <Rte_Runnable_IntLights_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_Main, pdMS_TO_TICKS(5));
 8002c80:	2105      	movs	r1, #5
 8002c82:	4802      	ldr	r0, [pc, #8]	; (8002c8c <OS_TASK_ASIL_APPL_Main+0x24>)
 8002c84:	f008 fe26 	bl	800b8d4 <vTaskDelayUntil>
		Rte_Runnable_Btc_MainFunction();
 8002c88:	e7f2      	b.n	8002c70 <OS_TASK_ASIL_APPL_Main+0x8>
 8002c8a:	bf00      	nop
 8002c8c:	20000210 	.word	0x20000210

08002c90 <OS_TASK_ASIL_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_APPL_PostMain */
void OS_TASK_ASIL_APPL_PostMain(void *argument)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_PostMain */
	for(;;)
	{
		Rte_Runnable_DiagCtrl_MainFunction();
 8002c98:	f00a fcd3 	bl	800d642 <Rte_Runnable_DiagCtrl_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_PostMain, pdMS_TO_TICKS(5));
 8002c9c:	2105      	movs	r1, #5
 8002c9e:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <OS_TASK_ASIL_APPL_PostMain+0x18>)
 8002ca0:	f008 fe18 	bl	800b8d4 <vTaskDelayUntil>
		Rte_Runnable_DiagCtrl_MainFunction();
 8002ca4:	e7f8      	b.n	8002c98 <OS_TASK_ASIL_APPL_PostMain+0x8>
 8002ca6:	bf00      	nop
 8002ca8:	20000214 	.word	0x20000214

08002cac <OS_TASK_QM_APPL_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PreMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PreMain */
void OS_TASK_QM_APPL_PreMain(void *argument)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PreMain */
	for(;;)
	{
		Rte_Runnable_SecAlm_MainFunction();
 8002cb4:	f00a fc74 	bl	800d5a0 <Rte_Runnable_SecAlm_MainFunction>
		vTaskDelayUntil(&QM_APPL_PreMain, pdMS_TO_TICKS(5));
 8002cb8:	2105      	movs	r1, #5
 8002cba:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <OS_TASK_QM_APPL_PreMain+0x18>)
 8002cbc:	f008 fe0a 	bl	800b8d4 <vTaskDelayUntil>
		Rte_Runnable_SecAlm_MainFunction();
 8002cc0:	e7f8      	b.n	8002cb4 <OS_TASK_QM_APPL_PreMain+0x8>
 8002cc2:	bf00      	nop
 8002cc4:	20000218 	.word	0x20000218

08002cc8 <OS_TASK_QM_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Main */
/* USER CODE END Header_OS_TASK_QM_APPL_Main */
void OS_TASK_QM_APPL_Main(void *argument)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Pdc_MainFunction();
 8002cd0:	f00a fcbd 	bl	800d64e <Rte_Runnable_Pdc_MainFunction>
		vTaskDelayUntil(&QM_APPL_Main, pdMS_TO_TICKS(100));
 8002cd4:	2164      	movs	r1, #100	; 0x64
 8002cd6:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <OS_TASK_QM_APPL_Main+0x18>)
 8002cd8:	f008 fdfc 	bl	800b8d4 <vTaskDelayUntil>
		Rte_Runnable_Pdc_MainFunction();
 8002cdc:	e7f8      	b.n	8002cd0 <OS_TASK_QM_APPL_Main+0x8>
 8002cde:	bf00      	nop
 8002ce0:	2000021c 	.word	0x2000021c

08002ce4 <OS_TASK_ASIL_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PreMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PreMain */
void OS_TASK_ASIL_BSW_PreMain(void *argument)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Wdg_MainFunction();
 8002cec:	f00a faa6 	bl	800d23c <Rte_Runnable_Wdg_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PreMain, pdMS_TO_TICKS(5));
 8002cf0:	2105      	movs	r1, #5
 8002cf2:	4802      	ldr	r0, [pc, #8]	; (8002cfc <OS_TASK_ASIL_BSW_PreMain+0x18>)
 8002cf4:	f008 fdee 	bl	800b8d4 <vTaskDelayUntil>
		Rte_Runnable_Wdg_MainFunction();
 8002cf8:	e7f8      	b.n	8002cec <OS_TASK_ASIL_BSW_PreMain+0x8>
 8002cfa:	bf00      	nop
 8002cfc:	20000220 	.word	0x20000220

08002d00 <OS_TASK_ASIL_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_Main */
/* USER CODE END Header_OS_TASK_ASIL_BSW_Main */
void OS_TASK_ASIL_BSW_Main(void *argument)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_Main */
	for(;;)
	{
		Rte_Runnable_Uart_MainFunction();
 8002d08:	f00a faaa 	bl	800d260 <Rte_Runnable_Uart_MainFunction>
		Rte_Runnable_Crc_MainFunction();
 8002d0c:	f00a fa90 	bl	800d230 <Rte_Runnable_Crc_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_Main, pdMS_TO_TICKS(5));
 8002d10:	2105      	movs	r1, #5
 8002d12:	4802      	ldr	r0, [pc, #8]	; (8002d1c <OS_TASK_ASIL_BSW_Main+0x1c>)
 8002d14:	f008 fdde 	bl	800b8d4 <vTaskDelayUntil>
		Rte_Runnable_Uart_MainFunction();
 8002d18:	e7f6      	b.n	8002d08 <OS_TASK_ASIL_BSW_Main+0x8>
 8002d1a:	bf00      	nop
 8002d1c:	20000224 	.word	0x20000224

08002d20 <OS_TASK_ASIL_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PostMain */
void OS_TASK_ASIL_BSW_PostMain(void *argument)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PostMain */
	for(;;)
	{
		Rte_Runnable_Tim_MainFunction();
 8002d28:	f00a fa94 	bl	800d254 <Rte_Runnable_Tim_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PostMain, pdMS_TO_TICKS(5));
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	4802      	ldr	r0, [pc, #8]	; (8002d38 <OS_TASK_ASIL_BSW_PostMain+0x18>)
 8002d30:	f008 fdd0 	bl	800b8d4 <vTaskDelayUntil>
		Rte_Runnable_Tim_MainFunction();
 8002d34:	e7f8      	b.n	8002d28 <OS_TASK_ASIL_BSW_PostMain+0x8>
 8002d36:	bf00      	nop
 8002d38:	20000228 	.word	0x20000228

08002d3c <OS_TASK_QM_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PreMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PreMain */
void OS_TASK_QM_BSW_PreMain(void *argument)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Adc_MainFunction();
 8002d44:	f00a fa80 	bl	800d248 <Rte_Runnable_Adc_MainFunction>
		vTaskDelayUntil(&QM_BSW_Main, pdMS_TO_TICKS(5));
 8002d48:	2105      	movs	r1, #5
 8002d4a:	4802      	ldr	r0, [pc, #8]	; (8002d54 <OS_TASK_QM_BSW_PreMain+0x18>)
 8002d4c:	f008 fdc2 	bl	800b8d4 <vTaskDelayUntil>
		Rte_Runnable_Adc_MainFunction();
 8002d50:	e7f8      	b.n	8002d44 <OS_TASK_QM_BSW_PreMain+0x8>
 8002d52:	bf00      	nop
 8002d54:	20000230 	.word	0x20000230

08002d58 <OS_TASK_QM_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_Main */
/* USER CODE END Header_OS_TASK_QM_BSW_Main */
void OS_TASK_QM_BSW_Main(void *argument)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_Main */
	for(;;)
	{
		Rte_Runnable_EcuM_MainFunction();
 8002d60:	f00a fa5a 	bl	800d218 <Rte_Runnable_EcuM_MainFunction>
		Rte_Runnable_SystemManager_MainFunction();
 8002d64:	f00a fa5e 	bl	800d224 <Rte_Runnable_SystemManager_MainFunction>
		vTaskDelayUntil(&QM_BSW_PreMain, pdMS_TO_TICKS(5));
 8002d68:	2105      	movs	r1, #5
 8002d6a:	4802      	ldr	r0, [pc, #8]	; (8002d74 <OS_TASK_QM_BSW_Main+0x1c>)
 8002d6c:	f008 fdb2 	bl	800b8d4 <vTaskDelayUntil>
		Rte_Runnable_EcuM_MainFunction();
 8002d70:	e7f6      	b.n	8002d60 <OS_TASK_QM_BSW_Main+0x8>
 8002d72:	bf00      	nop
 8002d74:	2000022c 	.word	0x2000022c

08002d78 <OS_TASK_QM_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PostMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PostMain */
void OS_TASK_QM_BSW_PostMain(void *argument)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PostMain */
  for(;;)
  {
	  Rte_Runnable_Dem_MainFunction();
 8002d80:	f00a fc6b 	bl	800d65a <Rte_Runnable_Dem_MainFunction>
	  vTaskDelayUntil(&QM_BSW_PostMain, pdMS_TO_TICKS(5));
 8002d84:	2105      	movs	r1, #5
 8002d86:	4802      	ldr	r0, [pc, #8]	; (8002d90 <OS_TASK_QM_BSW_PostMain+0x18>)
 8002d88:	f008 fda4 	bl	800b8d4 <vTaskDelayUntil>
	  Rte_Runnable_Dem_MainFunction();
 8002d8c:	e7f8      	b.n	8002d80 <OS_TASK_QM_BSW_PostMain+0x8>
 8002d8e:	bf00      	nop
 8002d90:	20000234 	.word	0x20000234

08002d94 <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_QM_BSW_PostMain */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */
	/* Reset the security alarm counter trigger. */
	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(0);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f00a fbd7 	bl	800d550 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>
  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */
	/* If the counter variable for the lock unlock turn signals sequence is less than or equal to 6
	 * Then if there is either a lock or an unlock sequence increase the counter to process the states
	 * in the application. */
	if(Os_LockUnlockSequence_Counter <= 6
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b06      	cmp	r3, #6
 8002dba:	d819      	bhi.n	8002df0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d007      	beq.n	8002ddc <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10d      	bne.n	8002df0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{
		Os_LockUnlockSequence_Counter = Os_LockUnlockSequence_Counter + 1;
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002de6:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8002de8:	4807      	ldr	r0, [pc, #28]	; (8002e08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002dea:	f00a f985 	bl	800d0f8 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
 8002dee:	e006      	b.n	8002dfe <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>
	}
	else
	{
		/* Update the counter with out of bounds value to prevent unexpected triggering. */
		Os_LockUnlockSequence_Counter = 7;
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002df2:	2207      	movs	r2, #7
 8002df4:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8002df6:	4804      	ldr	r0, [pc, #16]	; (8002e08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002df8:	f00a f97e 	bl	800d0f8 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200001fc 	.word	0x200001fc
 8002e0c:	200000bf 	.word	0x200000bf
 8002e10:	200000c7 	.word	0x200000c7

08002e14 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback>:

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
	/* Increase the counter variable used in the timer for the alarm LED
	 * that expires every 3,75 seconds. */
	Os_TurnOnCyclic_Counter = Os_TurnOnCyclic_Counter + 1;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002e26:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(&Os_TurnOnCyclic_Counter);
 8002e28:	4803      	ldr	r0, [pc, #12]	; (8002e38 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002e2a:	f00a f955 	bl	800d0d8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>
  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200001fd 	.word	0x200001fd

08002e3c <Os_SecAlmLedTurnOn_Timer_Callback>:

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */
	/* Increase the counter variable used in the turning on the alarm LED for 0,25 seconds. */
	Os_TurnOnLed_Counter = Os_TurnOnLed_Counter + 1;
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002e4e:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(&Os_TurnOnLed_Counter);
 8002e50:	4803      	ldr	r0, [pc, #12]	; (8002e60 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002e52:	f00a f931 	bl	800d0b8 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>
  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200001fe 	.word	0x200001fe

08002e64 <Os_FollowMeHome_Timer_Callback>:

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */
	/* Increase the counter variable used in the follow me home concept when the timer
	 * period expires for the lights to go off. */
	Os_FollowMeHome_Counter = Os_FollowMeHome_Counter + 1;
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <Os_FollowMeHome_Timer_Callback+0x28>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <Os_FollowMeHome_Timer_Callback+0x28>)
 8002e76:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(Os_FollowMeHome_Counter);
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <Os_FollowMeHome_Timer_Callback+0x28>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f00a f90b 	bl	800d098 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200001ff 	.word	0x200001ff

08002e90 <Os_TurnSignals_Timer_Callback>:

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */
	/* Increase the respective counter on request from the specific light in turn signals. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <Os_TurnSignals_Timer_Callback+0x58>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d107      	bne.n	8002eb0 <Os_TurnSignals_Timer_Callback+0x20>
	{
		Os_Lts_Counter = Os_Lts_Counter + 1;
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <Os_TurnSignals_Timer_Callback+0x5c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	4a11      	ldr	r2, [pc, #68]	; (8002eec <Os_TurnSignals_Timer_Callback+0x5c>)
 8002ea8:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Os_Lts_Counter);
 8002eaa:	4810      	ldr	r0, [pc, #64]	; (8002eec <Os_TurnSignals_Timer_Callback+0x5c>)
 8002eac:	f00a fb10 	bl	800d4d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <Os_TurnSignals_Timer_Callback+0x60>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <Os_TurnSignals_Timer_Callback+0x38>
	{
		Os_Rts_Counter = Os_Rts_Counter + 1;
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <Os_TurnSignals_Timer_Callback+0x64>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <Os_TurnSignals_Timer_Callback+0x64>)
 8002ec0:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Os_Rts_Counter);
 8002ec2:	480c      	ldr	r0, [pc, #48]	; (8002ef4 <Os_TurnSignals_Timer_Callback+0x64>)
 8002ec4:	f00a faf4 	bl	800d4b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <Os_TurnSignals_Timer_Callback+0x68>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d107      	bne.n	8002ee0 <Os_TurnSignals_Timer_Callback+0x50>
	{
		Os_HL_Counter = Os_HL_Counter + 1;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <Os_TurnSignals_Timer_Callback+0x6c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	4a09      	ldr	r2, [pc, #36]	; (8002efc <Os_TurnSignals_Timer_Callback+0x6c>)
 8002ed8:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Os_HL_Counter);
 8002eda:	4808      	ldr	r0, [pc, #32]	; (8002efc <Os_TurnSignals_Timer_Callback+0x6c>)
 8002edc:	f00a fb08 	bl	800d4f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
	else
	{
		/* do nothing */
	}
  /* USER CODE END Os_TurnSignals_Timer_Callback */
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200000e6 	.word	0x200000e6
 8002eec:	20000200 	.word	0x20000200
 8002ef0:	200000e7 	.word	0x200000e7
 8002ef4:	20000204 	.word	0x20000204
 8002ef8:	200000ea 	.word	0x200000ea
 8002efc:	20000208 	.word	0x20000208

08002f00 <Os_SecAlmAlarm_Timer_Callback>:

/* Os_SecAlmAlarm_Timer_Callback function */
void Os_SecAlmAlarm_Timer_Callback(void *argument)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmAlarm_Timer_Callback */
	/* Increase the security alarm trigger counter when the alarm is on. */
	Os_Alarm_Counter = Os_Alarm_Counter + 1;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8002f12:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&Os_Alarm_Counter);
 8002f14:	4803      	ldr	r0, [pc, #12]	; (8002f24 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8002f16:	f00a fb0b 	bl	800d530 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
  /* USER CODE END Os_SecAlmAlarm_Timer_Callback */
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	2000020c 	.word	0x2000020c

08002f28 <Os_PdcR_Buzzer_Timer_Callback>:

/* Os_PdcR_Buzzer_Timer_Callback function */
void Os_PdcR_Buzzer_Timer_Callback(void *argument)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcR_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN);
 8002f30:	2120      	movs	r1, #32
 8002f32:	4803      	ldr	r0, [pc, #12]	; (8002f40 <Os_PdcR_Buzzer_Timer_Callback+0x18>)
 8002f34:	f002 febf 	bl	8005cb6 <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcR_Buzzer_Timer_Callback */
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40020400 	.word	0x40020400

08002f44 <Os_PdcF_Buzzer_Timer_Callback>:

/* Os_PdcF_Buzzer_Timer_Callback function */
void Os_PdcF_Buzzer_Timer_Callback(void *argument)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcF_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN);
 8002f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f50:	4803      	ldr	r0, [pc, #12]	; (8002f60 <Os_PdcF_Buzzer_Timer_Callback+0x1c>)
 8002f52:	f002 feb0 	bl	8005cb6 <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcF_Buzzer_Timer_Callback */
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40020800 	.word	0x40020800

08002f64 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	4b4d      	ldr	r3, [pc, #308]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a4c      	ldr	r2, [pc, #304]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b46      	ldr	r3, [pc, #280]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a45      	ldr	r2, [pc, #276]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a3e      	ldr	r2, [pc, #248]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b3c      	ldr	r3, [pc, #240]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a37      	ldr	r2, [pc, #220]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b35      	ldr	r3, [pc, #212]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a30      	ldr	r2, [pc, #192]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002ff4:	f043 0308 	orr.w	r3, r3, #8
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <MX_GPIO_Init+0x150>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003006:	2200      	movs	r2, #0
 8003008:	f64f 4173 	movw	r1, #64627	; 0xfc73
 800300c:	482a      	ldr	r0, [pc, #168]	; (80030b8 <MX_GPIO_Init+0x154>)
 800300e:	f002 fe39 	bl	8005c84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003012:	2200      	movs	r2, #0
 8003014:	f641 11fc 	movw	r1, #6652	; 0x19fc
 8003018:	4828      	ldr	r0, [pc, #160]	; (80030bc <MX_GPIO_Init+0x158>)
 800301a:	f002 fe33 	bl	8005c84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|PDCF_TRIG_Pin
                          |HB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin
 800301e:	2200      	movs	r2, #0
 8003020:	f24f 01f7 	movw	r1, #61687	; 0xf0f7
 8003024:	4826      	ldr	r0, [pc, #152]	; (80030c0 <MX_GPIO_Init+0x15c>)
 8003026:	f002 fe2d 	bl	8005c84 <HAL_GPIO_WritePin>
                          |PDCR_TRIG_Pin|AL_Pin|RL_Pin|GPIO_PIN_4
                          |PDCR_BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800302a:	2200      	movs	r2, #0
 800302c:	2104      	movs	r1, #4
 800302e:	4825      	ldr	r0, [pc, #148]	; (80030c4 <MX_GPIO_Init+0x160>)
 8003030:	f002 fe28 	bl	8005c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC0
                           PC1 PC4 PC5 PC6
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003034:	f64f 4373 	movw	r3, #64627	; 0xfc73
 8003038:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303a:	2301      	movs	r3, #1
 800303c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	481a      	ldr	r0, [pc, #104]	; (80030b8 <MX_GPIO_Init+0x154>)
 800304e:	f002 fbb1 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003052:	f641 13fc 	movw	r3, #6652	; 0x19fc
 8003056:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|PDCF_TRIG_Pin
                          |HB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003058:	2301      	movs	r3, #1
 800305a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4619      	mov	r1, r3
 800306a:	4814      	ldr	r0, [pc, #80]	; (80030bc <MX_GPIO_Init+0x158>)
 800306c:	f002 fba2 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PBPin PBPin
                           PBPin PBPin PBPin PB4
                           PBPin PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin
 8003070:	f24f 03f7 	movw	r3, #61687	; 0xf0f7
 8003074:	617b      	str	r3, [r7, #20]
                          |PDCR_TRIG_Pin|AL_Pin|RL_Pin|GPIO_PIN_4
                          |PDCR_BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003076:	2301      	movs	r3, #1
 8003078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003082:	f107 0314 	add.w	r3, r7, #20
 8003086:	4619      	mov	r1, r3
 8003088:	480d      	ldr	r0, [pc, #52]	; (80030c0 <MX_GPIO_Init+0x15c>)
 800308a:	f002 fb93 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800308e:	2304      	movs	r3, #4
 8003090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003092:	2301      	movs	r3, #1
 8003094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4619      	mov	r1, r3
 80030a4:	4807      	ldr	r0, [pc, #28]	; (80030c4 <MX_GPIO_Init+0x160>)
 80030a6:	f002 fb85 	bl	80057b4 <HAL_GPIO_Init>

}
 80030aa:	bf00      	nop
 80030ac:	3728      	adds	r7, #40	; 0x28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020800 	.word	0x40020800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	40020400 	.word	0x40020400
 80030c4:	40020c00 	.word	0x40020c00

080030c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_MspInit+0x90>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a20      	ldr	r2, [pc, #128]	; (8003158 <HAL_MspInit+0x90>)
 80030d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <HAL_MspInit+0x90>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <HAL_MspInit+0x90>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a19      	ldr	r2, [pc, #100]	; (8003158 <HAL_MspInit+0x90>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_MspInit+0x90>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	210f      	movs	r1, #15
 800310a:	f06f 000b 	mvn.w	r0, #11
 800310e:	f001 fdac 	bl	8004c6a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	210f      	movs	r1, #15
 8003116:	f06f 000a 	mvn.w	r0, #10
 800311a:	f001 fda6 	bl	8004c6a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	210f      	movs	r1, #15
 8003122:	f06f 0009 	mvn.w	r0, #9
 8003126:	f001 fda0 	bl	8004c6a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	210f      	movs	r1, #15
 800312e:	f06f 0004 	mvn.w	r0, #4
 8003132:	f001 fd9a 	bl	8004c6a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	210f      	movs	r1, #15
 800313a:	f06f 0003 	mvn.w	r0, #3
 800313e:	f001 fd94 	bl	8004c6a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	210f      	movs	r1, #15
 8003146:	f06f 0001 	mvn.w	r0, #1
 800314a:	f001 fd8e 	bl	8004c6a <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800

0800315c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	4b2e      	ldr	r3, [pc, #184]	; (800322c <HAL_InitTick+0xd0>)
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	4a2d      	ldr	r2, [pc, #180]	; (800322c <HAL_InitTick+0xd0>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6453      	str	r3, [r2, #68]	; 0x44
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_InitTick+0xd0>)
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003188:	f107 020c 	add.w	r2, r7, #12
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f003 fa94 	bl	80066c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003198:	f003 fa7e 	bl	8006698 <HAL_RCC_GetPCLK2Freq>
 800319c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	4a23      	ldr	r2, [pc, #140]	; (8003230 <HAL_InitTick+0xd4>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0c9b      	lsrs	r3, r3, #18
 80031a8:	3b01      	subs	r3, #1
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <HAL_InitTick+0xd8>)
 80031ae:	4a22      	ldr	r2, [pc, #136]	; (8003238 <HAL_InitTick+0xdc>)
 80031b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_InitTick+0xd8>)
 80031b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_InitTick+0xd8>)
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80031c0:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_InitTick+0xd8>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_InitTick+0xd8>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_InitTick+0xd8>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80031d2:	4818      	ldr	r0, [pc, #96]	; (8003234 <HAL_InitTick+0xd8>)
 80031d4:	f003 faa6 	bl	8006724 <HAL_TIM_Base_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80031de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d11b      	bne.n	800321e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80031e6:	4813      	ldr	r0, [pc, #76]	; (8003234 <HAL_InitTick+0xd8>)
 80031e8:	f003 faf8 	bl	80067dc <HAL_TIM_Base_Start_IT>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80031f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d111      	bne.n	800321e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80031fa:	2019      	movs	r0, #25
 80031fc:	f001 fd51 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	d808      	bhi.n	8003218 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003206:	2200      	movs	r2, #0
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	2019      	movs	r0, #25
 800320c:	f001 fd2d 	bl	8004c6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003210:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_InitTick+0xe0>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e002      	b.n	800321e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800321e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003222:	4618      	mov	r0, r3
 8003224:	3730      	adds	r7, #48	; 0x30
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	431bde83 	.word	0x431bde83
 8003234:	20000294 	.word	0x20000294
 8003238:	40010000 	.word	0x40010000
 800323c:	20000020 	.word	0x20000020

08003240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	SystemManager_SetFault(NMI_RESET);
 8003244:	2008      	movs	r0, #8
 8003246:	f00a ff4b 	bl	800e0e0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800324a:	f00a ff73 	bl	800e134 <SystemManager_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800324e:	e7fe      	b.n	800324e <NMI_Handler+0xe>

08003250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SystemManager_SetFault(HARDWARE_RESET);
 8003254:	2006      	movs	r0, #6
 8003256:	f00a ff43 	bl	800e0e0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800325a:	f00a ff6b 	bl	800e134 <SystemManager_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800325e:	e7fe      	b.n	800325e <HardFault_Handler+0xe>

08003260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SystemManager_SetFault(MEMORY_FAULT_RESET);
 8003264:	2009      	movs	r0, #9
 8003266:	f00a ff3b 	bl	800e0e0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800326a:	f00a ff63 	bl	800e134 <SystemManager_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800326e:	e7fe      	b.n	800326e <MemManage_Handler+0xe>

08003270 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SystemManager_SetFault(BUS_FAULT_RESET);
 8003274:	200b      	movs	r0, #11
 8003276:	f00a ff33 	bl	800e0e0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800327a:	f00a ff5b 	bl	800e134 <SystemManager_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800327e:	e7fe      	b.n	800327e <BusFault_Handler+0xe>

08003280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SystemManager_SetFault(USAGE_FAULT_RESET);
 8003284:	200a      	movs	r0, #10
 8003286:	f00a ff2b 	bl	800e0e0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800328a:	f00a ff53 	bl	800e134 <SystemManager_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800328e:	e7fe      	b.n	800328e <UsageFault_Handler+0xe>

08003290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032b0:	4802      	ldr	r0, [pc, #8]	; (80032bc <ADC_IRQHandler+0x10>)
 80032b2:	f000 fe99 	bl	8003fe8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  /* USER CODE END ADC_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	2000012c 	.word	0x2000012c

080032c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032c4:	4802      	ldr	r0, [pc, #8]	; (80032d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80032c6:	f003 fe81 	bl	8006fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000294 	.word	0x20000294

080032d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	/* When alarm is on turn on the LEDs at full duty cycle for the designated time. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_PinStateChange == STD_HIGH)
 80032d8:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <TIM2_IRQHandler+0x120>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10b      	bne.n	80032f8 <TIM2_IRQHandler+0x24>
	{
		TIM2->CCR1 = TIM2->ARR;
 80032e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = TIM2->ARR;
 80032ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	6393      	str	r3, [r2, #56]	; 0x38
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the low beam light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_HIGH)
 80032f8:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <TIM2_IRQHandler+0x124>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d11a      	bne.n	8003336 <TIM2_IRQHandler+0x62>
	{
		if(TIM2->CCR1 < 1999)
 8003300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800330a:	4293      	cmp	r3, r2
 800330c:	d807      	bhi.n	800331e <TIM2_IRQHandler+0x4a>
		{
			TIM2->CCR1 = TIM2->CCR1 + 20;
 800330e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003318:	3314      	adds	r3, #20
 800331a:	6353      	str	r3, [r2, #52]	; 0x34
 800331c:	e00b      	b.n	8003336 <TIM2_IRQHandler+0x62>
		}
		else if(TIM2->CCR1 >= 1999)
 800331e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003324:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003328:	4293      	cmp	r3, r2
 800332a:	d904      	bls.n	8003336 <TIM2_IRQHandler+0x62>
		{
			TIM2->CCR1 = 1999;
 800332c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003330:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the rear position light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 8003336:	4b31      	ldr	r3, [pc, #196]	; (80033fc <TIM2_IRQHandler+0x128>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d11a      	bne.n	8003374 <TIM2_IRQHandler+0xa0>
	{
		if(TIM2->CCR2 < 1999)
 800333e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003348:	4293      	cmp	r3, r2
 800334a:	d807      	bhi.n	800335c <TIM2_IRQHandler+0x88>
		{
			TIM2->CCR2 = TIM2->CCR2 + 1;
 800334c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003356:	3301      	adds	r3, #1
 8003358:	6393      	str	r3, [r2, #56]	; 0x38
 800335a:	e00b      	b.n	8003374 <TIM2_IRQHandler+0xa0>
		}
		else if(TIM2->CCR2 >= 1999)
 800335c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003366:	4293      	cmp	r3, r2
 8003368:	d904      	bls.n	8003374 <TIM2_IRQHandler+0xa0>
		{
			TIM2->CCR2 = 1999;
 800336a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800336e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_HIGH)
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <TIM2_IRQHandler+0x12c>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d11b      	bne.n	80033b4 <TIM2_IRQHandler+0xe0>
	{
		if(TIM2->CCR3 < 1999)
 800337c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003386:	4293      	cmp	r3, r2
 8003388:	d807      	bhi.n	800339a <TIM2_IRQHandler+0xc6>
		{
			TIM2->CCR3 = TIM2->CCR3 + 20;
 800338a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003394:	3314      	adds	r3, #20
 8003396:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003398:	e026      	b.n	80033e8 <TIM2_IRQHandler+0x114>
		}
		else if(TIM2->CCR3 >= 1999)
 800339a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d91f      	bls.n	80033e8 <TIM2_IRQHandler+0x114>
		{
			TIM2->CCR3 = 1999;
 80033a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033ac:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80033b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80033b2:	e019      	b.n	80033e8 <TIM2_IRQHandler+0x114>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_LOW)
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <TIM2_IRQHandler+0x12c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d115      	bne.n	80033e8 <TIM2_IRQHandler+0x114>
	{
		if(TIM2->CCR3 > 20)
 80033bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	2b14      	cmp	r3, #20
 80033c4:	d907      	bls.n	80033d6 <TIM2_IRQHandler+0x102>
		{
			TIM2->CCR3 = TIM2->CCR3 - 20;
 80033c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033d0:	3b14      	subs	r3, #20
 80033d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80033d4:	e008      	b.n	80033e8 <TIM2_IRQHandler+0x114>
		}
		else if(TIM2->CCR3 <= 20)
 80033d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033dc:	2b14      	cmp	r3, #20
 80033de:	d803      	bhi.n	80033e8 <TIM2_IRQHandler+0x114>
		{
			TIM2->CCR3 = 0;
 80033e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033e4:	2200      	movs	r2, #0
 80033e6:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033e8:	4806      	ldr	r0, [pc, #24]	; (8003404 <TIM2_IRQHandler+0x130>)
 80033ea:	f003 fdef 	bl	8006fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000111 	.word	0x20000111
 80033f8:	200000e8 	.word	0x200000e8
 80033fc:	200000e9 	.word	0x200000e9
 8003400:	20000104 	.word	0x20000104
 8003404:	20000348 	.word	0x20000348

08003408 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
	/* On brake lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the brake lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
 800340c:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <TIM3_IRQHandler+0xb8>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d104      	bne.n	800341e <TIM3_IRQHandler+0x16>
	{
		TIM3->CCR2 = TIM3->ARR;
 8003414:	4b2b      	ldr	r3, [pc, #172]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 8003416:	4a2b      	ldr	r2, [pc, #172]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	6393      	str	r3, [r2, #56]	; 0x38
 800341c:	e006      	b.n	800342c <TIM3_IRQHandler+0x24>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 800341e:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <TIM3_IRQHandler+0xb8>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <TIM3_IRQHandler+0x24>
	{
		TIM3->CCR2 = 0;
 8003426:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 8003428:	2200      	movs	r2, #0
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
	/* On front fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the front fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 800342c:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <TIM3_IRQHandler+0xc0>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d116      	bne.n	8003462 <TIM3_IRQHandler+0x5a>
	{
		if(TIM3->CCR3 < 1999)
 8003434:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800343c:	4293      	cmp	r3, r2
 800343e:	d805      	bhi.n	800344c <TIM3_IRQHandler+0x44>
		{
			TIM3->CCR3 = TIM3->CCR3 + 20;
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 8003446:	3314      	adds	r3, #20
 8003448:	63d3      	str	r3, [r2, #60]	; 0x3c
 800344a:	e011      	b.n	8003470 <TIM3_IRQHandler+0x68>
		}
		else if(TIM3->CCR3 >= 1999)
 800344c:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003454:	4293      	cmp	r3, r2
 8003456:	d90b      	bls.n	8003470 <TIM3_IRQHandler+0x68>
		{
			TIM3->CCR3 = 1999;
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 800345a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800345e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003460:	e006      	b.n	8003470 <TIM3_IRQHandler+0x68>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8003462:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <TIM3_IRQHandler+0xc0>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <TIM3_IRQHandler+0x68>
	{
		TIM3->CCR3 = 0;
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 800346c:	2200      	movs	r2, #0
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* On rear fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the rear fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <TIM3_IRQHandler+0xc4>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d116      	bne.n	80034a6 <TIM3_IRQHandler+0x9e>
	{
		if(TIM3->CCR4 < 1999)
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003480:	4293      	cmp	r3, r2
 8003482:	d805      	bhi.n	8003490 <TIM3_IRQHandler+0x88>
		{
			TIM3->CCR4 = TIM3->CCR4 + 20;
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 800348a:	3314      	adds	r3, #20
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	e011      	b.n	80034b4 <TIM3_IRQHandler+0xac>
		}
		else if(TIM3->CCR4 >= 1999)
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003498:	4293      	cmp	r3, r2
 800349a:	d90b      	bls.n	80034b4 <TIM3_IRQHandler+0xac>
		{
			TIM3->CCR4 = 1999;
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 800349e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
 80034a4:	e006      	b.n	80034b4 <TIM3_IRQHandler+0xac>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <TIM3_IRQHandler+0xc4>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <TIM3_IRQHandler+0xac>
	{
		TIM3->CCR4 = 0;
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <TIM3_IRQHandler+0xbc>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034b4:	4806      	ldr	r0, [pc, #24]	; (80034d0 <TIM3_IRQHandler+0xc8>)
 80034b6:	f003 fd89 	bl	8006fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200000e2 	.word	0x200000e2
 80034c4:	40000400 	.word	0x40000400
 80034c8:	200000e5 	.word	0x200000e5
 80034cc:	200000eb 	.word	0x200000eb
 80034d0:	200003fc 	.word	0x200003fc

080034d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <TIM4_IRQHandler+0x10>)
 80034da:	f003 fd77 	bl	8006fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200004b0 	.word	0x200004b0

080034e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <USART1_IRQHandler+0x10>)
 80034ee:	f004 ff2b 	bl	8008348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000618 	.word	0x20000618

080034fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003500:	4802      	ldr	r0, [pc, #8]	; (800350c <TIM5_IRQHandler+0x10>)
 8003502:	f003 fd63 	bl	8006fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000564 	.word	0x20000564

08003510 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <DMA2_Stream0_IRQHandler+0x10>)
 8003516:	f001 fee3 	bl	80052e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000190 	.word	0x20000190

08003524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <SystemInit+0x20>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	4a05      	ldr	r2, [pc, #20]	; (8003544 <SystemInit+0x20>)
 8003530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM5_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08c      	sub	sp, #48	; 0x30
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 031c 	add.w	r3, r7, #28
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	4b35      	ldr	r3, [pc, #212]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a34      	ldr	r2, [pc, #208]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b32      	ldr	r3, [pc, #200]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003586:	e058      	b.n	800363a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2e      	ldr	r2, [pc, #184]	; (8003648 <HAL_TIM_Base_MspInit+0x100>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b28      	ldr	r3, [pc, #160]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697b      	ldr	r3, [r7, #20]
}
 80035ae:	e044      	b.n	800363a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM4)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a25      	ldr	r2, [pc, #148]	; (800364c <HAL_TIM_Base_MspInit+0x104>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10e      	bne.n	80035d8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	4b21      	ldr	r3, [pc, #132]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a20      	ldr	r2, [pc, #128]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
}
 80035d6:	e030      	b.n	800363a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_TIM_Base_MspInit+0x108>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d12b      	bne.n	800363a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 80035ec:	f043 0308 	orr.w	r3, r3, #8
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a0f      	ldr	r2, [pc, #60]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_TIM_Base_MspInit+0xfc>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PDCF_IC_Pin|PDCR_IC_Pin;
 800361a:	2303      	movs	r3, #3
 800361c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361e:	2302      	movs	r3, #2
 8003620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	2300      	movs	r3, #0
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800362a:	2302      	movs	r3, #2
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362e:	f107 031c 	add.w	r3, r7, #28
 8003632:	4619      	mov	r1, r3
 8003634:	4807      	ldr	r0, [pc, #28]	; (8003654 <HAL_TIM_Base_MspInit+0x10c>)
 8003636:	f002 f8bd 	bl	80057b4 <HAL_GPIO_Init>
}
 800363a:	bf00      	nop
 800363c:	3730      	adds	r7, #48	; 0x30
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40000c00 	.word	0x40000c00
 8003654:	40020000 	.word	0x40020000

08003658 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	f107 031c 	add.w	r3, r7, #28
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d13e      	bne.n	80036f8 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	4b45      	ldr	r3, [pc, #276]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4a44      	ldr	r2, [pc, #272]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	6313      	str	r3, [r2, #48]	; 0x30
 800368a:	4b42      	ldr	r3, [pc, #264]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	4a3d      	ldr	r2, [pc, #244]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6313      	str	r3, [r2, #48]	; 0x30
 80036a6:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = IL_PWM_Pin|RPL_PWM_Pin;
 80036b2:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80036b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c0:	2300      	movs	r3, #0
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036c4:	2301      	movs	r3, #1
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c8:	f107 031c 	add.w	r3, r7, #28
 80036cc:	4619      	mov	r1, r3
 80036ce:	4832      	ldr	r0, [pc, #200]	; (8003798 <HAL_TIM_MspPostInit+0x140>)
 80036d0:	f002 f870 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LB_PWM_Pin;
 80036d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2300      	movs	r3, #0
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036e6:	2301      	movs	r3, #1
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LB_PWM_GPIO_Port, &GPIO_InitStruct);
 80036ea:	f107 031c 	add.w	r3, r7, #28
 80036ee:	4619      	mov	r1, r3
 80036f0:	482a      	ldr	r0, [pc, #168]	; (800379c <HAL_TIM_MspPostInit+0x144>)
 80036f2:	f002 f85f 	bl	80057b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80036f6:	e048      	b.n	800378a <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d11f      	bne.n	8003742 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	4b23      	ldr	r3, [pc, #140]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a22      	ldr	r2, [pc, #136]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BL_PWM_Pin|FFL_PWM_Pin|RFL_PWM_Pin;
 800371e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372c:	2300      	movs	r3, #0
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003730:	2302      	movs	r3, #2
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	4619      	mov	r1, r3
 800373a:	481a      	ldr	r0, [pc, #104]	; (80037a4 <HAL_TIM_MspPostInit+0x14c>)
 800373c:	f002 f83a 	bl	80057b4 <HAL_GPIO_Init>
}
 8003740:	e023      	b.n	800378a <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_TIM_MspPostInit+0x150>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d11e      	bne.n	800378a <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	4a0f      	ldr	r2, [pc, #60]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 8003756:	f043 0302 	orr.w	r3, r3, #2
 800375a:	6313      	str	r3, [r2, #48]	; 0x30
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_TIM_MspPostInit+0x13c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LTS_PWM_Pin|RTS_PWM_Pin;
 8003768:	f44f 7340 	mov.w	r3, #768	; 0x300
 800376c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2300      	movs	r3, #0
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800377a:	2302      	movs	r3, #2
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377e:	f107 031c 	add.w	r3, r7, #28
 8003782:	4619      	mov	r1, r3
 8003784:	4804      	ldr	r0, [pc, #16]	; (8003798 <HAL_TIM_MspPostInit+0x140>)
 8003786:	f002 f815 	bl	80057b4 <HAL_GPIO_Init>
}
 800378a:	bf00      	nop
 800378c:	3730      	adds	r7, #48	; 0x30
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	40020400 	.word	0x40020400
 800379c:	40020000 	.word	0x40020000
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40020800 	.word	0x40020800
 80037a8:	40000800 	.word	0x40000800

080037ac <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037bc:	d109      	bne.n	80037d2 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 80037be:	4b1f      	ldr	r3, [pc, #124]	; (800383c <HAL_TIM_Base_MspDeInit+0x90>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a1e      	ldr	r2, [pc, #120]	; (800383c <HAL_TIM_Base_MspDeInit+0x90>)
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80037ca:	201c      	movs	r0, #28
 80037cc:	f001 fa77 	bl	8004cbe <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
}
 80037d0:	e02f      	b.n	8003832 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM3)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1a      	ldr	r2, [pc, #104]	; (8003840 <HAL_TIM_Base_MspDeInit+0x94>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d109      	bne.n	80037f0 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80037dc:	4b17      	ldr	r3, [pc, #92]	; (800383c <HAL_TIM_Base_MspDeInit+0x90>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	4a16      	ldr	r2, [pc, #88]	; (800383c <HAL_TIM_Base_MspDeInit+0x90>)
 80037e2:	f023 0302 	bic.w	r3, r3, #2
 80037e6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80037e8:	201d      	movs	r0, #29
 80037ea:	f001 fa68 	bl	8004cbe <HAL_NVIC_DisableIRQ>
}
 80037ee:	e020      	b.n	8003832 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM4)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a13      	ldr	r2, [pc, #76]	; (8003844 <HAL_TIM_Base_MspDeInit+0x98>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d109      	bne.n	800380e <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM4_CLK_DISABLE();
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_TIM_Base_MspDeInit+0x90>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a0f      	ldr	r2, [pc, #60]	; (800383c <HAL_TIM_Base_MspDeInit+0x90>)
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003806:	201e      	movs	r0, #30
 8003808:	f001 fa59 	bl	8004cbe <HAL_NVIC_DisableIRQ>
}
 800380c:	e011      	b.n	8003832 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM5)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a0d      	ldr	r2, [pc, #52]	; (8003848 <HAL_TIM_Base_MspDeInit+0x9c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10c      	bne.n	8003832 <HAL_TIM_Base_MspDeInit+0x86>
    __HAL_RCC_TIM5_CLK_DISABLE();
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_TIM_Base_MspDeInit+0x90>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_TIM_Base_MspDeInit+0x90>)
 800381e:	f023 0308 	bic.w	r3, r3, #8
 8003822:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PDCF_IC_Pin|PDCR_IC_Pin);
 8003824:	2103      	movs	r1, #3
 8003826:	4809      	ldr	r0, [pc, #36]	; (800384c <HAL_TIM_Base_MspDeInit+0xa0>)
 8003828:	f002 f948 	bl	8005abc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 800382c:	2032      	movs	r0, #50	; 0x32
 800382e:	f001 fa46 	bl	8004cbe <HAL_NVIC_DisableIRQ>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40020000 	.word	0x40020000

08003850 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a19      	ldr	r2, [pc, #100]	; (80038d4 <HAL_UART_MspInit+0x84>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12c      	bne.n	80038cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <HAL_UART_MspInit+0x88>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <HAL_UART_MspInit+0x88>)
 800387c:	f043 0310 	orr.w	r3, r3, #16
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_UART_MspInit+0x88>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <HAL_UART_MspInit+0x88>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <HAL_UART_MspInit+0x88>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_UART_MspInit+0x88>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b8:	2303      	movs	r3, #3
 80038ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038bc:	2307      	movs	r3, #7
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4619      	mov	r1, r3
 80038c6:	4805      	ldr	r0, [pc, #20]	; (80038dc <HAL_UART_MspInit+0x8c>)
 80038c8:	f001 ff74 	bl	80057b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80038cc:	bf00      	nop
 80038ce:	3728      	adds	r7, #40	; 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40011000 	.word	0x40011000
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020000 	.word	0x40020000

080038e0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <HAL_UART_MspDeInit+0x38>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10d      	bne.n	800390e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_UART_MspDeInit+0x3c>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <HAL_UART_MspDeInit+0x3c>)
 80038f8:	f023 0310 	bic.w	r3, r3, #16
 80038fc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80038fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003902:	4807      	ldr	r0, [pc, #28]	; (8003920 <HAL_UART_MspDeInit+0x40>)
 8003904:	f002 f8da 	bl	8005abc <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003908:	2025      	movs	r0, #37	; 0x25
 800390a:	f001 f9d8 	bl	8004cbe <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40011000 	.word	0x40011000
 800391c:	40023800 	.word	0x40023800
 8003920:	40020000 	.word	0x40020000

08003924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800395c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003928:	480d      	ldr	r0, [pc, #52]	; (8003960 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800392a:	490e      	ldr	r1, [pc, #56]	; (8003964 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800392c:	4a0e      	ldr	r2, [pc, #56]	; (8003968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800392e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003930:	e002      	b.n	8003938 <LoopCopyDataInit>

08003932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003936:	3304      	adds	r3, #4

08003938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800393a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800393c:	d3f9      	bcc.n	8003932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800393e:	4a0b      	ldr	r2, [pc, #44]	; (800396c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003940:	4c0b      	ldr	r4, [pc, #44]	; (8003970 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003944:	e001      	b.n	800394a <LoopFillZerobss>

08003946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003948:	3204      	adds	r2, #4

0800394a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800394a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800394c:	d3fb      	bcc.n	8003946 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800394e:	f7ff fde9 	bl	8003524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003952:	f00a fcd9 	bl	800e308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003956:	f7fd f9bb 	bl	8000cd0 <main>
  bx  lr    
 800395a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800395c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003964:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003968:	0800ec70 	.word	0x0800ec70
  ldr r2, =_sbss
 800396c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003970:	20008a14 	.word	0x20008a14

08003974 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003974:	e7fe      	b.n	8003974 <DMA1_Stream0_IRQHandler>

08003976 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d104      	bne.n	800398e <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003984:	b672      	cpsid	i
}
 8003986:	bf00      	nop
 8003988:	f00a fc88 	bl	800e29c <Error_Handler>
 800398c:	e7fe      	b.n	800398c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7a1b      	ldrb	r3, [r3, #8]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d904      	bls.n	80039a0 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003996:	b672      	cpsid	i
}
 8003998:	bf00      	nop
 800399a:	f00a fc7f 	bl	800e29c <Error_Handler>
 800399e:	e7fe      	b.n	800399e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7a1b      	ldrb	r3, [r3, #8]
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	b2d1      	uxtb	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	7211      	strb	r1, [r2, #8]
 80039ac:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039ae:	f3ef 8211 	mrs	r2, BASEPRI
 80039b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	60fa      	str	r2, [r7, #12]
 80039c4:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80039e4:	b672      	cpsid	i
}
 80039e6:	bf00      	nop
 80039e8:	f00a fc58 	bl	800e29c <Error_Handler>
 80039ec:	e7fe      	b.n	80039ec <stm32_lock_release+0x16>
  lock->nesting_level--;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7a1b      	ldrb	r3, [r3, #8]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7a1b      	ldrb	r3, [r3, #8]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d904      	bls.n	8003a0c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a02:	b672      	cpsid	i
}
 8003a04:	bf00      	nop
 8003a06:	f00a fc49 	bl	800e29c <Error_Handler>
 8003a0a:	e7fe      	b.n	8003a0a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	7a1b      	ldrb	r3, [r3, #8]
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a18:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a20:	bf00      	nop
}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d104      	bne.n	8003a42 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a38:	b672      	cpsid	i
}
 8003a3a:	bf00      	nop
 8003a3c:	f00a fc2e 	bl	800e29c <Error_Handler>
 8003a40:	e7fe      	b.n	8003a40 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff96 	bl	8003976 <stm32_lock_acquire>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a60:	b672      	cpsid	i
}
 8003a62:	bf00      	nop
 8003a64:	f00a fc1a 	bl	800e29c <Error_Handler>
 8003a68:	e7fe      	b.n	8003a68 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ffb2 	bl	80039d6 <stm32_lock_release>
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <Dem_MainFunction>:
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	af00      	add	r7, sp, #0
	Dem_ProcessFault();
 8003a7e:	f000 f803 	bl	8003a88 <Dem_ProcessFault>
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <Dem_ProcessFault>:
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process fault from application.							 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
	uint8 local = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	707b      	strb	r3, [r7, #1]
	uint16 msg_length = strlen(Dem_DtcMessage);
 8003a92:	4b67      	ldr	r3, [pc, #412]	; (8003c30 <Dem_ProcessFault+0x1a8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fba2 	bl	80001e0 <strlen>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	81fb      	strh	r3, [r7, #14]
	uint16 ls_length = strlen(Dem_DtcLs);
 8003aa0:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <Dem_ProcessFault+0x1ac>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc fb9b 	bl	80001e0 <strlen>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	81bb      	strh	r3, [r7, #12]
	uint16 vs_length = strlen(Dem_DtcVs);
 8003aae:	4b62      	ldr	r3, [pc, #392]	; (8003c38 <Dem_ProcessFault+0x1b0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fc fb94 	bl	80001e0 <strlen>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	817b      	strh	r3, [r7, #10]
	uint16 pdcr_length = strlen(Dem_DtcPdcr);
 8003abc:	4b5f      	ldr	r3, [pc, #380]	; (8003c3c <Dem_ProcessFault+0x1b4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fc fb8d 	bl	80001e0 <strlen>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	813b      	strh	r3, [r7, #8]
	uint16 pdcf_length = strlen(Dem_DtcPdcf);
 8003aca:	4b5d      	ldr	r3, [pc, #372]	; (8003c40 <Dem_ProcessFault+0x1b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc fb86 	bl	80001e0 <strlen>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	80fb      	strh	r3, [r7, #6]
	uint16 bt_length = strlen(Dem_DtcBt);
 8003ad8:	4b5a      	ldr	r3, [pc, #360]	; (8003c44 <Dem_ProcessFault+0x1bc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fb7f 	bl	80001e0 <strlen>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	80bb      	strh	r3, [r7, #4]
	uint16 hw_length = strlen(Dem_DtcHw);
 8003ae6:	4b58      	ldr	r3, [pc, #352]	; (8003c48 <Dem_ProcessFault+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fc fb78 	bl	80001e0 <strlen>
 8003af0:	4603      	mov	r3, r0
 8003af2:	807b      	strh	r3, [r7, #2]

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8003af4:	4b55      	ldr	r3, [pc, #340]	; (8003c4c <Dem_ProcessFault+0x1c4>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <Dem_ProcessFault+0x7c>
 8003afc:	4b54      	ldr	r3, [pc, #336]	; (8003c50 <Dem_ProcessFault+0x1c8>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <Dem_ProcessFault+0x82>
	{
		Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8003b04:	4b53      	ldr	r3, [pc, #332]	; (8003c54 <Dem_ProcessFault+0x1cc>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8003b0a:	4b53      	ldr	r3, [pc, #332]	; (8003c58 <Dem_ProcessFault+0x1d0>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <Dem_ProcessFault+0x92>
 8003b12:	4b4f      	ldr	r3, [pc, #316]	; (8003c50 <Dem_ProcessFault+0x1c8>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <Dem_ProcessFault+0x98>
	{
		Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8003b1a:	4b4e      	ldr	r3, [pc, #312]	; (8003c54 <Dem_ProcessFault+0x1cc>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	70da      	strb	r2, [r3, #3]
	else
	{
		/* do nothing */
	}

	if(Rte_P_Btc_BtcPort_Btc_ReceivedDataOnBluetooth == 90)
 8003b20:	4b4e      	ldr	r3, [pc, #312]	; (8003c5c <Dem_ProcessFault+0x1d4>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b5a      	cmp	r3, #90	; 0x5a
 8003b26:	d17e      	bne.n	8003c26 <Dem_ProcessFault+0x19e>
	{
		while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcMessage, msg_length) == HAL_BUSY);
 8003b28:	bf00      	nop
 8003b2a:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <Dem_ProcessFault+0x1a8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	89fa      	ldrh	r2, [r7, #14]
 8003b30:	4619      	mov	r1, r3
 8003b32:	484b      	ldr	r0, [pc, #300]	; (8003c60 <Dem_ProcessFault+0x1d8>)
 8003b34:	f004 fb92 	bl	800825c <HAL_UART_Transmit_IT>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d0f5      	beq.n	8003b2a <Dem_ProcessFault+0xa2>
		Rte_Runnable_Wdg_MainFunction();
 8003b3e:	f009 fb7d 	bl	800d23c <Rte_Runnable_Wdg_MainFunction>
		if(Dem_DtcArray[0])
 8003b42:	4b44      	ldr	r3, [pc, #272]	; (8003c54 <Dem_ProcessFault+0x1cc>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <Dem_ProcessFault+0xdc>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcLs, ls_length) == HAL_BUSY);
 8003b4a:	bf00      	nop
 8003b4c:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <Dem_ProcessFault+0x1ac>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	89ba      	ldrh	r2, [r7, #12]
 8003b52:	4619      	mov	r1, r3
 8003b54:	4842      	ldr	r0, [pc, #264]	; (8003c60 <Dem_ProcessFault+0x1d8>)
 8003b56:	f004 fb81 	bl	800825c <HAL_UART_Transmit_IT>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d0f5      	beq.n	8003b4c <Dem_ProcessFault+0xc4>
			Rte_Runnable_Wdg_MainFunction();
 8003b60:	f009 fb6c 	bl	800d23c <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[1])
 8003b64:	4b3b      	ldr	r3, [pc, #236]	; (8003c54 <Dem_ProcessFault+0x1cc>)
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <Dem_ProcessFault+0xfe>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcVs, vs_length) == HAL_BUSY);
 8003b6c:	bf00      	nop
 8003b6e:	4b32      	ldr	r3, [pc, #200]	; (8003c38 <Dem_ProcessFault+0x1b0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	897a      	ldrh	r2, [r7, #10]
 8003b74:	4619      	mov	r1, r3
 8003b76:	483a      	ldr	r0, [pc, #232]	; (8003c60 <Dem_ProcessFault+0x1d8>)
 8003b78:	f004 fb70 	bl	800825c <HAL_UART_Transmit_IT>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d0f5      	beq.n	8003b6e <Dem_ProcessFault+0xe6>
			Rte_Runnable_Wdg_MainFunction();
 8003b82:	f009 fb5b 	bl	800d23c <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[2])
 8003b86:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <Dem_ProcessFault+0x1cc>)
 8003b88:	789b      	ldrb	r3, [r3, #2]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <Dem_ProcessFault+0x120>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcPdcr, pdcr_length) == HAL_BUSY);
 8003b8e:	bf00      	nop
 8003b90:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <Dem_ProcessFault+0x1b4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	893a      	ldrh	r2, [r7, #8]
 8003b96:	4619      	mov	r1, r3
 8003b98:	4831      	ldr	r0, [pc, #196]	; (8003c60 <Dem_ProcessFault+0x1d8>)
 8003b9a:	f004 fb5f 	bl	800825c <HAL_UART_Transmit_IT>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d0f5      	beq.n	8003b90 <Dem_ProcessFault+0x108>
			Rte_Runnable_Wdg_MainFunction();
 8003ba4:	f009 fb4a 	bl	800d23c <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[3])
 8003ba8:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <Dem_ProcessFault+0x1cc>)
 8003baa:	78db      	ldrb	r3, [r3, #3]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00c      	beq.n	8003bca <Dem_ProcessFault+0x142>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcPdcf, pdcf_length) == HAL_BUSY);
 8003bb0:	bf00      	nop
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <Dem_ProcessFault+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4829      	ldr	r0, [pc, #164]	; (8003c60 <Dem_ProcessFault+0x1d8>)
 8003bbc:	f004 fb4e 	bl	800825c <HAL_UART_Transmit_IT>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d0f5      	beq.n	8003bb2 <Dem_ProcessFault+0x12a>
			Rte_Runnable_Wdg_MainFunction();
 8003bc6:	f009 fb39 	bl	800d23c <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[4])
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <Dem_ProcessFault+0x1cc>)
 8003bcc:	791b      	ldrb	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00c      	beq.n	8003bec <Dem_ProcessFault+0x164>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcBt, bt_length) == HAL_BUSY);
 8003bd2:	bf00      	nop
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <Dem_ProcessFault+0x1bc>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	88ba      	ldrh	r2, [r7, #4]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4820      	ldr	r0, [pc, #128]	; (8003c60 <Dem_ProcessFault+0x1d8>)
 8003bde:	f004 fb3d 	bl	800825c <HAL_UART_Transmit_IT>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d0f5      	beq.n	8003bd4 <Dem_ProcessFault+0x14c>
			Rte_Runnable_Wdg_MainFunction();
 8003be8:	f009 fb28 	bl	800d23c <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[5] != 0 || Dem_DtcArray[6] != 0 || Dem_DtcArray[7] != 0)
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <Dem_ProcessFault+0x1cc>)
 8003bee:	795b      	ldrb	r3, [r3, #5]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d107      	bne.n	8003c04 <Dem_ProcessFault+0x17c>
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <Dem_ProcessFault+0x1cc>)
 8003bf6:	799b      	ldrb	r3, [r3, #6]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <Dem_ProcessFault+0x17c>
 8003bfc:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <Dem_ProcessFault+0x1cc>)
 8003bfe:	79db      	ldrb	r3, [r3, #7]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00c      	beq.n	8003c1e <Dem_ProcessFault+0x196>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcHw, hw_length) == HAL_BUSY);
 8003c04:	bf00      	nop
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <Dem_ProcessFault+0x1c0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	887a      	ldrh	r2, [r7, #2]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4814      	ldr	r0, [pc, #80]	; (8003c60 <Dem_ProcessFault+0x1d8>)
 8003c10:	f004 fb24 	bl	800825c <HAL_UART_Transmit_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d0f5      	beq.n	8003c06 <Dem_ProcessFault+0x17e>
			Rte_Runnable_Wdg_MainFunction();
 8003c1a:	f009 fb0f 	bl	800d23c <Rte_Runnable_Wdg_MainFunction>
		}
		Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&local);
 8003c1e:	1c7b      	adds	r3, r7, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f009 fb85 	bl	800d330 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	}
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000004 	.word	0x20000004
 8003c34:	20000008 	.word	0x20000008
 8003c38:	2000000c 	.word	0x2000000c
 8003c3c:	20000010 	.word	0x20000010
 8003c40:	20000014 	.word	0x20000014
 8003c44:	20000018 	.word	0x20000018
 8003c48:	2000001c 	.word	0x2000001c
 8003c4c:	200006d5 	.word	0x200006d5
 8003c50:	200000e0 	.word	0x200000e0
 8003c54:	20000698 	.word	0x20000698
 8003c58:	200006c5 	.word	0x200006c5
 8003c5c:	200000b2 	.word	0x200000b2
 8003c60:	20000618 	.word	0x20000618

08003c64 <Dem_ReceiveFault>:
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
	switch(faultValue)
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	2b99      	cmp	r3, #153	; 0x99
 8003c72:	d070      	beq.n	8003d56 <Dem_ReceiveFault+0xf2>
 8003c74:	2b99      	cmp	r3, #153	; 0x99
 8003c76:	dc72      	bgt.n	8003d5e <Dem_ReceiveFault+0xfa>
 8003c78:	2b56      	cmp	r3, #86	; 0x56
 8003c7a:	d068      	beq.n	8003d4e <Dem_ReceiveFault+0xea>
 8003c7c:	2b56      	cmp	r3, #86	; 0x56
 8003c7e:	dc6e      	bgt.n	8003d5e <Dem_ReceiveFault+0xfa>
 8003c80:	2b22      	cmp	r3, #34	; 0x22
 8003c82:	dc49      	bgt.n	8003d18 <Dem_ReceiveFault+0xb4>
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	db6a      	blt.n	8003d5e <Dem_ReceiveFault+0xfa>
 8003c88:	3b02      	subs	r3, #2
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d867      	bhi.n	8003d5e <Dem_ReceiveFault+0xfa>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <Dem_ReceiveFault+0x30>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003d2f 	.word	0x08003d2f
 8003c98:	08003d1f 	.word	0x08003d1f
 8003c9c:	08003d5f 	.word	0x08003d5f
 8003ca0:	08003d5f 	.word	0x08003d5f
 8003ca4:	08003d5f 	.word	0x08003d5f
 8003ca8:	08003d5f 	.word	0x08003d5f
 8003cac:	08003d5f 	.word	0x08003d5f
 8003cb0:	08003d5f 	.word	0x08003d5f
 8003cb4:	08003d5f 	.word	0x08003d5f
 8003cb8:	08003d5f 	.word	0x08003d5f
 8003cbc:	08003d5f 	.word	0x08003d5f
 8003cc0:	08003d5f 	.word	0x08003d5f
 8003cc4:	08003d5f 	.word	0x08003d5f
 8003cc8:	08003d5f 	.word	0x08003d5f
 8003ccc:	08003d5f 	.word	0x08003d5f
 8003cd0:	08003d5f 	.word	0x08003d5f
 8003cd4:	08003d37 	.word	0x08003d37
 8003cd8:	08003d27 	.word	0x08003d27
 8003cdc:	08003d5f 	.word	0x08003d5f
 8003ce0:	08003d5f 	.word	0x08003d5f
 8003ce4:	08003d5f 	.word	0x08003d5f
 8003ce8:	08003d5f 	.word	0x08003d5f
 8003cec:	08003d5f 	.word	0x08003d5f
 8003cf0:	08003d5f 	.word	0x08003d5f
 8003cf4:	08003d5f 	.word	0x08003d5f
 8003cf8:	08003d5f 	.word	0x08003d5f
 8003cfc:	08003d5f 	.word	0x08003d5f
 8003d00:	08003d5f 	.word	0x08003d5f
 8003d04:	08003d5f 	.word	0x08003d5f
 8003d08:	08003d5f 	.word	0x08003d5f
 8003d0c:	08003d5f 	.word	0x08003d5f
 8003d10:	08003d5f 	.word	0x08003d5f
 8003d14:	08003d3f 	.word	0x08003d3f
 8003d18:	2b35      	cmp	r3, #53	; 0x35
 8003d1a:	d014      	beq.n	8003d46 <Dem_ReceiveFault+0xe2>
			break;
		case DTC_PERIPHERAL_ERROR:
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
			break;
		default:
			break;
 8003d1c:	e01f      	b.n	8003d5e <Dem_ReceiveFault+0xfa>
			Dem_DtcArray[POSITION_DTC_LIGHT_SENSOR_MALFUNCTION] = DTC_LIGHT_SENSOR_MALFUNCTION;
 8003d1e:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <Dem_ReceiveFault+0x108>)
 8003d20:	2203      	movs	r2, #3
 8003d22:	701a      	strb	r2, [r3, #0]
			break;
 8003d24:	e01c      	b.n	8003d60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_VIBRATION_SENSOR_MALFUNCTION] = DTC_VIBRATION_SENSOR_MALFUNCTION;
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <Dem_ReceiveFault+0x108>)
 8003d28:	2213      	movs	r2, #19
 8003d2a:	705a      	strb	r2, [r3, #1]
			break;
 8003d2c:	e018      	b.n	8003d60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <Dem_ReceiveFault+0x108>)
 8003d30:	2202      	movs	r2, #2
 8003d32:	709a      	strb	r2, [r3, #2]
			break;
 8003d34:	e014      	b.n	8003d60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8003d36:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <Dem_ReceiveFault+0x108>)
 8003d38:	2212      	movs	r2, #18
 8003d3a:	70da      	strb	r2, [r3, #3]
			break;
 8003d3c:	e010      	b.n	8003d60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_BLUETOOTH_MODULE_MALFUNCTION] = DTC_BLUETOOTH_MODULE_MALFUNCTION;
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <Dem_ReceiveFault+0x108>)
 8003d40:	2222      	movs	r2, #34	; 0x22
 8003d42:	711a      	strb	r2, [r3, #4]
			break;
 8003d44:	e00c      	b.n	8003d60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_SOFTWARE_RESET] = DTC_SOFTWARE_RESET;
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <Dem_ReceiveFault+0x108>)
 8003d48:	2235      	movs	r2, #53	; 0x35
 8003d4a:	715a      	strb	r2, [r3, #5]
			break;
 8003d4c:	e008      	b.n	8003d60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_HARDWARE_RESET] = DTC_HARDWARE_RESET;
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <Dem_ReceiveFault+0x108>)
 8003d50:	2256      	movs	r2, #86	; 0x56
 8003d52:	719a      	strb	r2, [r3, #6]
			break;
 8003d54:	e004      	b.n	8003d60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <Dem_ReceiveFault+0x108>)
 8003d58:	2299      	movs	r2, #153	; 0x99
 8003d5a:	71da      	strb	r2, [r3, #7]
			break;
 8003d5c:	e000      	b.n	8003d60 <Dem_ReceiveFault+0xfc>
			break;
 8003d5e:	bf00      	nop
	}
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	20000698 	.word	0x20000698

08003d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <HAL_Init+0x40>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <HAL_Init+0x40>)
 8003d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_Init+0x40>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <HAL_Init+0x40>)
 8003d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_Init+0x40>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <HAL_Init+0x40>)
 8003d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d98:	2003      	movs	r0, #3
 8003d9a:	f000 ff5b 	bl	8004c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d9e:	200f      	movs	r0, #15
 8003da0:	f7ff f9dc 	bl	800315c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003da4:	f7ff f990 	bl	80030c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023c00 	.word	0x40023c00

08003db4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_DeInit+0x54>)
 8003dba:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbe:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_DeInit+0x54>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_DeInit+0x54>)
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <HAL_DeInit+0x54>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_DeInit+0x54>)
 8003dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dda:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <HAL_DeInit+0x54>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_DeInit+0x54>)
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295
 8003de8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <HAL_DeInit+0x54>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_DeInit+0x54>)
 8003df2:	f04f 32ff 	mov.w	r2, #4294967295
 8003df6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <HAL_DeInit+0x54>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003dfe:	f000 f805 	bl	8003e0c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40023800 	.word	0x40023800

08003e0c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_IncTick+0x20>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_IncTick+0x24>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <HAL_IncTick+0x24>)
 8003e2e:	6013      	str	r3, [r2, #0]
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000024 	.word	0x20000024
 8003e40:	200006a0 	.word	0x200006a0

08003e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return uwTick;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_GetTick+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	200006a0 	.word	0x200006a0

08003e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e64:	f7ff ffee 	bl	8003e44 <HAL_GetTick>
 8003e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d005      	beq.n	8003e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_Delay+0x44>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e82:	bf00      	nop
 8003e84:	f7ff ffde 	bl	8003e44 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d8f7      	bhi.n	8003e84 <HAL_Delay+0x28>
  {
  }
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000024 	.word	0x20000024

08003ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e04a      	b.n	8003f50 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d120      	bne.n	8003f04 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a24      	ldr	r2, [pc, #144]	; (8003f58 <HAL_ADC_Init+0xb4>)
 8003ec6:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a24      	ldr	r2, [pc, #144]	; (8003f5c <HAL_ADC_Init+0xb8>)
 8003ecc:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a23      	ldr	r2, [pc, #140]	; (8003f60 <HAL_ADC_Init+0xbc>)
 8003ed2:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <HAL_ADC_Init+0xc0>)
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <HAL_ADC_Init+0xc4>)
 8003ede:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a20      	ldr	r2, [pc, #128]	; (8003f6c <HAL_ADC_Init+0xc8>)
 8003eec:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d118      	bne.n	8003f42 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f18:	f023 0302 	bic.w	r3, r3, #2
 8003f1c:	f043 0202 	orr.w	r2, r3, #2
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fc21 	bl	800476c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f023 0303 	bic.w	r3, r3, #3
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003f40:	e001      	b.n	8003f46 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	08009261 	.word	0x08009261
 8003f5c:	080043f1 	.word	0x080043f1
 8003f60:	08004405 	.word	0x08004405
 8003f64:	0800929d 	.word	0x0800929d
 8003f68:	08004a71 	.word	0x08004a71
 8003f6c:	08002781 	.word	0x08002781

08003f70 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e02a      	b.n	8003fdc <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f043 0202 	orr.w	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d110      	bne.n	8003fd2 <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <HAL_ADC_DeInit+0x74>)
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	08002885 	.word	0x08002885

08003fe8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d04a      	beq.n	80040b4 <HAL_ADC_IRQHandler+0xcc>
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d047      	beq.n	80040b4 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d12b      	bne.n	80040a2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800404e:	2b00      	cmp	r3, #0
 8004050:	d127      	bne.n	80040a2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800405c:	2b00      	cmp	r3, #0
 800405e:	d006      	beq.n	800406e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800406a:	2b00      	cmp	r3, #0
 800406c:	d119      	bne.n	80040a2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0220 	bic.w	r2, r2, #32
 800407c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d105      	bne.n	80040a2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f043 0201 	orr.w	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f06f 0212 	mvn.w	r2, #18
 80040b2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d058      	beq.n	800417c <HAL_ADC_IRQHandler+0x194>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d055      	beq.n	800417c <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d139      	bne.n	800416a <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004100:	2b00      	cmp	r3, #0
 8004102:	d006      	beq.n	8004112 <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800410e:	2b00      	cmp	r3, #0
 8004110:	d12b      	bne.n	800416a <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800411c:	2b00      	cmp	r3, #0
 800411e:	d124      	bne.n	800416a <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800412a:	2b00      	cmp	r3, #0
 800412c:	d11d      	bne.n	800416a <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004132:	2b00      	cmp	r3, #0
 8004134:	d119      	bne.n	800416a <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004144:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d105      	bne.n	800416a <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f043 0201 	orr.w	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 020c 	mvn.w	r2, #12
 800417a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d018      	beq.n	80041c4 <HAL_ADC_IRQHandler+0x1dc>
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d015      	beq.n	80041c4 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d10e      	bne.n	80041c4 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f06f 0201 	mvn.w	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041d2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <HAL_ADC_IRQHandler+0x220>
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e4:	f043 0202 	orr.w	r2, r3, #2
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0220 	mvn.w	r2, #32
 80041f4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0220 	mvn.w	r2, #32
 8004206:	601a      	str	r2, [r3, #0]
  }
}
 8004208:	bf00      	nop
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_ADC_Start_DMA+0x1e>
 800422a:	2302      	movs	r3, #2
 800422c:	e0ce      	b.n	80043cc <HAL_ADC_Start_DMA+0x1bc>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d018      	beq.n	8004276 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004254:	4b5f      	ldr	r3, [pc, #380]	; (80043d4 <HAL_ADC_Start_DMA+0x1c4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5f      	ldr	r2, [pc, #380]	; (80043d8 <HAL_ADC_Start_DMA+0x1c8>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	0c9a      	lsrs	r2, r3, #18
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004268:	e002      	b.n	8004270 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	3b01      	subs	r3, #1
 800426e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f9      	bne.n	800426a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004284:	d107      	bne.n	8004296 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004294:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	f040 8086 	bne.w	80043b2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e4:	d106      	bne.n	80042f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f023 0206 	bic.w	r2, r3, #6
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
 80042f2:	e002      	b.n	80042fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004302:	4b36      	ldr	r3, [pc, #216]	; (80043dc <HAL_ADC_Start_DMA+0x1cc>)
 8004304:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	4a35      	ldr	r2, [pc, #212]	; (80043e0 <HAL_ADC_Start_DMA+0x1d0>)
 800430c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	4a34      	ldr	r2, [pc, #208]	; (80043e4 <HAL_ADC_Start_DMA+0x1d4>)
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	4a33      	ldr	r2, [pc, #204]	; (80043e8 <HAL_ADC_Start_DMA+0x1d8>)
 800431c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004326:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004336:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004346:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	334c      	adds	r3, #76	; 0x4c
 8004352:	4619      	mov	r1, r3
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f000 fed8 	bl	800510c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10f      	bne.n	8004388 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d129      	bne.n	80043ca <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004384:	609a      	str	r2, [r3, #8]
 8004386:	e020      	b.n	80043ca <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <HAL_ADC_Start_DMA+0x1dc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d11b      	bne.n	80043ca <HAL_ADC_Start_DMA+0x1ba>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d114      	bne.n	80043ca <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	e00b      	b.n	80043ca <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f043 0210 	orr.w	r2, r3, #16
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f043 0201 	orr.w	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000000 	.word	0x20000000
 80043d8:	431bde83 	.word	0x431bde83
 80043dc:	40012300 	.word	0x40012300
 80043e0:	08004965 	.word	0x08004965
 80043e4:	08004a23 	.word	0x08004a23
 80043e8:	08004a41 	.word	0x08004a41
 80043ec:	40012000 	.word	0x40012000

080043f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x1c>
 8004430:	2302      	movs	r3, #2
 8004432:	e113      	b.n	800465c <HAL_ADC_ConfigChannel+0x244>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b09      	cmp	r3, #9
 8004442:	d925      	bls.n	8004490 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68d9      	ldr	r1, [r3, #12]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	3b1e      	subs	r3, #30
 800445a:	2207      	movs	r2, #7
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	43da      	mvns	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	400a      	ands	r2, r1
 8004468:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68d9      	ldr	r1, [r3, #12]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	4618      	mov	r0, r3
 800447c:	4603      	mov	r3, r0
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4403      	add	r3, r0
 8004482:	3b1e      	subs	r3, #30
 8004484:	409a      	lsls	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	e022      	b.n	80044d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6919      	ldr	r1, [r3, #16]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	4613      	mov	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	2207      	movs	r2, #7
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43da      	mvns	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	400a      	ands	r2, r1
 80044b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6919      	ldr	r1, [r3, #16]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	4618      	mov	r0, r3
 80044c6:	4603      	mov	r3, r0
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	4403      	add	r3, r0
 80044cc:	409a      	lsls	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d824      	bhi.n	8004528 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	3b05      	subs	r3, #5
 80044f0:	221f      	movs	r2, #31
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43da      	mvns	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	400a      	ands	r2, r1
 80044fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	4618      	mov	r0, r3
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	3b05      	subs	r3, #5
 800451a:	fa00 f203 	lsl.w	r2, r0, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	635a      	str	r2, [r3, #52]	; 0x34
 8004526:	e04c      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b0c      	cmp	r3, #12
 800452e:	d824      	bhi.n	800457a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	3b23      	subs	r3, #35	; 0x23
 8004542:	221f      	movs	r2, #31
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43da      	mvns	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	400a      	ands	r2, r1
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	4618      	mov	r0, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	3b23      	subs	r3, #35	; 0x23
 800456c:	fa00 f203 	lsl.w	r2, r0, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
 8004578:	e023      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	3b41      	subs	r3, #65	; 0x41
 800458c:	221f      	movs	r2, #31
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43da      	mvns	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	400a      	ands	r2, r1
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4618      	mov	r0, r3
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	3b41      	subs	r3, #65	; 0x41
 80045b6:	fa00 f203 	lsl.w	r2, r0, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045c2:	4b29      	ldr	r3, [pc, #164]	; (8004668 <HAL_ADC_ConfigChannel+0x250>)
 80045c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a28      	ldr	r2, [pc, #160]	; (800466c <HAL_ADC_ConfigChannel+0x254>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d10f      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1d8>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b12      	cmp	r3, #18
 80045d6:	d10b      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_ADC_ConfigChannel+0x254>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d12b      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x23a>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <HAL_ADC_ConfigChannel+0x258>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <HAL_ADC_ConfigChannel+0x1f4>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b11      	cmp	r3, #17
 800460a:	d122      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a11      	ldr	r2, [pc, #68]	; (8004670 <HAL_ADC_ConfigChannel+0x258>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d111      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_ADC_ConfigChannel+0x25c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a11      	ldr	r2, [pc, #68]	; (8004678 <HAL_ADC_ConfigChannel+0x260>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	0c9a      	lsrs	r2, r3, #18
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004644:	e002      	b.n	800464c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	3b01      	subs	r3, #1
 800464a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f9      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40012300 	.word	0x40012300
 800466c:	40012000 	.word	0x40012000
 8004670:	10000012 	.word	0x10000012
 8004674:	20000000 	.word	0x20000000
 8004678:	431bde83 	.word	0x431bde83

0800467c <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_ADC_AnalogWDGConfig+0x18>
 8004690:	2302      	movs	r3, #2
 8004692:	e04d      	b.n	8004730 <HAL_ADC_AnalogWDGConfig+0xb4>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	7c1b      	ldrb	r3, [r3, #16]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d108      	bne.n	80046b6 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	e007      	b.n	80046c6 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c4:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80046d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046d8:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	6852      	ldr	r2, [r2, #4]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	6892      	ldr	r2, [r2, #8]
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 021f 	bic.w	r2, r2, #31
 800470e:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	b29b      	uxth	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004774:	4b79      	ldr	r3, [pc, #484]	; (800495c <ADC_Init+0x1f0>)
 8004776:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	021a      	lsls	r2, r3, #8
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80047c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6859      	ldr	r1, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6899      	ldr	r1, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	4a58      	ldr	r2, [pc, #352]	; (8004960 <ADC_Init+0x1f4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004812:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6899      	ldr	r1, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6899      	ldr	r1, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	e00f      	b.n	800486a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004868:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0202 	bic.w	r2, r2, #2
 8004878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6899      	ldr	r1, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	7e1b      	ldrb	r3, [r3, #24]
 8004884:	005a      	lsls	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6859      	ldr	r1, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	3b01      	subs	r3, #1
 80048c4:	035a      	lsls	r2, r3, #13
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	e007      	b.n	80048e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	051a      	lsls	r2, r3, #20
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6899      	ldr	r1, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004922:	025a      	lsls	r2, r3, #9
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6899      	ldr	r1, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	029a      	lsls	r2, r3, #10
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40012300 	.word	0x40012300
 8004960:	0f000001 	.word	0x0f000001

08004964 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800497a:	2b00      	cmp	r3, #0
 800497c:	d13d      	bne.n	80049fa <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d12b      	bne.n	80049f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800499c:	2b00      	cmp	r3, #0
 800499e:	d127      	bne.n	80049f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d006      	beq.n	80049bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d119      	bne.n	80049f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0220 	bic.w	r2, r2, #32
 80049ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80049f8:	e00f      	b.n	8004a1a <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d004      	beq.n	8004a10 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	4798      	blx	r3
}
 8004a0e:	e004      	b.n	8004a1a <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2240      	movs	r2, #64	; 0x40
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a58:	f043 0204 	orr.w	r2, r3, #4
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ab6:	4a04      	ldr	r2, [pc, #16]	; (8004ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	60d3      	str	r3, [r2, #12]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ad0:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	f003 0307 	and.w	r3, r3, #7
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db0b      	blt.n	8004b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	4907      	ldr	r1, [pc, #28]	; (8004b20 <__NVIC_EnableIRQ+0x38>)
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	2001      	movs	r0, #1
 8004b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000e100 	.word	0xe000e100

08004b24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	db12      	blt.n	8004b5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	f003 021f 	and.w	r2, r3, #31
 8004b3c:	490a      	ldr	r1, [pc, #40]	; (8004b68 <__NVIC_DisableIRQ+0x44>)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	2001      	movs	r0, #1
 8004b46:	fa00 f202 	lsl.w	r2, r0, r2
 8004b4a:	3320      	adds	r3, #32
 8004b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b50:	f3bf 8f4f 	dsb	sy
}
 8004b54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b56:	f3bf 8f6f 	isb	sy
}
 8004b5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	e000e100 	.word	0xe000e100

08004b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db0a      	blt.n	8004b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	490c      	ldr	r1, [pc, #48]	; (8004bb8 <__NVIC_SetPriority+0x4c>)
 8004b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8a:	0112      	lsls	r2, r2, #4
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	440b      	add	r3, r1
 8004b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b94:	e00a      	b.n	8004bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	4908      	ldr	r1, [pc, #32]	; (8004bbc <__NVIC_SetPriority+0x50>)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	0112      	lsls	r2, r2, #4
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	440b      	add	r3, r1
 8004baa:	761a      	strb	r2, [r3, #24]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000e100 	.word	0xe000e100
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b089      	sub	sp, #36	; 0x24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f1c3 0307 	rsb	r3, r3, #7
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	bf28      	it	cs
 8004bde:	2304      	movcs	r3, #4
 8004be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3304      	adds	r3, #4
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d902      	bls.n	8004bf0 <NVIC_EncodePriority+0x30>
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3b03      	subs	r3, #3
 8004bee:	e000      	b.n	8004bf2 <NVIC_EncodePriority+0x32>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	401a      	ands	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c08:	f04f 31ff 	mov.w	r1, #4294967295
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	43d9      	mvns	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c18:	4313      	orrs	r3, r2
         );
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3724      	adds	r7, #36	; 0x24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004c2c:	f3bf 8f4f 	dsb	sy
}
 8004c30:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <__NVIC_SystemReset+0x24>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c3a:	4904      	ldr	r1, [pc, #16]	; (8004c4c <__NVIC_SystemReset+0x24>)
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <__NVIC_SystemReset+0x28>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c42:	f3bf 8f4f 	dsb	sy
}
 8004c46:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004c48:	bf00      	nop
 8004c4a:	e7fd      	b.n	8004c48 <__NVIC_SystemReset+0x20>
 8004c4c:	e000ed00 	.word	0xe000ed00
 8004c50:	05fa0004 	.word	0x05fa0004

08004c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff11 	bl	8004a84 <__NVIC_SetPriorityGrouping>
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	4603      	mov	r3, r0
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c7c:	f7ff ff26 	bl	8004acc <__NVIC_GetPriorityGrouping>
 8004c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	6978      	ldr	r0, [r7, #20]
 8004c88:	f7ff ff9a 	bl	8004bc0 <NVIC_EncodePriority>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff ff69 	bl	8004b6c <__NVIC_SetPriority>
}
 8004c9a:	bf00      	nop
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	4603      	mov	r3, r0
 8004caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ff19 	bl	8004ae8 <__NVIC_EnableIRQ>
}
 8004cb6:	bf00      	nop
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ff29 	bl	8004b24 <__NVIC_DisableIRQ>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004cde:	f7ff ffa3 	bl	8004c28 <__NVIC_SystemReset>
	...

08004ce4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004ce8:	f3bf 8f5f 	dmb	sy
}
 8004cec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004cee:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <HAL_MPU_Disable+0x28>)
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	4a06      	ldr	r2, [pc, #24]	; (8004d0c <HAL_MPU_Disable+0x28>)
 8004cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_MPU_Disable+0x2c>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	605a      	str	r2, [r3, #4]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	e000ed00 	.word	0xe000ed00
 8004d10:	e000ed90 	.word	0xe000ed90

08004d14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004d1c:	4a0b      	ldr	r2, [pc, #44]	; (8004d4c <HAL_MPU_Enable+0x38>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <HAL_MPU_Enable+0x3c>)
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <HAL_MPU_Enable+0x3c>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004d32:	f3bf 8f4f 	dsb	sy
}
 8004d36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d38:	f3bf 8f6f 	isb	sy
}
 8004d3c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	e000ed90 	.word	0xe000ed90
 8004d50:	e000ed00 	.word	0xe000ed00

08004d54 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	785a      	ldrb	r2, [r3, #1]
 8004d60:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <HAL_MPU_ConfigRegion+0x84>)
 8004d62:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d029      	beq.n	8004dc0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004d6c:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <HAL_MPU_ConfigRegion+0x84>)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7b1b      	ldrb	r3, [r3, #12]
 8004d78:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7adb      	ldrb	r3, [r3, #11]
 8004d7e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	7a9b      	ldrb	r3, [r3, #10]
 8004d86:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004d88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	7b5b      	ldrb	r3, [r3, #13]
 8004d8e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004d90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	7b9b      	ldrb	r3, [r3, #14]
 8004d96:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004d98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	7bdb      	ldrb	r3, [r3, #15]
 8004d9e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004da0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	7a5b      	ldrb	r3, [r3, #9]
 8004da6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004da8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	7a1b      	ldrb	r3, [r3, #8]
 8004dae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004db0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	7812      	ldrb	r2, [r2, #0]
 8004db6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004db8:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004dba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004dbc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8004dbe:	e005      	b.n	8004dcc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_MPU_ConfigRegion+0x84>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8004dc6:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <HAL_MPU_ConfigRegion+0x84>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	611a      	str	r2, [r3, #16]
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	e000ed90 	.word	0xe000ed90

08004ddc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e00e      	b.n	8004e0c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	795b      	ldrb	r3, [r3, #5]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fd fd66 	bl	80028d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e022      	b.n	8004e6c <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	795b      	ldrb	r3, [r3, #5]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d101      	bne.n	8004e34 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8004e30:	2302      	movs	r3, #2
 8004e32:	e01b      	b.n	8004e6c <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	791b      	ldrb	r3, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2200      	movs	r2, #0
 8004e56:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fd fd5b 	bl	8002914 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2202      	movs	r2, #2
 8004e88:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	e00a      	b.n	8004eb6 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	441a      	add	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d3f0      	bcc.n	8004ea0 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004ecc:	693b      	ldr	r3, [r7, #16]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	795b      	ldrb	r3, [r3, #5]
 8004ee6:	b2db      	uxtb	r3, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f00:	f7fe ffa0 	bl	8003e44 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e099      	b.n	8005044 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0201 	bic.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f30:	e00f      	b.n	8004f52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f32:	f7fe ff87 	bl	8003e44 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	d908      	bls.n	8004f52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2203      	movs	r2, #3
 8004f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e078      	b.n	8005044 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e8      	bne.n	8004f32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4b38      	ldr	r3, [pc, #224]	; (800504c <HAL_DMA_Init+0x158>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d107      	bne.n	8004fbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0307 	bic.w	r3, r3, #7
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d117      	bne.n	8005016 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00e      	beq.n	8005016 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fb5f 	bl	80056bc <DMA_CheckFifoParam>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2240      	movs	r2, #64	; 0x40
 8005008:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005012:	2301      	movs	r3, #1
 8005014:	e016      	b.n	8005044 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fb16 	bl	8005650 <DMA_CalcBaseAndBitshift>
 8005024:	4603      	mov	r3, r0
 8005026:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502c:	223f      	movs	r2, #63	; 0x3f
 800502e:	409a      	lsls	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	f010803f 	.word	0xf010803f

08005050 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e050      	b.n	8005104 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d101      	bne.n	8005072 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800506e:	2302      	movs	r3, #2
 8005070:	e048      	b.n	8005104 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0201 	bic.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2200      	movs	r2, #0
 8005098:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2200      	movs	r2, #0
 80050a0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2221      	movs	r2, #33	; 0x21
 80050b0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 facc 	bl	8005650 <DMA_CalcBaseAndBitshift>
 80050b8:	4603      	mov	r3, r0
 80050ba:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e4:	223f      	movs	r2, #63	; 0x3f
 80050e6:	409a      	lsls	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_DMA_Start_IT+0x26>
 800512e:	2302      	movs	r3, #2
 8005130:	e040      	b.n	80051b4 <HAL_DMA_Start_IT+0xa8>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d12f      	bne.n	80051a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 fa4a 	bl	80055f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005164:	223f      	movs	r2, #63	; 0x3f
 8005166:	409a      	lsls	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0216 	orr.w	r2, r2, #22
 800517a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0208 	orr.w	r2, r2, #8
 8005192:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e005      	b.n	80051b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051ae:	2302      	movs	r3, #2
 80051b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051ca:	f7fe fe3b 	bl	8003e44 <HAL_GetTick>
 80051ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d008      	beq.n	80051ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2280      	movs	r2, #128	; 0x80
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e052      	b.n	8005294 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0216 	bic.w	r2, r2, #22
 80051fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800520c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <HAL_DMA_Abort+0x62>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0208 	bic.w	r2, r2, #8
 800522c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800523e:	e013      	b.n	8005268 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005240:	f7fe fe00 	bl	8003e44 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b05      	cmp	r3, #5
 800524c:	d90c      	bls.n	8005268 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2203      	movs	r2, #3
 8005258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e015      	b.n	8005294 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e4      	bne.n	8005240 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527a:	223f      	movs	r2, #63	; 0x3f
 800527c:	409a      	lsls	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d004      	beq.n	80052ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2280      	movs	r2, #128	; 0x80
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e00c      	b.n	80052d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2205      	movs	r2, #5
 80052be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052ec:	4b8e      	ldr	r3, [pc, #568]	; (8005528 <HAL_DMA_IRQHandler+0x248>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a8e      	ldr	r2, [pc, #568]	; (800552c <HAL_DMA_IRQHandler+0x24c>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	0a9b      	lsrs	r3, r3, #10
 80052f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530a:	2208      	movs	r2, #8
 800530c:	409a      	lsls	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01a      	beq.n	800534c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0204 	bic.w	r2, r2, #4
 8005332:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005338:	2208      	movs	r2, #8
 800533a:	409a      	lsls	r2, r3
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f043 0201 	orr.w	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	2201      	movs	r2, #1
 8005352:	409a      	lsls	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d012      	beq.n	8005382 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00b      	beq.n	8005382 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	2201      	movs	r2, #1
 8005370:	409a      	lsls	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537a:	f043 0202 	orr.w	r2, r3, #2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005386:	2204      	movs	r2, #4
 8005388:	409a      	lsls	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4013      	ands	r3, r2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d012      	beq.n	80053b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a4:	2204      	movs	r2, #4
 80053a6:	409a      	lsls	r2, r3
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b0:	f043 0204 	orr.w	r2, r3, #4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	2210      	movs	r2, #16
 80053be:	409a      	lsls	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d043      	beq.n	8005450 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d03c      	beq.n	8005450 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053da:	2210      	movs	r2, #16
 80053dc:	409a      	lsls	r2, r3
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d018      	beq.n	8005422 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d108      	bne.n	8005410 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d024      	beq.n	8005450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
 800540e:	e01f      	b.n	8005450 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01b      	beq.n	8005450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
 8005420:	e016      	b.n	8005450 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d107      	bne.n	8005440 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0208 	bic.w	r2, r2, #8
 800543e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005454:	2220      	movs	r2, #32
 8005456:	409a      	lsls	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 808f 	beq.w	8005580 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8087 	beq.w	8005580 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005476:	2220      	movs	r2, #32
 8005478:	409a      	lsls	r2, r3
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b05      	cmp	r3, #5
 8005488:	d136      	bne.n	80054f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0216 	bic.w	r2, r2, #22
 8005498:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695a      	ldr	r2, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <HAL_DMA_IRQHandler+0x1da>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0208 	bic.w	r2, r2, #8
 80054c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ce:	223f      	movs	r2, #63	; 0x3f
 80054d0:	409a      	lsls	r2, r3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d07e      	beq.n	80055ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4798      	blx	r3
        }
        return;
 80054f6:	e079      	b.n	80055ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01d      	beq.n	8005542 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10d      	bne.n	8005530 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	2b00      	cmp	r3, #0
 800551a:	d031      	beq.n	8005580 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4798      	blx	r3
 8005524:	e02c      	b.n	8005580 <HAL_DMA_IRQHandler+0x2a0>
 8005526:	bf00      	nop
 8005528:	20000000 	.word	0x20000000
 800552c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d023      	beq.n	8005580 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
 8005540:	e01e      	b.n	8005580 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10f      	bne.n	8005570 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0210 	bic.w	r2, r2, #16
 800555e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	2b00      	cmp	r3, #0
 8005586:	d032      	beq.n	80055ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d022      	beq.n	80055da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2205      	movs	r2, #5
 8005598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	3301      	adds	r3, #1
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d307      	bcc.n	80055c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f2      	bne.n	80055ac <HAL_DMA_IRQHandler+0x2cc>
 80055c6:	e000      	b.n	80055ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80055c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
 80055ea:	e000      	b.n	80055ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80055ec:	bf00      	nop
    }
  }
}
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005610:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d108      	bne.n	8005634 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005632:	e007      	b.n	8005644 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	3b10      	subs	r3, #16
 8005660:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <DMA_CalcBaseAndBitshift+0x64>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800566a:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <DMA_CalcBaseAndBitshift+0x68>)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b03      	cmp	r3, #3
 800567c:	d909      	bls.n	8005692 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	1d1a      	adds	r2, r3, #4
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	659a      	str	r2, [r3, #88]	; 0x58
 8005690:	e007      	b.n	80056a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	aaaaaaab 	.word	0xaaaaaaab
 80056b8:	0800eaf4 	.word	0x0800eaf4

080056bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d11f      	bne.n	8005716 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d856      	bhi.n	800578a <DMA_CheckFifoParam+0xce>
 80056dc:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <DMA_CheckFifoParam+0x28>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	080056f5 	.word	0x080056f5
 80056e8:	08005707 	.word	0x08005707
 80056ec:	080056f5 	.word	0x080056f5
 80056f0:	0800578b 	.word	0x0800578b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d046      	beq.n	800578e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005704:	e043      	b.n	800578e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800570e:	d140      	bne.n	8005792 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005714:	e03d      	b.n	8005792 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571e:	d121      	bne.n	8005764 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d837      	bhi.n	8005796 <DMA_CheckFifoParam+0xda>
 8005726:	a201      	add	r2, pc, #4	; (adr r2, 800572c <DMA_CheckFifoParam+0x70>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	0800573d 	.word	0x0800573d
 8005730:	08005743 	.word	0x08005743
 8005734:	0800573d 	.word	0x0800573d
 8005738:	08005755 	.word	0x08005755
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
      break;
 8005740:	e030      	b.n	80057a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d025      	beq.n	800579a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005752:	e022      	b.n	800579a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800575c:	d11f      	bne.n	800579e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005762:	e01c      	b.n	800579e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d903      	bls.n	8005772 <DMA_CheckFifoParam+0xb6>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d003      	beq.n	8005778 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005770:	e018      	b.n	80057a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
      break;
 8005776:	e015      	b.n	80057a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00e      	beq.n	80057a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
      break;
 8005788:	e00b      	b.n	80057a2 <DMA_CheckFifoParam+0xe6>
      break;
 800578a:	bf00      	nop
 800578c:	e00a      	b.n	80057a4 <DMA_CheckFifoParam+0xe8>
      break;
 800578e:	bf00      	nop
 8005790:	e008      	b.n	80057a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005792:	bf00      	nop
 8005794:	e006      	b.n	80057a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005796:	bf00      	nop
 8005798:	e004      	b.n	80057a4 <DMA_CheckFifoParam+0xe8>
      break;
 800579a:	bf00      	nop
 800579c:	e002      	b.n	80057a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800579e:	bf00      	nop
 80057a0:	e000      	b.n	80057a4 <DMA_CheckFifoParam+0xe8>
      break;
 80057a2:	bf00      	nop
    }
  } 
  
  return status; 
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop

080057b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b089      	sub	sp, #36	; 0x24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057ca:	2300      	movs	r3, #0
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	e159      	b.n	8005a84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057d0:	2201      	movs	r2, #1
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4013      	ands	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	f040 8148 	bne.w	8005a7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d005      	beq.n	8005806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005802:	2b02      	cmp	r3, #2
 8005804:	d130      	bne.n	8005868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	2203      	movs	r2, #3
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	43db      	mvns	r3, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4013      	ands	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800583c:	2201      	movs	r2, #1
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4013      	ands	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	091b      	lsrs	r3, r3, #4
 8005852:	f003 0201 	and.w	r2, r3, #1
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4313      	orrs	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 0303 	and.w	r3, r3, #3
 8005870:	2b03      	cmp	r3, #3
 8005872:	d017      	beq.n	80058a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	2203      	movs	r2, #3
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	43db      	mvns	r3, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4013      	ands	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4313      	orrs	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d123      	bne.n	80058f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	08da      	lsrs	r2, r3, #3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3208      	adds	r2, #8
 80058b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	220f      	movs	r2, #15
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4013      	ands	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	08da      	lsrs	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3208      	adds	r2, #8
 80058f2:	69b9      	ldr	r1, [r7, #24]
 80058f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	2203      	movs	r2, #3
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	43db      	mvns	r3, r3
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4013      	ands	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f003 0203 	and.w	r2, r3, #3
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	4313      	orrs	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80a2 	beq.w	8005a7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	4b57      	ldr	r3, [pc, #348]	; (8005a9c <HAL_GPIO_Init+0x2e8>)
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	4a56      	ldr	r2, [pc, #344]	; (8005a9c <HAL_GPIO_Init+0x2e8>)
 8005944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005948:	6453      	str	r3, [r2, #68]	; 0x44
 800594a:	4b54      	ldr	r3, [pc, #336]	; (8005a9c <HAL_GPIO_Init+0x2e8>)
 800594c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005956:	4a52      	ldr	r2, [pc, #328]	; (8005aa0 <HAL_GPIO_Init+0x2ec>)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	089b      	lsrs	r3, r3, #2
 800595c:	3302      	adds	r3, #2
 800595e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	220f      	movs	r2, #15
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43db      	mvns	r3, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4013      	ands	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a49      	ldr	r2, [pc, #292]	; (8005aa4 <HAL_GPIO_Init+0x2f0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d019      	beq.n	80059b6 <HAL_GPIO_Init+0x202>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a48      	ldr	r2, [pc, #288]	; (8005aa8 <HAL_GPIO_Init+0x2f4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_GPIO_Init+0x1fe>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a47      	ldr	r2, [pc, #284]	; (8005aac <HAL_GPIO_Init+0x2f8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00d      	beq.n	80059ae <HAL_GPIO_Init+0x1fa>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a46      	ldr	r2, [pc, #280]	; (8005ab0 <HAL_GPIO_Init+0x2fc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <HAL_GPIO_Init+0x1f6>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a45      	ldr	r2, [pc, #276]	; (8005ab4 <HAL_GPIO_Init+0x300>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d101      	bne.n	80059a6 <HAL_GPIO_Init+0x1f2>
 80059a2:	2304      	movs	r3, #4
 80059a4:	e008      	b.n	80059b8 <HAL_GPIO_Init+0x204>
 80059a6:	2307      	movs	r3, #7
 80059a8:	e006      	b.n	80059b8 <HAL_GPIO_Init+0x204>
 80059aa:	2303      	movs	r3, #3
 80059ac:	e004      	b.n	80059b8 <HAL_GPIO_Init+0x204>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e002      	b.n	80059b8 <HAL_GPIO_Init+0x204>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_GPIO_Init+0x204>
 80059b6:	2300      	movs	r3, #0
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	f002 0203 	and.w	r2, r2, #3
 80059be:	0092      	lsls	r2, r2, #2
 80059c0:	4093      	lsls	r3, r2
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059c8:	4935      	ldr	r1, [pc, #212]	; (8005aa0 <HAL_GPIO_Init+0x2ec>)
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	089b      	lsrs	r3, r3, #2
 80059ce:	3302      	adds	r3, #2
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059d6:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <HAL_GPIO_Init+0x304>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059fa:	4a2f      	ldr	r2, [pc, #188]	; (8005ab8 <HAL_GPIO_Init+0x304>)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a00:	4b2d      	ldr	r3, [pc, #180]	; (8005ab8 <HAL_GPIO_Init+0x304>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a24:	4a24      	ldr	r2, [pc, #144]	; (8005ab8 <HAL_GPIO_Init+0x304>)
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a2a:	4b23      	ldr	r3, [pc, #140]	; (8005ab8 <HAL_GPIO_Init+0x304>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a4e:	4a1a      	ldr	r2, [pc, #104]	; (8005ab8 <HAL_GPIO_Init+0x304>)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a54:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <HAL_GPIO_Init+0x304>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4013      	ands	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a78:	4a0f      	ldr	r2, [pc, #60]	; (8005ab8 <HAL_GPIO_Init+0x304>)
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	3301      	adds	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	2b0f      	cmp	r3, #15
 8005a88:	f67f aea2 	bls.w	80057d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	3724      	adds	r7, #36	; 0x24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40013800 	.word	0x40013800
 8005aa4:	40020000 	.word	0x40020000
 8005aa8:	40020400 	.word	0x40020400
 8005aac:	40020800 	.word	0x40020800
 8005ab0:	40020c00 	.word	0x40020c00
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	40013c00 	.word	0x40013c00

08005abc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e0bb      	b.n	8005c50 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ad8:	2201      	movs	r2, #1
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	f040 80ab 	bne.w	8005c4a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005af4:	4a5c      	ldr	r2, [pc, #368]	; (8005c68 <HAL_GPIO_DeInit+0x1ac>)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	089b      	lsrs	r3, r3, #2
 8005afa:	3302      	adds	r3, #2
 8005afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b00:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	220f      	movs	r2, #15
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	4013      	ands	r3, r2
 8005b14:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a54      	ldr	r2, [pc, #336]	; (8005c6c <HAL_GPIO_DeInit+0x1b0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d019      	beq.n	8005b52 <HAL_GPIO_DeInit+0x96>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a53      	ldr	r2, [pc, #332]	; (8005c70 <HAL_GPIO_DeInit+0x1b4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <HAL_GPIO_DeInit+0x92>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a52      	ldr	r2, [pc, #328]	; (8005c74 <HAL_GPIO_DeInit+0x1b8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00d      	beq.n	8005b4a <HAL_GPIO_DeInit+0x8e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a51      	ldr	r2, [pc, #324]	; (8005c78 <HAL_GPIO_DeInit+0x1bc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <HAL_GPIO_DeInit+0x8a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a50      	ldr	r2, [pc, #320]	; (8005c7c <HAL_GPIO_DeInit+0x1c0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d101      	bne.n	8005b42 <HAL_GPIO_DeInit+0x86>
 8005b3e:	2304      	movs	r3, #4
 8005b40:	e008      	b.n	8005b54 <HAL_GPIO_DeInit+0x98>
 8005b42:	2307      	movs	r3, #7
 8005b44:	e006      	b.n	8005b54 <HAL_GPIO_DeInit+0x98>
 8005b46:	2303      	movs	r3, #3
 8005b48:	e004      	b.n	8005b54 <HAL_GPIO_DeInit+0x98>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e002      	b.n	8005b54 <HAL_GPIO_DeInit+0x98>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_GPIO_DeInit+0x98>
 8005b52:	2300      	movs	r3, #0
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	f002 0203 	and.w	r2, r2, #3
 8005b5a:	0092      	lsls	r2, r2, #2
 8005b5c:	4093      	lsls	r3, r2
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d132      	bne.n	8005bca <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005b64:	4b46      	ldr	r3, [pc, #280]	; (8005c80 <HAL_GPIO_DeInit+0x1c4>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	4944      	ldr	r1, [pc, #272]	; (8005c80 <HAL_GPIO_DeInit+0x1c4>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005b72:	4b43      	ldr	r3, [pc, #268]	; (8005c80 <HAL_GPIO_DeInit+0x1c4>)
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	4941      	ldr	r1, [pc, #260]	; (8005c80 <HAL_GPIO_DeInit+0x1c4>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005b80:	4b3f      	ldr	r3, [pc, #252]	; (8005c80 <HAL_GPIO_DeInit+0x1c4>)
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	43db      	mvns	r3, r3
 8005b88:	493d      	ldr	r1, [pc, #244]	; (8005c80 <HAL_GPIO_DeInit+0x1c4>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005b8e:	4b3c      	ldr	r3, [pc, #240]	; (8005c80 <HAL_GPIO_DeInit+0x1c4>)
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	493a      	ldr	r1, [pc, #232]	; (8005c80 <HAL_GPIO_DeInit+0x1c4>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	220f      	movs	r2, #15
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005bac:	4a2e      	ldr	r2, [pc, #184]	; (8005c68 <HAL_GPIO_DeInit+0x1ac>)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	089b      	lsrs	r3, r3, #2
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	43da      	mvns	r2, r3
 8005bbc:	482a      	ldr	r0, [pc, #168]	; (8005c68 <HAL_GPIO_DeInit+0x1ac>)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	089b      	lsrs	r3, r3, #2
 8005bc2:	400a      	ands	r2, r1
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	2103      	movs	r1, #3
 8005bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	401a      	ands	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	08da      	lsrs	r2, r3, #3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3208      	adds	r2, #8
 8005be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	220f      	movs	r2, #15
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	08d2      	lsrs	r2, r2, #3
 8005c00:	4019      	ands	r1, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3208      	adds	r2, #8
 8005c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	2103      	movs	r1, #3
 8005c14:	fa01 f303 	lsl.w	r3, r1, r3
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	2101      	movs	r1, #1
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	401a      	ands	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	2103      	movs	r1, #3
 8005c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	401a      	ands	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	f67f af40 	bls.w	8005ad8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40013800 	.word	0x40013800
 8005c6c:	40020000 	.word	0x40020000
 8005c70:	40020400 	.word	0x40020400
 8005c74:	40020800 	.word	0x40020800
 8005c78:	40020c00 	.word	0x40020c00
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	40013c00 	.word	0x40013c00

08005c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	807b      	strh	r3, [r7, #2]
 8005c90:	4613      	mov	r3, r2
 8005c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c94:	787b      	ldrb	r3, [r7, #1]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c9a:	887a      	ldrh	r2, [r7, #2]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ca0:	e003      	b.n	8005caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ca2:	887b      	ldrh	r3, [r7, #2]
 8005ca4:	041a      	lsls	r2, r3, #16
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	619a      	str	r2, [r3, #24]
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b085      	sub	sp, #20
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005cc8:	887a      	ldrh	r2, [r7, #2]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	041a      	lsls	r2, r3, #16
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	43d9      	mvns	r1, r3
 8005cd4:	887b      	ldrh	r3, [r7, #2]
 8005cd6:	400b      	ands	r3, r1
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	619a      	str	r2, [r3, #24]
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e034      	b.n	8005d66 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005d04:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f245 5255 	movw	r2, #21845	; 0x5555
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6852      	ldr	r2, [r2, #4]
 8005d18:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6892      	ldr	r2, [r2, #8]
 8005d22:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005d24:	f7fe f88e 	bl	8003e44 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005d2a:	e00f      	b.n	8005d4c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005d2c:	f7fe f88a 	bl	8003e44 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b31      	cmp	r3, #49	; 0x31
 8005d38:	d908      	bls.n	8005d4c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e00c      	b.n	8005d66 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e8      	bne.n	8005d2c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005d62:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e267      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d075      	beq.n	8005e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dae:	4b88      	ldr	r3, [pc, #544]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d00c      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dba:	4b85      	ldr	r3, [pc, #532]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d112      	bne.n	8005dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dc6:	4b82      	ldr	r3, [pc, #520]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dd2:	d10b      	bne.n	8005dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd4:	4b7e      	ldr	r3, [pc, #504]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d05b      	beq.n	8005e98 <HAL_RCC_OscConfig+0x108>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d157      	bne.n	8005e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e242      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df4:	d106      	bne.n	8005e04 <HAL_RCC_OscConfig+0x74>
 8005df6:	4b76      	ldr	r3, [pc, #472]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a75      	ldr	r2, [pc, #468]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e01d      	b.n	8005e40 <HAL_RCC_OscConfig+0xb0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x98>
 8005e0e:	4b70      	ldr	r3, [pc, #448]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6f      	ldr	r2, [pc, #444]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b6d      	ldr	r3, [pc, #436]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a6c      	ldr	r2, [pc, #432]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e00b      	b.n	8005e40 <HAL_RCC_OscConfig+0xb0>
 8005e28:	4b69      	ldr	r3, [pc, #420]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a68      	ldr	r2, [pc, #416]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4b66      	ldr	r3, [pc, #408]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a65      	ldr	r2, [pc, #404]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fd fffc 	bl	8003e44 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fd fff8 	bl	8003e44 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	; 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e207      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	4b5b      	ldr	r3, [pc, #364]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0xc0>
 8005e6e:	e014      	b.n	8005e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fd ffe8 	bl	8003e44 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fd ffe4 	bl	8003e44 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e1f3      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8a:	4b51      	ldr	r3, [pc, #324]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0xe8>
 8005e96:	e000      	b.n	8005e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d063      	beq.n	8005f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ea6:	4b4a      	ldr	r3, [pc, #296]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eb2:	4b47      	ldr	r3, [pc, #284]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d11c      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ebe:	4b44      	ldr	r3, [pc, #272]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d116      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eca:	4b41      	ldr	r3, [pc, #260]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x152>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e1c7      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee2:	4b3b      	ldr	r3, [pc, #236]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4937      	ldr	r1, [pc, #220]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef6:	e03a      	b.n	8005f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d020      	beq.n	8005f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f00:	4b34      	ldr	r3, [pc, #208]	; (8005fd4 <HAL_RCC_OscConfig+0x244>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fd ff9d 	bl	8003e44 <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f0e:	f7fd ff99 	bl	8003e44 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e1a8      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f20:	4b2b      	ldr	r3, [pc, #172]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2c:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4925      	ldr	r1, [pc, #148]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	600b      	str	r3, [r1, #0]
 8005f40:	e015      	b.n	8005f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f42:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <HAL_RCC_OscConfig+0x244>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fd ff7c 	bl	8003e44 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f50:	f7fd ff78 	bl	8003e44 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e187      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f62:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d036      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d016      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <HAL_RCC_OscConfig+0x248>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f88:	f7fd ff5c 	bl	8003e44 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f90:	f7fd ff58 	bl	8003e44 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e167      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x200>
 8005fae:	e01b      	b.n	8005fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb0:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <HAL_RCC_OscConfig+0x248>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb6:	f7fd ff45 	bl	8003e44 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fbc:	e00e      	b.n	8005fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fbe:	f7fd ff41 	bl	8003e44 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d907      	bls.n	8005fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e150      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	42470000 	.word	0x42470000
 8005fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fdc:	4b88      	ldr	r3, [pc, #544]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8005fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ea      	bne.n	8005fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8097 	beq.w	8006124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ffa:	4b81      	ldr	r3, [pc, #516]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10f      	bne.n	8006026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	4b7d      	ldr	r3, [pc, #500]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	4a7c      	ldr	r2, [pc, #496]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006014:	6413      	str	r3, [r2, #64]	; 0x40
 8006016:	4b7a      	ldr	r3, [pc, #488]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006026:	4b77      	ldr	r3, [pc, #476]	; (8006204 <HAL_RCC_OscConfig+0x474>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d118      	bne.n	8006064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006032:	4b74      	ldr	r3, [pc, #464]	; (8006204 <HAL_RCC_OscConfig+0x474>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a73      	ldr	r2, [pc, #460]	; (8006204 <HAL_RCC_OscConfig+0x474>)
 8006038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800603e:	f7fd ff01 	bl	8003e44 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006046:	f7fd fefd 	bl	8003e44 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e10c      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006058:	4b6a      	ldr	r3, [pc, #424]	; (8006204 <HAL_RCC_OscConfig+0x474>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d106      	bne.n	800607a <HAL_RCC_OscConfig+0x2ea>
 800606c:	4b64      	ldr	r3, [pc, #400]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	4a63      	ldr	r2, [pc, #396]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006072:	f043 0301 	orr.w	r3, r3, #1
 8006076:	6713      	str	r3, [r2, #112]	; 0x70
 8006078:	e01c      	b.n	80060b4 <HAL_RCC_OscConfig+0x324>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b05      	cmp	r3, #5
 8006080:	d10c      	bne.n	800609c <HAL_RCC_OscConfig+0x30c>
 8006082:	4b5f      	ldr	r3, [pc, #380]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	4a5e      	ldr	r2, [pc, #376]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006088:	f043 0304 	orr.w	r3, r3, #4
 800608c:	6713      	str	r3, [r2, #112]	; 0x70
 800608e:	4b5c      	ldr	r3, [pc, #368]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006092:	4a5b      	ldr	r2, [pc, #364]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	6713      	str	r3, [r2, #112]	; 0x70
 800609a:	e00b      	b.n	80060b4 <HAL_RCC_OscConfig+0x324>
 800609c:	4b58      	ldr	r3, [pc, #352]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	4a57      	ldr	r2, [pc, #348]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	6713      	str	r3, [r2, #112]	; 0x70
 80060a8:	4b55      	ldr	r3, [pc, #340]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80060aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ac:	4a54      	ldr	r2, [pc, #336]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80060ae:	f023 0304 	bic.w	r3, r3, #4
 80060b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d015      	beq.n	80060e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060bc:	f7fd fec2 	bl	8003e44 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c2:	e00a      	b.n	80060da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c4:	f7fd febe 	bl	8003e44 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e0cb      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060da:	4b49      	ldr	r3, [pc, #292]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0ee      	beq.n	80060c4 <HAL_RCC_OscConfig+0x334>
 80060e6:	e014      	b.n	8006112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060e8:	f7fd feac 	bl	8003e44 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ee:	e00a      	b.n	8006106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f0:	f7fd fea8 	bl	8003e44 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e0b5      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006106:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1ee      	bne.n	80060f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d105      	bne.n	8006124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006118:	4b39      	ldr	r3, [pc, #228]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	4a38      	ldr	r2, [pc, #224]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 800611e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006122:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 80a1 	beq.w	8006270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800612e:	4b34      	ldr	r3, [pc, #208]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 030c 	and.w	r3, r3, #12
 8006136:	2b08      	cmp	r3, #8
 8006138:	d05c      	beq.n	80061f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d141      	bne.n	80061c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006142:	4b31      	ldr	r3, [pc, #196]	; (8006208 <HAL_RCC_OscConfig+0x478>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006148:	f7fd fe7c 	bl	8003e44 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006150:	f7fd fe78 	bl	8003e44 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e087      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006162:	4b27      	ldr	r3, [pc, #156]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f0      	bne.n	8006150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69da      	ldr	r2, [r3, #28]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	019b      	lsls	r3, r3, #6
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	3b01      	subs	r3, #1
 8006188:	041b      	lsls	r3, r3, #16
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	061b      	lsls	r3, r3, #24
 8006192:	491b      	ldr	r1, [pc, #108]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006194:	4313      	orrs	r3, r2
 8006196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <HAL_RCC_OscConfig+0x478>)
 800619a:	2201      	movs	r2, #1
 800619c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619e:	f7fd fe51 	bl	8003e44 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a6:	f7fd fe4d 	bl	8003e44 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e05c      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0f0      	beq.n	80061a6 <HAL_RCC_OscConfig+0x416>
 80061c4:	e054      	b.n	8006270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c6:	4b10      	ldr	r3, [pc, #64]	; (8006208 <HAL_RCC_OscConfig+0x478>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061cc:	f7fd fe3a 	bl	8003e44 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d4:	f7fd fe36 	bl	8003e44 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e045      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e6:	4b06      	ldr	r3, [pc, #24]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f0      	bne.n	80061d4 <HAL_RCC_OscConfig+0x444>
 80061f2:	e03d      	b.n	8006270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d107      	bne.n	800620c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e038      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
 8006200:	40023800 	.word	0x40023800
 8006204:	40007000 	.word	0x40007000
 8006208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800620c:	4b1b      	ldr	r3, [pc, #108]	; (800627c <HAL_RCC_OscConfig+0x4ec>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d028      	beq.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d121      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006232:	429a      	cmp	r2, r3
 8006234:	d11a      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800623c:	4013      	ands	r3, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006244:	4293      	cmp	r3, r2
 8006246:	d111      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	3b01      	subs	r3, #1
 8006256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006258:	429a      	cmp	r2, r3
 800625a:	d107      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40023800 	.word	0x40023800

08006280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0cc      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006294:	4b68      	ldr	r3, [pc, #416]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d90c      	bls.n	80062bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b65      	ldr	r3, [pc, #404]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b63      	ldr	r3, [pc, #396]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0b8      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062d4:	4b59      	ldr	r3, [pc, #356]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4a58      	ldr	r2, [pc, #352]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062ec:	4b53      	ldr	r3, [pc, #332]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4a52      	ldr	r2, [pc, #328]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f8:	4b50      	ldr	r3, [pc, #320]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	494d      	ldr	r1, [pc, #308]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	4313      	orrs	r3, r2
 8006308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d044      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d107      	bne.n	800632e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631e:	4b47      	ldr	r3, [pc, #284]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d119      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e07f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d003      	beq.n	800633e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800633a:	2b03      	cmp	r3, #3
 800633c:	d107      	bne.n	800634e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800633e:	4b3f      	ldr	r3, [pc, #252]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e06f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634e:	4b3b      	ldr	r3, [pc, #236]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e067      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800635e:	4b37      	ldr	r3, [pc, #220]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f023 0203 	bic.w	r2, r3, #3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4934      	ldr	r1, [pc, #208]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	4313      	orrs	r3, r2
 800636e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006370:	f7fd fd68 	bl	8003e44 <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006376:	e00a      	b.n	800638e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006378:	f7fd fd64 	bl	8003e44 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	f241 3288 	movw	r2, #5000	; 0x1388
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e04f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638e:	4b2b      	ldr	r3, [pc, #172]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 020c 	and.w	r2, r3, #12
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	429a      	cmp	r2, r3
 800639e:	d1eb      	bne.n	8006378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063a0:	4b25      	ldr	r3, [pc, #148]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20c      	bcs.n	80063c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b22      	ldr	r3, [pc, #136]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b20      	ldr	r3, [pc, #128]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e032      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063d4:	4b19      	ldr	r3, [pc, #100]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4916      	ldr	r1, [pc, #88]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	490e      	ldr	r1, [pc, #56]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	4313      	orrs	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006406:	f000 f821 	bl	800644c <HAL_RCC_GetSysClockFreq>
 800640a:	4602      	mov	r2, r0
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	490a      	ldr	r1, [pc, #40]	; (8006440 <HAL_RCC_ClockConfig+0x1c0>)
 8006418:	5ccb      	ldrb	r3, [r1, r3]
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	4a09      	ldr	r2, [pc, #36]	; (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 8006420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fc fe98 	bl	800315c <HAL_InitTick>

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40023c00 	.word	0x40023c00
 800643c:	40023800 	.word	0x40023800
 8006440:	0800eadc 	.word	0x0800eadc
 8006444:	20000000 	.word	0x20000000
 8006448:	20000020 	.word	0x20000020

0800644c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800644c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006450:	b094      	sub	sp, #80	; 0x50
 8006452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	647b      	str	r3, [r7, #68]	; 0x44
 8006458:	2300      	movs	r3, #0
 800645a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800645c:	2300      	movs	r3, #0
 800645e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006464:	4b79      	ldr	r3, [pc, #484]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	2b08      	cmp	r3, #8
 800646e:	d00d      	beq.n	800648c <HAL_RCC_GetSysClockFreq+0x40>
 8006470:	2b08      	cmp	r3, #8
 8006472:	f200 80e1 	bhi.w	8006638 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_RCC_GetSysClockFreq+0x34>
 800647a:	2b04      	cmp	r3, #4
 800647c:	d003      	beq.n	8006486 <HAL_RCC_GetSysClockFreq+0x3a>
 800647e:	e0db      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006480:	4b73      	ldr	r3, [pc, #460]	; (8006650 <HAL_RCC_GetSysClockFreq+0x204>)
 8006482:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006484:	e0db      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006486:	4b73      	ldr	r3, [pc, #460]	; (8006654 <HAL_RCC_GetSysClockFreq+0x208>)
 8006488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800648a:	e0d8      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800648c:	4b6f      	ldr	r3, [pc, #444]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006494:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006496:	4b6d      	ldr	r3, [pc, #436]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d063      	beq.n	800656a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064a2:	4b6a      	ldr	r3, [pc, #424]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	2200      	movs	r2, #0
 80064aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b4:	633b      	str	r3, [r7, #48]	; 0x30
 80064b6:	2300      	movs	r3, #0
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80064be:	4622      	mov	r2, r4
 80064c0:	462b      	mov	r3, r5
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f04f 0100 	mov.w	r1, #0
 80064ca:	0159      	lsls	r1, r3, #5
 80064cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064d0:	0150      	lsls	r0, r2, #5
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4621      	mov	r1, r4
 80064d8:	1a51      	subs	r1, r2, r1
 80064da:	6139      	str	r1, [r7, #16]
 80064dc:	4629      	mov	r1, r5
 80064de:	eb63 0301 	sbc.w	r3, r3, r1
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064f0:	4659      	mov	r1, fp
 80064f2:	018b      	lsls	r3, r1, #6
 80064f4:	4651      	mov	r1, sl
 80064f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064fa:	4651      	mov	r1, sl
 80064fc:	018a      	lsls	r2, r1, #6
 80064fe:	4651      	mov	r1, sl
 8006500:	ebb2 0801 	subs.w	r8, r2, r1
 8006504:	4659      	mov	r1, fp
 8006506:	eb63 0901 	sbc.w	r9, r3, r1
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800651a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800651e:	4690      	mov	r8, r2
 8006520:	4699      	mov	r9, r3
 8006522:	4623      	mov	r3, r4
 8006524:	eb18 0303 	adds.w	r3, r8, r3
 8006528:	60bb      	str	r3, [r7, #8]
 800652a:	462b      	mov	r3, r5
 800652c:	eb49 0303 	adc.w	r3, r9, r3
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800653e:	4629      	mov	r1, r5
 8006540:	024b      	lsls	r3, r1, #9
 8006542:	4621      	mov	r1, r4
 8006544:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006548:	4621      	mov	r1, r4
 800654a:	024a      	lsls	r2, r1, #9
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006552:	2200      	movs	r2, #0
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
 8006556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800655c:	f7fa fa36 	bl	80009cc <__aeabi_uldivmod>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4613      	mov	r3, r2
 8006566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006568:	e058      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800656a:	4b38      	ldr	r3, [pc, #224]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	099b      	lsrs	r3, r3, #6
 8006570:	2200      	movs	r2, #0
 8006572:	4618      	mov	r0, r3
 8006574:	4611      	mov	r1, r2
 8006576:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	2300      	movs	r3, #0
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	f04f 0000 	mov.w	r0, #0
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	0159      	lsls	r1, r3, #5
 8006592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006596:	0150      	lsls	r0, r2, #5
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4641      	mov	r1, r8
 800659e:	ebb2 0a01 	subs.w	sl, r2, r1
 80065a2:	4649      	mov	r1, r9
 80065a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065bc:	ebb2 040a 	subs.w	r4, r2, sl
 80065c0:	eb63 050b 	sbc.w	r5, r3, fp
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	00eb      	lsls	r3, r5, #3
 80065ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065d2:	00e2      	lsls	r2, r4, #3
 80065d4:	4614      	mov	r4, r2
 80065d6:	461d      	mov	r5, r3
 80065d8:	4643      	mov	r3, r8
 80065da:	18e3      	adds	r3, r4, r3
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	464b      	mov	r3, r9
 80065e0:	eb45 0303 	adc.w	r3, r5, r3
 80065e4:	607b      	str	r3, [r7, #4]
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065f2:	4629      	mov	r1, r5
 80065f4:	028b      	lsls	r3, r1, #10
 80065f6:	4621      	mov	r1, r4
 80065f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065fc:	4621      	mov	r1, r4
 80065fe:	028a      	lsls	r2, r1, #10
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006606:	2200      	movs	r2, #0
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	61fa      	str	r2, [r7, #28]
 800660c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006610:	f7fa f9dc 	bl	80009cc <__aeabi_uldivmod>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4613      	mov	r3, r2
 800661a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800661c:	4b0b      	ldr	r3, [pc, #44]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	0c1b      	lsrs	r3, r3, #16
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	3301      	adds	r3, #1
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800662c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800662e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006636:	e002      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <HAL_RCC_GetSysClockFreq+0x204>)
 800663a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800663c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800663e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006640:	4618      	mov	r0, r3
 8006642:	3750      	adds	r7, #80	; 0x50
 8006644:	46bd      	mov	sp, r7
 8006646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800664a:	bf00      	nop
 800664c:	40023800 	.word	0x40023800
 8006650:	00f42400 	.word	0x00f42400
 8006654:	007a1200 	.word	0x007a1200

08006658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800665c:	4b03      	ldr	r3, [pc, #12]	; (800666c <HAL_RCC_GetHCLKFreq+0x14>)
 800665e:	681b      	ldr	r3, [r3, #0]
}
 8006660:	4618      	mov	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	20000000 	.word	0x20000000

08006670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006674:	f7ff fff0 	bl	8006658 <HAL_RCC_GetHCLKFreq>
 8006678:	4602      	mov	r2, r0
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	0a9b      	lsrs	r3, r3, #10
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	4903      	ldr	r1, [pc, #12]	; (8006694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006686:	5ccb      	ldrb	r3, [r1, r3]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800668c:	4618      	mov	r0, r3
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40023800 	.word	0x40023800
 8006694:	0800eaec 	.word	0x0800eaec

08006698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800669c:	f7ff ffdc 	bl	8006658 <HAL_RCC_GetHCLKFreq>
 80066a0:	4602      	mov	r2, r0
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	0b5b      	lsrs	r3, r3, #13
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	4903      	ldr	r1, [pc, #12]	; (80066bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ae:	5ccb      	ldrb	r3, [r1, r3]
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40023800 	.word	0x40023800
 80066bc:	0800eaec 	.word	0x0800eaec

080066c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	220f      	movs	r2, #15
 80066ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066d0:	4b12      	ldr	r3, [pc, #72]	; (800671c <HAL_RCC_GetClockConfig+0x5c>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 0203 	and.w	r2, r3, #3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <HAL_RCC_GetClockConfig+0x5c>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <HAL_RCC_GetClockConfig+0x5c>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <HAL_RCC_GetClockConfig+0x5c>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	08db      	lsrs	r3, r3, #3
 80066fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006702:	4b07      	ldr	r3, [pc, #28]	; (8006720 <HAL_RCC_GetClockConfig+0x60>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0207 	and.w	r2, r3, #7
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	601a      	str	r2, [r3, #0]
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40023800 	.word	0x40023800
 8006720:	40023c00 	.word	0x40023c00

08006724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e04c      	b.n	80067d0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d111      	bne.n	8006766 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f001 fc0e 	bl	8007f6c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a1f      	ldr	r2, [pc, #124]	; (80067d8 <HAL_TIM_Base_Init+0xb4>)
 800675c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3304      	adds	r3, #4
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f001 f80d 	bl	8007798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	08003549 	.word	0x08003549

080067dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d001      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e044      	b.n	800687e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1e      	ldr	r2, [pc, #120]	; (800688c <HAL_TIM_Base_Start_IT+0xb0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d018      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x6c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681e:	d013      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x6c>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1a      	ldr	r2, [pc, #104]	; (8006890 <HAL_TIM_Base_Start_IT+0xb4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00e      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x6c>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a19      	ldr	r2, [pc, #100]	; (8006894 <HAL_TIM_Base_Start_IT+0xb8>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d009      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x6c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a17      	ldr	r2, [pc, #92]	; (8006898 <HAL_TIM_Base_Start_IT+0xbc>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d004      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x6c>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a16      	ldr	r2, [pc, #88]	; (800689c <HAL_TIM_Base_Start_IT+0xc0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d111      	bne.n	800686c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b06      	cmp	r3, #6
 8006858:	d010      	beq.n	800687c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0201 	orr.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686a:	e007      	b.n	800687c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0201 	orr.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40010000 	.word	0x40010000
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40000c00 	.word	0x40000c00
 800689c:	40014000 	.word	0x40014000

080068a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e04c      	b.n	800694c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d111      	bne.n	80068e2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 fb50 	bl	8007f6c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <HAL_TIM_PWM_Init+0xb4>)
 80068d8:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3304      	adds	r3, #4
 80068f2:	4619      	mov	r1, r3
 80068f4:	4610      	mov	r0, r2
 80068f6:	f000 ff4f 	bl	8007798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	08006959 	.word	0x08006959

08006958 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <HAL_TIM_PWM_Start_IT+0x28>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	bf14      	ite	ne
 800698c:	2301      	movne	r3, #1
 800698e:	2300      	moveq	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	e022      	b.n	80069da <HAL_TIM_PWM_Start_IT+0x6e>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b04      	cmp	r3, #4
 8006998:	d109      	bne.n	80069ae <HAL_TIM_PWM_Start_IT+0x42>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	bf14      	ite	ne
 80069a6:	2301      	movne	r3, #1
 80069a8:	2300      	moveq	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	e015      	b.n	80069da <HAL_TIM_PWM_Start_IT+0x6e>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d109      	bne.n	80069c8 <HAL_TIM_PWM_Start_IT+0x5c>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	bf14      	ite	ne
 80069c0:	2301      	movne	r3, #1
 80069c2:	2300      	moveq	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	e008      	b.n	80069da <HAL_TIM_PWM_Start_IT+0x6e>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	bf14      	ite	ne
 80069d4:	2301      	movne	r3, #1
 80069d6:	2300      	moveq	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e0b3      	b.n	8006b4a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <HAL_TIM_PWM_Start_IT+0x86>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f0:	e013      	b.n	8006a1a <HAL_TIM_PWM_Start_IT+0xae>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_PWM_Start_IT+0x96>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a00:	e00b      	b.n	8006a1a <HAL_TIM_PWM_Start_IT+0xae>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d104      	bne.n	8006a12 <HAL_TIM_PWM_Start_IT+0xa6>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a10:	e003      	b.n	8006a1a <HAL_TIM_PWM_Start_IT+0xae>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b0c      	cmp	r3, #12
 8006a1e:	d841      	bhi.n	8006aa4 <HAL_TIM_PWM_Start_IT+0x138>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006aa5 	.word	0x08006aa5
 8006a30:	08006aa5 	.word	0x08006aa5
 8006a34:	08006aa5 	.word	0x08006aa5
 8006a38:	08006a6f 	.word	0x08006a6f
 8006a3c:	08006aa5 	.word	0x08006aa5
 8006a40:	08006aa5 	.word	0x08006aa5
 8006a44:	08006aa5 	.word	0x08006aa5
 8006a48:	08006a81 	.word	0x08006a81
 8006a4c:	08006aa5 	.word	0x08006aa5
 8006a50:	08006aa5 	.word	0x08006aa5
 8006a54:	08006aa5 	.word	0x08006aa5
 8006a58:	08006a93 	.word	0x08006a93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0202 	orr.w	r2, r2, #2
 8006a6a:	60da      	str	r2, [r3, #12]
      break;
 8006a6c:	e01d      	b.n	8006aaa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0204 	orr.w	r2, r2, #4
 8006a7c:	60da      	str	r2, [r3, #12]
      break;
 8006a7e:	e014      	b.n	8006aaa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0208 	orr.w	r2, r2, #8
 8006a8e:	60da      	str	r2, [r3, #12]
      break;
 8006a90:	e00b      	b.n	8006aaa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f042 0210 	orr.w	r2, r2, #16
 8006aa0:	60da      	str	r2, [r3, #12]
      break;
 8006aa2:	e002      	b.n	8006aaa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d14b      	bne.n	8006b48 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f001 fa31 	bl	8007f20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a24      	ldr	r2, [pc, #144]	; (8006b54 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d107      	bne.n	8006ad8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ad6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1d      	ldr	r2, [pc, #116]	; (8006b54 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d018      	beq.n	8006b14 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aea:	d013      	beq.n	8006b14 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a19      	ldr	r2, [pc, #100]	; (8006b58 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00e      	beq.n	8006b14 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d009      	beq.n	8006b14 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a16      	ldr	r2, [pc, #88]	; (8006b60 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d004      	beq.n	8006b14 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a15      	ldr	r2, [pc, #84]	; (8006b64 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d111      	bne.n	8006b38 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b06      	cmp	r3, #6
 8006b24:	d010      	beq.n	8006b48 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0201 	orr.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b36:	e007      	b.n	8006b48 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0201 	orr.w	r2, r2, #1
 8006b46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40010000 	.word	0x40010000
 8006b58:	40000400 	.word	0x40000400
 8006b5c:	40000800 	.word	0x40000800
 8006b60:	40000c00 	.word	0x40000c00
 8006b64:	40014000 	.word	0x40014000

08006b68 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b0c      	cmp	r3, #12
 8006b7a:	d841      	bhi.n	8006c00 <HAL_TIM_PWM_Stop_IT+0x98>
 8006b7c:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006bb9 	.word	0x08006bb9
 8006b88:	08006c01 	.word	0x08006c01
 8006b8c:	08006c01 	.word	0x08006c01
 8006b90:	08006c01 	.word	0x08006c01
 8006b94:	08006bcb 	.word	0x08006bcb
 8006b98:	08006c01 	.word	0x08006c01
 8006b9c:	08006c01 	.word	0x08006c01
 8006ba0:	08006c01 	.word	0x08006c01
 8006ba4:	08006bdd 	.word	0x08006bdd
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c01 	.word	0x08006c01
 8006bb0:	08006c01 	.word	0x08006c01
 8006bb4:	08006bef 	.word	0x08006bef
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0202 	bic.w	r2, r2, #2
 8006bc6:	60da      	str	r2, [r3, #12]
      break;
 8006bc8:	e01d      	b.n	8006c06 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0204 	bic.w	r2, r2, #4
 8006bd8:	60da      	str	r2, [r3, #12]
      break;
 8006bda:	e014      	b.n	8006c06 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0208 	bic.w	r2, r2, #8
 8006bea:	60da      	str	r2, [r3, #12]
      break;
 8006bec:	e00b      	b.n	8006c06 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0210 	bic.w	r2, r2, #16
 8006bfc:	60da      	str	r2, [r3, #12]
      break;
 8006bfe:	e002      	b.n	8006c06 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
      break;
 8006c04:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d157      	bne.n	8006cbc <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2200      	movs	r2, #0
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 f983 	bl	8007f20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2a      	ldr	r2, [pc, #168]	; (8006cc8 <HAL_TIM_PWM_Stop_IT+0x160>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d117      	bne.n	8006c54 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10f      	bne.n	8006c54 <HAL_TIM_PWM_Stop_IT+0xec>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6a1a      	ldr	r2, [r3, #32]
 8006c3a:	f240 4344 	movw	r3, #1092	; 0x444
 8006c3e:	4013      	ands	r3, r2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d107      	bne.n	8006c54 <HAL_TIM_PWM_Stop_IT+0xec>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6a1a      	ldr	r2, [r3, #32]
 8006c5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10f      	bne.n	8006c84 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6a1a      	ldr	r2, [r3, #32]
 8006c6a:	f240 4344 	movw	r3, #1092	; 0x444
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d107      	bne.n	8006c84 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0201 	bic.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d104      	bne.n	8006c94 <HAL_TIM_PWM_Stop_IT+0x12c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c92:	e013      	b.n	8006cbc <HAL_TIM_PWM_Stop_IT+0x154>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d104      	bne.n	8006ca4 <HAL_TIM_PWM_Stop_IT+0x13c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca2:	e00b      	b.n	8006cbc <HAL_TIM_PWM_Stop_IT+0x154>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d104      	bne.n	8006cb4 <HAL_TIM_PWM_Stop_IT+0x14c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb2:	e003      	b.n	8006cbc <HAL_TIM_PWM_Stop_IT+0x154>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	40010000 	.word	0x40010000

08006ccc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e04c      	b.n	8006d78 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d111      	bne.n	8006d0e <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 f93a 	bl	8007f6c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <HAL_TIM_IC_Init+0xb4>)
 8006d04:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4610      	mov	r0, r2
 8006d22:	f000 fd39 	bl	8007798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	08006d85 	.word	0x08006d85

08006d84 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_IC_Start_IT+0x1e>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	e013      	b.n	8006dde <HAL_TIM_IC_Start_IT+0x46>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIM_IC_Start_IT+0x2e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	e00b      	b.n	8006dde <HAL_TIM_IC_Start_IT+0x46>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIM_IC_Start_IT+0x3e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	e003      	b.n	8006dde <HAL_TIM_IC_Start_IT+0x46>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <HAL_TIM_IC_Start_IT+0x58>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	e013      	b.n	8006e18 <HAL_TIM_IC_Start_IT+0x80>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d104      	bne.n	8006e00 <HAL_TIM_IC_Start_IT+0x68>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	e00b      	b.n	8006e18 <HAL_TIM_IC_Start_IT+0x80>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d104      	bne.n	8006e10 <HAL_TIM_IC_Start_IT+0x78>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	e003      	b.n	8006e18 <HAL_TIM_IC_Start_IT+0x80>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d102      	bne.n	8006e26 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e20:	7b7b      	ldrb	r3, [r7, #13]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d001      	beq.n	8006e2a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e0c2      	b.n	8006fb0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <HAL_TIM_IC_Start_IT+0xa2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e38:	e013      	b.n	8006e62 <HAL_TIM_IC_Start_IT+0xca>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d104      	bne.n	8006e4a <HAL_TIM_IC_Start_IT+0xb2>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e48:	e00b      	b.n	8006e62 <HAL_TIM_IC_Start_IT+0xca>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d104      	bne.n	8006e5a <HAL_TIM_IC_Start_IT+0xc2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e58:	e003      	b.n	8006e62 <HAL_TIM_IC_Start_IT+0xca>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d104      	bne.n	8006e72 <HAL_TIM_IC_Start_IT+0xda>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e70:	e013      	b.n	8006e9a <HAL_TIM_IC_Start_IT+0x102>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d104      	bne.n	8006e82 <HAL_TIM_IC_Start_IT+0xea>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e80:	e00b      	b.n	8006e9a <HAL_TIM_IC_Start_IT+0x102>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d104      	bne.n	8006e92 <HAL_TIM_IC_Start_IT+0xfa>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e90:	e003      	b.n	8006e9a <HAL_TIM_IC_Start_IT+0x102>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2202      	movs	r2, #2
 8006e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b0c      	cmp	r3, #12
 8006e9e:	d841      	bhi.n	8006f24 <HAL_TIM_IC_Start_IT+0x18c>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <HAL_TIM_IC_Start_IT+0x110>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006edd 	.word	0x08006edd
 8006eac:	08006f25 	.word	0x08006f25
 8006eb0:	08006f25 	.word	0x08006f25
 8006eb4:	08006f25 	.word	0x08006f25
 8006eb8:	08006eef 	.word	0x08006eef
 8006ebc:	08006f25 	.word	0x08006f25
 8006ec0:	08006f25 	.word	0x08006f25
 8006ec4:	08006f25 	.word	0x08006f25
 8006ec8:	08006f01 	.word	0x08006f01
 8006ecc:	08006f25 	.word	0x08006f25
 8006ed0:	08006f25 	.word	0x08006f25
 8006ed4:	08006f25 	.word	0x08006f25
 8006ed8:	08006f13 	.word	0x08006f13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0202 	orr.w	r2, r2, #2
 8006eea:	60da      	str	r2, [r3, #12]
      break;
 8006eec:	e01d      	b.n	8006f2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f042 0204 	orr.w	r2, r2, #4
 8006efc:	60da      	str	r2, [r3, #12]
      break;
 8006efe:	e014      	b.n	8006f2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0208 	orr.w	r2, r2, #8
 8006f0e:	60da      	str	r2, [r3, #12]
      break;
 8006f10:	e00b      	b.n	8006f2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0210 	orr.w	r2, r2, #16
 8006f20:	60da      	str	r2, [r3, #12]
      break;
 8006f22:	e002      	b.n	8006f2a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
      break;
 8006f28:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d13e      	bne.n	8006fae <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2201      	movs	r2, #1
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fff1 	bl	8007f20 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1d      	ldr	r2, [pc, #116]	; (8006fb8 <HAL_TIM_IC_Start_IT+0x220>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d018      	beq.n	8006f7a <HAL_TIM_IC_Start_IT+0x1e2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f50:	d013      	beq.n	8006f7a <HAL_TIM_IC_Start_IT+0x1e2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <HAL_TIM_IC_Start_IT+0x224>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00e      	beq.n	8006f7a <HAL_TIM_IC_Start_IT+0x1e2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a17      	ldr	r2, [pc, #92]	; (8006fc0 <HAL_TIM_IC_Start_IT+0x228>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d009      	beq.n	8006f7a <HAL_TIM_IC_Start_IT+0x1e2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a16      	ldr	r2, [pc, #88]	; (8006fc4 <HAL_TIM_IC_Start_IT+0x22c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d004      	beq.n	8006f7a <HAL_TIM_IC_Start_IT+0x1e2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <HAL_TIM_IC_Start_IT+0x230>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d111      	bne.n	8006f9e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b06      	cmp	r3, #6
 8006f8a:	d010      	beq.n	8006fae <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0201 	orr.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9c:	e007      	b.n	8006fae <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0201 	orr.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40010000 	.word	0x40010000
 8006fbc:	40000400 	.word	0x40000400
 8006fc0:	40000800 	.word	0x40000800
 8006fc4:	40000c00 	.word	0x40000c00
 8006fc8:	40014000 	.word	0x40014000

08006fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d128      	bne.n	8007034 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d121      	bne.n	8007034 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f06f 0202 	mvn.w	r2, #2
 8006ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
 8007018:	e009      	b.n	800702e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b04      	cmp	r3, #4
 8007040:	d128      	bne.n	8007094 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b04      	cmp	r3, #4
 800704e:	d121      	bne.n	8007094 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0204 	mvn.w	r2, #4
 8007058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	4798      	blx	r3
 8007078:	e009      	b.n	800708e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0308 	and.w	r3, r3, #8
 800709e:	2b08      	cmp	r3, #8
 80070a0:	d128      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d121      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0208 	mvn.w	r2, #8
 80070b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2204      	movs	r2, #4
 80070be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	4798      	blx	r3
 80070d8:	e009      	b.n	80070ee <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	2b10      	cmp	r3, #16
 8007100:	d128      	bne.n	8007154 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b10      	cmp	r3, #16
 800710e:	d121      	bne.n	8007154 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0210 	mvn.w	r2, #16
 8007118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2208      	movs	r2, #8
 800711e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
 8007138:	e009      	b.n	800714e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d110      	bne.n	8007184 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b01      	cmp	r3, #1
 800716e:	d109      	bne.n	8007184 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0201 	mvn.w	r2, #1
 8007178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	2b80      	cmp	r3, #128	; 0x80
 8007190:	d110      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719c:	2b80      	cmp	r3, #128	; 0x80
 800719e:	d109      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d110      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071cc:	2b40      	cmp	r3, #64	; 0x40
 80071ce:	d109      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d110      	bne.n	8007214 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d109      	bne.n	8007214 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0220 	mvn.w	r2, #32
 8007208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007236:	2302      	movs	r3, #2
 8007238:	e088      	b.n	800734c <HAL_TIM_IC_ConfigChannel+0x130>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d11b      	bne.n	8007280 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6818      	ldr	r0, [r3, #0]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	6819      	ldr	r1, [r3, #0]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f000 fcaa 	bl	8007bb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 020c 	bic.w	r2, r2, #12
 800726a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6999      	ldr	r1, [r3, #24]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	619a      	str	r2, [r3, #24]
 800727e:	e060      	b.n	8007342 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b04      	cmp	r3, #4
 8007284:	d11c      	bne.n	80072c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6819      	ldr	r1, [r3, #0]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f000 fd22 	bl	8007cde <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	699a      	ldr	r2, [r3, #24]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6999      	ldr	r1, [r3, #24]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	021a      	lsls	r2, r3, #8
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	619a      	str	r2, [r3, #24]
 80072be:	e040      	b.n	8007342 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d11b      	bne.n	80072fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	6819      	ldr	r1, [r3, #0]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f000 fd6f 	bl	8007db8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 020c 	bic.w	r2, r2, #12
 80072e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69d9      	ldr	r1, [r3, #28]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	61da      	str	r2, [r3, #28]
 80072fc:	e021      	b.n	8007342 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b0c      	cmp	r3, #12
 8007302:	d11c      	bne.n	800733e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6818      	ldr	r0, [r3, #0]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6819      	ldr	r1, [r3, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f000 fd8c 	bl	8007e30 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69da      	ldr	r2, [r3, #28]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007326:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	69d9      	ldr	r1, [r3, #28]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	021a      	lsls	r2, r3, #8
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	430a      	orrs	r2, r1
 800733a:	61da      	str	r2, [r3, #28]
 800733c:	e001      	b.n	8007342 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800734a:	7dfb      	ldrb	r3, [r7, #23]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800736e:	2302      	movs	r3, #2
 8007370:	e0ae      	b.n	80074d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b0c      	cmp	r3, #12
 800737e:	f200 809f 	bhi.w	80074c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007382:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	080073bd 	.word	0x080073bd
 800738c:	080074c1 	.word	0x080074c1
 8007390:	080074c1 	.word	0x080074c1
 8007394:	080074c1 	.word	0x080074c1
 8007398:	080073fd 	.word	0x080073fd
 800739c:	080074c1 	.word	0x080074c1
 80073a0:	080074c1 	.word	0x080074c1
 80073a4:	080074c1 	.word	0x080074c1
 80073a8:	0800743f 	.word	0x0800743f
 80073ac:	080074c1 	.word	0x080074c1
 80073b0:	080074c1 	.word	0x080074c1
 80073b4:	080074c1 	.word	0x080074c1
 80073b8:	0800747f 	.word	0x0800747f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fa68 	bl	8007898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0208 	orr.w	r2, r2, #8
 80073d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0204 	bic.w	r2, r2, #4
 80073e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6999      	ldr	r1, [r3, #24]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	619a      	str	r2, [r3, #24]
      break;
 80073fa:	e064      	b.n	80074c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 faae 	bl	8007964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6999      	ldr	r1, [r3, #24]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	021a      	lsls	r2, r3, #8
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	619a      	str	r2, [r3, #24]
      break;
 800743c:	e043      	b.n	80074c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 faf9 	bl	8007a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0208 	orr.w	r2, r2, #8
 8007458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0204 	bic.w	r2, r2, #4
 8007468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	61da      	str	r2, [r3, #28]
      break;
 800747c:	e023      	b.n	80074c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fb43 	bl	8007b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69da      	ldr	r2, [r3, #28]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69d9      	ldr	r1, [r3, #28]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	021a      	lsls	r2, r3, #8
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	61da      	str	r2, [r3, #28]
      break;
 80074be:	e002      	b.n	80074c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	75fb      	strb	r3, [r7, #23]
      break;
 80074c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_ConfigClockSource+0x1c>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e0b4      	b.n	800765e <HAL_TIM_ConfigClockSource+0x186>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800751a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800752c:	d03e      	beq.n	80075ac <HAL_TIM_ConfigClockSource+0xd4>
 800752e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007532:	f200 8087 	bhi.w	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 8007536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753a:	f000 8086 	beq.w	800764a <HAL_TIM_ConfigClockSource+0x172>
 800753e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007542:	d87f      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 8007544:	2b70      	cmp	r3, #112	; 0x70
 8007546:	d01a      	beq.n	800757e <HAL_TIM_ConfigClockSource+0xa6>
 8007548:	2b70      	cmp	r3, #112	; 0x70
 800754a:	d87b      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 800754c:	2b60      	cmp	r3, #96	; 0x60
 800754e:	d050      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x11a>
 8007550:	2b60      	cmp	r3, #96	; 0x60
 8007552:	d877      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 8007554:	2b50      	cmp	r3, #80	; 0x50
 8007556:	d03c      	beq.n	80075d2 <HAL_TIM_ConfigClockSource+0xfa>
 8007558:	2b50      	cmp	r3, #80	; 0x50
 800755a:	d873      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 800755c:	2b40      	cmp	r3, #64	; 0x40
 800755e:	d058      	beq.n	8007612 <HAL_TIM_ConfigClockSource+0x13a>
 8007560:	2b40      	cmp	r3, #64	; 0x40
 8007562:	d86f      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 8007564:	2b30      	cmp	r3, #48	; 0x30
 8007566:	d064      	beq.n	8007632 <HAL_TIM_ConfigClockSource+0x15a>
 8007568:	2b30      	cmp	r3, #48	; 0x30
 800756a:	d86b      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 800756c:	2b20      	cmp	r3, #32
 800756e:	d060      	beq.n	8007632 <HAL_TIM_ConfigClockSource+0x15a>
 8007570:	2b20      	cmp	r3, #32
 8007572:	d867      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d05c      	beq.n	8007632 <HAL_TIM_ConfigClockSource+0x15a>
 8007578:	2b10      	cmp	r3, #16
 800757a:	d05a      	beq.n	8007632 <HAL_TIM_ConfigClockSource+0x15a>
 800757c:	e062      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6899      	ldr	r1, [r3, #8]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f000 fca7 	bl	8007ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	609a      	str	r2, [r3, #8]
      break;
 80075aa:	e04f      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	6899      	ldr	r1, [r3, #8]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f000 fc90 	bl	8007ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075ce:	609a      	str	r2, [r3, #8]
      break;
 80075d0:	e03c      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6818      	ldr	r0, [r3, #0]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6859      	ldr	r1, [r3, #4]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	461a      	mov	r2, r3
 80075e0:	f000 fb4e 	bl	8007c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2150      	movs	r1, #80	; 0x50
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fc5d 	bl	8007eaa <TIM_ITRx_SetConfig>
      break;
 80075f0:	e02c      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6859      	ldr	r1, [r3, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	461a      	mov	r2, r3
 8007600:	f000 fbaa 	bl	8007d58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2160      	movs	r1, #96	; 0x60
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fc4d 	bl	8007eaa <TIM_ITRx_SetConfig>
      break;
 8007610:	e01c      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	6859      	ldr	r1, [r3, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	461a      	mov	r2, r3
 8007620:	f000 fb2e 	bl	8007c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2140      	movs	r1, #64	; 0x40
 800762a:	4618      	mov	r0, r3
 800762c:	f000 fc3d 	bl	8007eaa <TIM_ITRx_SetConfig>
      break;
 8007630:	e00c      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4619      	mov	r1, r3
 800763c:	4610      	mov	r0, r2
 800763e:	f000 fc34 	bl	8007eaa <TIM_ITRx_SetConfig>
      break;
 8007642:	e003      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	73fb      	strb	r3, [r7, #15]
      break;
 8007648:	e000      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800764a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b0c      	cmp	r3, #12
 800767a:	d831      	bhi.n	80076e0 <HAL_TIM_ReadCapturedValue+0x78>
 800767c:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <HAL_TIM_ReadCapturedValue+0x1c>)
 800767e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007682:	bf00      	nop
 8007684:	080076b9 	.word	0x080076b9
 8007688:	080076e1 	.word	0x080076e1
 800768c:	080076e1 	.word	0x080076e1
 8007690:	080076e1 	.word	0x080076e1
 8007694:	080076c3 	.word	0x080076c3
 8007698:	080076e1 	.word	0x080076e1
 800769c:	080076e1 	.word	0x080076e1
 80076a0:	080076e1 	.word	0x080076e1
 80076a4:	080076cd 	.word	0x080076cd
 80076a8:	080076e1 	.word	0x080076e1
 80076ac:	080076e1 	.word	0x080076e1
 80076b0:	080076e1 	.word	0x080076e1
 80076b4:	080076d7 	.word	0x080076d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076be:	60fb      	str	r3, [r7, #12]

      break;
 80076c0:	e00f      	b.n	80076e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c8:	60fb      	str	r3, [r7, #12]

      break;
 80076ca:	e00a      	b.n	80076e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d2:	60fb      	str	r3, [r7, #12]

      break;
 80076d4:	e005      	b.n	80076e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	60fb      	str	r3, [r7, #12]

      break;
 80076de:	e000      	b.n	80076e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80076e0:	bf00      	nop
  }

  return tmpreg;
 80076e2:	68fb      	ldr	r3, [r7, #12]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778a:	b2db      	uxtb	r3, r3
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a34      	ldr	r2, [pc, #208]	; (800787c <TIM_Base_SetConfig+0xe4>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d00f      	beq.n	80077d0 <TIM_Base_SetConfig+0x38>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b6:	d00b      	beq.n	80077d0 <TIM_Base_SetConfig+0x38>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a31      	ldr	r2, [pc, #196]	; (8007880 <TIM_Base_SetConfig+0xe8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d007      	beq.n	80077d0 <TIM_Base_SetConfig+0x38>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a30      	ldr	r2, [pc, #192]	; (8007884 <TIM_Base_SetConfig+0xec>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d003      	beq.n	80077d0 <TIM_Base_SetConfig+0x38>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a2f      	ldr	r2, [pc, #188]	; (8007888 <TIM_Base_SetConfig+0xf0>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d108      	bne.n	80077e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a25      	ldr	r2, [pc, #148]	; (800787c <TIM_Base_SetConfig+0xe4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d01b      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f0:	d017      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a22      	ldr	r2, [pc, #136]	; (8007880 <TIM_Base_SetConfig+0xe8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a21      	ldr	r2, [pc, #132]	; (8007884 <TIM_Base_SetConfig+0xec>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00f      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a20      	ldr	r2, [pc, #128]	; (8007888 <TIM_Base_SetConfig+0xf0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00b      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a1f      	ldr	r2, [pc, #124]	; (800788c <TIM_Base_SetConfig+0xf4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d007      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1e      	ldr	r2, [pc, #120]	; (8007890 <TIM_Base_SetConfig+0xf8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d003      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a1d      	ldr	r2, [pc, #116]	; (8007894 <TIM_Base_SetConfig+0xfc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d108      	bne.n	8007834 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4313      	orrs	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a08      	ldr	r2, [pc, #32]	; (800787c <TIM_Base_SetConfig+0xe4>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d103      	bne.n	8007868 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	615a      	str	r2, [r3, #20]
}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40010000 	.word	0x40010000
 8007880:	40000400 	.word	0x40000400
 8007884:	40000800 	.word	0x40000800
 8007888:	40000c00 	.word	0x40000c00
 800788c:	40014000 	.word	0x40014000
 8007890:	40014400 	.word	0x40014400
 8007894:	40014800 	.word	0x40014800

08007898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f023 0201 	bic.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f023 0302 	bic.w	r3, r3, #2
 80078e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a1c      	ldr	r2, [pc, #112]	; (8007960 <TIM_OC1_SetConfig+0xc8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d10c      	bne.n	800790e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f023 0308 	bic.w	r3, r3, #8
 80078fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f023 0304 	bic.w	r3, r3, #4
 800790c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a13      	ldr	r2, [pc, #76]	; (8007960 <TIM_OC1_SetConfig+0xc8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d111      	bne.n	800793a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800791c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4313      	orrs	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	621a      	str	r2, [r3, #32]
}
 8007954:	bf00      	nop
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	40010000 	.word	0x40010000

08007964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f023 0210 	bic.w	r2, r3, #16
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800799a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f023 0320 	bic.w	r3, r3, #32
 80079ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a1e      	ldr	r2, [pc, #120]	; (8007a38 <TIM_OC2_SetConfig+0xd4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d10d      	bne.n	80079e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a15      	ldr	r2, [pc, #84]	; (8007a38 <TIM_OC2_SetConfig+0xd4>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d113      	bne.n	8007a10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	621a      	str	r2, [r3, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	40010000 	.word	0x40010000

08007a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0303 	bic.w	r3, r3, #3
 8007a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a1d      	ldr	r2, [pc, #116]	; (8007b0c <TIM_OC3_SetConfig+0xd0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d10d      	bne.n	8007ab6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	021b      	lsls	r3, r3, #8
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a14      	ldr	r2, [pc, #80]	; (8007b0c <TIM_OC3_SetConfig+0xd0>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d113      	bne.n	8007ae6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	621a      	str	r2, [r3, #32]
}
 8007b00:	bf00      	nop
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	40010000 	.word	0x40010000

08007b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	031b      	lsls	r3, r3, #12
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a10      	ldr	r2, [pc, #64]	; (8007bac <TIM_OC4_SetConfig+0x9c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d109      	bne.n	8007b84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	019b      	lsls	r3, r3, #6
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	621a      	str	r2, [r3, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	40010000 	.word	0x40010000

08007bb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4a24      	ldr	r2, [pc, #144]	; (8007c6c <TIM_TI1_SetConfig+0xbc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d013      	beq.n	8007c06 <TIM_TI1_SetConfig+0x56>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be4:	d00f      	beq.n	8007c06 <TIM_TI1_SetConfig+0x56>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4a21      	ldr	r2, [pc, #132]	; (8007c70 <TIM_TI1_SetConfig+0xc0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00b      	beq.n	8007c06 <TIM_TI1_SetConfig+0x56>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4a20      	ldr	r2, [pc, #128]	; (8007c74 <TIM_TI1_SetConfig+0xc4>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d007      	beq.n	8007c06 <TIM_TI1_SetConfig+0x56>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4a1f      	ldr	r2, [pc, #124]	; (8007c78 <TIM_TI1_SetConfig+0xc8>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d003      	beq.n	8007c06 <TIM_TI1_SetConfig+0x56>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4a1e      	ldr	r2, [pc, #120]	; (8007c7c <TIM_TI1_SetConfig+0xcc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d101      	bne.n	8007c0a <TIM_TI1_SetConfig+0x5a>
 8007c06:	2301      	movs	r3, #1
 8007c08:	e000      	b.n	8007c0c <TIM_TI1_SetConfig+0x5c>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d008      	beq.n	8007c22 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f023 0303 	bic.w	r3, r3, #3
 8007c16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e003      	b.n	8007c2a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f043 0301 	orr.w	r3, r3, #1
 8007c28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f023 030a 	bic.w	r3, r3, #10
 8007c44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f003 030a 	and.w	r3, r3, #10
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	621a      	str	r2, [r3, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	40010000 	.word	0x40010000
 8007c70:	40000400 	.word	0x40000400
 8007c74:	40000800 	.word	0x40000800
 8007c78:	40000c00 	.word	0x40000c00
 8007c7c:	40014000 	.word	0x40014000

08007c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	f023 0201 	bic.w	r2, r3, #1
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f023 030a 	bic.w	r3, r3, #10
 8007cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	621a      	str	r2, [r3, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	607a      	str	r2, [r7, #4]
 8007cea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	f023 0210 	bic.w	r2, r3, #16
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	031b      	lsls	r3, r3, #12
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	621a      	str	r2, [r3, #32]
}
 8007d4c:	bf00      	nop
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	f023 0210 	bic.w	r2, r3, #16
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	031b      	lsls	r3, r3, #12
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	621a      	str	r2, [r3, #32]
}
 8007dac:	bf00      	nop
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f023 0303 	bic.w	r3, r3, #3
 8007de4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007df4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	011b      	lsls	r3, r3, #4
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007e08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	621a      	str	r2, [r3, #32]
}
 8007e24:	bf00      	nop
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	021b      	lsls	r3, r3, #8
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	031b      	lsls	r3, r3, #12
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007e82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	031b      	lsls	r3, r3, #12
 8007e88:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	621a      	str	r2, [r3, #32]
}
 8007e9e:	bf00      	nop
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f043 0307 	orr.w	r3, r3, #7
 8007ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	609a      	str	r2, [r3, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	021a      	lsls	r2, r3, #8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	609a      	str	r2, [r3, #8]
}
 8007f14:	bf00      	nop
 8007f16:	371c      	adds	r7, #28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	2201      	movs	r2, #1
 8007f34:	fa02 f303 	lsl.w	r3, r2, r3
 8007f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6a1a      	ldr	r2, [r3, #32]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	401a      	ands	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a1a      	ldr	r2, [r3, #32]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	fa01 f303 	lsl.w	r3, r1, r3
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	621a      	str	r2, [r3, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
	...

08007f6c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a1c      	ldr	r2, [pc, #112]	; (8007fe8 <TIM_ResetCallback+0x7c>)
 8007f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a1b      	ldr	r2, [pc, #108]	; (8007fec <TIM_ResetCallback+0x80>)
 8007f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a1a      	ldr	r2, [pc, #104]	; (8007ff0 <TIM_ResetCallback+0x84>)
 8007f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a19      	ldr	r2, [pc, #100]	; (8007ff4 <TIM_ResetCallback+0x88>)
 8007f90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <TIM_ResetCallback+0x8c>)
 8007f98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a17      	ldr	r2, [pc, #92]	; (8007ffc <TIM_ResetCallback+0x90>)
 8007fa0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a16      	ldr	r2, [pc, #88]	; (8008000 <TIM_ResetCallback+0x94>)
 8007fa8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a15      	ldr	r2, [pc, #84]	; (8008004 <TIM_ResetCallback+0x98>)
 8007fb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a14      	ldr	r2, [pc, #80]	; (8008008 <TIM_ResetCallback+0x9c>)
 8007fb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a13      	ldr	r2, [pc, #76]	; (800800c <TIM_ResetCallback+0xa0>)
 8007fc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a12      	ldr	r2, [pc, #72]	; (8008010 <TIM_ResetCallback+0xa4>)
 8007fc8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a11      	ldr	r2, [pc, #68]	; (8008014 <TIM_ResetCallback+0xa8>)
 8007fd0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a10      	ldr	r2, [pc, #64]	; (8008018 <TIM_ResetCallback+0xac>)
 8007fd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	08009f95 	.word	0x08009f95
 8007fec:	080076f1 	.word	0x080076f1
 8007ff0:	08007755 	.word	0x08007755
 8007ff4:	08007769 	.word	0x08007769
 8007ff8:	08009571 	.word	0x08009571
 8007ffc:	08007719 	.word	0x08007719
 8008000:	08007705 	.word	0x08007705
 8008004:	0800772d 	.word	0x0800772d
 8008008:	08007741 	.word	0x08007741
 800800c:	08009c71 	.word	0x08009c71
 8008010:	080080f9 	.word	0x080080f9
 8008014:	0800810d 	.word	0x0800810d
 8008018:	08008121 	.word	0x08008121

0800801c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008030:	2302      	movs	r3, #2
 8008032:	e050      	b.n	80080d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a1c      	ldr	r2, [pc, #112]	; (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d018      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008080:	d013      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a18      	ldr	r2, [pc, #96]	; (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d00e      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a16      	ldr	r2, [pc, #88]	; (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d009      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a15      	ldr	r2, [pc, #84]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d004      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a13      	ldr	r2, [pc, #76]	; (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d10c      	bne.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	40010000 	.word	0x40010000
 80080e8:	40000400 	.word	0x40000400
 80080ec:	40000800 	.word	0x40000800
 80080f0:	40000c00 	.word	0x40000c00
 80080f4:	40014000 	.word	0x40014000

080080f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e04a      	b.n	80081dc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d111      	bne.n	8008176 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fbf8 	bl	8008950 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d102      	bne.n	800816e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a1e      	ldr	r2, [pc, #120]	; (80081e4 <HAL_UART_Init+0xb0>)
 800816c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2224      	movs	r2, #36	; 0x24
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800818c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fdf2 	bl	8008d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691a      	ldr	r2, [r3, #16]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695a      	ldr	r2, [r3, #20]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	08003851 	.word	0x08003851

080081e8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e029      	b.n	800824e <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2224      	movs	r2, #36	; 0x24
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008210:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a0e      	ldr	r2, [pc, #56]	; (8008258 <HAL_UART_DeInit+0x70>)
 800821e:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	080038e1 	.word	0x080038e1

0800825c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	4613      	mov	r3, r2
 8008268:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b20      	cmp	r3, #32
 8008274:	d130      	bne.n	80082d8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <HAL_UART_Transmit_IT+0x26>
 800827c:	88fb      	ldrh	r3, [r7, #6]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e029      	b.n	80082da <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800828c:	2b01      	cmp	r3, #1
 800828e:	d101      	bne.n	8008294 <HAL_UART_Transmit_IT+0x38>
 8008290:	2302      	movs	r3, #2
 8008292:	e022      	b.n	80082da <HAL_UART_Transmit_IT+0x7e>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	88fa      	ldrh	r2, [r7, #6]
 80082a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2221      	movs	r2, #33	; 0x21
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082d2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	e000      	b.n	80082da <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80082d8:	2302      	movs	r3, #2
  }
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	4613      	mov	r3, r2
 80082f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	d11d      	bne.n	800833c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <HAL_UART_Receive_IT+0x26>
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e016      	b.n	800833e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008316:	2b01      	cmp	r3, #1
 8008318:	d101      	bne.n	800831e <HAL_UART_Receive_IT+0x38>
 800831a:	2302      	movs	r3, #2
 800831c:	e00f      	b.n	800833e <HAL_UART_Receive_IT+0x58>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800832c:	88fb      	ldrh	r3, [r7, #6]
 800832e:	461a      	mov	r2, r3
 8008330:	68b9      	ldr	r1, [r7, #8]
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 fb44 	bl	80089c0 <UART_Start_Receive_IT>
 8008338:	4603      	mov	r3, r0
 800833a:	e000      	b.n	800833e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800833c:	2302      	movs	r3, #2
  }
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b0ba      	sub	sp, #232	; 0xe8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800836e:	2300      	movs	r3, #0
 8008370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008374:	2300      	movs	r3, #0
 8008376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10f      	bne.n	80083ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800838e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008392:	f003 0320 	and.w	r3, r3, #32
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <HAL_UART_IRQHandler+0x66>
 800839a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800839e:	f003 0320 	and.w	r3, r3, #32
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fc29 	bl	8008bfe <UART_Receive_IT>
      return;
 80083ac:	e25b      	b.n	8008866 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80083ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80e1 	beq.w	800857a <HAL_UART_IRQHandler+0x232>
 80083b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d106      	bne.n	80083d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80d4 	beq.w	800857a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00b      	beq.n	80083f6 <HAL_UART_IRQHandler+0xae>
 80083de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d005      	beq.n	80083f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	f043 0201 	orr.w	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fa:	f003 0304 	and.w	r3, r3, #4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00b      	beq.n	800841a <HAL_UART_IRQHandler+0xd2>
 8008402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d005      	beq.n	800841a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	f043 0202 	orr.w	r2, r3, #2
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800841a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <HAL_UART_IRQHandler+0xf6>
 8008426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d005      	beq.n	800843e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	f043 0204 	orr.w	r2, r3, #4
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800843e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008442:	f003 0308 	and.w	r3, r3, #8
 8008446:	2b00      	cmp	r3, #0
 8008448:	d011      	beq.n	800846e <HAL_UART_IRQHandler+0x126>
 800844a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800844e:	f003 0320 	and.w	r3, r3, #32
 8008452:	2b00      	cmp	r3, #0
 8008454:	d105      	bne.n	8008462 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d005      	beq.n	800846e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008466:	f043 0208 	orr.w	r2, r3, #8
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 81f2 	beq.w	800885c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847c:	f003 0320 	and.w	r3, r3, #32
 8008480:	2b00      	cmp	r3, #0
 8008482:	d008      	beq.n	8008496 <HAL_UART_IRQHandler+0x14e>
 8008484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fbb4 	bl	8008bfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a0:	2b40      	cmp	r3, #64	; 0x40
 80084a2:	bf0c      	ite	eq
 80084a4:	2301      	moveq	r3, #1
 80084a6:	2300      	movne	r3, #0
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	f003 0308 	and.w	r3, r3, #8
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d103      	bne.n	80084c2 <HAL_UART_IRQHandler+0x17a>
 80084ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d051      	beq.n	8008566 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 faba 	bl	8008a3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	d142      	bne.n	800855c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3314      	adds	r3, #20
 80084dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80084ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3314      	adds	r3, #20
 80084fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008502:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800850e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800851a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1d9      	bne.n	80084d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	2b00      	cmp	r3, #0
 8008528:	d013      	beq.n	8008552 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	4a7f      	ldr	r2, [pc, #508]	; (800872c <HAL_UART_IRQHandler+0x3e4>)
 8008530:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008536:	4618      	mov	r0, r3
 8008538:	f7fc feb0 	bl	800529c <HAL_DMA_Abort_IT>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d019      	beq.n	8008576 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008550:	e011      	b.n	8008576 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800855a:	e00c      	b.n	8008576 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008564:	e007      	b.n	8008576 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008574:	e172      	b.n	800885c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008576:	bf00      	nop
    return;
 8008578:	e170      	b.n	800885c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857e:	2b01      	cmp	r3, #1
 8008580:	f040 814c 	bne.w	800881c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 8145 	beq.w	800881c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008596:	f003 0310 	and.w	r3, r3, #16
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 813e 	beq.w	800881c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085a0:	2300      	movs	r3, #0
 80085a2:	60bb      	str	r3, [r7, #8]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60bb      	str	r3, [r7, #8]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	60bb      	str	r3, [r7, #8]
 80085b4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b40      	cmp	r3, #64	; 0x40
 80085c2:	f040 80b5 	bne.w	8008730 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 8142 	beq.w	8008860 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085e4:	429a      	cmp	r2, r3
 80085e6:	f080 813b 	bcs.w	8008860 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fc:	f000 8088 	beq.w	8008710 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	330c      	adds	r3, #12
 8008606:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800861a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800861e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	330c      	adds	r3, #12
 8008628:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800862c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008630:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008638:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1d9      	bne.n	8008600 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3314      	adds	r3, #20
 8008652:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800865c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800865e:	f023 0301 	bic.w	r3, r3, #1
 8008662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3314      	adds	r3, #20
 800866c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008670:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008674:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008678:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e1      	bne.n	800864c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3314      	adds	r3, #20
 800868e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800869a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3314      	adds	r3, #20
 80086a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086b4:	e841 2300 	strex	r3, r2, [r1]
 80086b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1e3      	bne.n	8008688 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	330c      	adds	r3, #12
 80086d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e0:	f023 0310 	bic.w	r3, r3, #16
 80086e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	330c      	adds	r3, #12
 80086ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80086f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80086f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e3      	bne.n	80086ce <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	4618      	mov	r0, r3
 800870c:	f7fc fd56 	bl	80051bc <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800871c:	b292      	uxth	r2, r2
 800871e:	1a8a      	subs	r2, r1, r2
 8008720:	b292      	uxth	r2, r2
 8008722:	4611      	mov	r1, r2
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008728:	e09a      	b.n	8008860 <HAL_UART_IRQHandler+0x518>
 800872a:	bf00      	nop
 800872c:	08008b03 	.word	0x08008b03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008738:	b29b      	uxth	r3, r3
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008744:	b29b      	uxth	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 808c 	beq.w	8008864 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800874c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 8087 	beq.w	8008864 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	330c      	adds	r3, #12
 800875c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800876c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	330c      	adds	r3, #12
 8008776:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800877a:	647a      	str	r2, [r7, #68]	; 0x44
 800877c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e3      	bne.n	8008756 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3314      	adds	r3, #20
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	623b      	str	r3, [r7, #32]
   return(result);
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	f023 0301 	bic.w	r3, r3, #1
 80087a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3314      	adds	r3, #20
 80087ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087b2:	633a      	str	r2, [r7, #48]	; 0x30
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e3      	bne.n	800878e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	330c      	adds	r3, #12
 80087da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0310 	bic.w	r3, r3, #16
 80087ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	330c      	adds	r3, #12
 80087f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80087f8:	61fa      	str	r2, [r7, #28]
 80087fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	69b9      	ldr	r1, [r7, #24]
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	617b      	str	r3, [r7, #20]
   return(result);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e3      	bne.n	80087d4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008810:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008814:	4611      	mov	r1, r2
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800881a:	e023      	b.n	8008864 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800881c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008824:	2b00      	cmp	r3, #0
 8008826:	d009      	beq.n	800883c <HAL_UART_IRQHandler+0x4f4>
 8008828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800882c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f979 	bl	8008b2c <UART_Transmit_IT>
    return;
 800883a:	e014      	b.n	8008866 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800883c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00e      	beq.n	8008866 <HAL_UART_IRQHandler+0x51e>
 8008848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f9b9 	bl	8008bcc <UART_EndTransmit_IT>
    return;
 800885a:	e004      	b.n	8008866 <HAL_UART_IRQHandler+0x51e>
    return;
 800885c:	bf00      	nop
 800885e:	e002      	b.n	8008866 <HAL_UART_IRQHandler+0x51e>
      return;
 8008860:	bf00      	nop
 8008862:	e000      	b.n	8008866 <HAL_UART_IRQHandler+0x51e>
      return;
 8008864:	bf00      	nop
  }
}
 8008866:	37e8      	adds	r7, #232	; 0xe8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	2300      	movs	r3, #0
 800890a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008912:	b2db      	uxtb	r3, r3
 8008914:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800891c:	b2db      	uxtb	r3, r3
 800891e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	b2da      	uxtb	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	4313      	orrs	r3, r2
 800892a:	b2db      	uxtb	r3, r3
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008944:	4618      	mov	r0, r3
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a10      	ldr	r2, [pc, #64]	; (800899c <UART_InitCallbacksToDefault+0x4c>)
 800895c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a0f      	ldr	r2, [pc, #60]	; (80089a0 <UART_InitCallbacksToDefault+0x50>)
 8008962:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a0f      	ldr	r2, [pc, #60]	; (80089a4 <UART_InitCallbacksToDefault+0x54>)
 8008968:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a0e      	ldr	r2, [pc, #56]	; (80089a8 <UART_InitCallbacksToDefault+0x58>)
 800896e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a0e      	ldr	r2, [pc, #56]	; (80089ac <UART_InitCallbacksToDefault+0x5c>)
 8008974:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a0d      	ldr	r2, [pc, #52]	; (80089b0 <UART_InitCallbacksToDefault+0x60>)
 800897a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a0d      	ldr	r2, [pc, #52]	; (80089b4 <UART_InitCallbacksToDefault+0x64>)
 8008980:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a0c      	ldr	r2, [pc, #48]	; (80089b8 <UART_InitCallbacksToDefault+0x68>)
 8008986:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a0c      	ldr	r2, [pc, #48]	; (80089bc <UART_InitCallbacksToDefault+0x6c>)
 800898c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	08008881 	.word	0x08008881
 80089a0:	0800886d 	.word	0x0800886d
 80089a4:	08008895 	.word	0x08008895
 80089a8:	080026d9 	.word	0x080026d9
 80089ac:	08002625 	.word	0x08002625
 80089b0:	080088a9 	.word	0x080088a9
 80089b4:	080088bd 	.word	0x080088bd
 80089b8:	080088d1 	.word	0x080088d1
 80089bc:	080088e5 	.word	0x080088e5

080089c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	4613      	mov	r3, r2
 80089cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	88fa      	ldrh	r2, [r7, #6]
 80089d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	88fa      	ldrh	r2, [r7, #6]
 80089de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2222      	movs	r2, #34	; 0x22
 80089ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d007      	beq.n	8008a0e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68da      	ldr	r2, [r3, #12]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a0c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695a      	ldr	r2, [r3, #20]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0201 	orr.w	r2, r2, #1
 8008a1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f042 0220 	orr.w	r2, r2, #32
 8008a2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b095      	sub	sp, #84	; 0x54
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	e853 3f00 	ldrex	r3, [r3]
 8008a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	330c      	adds	r3, #12
 8008a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a64:	643a      	str	r2, [r7, #64]	; 0x40
 8008a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e5      	bne.n	8008a44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3314      	adds	r3, #20
 8008a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f023 0301 	bic.w	r3, r3, #1
 8008a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3314      	adds	r3, #20
 8008a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e5      	bne.n	8008a78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d119      	bne.n	8008ae8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	330c      	adds	r3, #12
 8008aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f023 0310 	bic.w	r3, r3, #16
 8008aca:	647b      	str	r3, [r7, #68]	; 0x44
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	330c      	adds	r3, #12
 8008ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ad4:	61ba      	str	r2, [r7, #24]
 8008ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	6979      	ldr	r1, [r7, #20]
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	e841 2300 	strex	r3, r2, [r1]
 8008ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e5      	bne.n	8008ab4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008af6:	bf00      	nop
 8008af8:	3754      	adds	r7, #84	; 0x54
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b21      	cmp	r3, #33	; 0x21
 8008b3e:	d13e      	bne.n	8008bbe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b48:	d114      	bne.n	8008b74 <UART_Transmit_IT+0x48>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d110      	bne.n	8008b74 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b66:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	1c9a      	adds	r2, r3, #2
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	621a      	str	r2, [r3, #32]
 8008b72:	e008      	b.n	8008b86 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	1c59      	adds	r1, r3, #1
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	6211      	str	r1, [r2, #32]
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	4619      	mov	r1, r3
 8008b94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10f      	bne.n	8008bba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ba8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68da      	ldr	r2, [r3, #12]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e000      	b.n	8008bc0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bbe:	2302      	movs	r3, #2
  }
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008be2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b08c      	sub	sp, #48	; 0x30
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b22      	cmp	r3, #34	; 0x22
 8008c10:	f040 80ad 	bne.w	8008d6e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c1c:	d117      	bne.n	8008c4e <UART_Receive_IT+0x50>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d113      	bne.n	8008c4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c46:	1c9a      	adds	r2, r3, #2
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8008c4c:	e026      	b.n	8008c9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c60:	d007      	beq.n	8008c72 <UART_Receive_IT+0x74>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10a      	bne.n	8008c80 <UART_Receive_IT+0x82>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d106      	bne.n	8008c80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e008      	b.n	8008c92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d15c      	bne.n	8008d6a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 0220 	bic.w	r2, r2, #32
 8008cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68da      	ldr	r2, [r3, #12]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	695a      	ldr	r2, [r3, #20]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0201 	bic.w	r2, r2, #1
 8008cde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d136      	bne.n	8008d5e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	330c      	adds	r3, #12
 8008cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	613b      	str	r3, [r7, #16]
   return(result);
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f023 0310 	bic.w	r3, r3, #16
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	330c      	adds	r3, #12
 8008d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d16:	623a      	str	r2, [r7, #32]
 8008d18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1a:	69f9      	ldr	r1, [r7, #28]
 8008d1c:	6a3a      	ldr	r2, [r7, #32]
 8008d1e:	e841 2300 	strex	r3, r2, [r1]
 8008d22:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1e5      	bne.n	8008cf6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0310 	and.w	r3, r3, #16
 8008d34:	2b10      	cmp	r3, #16
 8008d36:	d10a      	bne.n	8008d4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008d56:	4611      	mov	r1, r2
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	4798      	blx	r3
 8008d5c:	e003      	b.n	8008d66 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	e002      	b.n	8008d70 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e000      	b.n	8008d70 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8008d6e:	2302      	movs	r3, #2
  }
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3730      	adds	r7, #48	; 0x30
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d7c:	b0c0      	sub	sp, #256	; 0x100
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d94:	68d9      	ldr	r1, [r3, #12]
 8008d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	ea40 0301 	orr.w	r3, r0, r1
 8008da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	431a      	orrs	r2, r3
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008dd0:	f021 010c 	bic.w	r1, r1, #12
 8008dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008dde:	430b      	orrs	r3, r1
 8008de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df2:	6999      	ldr	r1, [r3, #24]
 8008df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	ea40 0301 	orr.w	r3, r0, r1
 8008dfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4b8f      	ldr	r3, [pc, #572]	; (8009044 <UART_SetConfig+0x2cc>)
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d005      	beq.n	8008e18 <UART_SetConfig+0xa0>
 8008e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4b8d      	ldr	r3, [pc, #564]	; (8009048 <UART_SetConfig+0x2d0>)
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d104      	bne.n	8008e22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e18:	f7fd fc3e 	bl	8006698 <HAL_RCC_GetPCLK2Freq>
 8008e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e20:	e003      	b.n	8008e2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e22:	f7fd fc25 	bl	8006670 <HAL_RCC_GetPCLK1Freq>
 8008e26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2e:	69db      	ldr	r3, [r3, #28]
 8008e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e34:	f040 810c 	bne.w	8009050 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	1891      	adds	r1, r2, r2
 8008e50:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e52:	415b      	adcs	r3, r3
 8008e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	eb12 0801 	adds.w	r8, r2, r1
 8008e60:	4629      	mov	r1, r5
 8008e62:	eb43 0901 	adc.w	r9, r3, r1
 8008e66:	f04f 0200 	mov.w	r2, #0
 8008e6a:	f04f 0300 	mov.w	r3, #0
 8008e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e7a:	4690      	mov	r8, r2
 8008e7c:	4699      	mov	r9, r3
 8008e7e:	4623      	mov	r3, r4
 8008e80:	eb18 0303 	adds.w	r3, r8, r3
 8008e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e88:	462b      	mov	r3, r5
 8008e8a:	eb49 0303 	adc.w	r3, r9, r3
 8008e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	18db      	adds	r3, r3, r3
 8008eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8008eac:	4613      	mov	r3, r2
 8008eae:	eb42 0303 	adc.w	r3, r2, r3
 8008eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8008eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008eb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ebc:	f7f7 fd86 	bl	80009cc <__aeabi_uldivmod>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4b61      	ldr	r3, [pc, #388]	; (800904c <UART_SetConfig+0x2d4>)
 8008ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8008eca:	095b      	lsrs	r3, r3, #5
 8008ecc:	011c      	lsls	r4, r3, #4
 8008ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ed8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008edc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	1891      	adds	r1, r2, r2
 8008ee6:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ee8:	415b      	adcs	r3, r3
 8008eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ef0:	4641      	mov	r1, r8
 8008ef2:	eb12 0a01 	adds.w	sl, r2, r1
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	eb43 0b01 	adc.w	fp, r3, r1
 8008efc:	f04f 0200 	mov.w	r2, #0
 8008f00:	f04f 0300 	mov.w	r3, #0
 8008f04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f10:	4692      	mov	sl, r2
 8008f12:	469b      	mov	fp, r3
 8008f14:	4643      	mov	r3, r8
 8008f16:	eb1a 0303 	adds.w	r3, sl, r3
 8008f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	eb4b 0303 	adc.w	r3, fp, r3
 8008f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	18db      	adds	r3, r3, r3
 8008f40:	643b      	str	r3, [r7, #64]	; 0x40
 8008f42:	4613      	mov	r3, r2
 8008f44:	eb42 0303 	adc.w	r3, r2, r3
 8008f48:	647b      	str	r3, [r7, #68]	; 0x44
 8008f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f52:	f7f7 fd3b 	bl	80009cc <__aeabi_uldivmod>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4b3b      	ldr	r3, [pc, #236]	; (800904c <UART_SetConfig+0x2d4>)
 8008f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	2264      	movs	r2, #100	; 0x64
 8008f66:	fb02 f303 	mul.w	r3, r2, r3
 8008f6a:	1acb      	subs	r3, r1, r3
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f72:	4b36      	ldr	r3, [pc, #216]	; (800904c <UART_SetConfig+0x2d4>)
 8008f74:	fba3 2302 	umull	r2, r3, r3, r2
 8008f78:	095b      	lsrs	r3, r3, #5
 8008f7a:	005b      	lsls	r3, r3, #1
 8008f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f80:	441c      	add	r4, r3
 8008f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f94:	4642      	mov	r2, r8
 8008f96:	464b      	mov	r3, r9
 8008f98:	1891      	adds	r1, r2, r2
 8008f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f9c:	415b      	adcs	r3, r3
 8008f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fa4:	4641      	mov	r1, r8
 8008fa6:	1851      	adds	r1, r2, r1
 8008fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8008faa:	4649      	mov	r1, r9
 8008fac:	414b      	adcs	r3, r1
 8008fae:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb0:	f04f 0200 	mov.w	r2, #0
 8008fb4:	f04f 0300 	mov.w	r3, #0
 8008fb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	00cb      	lsls	r3, r1, #3
 8008fc0:	4651      	mov	r1, sl
 8008fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fc6:	4651      	mov	r1, sl
 8008fc8:	00ca      	lsls	r2, r1, #3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4603      	mov	r3, r0
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	189b      	adds	r3, r3, r2
 8008fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fd8:	464b      	mov	r3, r9
 8008fda:	460a      	mov	r2, r1
 8008fdc:	eb42 0303 	adc.w	r3, r2, r3
 8008fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ff0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	18db      	adds	r3, r3, r3
 8008ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ffe:	4613      	mov	r3, r2
 8009000:	eb42 0303 	adc.w	r3, r2, r3
 8009004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800900a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800900e:	f7f7 fcdd 	bl	80009cc <__aeabi_uldivmod>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4b0d      	ldr	r3, [pc, #52]	; (800904c <UART_SetConfig+0x2d4>)
 8009018:	fba3 1302 	umull	r1, r3, r3, r2
 800901c:	095b      	lsrs	r3, r3, #5
 800901e:	2164      	movs	r1, #100	; 0x64
 8009020:	fb01 f303 	mul.w	r3, r1, r3
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	3332      	adds	r3, #50	; 0x32
 800902a:	4a08      	ldr	r2, [pc, #32]	; (800904c <UART_SetConfig+0x2d4>)
 800902c:	fba2 2303 	umull	r2, r3, r2, r3
 8009030:	095b      	lsrs	r3, r3, #5
 8009032:	f003 0207 	and.w	r2, r3, #7
 8009036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4422      	add	r2, r4
 800903e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009040:	e105      	b.n	800924e <UART_SetConfig+0x4d6>
 8009042:	bf00      	nop
 8009044:	40011000 	.word	0x40011000
 8009048:	40011400 	.word	0x40011400
 800904c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009054:	2200      	movs	r2, #0
 8009056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800905a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800905e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009062:	4642      	mov	r2, r8
 8009064:	464b      	mov	r3, r9
 8009066:	1891      	adds	r1, r2, r2
 8009068:	6239      	str	r1, [r7, #32]
 800906a:	415b      	adcs	r3, r3
 800906c:	627b      	str	r3, [r7, #36]	; 0x24
 800906e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009072:	4641      	mov	r1, r8
 8009074:	1854      	adds	r4, r2, r1
 8009076:	4649      	mov	r1, r9
 8009078:	eb43 0501 	adc.w	r5, r3, r1
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	f04f 0300 	mov.w	r3, #0
 8009084:	00eb      	lsls	r3, r5, #3
 8009086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800908a:	00e2      	lsls	r2, r4, #3
 800908c:	4614      	mov	r4, r2
 800908e:	461d      	mov	r5, r3
 8009090:	4643      	mov	r3, r8
 8009092:	18e3      	adds	r3, r4, r3
 8009094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009098:	464b      	mov	r3, r9
 800909a:	eb45 0303 	adc.w	r3, r5, r3
 800909e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	f04f 0300 	mov.w	r3, #0
 80090ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090be:	4629      	mov	r1, r5
 80090c0:	008b      	lsls	r3, r1, #2
 80090c2:	4621      	mov	r1, r4
 80090c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090c8:	4621      	mov	r1, r4
 80090ca:	008a      	lsls	r2, r1, #2
 80090cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090d0:	f7f7 fc7c 	bl	80009cc <__aeabi_uldivmod>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4b60      	ldr	r3, [pc, #384]	; (800925c <UART_SetConfig+0x4e4>)
 80090da:	fba3 2302 	umull	r2, r3, r3, r2
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	011c      	lsls	r4, r3, #4
 80090e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80090f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80090f4:	4642      	mov	r2, r8
 80090f6:	464b      	mov	r3, r9
 80090f8:	1891      	adds	r1, r2, r2
 80090fa:	61b9      	str	r1, [r7, #24]
 80090fc:	415b      	adcs	r3, r3
 80090fe:	61fb      	str	r3, [r7, #28]
 8009100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009104:	4641      	mov	r1, r8
 8009106:	1851      	adds	r1, r2, r1
 8009108:	6139      	str	r1, [r7, #16]
 800910a:	4649      	mov	r1, r9
 800910c:	414b      	adcs	r3, r1
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	f04f 0200 	mov.w	r2, #0
 8009114:	f04f 0300 	mov.w	r3, #0
 8009118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800911c:	4659      	mov	r1, fp
 800911e:	00cb      	lsls	r3, r1, #3
 8009120:	4651      	mov	r1, sl
 8009122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009126:	4651      	mov	r1, sl
 8009128:	00ca      	lsls	r2, r1, #3
 800912a:	4610      	mov	r0, r2
 800912c:	4619      	mov	r1, r3
 800912e:	4603      	mov	r3, r0
 8009130:	4642      	mov	r2, r8
 8009132:	189b      	adds	r3, r3, r2
 8009134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009138:	464b      	mov	r3, r9
 800913a:	460a      	mov	r2, r1
 800913c:	eb42 0303 	adc.w	r3, r2, r3
 8009140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	67bb      	str	r3, [r7, #120]	; 0x78
 800914e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009150:	f04f 0200 	mov.w	r2, #0
 8009154:	f04f 0300 	mov.w	r3, #0
 8009158:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800915c:	4649      	mov	r1, r9
 800915e:	008b      	lsls	r3, r1, #2
 8009160:	4641      	mov	r1, r8
 8009162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009166:	4641      	mov	r1, r8
 8009168:	008a      	lsls	r2, r1, #2
 800916a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800916e:	f7f7 fc2d 	bl	80009cc <__aeabi_uldivmod>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4b39      	ldr	r3, [pc, #228]	; (800925c <UART_SetConfig+0x4e4>)
 8009178:	fba3 1302 	umull	r1, r3, r3, r2
 800917c:	095b      	lsrs	r3, r3, #5
 800917e:	2164      	movs	r1, #100	; 0x64
 8009180:	fb01 f303 	mul.w	r3, r1, r3
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	011b      	lsls	r3, r3, #4
 8009188:	3332      	adds	r3, #50	; 0x32
 800918a:	4a34      	ldr	r2, [pc, #208]	; (800925c <UART_SetConfig+0x4e4>)
 800918c:	fba2 2303 	umull	r2, r3, r2, r3
 8009190:	095b      	lsrs	r3, r3, #5
 8009192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009196:	441c      	add	r4, r3
 8009198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800919c:	2200      	movs	r2, #0
 800919e:	673b      	str	r3, [r7, #112]	; 0x70
 80091a0:	677a      	str	r2, [r7, #116]	; 0x74
 80091a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80091a6:	4642      	mov	r2, r8
 80091a8:	464b      	mov	r3, r9
 80091aa:	1891      	adds	r1, r2, r2
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	415b      	adcs	r3, r3
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091b6:	4641      	mov	r1, r8
 80091b8:	1851      	adds	r1, r2, r1
 80091ba:	6039      	str	r1, [r7, #0]
 80091bc:	4649      	mov	r1, r9
 80091be:	414b      	adcs	r3, r1
 80091c0:	607b      	str	r3, [r7, #4]
 80091c2:	f04f 0200 	mov.w	r2, #0
 80091c6:	f04f 0300 	mov.w	r3, #0
 80091ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091ce:	4659      	mov	r1, fp
 80091d0:	00cb      	lsls	r3, r1, #3
 80091d2:	4651      	mov	r1, sl
 80091d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091d8:	4651      	mov	r1, sl
 80091da:	00ca      	lsls	r2, r1, #3
 80091dc:	4610      	mov	r0, r2
 80091de:	4619      	mov	r1, r3
 80091e0:	4603      	mov	r3, r0
 80091e2:	4642      	mov	r2, r8
 80091e4:	189b      	adds	r3, r3, r2
 80091e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80091e8:	464b      	mov	r3, r9
 80091ea:	460a      	mov	r2, r1
 80091ec:	eb42 0303 	adc.w	r3, r2, r3
 80091f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	663b      	str	r3, [r7, #96]	; 0x60
 80091fc:	667a      	str	r2, [r7, #100]	; 0x64
 80091fe:	f04f 0200 	mov.w	r2, #0
 8009202:	f04f 0300 	mov.w	r3, #0
 8009206:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800920a:	4649      	mov	r1, r9
 800920c:	008b      	lsls	r3, r1, #2
 800920e:	4641      	mov	r1, r8
 8009210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009214:	4641      	mov	r1, r8
 8009216:	008a      	lsls	r2, r1, #2
 8009218:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800921c:	f7f7 fbd6 	bl	80009cc <__aeabi_uldivmod>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4b0d      	ldr	r3, [pc, #52]	; (800925c <UART_SetConfig+0x4e4>)
 8009226:	fba3 1302 	umull	r1, r3, r3, r2
 800922a:	095b      	lsrs	r3, r3, #5
 800922c:	2164      	movs	r1, #100	; 0x64
 800922e:	fb01 f303 	mul.w	r3, r1, r3
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	011b      	lsls	r3, r3, #4
 8009236:	3332      	adds	r3, #50	; 0x32
 8009238:	4a08      	ldr	r2, [pc, #32]	; (800925c <UART_SetConfig+0x4e4>)
 800923a:	fba2 2303 	umull	r2, r3, r2, r3
 800923e:	095b      	lsrs	r3, r3, #5
 8009240:	f003 020f 	and.w	r2, r3, #15
 8009244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4422      	add	r2, r4
 800924c:	609a      	str	r2, [r3, #8]
}
 800924e:	bf00      	nop
 8009250:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009254:	46bd      	mov	sp, r7
 8009256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800925a:	bf00      	nop
 800925c:	51eb851f 	.word	0x51eb851f

08009260 <HAL_ADC_ConvCpltCallback>:
* Function: HAL_ADC_ConvCpltCallback										   	   *
* Description: Conversion callback to process conversion complete in the 		   *
* 			   peripheral.														   *
************************************************************************************/
VOID HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	if(Rte_P_Os_OsPort_Os_Counter % 200 == 0)
 8009268:	4b09      	ldr	r3, [pc, #36]	; (8009290 <HAL_ADC_ConvCpltCallback+0x30>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	4b09      	ldr	r3, [pc, #36]	; (8009294 <HAL_ADC_ConvCpltCallback+0x34>)
 800926e:	fba3 1302 	umull	r1, r3, r3, r2
 8009272:	099b      	lsrs	r3, r3, #6
 8009274:	21c8      	movs	r1, #200	; 0xc8
 8009276:	fb01 f303 	mul.w	r3, r1, r3
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <HAL_ADC_ConvCpltCallback+0x26>
	{
		Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(Adc_ChannelOne_Buffer);
 8009280:	4805      	ldr	r0, [pc, #20]	; (8009298 <HAL_ADC_ConvCpltCallback+0x38>)
 8009282:	f003 feef 	bl	800d064 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>
	}
	else
	{
		/* do nothing */
	}
}
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	200001f8 	.word	0x200001f8
 8009294:	51eb851f 	.word	0x51eb851f
 8009298:	200006a8 	.word	0x200006a8

0800929c <HAL_ADC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_ADC_ErrorCallback										   		   *
* Description: Error callback to process fault in the peripheral.		 		   *
************************************************************************************/
VOID HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
	/* Local variable to store error status. */
	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 80092a4:	481b      	ldr	r0, [pc, #108]	; (8009314 <HAL_ADC_ErrorCallback+0x78>)
 80092a6:	f7fb fa55 	bl	8004754 <HAL_ADC_GetError>
 80092aa:	60f8      	str	r0, [r7, #12]
	/* Process error status.
	 * Perform re-initialization on each error to prevent faults in the peripheral. */
	switch(receivedStatus)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d82a      	bhi.n	8009308 <HAL_ADC_ErrorCallback+0x6c>
 80092b2:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <HAL_ADC_ErrorCallback+0x1c>)
 80092b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b8:	08009309 	.word	0x08009309
 80092bc:	080092cd 	.word	0x080092cd
 80092c0:	080092e1 	.word	0x080092e1
 80092c4:	08009309 	.word	0x08009309
 80092c8:	080092f5 	.word	0x080092f5
	{
		case HAL_ADC_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_ADC_ERROR_INTERNAL:
			SystemManager_Fault[ADC_ERROR_INTERNAL]++;
 80092cc:	4b12      	ldr	r3, [pc, #72]	; (8009318 <HAL_ADC_ErrorCallback+0x7c>)
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	3301      	adds	r3, #1
 80092d2:	4a11      	ldr	r2, [pc, #68]	; (8009318 <HAL_ADC_ErrorCallback+0x7c>)
 80092d4:	6393      	str	r3, [r2, #56]	; 0x38
			Adc_DeInit();
 80092d6:	f000 f897 	bl	8009408 <Adc_DeInit>
			Adc_Init();
 80092da:	f000 f89f 	bl	800941c <Adc_Init>
			break;
 80092de:	e014      	b.n	800930a <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_OVR:
			SystemManager_Fault[ADC_ERROR_OVR]++;
 80092e0:	4b0d      	ldr	r3, [pc, #52]	; (8009318 <HAL_ADC_ErrorCallback+0x7c>)
 80092e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e4:	3301      	adds	r3, #1
 80092e6:	4a0c      	ldr	r2, [pc, #48]	; (8009318 <HAL_ADC_ErrorCallback+0x7c>)
 80092e8:	63d3      	str	r3, [r2, #60]	; 0x3c
			Adc_DeInit();
 80092ea:	f000 f88d 	bl	8009408 <Adc_DeInit>
			Adc_Init();
 80092ee:	f000 f895 	bl	800941c <Adc_Init>
			break;
 80092f2:	e00a      	b.n	800930a <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_DMA:
			SystemManager_Fault[ADC_ERROR_DMA]++;
 80092f4:	4b08      	ldr	r3, [pc, #32]	; (8009318 <HAL_ADC_ErrorCallback+0x7c>)
 80092f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f8:	3301      	adds	r3, #1
 80092fa:	4a07      	ldr	r2, [pc, #28]	; (8009318 <HAL_ADC_ErrorCallback+0x7c>)
 80092fc:	6413      	str	r3, [r2, #64]	; 0x40
			Adc_DeInit();
 80092fe:	f000 f883 	bl	8009408 <Adc_DeInit>
			Adc_Init();
 8009302:	f000 f88b 	bl	800941c <Adc_Init>
			break;
 8009306:	e000      	b.n	800930a <HAL_ADC_ErrorCallback+0x6e>
		default:
			break;
 8009308:	bf00      	nop
	}
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	2000012c 	.word	0x2000012c
 8009318:	200089a8 	.word	0x200089a8

0800931c <Adc_MainFunction>:
/***********************************************************************************
* Function: Adc_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Adc_MainFunction()
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
	/* Local variable to store the error status. */
	uint32 statusValue = STD_LOW;
 8009322:	2300      	movs	r3, #0
 8009324:	607b      	str	r3, [r7, #4]
	/* Get error status. */
	statusValue = HAL_ADC_GetState(&hadc1);
 8009326:	4836      	ldr	r0, [pc, #216]	; (8009400 <Adc_MainFunction+0xe4>)
 8009328:	f7fb fa08 	bl	800473c <HAL_ADC_GetState>
 800932c:	6078      	str	r0, [r7, #4]

	/* Process module states. */
	switch(statusValue)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009334:	d049      	beq.n	80093ca <Adc_MainFunction+0xae>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800933c:	d85a      	bhi.n	80093f4 <Adc_MainFunction+0xd8>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b10      	cmp	r3, #16
 8009342:	d827      	bhi.n	8009394 <Adc_MainFunction+0x78>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b10      	cmp	r3, #16
 8009348:	d854      	bhi.n	80093f4 <Adc_MainFunction+0xd8>
 800934a:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <Adc_MainFunction+0x34>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	0800939f 	.word	0x0800939f
 8009354:	080093ad 	.word	0x080093ad
 8009358:	080093b7 	.word	0x080093b7
 800935c:	080093f5 	.word	0x080093f5
 8009360:	080093d5 	.word	0x080093d5
 8009364:	080093f5 	.word	0x080093f5
 8009368:	080093f5 	.word	0x080093f5
 800936c:	080093f5 	.word	0x080093f5
 8009370:	080093f5 	.word	0x080093f5
 8009374:	080093f5 	.word	0x080093f5
 8009378:	080093f5 	.word	0x080093f5
 800937c:	080093f5 	.word	0x080093f5
 8009380:	080093f5 	.word	0x080093f5
 8009384:	080093f5 	.word	0x080093f5
 8009388:	080093f5 	.word	0x080093f5
 800938c:	080093f5 	.word	0x080093f5
 8009390:	080093e5 	.word	0x080093e5
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800939a:	d011      	beq.n	80093c0 <Adc_MainFunction+0xa4>
		case HAL_ADC_STATE_ERROR:
			Adc_BswState = statusValue;
			HAL_ADC_ErrorCallback(&hadc1);
			break;
		default:
			break;
 800939c:	e02a      	b.n	80093f4 <Adc_MainFunction+0xd8>
			Adc_BswState = statusValue;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	4b18      	ldr	r3, [pc, #96]	; (8009404 <Adc_MainFunction+0xe8>)
 80093a4:	701a      	strb	r2, [r3, #0]
			Adc_Init();
 80093a6:	f000 f839 	bl	800941c <Adc_Init>
			break;
 80093aa:	e024      	b.n	80093f6 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	4b14      	ldr	r3, [pc, #80]	; (8009404 <Adc_MainFunction+0xe8>)
 80093b2:	701a      	strb	r2, [r3, #0]
			break;
 80093b4:	e01f      	b.n	80093f6 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	4b12      	ldr	r3, [pc, #72]	; (8009404 <Adc_MainFunction+0xe8>)
 80093bc:	701a      	strb	r2, [r3, #0]
			break;
 80093be:	e01a      	b.n	80093f6 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <Adc_MainFunction+0xe8>)
 80093c6:	701a      	strb	r2, [r3, #0]
			break;
 80093c8:	e015      	b.n	80093f6 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	4b0d      	ldr	r3, [pc, #52]	; (8009404 <Adc_MainFunction+0xe8>)
 80093d0:	701a      	strb	r2, [r3, #0]
			break;
 80093d2:	e010      	b.n	80093f6 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <Adc_MainFunction+0xe8>)
 80093da:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 80093dc:	4808      	ldr	r0, [pc, #32]	; (8009400 <Adc_MainFunction+0xe4>)
 80093de:	f7ff ff5d 	bl	800929c <HAL_ADC_ErrorCallback>
			break;
 80093e2:	e008      	b.n	80093f6 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	4b06      	ldr	r3, [pc, #24]	; (8009404 <Adc_MainFunction+0xe8>)
 80093ea:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 80093ec:	4804      	ldr	r0, [pc, #16]	; (8009400 <Adc_MainFunction+0xe4>)
 80093ee:	f7ff ff55 	bl	800929c <HAL_ADC_ErrorCallback>
			break;
 80093f2:	e000      	b.n	80093f6 <Adc_MainFunction+0xda>
			break;
 80093f4:	bf00      	nop
	}
}
 80093f6:	bf00      	nop
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	2000012c 	.word	0x2000012c
 8009404:	200006a4 	.word	0x200006a4

08009408 <Adc_DeInit>:
/***********************************************************************************
* Function: Adc_DeInit										   					   *
* Description: De-initialize the peripheral.									   *
************************************************************************************/
StdReturnType Adc_DeInit()
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
	/* Call for de-intialization function. */
	HAL_ADC_DeInit(&hadc1);
 800940c:	4802      	ldr	r0, [pc, #8]	; (8009418 <Adc_DeInit+0x10>)
 800940e:	f7fa fdaf 	bl	8003f70 <HAL_ADC_DeInit>
	return E_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	bd80      	pop	{r7, pc}
 8009418:	2000012c 	.word	0x2000012c

0800941c <Adc_Init>:
/***********************************************************************************
* Function: Adc_Init										   					   *
* Description: Initialize the protocol.									       	   *
************************************************************************************/
StdReturnType Adc_Init()
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08a      	sub	sp, #40	; 0x28
 8009420:	af00      	add	r7, sp, #0
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8009422:	f107 0310 	add.w	r3, r7, #16
 8009426:	2200      	movs	r2, #0
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	605a      	str	r2, [r3, #4]
 800942c:	609a      	str	r2, [r3, #8]
 800942e:	60da      	str	r2, [r3, #12]
 8009430:	611a      	str	r2, [r3, #16]
 8009432:	615a      	str	r2, [r3, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 8009434:	463b      	mov	r3, r7
 8009436:	2200      	movs	r2, #0
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	605a      	str	r2, [r3, #4]
 800943c:	609a      	str	r2, [r3, #8]
 800943e:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADC1;
 8009440:	4b40      	ldr	r3, [pc, #256]	; (8009544 <Adc_Init+0x128>)
 8009442:	4a41      	ldr	r2, [pc, #260]	; (8009548 <Adc_Init+0x12c>)
 8009444:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8009446:	4b3f      	ldr	r3, [pc, #252]	; (8009544 <Adc_Init+0x128>)
 8009448:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800944c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800944e:	4b3d      	ldr	r3, [pc, #244]	; (8009544 <Adc_Init+0x128>)
 8009450:	2200      	movs	r2, #0
 8009452:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8009454:	4b3b      	ldr	r3, [pc, #236]	; (8009544 <Adc_Init+0x128>)
 8009456:	2201      	movs	r2, #1
 8009458:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800945a:	4b3a      	ldr	r3, [pc, #232]	; (8009544 <Adc_Init+0x128>)
 800945c:	2201      	movs	r2, #1
 800945e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009460:	4b38      	ldr	r3, [pc, #224]	; (8009544 <Adc_Init+0x128>)
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009468:	4b36      	ldr	r3, [pc, #216]	; (8009544 <Adc_Init+0x128>)
 800946a:	2200      	movs	r2, #0
 800946c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800946e:	4b35      	ldr	r3, [pc, #212]	; (8009544 <Adc_Init+0x128>)
 8009470:	4a36      	ldr	r2, [pc, #216]	; (800954c <Adc_Init+0x130>)
 8009472:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009474:	4b33      	ldr	r3, [pc, #204]	; (8009544 <Adc_Init+0x128>)
 8009476:	2200      	movs	r2, #0
 8009478:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 800947a:	4b32      	ldr	r3, [pc, #200]	; (8009544 <Adc_Init+0x128>)
 800947c:	2203      	movs	r2, #3
 800947e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8009480:	4b30      	ldr	r3, [pc, #192]	; (8009544 <Adc_Init+0x128>)
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009488:	4b2e      	ldr	r3, [pc, #184]	; (8009544 <Adc_Init+0x128>)
 800948a:	2201      	movs	r2, #1
 800948c:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800948e:	482d      	ldr	r0, [pc, #180]	; (8009544 <Adc_Init+0x128>)
 8009490:	f7fa fd08 	bl	8003ea4 <HAL_ADC_Init>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <Adc_Init+0x84>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800949a:	482a      	ldr	r0, [pc, #168]	; (8009544 <Adc_Init+0x128>)
 800949c:	f7ff fefe 	bl	800929c <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80094a0:	4b2b      	ldr	r3, [pc, #172]	; (8009550 <Adc_Init+0x134>)
 80094a2:	613b      	str	r3, [r7, #16]
	AnalogWDGConfig.HighThreshold = 4095;
 80094a4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80094a8:	617b      	str	r3, [r7, #20]
	AnalogWDGConfig.LowThreshold = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	61bb      	str	r3, [r7, #24]
	AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80094ae:	4b29      	ldr	r3, [pc, #164]	; (8009554 <Adc_Init+0x138>)
 80094b0:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.ITMode = ENABLE;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 3020 	strb.w	r3, [r7, #32]
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80094b8:	f107 0310 	add.w	r3, r7, #16
 80094bc:	4619      	mov	r1, r3
 80094be:	4821      	ldr	r0, [pc, #132]	; (8009544 <Adc_Init+0x128>)
 80094c0:	f7fb f8dc 	bl	800467c <HAL_ADC_AnalogWDGConfig>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <Adc_Init+0xb4>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80094ca:	481e      	ldr	r0, [pc, #120]	; (8009544 <Adc_Init+0x128>)
 80094cc:	f7ff fee6 	bl	800929c <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_13;
 80094d0:	230d      	movs	r3, #13
 80094d2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80094d4:	2301      	movs	r3, #1
 80094d6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80094d8:	2307      	movs	r3, #7
 80094da:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80094dc:	463b      	mov	r3, r7
 80094de:	4619      	mov	r1, r3
 80094e0:	4818      	ldr	r0, [pc, #96]	; (8009544 <Adc_Init+0x128>)
 80094e2:	f7fa ff99 	bl	8004418 <HAL_ADC_ConfigChannel>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d002      	beq.n	80094f2 <Adc_Init+0xd6>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80094ec:	4815      	ldr	r0, [pc, #84]	; (8009544 <Adc_Init+0x128>)
 80094ee:	f7ff fed5 	bl	800929c <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_12;
 80094f2:	230c      	movs	r3, #12
 80094f4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80094f6:	2302      	movs	r3, #2
 80094f8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80094fa:	463b      	mov	r3, r7
 80094fc:	4619      	mov	r1, r3
 80094fe:	4811      	ldr	r0, [pc, #68]	; (8009544 <Adc_Init+0x128>)
 8009500:	f7fa ff8a 	bl	8004418 <HAL_ADC_ConfigChannel>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d002      	beq.n	8009510 <Adc_Init+0xf4>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800950a:	480e      	ldr	r0, [pc, #56]	; (8009544 <Adc_Init+0x128>)
 800950c:	f7ff fec6 	bl	800929c <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8009510:	4b10      	ldr	r3, [pc, #64]	; (8009554 <Adc_Init+0x138>)
 8009512:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8009514:	2303      	movs	r3, #3
 8009516:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009518:	463b      	mov	r3, r7
 800951a:	4619      	mov	r1, r3
 800951c:	4809      	ldr	r0, [pc, #36]	; (8009544 <Adc_Init+0x128>)
 800951e:	f7fa ff7b 	bl	8004418 <HAL_ADC_ConfigChannel>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <Adc_Init+0x112>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8009528:	4806      	ldr	r0, [pc, #24]	; (8009544 <Adc_Init+0x128>)
 800952a:	f7ff feb7 	bl	800929c <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 800952e:	2203      	movs	r2, #3
 8009530:	4909      	ldr	r1, [pc, #36]	; (8009558 <Adc_Init+0x13c>)
 8009532:	4804      	ldr	r0, [pc, #16]	; (8009544 <Adc_Init+0x128>)
 8009534:	f7fa fe6c 	bl	8004210 <HAL_ADC_Start_DMA>
	return E_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3728      	adds	r7, #40	; 0x28
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	2000012c 	.word	0x2000012c
 8009548:	40012000 	.word	0x40012000
 800954c:	0f000001 	.word	0x0f000001
 8009550:	00800200 	.word	0x00800200
 8009554:	10000012 	.word	0x10000012
 8009558:	200006a8 	.word	0x200006a8

0800955c <Port_Init>:
/***********************************************************************************
* Function: Port_Init										       				   *
* Description: Initialize the peripheral.									 	   *
************************************************************************************/
StdReturnType Port_Init()
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8009560:	f7f9 fd00 	bl	8002f64 <MX_GPIO_Init>
	return E_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	bd80      	pop	{r7, pc}
 800956a:	0000      	movs	r0, r0
 800956c:	0000      	movs	r0, r0
	...

08009570 <HAL_TIM_IC_CaptureCallback>:
/***********************************************************************************
* Function: HAL_TIM_IC_CaptureCallback										   	   *
* Description: Input capture callback to process information received.		 	   *
************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
	/* If channel 3 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7f1b      	ldrb	r3, [r3, #28]
 800957c:	2b01      	cmp	r3, #1
 800957e:	f040 8081 	bne.w	8009684 <HAL_TIM_IC_CaptureCallback+0x114>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelThree == STD_LOW)
 8009582:	4b87      	ldr	r3, [pc, #540]	; (80097a0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d11a      	bne.n	80095c0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800958a:	2100      	movs	r1, #0
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7fe f86b 	bl	8007668 <HAL_TIM_ReadCapturedValue>
 8009592:	4603      	mov	r3, r0
 8009594:	4a83      	ldr	r2, [pc, #524]	; (80097a4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8009596:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelThree = STD_HIGH;
 8009598:	4b81      	ldr	r3, [pc, #516]	; (80097a0 <HAL_TIM_IC_CaptureCallback+0x230>)
 800959a:	2201      	movs	r2, #1
 800959c:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6a1a      	ldr	r2, [r3, #32]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 020a 	bic.w	r2, r2, #10
 80095ac:	621a      	str	r2, [r3, #32]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6a1a      	ldr	r2, [r3, #32]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f042 0202 	orr.w	r2, r2, #2
 80095bc:	621a      	str	r2, [r3, #32]
 80095be:	e061      	b.n	8009684 <HAL_TIM_IC_CaptureCallback+0x114>
		}/* If the first input capture has been stored. */
		else if(Tim5_InputCaptureFlag_ChannelThree == STD_HIGH)
 80095c0:	4b77      	ldr	r3, [pc, #476]	; (80097a0 <HAL_TIM_IC_CaptureCallback+0x230>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d15d      	bne.n	8009684 <HAL_TIM_IC_CaptureCallback+0x114>
		{
			/* Store the second input capture. */
			Tim5_InputCompare_ValueTwo_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80095c8:	2100      	movs	r1, #0
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7fe f84c 	bl	8007668 <HAL_TIM_ReadCapturedValue>
 80095d0:	4603      	mov	r3, r0
 80095d2:	4a75      	ldr	r2, [pc, #468]	; (80097a8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80095d4:	6013      	str	r3, [r2, #0]
			/* Set the timer counter to 0. */
			__HAL_TIM_SET_COUNTER(htim, 0);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2200      	movs	r2, #0
 80095dc:	625a      	str	r2, [r3, #36]	; 0x24
			/* If the second input capture is greater than the first, then subtract the first one from the second one. */
			if (Tim5_InputCompare_ValueTwo_ChannelThree > Tim5_InputCompare_ValueOne_ChannelThree)
 80095de:	4b72      	ldr	r3, [pc, #456]	; (80097a8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	4b70      	ldr	r3, [pc, #448]	; (80097a4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d907      	bls.n	80095fa <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Tim5_Difference_ChannelThree = Tim5_InputCompare_ValueTwo_ChannelThree - Tim5_InputCompare_ValueOne_ChannelThree;
 80095ea:	4b6f      	ldr	r3, [pc, #444]	; (80097a8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	4b6d      	ldr	r3, [pc, #436]	; (80097a4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	4a6d      	ldr	r2, [pc, #436]	; (80097ac <HAL_TIM_IC_CaptureCallback+0x23c>)
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	e00d      	b.n	8009616 <HAL_TIM_IC_CaptureCallback+0xa6>
			}/* Else subtract the first value from maximum uint32 value and add the second value. */
			else if(Tim5_InputCompare_ValueOne_ChannelThree > Tim5_InputCompare_ValueTwo_ChannelThree)
 80095fa:	4b6a      	ldr	r3, [pc, #424]	; (80097a4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4b6a      	ldr	r3, [pc, #424]	; (80097a8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d907      	bls.n	8009616 <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Tim5_Difference_ChannelThree = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelThree) + Tim5_InputCompare_ValueTwo_ChannelThree;
 8009606:	4b68      	ldr	r3, [pc, #416]	; (80097a8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b66      	ldr	r3, [pc, #408]	; (80097a4 <HAL_TIM_IC_CaptureCallback+0x234>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	3b01      	subs	r3, #1
 8009612:	4a66      	ldr	r2, [pc, #408]	; (80097ac <HAL_TIM_IC_CaptureCallback+0x23c>)
 8009614:	6013      	str	r3, [r2, #0]
			else
			{
				/* do nothing */
			}
			/* Calculate the distance the sound traveled between the first measurement and the second. */
			Tim5_CalculatedDistance_ChannelThree = Tim5_Difference_ChannelThree * 0.034 / 2;
 8009616:	4b65      	ldr	r3, [pc, #404]	; (80097ac <HAL_TIM_IC_CaptureCallback+0x23c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f7f6 ff2a 	bl	8000474 <__aeabi_ui2d>
 8009620:	a35d      	add	r3, pc, #372	; (adr r3, 8009798 <HAL_TIM_IC_CaptureCallback+0x228>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f6 ff9f 	bl	8000568 <__aeabi_dmul>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4610      	mov	r0, r2
 8009630:	4619      	mov	r1, r3
 8009632:	f04f 0200 	mov.w	r2, #0
 8009636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800963a:	f7f7 f8bf 	bl	80007bc <__aeabi_ddiv>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4610      	mov	r0, r2
 8009644:	4619      	mov	r1, r3
 8009646:	f7f7 f9a1 	bl	800098c <__aeabi_d2uiz>
 800964a:	4603      	mov	r3, r0
 800964c:	b2da      	uxtb	r2, r3
 800964e:	4b58      	ldr	r3, [pc, #352]	; (80097b0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8009650:	701a      	strb	r2, [r3, #0]
			/* Set the flag to low. */
			Tim5_InputCaptureFlag_ChannelThree = STD_LOW;
 8009652:	4b53      	ldr	r3, [pc, #332]	; (80097a0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6a1a      	ldr	r2, [r3, #32]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 020a 	bic.w	r2, r2, #10
 8009666:	621a      	str	r2, [r3, #32]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6a12      	ldr	r2, [r2, #32]
 8009672:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt for the timer 5 channel 3. */
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 8009674:	4b4f      	ldr	r3, [pc, #316]	; (80097b4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	4b4e      	ldr	r3, [pc, #312]	; (80097b4 <HAL_TIM_IC_CaptureCallback+0x244>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 0202 	bic.w	r2, r2, #2
 8009682:	60da      	str	r2, [r3, #12]
		{
			/* do nothing */
		}
	}
	/* If channel 4 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7f1b      	ldrb	r3, [r3, #28]
 8009688:	2b02      	cmp	r3, #2
 800968a:	f040 8081 	bne.w	8009790 <HAL_TIM_IC_CaptureCallback+0x220>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelFour == STD_LOW)
 800968e:	4b4a      	ldr	r3, [pc, #296]	; (80097b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d11a      	bne.n	80096cc <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8009696:	2104      	movs	r1, #4
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7fd ffe5 	bl	8007668 <HAL_TIM_ReadCapturedValue>
 800969e:	4603      	mov	r3, r0
 80096a0:	4a46      	ldr	r2, [pc, #280]	; (80097bc <HAL_TIM_IC_CaptureCallback+0x24c>)
 80096a2:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelFour = STD_HIGH;
 80096a4:	4b44      	ldr	r3, [pc, #272]	; (80097b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80096a6:	2201      	movs	r2, #1
 80096a8:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	6a1a      	ldr	r2, [r3, #32]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80096b8:	621a      	str	r2, [r3, #32]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6a1a      	ldr	r2, [r3, #32]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f042 0220 	orr.w	r2, r2, #32
 80096c8:	621a      	str	r2, [r3, #32]
	}
	else
	{
		/* do nothing */
	}
}
 80096ca:	e061      	b.n	8009790 <HAL_TIM_IC_CaptureCallback+0x220>
		else if(Tim5_InputCaptureFlag_ChannelFour == STD_HIGH)
 80096cc:	4b3a      	ldr	r3, [pc, #232]	; (80097b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d15d      	bne.n	8009790 <HAL_TIM_IC_CaptureCallback+0x220>
			Tim5_InputCompare_ValueTwo_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80096d4:	2104      	movs	r1, #4
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7fd ffc6 	bl	8007668 <HAL_TIM_ReadCapturedValue>
 80096dc:	4603      	mov	r3, r0
 80096de:	4a38      	ldr	r2, [pc, #224]	; (80097c0 <HAL_TIM_IC_CaptureCallback+0x250>)
 80096e0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2200      	movs	r2, #0
 80096e8:	625a      	str	r2, [r3, #36]	; 0x24
			if (Tim5_InputCompare_ValueTwo_ChannelFour > Tim5_InputCompare_ValueOne_ChannelFour)
 80096ea:	4b35      	ldr	r3, [pc, #212]	; (80097c0 <HAL_TIM_IC_CaptureCallback+0x250>)
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	4b33      	ldr	r3, [pc, #204]	; (80097bc <HAL_TIM_IC_CaptureCallback+0x24c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d907      	bls.n	8009706 <HAL_TIM_IC_CaptureCallback+0x196>
				Tim5_Difference_ChannelFour = Tim5_InputCompare_ValueTwo_ChannelFour - Tim5_InputCompare_ValueOne_ChannelFour;
 80096f6:	4b32      	ldr	r3, [pc, #200]	; (80097c0 <HAL_TIM_IC_CaptureCallback+0x250>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	4b30      	ldr	r3, [pc, #192]	; (80097bc <HAL_TIM_IC_CaptureCallback+0x24c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	4a30      	ldr	r2, [pc, #192]	; (80097c4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	e00d      	b.n	8009722 <HAL_TIM_IC_CaptureCallback+0x1b2>
			else if(Tim5_InputCompare_ValueOne_ChannelFour > Tim5_InputCompare_ValueTwo_ChannelFour)
 8009706:	4b2d      	ldr	r3, [pc, #180]	; (80097bc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	4b2d      	ldr	r3, [pc, #180]	; (80097c0 <HAL_TIM_IC_CaptureCallback+0x250>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	429a      	cmp	r2, r3
 8009710:	d907      	bls.n	8009722 <HAL_TIM_IC_CaptureCallback+0x1b2>
				Tim5_Difference_ChannelFour = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelFour) + Tim5_InputCompare_ValueTwo_ChannelFour;
 8009712:	4b2b      	ldr	r3, [pc, #172]	; (80097c0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	4b29      	ldr	r3, [pc, #164]	; (80097bc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	3b01      	subs	r3, #1
 800971e:	4a29      	ldr	r2, [pc, #164]	; (80097c4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8009720:	6013      	str	r3, [r2, #0]
			Tim5_CalculatedDistance_ChannelFour = Tim5_Difference_ChannelFour * 0.034 / 2;
 8009722:	4b28      	ldr	r3, [pc, #160]	; (80097c4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4618      	mov	r0, r3
 8009728:	f7f6 fea4 	bl	8000474 <__aeabi_ui2d>
 800972c:	a31a      	add	r3, pc, #104	; (adr r3, 8009798 <HAL_TIM_IC_CaptureCallback+0x228>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	f7f6 ff19 	bl	8000568 <__aeabi_dmul>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	4610      	mov	r0, r2
 800973c:	4619      	mov	r1, r3
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009746:	f7f7 f839 	bl	80007bc <__aeabi_ddiv>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4610      	mov	r0, r2
 8009750:	4619      	mov	r1, r3
 8009752:	f7f7 f91b 	bl	800098c <__aeabi_d2uiz>
 8009756:	4603      	mov	r3, r0
 8009758:	b2da      	uxtb	r2, r3
 800975a:	4b1b      	ldr	r3, [pc, #108]	; (80097c8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800975c:	701a      	strb	r2, [r3, #0]
			Tim5_InputCaptureFlag_ChannelFour = 0;
 800975e:	4b16      	ldr	r3, [pc, #88]	; (80097b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8009760:	2200      	movs	r2, #0
 8009762:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6a1a      	ldr	r2, [r3, #32]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009772:	621a      	str	r2, [r3, #32]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6a12      	ldr	r2, [r2, #32]
 800977e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 8009780:	4b0c      	ldr	r3, [pc, #48]	; (80097b4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68da      	ldr	r2, [r3, #12]
 8009786:	4b0b      	ldr	r3, [pc, #44]	; (80097b4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 0204 	bic.w	r2, r2, #4
 800978e:	60da      	str	r2, [r3, #12]
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	b020c49c 	.word	0xb020c49c
 800979c:	3fa16872 	.word	0x3fa16872
 80097a0:	200006c4 	.word	0x200006c4
 80097a4:	200006b8 	.word	0x200006b8
 80097a8:	200006bc 	.word	0x200006bc
 80097ac:	200006c0 	.word	0x200006c0
 80097b0:	200006c5 	.word	0x200006c5
 80097b4:	20000564 	.word	0x20000564
 80097b8:	200006d4 	.word	0x200006d4
 80097bc:	200006c8 	.word	0x200006c8
 80097c0:	200006cc 	.word	0x200006cc
 80097c4:	200006d0 	.word	0x200006d0
 80097c8:	200006d5 	.word	0x200006d5

080097cc <Tim_Init>:
/***********************************************************************************
* Function: Tim_Init										   			           *
* Description: Peripheral initialization.									       *
************************************************************************************/
StdReturnType Tim_Init(uint8 TimerChannel)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	71fb      	strb	r3, [r7, #7]
	/* Set the timer channel value into a local variable. */
	uint8 localValue = TimerChannel;
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	73fb      	strb	r3, [r7, #15]
	switch(localValue)
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	3b02      	subs	r3, #2
 80097de:	2b03      	cmp	r3, #3
 80097e0:	f200 81f4 	bhi.w	8009bcc <Tim_Init+0x400>
 80097e4:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <Tim_Init+0x20>)
 80097e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ea:	bf00      	nop
 80097ec:	080097fd 	.word	0x080097fd
 80097f0:	080098e9 	.word	0x080098e9
 80097f4:	08009a0d 	.word	0x08009a0d
 80097f8:	08009ae3 	.word	0x08009ae3
	{
		/* Initialize the timer two. */
		case TIMER_TWO:
			/* Configure the timer parameters. */
			htim2.Instance = TIM2;
 80097fc:	4b7a      	ldr	r3, [pc, #488]	; (80099e8 <Tim_Init+0x21c>)
 80097fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009802:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 1000-1;
 8009804:	4b78      	ldr	r3, [pc, #480]	; (80099e8 <Tim_Init+0x21c>)
 8009806:	f240 32e7 	movw	r2, #999	; 0x3e7
 800980a:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800980c:	4b76      	ldr	r3, [pc, #472]	; (80099e8 <Tim_Init+0x21c>)
 800980e:	2200      	movs	r2, #0
 8009810:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 2000-1;
 8009812:	4b75      	ldr	r3, [pc, #468]	; (80099e8 <Tim_Init+0x21c>)
 8009814:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009818:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800981a:	4b73      	ldr	r3, [pc, #460]	; (80099e8 <Tim_Init+0x21c>)
 800981c:	2200      	movs	r2, #0
 800981e:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009820:	4b71      	ldr	r3, [pc, #452]	; (80099e8 <Tim_Init+0x21c>)
 8009822:	2200      	movs	r2, #0
 8009824:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009826:	4870      	ldr	r0, [pc, #448]	; (80099e8 <Tim_Init+0x21c>)
 8009828:	f7fc ff7c 	bl	8006724 <HAL_TIM_Base_Init>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <Tim_Init+0x6c>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009832:	486d      	ldr	r0, [pc, #436]	; (80099e8 <Tim_Init+0x21c>)
 8009834:	f000 fa1c 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the timer clock source. */
			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009838:	4b6c      	ldr	r3, [pc, #432]	; (80099ec <Tim_Init+0x220>)
 800983a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800983e:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 8009840:	496a      	ldr	r1, [pc, #424]	; (80099ec <Tim_Init+0x220>)
 8009842:	4869      	ldr	r0, [pc, #420]	; (80099e8 <Tim_Init+0x21c>)
 8009844:	f7fd fe48 	bl	80074d8 <HAL_TIM_ConfigClockSource>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <Tim_Init+0x88>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800984e:	4866      	ldr	r0, [pc, #408]	; (80099e8 <Tim_Init+0x21c>)
 8009850:	f000 fa0e 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009854:	4864      	ldr	r0, [pc, #400]	; (80099e8 <Tim_Init+0x21c>)
 8009856:	f7fd f823 	bl	80068a0 <HAL_TIM_PWM_Init>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <Tim_Init+0x9a>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009860:	4861      	ldr	r0, [pc, #388]	; (80099e8 <Tim_Init+0x21c>)
 8009862:	f000 fa05 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the master slave mode and output trigger. */
			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 8009866:	4b62      	ldr	r3, [pc, #392]	; (80099f0 <Tim_Init+0x224>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800986c:	4b60      	ldr	r3, [pc, #384]	; (80099f0 <Tim_Init+0x224>)
 800986e:	2200      	movs	r2, #0
 8009870:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 8009872:	495f      	ldr	r1, [pc, #380]	; (80099f0 <Tim_Init+0x224>)
 8009874:	485c      	ldr	r0, [pc, #368]	; (80099e8 <Tim_Init+0x21c>)
 8009876:	f7fe fbd1 	bl	800801c <HAL_TIMEx_MasterConfigSynchronization>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <Tim_Init+0xba>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009880:	4859      	ldr	r0, [pc, #356]	; (80099e8 <Tim_Init+0x21c>)
 8009882:	f000 f9f5 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the PWM parameters. */
			sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8009886:	4b5b      	ldr	r3, [pc, #364]	; (80099f4 <Tim_Init+0x228>)
 8009888:	2260      	movs	r2, #96	; 0x60
 800988a:	601a      	str	r2, [r3, #0]
			sConfigOC2.Pulse = 0;
 800988c:	4b59      	ldr	r3, [pc, #356]	; (80099f4 <Tim_Init+0x228>)
 800988e:	2200      	movs	r2, #0
 8009890:	605a      	str	r2, [r3, #4]
			sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009892:	4b58      	ldr	r3, [pc, #352]	; (80099f4 <Tim_Init+0x228>)
 8009894:	2200      	movs	r2, #0
 8009896:	609a      	str	r2, [r3, #8]
			sConfigOC2.OCFastMode = TIM_OCFAST_ENABLE;
 8009898:	4b56      	ldr	r3, [pc, #344]	; (80099f4 <Tim_Init+0x228>)
 800989a:	2204      	movs	r2, #4
 800989c:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_1) != HAL_OK)
 800989e:	2200      	movs	r2, #0
 80098a0:	4954      	ldr	r1, [pc, #336]	; (80099f4 <Tim_Init+0x228>)
 80098a2:	4851      	ldr	r0, [pc, #324]	; (80099e8 <Tim_Init+0x21c>)
 80098a4:	f7fd fd56 	bl	8007354 <HAL_TIM_PWM_ConfigChannel>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <Tim_Init+0xe8>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80098ae:	484e      	ldr	r0, [pc, #312]	; (80099e8 <Tim_Init+0x21c>)
 80098b0:	f000 f9de 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 80098b4:	2204      	movs	r2, #4
 80098b6:	494f      	ldr	r1, [pc, #316]	; (80099f4 <Tim_Init+0x228>)
 80098b8:	484b      	ldr	r0, [pc, #300]	; (80099e8 <Tim_Init+0x21c>)
 80098ba:	f7fd fd4b 	bl	8007354 <HAL_TIM_PWM_ConfigChannel>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d002      	beq.n	80098ca <Tim_Init+0xfe>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80098c4:	4848      	ldr	r0, [pc, #288]	; (80099e8 <Tim_Init+0x21c>)
 80098c6:	f000 f9d3 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_3) != HAL_OK)
 80098ca:	2208      	movs	r2, #8
 80098cc:	4949      	ldr	r1, [pc, #292]	; (80099f4 <Tim_Init+0x228>)
 80098ce:	4846      	ldr	r0, [pc, #280]	; (80099e8 <Tim_Init+0x21c>)
 80098d0:	f7fd fd40 	bl	8007354 <HAL_TIM_PWM_ConfigChannel>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <Tim_Init+0x114>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80098da:	4843      	ldr	r0, [pc, #268]	; (80099e8 <Tim_Init+0x21c>)
 80098dc:	f000 f9c8 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the GPIO. */
			HAL_TIM_MspPostInit(&htim2);
 80098e0:	4841      	ldr	r0, [pc, #260]	; (80099e8 <Tim_Init+0x21c>)
 80098e2:	f7f9 feb9 	bl	8003658 <HAL_TIM_MspPostInit>

			break;
 80098e6:	e174      	b.n	8009bd2 <Tim_Init+0x406>
		/* Initialize the timer three. */
		case TIMER_THREE:
			/* Configure the timer parameters. */
			htim3.Instance = TIM3;
 80098e8:	4b43      	ldr	r3, [pc, #268]	; (80099f8 <Tim_Init+0x22c>)
 80098ea:	4a44      	ldr	r2, [pc, #272]	; (80099fc <Tim_Init+0x230>)
 80098ec:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 1000-1;
 80098ee:	4b42      	ldr	r3, [pc, #264]	; (80099f8 <Tim_Init+0x22c>)
 80098f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80098f4:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098f6:	4b40      	ldr	r3, [pc, #256]	; (80099f8 <Tim_Init+0x22c>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 2000-1;
 80098fc:	4b3e      	ldr	r3, [pc, #248]	; (80099f8 <Tim_Init+0x22c>)
 80098fe:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009902:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009904:	4b3c      	ldr	r3, [pc, #240]	; (80099f8 <Tim_Init+0x22c>)
 8009906:	2200      	movs	r2, #0
 8009908:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800990a:	4b3b      	ldr	r3, [pc, #236]	; (80099f8 <Tim_Init+0x22c>)
 800990c:	2200      	movs	r2, #0
 800990e:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009910:	4839      	ldr	r0, [pc, #228]	; (80099f8 <Tim_Init+0x22c>)
 8009912:	f7fc ff07 	bl	8006724 <HAL_TIM_Base_Init>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <Tim_Init+0x156>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800991c:	4836      	ldr	r0, [pc, #216]	; (80099f8 <Tim_Init+0x22c>)
 800991e:	f000 f9a7 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Set the clock source. */
			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009922:	4b37      	ldr	r3, [pc, #220]	; (8009a00 <Tim_Init+0x234>)
 8009924:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009928:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 800992a:	4935      	ldr	r1, [pc, #212]	; (8009a00 <Tim_Init+0x234>)
 800992c:	4832      	ldr	r0, [pc, #200]	; (80099f8 <Tim_Init+0x22c>)
 800992e:	f7fd fdd3 	bl	80074d8 <HAL_TIM_ConfigClockSource>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <Tim_Init+0x172>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009938:	482f      	ldr	r0, [pc, #188]	; (80099f8 <Tim_Init+0x22c>)
 800993a:	f000 f999 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800993e:	482e      	ldr	r0, [pc, #184]	; (80099f8 <Tim_Init+0x22c>)
 8009940:	f7fc ffae 	bl	80068a0 <HAL_TIM_PWM_Init>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <Tim_Init+0x184>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800994a:	482b      	ldr	r0, [pc, #172]	; (80099f8 <Tim_Init+0x22c>)
 800994c:	f000 f990 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure master slave mode. */
			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8009950:	4b2c      	ldr	r3, [pc, #176]	; (8009a04 <Tim_Init+0x238>)
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009956:	4b2b      	ldr	r3, [pc, #172]	; (8009a04 <Tim_Init+0x238>)
 8009958:	2200      	movs	r2, #0
 800995a:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 800995c:	4929      	ldr	r1, [pc, #164]	; (8009a04 <Tim_Init+0x238>)
 800995e:	4826      	ldr	r0, [pc, #152]	; (80099f8 <Tim_Init+0x22c>)
 8009960:	f7fe fb5c 	bl	800801c <HAL_TIMEx_MasterConfigSynchronization>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d002      	beq.n	8009970 <Tim_Init+0x1a4>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800996a:	4823      	ldr	r0, [pc, #140]	; (80099f8 <Tim_Init+0x22c>)
 800996c:	f000 f980 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure PWM parameters. */
			sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 8009970:	4b25      	ldr	r3, [pc, #148]	; (8009a08 <Tim_Init+0x23c>)
 8009972:	2260      	movs	r2, #96	; 0x60
 8009974:	601a      	str	r2, [r3, #0]
			sConfigOC3.Pulse = 0;
 8009976:	4b24      	ldr	r3, [pc, #144]	; (8009a08 <Tim_Init+0x23c>)
 8009978:	2200      	movs	r2, #0
 800997a:	605a      	str	r2, [r3, #4]
			sConfigOC3.OCPolarity = TIM_OCPOLARITY_HIGH;
 800997c:	4b22      	ldr	r3, [pc, #136]	; (8009a08 <Tim_Init+0x23c>)
 800997e:	2200      	movs	r2, #0
 8009980:	609a      	str	r2, [r3, #8]
			sConfigOC3.OCFastMode = TIM_OCFAST_ENABLE;
 8009982:	4b21      	ldr	r3, [pc, #132]	; (8009a08 <Tim_Init+0x23c>)
 8009984:	2204      	movs	r2, #4
 8009986:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_1) != HAL_OK)
 8009988:	2200      	movs	r2, #0
 800998a:	491f      	ldr	r1, [pc, #124]	; (8009a08 <Tim_Init+0x23c>)
 800998c:	481a      	ldr	r0, [pc, #104]	; (80099f8 <Tim_Init+0x22c>)
 800998e:	f7fd fce1 	bl	8007354 <HAL_TIM_PWM_ConfigChannel>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <Tim_Init+0x1d2>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009998:	4817      	ldr	r0, [pc, #92]	; (80099f8 <Tim_Init+0x22c>)
 800999a:	f000 f969 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_2) != HAL_OK)
 800999e:	2204      	movs	r2, #4
 80099a0:	4919      	ldr	r1, [pc, #100]	; (8009a08 <Tim_Init+0x23c>)
 80099a2:	4815      	ldr	r0, [pc, #84]	; (80099f8 <Tim_Init+0x22c>)
 80099a4:	f7fd fcd6 	bl	8007354 <HAL_TIM_PWM_ConfigChannel>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <Tim_Init+0x1e8>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 80099ae:	4812      	ldr	r0, [pc, #72]	; (80099f8 <Tim_Init+0x22c>)
 80099b0:	f000 f95e 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 80099b4:	2208      	movs	r2, #8
 80099b6:	4914      	ldr	r1, [pc, #80]	; (8009a08 <Tim_Init+0x23c>)
 80099b8:	480f      	ldr	r0, [pc, #60]	; (80099f8 <Tim_Init+0x22c>)
 80099ba:	f7fd fccb 	bl	8007354 <HAL_TIM_PWM_ConfigChannel>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <Tim_Init+0x1fe>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 80099c4:	480c      	ldr	r0, [pc, #48]	; (80099f8 <Tim_Init+0x22c>)
 80099c6:	f000 f953 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_4) != HAL_OK)
 80099ca:	220c      	movs	r2, #12
 80099cc:	490e      	ldr	r1, [pc, #56]	; (8009a08 <Tim_Init+0x23c>)
 80099ce:	480a      	ldr	r0, [pc, #40]	; (80099f8 <Tim_Init+0x22c>)
 80099d0:	f7fd fcc0 	bl	8007354 <HAL_TIM_PWM_ConfigChannel>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <Tim_Init+0x214>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 80099da:	4807      	ldr	r0, [pc, #28]	; (80099f8 <Tim_Init+0x22c>)
 80099dc:	f000 f948 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure timer GPIO. */
			HAL_TIM_MspPostInit(&htim3);
 80099e0:	4805      	ldr	r0, [pc, #20]	; (80099f8 <Tim_Init+0x22c>)
 80099e2:	f7f9 fe39 	bl	8003658 <HAL_TIM_MspPostInit>
			break;
 80099e6:	e0f4      	b.n	8009bd2 <Tim_Init+0x406>
 80099e8:	20000348 	.word	0x20000348
 80099ec:	200006d8 	.word	0x200006d8
 80099f0:	200006e8 	.word	0x200006e8
 80099f4:	200006f0 	.word	0x200006f0
 80099f8:	200003fc 	.word	0x200003fc
 80099fc:	40000400 	.word	0x40000400
 8009a00:	20000744 	.word	0x20000744
 8009a04:	20000754 	.word	0x20000754
 8009a08:	2000070c 	.word	0x2000070c
		/* Initialize the timer four. */
		case TIMER_FOUR:
			/* Configure timer parameters. */
			htim4.Instance = TIM4;
 8009a0c:	4b73      	ldr	r3, [pc, #460]	; (8009bdc <Tim_Init+0x410>)
 8009a0e:	4a74      	ldr	r2, [pc, #464]	; (8009be0 <Tim_Init+0x414>)
 8009a10:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 8009a12:	4b72      	ldr	r3, [pc, #456]	; (8009bdc <Tim_Init+0x410>)
 8009a14:	f242 720f 	movw	r2, #9999	; 0x270f
 8009a18:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a1a:	4b70      	ldr	r3, [pc, #448]	; (8009bdc <Tim_Init+0x410>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 1000-1;
 8009a20:	4b6e      	ldr	r3, [pc, #440]	; (8009bdc <Tim_Init+0x410>)
 8009a22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009a26:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a28:	4b6c      	ldr	r3, [pc, #432]	; (8009bdc <Tim_Init+0x410>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a2e:	4b6b      	ldr	r3, [pc, #428]	; (8009bdc <Tim_Init+0x410>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009a34:	4869      	ldr	r0, [pc, #420]	; (8009bdc <Tim_Init+0x410>)
 8009a36:	f7fc fe75 	bl	8006724 <HAL_TIM_Base_Init>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <Tim_Init+0x27a>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009a40:	4866      	ldr	r0, [pc, #408]	; (8009bdc <Tim_Init+0x410>)
 8009a42:	f000 f915 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the clock source. */
			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a46:	4b67      	ldr	r3, [pc, #412]	; (8009be4 <Tim_Init+0x418>)
 8009a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a4c:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 8009a4e:	4965      	ldr	r1, [pc, #404]	; (8009be4 <Tim_Init+0x418>)
 8009a50:	4862      	ldr	r0, [pc, #392]	; (8009bdc <Tim_Init+0x410>)
 8009a52:	f7fd fd41 	bl	80074d8 <HAL_TIM_ConfigClockSource>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <Tim_Init+0x296>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009a5c:	485f      	ldr	r0, [pc, #380]	; (8009bdc <Tim_Init+0x410>)
 8009a5e:	f000 f907 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009a62:	485e      	ldr	r0, [pc, #376]	; (8009bdc <Tim_Init+0x410>)
 8009a64:	f7fc ff1c 	bl	80068a0 <HAL_TIM_PWM_Init>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <Tim_Init+0x2a8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009a6e:	485b      	ldr	r0, [pc, #364]	; (8009bdc <Tim_Init+0x410>)
 8009a70:	f000 f8fe 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the master slave mode. */
			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a74:	4b5c      	ldr	r3, [pc, #368]	; (8009be8 <Tim_Init+0x41c>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a7a:	4b5b      	ldr	r3, [pc, #364]	; (8009be8 <Tim_Init+0x41c>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 8009a80:	4959      	ldr	r1, [pc, #356]	; (8009be8 <Tim_Init+0x41c>)
 8009a82:	4856      	ldr	r0, [pc, #344]	; (8009bdc <Tim_Init+0x410>)
 8009a84:	f7fe faca 	bl	800801c <HAL_TIMEx_MasterConfigSynchronization>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <Tim_Init+0x2c8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009a8e:	4853      	ldr	r0, [pc, #332]	; (8009bdc <Tim_Init+0x410>)
 8009a90:	f000 f8ee 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the PWM parameters. */
			sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 8009a94:	4b55      	ldr	r3, [pc, #340]	; (8009bec <Tim_Init+0x420>)
 8009a96:	2260      	movs	r2, #96	; 0x60
 8009a98:	601a      	str	r2, [r3, #0]
			sConfigOC4.Pulse = 999;
 8009a9a:	4b54      	ldr	r3, [pc, #336]	; (8009bec <Tim_Init+0x420>)
 8009a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009aa0:	605a      	str	r2, [r3, #4]
			sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009aa2:	4b52      	ldr	r3, [pc, #328]	; (8009bec <Tim_Init+0x420>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	609a      	str	r2, [r3, #8]
			sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 8009aa8:	4b50      	ldr	r3, [pc, #320]	; (8009bec <Tim_Init+0x420>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_3) != HAL_OK)
 8009aae:	2208      	movs	r2, #8
 8009ab0:	494e      	ldr	r1, [pc, #312]	; (8009bec <Tim_Init+0x420>)
 8009ab2:	484a      	ldr	r0, [pc, #296]	; (8009bdc <Tim_Init+0x410>)
 8009ab4:	f7fd fc4e 	bl	8007354 <HAL_TIM_PWM_ConfigChannel>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d002      	beq.n	8009ac4 <Tim_Init+0x2f8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009abe:	4847      	ldr	r0, [pc, #284]	; (8009bdc <Tim_Init+0x410>)
 8009ac0:	f000 f8d6 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 8009ac4:	220c      	movs	r2, #12
 8009ac6:	4949      	ldr	r1, [pc, #292]	; (8009bec <Tim_Init+0x420>)
 8009ac8:	4844      	ldr	r0, [pc, #272]	; (8009bdc <Tim_Init+0x410>)
 8009aca:	f7fd fc43 	bl	8007354 <HAL_TIM_PWM_ConfigChannel>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <Tim_Init+0x30e>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009ad4:	4841      	ldr	r0, [pc, #260]	; (8009bdc <Tim_Init+0x410>)
 8009ad6:	f000 f8cb 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the timer GPIO. */
			HAL_TIM_MspPostInit(&htim4);
 8009ada:	4840      	ldr	r0, [pc, #256]	; (8009bdc <Tim_Init+0x410>)
 8009adc:	f7f9 fdbc 	bl	8003658 <HAL_TIM_MspPostInit>
			break;
 8009ae0:	e077      	b.n	8009bd2 <Tim_Init+0x406>
		/* Initialize the timer five. */
		case TIMER_FIVE:
			htim5.Instance = TIM5;
 8009ae2:	4b43      	ldr	r3, [pc, #268]	; (8009bf0 <Tim_Init+0x424>)
 8009ae4:	4a43      	ldr	r2, [pc, #268]	; (8009bf4 <Tim_Init+0x428>)
 8009ae6:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 100-1;
 8009ae8:	4b41      	ldr	r3, [pc, #260]	; (8009bf0 <Tim_Init+0x424>)
 8009aea:	2263      	movs	r2, #99	; 0x63
 8009aec:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009aee:	4b40      	ldr	r3, [pc, #256]	; (8009bf0 <Tim_Init+0x424>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 0xffffffff;
 8009af4:	4b3e      	ldr	r3, [pc, #248]	; (8009bf0 <Tim_Init+0x424>)
 8009af6:	f04f 32ff 	mov.w	r2, #4294967295
 8009afa:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009afc:	4b3c      	ldr	r3, [pc, #240]	; (8009bf0 <Tim_Init+0x424>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b02:	4b3b      	ldr	r3, [pc, #236]	; (8009bf0 <Tim_Init+0x424>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	619a      	str	r2, [r3, #24]
			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009b08:	4839      	ldr	r0, [pc, #228]	; (8009bf0 <Tim_Init+0x424>)
 8009b0a:	f7fc fe0b 	bl	8006724 <HAL_TIM_Base_Init>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d002      	beq.n	8009b1a <Tim_Init+0x34e>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009b14:	4836      	ldr	r0, [pc, #216]	; (8009bf0 <Tim_Init+0x424>)
 8009b16:	f000 f8ab 	bl	8009c70 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b1a:	4b37      	ldr	r3, [pc, #220]	; (8009bf8 <Tim_Init+0x42c>)
 8009b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b20:	601a      	str	r2, [r3, #0]
			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 8009b22:	4935      	ldr	r1, [pc, #212]	; (8009bf8 <Tim_Init+0x42c>)
 8009b24:	4832      	ldr	r0, [pc, #200]	; (8009bf0 <Tim_Init+0x424>)
 8009b26:	f7fd fcd7 	bl	80074d8 <HAL_TIM_ConfigClockSource>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <Tim_Init+0x36a>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009b30:	482f      	ldr	r0, [pc, #188]	; (8009bf0 <Tim_Init+0x424>)
 8009b32:	f000 f89d 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8009b36:	482e      	ldr	r0, [pc, #184]	; (8009bf0 <Tim_Init+0x424>)
 8009b38:	f7fd f8c8 	bl	8006ccc <HAL_TIM_IC_Init>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <Tim_Init+0x37c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009b42:	482b      	ldr	r0, [pc, #172]	; (8009bf0 <Tim_Init+0x424>)
 8009b44:	f000 f894 	bl	8009c70 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b48:	4b2c      	ldr	r3, [pc, #176]	; (8009bfc <Tim_Init+0x430>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b4e:	4b2b      	ldr	r3, [pc, #172]	; (8009bfc <Tim_Init+0x430>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	605a      	str	r2, [r3, #4]
			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 8009b54:	4929      	ldr	r1, [pc, #164]	; (8009bfc <Tim_Init+0x430>)
 8009b56:	4826      	ldr	r0, [pc, #152]	; (8009bf0 <Tim_Init+0x424>)
 8009b58:	f7fe fa60 	bl	800801c <HAL_TIMEx_MasterConfigSynchronization>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d002      	beq.n	8009b68 <Tim_Init+0x39c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009b62:	4823      	ldr	r0, [pc, #140]	; (8009bf0 <Tim_Init+0x424>)
 8009b64:	f000 f884 	bl	8009c70 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sConfigIC5.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009b68:	4b25      	ldr	r3, [pc, #148]	; (8009c00 <Tim_Init+0x434>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]
			sConfigIC5.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009b6e:	4b24      	ldr	r3, [pc, #144]	; (8009c00 <Tim_Init+0x434>)
 8009b70:	2201      	movs	r2, #1
 8009b72:	605a      	str	r2, [r3, #4]
			sConfigIC5.ICPrescaler = TIM_ICPSC_DIV1;
 8009b74:	4b22      	ldr	r3, [pc, #136]	; (8009c00 <Tim_Init+0x434>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	609a      	str	r2, [r3, #8]
			sConfigIC5.ICFilter = 0;
 8009b7a:	4b21      	ldr	r3, [pc, #132]	; (8009c00 <Tim_Init+0x434>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_1) != HAL_OK)
 8009b80:	2200      	movs	r2, #0
 8009b82:	491f      	ldr	r1, [pc, #124]	; (8009c00 <Tim_Init+0x434>)
 8009b84:	481a      	ldr	r0, [pc, #104]	; (8009bf0 <Tim_Init+0x424>)
 8009b86:	f7fd fb49 	bl	800721c <HAL_TIM_IC_ConfigChannel>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <Tim_Init+0x3ca>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009b90:	4817      	ldr	r0, [pc, #92]	; (8009bf0 <Tim_Init+0x424>)
 8009b92:	f000 f86d 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_2) != HAL_OK)
 8009b96:	2204      	movs	r2, #4
 8009b98:	4919      	ldr	r1, [pc, #100]	; (8009c00 <Tim_Init+0x434>)
 8009b9a:	4815      	ldr	r0, [pc, #84]	; (8009bf0 <Tim_Init+0x424>)
 8009b9c:	f7fd fb3e 	bl	800721c <HAL_TIM_IC_ConfigChannel>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <Tim_Init+0x3e0>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009ba6:	4812      	ldr	r0, [pc, #72]	; (8009bf0 <Tim_Init+0x424>)
 8009ba8:	f000 f862 	bl	8009c70 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if(TimH_MainFunctionFirstCall == STD_LOW)
 8009bac:	4b15      	ldr	r3, [pc, #84]	; (8009c04 <Tim_Init+0x438>)
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10d      	bne.n	8009bd0 <Tim_Init+0x404>
			{
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	480e      	ldr	r0, [pc, #56]	; (8009bf0 <Tim_Init+0x424>)
 8009bb8:	f7fd f8ee 	bl	8006d98 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8009bbc:	2104      	movs	r1, #4
 8009bbe:	480c      	ldr	r0, [pc, #48]	; (8009bf0 <Tim_Init+0x424>)
 8009bc0:	f7fd f8ea 	bl	8006d98 <HAL_TIM_IC_Start_IT>
				TimH_MainFunctionFirstCall = STD_HIGH;
 8009bc4:	4b0f      	ldr	r3, [pc, #60]	; (8009c04 <Tim_Init+0x438>)
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}

			break;
 8009bca:	e001      	b.n	8009bd0 <Tim_Init+0x404>
		default:
			break;
 8009bcc:	bf00      	nop
 8009bce:	e000      	b.n	8009bd2 <Tim_Init+0x406>
			break;
 8009bd0:	bf00      	nop
	}
	return E_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	200004b0 	.word	0x200004b0
 8009be0:	40000800 	.word	0x40000800
 8009be4:	2000075c 	.word	0x2000075c
 8009be8:	2000076c 	.word	0x2000076c
 8009bec:	20000728 	.word	0x20000728
 8009bf0:	20000564 	.word	0x20000564
 8009bf4:	40000c00 	.word	0x40000c00
 8009bf8:	20000774 	.word	0x20000774
 8009bfc:	20000784 	.word	0x20000784
 8009c00:	2000078c 	.word	0x2000078c
 8009c04:	200006d6 	.word	0x200006d6

08009c08 <Tim_DeInit>:
/***********************************************************************************
* Function: Tim_DeInit										   			           *
* Description: Peripheral de-initialization.									   *
************************************************************************************/
StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	71fb      	strb	r3, [r7, #7]
	/* Store the timer channel value into a local variable. */
	uint8 localVariable = TimerChannel;
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	73fb      	strb	r3, [r7, #15]
	/* Process the request for timer de-init. */
	switch(localVariable)
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	3b02      	subs	r3, #2
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d81a      	bhi.n	8009c54 <Tim_DeInit+0x4c>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <Tim_DeInit+0x1c>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c35 	.word	0x08009c35
 8009c28:	08009c3d 	.word	0x08009c3d
 8009c2c:	08009c45 	.word	0x08009c45
 8009c30:	08009c4d 	.word	0x08009c4d
	{
		case TIMER_TWO:
			HAL_TIM_Base_MspDeInit(&htim2);
 8009c34:	480a      	ldr	r0, [pc, #40]	; (8009c60 <Tim_DeInit+0x58>)
 8009c36:	f7f9 fdb9 	bl	80037ac <HAL_TIM_Base_MspDeInit>
			break;
 8009c3a:	e00c      	b.n	8009c56 <Tim_DeInit+0x4e>
		case TIMER_THREE:
			HAL_TIM_Base_MspDeInit(&htim3);
 8009c3c:	4809      	ldr	r0, [pc, #36]	; (8009c64 <Tim_DeInit+0x5c>)
 8009c3e:	f7f9 fdb5 	bl	80037ac <HAL_TIM_Base_MspDeInit>
			break;
 8009c42:	e008      	b.n	8009c56 <Tim_DeInit+0x4e>
		case TIMER_FOUR:
			HAL_TIM_Base_MspDeInit(&htim4);
 8009c44:	4808      	ldr	r0, [pc, #32]	; (8009c68 <Tim_DeInit+0x60>)
 8009c46:	f7f9 fdb1 	bl	80037ac <HAL_TIM_Base_MspDeInit>
			break;
 8009c4a:	e004      	b.n	8009c56 <Tim_DeInit+0x4e>
		case TIMER_FIVE:
			HAL_TIM_Base_MspDeInit(&htim5);
 8009c4c:	4807      	ldr	r0, [pc, #28]	; (8009c6c <Tim_DeInit+0x64>)
 8009c4e:	f7f9 fdad 	bl	80037ac <HAL_TIM_Base_MspDeInit>
			break;
 8009c52:	e000      	b.n	8009c56 <Tim_DeInit+0x4e>
		default:
			break;
 8009c54:	bf00      	nop
	}
	return E_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20000348 	.word	0x20000348
 8009c64:	200003fc 	.word	0x200003fc
 8009c68:	200004b0 	.word	0x200004b0
 8009c6c:	20000564 	.word	0x20000564

08009c70 <HAL_TIM_ErrorCallback>:
/***********************************************************************************
* Function: HAL_TIM_ErrorCallback										   		   *
* Description: Error callback called when timer fault occurs.					   *
************************************************************************************/
VOID HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization of the peripheral in case of error. */
	if(htim->Instance == TIM2)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c80:	d10b      	bne.n	8009c9a <HAL_TIM_ErrorCallback+0x2a>
	{
		SystemManager_Fault[TIMER2_ERROR]++;
 8009c82:	4b21      	ldr	r3, [pc, #132]	; (8009d08 <HAL_TIM_ErrorCallback+0x98>)
 8009c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c86:	3301      	adds	r3, #1
 8009c88:	4a1f      	ldr	r2, [pc, #124]	; (8009d08 <HAL_TIM_ErrorCallback+0x98>)
 8009c8a:	6593      	str	r3, [r2, #88]	; 0x58
		Tim_DeInit(TIMER_TWO);
 8009c8c:	2002      	movs	r0, #2
 8009c8e:	f7ff ffbb 	bl	8009c08 <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 8009c92:	2002      	movs	r0, #2
 8009c94:	f7ff fd9a 	bl	80097cc <Tim_Init>
	}
	else
	{
		/* do nothing */
	}
}
 8009c98:	e031      	b.n	8009cfe <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM3)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a1b      	ldr	r2, [pc, #108]	; (8009d0c <HAL_TIM_ErrorCallback+0x9c>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d10b      	bne.n	8009cbc <HAL_TIM_ErrorCallback+0x4c>
		SystemManager_Fault[TIMER3_ERROR]++;
 8009ca4:	4b18      	ldr	r3, [pc, #96]	; (8009d08 <HAL_TIM_ErrorCallback+0x98>)
 8009ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca8:	3301      	adds	r3, #1
 8009caa:	4a17      	ldr	r2, [pc, #92]	; (8009d08 <HAL_TIM_ErrorCallback+0x98>)
 8009cac:	65d3      	str	r3, [r2, #92]	; 0x5c
		Tim_DeInit(TIMER_THREE);
 8009cae:	2003      	movs	r0, #3
 8009cb0:	f7ff ffaa 	bl	8009c08 <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 8009cb4:	2003      	movs	r0, #3
 8009cb6:	f7ff fd89 	bl	80097cc <Tim_Init>
}
 8009cba:	e020      	b.n	8009cfe <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM4)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a13      	ldr	r2, [pc, #76]	; (8009d10 <HAL_TIM_ErrorCallback+0xa0>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d10b      	bne.n	8009cde <HAL_TIM_ErrorCallback+0x6e>
		SystemManager_Fault[TIMER4_ERROR]++;
 8009cc6:	4b10      	ldr	r3, [pc, #64]	; (8009d08 <HAL_TIM_ErrorCallback+0x98>)
 8009cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cca:	3301      	adds	r3, #1
 8009ccc:	4a0e      	ldr	r2, [pc, #56]	; (8009d08 <HAL_TIM_ErrorCallback+0x98>)
 8009cce:	6613      	str	r3, [r2, #96]	; 0x60
		Tim_DeInit(TIMER_FOUR);
 8009cd0:	2004      	movs	r0, #4
 8009cd2:	f7ff ff99 	bl	8009c08 <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 8009cd6:	2004      	movs	r0, #4
 8009cd8:	f7ff fd78 	bl	80097cc <Tim_Init>
}
 8009cdc:	e00f      	b.n	8009cfe <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM5)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a0c      	ldr	r2, [pc, #48]	; (8009d14 <HAL_TIM_ErrorCallback+0xa4>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d10a      	bne.n	8009cfe <HAL_TIM_ErrorCallback+0x8e>
		SystemManager_Fault[TIMER5_ERROR]++;
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <HAL_TIM_ErrorCallback+0x98>)
 8009cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cec:	3301      	adds	r3, #1
 8009cee:	4a06      	ldr	r2, [pc, #24]	; (8009d08 <HAL_TIM_ErrorCallback+0x98>)
 8009cf0:	6653      	str	r3, [r2, #100]	; 0x64
		Tim_DeInit(TIMER_FIVE);
 8009cf2:	2005      	movs	r0, #5
 8009cf4:	f7ff ff88 	bl	8009c08 <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 8009cf8:	2005      	movs	r0, #5
 8009cfa:	f7ff fd67 	bl	80097cc <Tim_Init>
}
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	200089a8 	.word	0x200089a8
 8009d0c:	40000400 	.word	0x40000400
 8009d10:	40000800 	.word	0x40000800
 8009d14:	40000c00 	.word	0x40000c00

08009d18 <Tim_MainFunction>:
/***********************************************************************************
* Function: Tim_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Tim_MainFunction()
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
	/* Check each timer for error status into local variables. */
	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 8009d1e:	4891      	ldr	r0, [pc, #580]	; (8009f64 <Tim_MainFunction+0x24c>)
 8009d20:	f7fd fd2c 	bl	800777c <HAL_TIM_Base_GetState>
 8009d24:	4603      	mov	r3, r0
 8009d26:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 8009d28:	488f      	ldr	r0, [pc, #572]	; (8009f68 <Tim_MainFunction+0x250>)
 8009d2a:	f7fd fd27 	bl	800777c <HAL_TIM_Base_GetState>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 8009d32:	488e      	ldr	r0, [pc, #568]	; (8009f6c <Tim_MainFunction+0x254>)
 8009d34:	f7fd fd22 	bl	800777c <HAL_TIM_Base_GetState>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 8009d3c:	488c      	ldr	r0, [pc, #560]	; (8009f70 <Tim_MainFunction+0x258>)
 8009d3e:	f7fd fd1d 	bl	800777c <HAL_TIM_Base_GetState>
 8009d42:	4603      	mov	r3, r0
 8009d44:	603b      	str	r3, [r7, #0]
	/* Process timers state. */
	switch(localStateTimerFive)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	d869      	bhi.n	8009e20 <Tim_MainFunction+0x108>
 8009d4c:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <Tim_MainFunction+0x3c>)
 8009d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d52:	bf00      	nop
 8009d54:	08009d69 	.word	0x08009d69
 8009d58:	08009d79 	.word	0x08009d79
 8009d5c:	08009df7 	.word	0x08009df7
 8009d60:	08009e01 	.word	0x08009e01
 8009d64:	08009e11 	.word	0x08009e11
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	4b81      	ldr	r3, [pc, #516]	; (8009f74 <Tim_MainFunction+0x25c>)
 8009d6e:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FIVE);
 8009d70:	2005      	movs	r0, #5
 8009d72:	f7ff fd2b 	bl	80097cc <Tim_Init>
			break;
 8009d76:	e054      	b.n	8009e22 <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_READY:
			if(Os_Counter % 100 == 0)
 8009d78:	4b7f      	ldr	r3, [pc, #508]	; (8009f78 <Tim_MainFunction+0x260>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	4b7f      	ldr	r3, [pc, #508]	; (8009f7c <Tim_MainFunction+0x264>)
 8009d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8009d82:	095b      	lsrs	r3, r3, #5
 8009d84:	2164      	movs	r1, #100	; 0x64
 8009d86:	fb01 f303 	mul.w	r3, r1, r3
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d12d      	bne.n	8009dec <Tim_MainFunction+0xd4>
			{
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_SET);
 8009d90:	2201      	movs	r2, #1
 8009d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009d96:	487a      	ldr	r0, [pc, #488]	; (8009f80 <Tim_MainFunction+0x268>)
 8009d98:	f7fb ff74 	bl	8005c84 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	f7fa f85d 	bl	8003e5c <HAL_Delay>
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_RESET);
 8009da2:	2200      	movs	r2, #0
 8009da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009da8:	4875      	ldr	r0, [pc, #468]	; (8009f80 <Tim_MainFunction+0x268>)
 8009daa:	f7fb ff6b 	bl	8005c84 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 8009dae:	4b70      	ldr	r3, [pc, #448]	; (8009f70 <Tim_MainFunction+0x258>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	4b6e      	ldr	r3, [pc, #440]	; (8009f70 <Tim_MainFunction+0x258>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f042 0204 	orr.w	r2, r2, #4
 8009dbc:	60da      	str	r2, [r3, #12]
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_SET);
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009dc4:	486f      	ldr	r0, [pc, #444]	; (8009f84 <Tim_MainFunction+0x26c>)
 8009dc6:	f7fb ff5d 	bl	8005c84 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8009dca:	2001      	movs	r0, #1
 8009dcc:	f7fa f846 	bl	8003e5c <HAL_Delay>
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_RESET);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009dd6:	486b      	ldr	r0, [pc, #428]	; (8009f84 <Tim_MainFunction+0x26c>)
 8009dd8:	f7fb ff54 	bl	8005c84 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 8009ddc:	4b64      	ldr	r3, [pc, #400]	; (8009f70 <Tim_MainFunction+0x258>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68da      	ldr	r2, [r3, #12]
 8009de2:	4b63      	ldr	r3, [pc, #396]	; (8009f70 <Tim_MainFunction+0x258>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0202 	orr.w	r2, r2, #2
 8009dea:	60da      	str	r2, [r3, #12]
			}
			else
			{
				/* do nothing */
			}
			TimH_BswState_TimerFive = localStateTimerFive;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	4b60      	ldr	r3, [pc, #384]	; (8009f74 <Tim_MainFunction+0x25c>)
 8009df2:	701a      	strb	r2, [r3, #0]
			break;
 8009df4:	e015      	b.n	8009e22 <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	4b5e      	ldr	r3, [pc, #376]	; (8009f74 <Tim_MainFunction+0x25c>)
 8009dfc:	701a      	strb	r2, [r3, #0]
			break;
 8009dfe:	e010      	b.n	8009e22 <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	4b5b      	ldr	r3, [pc, #364]	; (8009f74 <Tim_MainFunction+0x25c>)
 8009e06:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8009e08:	4859      	ldr	r0, [pc, #356]	; (8009f70 <Tim_MainFunction+0x258>)
 8009e0a:	f7ff ff31 	bl	8009c70 <HAL_TIM_ErrorCallback>
			break;
 8009e0e:	e008      	b.n	8009e22 <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	4b57      	ldr	r3, [pc, #348]	; (8009f74 <Tim_MainFunction+0x25c>)
 8009e16:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8009e18:	4855      	ldr	r0, [pc, #340]	; (8009f70 <Tim_MainFunction+0x258>)
 8009e1a:	f7ff ff29 	bl	8009c70 <HAL_TIM_ErrorCallback>
			break;
 8009e1e:	e000      	b.n	8009e22 <Tim_MainFunction+0x10a>
		default:
			break;
 8009e20:	bf00      	nop
	}
	switch(localStateTimerTwo)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	d82f      	bhi.n	8009e88 <Tim_MainFunction+0x170>
 8009e28:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <Tim_MainFunction+0x118>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e45 	.word	0x08009e45
 8009e34:	08009e55 	.word	0x08009e55
 8009e38:	08009e5f 	.word	0x08009e5f
 8009e3c:	08009e69 	.word	0x08009e69
 8009e40:	08009e79 	.word	0x08009e79
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	4b4f      	ldr	r3, [pc, #316]	; (8009f88 <Tim_MainFunction+0x270>)
 8009e4a:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_TWO);
 8009e4c:	2002      	movs	r0, #2
 8009e4e:	f7ff fcbd 	bl	80097cc <Tim_Init>
			break;
 8009e52:	e01a      	b.n	8009e8a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	4b4b      	ldr	r3, [pc, #300]	; (8009f88 <Tim_MainFunction+0x270>)
 8009e5a:	701a      	strb	r2, [r3, #0]
			break;
 8009e5c:	e015      	b.n	8009e8a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	4b49      	ldr	r3, [pc, #292]	; (8009f88 <Tim_MainFunction+0x270>)
 8009e64:	701a      	strb	r2, [r3, #0]
			break;
 8009e66:	e010      	b.n	8009e8a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	4b46      	ldr	r3, [pc, #280]	; (8009f88 <Tim_MainFunction+0x270>)
 8009e6e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 8009e70:	483c      	ldr	r0, [pc, #240]	; (8009f64 <Tim_MainFunction+0x24c>)
 8009e72:	f7ff fefd 	bl	8009c70 <HAL_TIM_ErrorCallback>
			break;
 8009e76:	e008      	b.n	8009e8a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	4b42      	ldr	r3, [pc, #264]	; (8009f88 <Tim_MainFunction+0x270>)
 8009e7e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 8009e80:	4838      	ldr	r0, [pc, #224]	; (8009f64 <Tim_MainFunction+0x24c>)
 8009e82:	f7ff fef5 	bl	8009c70 <HAL_TIM_ErrorCallback>
			break;
 8009e86:	e000      	b.n	8009e8a <Tim_MainFunction+0x172>
		default:
			break;
 8009e88:	bf00      	nop
	}
	switch(localStateTimerThree)
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d82f      	bhi.n	8009ef0 <Tim_MainFunction+0x1d8>
 8009e90:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <Tim_MainFunction+0x180>)
 8009e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e96:	bf00      	nop
 8009e98:	08009ead 	.word	0x08009ead
 8009e9c:	08009ebd 	.word	0x08009ebd
 8009ea0:	08009ec7 	.word	0x08009ec7
 8009ea4:	08009ed1 	.word	0x08009ed1
 8009ea8:	08009ee1 	.word	0x08009ee1
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	4b36      	ldr	r3, [pc, #216]	; (8009f8c <Tim_MainFunction+0x274>)
 8009eb2:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_THREE);
 8009eb4:	2003      	movs	r0, #3
 8009eb6:	f7ff fc89 	bl	80097cc <Tim_Init>
			break;
 8009eba:	e01a      	b.n	8009ef2 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	4b32      	ldr	r3, [pc, #200]	; (8009f8c <Tim_MainFunction+0x274>)
 8009ec2:	701a      	strb	r2, [r3, #0]
			break;
 8009ec4:	e015      	b.n	8009ef2 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	4b30      	ldr	r3, [pc, #192]	; (8009f8c <Tim_MainFunction+0x274>)
 8009ecc:	701a      	strb	r2, [r3, #0]
			break;
 8009ece:	e010      	b.n	8009ef2 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	4b2d      	ldr	r3, [pc, #180]	; (8009f8c <Tim_MainFunction+0x274>)
 8009ed6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 8009ed8:	4823      	ldr	r0, [pc, #140]	; (8009f68 <Tim_MainFunction+0x250>)
 8009eda:	f7ff fec9 	bl	8009c70 <HAL_TIM_ErrorCallback>
			break;
 8009ede:	e008      	b.n	8009ef2 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	4b29      	ldr	r3, [pc, #164]	; (8009f8c <Tim_MainFunction+0x274>)
 8009ee6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 8009ee8:	481f      	ldr	r0, [pc, #124]	; (8009f68 <Tim_MainFunction+0x250>)
 8009eea:	f7ff fec1 	bl	8009c70 <HAL_TIM_ErrorCallback>
			break;
 8009eee:	e000      	b.n	8009ef2 <Tim_MainFunction+0x1da>
		default:
			break;
 8009ef0:	bf00      	nop
	}
	switch(localStateTimerFour)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b04      	cmp	r3, #4
 8009ef6:	d82f      	bhi.n	8009f58 <Tim_MainFunction+0x240>
 8009ef8:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <Tim_MainFunction+0x1e8>)
 8009efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efe:	bf00      	nop
 8009f00:	08009f15 	.word	0x08009f15
 8009f04:	08009f25 	.word	0x08009f25
 8009f08:	08009f2f 	.word	0x08009f2f
 8009f0c:	08009f39 	.word	0x08009f39
 8009f10:	08009f49 	.word	0x08009f49
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	4b1d      	ldr	r3, [pc, #116]	; (8009f90 <Tim_MainFunction+0x278>)
 8009f1a:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FOUR);
 8009f1c:	2004      	movs	r0, #4
 8009f1e:	f7ff fc55 	bl	80097cc <Tim_Init>
			break;
 8009f22:	e01a      	b.n	8009f5a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	4b19      	ldr	r3, [pc, #100]	; (8009f90 <Tim_MainFunction+0x278>)
 8009f2a:	701a      	strb	r2, [r3, #0]
			break;
 8009f2c:	e015      	b.n	8009f5a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	4b17      	ldr	r3, [pc, #92]	; (8009f90 <Tim_MainFunction+0x278>)
 8009f34:	701a      	strb	r2, [r3, #0]
			break;
 8009f36:	e010      	b.n	8009f5a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <Tim_MainFunction+0x278>)
 8009f3e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 8009f40:	480a      	ldr	r0, [pc, #40]	; (8009f6c <Tim_MainFunction+0x254>)
 8009f42:	f7ff fe95 	bl	8009c70 <HAL_TIM_ErrorCallback>
			break;
 8009f46:	e008      	b.n	8009f5a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	4b10      	ldr	r3, [pc, #64]	; (8009f90 <Tim_MainFunction+0x278>)
 8009f4e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 8009f50:	4806      	ldr	r0, [pc, #24]	; (8009f6c <Tim_MainFunction+0x254>)
 8009f52:	f7ff fe8d 	bl	8009c70 <HAL_TIM_ErrorCallback>
			break;
 8009f56:	e000      	b.n	8009f5a <Tim_MainFunction+0x242>
		default:
			break;
 8009f58:	bf00      	nop
	}
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	20000348 	.word	0x20000348
 8009f68:	200003fc 	.word	0x200003fc
 8009f6c:	200004b0 	.word	0x200004b0
 8009f70:	20000564 	.word	0x20000564
 8009f74:	200006b7 	.word	0x200006b7
 8009f78:	200001f8 	.word	0x200001f8
 8009f7c:	51eb851f 	.word	0x51eb851f
 8009f80:	40020400 	.word	0x40020400
 8009f84:	40020000 	.word	0x40020000
 8009f88:	200006b4 	.word	0x200006b4
 8009f8c:	200006b5 	.word	0x200006b5
 8009f90:	200006b6 	.word	0x200006b6

08009f94 <HAL_TIM_PeriodElapsedCallback>:
* Function: HAL_TIM_PeriodElapsedCallback										   *
* Description: Peripheral period elapsed callback to process system state          *
* 			   when timer expires.									               *
************************************************************************************/
VOID HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
	/* Timer 1 is used for the time base source of FreeRTOS. Upon expiration increase the clock counter of the system. */
	if (htim->Instance == TIM1)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a04      	ldr	r2, [pc, #16]	; (8009fb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d101      	bne.n	8009faa <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8009fa6:	f7f9 ff39 	bl	8003e1c <HAL_IncTick>
	}
	else
	{
		/* do nothing */
	}
}
 8009faa:	bf00      	nop
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	40010000 	.word	0x40010000

08009fb8 <__NVIC_SetPriority>:
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	6039      	str	r1, [r7, #0]
 8009fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	db0a      	blt.n	8009fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	490c      	ldr	r1, [pc, #48]	; (800a004 <__NVIC_SetPriority+0x4c>)
 8009fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fd6:	0112      	lsls	r2, r2, #4
 8009fd8:	b2d2      	uxtb	r2, r2
 8009fda:	440b      	add	r3, r1
 8009fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009fe0:	e00a      	b.n	8009ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	4908      	ldr	r1, [pc, #32]	; (800a008 <__NVIC_SetPriority+0x50>)
 8009fe8:	79fb      	ldrb	r3, [r7, #7]
 8009fea:	f003 030f 	and.w	r3, r3, #15
 8009fee:	3b04      	subs	r3, #4
 8009ff0:	0112      	lsls	r2, r2, #4
 8009ff2:	b2d2      	uxtb	r2, r2
 8009ff4:	440b      	add	r3, r1
 8009ff6:	761a      	strb	r2, [r3, #24]
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	e000e100 	.word	0xe000e100
 800a008:	e000ed00 	.word	0xe000ed00

0800a00c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a00c:	b580      	push	{r7, lr}
 800a00e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a010:	4b05      	ldr	r3, [pc, #20]	; (800a028 <SysTick_Handler+0x1c>)
 800a012:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a014:	f002 fa82 	bl	800c51c <xTaskGetSchedulerState>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d001      	beq.n	800a022 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a01e:	f000 fd0b 	bl	800aa38 <xPortSysTickHandler>
  }
}
 800a022:	bf00      	nop
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	e000e010 	.word	0xe000e010

0800a02c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a030:	2100      	movs	r1, #0
 800a032:	f06f 0004 	mvn.w	r0, #4
 800a036:	f7ff ffbf 	bl	8009fb8 <__NVIC_SetPriority>
#endif
}
 800a03a:	bf00      	nop
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a046:	f3ef 8305 	mrs	r3, IPSR
 800a04a:	603b      	str	r3, [r7, #0]
  return(result);
 800a04c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a052:	f06f 0305 	mvn.w	r3, #5
 800a056:	607b      	str	r3, [r7, #4]
 800a058:	e00c      	b.n	800a074 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a05a:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <osKernelInitialize+0x44>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d105      	bne.n	800a06e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a062:	4b08      	ldr	r3, [pc, #32]	; (800a084 <osKernelInitialize+0x44>)
 800a064:	2201      	movs	r2, #1
 800a066:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a068:	2300      	movs	r3, #0
 800a06a:	607b      	str	r3, [r7, #4]
 800a06c:	e002      	b.n	800a074 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a06e:	f04f 33ff 	mov.w	r3, #4294967295
 800a072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a074:	687b      	ldr	r3, [r7, #4]
}
 800a076:	4618      	mov	r0, r3
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	2000079c 	.word	0x2000079c

0800a088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a08e:	f3ef 8305 	mrs	r3, IPSR
 800a092:	603b      	str	r3, [r7, #0]
  return(result);
 800a094:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a09a:	f06f 0305 	mvn.w	r3, #5
 800a09e:	607b      	str	r3, [r7, #4]
 800a0a0:	e010      	b.n	800a0c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0a2:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <osKernelStart+0x48>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d109      	bne.n	800a0be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0aa:	f7ff ffbf 	bl	800a02c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0ae:	4b08      	ldr	r3, [pc, #32]	; (800a0d0 <osKernelStart+0x48>)
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0b4:	f001 fd02 	bl	800babc <vTaskStartScheduler>
      stat = osOK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	607b      	str	r3, [r7, #4]
 800a0bc:	e002      	b.n	800a0c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0be:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0c4:	687b      	ldr	r3, [r7, #4]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	2000079c 	.word	0x2000079c

0800a0d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08e      	sub	sp, #56	; 0x38
 800a0d8:	af04      	add	r7, sp, #16
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0e4:	f3ef 8305 	mrs	r3, IPSR
 800a0e8:	617b      	str	r3, [r7, #20]
  return(result);
 800a0ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d17f      	bne.n	800a1f0 <osThreadNew+0x11c>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d07c      	beq.n	800a1f0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a0f6:	2380      	movs	r3, #128	; 0x80
 800a0f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a0fa:	2318      	movs	r3, #24
 800a0fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a102:	f04f 33ff 	mov.w	r3, #4294967295
 800a106:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d046      	beq.n	800a19c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <osThreadNew+0x48>
        name = attr->name;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d008      	beq.n	800a142 <osThreadNew+0x6e>
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	2b38      	cmp	r3, #56	; 0x38
 800a134:	d805      	bhi.n	800a142 <osThreadNew+0x6e>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <osThreadNew+0x72>
        return (NULL);
 800a142:	2300      	movs	r3, #0
 800a144:	e055      	b.n	800a1f2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d003      	beq.n	800a156 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	089b      	lsrs	r3, r3, #2
 800a154:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00f      	beq.n	800a17e <osThreadNew+0xaa>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800a166:	d30a      	bcc.n	800a17e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d006      	beq.n	800a17e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <osThreadNew+0xaa>
        mem = 1;
 800a178:	2301      	movs	r3, #1
 800a17a:	61bb      	str	r3, [r7, #24]
 800a17c:	e010      	b.n	800a1a0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10c      	bne.n	800a1a0 <osThreadNew+0xcc>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d108      	bne.n	800a1a0 <osThreadNew+0xcc>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d104      	bne.n	800a1a0 <osThreadNew+0xcc>
          mem = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	61bb      	str	r3, [r7, #24]
 800a19a:	e001      	b.n	800a1a0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d110      	bne.n	800a1c8 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1ae:	9202      	str	r2, [sp, #8]
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	6a3a      	ldr	r2, [r7, #32]
 800a1ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f001 f9b7 	bl	800b530 <xTaskCreateStatic>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	613b      	str	r3, [r7, #16]
 800a1c6:	e013      	b.n	800a1f0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d110      	bne.n	800a1f0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1ce:	6a3b      	ldr	r3, [r7, #32]
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	f107 0310 	add.w	r3, r7, #16
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f001 fa04 	bl	800b5ee <xTaskCreate>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d001      	beq.n	800a1f0 <osThreadNew+0x11c>
            hTask = NULL;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a1f0:	693b      	ldr	r3, [r7, #16]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3728      	adds	r7, #40	; 0x28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b084      	sub	sp, #16
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f002 fe87 	bl	800cf16 <pvTimerGetTimerID>
 800a208:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d005      	beq.n	800a21c <TimerCallback+0x22>
    callb->func (callb->arg);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	6852      	ldr	r2, [r2, #4]
 800a218:	4610      	mov	r0, r2
 800a21a:	4798      	blx	r3
  }
}
 800a21c:	bf00      	nop
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b08c      	sub	sp, #48	; 0x30
 800a228:	af02      	add	r7, sp, #8
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	607a      	str	r2, [r7, #4]
 800a22e:	603b      	str	r3, [r7, #0]
 800a230:	460b      	mov	r3, r1
 800a232:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a234:	2300      	movs	r3, #0
 800a236:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a238:	f3ef 8305 	mrs	r3, IPSR
 800a23c:	613b      	str	r3, [r7, #16]
  return(result);
 800a23e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a240:	2b00      	cmp	r3, #0
 800a242:	d163      	bne.n	800a30c <osTimerNew+0xe8>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d060      	beq.n	800a30c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a24a:	2008      	movs	r0, #8
 800a24c:	f000 f91c 	bl	800a488 <pvPortMalloc>
 800a250:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d059      	beq.n	800a30c <osTimerNew+0xe8>
      callb->func = func;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a264:	7afb      	ldrb	r3, [r7, #11]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d102      	bne.n	800a270 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61fb      	str	r3, [r7, #28]
 800a26e:	e001      	b.n	800a274 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a270:	2301      	movs	r3, #1
 800a272:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a274:	f04f 33ff 	mov.w	r3, #4294967295
 800a278:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01c      	beq.n	800a2be <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <osTimerNew+0x6e>
          name = attr->name;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d006      	beq.n	800a2a8 <osTimerNew+0x84>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	2b2b      	cmp	r3, #43	; 0x2b
 800a2a0:	d902      	bls.n	800a2a8 <osTimerNew+0x84>
          mem = 1;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	e00c      	b.n	800a2c2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d108      	bne.n	800a2c2 <osTimerNew+0x9e>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d104      	bne.n	800a2c2 <osTimerNew+0x9e>
            mem = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	61bb      	str	r3, [r7, #24]
 800a2bc:	e001      	b.n	800a2c2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d10c      	bne.n	800a2e2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	4b12      	ldr	r3, [pc, #72]	; (800a318 <osTimerNew+0xf4>)
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	69fa      	ldr	r2, [r7, #28]
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2da:	f002 fa74 	bl	800c7c6 <xTimerCreateStatic>
 800a2de:	6238      	str	r0, [r7, #32]
 800a2e0:	e00b      	b.n	800a2fa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d108      	bne.n	800a2fa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a2e8:	4b0b      	ldr	r3, [pc, #44]	; (800a318 <osTimerNew+0xf4>)
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	69fa      	ldr	r2, [r7, #28]
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2f4:	f002 fa46 	bl	800c784 <xTimerCreate>
 800a2f8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d105      	bne.n	800a30c <osTimerNew+0xe8>
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <osTimerNew+0xe8>
        vPortFree (callb);
 800a306:	6978      	ldr	r0, [r7, #20]
 800a308:	f000 f908 	bl	800a51c <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a30c:	6a3b      	ldr	r3, [r7, #32]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3728      	adds	r7, #40	; 0x28
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	0800a1fb 	.word	0x0800a1fb

0800a31c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af02      	add	r7, sp, #8
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a32a:	f3ef 8305 	mrs	r3, IPSR
 800a32e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a330:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <osTimerStart+0x22>
    stat = osErrorISR;
 800a336:	f06f 0305 	mvn.w	r3, #5
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	e017      	b.n	800a36e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d103      	bne.n	800a34c <osTimerStart+0x30>
    stat = osErrorParameter;
 800a344:	f06f 0303 	mvn.w	r3, #3
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	e010      	b.n	800a36e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a34c:	2300      	movs	r3, #0
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	2300      	movs	r3, #0
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	2104      	movs	r1, #4
 800a356:	6938      	ldr	r0, [r7, #16]
 800a358:	f002 faae 	bl	800c8b8 <xTimerGenericCommand>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d102      	bne.n	800a368 <osTimerStart+0x4c>
      stat = osOK;
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]
 800a366:	e002      	b.n	800a36e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a368:	f06f 0302 	mvn.w	r3, #2
 800a36c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a36e:	697b      	ldr	r3, [r7, #20]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af02      	add	r7, sp, #8
 800a37e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a384:	f3ef 8305 	mrs	r3, IPSR
 800a388:	60fb      	str	r3, [r7, #12]
  return(result);
 800a38a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d003      	beq.n	800a398 <osTimerStop+0x20>
    stat = osErrorISR;
 800a390:	f06f 0305 	mvn.w	r3, #5
 800a394:	617b      	str	r3, [r7, #20]
 800a396:	e021      	b.n	800a3dc <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d103      	bne.n	800a3a6 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800a39e:	f06f 0303 	mvn.w	r3, #3
 800a3a2:	617b      	str	r3, [r7, #20]
 800a3a4:	e01a      	b.n	800a3dc <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800a3a6:	6938      	ldr	r0, [r7, #16]
 800a3a8:	f002 fd8c 	bl	800cec4 <xTimerIsTimerActive>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d103      	bne.n	800a3ba <osTimerStop+0x42>
      stat = osErrorResource;
 800a3b2:	f06f 0302 	mvn.w	r3, #2
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	e010      	b.n	800a3dc <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2103      	movs	r1, #3
 800a3c4:	6938      	ldr	r0, [r7, #16]
 800a3c6:	f002 fa77 	bl	800c8b8 <xTimerGenericCommand>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d102      	bne.n	800a3d6 <osTimerStop+0x5e>
        stat = osOK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	e002      	b.n	800a3dc <osTimerStop+0x64>
      } else {
        stat = osError;
 800a3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3da:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a3dc:	697b      	ldr	r3, [r7, #20]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3718      	adds	r7, #24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b086      	sub	sp, #24
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3f2:	f3ef 8305 	mrs	r3, IPSR
 800a3f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d102      	bne.n	800a404 <osTimerIsRunning+0x1e>
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <osTimerIsRunning+0x24>
    running = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	e004      	b.n	800a414 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 800a40a:	6938      	ldr	r0, [r7, #16]
 800a40c:	f002 fd5a 	bl	800cec4 <xTimerIsTimerActive>
 800a410:	4603      	mov	r3, r0
 800a412:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800a414:	697b      	ldr	r3, [r7, #20]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
	...

0800a420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	4a07      	ldr	r2, [pc, #28]	; (800a44c <vApplicationGetIdleTaskMemory+0x2c>)
 800a430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4a06      	ldr	r2, [pc, #24]	; (800a450 <vApplicationGetIdleTaskMemory+0x30>)
 800a436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2280      	movs	r2, #128	; 0x80
 800a43c:	601a      	str	r2, [r3, #0]
}
 800a43e:	bf00      	nop
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	200007a0 	.word	0x200007a0
 800a450:	2000095c 	.word	0x2000095c

0800a454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4a07      	ldr	r2, [pc, #28]	; (800a480 <vApplicationGetTimerTaskMemory+0x2c>)
 800a464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	4a06      	ldr	r2, [pc, #24]	; (800a484 <vApplicationGetTimerTaskMemory+0x30>)
 800a46a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a472:	601a      	str	r2, [r3, #0]
}
 800a474:	bf00      	nop
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	20000b5c 	.word	0x20000b5c
 800a484:	20000d18 	.word	0x20000d18

0800a488 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800a490:	2300      	movs	r3, #0
 800a492:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d004      	beq.n	800a4a8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f023 0307 	bic.w	r3, r3, #7
 800a4a4:	3308      	adds	r3, #8
 800a4a6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800a4a8:	f001 fb7a 	bl	800bba0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800a4ac:	4b18      	ldr	r3, [pc, #96]	; (800a510 <pvPortMalloc+0x88>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d105      	bne.n	800a4c0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800a4b4:	4b17      	ldr	r3, [pc, #92]	; (800a514 <pvPortMalloc+0x8c>)
 800a4b6:	f023 0307 	bic.w	r3, r3, #7
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	4b14      	ldr	r3, [pc, #80]	; (800a510 <pvPortMalloc+0x88>)
 800a4be:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800a4c0:	4b15      	ldr	r3, [pc, #84]	; (800a518 <pvPortMalloc+0x90>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f244 6247 	movw	r2, #17991	; 0x4647
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d813      	bhi.n	800a4f8 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800a4d0:	4b11      	ldr	r3, [pc, #68]	; (800a518 <pvPortMalloc+0x90>)
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	441a      	add	r2, r3
 800a4d8:	4b0f      	ldr	r3, [pc, #60]	; (800a518 <pvPortMalloc+0x90>)
 800a4da:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d90b      	bls.n	800a4f8 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800a4e0:	4b0b      	ldr	r3, [pc, #44]	; (800a510 <pvPortMalloc+0x88>)
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <pvPortMalloc+0x90>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	; (800a518 <pvPortMalloc+0x90>)
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	4a08      	ldr	r2, [pc, #32]	; (800a518 <pvPortMalloc+0x90>)
 800a4f6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4f8:	f001 fb98 	bl	800bc2c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a502:	f7f8 fa6d 	bl	80029e0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800a506:	68fb      	ldr	r3, [r7, #12]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	2000736c 	.word	0x2000736c
 800a514:	20002d20 	.word	0x20002d20
 800a518:	20007368 	.word	0x20007368

0800a51c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00a      	beq.n	800a540 <vPortFree+0x24>
	__asm volatile
 800a52a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	60fb      	str	r3, [r7, #12]
}
 800a53c:	bf00      	nop
 800a53e:	e7fe      	b.n	800a53e <vPortFree+0x22>
}
 800a540:	bf00      	nop
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f103 0208 	add.w	r2, r3, #8
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f04f 32ff 	mov.w	r2, #4294967295
 800a564:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f103 0208 	add.w	r2, r3, #8
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f103 0208 	add.w	r2, r3, #8
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a59a:	bf00      	nop
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	689a      	ldr	r2, [r3, #8]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	601a      	str	r2, [r3, #0]
}
 800a5e2:	bf00      	nop
 800a5e4:	3714      	adds	r7, #20
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b085      	sub	sp, #20
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a604:	d103      	bne.n	800a60e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	e00c      	b.n	800a628 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	3308      	adds	r3, #8
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	e002      	b.n	800a61c <vListInsert+0x2e>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	429a      	cmp	r2, r3
 800a626:	d2f6      	bcs.n	800a616 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	683a      	ldr	r2, [r7, #0]
 800a642:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	601a      	str	r2, [r3, #0]
}
 800a654:	bf00      	nop
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	6892      	ldr	r2, [r2, #8]
 800a676:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	6852      	ldr	r2, [r2, #4]
 800a680:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d103      	bne.n	800a694 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	1e5a      	subs	r2, r3, #1
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3b04      	subs	r3, #4
 800a6c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3b04      	subs	r3, #4
 800a6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	f023 0201 	bic.w	r2, r3, #1
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3b04      	subs	r3, #4
 800a6e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6e4:	4a0c      	ldr	r2, [pc, #48]	; (800a718 <pxPortInitialiseStack+0x64>)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3b14      	subs	r3, #20
 800a6ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3b04      	subs	r3, #4
 800a6fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f06f 0202 	mvn.w	r2, #2
 800a702:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3b20      	subs	r3, #32
 800a708:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a70a:	68fb      	ldr	r3, [r7, #12]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	0800a71d 	.word	0x0800a71d

0800a71c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a726:	4b12      	ldr	r3, [pc, #72]	; (800a770 <prvTaskExitError+0x54>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d00a      	beq.n	800a746 <prvTaskExitError+0x2a>
	__asm volatile
 800a730:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	60fb      	str	r3, [r7, #12]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <prvTaskExitError+0x28>
	__asm volatile
 800a746:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	60bb      	str	r3, [r7, #8]
}
 800a758:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a75a:	bf00      	nop
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0fc      	beq.n	800a75c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a762:	bf00      	nop
 800a764:	bf00      	nop
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	20000028 	.word	0x20000028
	...

0800a780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a780:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <pxCurrentTCBConst2>)
 800a782:	6819      	ldr	r1, [r3, #0]
 800a784:	6808      	ldr	r0, [r1, #0]
 800a786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78a:	f380 8809 	msr	PSP, r0
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f04f 0000 	mov.w	r0, #0
 800a796:	f380 8811 	msr	BASEPRI, r0
 800a79a:	4770      	bx	lr
 800a79c:	f3af 8000 	nop.w

0800a7a0 <pxCurrentTCBConst2>:
 800a7a0:	200073b8 	.word	0x200073b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7a8:	4808      	ldr	r0, [pc, #32]	; (800a7cc <prvPortStartFirstTask+0x24>)
 800a7aa:	6800      	ldr	r0, [r0, #0]
 800a7ac:	6800      	ldr	r0, [r0, #0]
 800a7ae:	f380 8808 	msr	MSP, r0
 800a7b2:	f04f 0000 	mov.w	r0, #0
 800a7b6:	f380 8814 	msr	CONTROL, r0
 800a7ba:	b662      	cpsie	i
 800a7bc:	b661      	cpsie	f
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	df00      	svc	0
 800a7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ca:	bf00      	nop
 800a7cc:	e000ed08 	.word	0xe000ed08

0800a7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7d6:	4b46      	ldr	r3, [pc, #280]	; (800a8f0 <xPortStartScheduler+0x120>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a46      	ldr	r2, [pc, #280]	; (800a8f4 <xPortStartScheduler+0x124>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d10a      	bne.n	800a7f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a7e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	613b      	str	r3, [r7, #16]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7f6:	4b3e      	ldr	r3, [pc, #248]	; (800a8f0 <xPortStartScheduler+0x120>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a3f      	ldr	r2, [pc, #252]	; (800a8f8 <xPortStartScheduler+0x128>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d10a      	bne.n	800a816 <xPortStartScheduler+0x46>
	__asm volatile
 800a800:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	60fb      	str	r3, [r7, #12]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a816:	4b39      	ldr	r3, [pc, #228]	; (800a8fc <xPortStartScheduler+0x12c>)
 800a818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	22ff      	movs	r2, #255	; 0xff
 800a826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	4b31      	ldr	r3, [pc, #196]	; (800a900 <xPortStartScheduler+0x130>)
 800a83c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a83e:	4b31      	ldr	r3, [pc, #196]	; (800a904 <xPortStartScheduler+0x134>)
 800a840:	2207      	movs	r2, #7
 800a842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a844:	e009      	b.n	800a85a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a846:	4b2f      	ldr	r3, [pc, #188]	; (800a904 <xPortStartScheduler+0x134>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	4a2d      	ldr	r2, [pc, #180]	; (800a904 <xPortStartScheduler+0x134>)
 800a84e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	b2db      	uxtb	r3, r3
 800a858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a85a:	78fb      	ldrb	r3, [r7, #3]
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a862:	2b80      	cmp	r3, #128	; 0x80
 800a864:	d0ef      	beq.n	800a846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a866:	4b27      	ldr	r3, [pc, #156]	; (800a904 <xPortStartScheduler+0x134>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f1c3 0307 	rsb	r3, r3, #7
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d00a      	beq.n	800a888 <xPortStartScheduler+0xb8>
	__asm volatile
 800a872:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	60bb      	str	r3, [r7, #8]
}
 800a884:	bf00      	nop
 800a886:	e7fe      	b.n	800a886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a888:	4b1e      	ldr	r3, [pc, #120]	; (800a904 <xPortStartScheduler+0x134>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	021b      	lsls	r3, r3, #8
 800a88e:	4a1d      	ldr	r2, [pc, #116]	; (800a904 <xPortStartScheduler+0x134>)
 800a890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a892:	4b1c      	ldr	r3, [pc, #112]	; (800a904 <xPortStartScheduler+0x134>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a89a:	4a1a      	ldr	r2, [pc, #104]	; (800a904 <xPortStartScheduler+0x134>)
 800a89c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8a6:	4b18      	ldr	r3, [pc, #96]	; (800a908 <xPortStartScheduler+0x138>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a17      	ldr	r2, [pc, #92]	; (800a908 <xPortStartScheduler+0x138>)
 800a8ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8b2:	4b15      	ldr	r3, [pc, #84]	; (800a908 <xPortStartScheduler+0x138>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a14      	ldr	r2, [pc, #80]	; (800a908 <xPortStartScheduler+0x138>)
 800a8b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8be:	f000 f8dd 	bl	800aa7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8c2:	4b12      	ldr	r3, [pc, #72]	; (800a90c <xPortStartScheduler+0x13c>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8c8:	f000 f8fc 	bl	800aac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8cc:	4b10      	ldr	r3, [pc, #64]	; (800a910 <xPortStartScheduler+0x140>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0f      	ldr	r2, [pc, #60]	; (800a910 <xPortStartScheduler+0x140>)
 800a8d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8d8:	f7ff ff66 	bl	800a7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8dc:	f001 fb16 	bl	800bf0c <vTaskSwitchContext>
	prvTaskExitError();
 800a8e0:	f7ff ff1c 	bl	800a71c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	e000ed00 	.word	0xe000ed00
 800a8f4:	410fc271 	.word	0x410fc271
 800a8f8:	410fc270 	.word	0x410fc270
 800a8fc:	e000e400 	.word	0xe000e400
 800a900:	20007370 	.word	0x20007370
 800a904:	20007374 	.word	0x20007374
 800a908:	e000ed20 	.word	0xe000ed20
 800a90c:	20000028 	.word	0x20000028
 800a910:	e000ef34 	.word	0xe000ef34

0800a914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
	__asm volatile
 800a91a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	607b      	str	r3, [r7, #4]
}
 800a92c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a92e:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <vPortEnterCritical+0x58>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3301      	adds	r3, #1
 800a934:	4a0d      	ldr	r2, [pc, #52]	; (800a96c <vPortEnterCritical+0x58>)
 800a936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a938:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <vPortEnterCritical+0x58>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d10f      	bne.n	800a960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a940:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <vPortEnterCritical+0x5c>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00a      	beq.n	800a960 <vPortEnterCritical+0x4c>
	__asm volatile
 800a94a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	603b      	str	r3, [r7, #0]
}
 800a95c:	bf00      	nop
 800a95e:	e7fe      	b.n	800a95e <vPortEnterCritical+0x4a>
	}
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	20000028 	.word	0x20000028
 800a970:	e000ed04 	.word	0xe000ed04

0800a974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a97a:	4b12      	ldr	r3, [pc, #72]	; (800a9c4 <vPortExitCritical+0x50>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10a      	bne.n	800a998 <vPortExitCritical+0x24>
	__asm volatile
 800a982:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	607b      	str	r3, [r7, #4]
}
 800a994:	bf00      	nop
 800a996:	e7fe      	b.n	800a996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a998:	4b0a      	ldr	r3, [pc, #40]	; (800a9c4 <vPortExitCritical+0x50>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3b01      	subs	r3, #1
 800a99e:	4a09      	ldr	r2, [pc, #36]	; (800a9c4 <vPortExitCritical+0x50>)
 800a9a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9a2:	4b08      	ldr	r3, [pc, #32]	; (800a9c4 <vPortExitCritical+0x50>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d105      	bne.n	800a9b6 <vPortExitCritical+0x42>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	f383 8811 	msr	BASEPRI, r3
}
 800a9b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9b6:	bf00      	nop
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	20000028 	.word	0x20000028
	...

0800a9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9d0:	f3ef 8009 	mrs	r0, PSP
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <pxCurrentTCBConst>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	f01e 0f10 	tst.w	lr, #16
 800a9e0:	bf08      	it	eq
 800a9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ea:	6010      	str	r0, [r2, #0]
 800a9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9f0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800a9f4:	f380 8811 	msr	BASEPRI, r0
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f001 fa84 	bl	800bf0c <vTaskSwitchContext>
 800aa04:	f04f 0000 	mov.w	r0, #0
 800aa08:	f380 8811 	msr	BASEPRI, r0
 800aa0c:	bc09      	pop	{r0, r3}
 800aa0e:	6819      	ldr	r1, [r3, #0]
 800aa10:	6808      	ldr	r0, [r1, #0]
 800aa12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa16:	f01e 0f10 	tst.w	lr, #16
 800aa1a:	bf08      	it	eq
 800aa1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa20:	f380 8809 	msr	PSP, r0
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w

0800aa30 <pxCurrentTCBConst>:
 800aa30:	200073b8 	.word	0x200073b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop

0800aa38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	607b      	str	r3, [r7, #4]
}
 800aa50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa52:	f001 f999 	bl	800bd88 <xTaskIncrementTick>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d003      	beq.n	800aa64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa5c:	4b06      	ldr	r3, [pc, #24]	; (800aa78 <xPortSysTickHandler+0x40>)
 800aa5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	2300      	movs	r3, #0
 800aa66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	f383 8811 	msr	BASEPRI, r3
}
 800aa6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa70:	bf00      	nop
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	e000ed04 	.word	0xe000ed04

0800aa7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa80:	4b0b      	ldr	r3, [pc, #44]	; (800aab0 <vPortSetupTimerInterrupt+0x34>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa86:	4b0b      	ldr	r3, [pc, #44]	; (800aab4 <vPortSetupTimerInterrupt+0x38>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa8c:	4b0a      	ldr	r3, [pc, #40]	; (800aab8 <vPortSetupTimerInterrupt+0x3c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a0a      	ldr	r2, [pc, #40]	; (800aabc <vPortSetupTimerInterrupt+0x40>)
 800aa92:	fba2 2303 	umull	r2, r3, r2, r3
 800aa96:	099b      	lsrs	r3, r3, #6
 800aa98:	4a09      	ldr	r2, [pc, #36]	; (800aac0 <vPortSetupTimerInterrupt+0x44>)
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa9e:	4b04      	ldr	r3, [pc, #16]	; (800aab0 <vPortSetupTimerInterrupt+0x34>)
 800aaa0:	2207      	movs	r2, #7
 800aaa2:	601a      	str	r2, [r3, #0]
}
 800aaa4:	bf00      	nop
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	e000e010 	.word	0xe000e010
 800aab4:	e000e018 	.word	0xe000e018
 800aab8:	20000000 	.word	0x20000000
 800aabc:	10624dd3 	.word	0x10624dd3
 800aac0:	e000e014 	.word	0xe000e014

0800aac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aad4 <vPortEnableVFP+0x10>
 800aac8:	6801      	ldr	r1, [r0, #0]
 800aaca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aace:	6001      	str	r1, [r0, #0]
 800aad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aad2:	bf00      	nop
 800aad4:	e000ed88 	.word	0xe000ed88

0800aad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aade:	f3ef 8305 	mrs	r3, IPSR
 800aae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b0f      	cmp	r3, #15
 800aae8:	d914      	bls.n	800ab14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aaea:	4a17      	ldr	r2, [pc, #92]	; (800ab48 <vPortValidateInterruptPriority+0x70>)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	4413      	add	r3, r2
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aaf4:	4b15      	ldr	r3, [pc, #84]	; (800ab4c <vPortValidateInterruptPriority+0x74>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	7afa      	ldrb	r2, [r7, #11]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d20a      	bcs.n	800ab14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aafe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	607b      	str	r3, [r7, #4]
}
 800ab10:	bf00      	nop
 800ab12:	e7fe      	b.n	800ab12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab14:	4b0e      	ldr	r3, [pc, #56]	; (800ab50 <vPortValidateInterruptPriority+0x78>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab1c:	4b0d      	ldr	r3, [pc, #52]	; (800ab54 <vPortValidateInterruptPriority+0x7c>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d90a      	bls.n	800ab3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	603b      	str	r3, [r7, #0]
}
 800ab36:	bf00      	nop
 800ab38:	e7fe      	b.n	800ab38 <vPortValidateInterruptPriority+0x60>
	}
 800ab3a:	bf00      	nop
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	e000e3f0 	.word	0xe000e3f0
 800ab4c:	20007370 	.word	0x20007370
 800ab50:	e000ed0c 	.word	0xe000ed0c
 800ab54:	20007374 	.word	0x20007374

0800ab58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d10a      	bne.n	800ab82 <xQueueGenericReset+0x2a>
	__asm volatile
 800ab6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	60bb      	str	r3, [r7, #8]
}
 800ab7e:	bf00      	nop
 800ab80:	e7fe      	b.n	800ab80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab82:	f7ff fec7 	bl	800a914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8e:	68f9      	ldr	r1, [r7, #12]
 800ab90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab92:	fb01 f303 	mul.w	r3, r1, r3
 800ab96:	441a      	add	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb2:	3b01      	subs	r3, #1
 800abb4:	68f9      	ldr	r1, [r7, #12]
 800abb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abb8:	fb01 f303 	mul.w	r3, r1, r3
 800abbc:	441a      	add	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	22ff      	movs	r2, #255	; 0xff
 800abc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	22ff      	movs	r2, #255	; 0xff
 800abce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d114      	bne.n	800ac02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01a      	beq.n	800ac16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3310      	adds	r3, #16
 800abe4:	4618      	mov	r0, r3
 800abe6:	f001 fa99 	bl	800c11c <xTaskRemoveFromEventList>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d012      	beq.n	800ac16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abf0:	4b0c      	ldr	r3, [pc, #48]	; (800ac24 <xQueueGenericReset+0xcc>)
 800abf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	e009      	b.n	800ac16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3310      	adds	r3, #16
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7ff fca0 	bl	800a54c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	3324      	adds	r3, #36	; 0x24
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7ff fc9b 	bl	800a54c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac16:	f7ff fead 	bl	800a974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac1a:	2301      	movs	r3, #1
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	e000ed04 	.word	0xe000ed04

0800ac28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b08e      	sub	sp, #56	; 0x38
 800ac2c:	af02      	add	r7, sp, #8
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
 800ac34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac4e:	bf00      	nop
 800ac50:	e7fe      	b.n	800ac50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10a      	bne.n	800ac6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <xQueueGenericCreateStatic+0x52>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <xQueueGenericCreateStatic+0x56>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <xQueueGenericCreateStatic+0x58>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10a      	bne.n	800ac9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	623b      	str	r3, [r7, #32]
}
 800ac96:	bf00      	nop
 800ac98:	e7fe      	b.n	800ac98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d102      	bne.n	800aca6 <xQueueGenericCreateStatic+0x7e>
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <xQueueGenericCreateStatic+0x82>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e000      	b.n	800acac <xQueueGenericCreateStatic+0x84>
 800acaa:	2300      	movs	r3, #0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10a      	bne.n	800acc6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800acb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	61fb      	str	r3, [r7, #28]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acc6:	2350      	movs	r3, #80	; 0x50
 800acc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b50      	cmp	r3, #80	; 0x50
 800acce:	d00a      	beq.n	800ace6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800acd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	61bb      	str	r3, [r7, #24]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ace6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00d      	beq.n	800ad0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800acfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	4613      	mov	r3, r2
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	68b9      	ldr	r1, [r7, #8]
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f000 f805 	bl	800ad18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3730      	adds	r7, #48	; 0x30
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d103      	bne.n	800ad34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	69ba      	ldr	r2, [r7, #24]
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	e002      	b.n	800ad3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad46:	2101      	movs	r1, #1
 800ad48:	69b8      	ldr	r0, [r7, #24]
 800ad4a:	f7ff ff05 	bl	800ab58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	78fa      	ldrb	r2, [r7, #3]
 800ad52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad56:	bf00      	nop
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
	...

0800ad60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08e      	sub	sp, #56	; 0x38
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10a      	bne.n	800ad92 <xQueueGenericSend+0x32>
	__asm volatile
 800ad7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad8e:	bf00      	nop
 800ad90:	e7fe      	b.n	800ad90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d103      	bne.n	800ada0 <xQueueGenericSend+0x40>
 800ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <xQueueGenericSend+0x44>
 800ada0:	2301      	movs	r3, #1
 800ada2:	e000      	b.n	800ada6 <xQueueGenericSend+0x46>
 800ada4:	2300      	movs	r3, #0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10a      	bne.n	800adc0 <xQueueGenericSend+0x60>
	__asm volatile
 800adaa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adbc:	bf00      	nop
 800adbe:	e7fe      	b.n	800adbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d103      	bne.n	800adce <xQueueGenericSend+0x6e>
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d101      	bne.n	800add2 <xQueueGenericSend+0x72>
 800adce:	2301      	movs	r3, #1
 800add0:	e000      	b.n	800add4 <xQueueGenericSend+0x74>
 800add2:	2300      	movs	r3, #0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <xQueueGenericSend+0x8e>
	__asm volatile
 800add8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	623b      	str	r3, [r7, #32]
}
 800adea:	bf00      	nop
 800adec:	e7fe      	b.n	800adec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adee:	f001 fb95 	bl	800c51c <xTaskGetSchedulerState>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d102      	bne.n	800adfe <xQueueGenericSend+0x9e>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <xQueueGenericSend+0xa2>
 800adfe:	2301      	movs	r3, #1
 800ae00:	e000      	b.n	800ae04 <xQueueGenericSend+0xa4>
 800ae02:	2300      	movs	r3, #0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10a      	bne.n	800ae1e <xQueueGenericSend+0xbe>
	__asm volatile
 800ae08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae0c:	f383 8811 	msr	BASEPRI, r3
 800ae10:	f3bf 8f6f 	isb	sy
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	61fb      	str	r3, [r7, #28]
}
 800ae1a:	bf00      	nop
 800ae1c:	e7fe      	b.n	800ae1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae1e:	f7ff fd79 	bl	800a914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d302      	bcc.n	800ae34 <xQueueGenericSend+0xd4>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d129      	bne.n	800ae88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae3a:	f000 fa0b 	bl	800b254 <prvCopyDataToQueue>
 800ae3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d010      	beq.n	800ae6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	3324      	adds	r3, #36	; 0x24
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f001 f965 	bl	800c11c <xTaskRemoveFromEventList>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d013      	beq.n	800ae80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae58:	4b3f      	ldr	r3, [pc, #252]	; (800af58 <xQueueGenericSend+0x1f8>)
 800ae5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	e00a      	b.n	800ae80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d007      	beq.n	800ae80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae70:	4b39      	ldr	r3, [pc, #228]	; (800af58 <xQueueGenericSend+0x1f8>)
 800ae72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae80:	f7ff fd78 	bl	800a974 <vPortExitCritical>
				return pdPASS;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e063      	b.n	800af50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d103      	bne.n	800ae96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae8e:	f7ff fd71 	bl	800a974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	e05c      	b.n	800af50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d106      	bne.n	800aeaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	4618      	mov	r0, r3
 800aea2:	f001 f9a1 	bl	800c1e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aea6:	2301      	movs	r3, #1
 800aea8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aeaa:	f7ff fd63 	bl	800a974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeae:	f000 fe77 	bl	800bba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeb2:	f7ff fd2f 	bl	800a914 <vPortEnterCritical>
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aebc:	b25b      	sxtb	r3, r3
 800aebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec2:	d103      	bne.n	800aecc <xQueueGenericSend+0x16c>
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aed2:	b25b      	sxtb	r3, r3
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed8:	d103      	bne.n	800aee2 <xQueueGenericSend+0x182>
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aee2:	f7ff fd47 	bl	800a974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aee6:	1d3a      	adds	r2, r7, #4
 800aee8:	f107 0314 	add.w	r3, r7, #20
 800aeec:	4611      	mov	r1, r2
 800aeee:	4618      	mov	r0, r3
 800aef0:	f001 f990 	bl	800c214 <xTaskCheckForTimeOut>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d124      	bne.n	800af44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aefa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefc:	f000 faa2 	bl	800b444 <prvIsQueueFull>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d018      	beq.n	800af38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af08:	3310      	adds	r3, #16
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	4611      	mov	r1, r2
 800af0e:	4618      	mov	r0, r3
 800af10:	f001 f8b4 	bl	800c07c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af16:	f000 fa2d 	bl	800b374 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af1a:	f000 fe87 	bl	800bc2c <xTaskResumeAll>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	f47f af7c 	bne.w	800ae1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af26:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <xQueueGenericSend+0x1f8>)
 800af28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	e772      	b.n	800ae1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af3a:	f000 fa1b 	bl	800b374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af3e:	f000 fe75 	bl	800bc2c <xTaskResumeAll>
 800af42:	e76c      	b.n	800ae1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af46:	f000 fa15 	bl	800b374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af4a:	f000 fe6f 	bl	800bc2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af50:	4618      	mov	r0, r3
 800af52:	3738      	adds	r7, #56	; 0x38
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	e000ed04 	.word	0xe000ed04

0800af5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b090      	sub	sp, #64	; 0x40
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af86:	bf00      	nop
 800af88:	e7fe      	b.n	800af88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d103      	bne.n	800af98 <xQueueGenericSendFromISR+0x3c>
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <xQueueGenericSendFromISR+0x40>
 800af98:	2301      	movs	r3, #1
 800af9a:	e000      	b.n	800af9e <xQueueGenericSendFromISR+0x42>
 800af9c:	2300      	movs	r3, #0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10a      	bne.n	800afb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800afa2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afb4:	bf00      	nop
 800afb6:	e7fe      	b.n	800afb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d103      	bne.n	800afc6 <xQueueGenericSendFromISR+0x6a>
 800afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d101      	bne.n	800afca <xQueueGenericSendFromISR+0x6e>
 800afc6:	2301      	movs	r3, #1
 800afc8:	e000      	b.n	800afcc <xQueueGenericSendFromISR+0x70>
 800afca:	2300      	movs	r3, #0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10a      	bne.n	800afe6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	623b      	str	r3, [r7, #32]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afe6:	f7ff fd77 	bl	800aad8 <vPortValidateInterruptPriority>
	__asm volatile
 800afea:	f3ef 8211 	mrs	r2, BASEPRI
 800afee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	61fa      	str	r2, [r7, #28]
 800b000:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b002:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b004:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00e:	429a      	cmp	r2, r3
 800b010:	d302      	bcc.n	800b018 <xQueueGenericSendFromISR+0xbc>
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2b02      	cmp	r3, #2
 800b016:	d12f      	bne.n	800b078 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b02e:	f000 f911 	bl	800b254 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b032:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03a:	d112      	bne.n	800b062 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	d016      	beq.n	800b072 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b046:	3324      	adds	r3, #36	; 0x24
 800b048:	4618      	mov	r0, r3
 800b04a:	f001 f867 	bl	800c11c <xTaskRemoveFromEventList>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00e      	beq.n	800b072 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00b      	beq.n	800b072 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2201      	movs	r2, #1
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	e007      	b.n	800b072 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b066:	3301      	adds	r3, #1
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	b25a      	sxtb	r2, r3
 800b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b072:	2301      	movs	r3, #1
 800b074:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b076:	e001      	b.n	800b07c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b078:	2300      	movs	r3, #0
 800b07a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f383 8811 	msr	BASEPRI, r3
}
 800b086:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3740      	adds	r7, #64	; 0x40
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
	...

0800b094 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b08c      	sub	sp, #48	; 0x30
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10a      	bne.n	800b0c4 <xQueueReceive+0x30>
	__asm volatile
 800b0ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b0b2:	f383 8811 	msr	BASEPRI, r3
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	623b      	str	r3, [r7, #32]
}
 800b0c0:	bf00      	nop
 800b0c2:	e7fe      	b.n	800b0c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d103      	bne.n	800b0d2 <xQueueReceive+0x3e>
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <xQueueReceive+0x42>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <xQueueReceive+0x44>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10a      	bne.n	800b0f2 <xQueueReceive+0x5e>
	__asm volatile
 800b0dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b0e0:	f383 8811 	msr	BASEPRI, r3
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	61fb      	str	r3, [r7, #28]
}
 800b0ee:	bf00      	nop
 800b0f0:	e7fe      	b.n	800b0f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0f2:	f001 fa13 	bl	800c51c <xTaskGetSchedulerState>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d102      	bne.n	800b102 <xQueueReceive+0x6e>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <xQueueReceive+0x72>
 800b102:	2301      	movs	r3, #1
 800b104:	e000      	b.n	800b108 <xQueueReceive+0x74>
 800b106:	2300      	movs	r3, #0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10a      	bne.n	800b122 <xQueueReceive+0x8e>
	__asm volatile
 800b10c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	61bb      	str	r3, [r7, #24]
}
 800b11e:	bf00      	nop
 800b120:	e7fe      	b.n	800b120 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b122:	f7ff fbf7 	bl	800a914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b12a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d01f      	beq.n	800b172 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b132:	68b9      	ldr	r1, [r7, #8]
 800b134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b136:	f000 f8f7 	bl	800b328 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	1e5a      	subs	r2, r3, #1
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00f      	beq.n	800b16a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14c:	3310      	adds	r3, #16
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 ffe4 	bl	800c11c <xTaskRemoveFromEventList>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d007      	beq.n	800b16a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b15a:	4b3d      	ldr	r3, [pc, #244]	; (800b250 <xQueueReceive+0x1bc>)
 800b15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b16a:	f7ff fc03 	bl	800a974 <vPortExitCritical>
				return pdPASS;
 800b16e:	2301      	movs	r3, #1
 800b170:	e069      	b.n	800b246 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d103      	bne.n	800b180 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b178:	f7ff fbfc 	bl	800a974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b17c:	2300      	movs	r3, #0
 800b17e:	e062      	b.n	800b246 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b182:	2b00      	cmp	r3, #0
 800b184:	d106      	bne.n	800b194 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b186:	f107 0310 	add.w	r3, r7, #16
 800b18a:	4618      	mov	r0, r3
 800b18c:	f001 f82c 	bl	800c1e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b190:	2301      	movs	r3, #1
 800b192:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b194:	f7ff fbee 	bl	800a974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b198:	f000 fd02 	bl	800bba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b19c:	f7ff fbba 	bl	800a914 <vPortEnterCritical>
 800b1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1a6:	b25b      	sxtb	r3, r3
 800b1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ac:	d103      	bne.n	800b1b6 <xQueueReceive+0x122>
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1bc:	b25b      	sxtb	r3, r3
 800b1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c2:	d103      	bne.n	800b1cc <xQueueReceive+0x138>
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1cc:	f7ff fbd2 	bl	800a974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1d0:	1d3a      	adds	r2, r7, #4
 800b1d2:	f107 0310 	add.w	r3, r7, #16
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f001 f81b 	bl	800c214 <xTaskCheckForTimeOut>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d123      	bne.n	800b22c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e6:	f000 f917 	bl	800b418 <prvIsQueueEmpty>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d017      	beq.n	800b220 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	3324      	adds	r3, #36	; 0x24
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f000 ff3f 	bl	800c07c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b200:	f000 f8b8 	bl	800b374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b204:	f000 fd12 	bl	800bc2c <xTaskResumeAll>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d189      	bne.n	800b122 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b20e:	4b10      	ldr	r3, [pc, #64]	; (800b250 <xQueueReceive+0x1bc>)
 800b210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	e780      	b.n	800b122 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b222:	f000 f8a7 	bl	800b374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b226:	f000 fd01 	bl	800bc2c <xTaskResumeAll>
 800b22a:	e77a      	b.n	800b122 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b22e:	f000 f8a1 	bl	800b374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b232:	f000 fcfb 	bl	800bc2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b238:	f000 f8ee 	bl	800b418 <prvIsQueueEmpty>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f43f af6f 	beq.w	800b122 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b246:	4618      	mov	r0, r3
 800b248:	3730      	adds	r7, #48	; 0x30
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	e000ed04 	.word	0xe000ed04

0800b254 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b260:	2300      	movs	r3, #0
 800b262:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10d      	bne.n	800b28e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d14d      	bne.n	800b316 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 f96a 	bl	800c558 <xTaskPriorityDisinherit>
 800b284:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	609a      	str	r2, [r3, #8]
 800b28c:	e043      	b.n	800b316 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d119      	bne.n	800b2c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6858      	ldr	r0, [r3, #4]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29c:	461a      	mov	r2, r3
 800b29e:	68b9      	ldr	r1, [r7, #8]
 800b2a0:	f003 f856 	bl	800e350 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ac:	441a      	add	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d32b      	bcc.n	800b316 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	605a      	str	r2, [r3, #4]
 800b2c6:	e026      	b.n	800b316 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68d8      	ldr	r0, [r3, #12]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	68b9      	ldr	r1, [r7, #8]
 800b2d4:	f003 f83c 	bl	800e350 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	68da      	ldr	r2, [r3, #12]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e0:	425b      	negs	r3, r3
 800b2e2:	441a      	add	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68da      	ldr	r2, [r3, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d207      	bcs.n	800b304 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	689a      	ldr	r2, [r3, #8]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fc:	425b      	negs	r3, r3
 800b2fe:	441a      	add	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b02      	cmp	r3, #2
 800b308:	d105      	bne.n	800b316 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	3b01      	subs	r3, #1
 800b314:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1c5a      	adds	r2, r3, #1
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b31e:	697b      	ldr	r3, [r7, #20]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b336:	2b00      	cmp	r3, #0
 800b338:	d018      	beq.n	800b36c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68da      	ldr	r2, [r3, #12]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b342:	441a      	add	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68da      	ldr	r2, [r3, #12]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	429a      	cmp	r2, r3
 800b352:	d303      	bcc.n	800b35c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68d9      	ldr	r1, [r3, #12]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b364:	461a      	mov	r2, r3
 800b366:	6838      	ldr	r0, [r7, #0]
 800b368:	f002 fff2 	bl	800e350 <memcpy>
	}
}
 800b36c:	bf00      	nop
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b37c:	f7ff faca 	bl	800a914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b386:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b388:	e011      	b.n	800b3ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d012      	beq.n	800b3b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3324      	adds	r3, #36	; 0x24
 800b396:	4618      	mov	r0, r3
 800b398:	f000 fec0 	bl	800c11c <xTaskRemoveFromEventList>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d001      	beq.n	800b3a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3a2:	f000 ffa9 	bl	800c2f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	dce9      	bgt.n	800b38a <prvUnlockQueue+0x16>
 800b3b6:	e000      	b.n	800b3ba <prvUnlockQueue+0x46>
					break;
 800b3b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	22ff      	movs	r2, #255	; 0xff
 800b3be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3c2:	f7ff fad7 	bl	800a974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3c6:	f7ff faa5 	bl	800a914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3d2:	e011      	b.n	800b3f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d012      	beq.n	800b402 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3310      	adds	r3, #16
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 fe9b 	bl	800c11c <xTaskRemoveFromEventList>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3ec:	f000 ff84 	bl	800c2f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3f0:	7bbb      	ldrb	r3, [r7, #14]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	dce9      	bgt.n	800b3d4 <prvUnlockQueue+0x60>
 800b400:	e000      	b.n	800b404 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b402:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	22ff      	movs	r2, #255	; 0xff
 800b408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b40c:	f7ff fab2 	bl	800a974 <vPortExitCritical>
}
 800b410:	bf00      	nop
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b420:	f7ff fa78 	bl	800a914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d102      	bne.n	800b432 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b42c:	2301      	movs	r3, #1
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	e001      	b.n	800b436 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b432:	2300      	movs	r3, #0
 800b434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b436:	f7ff fa9d 	bl	800a974 <vPortExitCritical>

	return xReturn;
 800b43a:	68fb      	ldr	r3, [r7, #12]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b44c:	f7ff fa62 	bl	800a914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b458:	429a      	cmp	r2, r3
 800b45a:	d102      	bne.n	800b462 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b45c:	2301      	movs	r3, #1
 800b45e:	60fb      	str	r3, [r7, #12]
 800b460:	e001      	b.n	800b466 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b466:	f7ff fa85 	bl	800a974 <vPortExitCritical>

	return xReturn;
 800b46a:	68fb      	ldr	r3, [r7, #12]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b47e:	2300      	movs	r3, #0
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	e014      	b.n	800b4ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b484:	4a0f      	ldr	r2, [pc, #60]	; (800b4c4 <vQueueAddToRegistry+0x50>)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10b      	bne.n	800b4a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b490:	490c      	ldr	r1, [pc, #48]	; (800b4c4 <vQueueAddToRegistry+0x50>)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b49a:	4a0a      	ldr	r2, [pc, #40]	; (800b4c4 <vQueueAddToRegistry+0x50>)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	4413      	add	r3, r2
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b4a6:	e006      	b.n	800b4b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	60fb      	str	r3, [r7, #12]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b07      	cmp	r3, #7
 800b4b2:	d9e7      	bls.n	800b484 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	20007378 	.word	0x20007378

0800b4c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b4d8:	f7ff fa1c 	bl	800a914 <vPortEnterCritical>
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4e2:	b25b      	sxtb	r3, r3
 800b4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e8:	d103      	bne.n	800b4f2 <vQueueWaitForMessageRestricted+0x2a>
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4f8:	b25b      	sxtb	r3, r3
 800b4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fe:	d103      	bne.n	800b508 <vQueueWaitForMessageRestricted+0x40>
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2200      	movs	r2, #0
 800b504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b508:	f7ff fa34 	bl	800a974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b510:	2b00      	cmp	r3, #0
 800b512:	d106      	bne.n	800b522 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	3324      	adds	r3, #36	; 0x24
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	68b9      	ldr	r1, [r7, #8]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 fdd1 	bl	800c0c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b522:	6978      	ldr	r0, [r7, #20]
 800b524:	f7ff ff26 	bl	800b374 <prvUnlockQueue>
	}
 800b528:	bf00      	nop
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08e      	sub	sp, #56	; 0x38
 800b534:	af04      	add	r7, sp, #16
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
 800b53c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10a      	bne.n	800b55a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b544:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	623b      	str	r3, [r7, #32]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10a      	bne.n	800b576 <xTaskCreateStatic+0x46>
	__asm volatile
 800b560:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	61fb      	str	r3, [r7, #28]
}
 800b572:	bf00      	nop
 800b574:	e7fe      	b.n	800b574 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b576:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800b57a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800b582:	d00a      	beq.n	800b59a <xTaskCreateStatic+0x6a>
	__asm volatile
 800b584:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	61bb      	str	r3, [r7, #24]
}
 800b596:	bf00      	nop
 800b598:	e7fe      	b.n	800b598 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b59a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d01e      	beq.n	800b5e0 <xTaskCreateStatic+0xb0>
 800b5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d01b      	beq.n	800b5e0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	9303      	str	r3, [sp, #12]
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	9302      	str	r3, [sp, #8]
 800b5c2:	f107 0314 	add.w	r3, r7, #20
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	68b9      	ldr	r1, [r7, #8]
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 f852 	bl	800b67c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5da:	f000 f90b 	bl	800b7f4 <prvAddNewTaskToReadyList>
 800b5de:	e001      	b.n	800b5e4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5e4:	697b      	ldr	r3, [r7, #20]
	}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3728      	adds	r7, #40	; 0x28
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b08c      	sub	sp, #48	; 0x30
 800b5f2:	af04      	add	r7, sp, #16
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	603b      	str	r3, [r7, #0]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5fe:	88fb      	ldrh	r3, [r7, #6]
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4618      	mov	r0, r3
 800b604:	f7fe ff40 	bl	800a488 <pvPortMalloc>
 800b608:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00f      	beq.n	800b630 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b610:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800b614:	f7fe ff38 	bl	800a488 <pvPortMalloc>
 800b618:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d003      	beq.n	800b628 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	631a      	str	r2, [r3, #48]	; 0x30
 800b626:	e005      	b.n	800b634 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b628:	6978      	ldr	r0, [r7, #20]
 800b62a:	f7fe ff77 	bl	800a51c <vPortFree>
 800b62e:	e001      	b.n	800b634 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b630:	2300      	movs	r3, #0
 800b632:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d017      	beq.n	800b66a <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b642:	88fa      	ldrh	r2, [r7, #6]
 800b644:	2300      	movs	r3, #0
 800b646:	9303      	str	r3, [sp, #12]
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	9302      	str	r3, [sp, #8]
 800b64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64e:	9301      	str	r3, [sp, #4]
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	68b9      	ldr	r1, [r7, #8]
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f000 f80f 	bl	800b67c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b65e:	69f8      	ldr	r0, [r7, #28]
 800b660:	f000 f8c8 	bl	800b7f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b664:	2301      	movs	r3, #1
 800b666:	61bb      	str	r3, [r7, #24]
 800b668:	e002      	b.n	800b670 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b66a:	f04f 33ff 	mov.w	r3, #4294967295
 800b66e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b670:	69bb      	ldr	r3, [r7, #24]
	}
 800b672:	4618      	mov	r0, r3
 800b674:	3720      	adds	r7, #32
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
	...

0800b67c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b088      	sub	sp, #32
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	461a      	mov	r2, r3
 800b694:	21a5      	movs	r1, #165	; 0xa5
 800b696:	f002 fe69 	bl	800e36c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	4413      	add	r3, r2
 800b6aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	f023 0307 	bic.w	r3, r3, #7
 800b6b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	f003 0307 	and.w	r3, r3, #7
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00a      	beq.n	800b6d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	617b      	str	r3, [r7, #20]
}
 800b6d0:	bf00      	nop
 800b6d2:	e7fe      	b.n	800b6d2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d01f      	beq.n	800b722 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61fb      	str	r3, [r7, #28]
 800b6e6:	e012      	b.n	800b70e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	7819      	ldrb	r1, [r3, #0]
 800b6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	3334      	adds	r3, #52	; 0x34
 800b6f8:	460a      	mov	r2, r1
 800b6fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	4413      	add	r3, r2
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d006      	beq.n	800b716 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	3301      	adds	r3, #1
 800b70c:	61fb      	str	r3, [r7, #28]
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	2bfe      	cmp	r3, #254	; 0xfe
 800b712:	d9e9      	bls.n	800b6e8 <prvInitialiseNewTask+0x6c>
 800b714:	e000      	b.n	800b718 <prvInitialiseNewTask+0x9c>
			{
				break;
 800b716:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	2200      	movs	r2, #0
 800b71c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800b720:	e003      	b.n	800b72a <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	2200      	movs	r2, #0
 800b726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72c:	2b37      	cmp	r3, #55	; 0x37
 800b72e:	d901      	bls.n	800b734 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b730:	2337      	movs	r3, #55	; 0x37
 800b732:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b738:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b73e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	2200      	movs	r2, #0
 800b746:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	3304      	adds	r3, #4
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe ff1c 	bl	800a58c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	3318      	adds	r3, #24
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe ff17 	bl	800a58c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b762:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b772:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	2200      	movs	r2, #0
 800b778:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	2200      	movs	r2, #0
 800b780:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b786:	2200      	movs	r2, #0
 800b788:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b79a:	2260      	movs	r2, #96	; 0x60
 800b79c:	2100      	movs	r1, #0
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f002 fde4 	bl	800e36c <memset>
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	4a10      	ldr	r2, [pc, #64]	; (800b7e8 <prvInitialiseNewTask+0x16c>)
 800b7a8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ae:	4a0f      	ldr	r2, [pc, #60]	; (800b7ec <prvInitialiseNewTask+0x170>)
 800b7b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b6:	4a0e      	ldr	r2, [pc, #56]	; (800b7f0 <prvInitialiseNewTask+0x174>)
 800b7b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800b7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	68f9      	ldr	r1, [r7, #12]
 800b7c8:	69b8      	ldr	r0, [r7, #24]
 800b7ca:	f7fe ff73 	bl	800a6b4 <pxPortInitialiseStack>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7e0:	bf00      	nop
 800b7e2:	3720      	adds	r7, #32
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	0800eb1c 	.word	0x0800eb1c
 800b7ec:	0800eb3c 	.word	0x0800eb3c
 800b7f0:	0800eafc 	.word	0x0800eafc

0800b7f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7fc:	f7ff f88a 	bl	800a914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b800:	4b2d      	ldr	r3, [pc, #180]	; (800b8b8 <prvAddNewTaskToReadyList+0xc4>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	3301      	adds	r3, #1
 800b806:	4a2c      	ldr	r2, [pc, #176]	; (800b8b8 <prvAddNewTaskToReadyList+0xc4>)
 800b808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b80a:	4b2c      	ldr	r3, [pc, #176]	; (800b8bc <prvAddNewTaskToReadyList+0xc8>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d109      	bne.n	800b826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b812:	4a2a      	ldr	r2, [pc, #168]	; (800b8bc <prvAddNewTaskToReadyList+0xc8>)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b818:	4b27      	ldr	r3, [pc, #156]	; (800b8b8 <prvAddNewTaskToReadyList+0xc4>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d110      	bne.n	800b842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b820:	f000 fdb8 	bl	800c394 <prvInitialiseTaskLists>
 800b824:	e00d      	b.n	800b842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b826:	4b26      	ldr	r3, [pc, #152]	; (800b8c0 <prvAddNewTaskToReadyList+0xcc>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d109      	bne.n	800b842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b82e:	4b23      	ldr	r3, [pc, #140]	; (800b8bc <prvAddNewTaskToReadyList+0xc8>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b838:	429a      	cmp	r2, r3
 800b83a:	d802      	bhi.n	800b842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b83c:	4a1f      	ldr	r2, [pc, #124]	; (800b8bc <prvAddNewTaskToReadyList+0xc8>)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b842:	4b20      	ldr	r3, [pc, #128]	; (800b8c4 <prvAddNewTaskToReadyList+0xd0>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3301      	adds	r3, #1
 800b848:	4a1e      	ldr	r2, [pc, #120]	; (800b8c4 <prvAddNewTaskToReadyList+0xd0>)
 800b84a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b84c:	4b1d      	ldr	r3, [pc, #116]	; (800b8c4 <prvAddNewTaskToReadyList+0xd0>)
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85a:	4b1b      	ldr	r3, [pc, #108]	; (800b8c8 <prvAddNewTaskToReadyList+0xd4>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d903      	bls.n	800b86a <prvAddNewTaskToReadyList+0x76>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b866:	4a18      	ldr	r2, [pc, #96]	; (800b8c8 <prvAddNewTaskToReadyList+0xd4>)
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86e:	4613      	mov	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4413      	add	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4a15      	ldr	r2, [pc, #84]	; (800b8cc <prvAddNewTaskToReadyList+0xd8>)
 800b878:	441a      	add	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	3304      	adds	r3, #4
 800b87e:	4619      	mov	r1, r3
 800b880:	4610      	mov	r0, r2
 800b882:	f7fe fe90 	bl	800a5a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b886:	f7ff f875 	bl	800a974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b88a:	4b0d      	ldr	r3, [pc, #52]	; (800b8c0 <prvAddNewTaskToReadyList+0xcc>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00e      	beq.n	800b8b0 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b892:	4b0a      	ldr	r3, [pc, #40]	; (800b8bc <prvAddNewTaskToReadyList+0xc8>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d207      	bcs.n	800b8b0 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b8a0:	4b0b      	ldr	r3, [pc, #44]	; (800b8d0 <prvAddNewTaskToReadyList+0xdc>)
 800b8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8a6:	601a      	str	r2, [r3, #0]
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8b0:	bf00      	nop
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	20007890 	.word	0x20007890
 800b8bc:	200073b8 	.word	0x200073b8
 800b8c0:	2000789c 	.word	0x2000789c
 800b8c4:	200078ac 	.word	0x200078ac
 800b8c8:	20007898 	.word	0x20007898
 800b8cc:	200073bc 	.word	0x200073bc
 800b8d0:	e000ed04 	.word	0xe000ed04

0800b8d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08a      	sub	sp, #40	; 0x28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <vTaskDelayUntil+0x2a>
	__asm volatile
 800b8e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	617b      	str	r3, [r7, #20]
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <vTaskDelayUntil+0x46>
	__asm volatile
 800b904:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	613b      	str	r3, [r7, #16]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b91a:	4b2a      	ldr	r3, [pc, #168]	; (800b9c4 <vTaskDelayUntil+0xf0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00a      	beq.n	800b938 <vTaskDelayUntil+0x64>
	__asm volatile
 800b922:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	60fb      	str	r3, [r7, #12]
}
 800b934:	bf00      	nop
 800b936:	e7fe      	b.n	800b936 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b938:	f000 f932 	bl	800bba0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b93c:	4b22      	ldr	r3, [pc, #136]	; (800b9c8 <vTaskDelayUntil+0xf4>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	4413      	add	r3, r2
 800b94a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6a3a      	ldr	r2, [r7, #32]
 800b952:	429a      	cmp	r2, r3
 800b954:	d20b      	bcs.n	800b96e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	69fa      	ldr	r2, [r7, #28]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d211      	bcs.n	800b984 <vTaskDelayUntil+0xb0>
 800b960:	69fa      	ldr	r2, [r7, #28]
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	429a      	cmp	r2, r3
 800b966:	d90d      	bls.n	800b984 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b968:	2301      	movs	r3, #1
 800b96a:	627b      	str	r3, [r7, #36]	; 0x24
 800b96c:	e00a      	b.n	800b984 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	69fa      	ldr	r2, [r7, #28]
 800b974:	429a      	cmp	r2, r3
 800b976:	d303      	bcc.n	800b980 <vTaskDelayUntil+0xac>
 800b978:	69fa      	ldr	r2, [r7, #28]
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d901      	bls.n	800b984 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b980:	2301      	movs	r3, #1
 800b982:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	69fa      	ldr	r2, [r7, #28]
 800b988:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d006      	beq.n	800b99e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b990:	69fa      	ldr	r2, [r7, #28]
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	2100      	movs	r1, #0
 800b998:	4618      	mov	r0, r3
 800b99a:	f000 fe51 	bl	800c640 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b99e:	f000 f945 	bl	800bc2c <xTaskResumeAll>
 800b9a2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d107      	bne.n	800b9ba <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b9aa:	4b08      	ldr	r3, [pc, #32]	; (800b9cc <vTaskDelayUntil+0xf8>)
 800b9ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9ba:	bf00      	nop
 800b9bc:	3728      	adds	r7, #40	; 0x28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	200078b8 	.word	0x200078b8
 800b9c8:	20007894 	.word	0x20007894
 800b9cc:	e000ed04 	.word	0xe000ed04

0800b9d0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b9d8:	f7fe ff9c 	bl	800a914 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d102      	bne.n	800b9e8 <vTaskSuspend+0x18>
 800b9e2:	4b30      	ldr	r3, [pc, #192]	; (800baa4 <vTaskSuspend+0xd4>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	e000      	b.n	800b9ea <vTaskSuspend+0x1a>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7fe fe35 	bl	800a660 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d004      	beq.n	800ba08 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	3318      	adds	r3, #24
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fe fe2c 	bl	800a660 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	3304      	adds	r3, #4
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4826      	ldr	r0, [pc, #152]	; (800baa8 <vTaskSuspend+0xd8>)
 800ba10:	f7fe fdc9 	bl	800a5a6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d103      	bne.n	800ba28 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ba28:	f7fe ffa4 	bl	800a974 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ba2c:	4b1f      	ldr	r3, [pc, #124]	; (800baac <vTaskSuspend+0xdc>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d005      	beq.n	800ba40 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ba34:	f7fe ff6e 	bl	800a914 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ba38:	f000 fd50 	bl	800c4dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ba3c:	f7fe ff9a 	bl	800a974 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ba40:	4b18      	ldr	r3, [pc, #96]	; (800baa4 <vTaskSuspend+0xd4>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d127      	bne.n	800ba9a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800ba4a:	4b18      	ldr	r3, [pc, #96]	; (800baac <vTaskSuspend+0xdc>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d017      	beq.n	800ba82 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ba52:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <vTaskSuspend+0xe0>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00a      	beq.n	800ba70 <vTaskSuspend+0xa0>
	__asm volatile
 800ba5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	60bb      	str	r3, [r7, #8]
}
 800ba6c:	bf00      	nop
 800ba6e:	e7fe      	b.n	800ba6e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ba70:	4b10      	ldr	r3, [pc, #64]	; (800bab4 <vTaskSuspend+0xe4>)
 800ba72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba80:	e00b      	b.n	800ba9a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ba82:	4b09      	ldr	r3, [pc, #36]	; (800baa8 <vTaskSuspend+0xd8>)
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <vTaskSuspend+0xe8>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d103      	bne.n	800ba96 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800ba8e:	4b05      	ldr	r3, [pc, #20]	; (800baa4 <vTaskSuspend+0xd4>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	601a      	str	r2, [r3, #0]
	}
 800ba94:	e001      	b.n	800ba9a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800ba96:	f000 fa39 	bl	800bf0c <vTaskSwitchContext>
	}
 800ba9a:	bf00      	nop
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	200073b8 	.word	0x200073b8
 800baa8:	20007878 	.word	0x20007878
 800baac:	2000789c 	.word	0x2000789c
 800bab0:	200078b8 	.word	0x200078b8
 800bab4:	e000ed04 	.word	0xe000ed04
 800bab8:	20007890 	.word	0x20007890

0800babc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b08a      	sub	sp, #40	; 0x28
 800bac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800baca:	463a      	mov	r2, r7
 800bacc:	1d39      	adds	r1, r7, #4
 800bace:	f107 0308 	add.w	r3, r7, #8
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fca4 	bl	800a420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	9202      	str	r2, [sp, #8]
 800bae0:	9301      	str	r3, [sp, #4]
 800bae2:	2300      	movs	r3, #0
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	2300      	movs	r3, #0
 800bae8:	460a      	mov	r2, r1
 800baea:	4925      	ldr	r1, [pc, #148]	; (800bb80 <vTaskStartScheduler+0xc4>)
 800baec:	4825      	ldr	r0, [pc, #148]	; (800bb84 <vTaskStartScheduler+0xc8>)
 800baee:	f7ff fd1f 	bl	800b530 <xTaskCreateStatic>
 800baf2:	4603      	mov	r3, r0
 800baf4:	4a24      	ldr	r2, [pc, #144]	; (800bb88 <vTaskStartScheduler+0xcc>)
 800baf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800baf8:	4b23      	ldr	r3, [pc, #140]	; (800bb88 <vTaskStartScheduler+0xcc>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb00:	2301      	movs	r3, #1
 800bb02:	617b      	str	r3, [r7, #20]
 800bb04:	e001      	b.n	800bb0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb06:	2300      	movs	r3, #0
 800bb08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d102      	bne.n	800bb16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bb10:	f000 fdf0 	bl	800c6f4 <xTimerCreateTimerTask>
 800bb14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d11e      	bne.n	800bb5a <vTaskStartScheduler+0x9e>
	__asm volatile
 800bb1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	613b      	str	r3, [r7, #16]
}
 800bb2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb30:	4b16      	ldr	r3, [pc, #88]	; (800bb8c <vTaskStartScheduler+0xd0>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb38:	4a15      	ldr	r2, [pc, #84]	; (800bb90 <vTaskStartScheduler+0xd4>)
 800bb3a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb3c:	4b15      	ldr	r3, [pc, #84]	; (800bb94 <vTaskStartScheduler+0xd8>)
 800bb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb44:	4b14      	ldr	r3, [pc, #80]	; (800bb98 <vTaskStartScheduler+0xdc>)
 800bb46:	2201      	movs	r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb4a:	4b14      	ldr	r3, [pc, #80]	; (800bb9c <vTaskStartScheduler+0xe0>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800bb50:	f7f6 ff14 	bl	800297c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb54:	f7fe fe3c 	bl	800a7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb58:	e00e      	b.n	800bb78 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb60:	d10a      	bne.n	800bb78 <vTaskStartScheduler+0xbc>
	__asm volatile
 800bb62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	60fb      	str	r3, [r7, #12]
}
 800bb74:	bf00      	nop
 800bb76:	e7fe      	b.n	800bb76 <vTaskStartScheduler+0xba>
}
 800bb78:	bf00      	nop
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	0800e880 	.word	0x0800e880
 800bb84:	0800c311 	.word	0x0800c311
 800bb88:	200078b4 	.word	0x200078b4
 800bb8c:	200073b8 	.word	0x200073b8
 800bb90:	2000002c 	.word	0x2000002c
 800bb94:	200078b0 	.word	0x200078b0
 800bb98:	2000789c 	.word	0x2000789c
 800bb9c:	20007894 	.word	0x20007894

0800bba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bba0:	b480      	push	{r7}
 800bba2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bba4:	4b04      	ldr	r3, [pc, #16]	; (800bbb8 <vTaskSuspendAll+0x18>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	4a03      	ldr	r2, [pc, #12]	; (800bbb8 <vTaskSuspendAll+0x18>)
 800bbac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bbae:	bf00      	nop
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	200078b8 	.word	0x200078b8

0800bbbc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800bbc6:	4b14      	ldr	r3, [pc, #80]	; (800bc18 <prvGetExpectedIdleTime+0x5c>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800bbd2:	4b12      	ldr	r3, [pc, #72]	; (800bc1c <prvGetExpectedIdleTime+0x60>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	607b      	str	r3, [r7, #4]
 800bbe0:	e012      	b.n	800bc08 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800bbe2:	4b0f      	ldr	r3, [pc, #60]	; (800bc20 <prvGetExpectedIdleTime+0x64>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d902      	bls.n	800bbf0 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	607b      	str	r3, [r7, #4]
 800bbee:	e00b      	b.n	800bc08 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d002      	beq.n	800bbfc <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	607b      	str	r3, [r7, #4]
 800bbfa:	e005      	b.n	800bc08 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800bbfc:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <prvGetExpectedIdleTime+0x68>)
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	4b09      	ldr	r3, [pc, #36]	; (800bc28 <prvGetExpectedIdleTime+0x6c>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800bc08:	687b      	ldr	r3, [r7, #4]
	}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	20007898 	.word	0x20007898
 800bc1c:	200073b8 	.word	0x200073b8
 800bc20:	200073bc 	.word	0x200073bc
 800bc24:	200078b0 	.word	0x200078b0
 800bc28:	20007894 	.word	0x20007894

0800bc2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc32:	2300      	movs	r3, #0
 800bc34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc36:	2300      	movs	r3, #0
 800bc38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc3a:	4b42      	ldr	r3, [pc, #264]	; (800bd44 <xTaskResumeAll+0x118>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <xTaskResumeAll+0x2c>
	__asm volatile
 800bc42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	603b      	str	r3, [r7, #0]
}
 800bc54:	bf00      	nop
 800bc56:	e7fe      	b.n	800bc56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc58:	f7fe fe5c 	bl	800a914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc5c:	4b39      	ldr	r3, [pc, #228]	; (800bd44 <xTaskResumeAll+0x118>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	4a38      	ldr	r2, [pc, #224]	; (800bd44 <xTaskResumeAll+0x118>)
 800bc64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc66:	4b37      	ldr	r3, [pc, #220]	; (800bd44 <xTaskResumeAll+0x118>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d162      	bne.n	800bd34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc6e:	4b36      	ldr	r3, [pc, #216]	; (800bd48 <xTaskResumeAll+0x11c>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d05e      	beq.n	800bd34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc76:	e02f      	b.n	800bcd8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc78:	4b34      	ldr	r3, [pc, #208]	; (800bd4c <xTaskResumeAll+0x120>)
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	3318      	adds	r3, #24
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7fe fceb 	bl	800a660 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3304      	adds	r3, #4
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe fce6 	bl	800a660 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc98:	4b2d      	ldr	r3, [pc, #180]	; (800bd50 <xTaskResumeAll+0x124>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d903      	bls.n	800bca8 <xTaskResumeAll+0x7c>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	4a2a      	ldr	r2, [pc, #168]	; (800bd50 <xTaskResumeAll+0x124>)
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcac:	4613      	mov	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4a27      	ldr	r2, [pc, #156]	; (800bd54 <xTaskResumeAll+0x128>)
 800bcb6:	441a      	add	r2, r3
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	3304      	adds	r3, #4
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	4610      	mov	r0, r2
 800bcc0:	f7fe fc71 	bl	800a5a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc8:	4b23      	ldr	r3, [pc, #140]	; (800bd58 <xTaskResumeAll+0x12c>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d302      	bcc.n	800bcd8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bcd2:	4b22      	ldr	r3, [pc, #136]	; (800bd5c <xTaskResumeAll+0x130>)
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcd8:	4b1c      	ldr	r3, [pc, #112]	; (800bd4c <xTaskResumeAll+0x120>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1cb      	bne.n	800bc78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bce6:	f000 fbf9 	bl	800c4dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bcea:	4b1d      	ldr	r3, [pc, #116]	; (800bd60 <xTaskResumeAll+0x134>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d010      	beq.n	800bd18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bcf6:	f000 f847 	bl	800bd88 <xTaskIncrementTick>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd00:	4b16      	ldr	r3, [pc, #88]	; (800bd5c <xTaskResumeAll+0x130>)
 800bd02:	2201      	movs	r2, #1
 800bd04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1f1      	bne.n	800bcf6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd12:	4b13      	ldr	r3, [pc, #76]	; (800bd60 <xTaskResumeAll+0x134>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd18:	4b10      	ldr	r3, [pc, #64]	; (800bd5c <xTaskResumeAll+0x130>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d009      	beq.n	800bd34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd20:	2301      	movs	r3, #1
 800bd22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd24:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <xTaskResumeAll+0x138>)
 800bd26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2a:	601a      	str	r2, [r3, #0]
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd34:	f7fe fe1e 	bl	800a974 <vPortExitCritical>

	return xAlreadyYielded;
 800bd38:	68bb      	ldr	r3, [r7, #8]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	200078b8 	.word	0x200078b8
 800bd48:	20007890 	.word	0x20007890
 800bd4c:	2000784c 	.word	0x2000784c
 800bd50:	20007898 	.word	0x20007898
 800bd54:	200073bc 	.word	0x200073bc
 800bd58:	200073b8 	.word	0x200073b8
 800bd5c:	200078a4 	.word	0x200078a4
 800bd60:	200078a0 	.word	0x200078a0
 800bd64:	e000ed04 	.word	0xe000ed04

0800bd68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd6e:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <xTaskGetTickCount+0x1c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd74:	687b      	ldr	r3, [r7, #4]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	20007894 	.word	0x20007894

0800bd88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd92:	4b53      	ldr	r3, [pc, #332]	; (800bee0 <xTaskIncrementTick+0x158>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f040 8095 	bne.w	800bec6 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd9c:	4b51      	ldr	r3, [pc, #324]	; (800bee4 <xTaskIncrementTick+0x15c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3301      	adds	r3, #1
 800bda2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bda4:	4a4f      	ldr	r2, [pc, #316]	; (800bee4 <xTaskIncrementTick+0x15c>)
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d120      	bne.n	800bdf2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bdb0:	4b4d      	ldr	r3, [pc, #308]	; (800bee8 <xTaskIncrementTick+0x160>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00a      	beq.n	800bdd0 <xTaskIncrementTick+0x48>
	__asm volatile
 800bdba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	603b      	str	r3, [r7, #0]
}
 800bdcc:	bf00      	nop
 800bdce:	e7fe      	b.n	800bdce <xTaskIncrementTick+0x46>
 800bdd0:	4b45      	ldr	r3, [pc, #276]	; (800bee8 <xTaskIncrementTick+0x160>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	60fb      	str	r3, [r7, #12]
 800bdd6:	4b45      	ldr	r3, [pc, #276]	; (800beec <xTaskIncrementTick+0x164>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a43      	ldr	r2, [pc, #268]	; (800bee8 <xTaskIncrementTick+0x160>)
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	4a43      	ldr	r2, [pc, #268]	; (800beec <xTaskIncrementTick+0x164>)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	4b42      	ldr	r3, [pc, #264]	; (800bef0 <xTaskIncrementTick+0x168>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3301      	adds	r3, #1
 800bdea:	4a41      	ldr	r2, [pc, #260]	; (800bef0 <xTaskIncrementTick+0x168>)
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	f000 fb75 	bl	800c4dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bdf2:	4b40      	ldr	r3, [pc, #256]	; (800bef4 <xTaskIncrementTick+0x16c>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d349      	bcc.n	800be90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdfc:	4b3a      	ldr	r3, [pc, #232]	; (800bee8 <xTaskIncrementTick+0x160>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d104      	bne.n	800be10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be06:	4b3b      	ldr	r3, [pc, #236]	; (800bef4 <xTaskIncrementTick+0x16c>)
 800be08:	f04f 32ff 	mov.w	r2, #4294967295
 800be0c:	601a      	str	r2, [r3, #0]
					break;
 800be0e:	e03f      	b.n	800be90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be10:	4b35      	ldr	r3, [pc, #212]	; (800bee8 <xTaskIncrementTick+0x160>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be20:	693a      	ldr	r2, [r7, #16]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	429a      	cmp	r2, r3
 800be26:	d203      	bcs.n	800be30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be28:	4a32      	ldr	r2, [pc, #200]	; (800bef4 <xTaskIncrementTick+0x16c>)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be2e:	e02f      	b.n	800be90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	3304      	adds	r3, #4
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe fc13 	bl	800a660 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d004      	beq.n	800be4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	3318      	adds	r3, #24
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fc0a 	bl	800a660 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be50:	4b29      	ldr	r3, [pc, #164]	; (800bef8 <xTaskIncrementTick+0x170>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	429a      	cmp	r2, r3
 800be56:	d903      	bls.n	800be60 <xTaskIncrementTick+0xd8>
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5c:	4a26      	ldr	r2, [pc, #152]	; (800bef8 <xTaskIncrementTick+0x170>)
 800be5e:	6013      	str	r3, [r2, #0]
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be64:	4613      	mov	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4a23      	ldr	r2, [pc, #140]	; (800befc <xTaskIncrementTick+0x174>)
 800be6e:	441a      	add	r2, r3
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	3304      	adds	r3, #4
 800be74:	4619      	mov	r1, r3
 800be76:	4610      	mov	r0, r2
 800be78:	f7fe fb95 	bl	800a5a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be80:	4b1f      	ldr	r3, [pc, #124]	; (800bf00 <xTaskIncrementTick+0x178>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be86:	429a      	cmp	r2, r3
 800be88:	d3b8      	bcc.n	800bdfc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800be8a:	2301      	movs	r3, #1
 800be8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be8e:	e7b5      	b.n	800bdfc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be90:	4b1b      	ldr	r3, [pc, #108]	; (800bf00 <xTaskIncrementTick+0x178>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be96:	4919      	ldr	r1, [pc, #100]	; (800befc <xTaskIncrementTick+0x174>)
 800be98:	4613      	mov	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	440b      	add	r3, r1
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d901      	bls.n	800beac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bea8:	2301      	movs	r3, #1
 800beaa:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800beac:	4b15      	ldr	r3, [pc, #84]	; (800bf04 <xTaskIncrementTick+0x17c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800beb4:	f7f6 fd78 	bl	80029a8 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800beb8:	4b13      	ldr	r3, [pc, #76]	; (800bf08 <xTaskIncrementTick+0x180>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d009      	beq.n	800bed4 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800bec0:	2301      	movs	r3, #1
 800bec2:	617b      	str	r3, [r7, #20]
 800bec4:	e006      	b.n	800bed4 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bec6:	4b0f      	ldr	r3, [pc, #60]	; (800bf04 <xTaskIncrementTick+0x17c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3301      	adds	r3, #1
 800becc:	4a0d      	ldr	r2, [pc, #52]	; (800bf04 <xTaskIncrementTick+0x17c>)
 800bece:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800bed0:	f7f6 fd6a 	bl	80029a8 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800bed4:	697b      	ldr	r3, [r7, #20]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	200078b8 	.word	0x200078b8
 800bee4:	20007894 	.word	0x20007894
 800bee8:	20007844 	.word	0x20007844
 800beec:	20007848 	.word	0x20007848
 800bef0:	200078a8 	.word	0x200078a8
 800bef4:	200078b0 	.word	0x200078b0
 800bef8:	20007898 	.word	0x20007898
 800befc:	200073bc 	.word	0x200073bc
 800bf00:	200073b8 	.word	0x200073b8
 800bf04:	200078a0 	.word	0x200078a0
 800bf08:	200078a4 	.word	0x200078a4

0800bf0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf12:	4b51      	ldr	r3, [pc, #324]	; (800c058 <vTaskSwitchContext+0x14c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf1a:	4b50      	ldr	r3, [pc, #320]	; (800c05c <vTaskSwitchContext+0x150>)
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf20:	e095      	b.n	800c04e <vTaskSwitchContext+0x142>
		xYieldPending = pdFALSE;
 800bf22:	4b4e      	ldr	r3, [pc, #312]	; (800c05c <vTaskSwitchContext+0x150>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bf28:	f7f6 fd2f 	bl	800298a <getRunTimeCounterValue>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	4a4c      	ldr	r2, [pc, #304]	; (800c060 <vTaskSwitchContext+0x154>)
 800bf30:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bf32:	4b4b      	ldr	r3, [pc, #300]	; (800c060 <vTaskSwitchContext+0x154>)
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	4b4b      	ldr	r3, [pc, #300]	; (800c064 <vTaskSwitchContext+0x158>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d90b      	bls.n	800bf56 <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bf3e:	4b4a      	ldr	r3, [pc, #296]	; (800c068 <vTaskSwitchContext+0x15c>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800bf46:	4a46      	ldr	r2, [pc, #280]	; (800c060 <vTaskSwitchContext+0x154>)
 800bf48:	6810      	ldr	r0, [r2, #0]
 800bf4a:	4a46      	ldr	r2, [pc, #280]	; (800c064 <vTaskSwitchContext+0x158>)
 800bf4c:	6812      	ldr	r2, [r2, #0]
 800bf4e:	1a82      	subs	r2, r0, r2
 800bf50:	440a      	add	r2, r1
 800bf52:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bf56:	4b42      	ldr	r3, [pc, #264]	; (800c060 <vTaskSwitchContext+0x154>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a42      	ldr	r2, [pc, #264]	; (800c064 <vTaskSwitchContext+0x158>)
 800bf5c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bf5e:	4b42      	ldr	r3, [pc, #264]	; (800c068 <vTaskSwitchContext+0x15c>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf64:	613b      	str	r3, [r7, #16]
 800bf66:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800bf6a:	60fb      	str	r3, [r7, #12]
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d111      	bne.n	800bf9a <vTaskSwitchContext+0x8e>
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d10b      	bne.n	800bf9a <vTaskSwitchContext+0x8e>
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	3308      	adds	r3, #8
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d105      	bne.n	800bf9a <vTaskSwitchContext+0x8e>
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	330c      	adds	r3, #12
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d008      	beq.n	800bfac <vTaskSwitchContext+0xa0>
 800bf9a:	4b33      	ldr	r3, [pc, #204]	; (800c068 <vTaskSwitchContext+0x15c>)
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	4b32      	ldr	r3, [pc, #200]	; (800c068 <vTaskSwitchContext+0x15c>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3334      	adds	r3, #52	; 0x34
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	f7f6 fd0c 	bl	80029c4 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800bfac:	4b2e      	ldr	r3, [pc, #184]	; (800c068 <vTaskSwitchContext+0x15c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a2e      	ldr	r2, [pc, #184]	; (800c06c <vTaskSwitchContext+0x160>)
 800bfb2:	6812      	ldr	r2, [r2, #0]
 800bfb4:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfb8:	4b2d      	ldr	r3, [pc, #180]	; (800c070 <vTaskSwitchContext+0x164>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	617b      	str	r3, [r7, #20]
 800bfbe:	e010      	b.n	800bfe2 <vTaskSwitchContext+0xd6>
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10a      	bne.n	800bfdc <vTaskSwitchContext+0xd0>
	__asm volatile
 800bfc6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	607b      	str	r3, [r7, #4]
}
 800bfd8:	bf00      	nop
 800bfda:	e7fe      	b.n	800bfda <vTaskSwitchContext+0xce>
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	617b      	str	r3, [r7, #20]
 800bfe2:	4924      	ldr	r1, [pc, #144]	; (800c074 <vTaskSwitchContext+0x168>)
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	440b      	add	r3, r1
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d0e4      	beq.n	800bfc0 <vTaskSwitchContext+0xb4>
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	4613      	mov	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4a1c      	ldr	r2, [pc, #112]	; (800c074 <vTaskSwitchContext+0x168>)
 800c002:	4413      	add	r3, r2
 800c004:	60bb      	str	r3, [r7, #8]
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	605a      	str	r2, [r3, #4]
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	3308      	adds	r3, #8
 800c018:	429a      	cmp	r2, r3
 800c01a:	d104      	bne.n	800c026 <vTaskSwitchContext+0x11a>
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	685a      	ldr	r2, [r3, #4]
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	605a      	str	r2, [r3, #4]
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	4a0e      	ldr	r2, [pc, #56]	; (800c068 <vTaskSwitchContext+0x15c>)
 800c02e:	6013      	str	r3, [r2, #0]
 800c030:	4a0f      	ldr	r2, [pc, #60]	; (800c070 <vTaskSwitchContext+0x164>)
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800c036:	4b0c      	ldr	r3, [pc, #48]	; (800c068 <vTaskSwitchContext+0x15c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800c03e:	4a0b      	ldr	r2, [pc, #44]	; (800c06c <vTaskSwitchContext+0x160>)
 800c040:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c042:	4b09      	ldr	r3, [pc, #36]	; (800c068 <vTaskSwitchContext+0x15c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c04a:	4a0b      	ldr	r2, [pc, #44]	; (800c078 <vTaskSwitchContext+0x16c>)
 800c04c:	6013      	str	r3, [r2, #0]
}
 800c04e:	bf00      	nop
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	200078b8 	.word	0x200078b8
 800c05c:	200078a4 	.word	0x200078a4
 800c060:	200078c0 	.word	0x200078c0
 800c064:	200078bc 	.word	0x200078bc
 800c068:	200073b8 	.word	0x200073b8
 800c06c:	2000788c 	.word	0x2000788c
 800c070:	20007898 	.word	0x20007898
 800c074:	200073bc 	.word	0x200073bc
 800c078:	2000002c 	.word	0x2000002c

0800c07c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10a      	bne.n	800c0a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c08c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	60fb      	str	r3, [r7, #12]
}
 800c09e:	bf00      	nop
 800c0a0:	e7fe      	b.n	800c0a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0a2:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <vTaskPlaceOnEventList+0x44>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3318      	adds	r3, #24
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7fe fa9f 	bl	800a5ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	6838      	ldr	r0, [r7, #0]
 800c0b4:	f000 fac4 	bl	800c640 <prvAddCurrentTaskToDelayedList>
}
 800c0b8:	bf00      	nop
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	200073b8 	.word	0x200073b8

0800c0c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10a      	bne.n	800c0ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c0d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c0da:	f383 8811 	msr	BASEPRI, r3
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	617b      	str	r3, [r7, #20]
}
 800c0e8:	bf00      	nop
 800c0ea:	e7fe      	b.n	800c0ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0ec:	4b0a      	ldr	r3, [pc, #40]	; (800c118 <vTaskPlaceOnEventListRestricted+0x54>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	3318      	adds	r3, #24
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f7fe fa56 	bl	800a5a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c100:	f04f 33ff 	mov.w	r3, #4294967295
 800c104:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	68b8      	ldr	r0, [r7, #8]
 800c10a:	f000 fa99 	bl	800c640 <prvAddCurrentTaskToDelayedList>
	}
 800c10e:	bf00      	nop
 800c110:	3718      	adds	r7, #24
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	200073b8 	.word	0x200073b8

0800c11c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10a      	bne.n	800c148 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c132:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	60fb      	str	r3, [r7, #12]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	3318      	adds	r3, #24
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fe fa87 	bl	800a660 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c152:	4b1f      	ldr	r3, [pc, #124]	; (800c1d0 <xTaskRemoveFromEventList+0xb4>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d11f      	bne.n	800c19a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	3304      	adds	r3, #4
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fe fa7e 	bl	800a660 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c168:	4b1a      	ldr	r3, [pc, #104]	; (800c1d4 <xTaskRemoveFromEventList+0xb8>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d903      	bls.n	800c178 <xTaskRemoveFromEventList+0x5c>
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c174:	4a17      	ldr	r2, [pc, #92]	; (800c1d4 <xTaskRemoveFromEventList+0xb8>)
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17c:	4613      	mov	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4a14      	ldr	r2, [pc, #80]	; (800c1d8 <xTaskRemoveFromEventList+0xbc>)
 800c186:	441a      	add	r2, r3
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	3304      	adds	r3, #4
 800c18c:	4619      	mov	r1, r3
 800c18e:	4610      	mov	r0, r2
 800c190:	f7fe fa09 	bl	800a5a6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800c194:	f000 f9a2 	bl	800c4dc <prvResetNextTaskUnblockTime>
 800c198:	e005      	b.n	800c1a6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	3318      	adds	r3, #24
 800c19e:	4619      	mov	r1, r3
 800c1a0:	480e      	ldr	r0, [pc, #56]	; (800c1dc <xTaskRemoveFromEventList+0xc0>)
 800c1a2:	f7fe fa00 	bl	800a5a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1aa:	4b0d      	ldr	r3, [pc, #52]	; (800c1e0 <xTaskRemoveFromEventList+0xc4>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d905      	bls.n	800c1c0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1b8:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <xTaskRemoveFromEventList+0xc8>)
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	e001      	b.n	800c1c4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1c4:	697b      	ldr	r3, [r7, #20]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200078b8 	.word	0x200078b8
 800c1d4:	20007898 	.word	0x20007898
 800c1d8:	200073bc 	.word	0x200073bc
 800c1dc:	2000784c 	.word	0x2000784c
 800c1e0:	200073b8 	.word	0x200073b8
 800c1e4:	200078a4 	.word	0x200078a4

0800c1e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1f0:	4b06      	ldr	r3, [pc, #24]	; (800c20c <vTaskInternalSetTimeOutState+0x24>)
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c1f8:	4b05      	ldr	r3, [pc, #20]	; (800c210 <vTaskInternalSetTimeOutState+0x28>)
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	605a      	str	r2, [r3, #4]
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	200078a8 	.word	0x200078a8
 800c210:	20007894 	.word	0x20007894

0800c214 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b088      	sub	sp, #32
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10a      	bne.n	800c23a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c224:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	613b      	str	r3, [r7, #16]
}
 800c236:	bf00      	nop
 800c238:	e7fe      	b.n	800c238 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c240:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	60fb      	str	r3, [r7, #12]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c256:	f7fe fb5d 	bl	800a914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c25a:	4b24      	ldr	r3, [pc, #144]	; (800c2ec <xTaskCheckForTimeOut+0xd8>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	69ba      	ldr	r2, [r7, #24]
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800c26a:	4b21      	ldr	r3, [pc, #132]	; (800c2f0 <xTaskCheckForTimeOut+0xdc>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800c272:	2b00      	cmp	r3, #0
 800c274:	d007      	beq.n	800c286 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c276:	4b1e      	ldr	r3, [pc, #120]	; (800c2f0 <xTaskCheckForTimeOut+0xdc>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800c280:	2301      	movs	r3, #1
 800c282:	61fb      	str	r3, [r7, #28]
 800c284:	e02b      	b.n	800c2de <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28e:	d102      	bne.n	800c296 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c290:	2300      	movs	r3, #0
 800c292:	61fb      	str	r3, [r7, #28]
 800c294:	e023      	b.n	800c2de <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	4b16      	ldr	r3, [pc, #88]	; (800c2f4 <xTaskCheckForTimeOut+0xe0>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d007      	beq.n	800c2b2 <xTaskCheckForTimeOut+0x9e>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	69ba      	ldr	r2, [r7, #24]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d302      	bcc.n	800c2b2 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	61fb      	str	r3, [r7, #28]
 800c2b0:	e015      	b.n	800c2de <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d20b      	bcs.n	800c2d4 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	1ad2      	subs	r2, r2, r3
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f7ff ff8d 	bl	800c1e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	61fb      	str	r3, [r7, #28]
 800c2d2:	e004      	b.n	800c2de <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2de:	f7fe fb49 	bl	800a974 <vPortExitCritical>

	return xReturn;
 800c2e2:	69fb      	ldr	r3, [r7, #28]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3720      	adds	r7, #32
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20007894 	.word	0x20007894
 800c2f0:	200073b8 	.word	0x200073b8
 800c2f4:	200078a8 	.word	0x200078a8

0800c2f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2fc:	4b03      	ldr	r3, [pc, #12]	; (800c30c <vTaskMissedYield+0x14>)
 800c2fe:	2201      	movs	r2, #1
 800c300:	601a      	str	r2, [r3, #0]
}
 800c302:	bf00      	nop
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr
 800c30c:	200078a4 	.word	0x200078a4

0800c310 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c318:	f000 f87c 	bl	800c414 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c31c:	4b19      	ldr	r3, [pc, #100]	; (800c384 <prvIdleTask+0x74>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d907      	bls.n	800c334 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c324:	4b18      	ldr	r3, [pc, #96]	; (800c388 <prvIdleTask+0x78>)
 800c326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c334:	f7f6 fb31 	bl	800299a <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800c338:	f7ff fc40 	bl	800bbbc <prvGetExpectedIdleTime>
 800c33c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d9e9      	bls.n	800c318 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800c344:	f7ff fc2c 	bl	800bba0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800c348:	4b10      	ldr	r3, [pc, #64]	; (800c38c <prvIdleTask+0x7c>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	4b10      	ldr	r3, [pc, #64]	; (800c390 <prvIdleTask+0x80>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	429a      	cmp	r2, r3
 800c352:	d20a      	bcs.n	800c36a <prvIdleTask+0x5a>
	__asm volatile
 800c354:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	60bb      	str	r3, [r7, #8]
}
 800c366:	bf00      	nop
 800c368:	e7fe      	b.n	800c368 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800c36a:	f7ff fc27 	bl	800bbbc <prvGetExpectedIdleTime>
 800c36e:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d902      	bls.n	800c37c <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f7f6 fb3b 	bl	80029f2 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800c37c:	f7ff fc56 	bl	800bc2c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800c380:	e7ca      	b.n	800c318 <prvIdleTask+0x8>
 800c382:	bf00      	nop
 800c384:	200073bc 	.word	0x200073bc
 800c388:	e000ed04 	.word	0xe000ed04
 800c38c:	200078b0 	.word	0x200078b0
 800c390:	20007894 	.word	0x20007894

0800c394 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c39a:	2300      	movs	r3, #0
 800c39c:	607b      	str	r3, [r7, #4]
 800c39e:	e00c      	b.n	800c3ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4a12      	ldr	r2, [pc, #72]	; (800c3f4 <prvInitialiseTaskLists+0x60>)
 800c3ac:	4413      	add	r3, r2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fe f8cc 	bl	800a54c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	607b      	str	r3, [r7, #4]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b37      	cmp	r3, #55	; 0x37
 800c3be:	d9ef      	bls.n	800c3a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c3c0:	480d      	ldr	r0, [pc, #52]	; (800c3f8 <prvInitialiseTaskLists+0x64>)
 800c3c2:	f7fe f8c3 	bl	800a54c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c3c6:	480d      	ldr	r0, [pc, #52]	; (800c3fc <prvInitialiseTaskLists+0x68>)
 800c3c8:	f7fe f8c0 	bl	800a54c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c3cc:	480c      	ldr	r0, [pc, #48]	; (800c400 <prvInitialiseTaskLists+0x6c>)
 800c3ce:	f7fe f8bd 	bl	800a54c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c3d2:	480c      	ldr	r0, [pc, #48]	; (800c404 <prvInitialiseTaskLists+0x70>)
 800c3d4:	f7fe f8ba 	bl	800a54c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c3d8:	480b      	ldr	r0, [pc, #44]	; (800c408 <prvInitialiseTaskLists+0x74>)
 800c3da:	f7fe f8b7 	bl	800a54c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3de:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <prvInitialiseTaskLists+0x78>)
 800c3e0:	4a05      	ldr	r2, [pc, #20]	; (800c3f8 <prvInitialiseTaskLists+0x64>)
 800c3e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3e4:	4b0a      	ldr	r3, [pc, #40]	; (800c410 <prvInitialiseTaskLists+0x7c>)
 800c3e6:	4a05      	ldr	r2, [pc, #20]	; (800c3fc <prvInitialiseTaskLists+0x68>)
 800c3e8:	601a      	str	r2, [r3, #0]
}
 800c3ea:	bf00      	nop
 800c3ec:	3708      	adds	r7, #8
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	200073bc 	.word	0x200073bc
 800c3f8:	2000781c 	.word	0x2000781c
 800c3fc:	20007830 	.word	0x20007830
 800c400:	2000784c 	.word	0x2000784c
 800c404:	20007860 	.word	0x20007860
 800c408:	20007878 	.word	0x20007878
 800c40c:	20007844 	.word	0x20007844
 800c410:	20007848 	.word	0x20007848

0800c414 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c41a:	e019      	b.n	800c450 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c41c:	f7fe fa7a 	bl	800a914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c420:	4b10      	ldr	r3, [pc, #64]	; (800c464 <prvCheckTasksWaitingTermination+0x50>)
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	3304      	adds	r3, #4
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe f917 	bl	800a660 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c432:	4b0d      	ldr	r3, [pc, #52]	; (800c468 <prvCheckTasksWaitingTermination+0x54>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3b01      	subs	r3, #1
 800c438:	4a0b      	ldr	r2, [pc, #44]	; (800c468 <prvCheckTasksWaitingTermination+0x54>)
 800c43a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c43c:	4b0b      	ldr	r3, [pc, #44]	; (800c46c <prvCheckTasksWaitingTermination+0x58>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3b01      	subs	r3, #1
 800c442:	4a0a      	ldr	r2, [pc, #40]	; (800c46c <prvCheckTasksWaitingTermination+0x58>)
 800c444:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c446:	f7fe fa95 	bl	800a974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f810 	bl	800c470 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c450:	4b06      	ldr	r3, [pc, #24]	; (800c46c <prvCheckTasksWaitingTermination+0x58>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1e1      	bne.n	800c41c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20007860 	.word	0x20007860
 800c468:	20007890 	.word	0x20007890
 800c46c:	20007874 	.word	0x20007874

0800c470 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c47e:	4618      	mov	r0, r3
 800c480:	f001 ffd6 	bl	800e430 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d108      	bne.n	800c4a0 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c492:	4618      	mov	r0, r3
 800c494:	f7fe f842 	bl	800a51c <vPortFree>
				vPortFree( pxTCB );
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f7fe f83f 	bl	800a51c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c49e:	e018      	b.n	800c4d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d103      	bne.n	800c4b2 <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7fe f836 	bl	800a51c <vPortFree>
	}
 800c4b0:	e00f      	b.n	800c4d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d00a      	beq.n	800c4d2 <prvDeleteTCB+0x62>
	__asm volatile
 800c4bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c4c0:	f383 8811 	msr	BASEPRI, r3
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	60fb      	str	r3, [r7, #12]
}
 800c4ce:	bf00      	nop
 800c4d0:	e7fe      	b.n	800c4d0 <prvDeleteTCB+0x60>
	}
 800c4d2:	bf00      	nop
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
	...

0800c4dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4e2:	4b0c      	ldr	r3, [pc, #48]	; (800c514 <prvResetNextTaskUnblockTime+0x38>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d104      	bne.n	800c4f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4ec:	4b0a      	ldr	r3, [pc, #40]	; (800c518 <prvResetNextTaskUnblockTime+0x3c>)
 800c4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c4f4:	e008      	b.n	800c508 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4f6:	4b07      	ldr	r3, [pc, #28]	; (800c514 <prvResetNextTaskUnblockTime+0x38>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	4a04      	ldr	r2, [pc, #16]	; (800c518 <prvResetNextTaskUnblockTime+0x3c>)
 800c506:	6013      	str	r3, [r2, #0]
}
 800c508:	bf00      	nop
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	20007844 	.word	0x20007844
 800c518:	200078b0 	.word	0x200078b0

0800c51c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c522:	4b0b      	ldr	r3, [pc, #44]	; (800c550 <xTaskGetSchedulerState+0x34>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c52a:	2301      	movs	r3, #1
 800c52c:	607b      	str	r3, [r7, #4]
 800c52e:	e008      	b.n	800c542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c530:	4b08      	ldr	r3, [pc, #32]	; (800c554 <xTaskGetSchedulerState+0x38>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d102      	bne.n	800c53e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c538:	2302      	movs	r3, #2
 800c53a:	607b      	str	r3, [r7, #4]
 800c53c:	e001      	b.n	800c542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c53e:	2300      	movs	r3, #0
 800c540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c542:	687b      	ldr	r3, [r7, #4]
	}
 800c544:	4618      	mov	r0, r3
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	2000789c 	.word	0x2000789c
 800c554:	200078b8 	.word	0x200078b8

0800c558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c564:	2300      	movs	r3, #0
 800c566:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d05c      	beq.n	800c628 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c56e:	4b31      	ldr	r3, [pc, #196]	; (800c634 <xTaskPriorityDisinherit+0xdc>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	693a      	ldr	r2, [r7, #16]
 800c574:	429a      	cmp	r2, r3
 800c576:	d00a      	beq.n	800c58e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c578:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c57c:	f383 8811 	msr	BASEPRI, r3
 800c580:	f3bf 8f6f 	isb	sy
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	60fb      	str	r3, [r7, #12]
}
 800c58a:	bf00      	nop
 800c58c:	e7fe      	b.n	800c58c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10a      	bne.n	800c5ae <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800c598:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c59c:	f383 8811 	msr	BASEPRI, r3
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	60bb      	str	r3, [r7, #8]
}
 800c5aa:	bf00      	nop
 800c5ac:	e7fe      	b.n	800c5ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c5b4:	1e5a      	subs	r2, r3, #1
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d02e      	beq.n	800c628 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d129      	bne.n	800c628 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fe f841 	bl	800a660 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f8:	4b0f      	ldr	r3, [pc, #60]	; (800c638 <xTaskPriorityDisinherit+0xe0>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d903      	bls.n	800c608 <xTaskPriorityDisinherit+0xb0>
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c604:	4a0c      	ldr	r2, [pc, #48]	; (800c638 <xTaskPriorityDisinherit+0xe0>)
 800c606:	6013      	str	r3, [r2, #0]
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60c:	4613      	mov	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	4a09      	ldr	r2, [pc, #36]	; (800c63c <xTaskPriorityDisinherit+0xe4>)
 800c616:	441a      	add	r2, r3
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	3304      	adds	r3, #4
 800c61c:	4619      	mov	r1, r3
 800c61e:	4610      	mov	r0, r2
 800c620:	f7fd ffc1 	bl	800a5a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c624:	2301      	movs	r3, #1
 800c626:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c628:	697b      	ldr	r3, [r7, #20]
	}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3718      	adds	r7, #24
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	200073b8 	.word	0x200073b8
 800c638:	20007898 	.word	0x20007898
 800c63c:	200073bc 	.word	0x200073bc

0800c640 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c64a:	4b24      	ldr	r3, [pc, #144]	; (800c6dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c650:	4b23      	ldr	r3, [pc, #140]	; (800c6e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c65a:	4b21      	ldr	r3, [pc, #132]	; (800c6e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	3304      	adds	r3, #4
 800c660:	4618      	mov	r0, r3
 800c662:	f7fd fffd 	bl	800a660 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c66c:	d10a      	bne.n	800c684 <prvAddCurrentTaskToDelayedList+0x44>
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d007      	beq.n	800c684 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c674:	4b1a      	ldr	r3, [pc, #104]	; (800c6e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3304      	adds	r3, #4
 800c67a:	4619      	mov	r1, r3
 800c67c:	4819      	ldr	r0, [pc, #100]	; (800c6e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c67e:	f7fd ff92 	bl	800a5a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c682:	e026      	b.n	800c6d2 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4413      	add	r3, r2
 800c68a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c68c:	4b14      	ldr	r3, [pc, #80]	; (800c6e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d209      	bcs.n	800c6b0 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c69c:	4b12      	ldr	r3, [pc, #72]	; (800c6e8 <prvAddCurrentTaskToDelayedList+0xa8>)
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	4b0f      	ldr	r3, [pc, #60]	; (800c6e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	f7fd ffa0 	bl	800a5ee <vListInsert>
}
 800c6ae:	e010      	b.n	800c6d2 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6b0:	4b0e      	ldr	r3, [pc, #56]	; (800c6ec <prvAddCurrentTaskToDelayedList+0xac>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	3304      	adds	r3, #4
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	4610      	mov	r0, r2
 800c6be:	f7fd ff96 	bl	800a5ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c6c2:	4b0b      	ldr	r3, [pc, #44]	; (800c6f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d202      	bcs.n	800c6d2 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800c6cc:	4a08      	ldr	r2, [pc, #32]	; (800c6f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	6013      	str	r3, [r2, #0]
}
 800c6d2:	bf00      	nop
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	20007894 	.word	0x20007894
 800c6e0:	200073b8 	.word	0x200073b8
 800c6e4:	20007878 	.word	0x20007878
 800c6e8:	20007848 	.word	0x20007848
 800c6ec:	20007844 	.word	0x20007844
 800c6f0:	200078b0 	.word	0x200078b0

0800c6f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b08a      	sub	sp, #40	; 0x28
 800c6f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c6fe:	f000 fba1 	bl	800ce44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c702:	4b1c      	ldr	r3, [pc, #112]	; (800c774 <xTimerCreateTimerTask+0x80>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d021      	beq.n	800c74e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c70a:	2300      	movs	r3, #0
 800c70c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c70e:	2300      	movs	r3, #0
 800c710:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c712:	1d3a      	adds	r2, r7, #4
 800c714:	f107 0108 	add.w	r1, r7, #8
 800c718:	f107 030c 	add.w	r3, r7, #12
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fd fe99 	bl	800a454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c722:	6879      	ldr	r1, [r7, #4]
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	9202      	str	r2, [sp, #8]
 800c72a:	9301      	str	r3, [sp, #4]
 800c72c:	2337      	movs	r3, #55	; 0x37
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	2300      	movs	r3, #0
 800c732:	460a      	mov	r2, r1
 800c734:	4910      	ldr	r1, [pc, #64]	; (800c778 <xTimerCreateTimerTask+0x84>)
 800c736:	4811      	ldr	r0, [pc, #68]	; (800c77c <xTimerCreateTimerTask+0x88>)
 800c738:	f7fe fefa 	bl	800b530 <xTaskCreateStatic>
 800c73c:	4603      	mov	r3, r0
 800c73e:	4a10      	ldr	r2, [pc, #64]	; (800c780 <xTimerCreateTimerTask+0x8c>)
 800c740:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c742:	4b0f      	ldr	r3, [pc, #60]	; (800c780 <xTimerCreateTimerTask+0x8c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c74a:	2301      	movs	r3, #1
 800c74c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10a      	bne.n	800c76a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c754:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	613b      	str	r3, [r7, #16]
}
 800c766:	bf00      	nop
 800c768:	e7fe      	b.n	800c768 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c76a:	697b      	ldr	r3, [r7, #20]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3718      	adds	r7, #24
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	200078f4 	.word	0x200078f4
 800c778:	0800e8b0 	.word	0x0800e8b0
 800c77c:	0800c9ed 	.word	0x0800c9ed
 800c780:	200078f8 	.word	0x200078f8

0800c784 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af02      	add	r7, sp, #8
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
 800c790:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c792:	202c      	movs	r0, #44	; 0x2c
 800c794:	f7fd fe78 	bl	800a488 <pvPortMalloc>
 800c798:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00d      	beq.n	800c7bc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	6a3b      	ldr	r3, [r7, #32]
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	68b9      	ldr	r1, [r7, #8]
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f000 f843 	bl	800c842 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c7bc:	697b      	ldr	r3, [r7, #20]
	}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b08a      	sub	sp, #40	; 0x28
 800c7ca:	af02      	add	r7, sp, #8
 800c7cc:	60f8      	str	r0, [r7, #12]
 800c7ce:	60b9      	str	r1, [r7, #8]
 800c7d0:	607a      	str	r2, [r7, #4]
 800c7d2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c7d4:	232c      	movs	r3, #44	; 0x2c
 800c7d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	2b2c      	cmp	r3, #44	; 0x2c
 800c7dc:	d00a      	beq.n	800c7f4 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c7de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	61bb      	str	r3, [r7, #24]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c7f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10a      	bne.n	800c812 <xTimerCreateStatic+0x4c>
	__asm volatile
 800c7fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	617b      	str	r3, [r7, #20]
}
 800c80e:	bf00      	nop
 800c810:	e7fe      	b.n	800c810 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c814:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00d      	beq.n	800c838 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	2202      	movs	r2, #2
 800c820:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	68b9      	ldr	r1, [r7, #8]
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f000 f805 	bl	800c842 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c838:	69fb      	ldr	r3, [r7, #28]
	}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3720      	adds	r7, #32
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b086      	sub	sp, #24
 800c846:	af00      	add	r7, sp, #0
 800c848:	60f8      	str	r0, [r7, #12]
 800c84a:	60b9      	str	r1, [r7, #8]
 800c84c:	607a      	str	r2, [r7, #4]
 800c84e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10a      	bne.n	800c86c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c856:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	617b      	str	r3, [r7, #20]
}
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d01e      	beq.n	800c8b0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c872:	f000 fae7 	bl	800ce44 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88a:	6a3a      	ldr	r2, [r7, #32]
 800c88c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c890:	3304      	adds	r3, #4
 800c892:	4618      	mov	r0, r3
 800c894:	f7fd fe7a 	bl	800a58c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d008      	beq.n	800c8b0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8a4:	f043 0304 	orr.w	r3, r3, #4
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c8b0:	bf00      	nop
 800c8b2:	3718      	adds	r7, #24
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08a      	sub	sp, #40	; 0x28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10a      	bne.n	800c8e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c8d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	623b      	str	r3, [r7, #32]
}
 800c8e2:	bf00      	nop
 800c8e4:	e7fe      	b.n	800c8e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c8e6:	4b1a      	ldr	r3, [pc, #104]	; (800c950 <xTimerGenericCommand+0x98>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d02a      	beq.n	800c944 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	2b05      	cmp	r3, #5
 800c8fe:	dc18      	bgt.n	800c932 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c900:	f7ff fe0c 	bl	800c51c <xTaskGetSchedulerState>
 800c904:	4603      	mov	r3, r0
 800c906:	2b02      	cmp	r3, #2
 800c908:	d109      	bne.n	800c91e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c90a:	4b11      	ldr	r3, [pc, #68]	; (800c950 <xTimerGenericCommand+0x98>)
 800c90c:	6818      	ldr	r0, [r3, #0]
 800c90e:	f107 0110 	add.w	r1, r7, #16
 800c912:	2300      	movs	r3, #0
 800c914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c916:	f7fe fa23 	bl	800ad60 <xQueueGenericSend>
 800c91a:	6278      	str	r0, [r7, #36]	; 0x24
 800c91c:	e012      	b.n	800c944 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c91e:	4b0c      	ldr	r3, [pc, #48]	; (800c950 <xTimerGenericCommand+0x98>)
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	f107 0110 	add.w	r1, r7, #16
 800c926:	2300      	movs	r3, #0
 800c928:	2200      	movs	r2, #0
 800c92a:	f7fe fa19 	bl	800ad60 <xQueueGenericSend>
 800c92e:	6278      	str	r0, [r7, #36]	; 0x24
 800c930:	e008      	b.n	800c944 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c932:	4b07      	ldr	r3, [pc, #28]	; (800c950 <xTimerGenericCommand+0x98>)
 800c934:	6818      	ldr	r0, [r3, #0]
 800c936:	f107 0110 	add.w	r1, r7, #16
 800c93a:	2300      	movs	r3, #0
 800c93c:	683a      	ldr	r2, [r7, #0]
 800c93e:	f7fe fb0d 	bl	800af5c <xQueueGenericSendFromISR>
 800c942:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c946:	4618      	mov	r0, r3
 800c948:	3728      	adds	r7, #40	; 0x28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	200078f4 	.word	0x200078f4

0800c954 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af02      	add	r7, sp, #8
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c95e:	4b22      	ldr	r3, [pc, #136]	; (800c9e8 <prvProcessExpiredTimer+0x94>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	3304      	adds	r3, #4
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fd fe77 	bl	800a660 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c978:	f003 0304 	and.w	r3, r3, #4
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d022      	beq.n	800c9c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	699a      	ldr	r2, [r3, #24]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	18d1      	adds	r1, r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	6978      	ldr	r0, [r7, #20]
 800c98e:	f000 f8d1 	bl	800cb34 <prvInsertTimerInActiveList>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d01f      	beq.n	800c9d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c998:	2300      	movs	r3, #0
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	2300      	movs	r3, #0
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	6978      	ldr	r0, [r7, #20]
 800c9a4:	f7ff ff88 	bl	800c8b8 <xTimerGenericCommand>
 800c9a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d113      	bne.n	800c9d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c9b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	60fb      	str	r3, [r7, #12]
}
 800c9c2:	bf00      	nop
 800c9c4:	e7fe      	b.n	800c9c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9cc:	f023 0301 	bic.w	r3, r3, #1
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	6a1b      	ldr	r3, [r3, #32]
 800c9dc:	6978      	ldr	r0, [r7, #20]
 800c9de:	4798      	blx	r3
}
 800c9e0:	bf00      	nop
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	200078ec 	.word	0x200078ec

0800c9ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c9f4:	f107 0308 	add.w	r3, r7, #8
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f000 f857 	bl	800caac <prvGetNextExpireTime>
 800c9fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	4619      	mov	r1, r3
 800ca04:	68f8      	ldr	r0, [r7, #12]
 800ca06:	f000 f803 	bl	800ca10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ca0a:	f000 f8d5 	bl	800cbb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca0e:	e7f1      	b.n	800c9f4 <prvTimerTask+0x8>

0800ca10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ca1a:	f7ff f8c1 	bl	800bba0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca1e:	f107 0308 	add.w	r3, r7, #8
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 f866 	bl	800caf4 <prvSampleTimeNow>
 800ca28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d130      	bne.n	800ca92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10a      	bne.n	800ca4c <prvProcessTimerOrBlockTask+0x3c>
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d806      	bhi.n	800ca4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca3e:	f7ff f8f5 	bl	800bc2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca42:	68f9      	ldr	r1, [r7, #12]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7ff ff85 	bl	800c954 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca4a:	e024      	b.n	800ca96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d008      	beq.n	800ca64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca52:	4b13      	ldr	r3, [pc, #76]	; (800caa0 <prvProcessTimerOrBlockTask+0x90>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <prvProcessTimerOrBlockTask+0x50>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e000      	b.n	800ca62 <prvProcessTimerOrBlockTask+0x52>
 800ca60:	2300      	movs	r3, #0
 800ca62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca64:	4b0f      	ldr	r3, [pc, #60]	; (800caa4 <prvProcessTimerOrBlockTask+0x94>)
 800ca66:	6818      	ldr	r0, [r3, #0]
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	683a      	ldr	r2, [r7, #0]
 800ca70:	4619      	mov	r1, r3
 800ca72:	f7fe fd29 	bl	800b4c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca76:	f7ff f8d9 	bl	800bc2c <xTaskResumeAll>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10a      	bne.n	800ca96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca80:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <prvProcessTimerOrBlockTask+0x98>)
 800ca82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca86:	601a      	str	r2, [r3, #0]
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	f3bf 8f6f 	isb	sy
}
 800ca90:	e001      	b.n	800ca96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ca92:	f7ff f8cb 	bl	800bc2c <xTaskResumeAll>
}
 800ca96:	bf00      	nop
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	200078f0 	.word	0x200078f0
 800caa4:	200078f4 	.word	0x200078f4
 800caa8:	e000ed04 	.word	0xe000ed04

0800caac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cab4:	4b0e      	ldr	r3, [pc, #56]	; (800caf0 <prvGetNextExpireTime+0x44>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d101      	bne.n	800cac2 <prvGetNextExpireTime+0x16>
 800cabe:	2201      	movs	r2, #1
 800cac0:	e000      	b.n	800cac4 <prvGetNextExpireTime+0x18>
 800cac2:	2200      	movs	r2, #0
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d105      	bne.n	800cadc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cad0:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <prvGetNextExpireTime+0x44>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	60fb      	str	r3, [r7, #12]
 800cada:	e001      	b.n	800cae0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cadc:	2300      	movs	r3, #0
 800cade:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cae0:	68fb      	ldr	r3, [r7, #12]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	200078ec 	.word	0x200078ec

0800caf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cafc:	f7ff f934 	bl	800bd68 <xTaskGetTickCount>
 800cb00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cb02:	4b0b      	ldr	r3, [pc, #44]	; (800cb30 <prvSampleTimeNow+0x3c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d205      	bcs.n	800cb18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cb0c:	f000 f936 	bl	800cd7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	601a      	str	r2, [r3, #0]
 800cb16:	e002      	b.n	800cb1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cb1e:	4a04      	ldr	r2, [pc, #16]	; (800cb30 <prvSampleTimeNow+0x3c>)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cb24:	68fb      	ldr	r3, [r7, #12]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	200078fc 	.word	0x200078fc

0800cb34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b086      	sub	sp, #24
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb42:	2300      	movs	r3, #0
 800cb44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d812      	bhi.n	800cb80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	1ad2      	subs	r2, r2, r3
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	699b      	ldr	r3, [r3, #24]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d302      	bcc.n	800cb6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	617b      	str	r3, [r7, #20]
 800cb6c:	e01b      	b.n	800cba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb6e:	4b10      	ldr	r3, [pc, #64]	; (800cbb0 <prvInsertTimerInActiveList+0x7c>)
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3304      	adds	r3, #4
 800cb76:	4619      	mov	r1, r3
 800cb78:	4610      	mov	r0, r2
 800cb7a:	f7fd fd38 	bl	800a5ee <vListInsert>
 800cb7e:	e012      	b.n	800cba6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d206      	bcs.n	800cb96 <prvInsertTimerInActiveList+0x62>
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d302      	bcc.n	800cb96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cb90:	2301      	movs	r3, #1
 800cb92:	617b      	str	r3, [r7, #20]
 800cb94:	e007      	b.n	800cba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb96:	4b07      	ldr	r3, [pc, #28]	; (800cbb4 <prvInsertTimerInActiveList+0x80>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4610      	mov	r0, r2
 800cba2:	f7fd fd24 	bl	800a5ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cba6:	697b      	ldr	r3, [r7, #20]
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3718      	adds	r7, #24
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	200078f0 	.word	0x200078f0
 800cbb4:	200078ec 	.word	0x200078ec

0800cbb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b08e      	sub	sp, #56	; 0x38
 800cbbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbbe:	e0ca      	b.n	800cd56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	da18      	bge.n	800cbf8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cbc6:	1d3b      	adds	r3, r7, #4
 800cbc8:	3304      	adds	r3, #4
 800cbca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10a      	bne.n	800cbe8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cbd2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	61fb      	str	r3, [r7, #28]
}
 800cbe4:	bf00      	nop
 800cbe6:	e7fe      	b.n	800cbe6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbee:	6850      	ldr	r0, [r2, #4]
 800cbf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbf2:	6892      	ldr	r2, [r2, #8]
 800cbf4:	4611      	mov	r1, r2
 800cbf6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	f2c0 80aa 	blt.w	800cd54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc06:	695b      	ldr	r3, [r3, #20]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d004      	beq.n	800cc16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0e:	3304      	adds	r3, #4
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fd fd25 	bl	800a660 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc16:	463b      	mov	r3, r7
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7ff ff6b 	bl	800caf4 <prvSampleTimeNow>
 800cc1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2b09      	cmp	r3, #9
 800cc24:	f200 8097 	bhi.w	800cd56 <prvProcessReceivedCommands+0x19e>
 800cc28:	a201      	add	r2, pc, #4	; (adr r2, 800cc30 <prvProcessReceivedCommands+0x78>)
 800cc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2e:	bf00      	nop
 800cc30:	0800cc59 	.word	0x0800cc59
 800cc34:	0800cc59 	.word	0x0800cc59
 800cc38:	0800cc59 	.word	0x0800cc59
 800cc3c:	0800cccd 	.word	0x0800cccd
 800cc40:	0800cce1 	.word	0x0800cce1
 800cc44:	0800cd2b 	.word	0x0800cd2b
 800cc48:	0800cc59 	.word	0x0800cc59
 800cc4c:	0800cc59 	.word	0x0800cc59
 800cc50:	0800cccd 	.word	0x0800cccd
 800cc54:	0800cce1 	.word	0x0800cce1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc5e:	f043 0301 	orr.w	r3, r3, #1
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc6a:	68ba      	ldr	r2, [r7, #8]
 800cc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	18d1      	adds	r1, r2, r3
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc78:	f7ff ff5c 	bl	800cb34 <prvInsertTimerInActiveList>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d069      	beq.n	800cd56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc84:	6a1b      	ldr	r3, [r3, #32]
 800cc86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc90:	f003 0304 	and.w	r3, r3, #4
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d05e      	beq.n	800cd56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9c:	699b      	ldr	r3, [r3, #24]
 800cc9e:	441a      	add	r2, r3
 800cca0:	2300      	movs	r3, #0
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	2300      	movs	r3, #0
 800cca6:	2100      	movs	r1, #0
 800cca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccaa:	f7ff fe05 	bl	800c8b8 <xTimerGenericCommand>
 800ccae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ccb0:	6a3b      	ldr	r3, [r7, #32]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d14f      	bne.n	800cd56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ccb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ccba:	f383 8811 	msr	BASEPRI, r3
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	f3bf 8f4f 	dsb	sy
 800ccc6:	61bb      	str	r3, [r7, #24]
}
 800ccc8:	bf00      	nop
 800ccca:	e7fe      	b.n	800ccca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccd2:	f023 0301 	bic.w	r3, r3, #1
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ccde:	e03a      	b.n	800cd56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cce6:	f043 0301 	orr.w	r3, r3, #1
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ccf2:	68ba      	ldr	r2, [r7, #8]
 800ccf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10a      	bne.n	800cd16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cd00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	617b      	str	r3, [r7, #20]
}
 800cd12:	bf00      	nop
 800cd14:	e7fe      	b.n	800cd14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd18:	699a      	ldr	r2, [r3, #24]
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	18d1      	adds	r1, r2, r3
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd24:	f7ff ff06 	bl	800cb34 <prvInsertTimerInActiveList>
					break;
 800cd28:	e015      	b.n	800cd56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd30:	f003 0302 	and.w	r3, r3, #2
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d103      	bne.n	800cd40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cd38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd3a:	f7fd fbef 	bl	800a51c <vPortFree>
 800cd3e:	e00a      	b.n	800cd56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd46:	f023 0301 	bic.w	r3, r3, #1
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd52:	e000      	b.n	800cd56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cd54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd56:	4b08      	ldr	r3, [pc, #32]	; (800cd78 <prvProcessReceivedCommands+0x1c0>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	1d39      	adds	r1, r7, #4
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe f998 	bl	800b094 <xQueueReceive>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f47f af2a 	bne.w	800cbc0 <prvProcessReceivedCommands+0x8>
	}
}
 800cd6c:	bf00      	nop
 800cd6e:	bf00      	nop
 800cd70:	3730      	adds	r7, #48	; 0x30
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	200078f4 	.word	0x200078f4

0800cd7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd82:	e048      	b.n	800ce16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd84:	4b2d      	ldr	r3, [pc, #180]	; (800ce3c <prvSwitchTimerLists+0xc0>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd8e:	4b2b      	ldr	r3, [pc, #172]	; (800ce3c <prvSwitchTimerLists+0xc0>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fd fc5f 	bl	800a660 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6a1b      	ldr	r3, [r3, #32]
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdb0:	f003 0304 	and.w	r3, r3, #4
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d02e      	beq.n	800ce16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	699b      	ldr	r3, [r3, #24]
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d90e      	bls.n	800cde8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdd6:	4b19      	ldr	r3, [pc, #100]	; (800ce3c <prvSwitchTimerLists+0xc0>)
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	3304      	adds	r3, #4
 800cdde:	4619      	mov	r1, r3
 800cde0:	4610      	mov	r0, r2
 800cde2:	f7fd fc04 	bl	800a5ee <vListInsert>
 800cde6:	e016      	b.n	800ce16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cde8:	2300      	movs	r3, #0
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	2300      	movs	r3, #0
 800cdee:	693a      	ldr	r2, [r7, #16]
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f7ff fd60 	bl	800c8b8 <xTimerGenericCommand>
 800cdf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10a      	bne.n	800ce16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ce00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	603b      	str	r3, [r7, #0]
}
 800ce12:	bf00      	nop
 800ce14:	e7fe      	b.n	800ce14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce16:	4b09      	ldr	r3, [pc, #36]	; (800ce3c <prvSwitchTimerLists+0xc0>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1b1      	bne.n	800cd84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ce20:	4b06      	ldr	r3, [pc, #24]	; (800ce3c <prvSwitchTimerLists+0xc0>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ce26:	4b06      	ldr	r3, [pc, #24]	; (800ce40 <prvSwitchTimerLists+0xc4>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a04      	ldr	r2, [pc, #16]	; (800ce3c <prvSwitchTimerLists+0xc0>)
 800ce2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce2e:	4a04      	ldr	r2, [pc, #16]	; (800ce40 <prvSwitchTimerLists+0xc4>)
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	6013      	str	r3, [r2, #0]
}
 800ce34:	bf00      	nop
 800ce36:	3718      	adds	r7, #24
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	200078ec 	.word	0x200078ec
 800ce40:	200078f0 	.word	0x200078f0

0800ce44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce4a:	f7fd fd63 	bl	800a914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce4e:	4b15      	ldr	r3, [pc, #84]	; (800cea4 <prvCheckForValidListAndQueue+0x60>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d120      	bne.n	800ce98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce56:	4814      	ldr	r0, [pc, #80]	; (800cea8 <prvCheckForValidListAndQueue+0x64>)
 800ce58:	f7fd fb78 	bl	800a54c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce5c:	4813      	ldr	r0, [pc, #76]	; (800ceac <prvCheckForValidListAndQueue+0x68>)
 800ce5e:	f7fd fb75 	bl	800a54c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce62:	4b13      	ldr	r3, [pc, #76]	; (800ceb0 <prvCheckForValidListAndQueue+0x6c>)
 800ce64:	4a10      	ldr	r2, [pc, #64]	; (800cea8 <prvCheckForValidListAndQueue+0x64>)
 800ce66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce68:	4b12      	ldr	r3, [pc, #72]	; (800ceb4 <prvCheckForValidListAndQueue+0x70>)
 800ce6a:	4a10      	ldr	r2, [pc, #64]	; (800ceac <prvCheckForValidListAndQueue+0x68>)
 800ce6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce6e:	2300      	movs	r3, #0
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	4b11      	ldr	r3, [pc, #68]	; (800ceb8 <prvCheckForValidListAndQueue+0x74>)
 800ce74:	4a11      	ldr	r2, [pc, #68]	; (800cebc <prvCheckForValidListAndQueue+0x78>)
 800ce76:	2110      	movs	r1, #16
 800ce78:	20ff      	movs	r0, #255	; 0xff
 800ce7a:	f7fd fed5 	bl	800ac28 <xQueueGenericCreateStatic>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	4a08      	ldr	r2, [pc, #32]	; (800cea4 <prvCheckForValidListAndQueue+0x60>)
 800ce82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce84:	4b07      	ldr	r3, [pc, #28]	; (800cea4 <prvCheckForValidListAndQueue+0x60>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d005      	beq.n	800ce98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce8c:	4b05      	ldr	r3, [pc, #20]	; (800cea4 <prvCheckForValidListAndQueue+0x60>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	490b      	ldr	r1, [pc, #44]	; (800cec0 <prvCheckForValidListAndQueue+0x7c>)
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fe faee 	bl	800b474 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce98:	f7fd fd6c 	bl	800a974 <vPortExitCritical>
}
 800ce9c:	bf00      	nop
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	200078f4 	.word	0x200078f4
 800cea8:	200078c4 	.word	0x200078c4
 800ceac:	200078d8 	.word	0x200078d8
 800ceb0:	200078ec 	.word	0x200078ec
 800ceb4:	200078f0 	.word	0x200078f0
 800ceb8:	200088f0 	.word	0x200088f0
 800cebc:	20007900 	.word	0x20007900
 800cec0:	0800e8b8 	.word	0x0800e8b8

0800cec4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10a      	bne.n	800ceec <xTimerIsTimerActive+0x28>
	__asm volatile
 800ced6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	60fb      	str	r3, [r7, #12]
}
 800cee8:	bf00      	nop
 800ceea:	e7fe      	b.n	800ceea <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800ceec:	f7fd fd12 	bl	800a914 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cef6:	f003 0301 	and.w	r3, r3, #1
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d102      	bne.n	800cf04 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800cefe:	2300      	movs	r3, #0
 800cf00:	617b      	str	r3, [r7, #20]
 800cf02:	e001      	b.n	800cf08 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800cf04:	2301      	movs	r3, #1
 800cf06:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800cf08:	f7fd fd34 	bl	800a974 <vPortExitCritical>

	return xReturn;
 800cf0c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b086      	sub	sp, #24
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10a      	bne.n	800cf3e <pvTimerGetTimerID+0x28>
	__asm volatile
 800cf28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	60fb      	str	r3, [r7, #12]
}
 800cf3a:	bf00      	nop
 800cf3c:	e7fe      	b.n	800cf3c <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800cf3e:	f7fd fce9 	bl	800a914 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	69db      	ldr	r3, [r3, #28]
 800cf46:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800cf48:	f7fd fd14 	bl	800a974 <vPortExitCritical>

	return pvReturn;
 800cf4c:	693b      	ldr	r3, [r7, #16]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3718      	adds	r7, #24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
	...

0800cf58 <Rte_Write_TimH_TimHPort_Tim3Ccr2>:
{
	TIM3->CCR1 = data;
}
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr2(uint8 data)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	4603      	mov	r3, r0
 800cf60:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR2 = data;
 800cf62:	4a04      	ldr	r2, [pc, #16]	; (800cf74 <Rte_Write_TimH_TimHPort_Tim3Ccr2+0x1c>)
 800cf64:	79fb      	ldrb	r3, [r7, #7]
 800cf66:	6393      	str	r3, [r2, #56]	; 0x38
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	40000400 	.word	0x40000400

0800cf78 <Rte_Write_TimH_TimHPort_Tim3Ccr3>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr3(uint8 data)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	4603      	mov	r3, r0
 800cf80:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR3 = data;
 800cf82:	4a04      	ldr	r2, [pc, #16]	; (800cf94 <Rte_Write_TimH_TimHPort_Tim3Ccr3+0x1c>)
 800cf84:	79fb      	ldrb	r3, [r7, #7]
 800cf86:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	40000400 	.word	0x40000400

0800cf98 <Rte_Write_TimH_TimHPort_Tim3Ccr4>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr4(uint8 data)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR4 = data;
 800cfa2:	4a04      	ldr	r2, [pc, #16]	; (800cfb4 <Rte_Write_TimH_TimHPort_Tim3Ccr4+0x1c>)
 800cfa4:	79fb      	ldrb	r3, [r7, #7]
 800cfa6:	6413      	str	r3, [r2, #64]	; 0x40
}
 800cfa8:	bf00      	nop
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	40000400 	.word	0x40000400

0800cfb8 <Rte_Write_TimH_TimHPort_Tim2Ccr1>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr1(uint16 data)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = data;
 800cfc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cfc6:	88fb      	ldrh	r3, [r7, #6]
 800cfc8:	6353      	str	r3, [r2, #52]	; 0x34
}
 800cfca:	bf00      	nop
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr

0800cfd6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr2(uint16 data)
{
 800cfd6:	b480      	push	{r7}
 800cfd8:	b083      	sub	sp, #12
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	4603      	mov	r3, r0
 800cfde:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = data;
 800cfe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cfe4:	88fb      	ldrh	r3, [r7, #6]
 800cfe6:	6393      	str	r3, [r2, #56]	; 0x38
}
 800cfe8:	bf00      	nop
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>:
{
	TIM2->CCR3 = data;
}
/* Run time environment interface. */
VOID Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(uint8* data, uint8 position)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	460b      	mov	r3, r1
 800cffe:	70fb      	strb	r3, [r7, #3]
	*data = SystemManager_Fault[position];
 800d000:	78fb      	ldrb	r3, [r7, #3]
 800d002:	4a06      	ldr	r2, [pc, #24]	; (800d01c <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault+0x28>)
 800d004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d008:	b2da      	uxtb	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	701a      	strb	r2, [r3, #0]
}
 800d00e:	bf00      	nop
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	200089a8 	.word	0x200089a8

0800d020 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>:
{
	*data = SecAlm_SensorState;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(uint32* data)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
	SecAlm_SensorState = *data;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	4b04      	ldr	r3, [pc, #16]	; (800d040 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState+0x20>)
 800d030:	701a      	strb	r2, [r3, #0]
}
 800d032:	bf00      	nop
 800d034:	370c      	adds	r7, #12
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	20000118 	.word	0x20000118

0800d044 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>:
{
	*data = ExtLights_LightSensorState;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(uint32* data)
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
	ExtLights_LightSensorState = *data;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a03      	ldr	r2, [pc, #12]	; (800d060 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState+0x1c>)
 800d052:	6013      	str	r3, [r2, #0]
}
 800d054:	bf00      	nop
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr
 800d060:	200000fc 	.word	0x200000fc

0800d064 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>:
/* Run time environment interface. */
VOID Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(uint32* data)
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
	SenCtrl_MeasuredValues[0] = Adc_ChannelOne_Buffer[0];
 800d06c:	4b08      	ldr	r3, [pc, #32]	; (800d090 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x2c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a08      	ldr	r2, [pc, #32]	; (800d094 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x30>)
 800d072:	6013      	str	r3, [r2, #0]
	SenCtrl_MeasuredValues[1] = Adc_ChannelOne_Buffer[1];
 800d074:	4b06      	ldr	r3, [pc, #24]	; (800d090 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x2c>)
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	4a06      	ldr	r2, [pc, #24]	; (800d094 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x30>)
 800d07a:	6053      	str	r3, [r2, #4]
	SenCtrl_MeasuredValues[2] = Adc_ChannelOne_Buffer[2];
 800d07c:	4b04      	ldr	r3, [pc, #16]	; (800d090 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x2c>)
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	4a04      	ldr	r2, [pc, #16]	; (800d094 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x30>)
 800d082:	6093      	str	r3, [r2, #8]
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	200006a8 	.word	0x200006a8
 800d094:	2000011c 	.word	0x2000011c

0800d098 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>:
{
	*data = CenLoc_FollowMeHomeCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(uint8 data)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	4603      	mov	r3, r0
 800d0a0:	71fb      	strb	r3, [r7, #7]
	CenLoc_FollowMeHomeCounter = data;
 800d0a2:	4a04      	ldr	r2, [pc, #16]	; (800d0b4 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter+0x1c>)
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	7013      	strb	r3, [r2, #0]
}
 800d0a8:	bf00      	nop
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr
 800d0b4:	200000c5 	.word	0x200000c5

0800d0b8 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>:
{
	*data = CenLoc_TurnOnLedCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(uint8* data)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
	CenLoc_TurnOnLedCounter = *data;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	781a      	ldrb	r2, [r3, #0]
 800d0c4:	4b03      	ldr	r3, [pc, #12]	; (800d0d4 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter+0x1c>)
 800d0c6:	701a      	strb	r2, [r3, #0]
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr
 800d0d4:	200000c6 	.word	0x200000c6

0800d0d8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>:
{
	*data = CenLoc_CyclicAlarmCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(uint8* data)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
	CenLoc_CyclicAlarmCounter = *data;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	781a      	ldrb	r2, [r3, #0]
 800d0e4:	4b03      	ldr	r3, [pc, #12]	; (800d0f4 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter+0x1c>)
 800d0e6:	701a      	strb	r2, [r3, #0]
}
 800d0e8:	bf00      	nop
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	200000c4 	.word	0x200000c4

0800d0f8 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>:
{
	*data = CenLoc_BlinkCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(uint8* data)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
	CenLoc_BlinkCounter = *data;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	781a      	ldrb	r2, [r3, #0]
 800d104:	4b03      	ldr	r3, [pc, #12]	; (800d114 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter+0x1c>)
 800d106:	701a      	strb	r2, [r3, #0]
}
 800d108:	bf00      	nop
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	200000c3 	.word	0x200000c3

0800d118 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>:
{
	*data = Os_Alarm_Counter;
}
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(uint8* data)
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
	Os_LockUnlockSequence_Counter = *data;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	781a      	ldrb	r2, [r3, #0]
 800d124:	4b03      	ldr	r3, [pc, #12]	; (800d134 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter+0x1c>)
 800d126:	701a      	strb	r2, [r3, #0]
}
 800d128:	bf00      	nop
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr
 800d134:	200001fc 	.word	0x200001fc

0800d138 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(uint8* data)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
	Os_TurnOnCyclic_Counter = *data;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	781a      	ldrb	r2, [r3, #0]
 800d144:	4b03      	ldr	r3, [pc, #12]	; (800d154 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter+0x1c>)
 800d146:	701a      	strb	r2, [r3, #0]
}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	200001fd 	.word	0x200001fd

0800d158 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(uint8* data)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
	Os_TurnOnLed_Counter = *data;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	781a      	ldrb	r2, [r3, #0]
 800d164:	4b03      	ldr	r3, [pc, #12]	; (800d174 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter+0x1c>)
 800d166:	701a      	strb	r2, [r3, #0]
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr
 800d174:	200001fe 	.word	0x200001fe

0800d178 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(uint8 data)
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	4603      	mov	r3, r0
 800d180:	71fb      	strb	r3, [r7, #7]
	Os_FollowMeHome_Counter = data;
 800d182:	4a04      	ldr	r2, [pc, #16]	; (800d194 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter+0x1c>)
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	7013      	strb	r3, [r2, #0]
}
 800d188:	bf00      	nop
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr
 800d194:	200001ff 	.word	0x200001ff

0800d198 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Lts_Counter(uint32* data)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
	Os_Lts_Counter = *data;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a03      	ldr	r2, [pc, #12]	; (800d1b4 <Rte_Write_Os_R_OsPort_Os_Lts_Counter+0x1c>)
 800d1a6:	6013      	str	r3, [r2, #0]
}
 800d1a8:	bf00      	nop
 800d1aa:	370c      	adds	r7, #12
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr
 800d1b4:	20000200 	.word	0x20000200

0800d1b8 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Rts_Counter(uint32* data)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
	Os_Rts_Counter = *data;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a03      	ldr	r2, [pc, #12]	; (800d1d4 <Rte_Write_Os_R_OsPort_Os_Rts_Counter+0x1c>)
 800d1c6:	6013      	str	r3, [r2, #0]
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr
 800d1d4:	20000204 	.word	0x20000204

0800d1d8 <Rte_Write_Os_R_OsPort_Os_HL_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_HL_Counter(uint32* data)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
	Os_HL_Counter = *data;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a03      	ldr	r2, [pc, #12]	; (800d1f4 <Rte_Write_Os_R_OsPort_Os_HL_Counter+0x1c>)
 800d1e6:	6013      	str	r3, [r2, #0]
}
 800d1e8:	bf00      	nop
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	20000208 	.word	0x20000208

0800d1f8 <Rte_Write_Os_R_OsPort_Os_Alarm_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Alarm_Counter(uint8* data)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
	Os_Alarm_Counter = *data;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	781a      	ldrb	r2, [r3, #0]
 800d204:	4b03      	ldr	r3, [pc, #12]	; (800d214 <Rte_Write_Os_R_OsPort_Os_Alarm_Counter+0x1c>)
 800d206:	701a      	strb	r2, [r3, #0]
}
 800d208:	bf00      	nop
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	2000020c 	.word	0x2000020c

0800d218 <Rte_Runnable_EcuM_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_EcuM_MainFunction()
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
	EcuM_MainFunction();
 800d21c:	f000 fea6 	bl	800df6c <EcuM_MainFunction>
}
 800d220:	bf00      	nop
 800d222:	bd80      	pop	{r7, pc}

0800d224 <Rte_Runnable_SystemManager_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SystemManager_MainFunction()
{
 800d224:	b580      	push	{r7, lr}
 800d226:	af00      	add	r7, sp, #0
	SystemManager_MainFunction();
 800d228:	f000 ff7e 	bl	800e128 <SystemManager_MainFunction>
}
 800d22c:	bf00      	nop
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <Rte_Runnable_Crc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Crc_MainFunction()
{
 800d230:	b580      	push	{r7, lr}
 800d232:	af00      	add	r7, sp, #0
	Crc_MainFunction();
 800d234:	f000 fd22 	bl	800dc7c <Crc_MainFunction>
}
 800d238:	bf00      	nop
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <Rte_Runnable_Wdg_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Wdg_MainFunction()
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	af00      	add	r7, sp, #0
	Watchdog_MainFunction();
 800d240:	f001 f84e 	bl	800e2e0 <Watchdog_MainFunction>
}
 800d244:	bf00      	nop
 800d246:	bd80      	pop	{r7, pc}

0800d248 <Rte_Runnable_Adc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Adc_MainFunction()
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
	Adc_MainFunction();
 800d24c:	f7fc f866 	bl	800931c <Adc_MainFunction>
}
 800d250:	bf00      	nop
 800d252:	bd80      	pop	{r7, pc}

0800d254 <Rte_Runnable_Tim_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Tim_MainFunction()
{
 800d254:	b580      	push	{r7, lr}
 800d256:	af00      	add	r7, sp, #0
	Tim_MainFunction();
 800d258:	f7fc fd5e 	bl	8009d18 <Tim_MainFunction>
}
 800d25c:	bf00      	nop
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <Rte_Runnable_Uart_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Uart_MainFunction()
{
 800d260:	b580      	push	{r7, lr}
 800d262:	af00      	add	r7, sp, #0
	Uart_MainFunction();
 800d264:	f7f5 f93e 	bl	80024e4 <Uart_MainFunction>
}
 800d268:	bf00      	nop
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_IT(htim, Channel);
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7f9 fb77 	bl	800696c <HAL_TIM_PWM_Start_IT>
}
 800d27e:	bf00      	nop
 800d280:	3708      	adds	r7, #8
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 800d286:	b580      	push	{r7, lr}
 800d288:	b082      	sub	sp, #8
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(htim, Channel);
 800d290:	6839      	ldr	r1, [r7, #0]
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7f9 fc68 	bl	8006b68 <HAL_TIM_PWM_Stop_IT>
}
 800d298:	bf00      	nop
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <Rte_Write_Btc_BtcPort_Btc_RxData>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
	Btc_RxData = *data;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	781a      	ldrb	r2, [r3, #0]
 800d2ac:	4b03      	ldr	r3, [pc, #12]	; (800d2bc <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>)
 800d2ae:	701a      	strb	r2, [r3, #0]
}
 800d2b0:	bf00      	nop
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr
 800d2bc:	200000b0 	.word	0x200000b0

0800d2c0 <Rte_Write_Btc_BtcPort_Btc_RxCount>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
	Btc_RxCount = *data;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	781a      	ldrb	r2, [r3, #0]
 800d2cc:	4b03      	ldr	r3, [pc, #12]	; (800d2dc <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>)
 800d2ce:	701a      	strb	r2, [r3, #0]
}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	200000b1 	.word	0x200000b1

0800d2e0 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	70fb      	strb	r3, [r7, #3]
	Btc_DataBuffer[position] = *data;
 800d2ec:	78fb      	ldrb	r3, [r7, #3]
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	7811      	ldrb	r1, [r2, #0]
 800d2f2:	4a04      	ldr	r2, [pc, #16]	; (800d304 <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x24>)
 800d2f4:	54d1      	strb	r1, [r2, r3]
}
 800d2f6:	bf00      	nop
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	200000ac 	.word	0x200000ac

0800d308 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:
/* Run time environment interface. */
VOID Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	70fb      	strb	r3, [r7, #3]
	*data = Adc_ChannelOne_Buffer[position];
 800d314:	78fb      	ldrb	r3, [r7, #3]
 800d316:	4a05      	ldr	r2, [pc, #20]	; (800d32c <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>)
 800d318:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	601a      	str	r2, [r3, #0]
}
 800d320:	bf00      	nop
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	200006a8 	.word	0x200006a8

0800d330 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
	Btc_ReceivedDataOnBluetooth = *data;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	781a      	ldrb	r2, [r3, #0]
 800d33c:	4b03      	ldr	r3, [pc, #12]	; (800d34c <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 800d33e:	701a      	strb	r2, [r3, #0]
}
 800d340:	bf00      	nop
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	200000b2 	.word	0x200000b2

0800d350 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	CenLoc_CurrentState = *data;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	781a      	ldrb	r2, [r3, #0]
 800d35c:	4b03      	ldr	r3, [pc, #12]	; (800d36c <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>)
 800d35e:	701a      	strb	r2, [r3, #0]
}
 800d360:	bf00      	nop
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr
 800d36c:	200000bf 	.word	0x200000bf

0800d370 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
{
	CenLoc_PreviousState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeState = *data;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	781a      	ldrb	r2, [r3, #0]
 800d37c:	4b03      	ldr	r3, [pc, #12]	; (800d38c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>)
 800d37e:	701a      	strb	r2, [r3, #0]
}
 800d380:	bf00      	nop
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	200000c1 	.word	0x200000c1

0800d390 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
{
	CenLoc_PreviousStateFlag = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
	ExtLights_ReverseLight_CurrentState = *data;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	781a      	ldrb	r2, [r3, #0]
 800d39c:	4b03      	ldr	r3, [pc, #12]	; (800d3ac <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>)
 800d39e:	701a      	strb	r2, [r3, #0]
}
 800d3a0:	bf00      	nop
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr
 800d3ac:	200000e0 	.word	0x200000e0

0800d3b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
	ExtLights_BrakeLight_CurrentState = *data;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	781a      	ldrb	r2, [r3, #0]
 800d3bc:	4b03      	ldr	r3, [pc, #12]	; (800d3cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>)
 800d3be:	701a      	strb	r2, [r3, #0]
}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	200000e2 	.word	0x200000e2

0800d3d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
	ExtLights_LightsSwitch_CurrentState = *data;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	781a      	ldrb	r2, [r3, #0]
 800d3dc:	4b03      	ldr	r3, [pc, #12]	; (800d3ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>)
 800d3de:	701a      	strb	r2, [r3, #0]
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	200000e3 	.word	0x200000e3

0800d3f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
	ExtLights_HighBeam_CurrentState = *data;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	781a      	ldrb	r2, [r3, #0]
 800d3fc:	4b03      	ldr	r3, [pc, #12]	; (800d40c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>)
 800d3fe:	701a      	strb	r2, [r3, #0]
}
 800d400:	bf00      	nop
 800d402:	370c      	adds	r7, #12
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr
 800d40c:	200000e4 	.word	0x200000e4

0800d410 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
	ExtLights_FrontFogLight_CurrentState = *data;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	781a      	ldrb	r2, [r3, #0]
 800d41c:	4b03      	ldr	r3, [pc, #12]	; (800d42c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>)
 800d41e:	701a      	strb	r2, [r3, #0]
}
 800d420:	bf00      	nop
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	200000e5 	.word	0x200000e5

0800d430 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalLeft_CurrentState = *data;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	781a      	ldrb	r2, [r3, #0]
 800d43c:	4b03      	ldr	r3, [pc, #12]	; (800d44c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>)
 800d43e:	701a      	strb	r2, [r3, #0]
}
 800d440:	bf00      	nop
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	200000e6 	.word	0x200000e6

0800d450 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalRight_CurrentState = *data;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	781a      	ldrb	r2, [r3, #0]
 800d45c:	4b03      	ldr	r3, [pc, #12]	; (800d46c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>)
 800d45e:	701a      	strb	r2, [r3, #0]
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr
 800d46c:	200000e7 	.word	0x200000e7

0800d470 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
	ExtLights_HazardLight_CurrentState = *data;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	781a      	ldrb	r2, [r3, #0]
 800d47c:	4b03      	ldr	r3, [pc, #12]	; (800d48c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>)
 800d47e:	701a      	strb	r2, [r3, #0]
}
 800d480:	bf00      	nop
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	200000ea 	.word	0x200000ea

0800d490 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
	ExtLights_RearFogLight_CurrentState = *data;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	781a      	ldrb	r2, [r3, #0]
 800d49c:	4b03      	ldr	r3, [pc, #12]	; (800d4ac <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>)
 800d49e:	701a      	strb	r2, [r3, #0]
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	200000eb 	.word	0x200000eb

0800d4b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
{
	ExtLights_HL_PrevState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
	ExtLights_RTSFlag = *data;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a03      	ldr	r2, [pc, #12]	; (800d4cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>)
 800d4be:	6013      	str	r3, [r2, #0]
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	200000f0 	.word	0x200000f0

0800d4d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
	ExtLights_LTSFlag = *data;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a03      	ldr	r2, [pc, #12]	; (800d4ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>)
 800d4de:	6013      	str	r3, [r2, #0]
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	200000f4 	.word	0x200000f4

0800d4f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
	ExtLights_HLFlag = *data;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a03      	ldr	r2, [pc, #12]	; (800d50c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>)
 800d4fe:	6013      	str	r3, [r2, #0]
}
 800d500:	bf00      	nop
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	200000f8 	.word	0x200000f8

0800d510 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
	IntLights_CurrentState = *data;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	781a      	ldrb	r2, [r3, #0]
 800d51c:	4b03      	ldr	r3, [pc, #12]	; (800d52c <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>)
 800d51e:	701a      	strb	r2, [r3, #0]
}
 800d520:	bf00      	nop
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	20000104 	.word	0x20000104

0800d530 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
{
	SecAlm_PinStateChange = *data;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
	SecAlm_TriggerIRQCounterForTimer4 = *data;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	781a      	ldrb	r2, [r3, #0]
 800d53c:	4b03      	ldr	r3, [pc, #12]	; (800d54c <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>)
 800d53e:	701a      	strb	r2, [r3, #0]
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr
 800d54c:	20000112 	.word	0x20000112

0800d550 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16 data)
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	4603      	mov	r3, r0
 800d558:	80fb      	strh	r3, [r7, #6]
	SecAlm_SensorStatusCounter = data;
 800d55a:	4a04      	ldr	r2, [pc, #16]	; (800d56c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>)
 800d55c:	88fb      	ldrh	r3, [r7, #6]
 800d55e:	8013      	strh	r3, [r2, #0]
}
 800d560:	bf00      	nop
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	20000114 	.word	0x20000114

0800d570 <Rte_Runnable_Btc_MainFunction>:
{
	SecAlm_SensorStatus = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_Btc_MainFunction()
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
	Btc_MainFunction();
 800d574:	f7f3 fd78 	bl	8001068 <Btc_MainFunction>
}
 800d578:	bf00      	nop
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <Rte_Runnable_CenLoc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_CenLoc_MainFunction()
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	af00      	add	r7, sp, #0
	CenLoc_MainFunction();
 800d580:	f7f3 ffc8 	bl	8001514 <CenLoc_MainFunction>
}
 800d584:	bf00      	nop
 800d586:	bd80      	pop	{r7, pc}

0800d588 <Rte_Runnable_ExtLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_ExtLights_MainFunction()
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	af00      	add	r7, sp, #0
	ExtLights_MainFunction();
 800d58c:	f7f4 fada 	bl	8001b44 <ExtLights_MainFunction>
}
 800d590:	bf00      	nop
 800d592:	bd80      	pop	{r7, pc}

0800d594 <Rte_Runnable_IntLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_IntLights_MainFunction()
{
 800d594:	b580      	push	{r7, lr}
 800d596:	af00      	add	r7, sp, #0
	IntLights_MainFunction();
 800d598:	f7f4 fc1c 	bl	8001dd4 <IntLights_MainFunction>
}
 800d59c:	bf00      	nop
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <Rte_Runnable_SecAlm_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SecAlm_MainFunction()
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	af00      	add	r7, sp, #0
	SecAlm_MainFunction();
 800d5a4:	f7f4 fec4 	bl	8002330 <SecAlm_MainFunction>
}
 800d5a8:	bf00      	nop
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
	*data = Btc_ReceivedDataOnBluetooth;
 800d5b4:	4b04      	ldr	r3, [pc, #16]	; (800d5c8 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 800d5b6:	781a      	ldrb	r2, [r3, #0]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	701a      	strb	r2, [r3, #0]
}
 800d5bc:	bf00      	nop
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	200000b2 	.word	0x200000b2

0800d5cc <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>:
{
	*data = SecAlm_SensorStatus;
}
/* Run time environment interface. */
VOID Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(huart, pData, Size);
 800d5da:	88fb      	ldrh	r3, [r7, #6]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f7fa fe80 	bl	80082e6 <HAL_UART_Receive_IT>
}
 800d5e6:	bf00      	nop
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:
{
	HAL_TIM_Base_Stop_IT(htim);
}
/* Run time environment interface. */
VOID Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b082      	sub	sp, #8
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	807b      	strh	r3, [r7, #2]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 800d5fe:	787a      	ldrb	r2, [r7, #1]
 800d600:	887b      	ldrh	r3, [r7, #2]
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7f8 fb3d 	bl	8005c84 <HAL_GPIO_WritePin>
}
 800d60a:	bf00      	nop
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
{
	HAL_GetTick();
}
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b082      	sub	sp, #8
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	6039      	str	r1, [r7, #0]
	osTimerStart(timer_id, ticks);
 800d61c:	6839      	ldr	r1, [r7, #0]
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7fc fe7c 	bl	800a31c <osTimerStart>
}
 800d624:	bf00      	nop
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
	osTimerStop(timer_id);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7fc fe9f 	bl	800a378 <osTimerStop>
}
 800d63a:	bf00      	nop
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <Rte_Runnable_DiagCtrl_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_DiagCtrl_MainFunction()
{
 800d642:	b580      	push	{r7, lr}
 800d644:	af00      	add	r7, sp, #0
	DiagCtrl_MainFunction();
 800d646:	f7f3 ff6d 	bl	8001524 <DiagCtrl_MainFunction>
}
 800d64a:	bf00      	nop
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <Rte_Runnable_Pdc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Pdc_MainFunction()
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	af00      	add	r7, sp, #0
	Pdc_MainFunction();
 800d652:	f7f4 fbc5 	bl	8001de0 <Pdc_MainFunction>
}
 800d656:	bf00      	nop
 800d658:	bd80      	pop	{r7, pc}

0800d65a <Rte_Runnable_Dem_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Dem_MainFunction()
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	af00      	add	r7, sp, #0
	Dem_MainFunction();
 800d65e:	f7f6 fa0c 	bl	8003a7a <Dem_MainFunction>
}
 800d662:	bf00      	nop
 800d664:	bd80      	pop	{r7, pc}
	...

0800d668 <Crc_VerifyUartData>:
/***********************************************************************************
* Function: Crc_VerifyUartData													   *
* Description: Verifies the UART data received.							 		   *
************************************************************************************/
StdReturnType Crc_VerifyUartData()
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
	/* Local variable to store return value. */
	uint8 returnValue = E_NOT_OK;
 800d66e:	2301      	movs	r3, #1
 800d670:	73fb      	strb	r3, [r7, #15]
	/* Local variable to store received value. */
	uint8 receivedValue = STD_LOW;
 800d672:	2300      	movs	r3, #0
 800d674:	71fb      	strb	r3, [r7, #7]
	/* Local value to calculate CRC. */
	uint32 calculatedCrc = STD_LOW;
 800d676:	2300      	movs	r3, #0
 800d678:	60bb      	str	r3, [r7, #8]
	/* Read the received data from UART. */
	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 800d67a:	1dfb      	adds	r3, r7, #7
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7ff ff95 	bl	800d5ac <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800d682:	4ba6      	ldr	r3, [pc, #664]	; (800d91c <Crc_VerifyUartData+0x2b4>)
 800d684:	2201      	movs	r2, #1
 800d686:	701a      	strb	r2, [r3, #0]
	/* Calculate the CRC. */
	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 800d688:	1dfb      	adds	r3, r7, #7
 800d68a:	2201      	movs	r2, #1
 800d68c:	4619      	mov	r1, r3
 800d68e:	48a4      	ldr	r0, [pc, #656]	; (800d920 <Crc_VerifyUartData+0x2b8>)
 800d690:	f7f7 fbf0 	bl	8004e74 <HAL_CRC_Calculate>
 800d694:	60b8      	str	r0, [r7, #8]
	/* Check the value if it has correct CRC. */
	switch(receivedValue)
 800d696:	79fb      	ldrb	r3, [r7, #7]
 800d698:	3b01      	subs	r3, #1
 800d69a:	2b19      	cmp	r3, #25
 800d69c:	f200 8175 	bhi.w	800d98a <Crc_VerifyUartData+0x322>
 800d6a0:	a201      	add	r2, pc, #4	; (adr r2, 800d6a8 <Crc_VerifyUartData+0x40>)
 800d6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a6:	bf00      	nop
 800d6a8:	0800d795 	.word	0x0800d795
 800d6ac:	0800d7ab 	.word	0x0800d7ab
 800d6b0:	0800d7c1 	.word	0x0800d7c1
 800d6b4:	0800d7d7 	.word	0x0800d7d7
 800d6b8:	0800d98b 	.word	0x0800d98b
 800d6bc:	0800d98b 	.word	0x0800d98b
 800d6c0:	0800d7ed 	.word	0x0800d7ed
 800d6c4:	0800d803 	.word	0x0800d803
 800d6c8:	0800d819 	.word	0x0800d819
 800d6cc:	0800d82f 	.word	0x0800d82f
 800d6d0:	0800d845 	.word	0x0800d845
 800d6d4:	0800d85b 	.word	0x0800d85b
 800d6d8:	0800d871 	.word	0x0800d871
 800d6dc:	0800d887 	.word	0x0800d887
 800d6e0:	0800d89d 	.word	0x0800d89d
 800d6e4:	0800d8b3 	.word	0x0800d8b3
 800d6e8:	0800d8c9 	.word	0x0800d8c9
 800d6ec:	0800d8df 	.word	0x0800d8df
 800d6f0:	0800d8f5 	.word	0x0800d8f5
 800d6f4:	0800d90b 	.word	0x0800d90b
 800d6f8:	0800d711 	.word	0x0800d711
 800d6fc:	0800d727 	.word	0x0800d727
 800d700:	0800d73d 	.word	0x0800d73d
 800d704:	0800d753 	.word	0x0800d753
 800d708:	0800d769 	.word	0x0800d769
 800d70c:	0800d77f 	.word	0x0800d77f
	{
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 800d710:	4b84      	ldr	r3, [pc, #528]	; (800d924 <Crc_VerifyUartData+0x2bc>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	429a      	cmp	r2, r3
 800d718:	d102      	bne.n	800d720 <Crc_VerifyUartData+0xb8>
			{
				returnValue = E_OK;
 800d71a:	2300      	movs	r3, #0
 800d71c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d71e:	e135      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d720:	2301      	movs	r3, #1
 800d722:	73fb      	strb	r3, [r7, #15]
			break;
 800d724:	e132      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 800d726:	4b80      	ldr	r3, [pc, #512]	; (800d928 <Crc_VerifyUartData+0x2c0>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68ba      	ldr	r2, [r7, #8]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d102      	bne.n	800d736 <Crc_VerifyUartData+0xce>
			{
				returnValue = E_OK;
 800d730:	2300      	movs	r3, #0
 800d732:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d734:	e12a      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d736:	2301      	movs	r3, #1
 800d738:	73fb      	strb	r3, [r7, #15]
			break;
 800d73a:	e127      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:
			if(calculatedCrc == Crc_ExtLights_PositionZero)
 800d73c:	4b7b      	ldr	r3, [pc, #492]	; (800d92c <Crc_VerifyUartData+0x2c4>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	429a      	cmp	r2, r3
 800d744:	d102      	bne.n	800d74c <Crc_VerifyUartData+0xe4>
			{
				returnValue = E_OK;
 800d746:	2300      	movs	r3, #0
 800d748:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d74a:	e11f      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d74c:	2301      	movs	r3, #1
 800d74e:	73fb      	strb	r3, [r7, #15]
			break;
 800d750:	e11c      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 800d752:	4b77      	ldr	r3, [pc, #476]	; (800d930 <Crc_VerifyUartData+0x2c8>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	68ba      	ldr	r2, [r7, #8]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d102      	bne.n	800d762 <Crc_VerifyUartData+0xfa>
			{
				returnValue = E_OK;
 800d75c:	2300      	movs	r3, #0
 800d75e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d760:	e114      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d762:	2301      	movs	r3, #1
 800d764:	73fb      	strb	r3, [r7, #15]
			break;
 800d766:	e111      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
			if(calculatedCrc == Crc_ExtLights_PositionLights)
 800d768:	4b72      	ldr	r3, [pc, #456]	; (800d934 <Crc_VerifyUartData+0x2cc>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d102      	bne.n	800d778 <Crc_VerifyUartData+0x110>
			{
				returnValue = E_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d776:	e109      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d778:	2301      	movs	r3, #1
 800d77a:	73fb      	strb	r3, [r7, #15]
			break;
 800d77c:	e106      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 800d77e:	4b6e      	ldr	r3, [pc, #440]	; (800d938 <Crc_VerifyUartData+0x2d0>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	68ba      	ldr	r2, [r7, #8]
 800d784:	429a      	cmp	r2, r3
 800d786:	d102      	bne.n	800d78e <Crc_VerifyUartData+0x126>
			{
				returnValue = E_OK;
 800d788:	2300      	movs	r3, #0
 800d78a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d78c:	e0fe      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d78e:	2301      	movs	r3, #1
 800d790:	73fb      	strb	r3, [r7, #15]
			break;
 800d792:	e0fb      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_CENLOC_ON:
			if(calculatedCrc == Crc_CenLoc_On)
 800d794:	4b69      	ldr	r3, [pc, #420]	; (800d93c <Crc_VerifyUartData+0x2d4>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68ba      	ldr	r2, [r7, #8]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d102      	bne.n	800d7a4 <Crc_VerifyUartData+0x13c>
			{
				returnValue = E_OK;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d7a2:	e0f3      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	73fb      	strb	r3, [r7, #15]
			break;
 800d7a8:	e0f0      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_CENLOC_OFF:
			if(calculatedCrc == Crc_CenLoc_Off)
 800d7aa:	4b65      	ldr	r3, [pc, #404]	; (800d940 <Crc_VerifyUartData+0x2d8>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68ba      	ldr	r2, [r7, #8]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d102      	bne.n	800d7ba <Crc_VerifyUartData+0x152>
			{
				returnValue = E_OK;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d7b8:	e0e8      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	73fb      	strb	r3, [r7, #15]
			break;
 800d7be:	e0e5      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 800d7c0:	4b60      	ldr	r3, [pc, #384]	; (800d944 <Crc_VerifyUartData+0x2dc>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68ba      	ldr	r2, [r7, #8]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d102      	bne.n	800d7d0 <Crc_VerifyUartData+0x168>
			{
				returnValue = E_OK;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d7ce:	e0dd      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	73fb      	strb	r3, [r7, #15]
			break;
 800d7d4:	e0da      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 800d7d6:	4b5c      	ldr	r3, [pc, #368]	; (800d948 <Crc_VerifyUartData+0x2e0>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	68ba      	ldr	r2, [r7, #8]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d102      	bne.n	800d7e6 <Crc_VerifyUartData+0x17e>
			{
				returnValue = E_OK;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d7e4:	e0d2      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	73fb      	strb	r3, [r7, #15]
			break;
 800d7ea:	e0cf      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 800d7ec:	4b57      	ldr	r3, [pc, #348]	; (800d94c <Crc_VerifyUartData+0x2e4>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	68ba      	ldr	r2, [r7, #8]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d102      	bne.n	800d7fc <Crc_VerifyUartData+0x194>
			{
				returnValue = E_OK;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d7fa:	e0c7      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	73fb      	strb	r3, [r7, #15]
			break;
 800d800:	e0c4      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 800d802:	4b53      	ldr	r3, [pc, #332]	; (800d950 <Crc_VerifyUartData+0x2e8>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d102      	bne.n	800d812 <Crc_VerifyUartData+0x1aa>
			{
				returnValue = E_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d810:	e0bc      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d812:	2301      	movs	r3, #1
 800d814:	73fb      	strb	r3, [r7, #15]
			break;
 800d816:	e0b9      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 800d818:	4b4e      	ldr	r3, [pc, #312]	; (800d954 <Crc_VerifyUartData+0x2ec>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d102      	bne.n	800d828 <Crc_VerifyUartData+0x1c0>
			{
				returnValue = E_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d826:	e0b1      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d828:	2301      	movs	r3, #1
 800d82a:	73fb      	strb	r3, [r7, #15]
			break;
 800d82c:	e0ae      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 800d82e:	4b4a      	ldr	r3, [pc, #296]	; (800d958 <Crc_VerifyUartData+0x2f0>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	429a      	cmp	r2, r3
 800d836:	d102      	bne.n	800d83e <Crc_VerifyUartData+0x1d6>
			{
				returnValue = E_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d83c:	e0a6      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d83e:	2301      	movs	r3, #1
 800d840:	73fb      	strb	r3, [r7, #15]
			break;
 800d842:	e0a3      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 800d844:	4b45      	ldr	r3, [pc, #276]	; (800d95c <Crc_VerifyUartData+0x2f4>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d102      	bne.n	800d854 <Crc_VerifyUartData+0x1ec>
			{
				returnValue = E_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d852:	e09b      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d854:	2301      	movs	r3, #1
 800d856:	73fb      	strb	r3, [r7, #15]
			break;
 800d858:	e098      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 800d85a:	4b41      	ldr	r3, [pc, #260]	; (800d960 <Crc_VerifyUartData+0x2f8>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	429a      	cmp	r2, r3
 800d862:	d102      	bne.n	800d86a <Crc_VerifyUartData+0x202>
			{
				returnValue = E_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d868:	e090      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d86a:	2301      	movs	r3, #1
 800d86c:	73fb      	strb	r3, [r7, #15]
			break;
 800d86e:	e08d      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 800d870:	4b3c      	ldr	r3, [pc, #240]	; (800d964 <Crc_VerifyUartData+0x2fc>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	429a      	cmp	r2, r3
 800d878:	d102      	bne.n	800d880 <Crc_VerifyUartData+0x218>
			{
				returnValue = E_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d87e:	e085      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d880:	2301      	movs	r3, #1
 800d882:	73fb      	strb	r3, [r7, #15]
			break;
 800d884:	e082      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 800d886:	4b38      	ldr	r3, [pc, #224]	; (800d968 <Crc_VerifyUartData+0x300>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d102      	bne.n	800d896 <Crc_VerifyUartData+0x22e>
			{
				returnValue = E_OK;
 800d890:	2300      	movs	r3, #0
 800d892:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d894:	e07a      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d896:	2301      	movs	r3, #1
 800d898:	73fb      	strb	r3, [r7, #15]
			break;
 800d89a:	e077      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 800d89c:	4b33      	ldr	r3, [pc, #204]	; (800d96c <Crc_VerifyUartData+0x304>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d102      	bne.n	800d8ac <Crc_VerifyUartData+0x244>
			{
				returnValue = E_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d8aa:	e06f      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	73fb      	strb	r3, [r7, #15]
			break;
 800d8b0:	e06c      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 800d8b2:	4b2f      	ldr	r3, [pc, #188]	; (800d970 <Crc_VerifyUartData+0x308>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68ba      	ldr	r2, [r7, #8]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d102      	bne.n	800d8c2 <Crc_VerifyUartData+0x25a>
			{
				returnValue = E_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d8c0:	e064      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	73fb      	strb	r3, [r7, #15]
			break;
 800d8c6:	e061      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 800d8c8:	4b2a      	ldr	r3, [pc, #168]	; (800d974 <Crc_VerifyUartData+0x30c>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d102      	bne.n	800d8d8 <Crc_VerifyUartData+0x270>
			{
				returnValue = E_OK;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d8d6:	e059      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	73fb      	strb	r3, [r7, #15]
			break;
 800d8dc:	e056      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 800d8de:	4b26      	ldr	r3, [pc, #152]	; (800d978 <Crc_VerifyUartData+0x310>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d102      	bne.n	800d8ee <Crc_VerifyUartData+0x286>
			{
				returnValue = E_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d8ec:	e04e      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	73fb      	strb	r3, [r7, #15]
			break;
 800d8f2:	e04b      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 800d8f4:	4b21      	ldr	r3, [pc, #132]	; (800d97c <Crc_VerifyUartData+0x314>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d102      	bne.n	800d904 <Crc_VerifyUartData+0x29c>
			{
				returnValue = E_OK;
 800d8fe:	2300      	movs	r3, #0
 800d900:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d902:	e043      	b.n	800d98c <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d904:	2301      	movs	r3, #1
 800d906:	73fb      	strb	r3, [r7, #15]
			break;
 800d908:	e040      	b.n	800d98c <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 800d90a:	4b1d      	ldr	r3, [pc, #116]	; (800d980 <Crc_VerifyUartData+0x318>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	68ba      	ldr	r2, [r7, #8]
 800d910:	429a      	cmp	r2, r3
 800d912:	d137      	bne.n	800d984 <Crc_VerifyUartData+0x31c>
			{
				returnValue = E_OK;
 800d914:	2300      	movs	r3, #0
 800d916:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d918:	e038      	b.n	800d98c <Crc_VerifyUartData+0x324>
 800d91a:	bf00      	nop
 800d91c:	20008940 	.word	0x20008940
 800d920:	200001f0 	.word	0x200001f0
 800d924:	2000897c 	.word	0x2000897c
 800d928:	20008980 	.word	0x20008980
 800d92c:	20008984 	.word	0x20008984
 800d930:	20008988 	.word	0x20008988
 800d934:	2000898c 	.word	0x2000898c
 800d938:	20008990 	.word	0x20008990
 800d93c:	20008944 	.word	0x20008944
 800d940:	20008948 	.word	0x20008948
 800d944:	2000894c 	.word	0x2000894c
 800d948:	20008950 	.word	0x20008950
 800d94c:	20008954 	.word	0x20008954
 800d950:	20008958 	.word	0x20008958
 800d954:	2000895c 	.word	0x2000895c
 800d958:	20008960 	.word	0x20008960
 800d95c:	20008964 	.word	0x20008964
 800d960:	20008968 	.word	0x20008968
 800d964:	2000896c 	.word	0x2000896c
 800d968:	20008970 	.word	0x20008970
 800d96c:	2000899c 	.word	0x2000899c
 800d970:	200089a0 	.word	0x200089a0
 800d974:	20008974 	.word	0x20008974
 800d978:	20008978 	.word	0x20008978
 800d97c:	20008994 	.word	0x20008994
 800d980:	20008998 	.word	0x20008998
				returnValue = E_NOT_OK;
 800d984:	2301      	movs	r3, #1
 800d986:	73fb      	strb	r3, [r7, #15]
			break;
 800d988:	e000      	b.n	800d98c <Crc_VerifyUartData+0x324>
		default:
			break;
 800d98a:	bf00      	nop
	}
	return returnValue;
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop

0800d998 <Crc_InitCrcValuesForUart>:
/***********************************************************************************
* Function: Crc_InitCrcValuesForUart									   		   *
* Description: Initialize the CRC default values for UART data.			 		   *
************************************************************************************/
VOID Crc_InitCrcValuesForUart()
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
	/* Local variable to store default value of possible
	 * received data from UART. */
	uint32 value = 0;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	607b      	str	r3, [r7, #4]
	/* Calculate CRC for each defined bluetooth command. */
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 800d9a2:	230f      	movs	r3, #15
 800d9a4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800d9a6:	1d3b      	adds	r3, r7, #4
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	4883      	ldr	r0, [pc, #524]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800d9ae:	f7f7 fa61 	bl	8004e74 <HAL_CRC_Calculate>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	4a82      	ldr	r2, [pc, #520]	; (800dbc0 <Crc_InitCrcValuesForUart+0x228>)
 800d9b6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 800d9b8:	2310      	movs	r3, #16
 800d9ba:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800d9bc:	1d3b      	adds	r3, r7, #4
 800d9be:	2201      	movs	r2, #1
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	487e      	ldr	r0, [pc, #504]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800d9c4:	f7f7 fa56 	bl	8004e74 <HAL_CRC_Calculate>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	4a7e      	ldr	r2, [pc, #504]	; (800dbc4 <Crc_InitCrcValuesForUart+0x22c>)
 800d9cc:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_ON;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800d9d2:	1d3b      	adds	r3, r7, #4
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	4878      	ldr	r0, [pc, #480]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800d9da:	f7f7 fa4b 	bl	8004e74 <HAL_CRC_Calculate>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	4a79      	ldr	r2, [pc, #484]	; (800dbc8 <Crc_InitCrcValuesForUart+0x230>)
 800d9e2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_OFF;
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800d9e8:	1d3b      	adds	r3, r7, #4
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	4873      	ldr	r0, [pc, #460]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800d9f0:	f7f7 fa40 	bl	8004e74 <HAL_CRC_Calculate>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	4a75      	ldr	r2, [pc, #468]	; (800dbcc <Crc_InitCrcValuesForUart+0x234>)
 800d9f8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800d9fe:	1d3b      	adds	r3, r7, #4
 800da00:	2201      	movs	r2, #1
 800da02:	4619      	mov	r1, r3
 800da04:	486d      	ldr	r0, [pc, #436]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800da06:	f7f7 fa35 	bl	8004e74 <HAL_CRC_Calculate>
 800da0a:	4603      	mov	r3, r0
 800da0c:	4a70      	ldr	r2, [pc, #448]	; (800dbd0 <Crc_InitCrcValuesForUart+0x238>)
 800da0e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 800da10:	2304      	movs	r3, #4
 800da12:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da14:	1d3b      	adds	r3, r7, #4
 800da16:	2201      	movs	r2, #1
 800da18:	4619      	mov	r1, r3
 800da1a:	4868      	ldr	r0, [pc, #416]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800da1c:	f7f7 fa2a 	bl	8004e74 <HAL_CRC_Calculate>
 800da20:	4603      	mov	r3, r0
 800da22:	4a6c      	ldr	r2, [pc, #432]	; (800dbd4 <Crc_InitCrcValuesForUart+0x23c>)
 800da24:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 800da26:	2307      	movs	r3, #7
 800da28:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da2a:	1d3b      	adds	r3, r7, #4
 800da2c:	2201      	movs	r2, #1
 800da2e:	4619      	mov	r1, r3
 800da30:	4862      	ldr	r0, [pc, #392]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800da32:	f7f7 fa1f 	bl	8004e74 <HAL_CRC_Calculate>
 800da36:	4603      	mov	r3, r0
 800da38:	4a67      	ldr	r2, [pc, #412]	; (800dbd8 <Crc_InitCrcValuesForUart+0x240>)
 800da3a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 800da3c:	2308      	movs	r3, #8
 800da3e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da40:	1d3b      	adds	r3, r7, #4
 800da42:	2201      	movs	r2, #1
 800da44:	4619      	mov	r1, r3
 800da46:	485d      	ldr	r0, [pc, #372]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800da48:	f7f7 fa14 	bl	8004e74 <HAL_CRC_Calculate>
 800da4c:	4603      	mov	r3, r0
 800da4e:	4a63      	ldr	r2, [pc, #396]	; (800dbdc <Crc_InitCrcValuesForUart+0x244>)
 800da50:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 800da52:	2309      	movs	r3, #9
 800da54:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da56:	1d3b      	adds	r3, r7, #4
 800da58:	2201      	movs	r2, #1
 800da5a:	4619      	mov	r1, r3
 800da5c:	4857      	ldr	r0, [pc, #348]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800da5e:	f7f7 fa09 	bl	8004e74 <HAL_CRC_Calculate>
 800da62:	4603      	mov	r3, r0
 800da64:	4a5e      	ldr	r2, [pc, #376]	; (800dbe0 <Crc_InitCrcValuesForUart+0x248>)
 800da66:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 800da68:	230a      	movs	r3, #10
 800da6a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da6c:	1d3b      	adds	r3, r7, #4
 800da6e:	2201      	movs	r2, #1
 800da70:	4619      	mov	r1, r3
 800da72:	4852      	ldr	r0, [pc, #328]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800da74:	f7f7 f9fe 	bl	8004e74 <HAL_CRC_Calculate>
 800da78:	4603      	mov	r3, r0
 800da7a:	4a5a      	ldr	r2, [pc, #360]	; (800dbe4 <Crc_InitCrcValuesForUart+0x24c>)
 800da7c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 800da7e:	230b      	movs	r3, #11
 800da80:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da82:	1d3b      	adds	r3, r7, #4
 800da84:	2201      	movs	r2, #1
 800da86:	4619      	mov	r1, r3
 800da88:	484c      	ldr	r0, [pc, #304]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800da8a:	f7f7 f9f3 	bl	8004e74 <HAL_CRC_Calculate>
 800da8e:	4603      	mov	r3, r0
 800da90:	4a55      	ldr	r2, [pc, #340]	; (800dbe8 <Crc_InitCrcValuesForUart+0x250>)
 800da92:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 800da94:	230c      	movs	r3, #12
 800da96:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da98:	1d3b      	adds	r3, r7, #4
 800da9a:	2201      	movs	r2, #1
 800da9c:	4619      	mov	r1, r3
 800da9e:	4847      	ldr	r0, [pc, #284]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800daa0:	f7f7 f9e8 	bl	8004e74 <HAL_CRC_Calculate>
 800daa4:	4603      	mov	r3, r0
 800daa6:	4a51      	ldr	r2, [pc, #324]	; (800dbec <Crc_InitCrcValuesForUart+0x254>)
 800daa8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 800daaa:	230d      	movs	r3, #13
 800daac:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800daae:	1d3b      	adds	r3, r7, #4
 800dab0:	2201      	movs	r2, #1
 800dab2:	4619      	mov	r1, r3
 800dab4:	4841      	ldr	r0, [pc, #260]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800dab6:	f7f7 f9dd 	bl	8004e74 <HAL_CRC_Calculate>
 800daba:	4603      	mov	r3, r0
 800dabc:	4a4c      	ldr	r2, [pc, #304]	; (800dbf0 <Crc_InitCrcValuesForUart+0x258>)
 800dabe:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 800dac0:	230e      	movs	r3, #14
 800dac2:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dac4:	1d3b      	adds	r3, r7, #4
 800dac6:	2201      	movs	r2, #1
 800dac8:	4619      	mov	r1, r3
 800daca:	483c      	ldr	r0, [pc, #240]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800dacc:	f7f7 f9d2 	bl	8004e74 <HAL_CRC_Calculate>
 800dad0:	4603      	mov	r3, r0
 800dad2:	4a48      	ldr	r2, [pc, #288]	; (800dbf4 <Crc_InitCrcValuesForUart+0x25c>)
 800dad4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 800dad6:	2311      	movs	r3, #17
 800dad8:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dada:	1d3b      	adds	r3, r7, #4
 800dadc:	2201      	movs	r2, #1
 800dade:	4619      	mov	r1, r3
 800dae0:	4836      	ldr	r0, [pc, #216]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800dae2:	f7f7 f9c7 	bl	8004e74 <HAL_CRC_Calculate>
 800dae6:	4603      	mov	r3, r0
 800dae8:	4a43      	ldr	r2, [pc, #268]	; (800dbf8 <Crc_InitCrcValuesForUart+0x260>)
 800daea:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 800daec:	2312      	movs	r3, #18
 800daee:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800daf0:	1d3b      	adds	r3, r7, #4
 800daf2:	2201      	movs	r2, #1
 800daf4:	4619      	mov	r1, r3
 800daf6:	4831      	ldr	r0, [pc, #196]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800daf8:	f7f7 f9bc 	bl	8004e74 <HAL_CRC_Calculate>
 800dafc:	4603      	mov	r3, r0
 800dafe:	4a3f      	ldr	r2, [pc, #252]	; (800dbfc <Crc_InitCrcValuesForUart+0x264>)
 800db00:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 800db02:	2315      	movs	r3, #21
 800db04:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db06:	1d3b      	adds	r3, r7, #4
 800db08:	2201      	movs	r2, #1
 800db0a:	4619      	mov	r1, r3
 800db0c:	482b      	ldr	r0, [pc, #172]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800db0e:	f7f7 f9b1 	bl	8004e74 <HAL_CRC_Calculate>
 800db12:	4603      	mov	r3, r0
 800db14:	4a3a      	ldr	r2, [pc, #232]	; (800dc00 <Crc_InitCrcValuesForUart+0x268>)
 800db16:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 800db18:	2316      	movs	r3, #22
 800db1a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db1c:	1d3b      	adds	r3, r7, #4
 800db1e:	2201      	movs	r2, #1
 800db20:	4619      	mov	r1, r3
 800db22:	4826      	ldr	r0, [pc, #152]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800db24:	f7f7 f9a6 	bl	8004e74 <HAL_CRC_Calculate>
 800db28:	4603      	mov	r3, r0
 800db2a:	4a36      	ldr	r2, [pc, #216]	; (800dc04 <Crc_InitCrcValuesForUart+0x26c>)
 800db2c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 800db2e:	2317      	movs	r3, #23
 800db30:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db32:	1d3b      	adds	r3, r7, #4
 800db34:	2201      	movs	r2, #1
 800db36:	4619      	mov	r1, r3
 800db38:	4820      	ldr	r0, [pc, #128]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800db3a:	f7f7 f99b 	bl	8004e74 <HAL_CRC_Calculate>
 800db3e:	4603      	mov	r3, r0
 800db40:	4a31      	ldr	r2, [pc, #196]	; (800dc08 <Crc_InitCrcValuesForUart+0x270>)
 800db42:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800db44:	2318      	movs	r3, #24
 800db46:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db48:	1d3b      	adds	r3, r7, #4
 800db4a:	2201      	movs	r2, #1
 800db4c:	4619      	mov	r1, r3
 800db4e:	481b      	ldr	r0, [pc, #108]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800db50:	f7f7 f990 	bl	8004e74 <HAL_CRC_Calculate>
 800db54:	4603      	mov	r3, r0
 800db56:	4a2d      	ldr	r2, [pc, #180]	; (800dc0c <Crc_InitCrcValuesForUart+0x274>)
 800db58:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 800db5a:	2319      	movs	r3, #25
 800db5c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db5e:	1d3b      	adds	r3, r7, #4
 800db60:	2201      	movs	r2, #1
 800db62:	4619      	mov	r1, r3
 800db64:	4815      	ldr	r0, [pc, #84]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800db66:	f7f7 f985 	bl	8004e74 <HAL_CRC_Calculate>
 800db6a:	4603      	mov	r3, r0
 800db6c:	4a28      	ldr	r2, [pc, #160]	; (800dc10 <Crc_InitCrcValuesForUart+0x278>)
 800db6e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 800db70:	231a      	movs	r3, #26
 800db72:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db74:	1d3b      	adds	r3, r7, #4
 800db76:	2201      	movs	r2, #1
 800db78:	4619      	mov	r1, r3
 800db7a:	4810      	ldr	r0, [pc, #64]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800db7c:	f7f7 f97a 	bl	8004e74 <HAL_CRC_Calculate>
 800db80:	4603      	mov	r3, r0
 800db82:	4a24      	ldr	r2, [pc, #144]	; (800dc14 <Crc_InitCrcValuesForUart+0x27c>)
 800db84:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 800db86:	2313      	movs	r3, #19
 800db88:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db8a:	1d3b      	adds	r3, r7, #4
 800db8c:	2201      	movs	r2, #1
 800db8e:	4619      	mov	r1, r3
 800db90:	480a      	ldr	r0, [pc, #40]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800db92:	f7f7 f96f 	bl	8004e74 <HAL_CRC_Calculate>
 800db96:	4603      	mov	r3, r0
 800db98:	4a1f      	ldr	r2, [pc, #124]	; (800dc18 <Crc_InitCrcValuesForUart+0x280>)
 800db9a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 800db9c:	2314      	movs	r3, #20
 800db9e:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dba0:	1d3b      	adds	r3, r7, #4
 800dba2:	2201      	movs	r2, #1
 800dba4:	4619      	mov	r1, r3
 800dba6:	4805      	ldr	r0, [pc, #20]	; (800dbbc <Crc_InitCrcValuesForUart+0x224>)
 800dba8:	f7f7 f964 	bl	8004e74 <HAL_CRC_Calculate>
 800dbac:	4603      	mov	r3, r0
 800dbae:	4a1b      	ldr	r2, [pc, #108]	; (800dc1c <Crc_InitCrcValuesForUart+0x284>)
 800dbb0:	6013      	str	r3, [r2, #0]
}
 800dbb2:	bf00      	nop
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	200001f0 	.word	0x200001f0
 800dbc0:	2000899c 	.word	0x2000899c
 800dbc4:	200089a0 	.word	0x200089a0
 800dbc8:	20008944 	.word	0x20008944
 800dbcc:	20008948 	.word	0x20008948
 800dbd0:	2000894c 	.word	0x2000894c
 800dbd4:	20008950 	.word	0x20008950
 800dbd8:	20008954 	.word	0x20008954
 800dbdc:	20008958 	.word	0x20008958
 800dbe0:	2000895c 	.word	0x2000895c
 800dbe4:	20008960 	.word	0x20008960
 800dbe8:	20008964 	.word	0x20008964
 800dbec:	20008968 	.word	0x20008968
 800dbf0:	2000896c 	.word	0x2000896c
 800dbf4:	20008970 	.word	0x20008970
 800dbf8:	20008974 	.word	0x20008974
 800dbfc:	20008978 	.word	0x20008978
 800dc00:	2000897c 	.word	0x2000897c
 800dc04:	20008980 	.word	0x20008980
 800dc08:	20008984 	.word	0x20008984
 800dc0c:	20008988 	.word	0x20008988
 800dc10:	2000898c 	.word	0x2000898c
 800dc14:	20008990 	.word	0x20008990
 800dc18:	20008994 	.word	0x20008994
 800dc1c:	20008998 	.word	0x20008998

0800dc20 <HAL_CRC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_CRC_ErrorCallback												   *
* Description: Called in case of error. 								 		   *
************************************************************************************/
VOID HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization. */
	Crc_DeInit();
 800dc28:	f000 f81e 	bl	800dc68 <Crc_DeInit>
	Crc_Init();
 800dc2c:	f000 f804 	bl	800dc38 <Crc_Init>
}
 800dc30:	bf00      	nop
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <Crc_Init>:
/***********************************************************************************
* Function: Crc_Init													   		   *
* Description: Initialize the peripheral.								 		   *
************************************************************************************/
StdReturnType Crc_Init()
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	af00      	add	r7, sp, #0
	/* Initialize the CRC.
	 * Call for the error callback in case of faulty initialization. */
	hcrc.Instance = CRC;
 800dc3c:	4b08      	ldr	r3, [pc, #32]	; (800dc60 <Crc_Init+0x28>)
 800dc3e:	4a09      	ldr	r2, [pc, #36]	; (800dc64 <Crc_Init+0x2c>)
 800dc40:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800dc42:	4807      	ldr	r0, [pc, #28]	; (800dc60 <Crc_Init+0x28>)
 800dc44:	f7f7 f8ca 	bl	8004ddc <HAL_CRC_Init>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d002      	beq.n	800dc54 <Crc_Init+0x1c>
	{
		HAL_CRC_ErrorCallback(&hcrc);
 800dc4e:	4804      	ldr	r0, [pc, #16]	; (800dc60 <Crc_Init+0x28>)
 800dc50:	f7ff ffe6 	bl	800dc20 <HAL_CRC_ErrorCallback>
	else
	{
		/* do nothing */
	}
	/* Initialize the default CRC UART data received values. */
	Crc_InitCrcValuesForUart();
 800dc54:	f7ff fea0 	bl	800d998 <Crc_InitCrcValuesForUart>
	return E_OK;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	200001f0 	.word	0x200001f0
 800dc64:	40023000 	.word	0x40023000

0800dc68 <Crc_DeInit>:
/***********************************************************************************
* Function: Crc_DeInit													   		   *
* Description: De-initialize the peripheral.		 		   					   *
************************************************************************************/
StdReturnType Crc_DeInit()
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	af00      	add	r7, sp, #0
	/* De-initialize the CRC. */
	HAL_CRC_DeInit(&hcrc);
 800dc6c:	4802      	ldr	r0, [pc, #8]	; (800dc78 <Crc_DeInit+0x10>)
 800dc6e:	f7f7 f8d1 	bl	8004e14 <HAL_CRC_DeInit>
	return E_OK;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	200001f0 	.word	0x200001f0

0800dc7c <Crc_MainFunction>:
/***********************************************************************************
* Function: Crc_MainFunction													   *
* Description: Peripheral main function.		 		   						   *
************************************************************************************/
VOID Crc_MainFunction()
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
	/* Get the error status in the local variable. */
	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 800dc82:	4825      	ldr	r0, [pc, #148]	; (800dd18 <Crc_MainFunction+0x9c>)
 800dc84:	f7f7 f929 	bl	8004eda <HAL_CRC_GetState>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	607b      	str	r3, [r7, #4]
	/* Process module state. */
	switch(Crc_BswState)
 800dc8c:	4b23      	ldr	r3, [pc, #140]	; (800dd1c <Crc_MainFunction+0xa0>)
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	2b03      	cmp	r3, #3
 800dc92:	d81a      	bhi.n	800dcca <Crc_MainFunction+0x4e>
 800dc94:	a201      	add	r2, pc, #4	; (adr r2, 800dc9c <Crc_MainFunction+0x20>)
 800dc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc9a:	bf00      	nop
 800dc9c:	0800dcad 	.word	0x0800dcad
 800dca0:	0800dccb 	.word	0x0800dccb
 800dca4:	0800dcbf 	.word	0x0800dcbf
 800dca8:	0800dcb9 	.word	0x0800dcb9
	{
		case CRC_INIT_STATE:
			Crc_Init();
 800dcac:	f7ff ffc4 	bl	800dc38 <Crc_Init>
			Crc_BswState = CRC_INITCRCVALUES_STATE;
 800dcb0:	4b1a      	ldr	r3, [pc, #104]	; (800dd1c <Crc_MainFunction+0xa0>)
 800dcb2:	2202      	movs	r2, #2
 800dcb4:	701a      	strb	r2, [r3, #0]
			break;
 800dcb6:	e009      	b.n	800dccc <Crc_MainFunction+0x50>
		case CRC_DEINIT_STATE:
			Crc_DeInit();
 800dcb8:	f7ff ffd6 	bl	800dc68 <Crc_DeInit>
			break;
 800dcbc:	e006      	b.n	800dccc <Crc_MainFunction+0x50>
		case CRC_VERIFYUARTDATA_STATE:
			break;
		case CRC_INITCRCVALUES_STATE:
			Crc_InitCrcValuesForUart();
 800dcbe:	f7ff fe6b 	bl	800d998 <Crc_InitCrcValuesForUart>
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800dcc2:	4b16      	ldr	r3, [pc, #88]	; (800dd1c <Crc_MainFunction+0xa0>)
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	701a      	strb	r2, [r3, #0]
			break;
 800dcc8:	e000      	b.n	800dccc <Crc_MainFunction+0x50>
		default:
			break;
 800dcca:	bf00      	nop
	}
	/* Process peripheral state. */
	switch(returnValue)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b04      	cmp	r3, #4
 800dcd0:	d81c      	bhi.n	800dd0c <Crc_MainFunction+0x90>
 800dcd2:	a201      	add	r2, pc, #4	; (adr r2, 800dcd8 <Crc_MainFunction+0x5c>)
 800dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd8:	0800dced 	.word	0x0800dced
 800dcdc:	0800dcf5 	.word	0x0800dcf5
 800dce0:	0800dd0d 	.word	0x0800dd0d
 800dce4:	0800dcfd 	.word	0x0800dcfd
 800dce8:	0800dd05 	.word	0x0800dd05
	{
		case HAL_CRC_STATE_RESET:
			Crc_BswState = CRC_INIT_STATE;
 800dcec:	4b0b      	ldr	r3, [pc, #44]	; (800dd1c <Crc_MainFunction+0xa0>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	701a      	strb	r2, [r3, #0]
			break;
 800dcf2:	e00c      	b.n	800dd0e <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_READY:
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800dcf4:	4b09      	ldr	r3, [pc, #36]	; (800dd1c <Crc_MainFunction+0xa0>)
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	701a      	strb	r2, [r3, #0]
			break;
 800dcfa:	e008      	b.n	800dd0e <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_BUSY:
			break;
		case HAL_CRC_STATE_TIMEOUT:
			HAL_CRC_ErrorCallback(&hcrc);
 800dcfc:	4806      	ldr	r0, [pc, #24]	; (800dd18 <Crc_MainFunction+0x9c>)
 800dcfe:	f7ff ff8f 	bl	800dc20 <HAL_CRC_ErrorCallback>
			break;
 800dd02:	e004      	b.n	800dd0e <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_ERROR:
			HAL_CRC_ErrorCallback(&hcrc);
 800dd04:	4804      	ldr	r0, [pc, #16]	; (800dd18 <Crc_MainFunction+0x9c>)
 800dd06:	f7ff ff8b 	bl	800dc20 <HAL_CRC_ErrorCallback>
			break;
 800dd0a:	e000      	b.n	800dd0e <Crc_MainFunction+0x92>
		default:
			break;
 800dd0c:	bf00      	nop
	}
}
 800dd0e:	bf00      	nop
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	200001f0 	.word	0x200001f0
 800dd1c:	20008940 	.word	0x20008940

0800dd20 <EcuM_CheckForWakeupEvent>:
/***********************************************************************************
* Function: EcuM_CheckForWakeupEvent									   		   *
* Description: Checks for the wake up event and sends it forward for processing.   *
************************************************************************************/
VOID EcuM_CheckForWakeupEvent()
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	af00      	add	r7, sp, #0
	/* Check if power-on reset wake-up event occurred. */
	if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 800dd24:	4b27      	ldr	r3, [pc, #156]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d009      	beq.n	800dd44 <EcuM_CheckForWakeupEvent+0x24>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 800dd30:	2000      	movs	r0, #0
 800dd32:	f000 f849 	bl	800ddc8 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_PORRSTF;
 800dd36:	4b23      	ldr	r3, [pc, #140]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd3a:	4a22      	ldr	r2, [pc, #136]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd40:	6753      	str	r3, [r2, #116]	; 0x74
	}/* Check if a button reset wake-up event occurred. */
	else
	{
		/* do nothing */
	}
}
 800dd42:	e03c      	b.n	800ddbe <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_BORRSTF) != 0)
 800dd44:	4b1f      	ldr	r3, [pc, #124]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d009      	beq.n	800dd64 <EcuM_CheckForWakeupEvent+0x44>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 800dd50:	2001      	movs	r0, #1
 800dd52:	f000 f839 	bl	800ddc8 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_BORRSTF;
 800dd56:	4b1b      	ldr	r3, [pc, #108]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd5a:	4a1a      	ldr	r2, [pc, #104]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dd60:	6753      	str	r3, [r2, #116]	; 0x74
}
 800dd62:	e02c      	b.n	800ddbe <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 800dd64:	4b17      	ldr	r3, [pc, #92]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d009      	beq.n	800dd84 <EcuM_CheckForWakeupEvent+0x64>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800dd70:	2002      	movs	r0, #2
 800dd72:	f000 f829 	bl	800ddc8 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_SFTRSTF;
 800dd76:	4b13      	ldr	r3, [pc, #76]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd7a:	4a12      	ldr	r2, [pc, #72]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd80:	6753      	str	r3, [r2, #116]	; 0x74
}
 800dd82:	e01c      	b.n	800ddbe <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_IWDGRSTF) != 0)
 800dd84:	4b0f      	ldr	r3, [pc, #60]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d009      	beq.n	800dda4 <EcuM_CheckForWakeupEvent+0x84>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800dd90:	2003      	movs	r0, #3
 800dd92:	f000 f819 	bl	800ddc8 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_IWDGRSTF;
 800dd96:	4b0b      	ldr	r3, [pc, #44]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd9a:	4a0a      	ldr	r2, [pc, #40]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dda0:	6753      	str	r3, [r2, #116]	; 0x74
}
 800dda2:	e00c      	b.n	800ddbe <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 800dda4:	4b07      	ldr	r3, [pc, #28]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800dda6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	da08      	bge.n	800ddbe <EcuM_CheckForWakeupEvent+0x9e>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800ddac:	2004      	movs	r0, #4
 800ddae:	f000 f80b 	bl	800ddc8 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 800ddb2:	4b04      	ldr	r3, [pc, #16]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800ddb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddb6:	4a03      	ldr	r2, [pc, #12]	; (800ddc4 <EcuM_CheckForWakeupEvent+0xa4>)
 800ddb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ddbc:	6753      	str	r3, [r2, #116]	; 0x74
}
 800ddbe:	bf00      	nop
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	40023800 	.word	0x40023800

0800ddc8 <EcuM_SetWakeupSource>:
/***********************************************************************************
* Function: EcuM_SetWakeupSource									   		   	   *
* Description: Sets the wake up source received.			 		   			   *
************************************************************************************/
VOID EcuM_SetWakeupSource(uint32 wakeupSource)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
	/* If wake-up source is valid. */
	if(wakeupSource != NULL_PTR)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d003      	beq.n	800ddde <EcuM_SetWakeupSource+0x16>
	{
		/* Store the wake-up event. */
		EcuM_GlobalState = wakeupSource;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	4b04      	ldr	r3, [pc, #16]	; (800ddec <EcuM_SetWakeupSource+0x24>)
 800dddc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800ddde:	bf00      	nop
 800dde0:	370c      	adds	r7, #12
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop
 800ddec:	200089a5 	.word	0x200089a5

0800ddf0 <EcuM_ProcessWakeupEvent>:
/***********************************************************************************
* Function: EcuM_ProcessWakeupEvent									   		       *
* Description: Sends forward the wake up event.							 		   *
************************************************************************************/
VOID EcuM_ProcessWakeupEvent()
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
	/* Store the wake-up event into local variable. */
	uint8 localWakeupEvent = EcuM_GlobalState;
 800ddf6:	4b1d      	ldr	r3, [pc, #116]	; (800de6c <EcuM_ProcessWakeupEvent+0x7c>)
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	71fb      	strb	r3, [r7, #7]
	/* Set the system fault for the respective wake-up event. */
	switch(localWakeupEvent)
 800ddfc:	79fb      	ldrb	r3, [r7, #7]
 800ddfe:	2b04      	cmp	r3, #4
 800de00:	d82f      	bhi.n	800de62 <EcuM_ProcessWakeupEvent+0x72>
 800de02:	a201      	add	r2, pc, #4	; (adr r2, 800de08 <EcuM_ProcessWakeupEvent+0x18>)
 800de04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de08:	0800de1d 	.word	0x0800de1d
 800de0c:	0800de2b 	.word	0x0800de2b
 800de10:	0800de39 	.word	0x0800de39
 800de14:	0800de47 	.word	0x0800de47
 800de18:	0800de55 	.word	0x0800de55
	{
		case ECUM_WAKEUPSOURCE_POR:
			EcuM_GlobalState = 255;
 800de1c:	4b13      	ldr	r3, [pc, #76]	; (800de6c <EcuM_ProcessWakeupEvent+0x7c>)
 800de1e:	22ff      	movs	r2, #255	; 0xff
 800de20:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 800de22:	2000      	movs	r0, #0
 800de24:	f000 f95c 	bl	800e0e0 <SystemManager_SetFault>
			break;
 800de28:	e01c      	b.n	800de64 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_BOR:
			EcuM_GlobalState = 255;
 800de2a:	4b10      	ldr	r3, [pc, #64]	; (800de6c <EcuM_ProcessWakeupEvent+0x7c>)
 800de2c:	22ff      	movs	r2, #255	; 0xff
 800de2e:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 800de30:	2001      	movs	r0, #1
 800de32:	f000 f955 	bl	800e0e0 <SystemManager_SetFault>
			break;
 800de36:	e015      	b.n	800de64 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:
			EcuM_GlobalState = 255;
 800de38:	4b0c      	ldr	r3, [pc, #48]	; (800de6c <EcuM_ProcessWakeupEvent+0x7c>)
 800de3a:	22ff      	movs	r2, #255	; 0xff
 800de3c:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800de3e:	2002      	movs	r0, #2
 800de40:	f000 f94e 	bl	800e0e0 <SystemManager_SetFault>
			break;
 800de44:	e00e      	b.n	800de64 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:
			EcuM_GlobalState = 255;
 800de46:	4b09      	ldr	r3, [pc, #36]	; (800de6c <EcuM_ProcessWakeupEvent+0x7c>)
 800de48:	22ff      	movs	r2, #255	; 0xff
 800de4a:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800de4c:	2003      	movs	r0, #3
 800de4e:	f000 f947 	bl	800e0e0 <SystemManager_SetFault>
			break;
 800de52:	e007      	b.n	800de64 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:
			EcuM_GlobalState = 255;
 800de54:	4b05      	ldr	r3, [pc, #20]	; (800de6c <EcuM_ProcessWakeupEvent+0x7c>)
 800de56:	22ff      	movs	r2, #255	; 0xff
 800de58:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800de5a:	2004      	movs	r0, #4
 800de5c:	f000 f940 	bl	800e0e0 <SystemManager_SetFault>
			break;
 800de60:	e000      	b.n	800de64 <EcuM_ProcessWakeupEvent+0x74>
		default:
			break;
 800de62:	bf00      	nop
	}
}
 800de64:	bf00      	nop
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	200089a5 	.word	0x200089a5

0800de70 <EcuM_DriverInit>:
/***********************************************************************************
* Function: EcuM_DriverInit									   		               *
* Description: Initialize the drivers.			 		   						   *
************************************************************************************/
StdReturnType EcuM_DriverInit()
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
	Port_Init();
 800de76:	f7fb fb71 	bl	800955c <Port_Init>
	MX_DMA_Init();
 800de7a:	f7f4 fd65 	bl	8002948 <MX_DMA_Init>
	Tim_Init(TIMER_TWO);
 800de7e:	2002      	movs	r0, #2
 800de80:	f7fb fca4 	bl	80097cc <Tim_Init>
	Tim_Init(TIMER_THREE);
 800de84:	2003      	movs	r0, #3
 800de86:	f7fb fca1 	bl	80097cc <Tim_Init>
	Tim_Init(TIMER_FOUR);
 800de8a:	2004      	movs	r0, #4
 800de8c:	f7fb fc9e 	bl	80097cc <Tim_Init>
	Tim_Init(TIMER_FIVE);
 800de90:	2005      	movs	r0, #5
 800de92:	f7fb fc9b 	bl	80097cc <Tim_Init>
	Adc_Init();
 800de96:	f7fb fac1 	bl	800941c <Adc_Init>
	Crc_Init();
 800de9a:	f7ff fecd 	bl	800dc38 <Crc_Init>
	Uart_Init();
 800de9e:	f7f4 faeb 	bl	8002478 <Uart_Init>
	Watchdog_Init();
 800dea2:	f000 fa03 	bl	800e2ac <Watchdog_Init>
	MX_NVIC_Init();
 800dea6:	f000 f94b 	bl	800e140 <MX_NVIC_Init>
	MPU_Region_InitTypeDef MPU_InitStruct;
	HAL_MPU_Disable();
 800deaa:	f7f6 ff1b 	bl	8004ce4 <HAL_MPU_Disable>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800deae:	2301      	movs	r3, #1
 800deb0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x08000000;
 800deb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800deba:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800debc:	2312      	movs	r3, #18
 800debe:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 800dec0:	2300      	movs	r3, #0
 800dec2:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800dec4:	2300      	movs	r3, #0
 800dec6:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800dec8:	2303      	movs	r3, #3
 800deca:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800decc:	2300      	movs	r3, #0
 800dece:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ded0:	463b      	mov	r3, r7
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7f6 ff3e 	bl	8004d54 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800ded8:	2301      	movs	r3, #1
 800deda:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x20000000;
 800dedc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800dee0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800dee2:	2310      	movs	r3, #16
 800dee4:	723b      	strb	r3, [r7, #8]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800dee6:	463b      	mov	r3, r7
 800dee8:	4618      	mov	r0, r3
 800deea:	f7f6 ff33 	bl	8004d54 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800deee:	2302      	movs	r3, #2
 800def0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x40000000;
 800def2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800def6:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800def8:	231c      	movs	r3, #28
 800defa:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 800defc:	2301      	movs	r3, #1
 800defe:	72fb      	strb	r3, [r7, #11]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800df00:	463b      	mov	r3, r7
 800df02:	4618      	mov	r0, r3
 800df04:	f7f6 ff26 	bl	8004d54 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800df08:	2303      	movs	r3, #3
 800df0a:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x60000000;
 800df0c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800df10:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 800df12:	2316      	movs	r3, #22
 800df14:	723b      	strb	r3, [r7, #8]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800df16:	463b      	mov	r3, r7
 800df18:	4618      	mov	r0, r3
 800df1a:	f7f6 ff1b 	bl	8004d54 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800df1e:	2004      	movs	r0, #4
 800df20:	f7f6 fef8 	bl	8004d14 <HAL_MPU_Enable>
	EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 800df24:	4b03      	ldr	r3, [pc, #12]	; (800df34 <EcuM_DriverInit+0xc4>)
 800df26:	2201      	movs	r2, #1
 800df28:	701a      	strb	r2, [r3, #0]
	return E_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	200089a4 	.word	0x200089a4

0800df38 <EcuM_DriverDeInit>:
/***********************************************************************************
* Function: EcuM_DriverDeInit									   		           *
* Description: De-initialize the drivers.			 		                       *
************************************************************************************/
StdReturnType EcuM_DriverDeInit()
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	af00      	add	r7, sp, #0
	Adc_DeInit();
 800df3c:	f7fb fa64 	bl	8009408 <Adc_DeInit>
	Tim_DeInit(TIMER_TWO);
 800df40:	2002      	movs	r0, #2
 800df42:	f7fb fe61 	bl	8009c08 <Tim_DeInit>
	Tim_DeInit(TIMER_THREE);
 800df46:	2003      	movs	r0, #3
 800df48:	f7fb fe5e 	bl	8009c08 <Tim_DeInit>
	Tim_DeInit(TIMER_FOUR);
 800df4c:	2004      	movs	r0, #4
 800df4e:	f7fb fe5b 	bl	8009c08 <Tim_DeInit>
	Tim_DeInit(TIMER_FIVE);
 800df52:	2005      	movs	r0, #5
 800df54:	f7fb fe58 	bl	8009c08 <Tim_DeInit>
	Uart_DeInit();
 800df58:	f7f4 faba 	bl	80024d0 <Uart_DeInit>
	Crc_DeInit();
 800df5c:	f7ff fe84 	bl	800dc68 <Crc_DeInit>
	SystemManager_DeInit();
 800df60:	f000 f8b8 	bl	800e0d4 <SystemManager_DeInit>
	return E_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	bd80      	pop	{r7, pc}
	...

0800df6c <EcuM_MainFunction>:
/***********************************************************************************
* Function: EcuM_MainFunction									   		           *
* Description: Electronic control unit manager main function.			 		   *
************************************************************************************/
VOID EcuM_MainFunction()
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	af00      	add	r7, sp, #0
	switch(EcuM_BswState)
 800df70:	4b12      	ldr	r3, [pc, #72]	; (800dfbc <EcuM_MainFunction+0x50>)
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b03      	cmp	r3, #3
 800df76:	d81d      	bhi.n	800dfb4 <EcuM_MainFunction+0x48>
 800df78:	a201      	add	r2, pc, #4	; (adr r2, 800df80 <EcuM_MainFunction+0x14>)
 800df7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7e:	bf00      	nop
 800df80:	0800df91 	.word	0x0800df91
 800df84:	0800df9d 	.word	0x0800df9d
 800df88:	0800dfa9 	.word	0x0800dfa9
 800df8c:	0800df97 	.word	0x0800df97
	{
		case ECUM_INIT_STATE:
			EcuM_DriverInit();
 800df90:	f7ff ff6e 	bl	800de70 <EcuM_DriverInit>
			break;
 800df94:	e00f      	b.n	800dfb6 <EcuM_MainFunction+0x4a>
		case ECUM_DEINIT_STATE:
			EcuM_DriverDeInit();
 800df96:	f7ff ffcf 	bl	800df38 <EcuM_DriverDeInit>
			break;
 800df9a:	e00c      	b.n	800dfb6 <EcuM_MainFunction+0x4a>
		case ECUM_CHECKFORWAKEUP_STATE:
			EcuM_CheckForWakeupEvent();
 800df9c:	f7ff fec0 	bl	800dd20 <EcuM_CheckForWakeupEvent>
			EcuM_BswState = ECUM_PROCESSWAKEUP_STATE;
 800dfa0:	4b06      	ldr	r3, [pc, #24]	; (800dfbc <EcuM_MainFunction+0x50>)
 800dfa2:	2202      	movs	r2, #2
 800dfa4:	701a      	strb	r2, [r3, #0]
			break;
 800dfa6:	e006      	b.n	800dfb6 <EcuM_MainFunction+0x4a>
		case ECUM_PROCESSWAKEUP_STATE:
			EcuM_ProcessWakeupEvent();
 800dfa8:	f7ff ff22 	bl	800ddf0 <EcuM_ProcessWakeupEvent>
			EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 800dfac:	4b03      	ldr	r3, [pc, #12]	; (800dfbc <EcuM_MainFunction+0x50>)
 800dfae:	2201      	movs	r2, #1
 800dfb0:	701a      	strb	r2, [r3, #0]
			break;
 800dfb2:	e000      	b.n	800dfb6 <EcuM_MainFunction+0x4a>
		default:
			break;
 800dfb4:	bf00      	nop
	}
}
 800dfb6:	bf00      	nop
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	200089a4 	.word	0x200089a4

0800dfc0 <SystemManager_ProcessFault>:
/***********************************************************************************
* Function: SystemManager_ProcessFault										       *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_ProcessFault()
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
	for(uint8 idx = STD_LOW ; idx < 26; idx++)
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	71fb      	strb	r3, [r7, #7]
 800dfca:	e070      	b.n	800e0ae <SystemManager_ProcessFault+0xee>
	{
		if(SystemManager_Fault[idx] != STD_LOW)
 800dfcc:	79fb      	ldrb	r3, [r7, #7]
 800dfce:	4a3c      	ldr	r2, [pc, #240]	; (800e0c0 <SystemManager_ProcessFault+0x100>)
 800dfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d067      	beq.n	800e0a8 <SystemManager_ProcessFault+0xe8>
		{
			if(idx == POWER_ON_RESET)
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d064      	beq.n	800e0a8 <SystemManager_ProcessFault+0xe8>
			{
				/* do nothing */
			}
			else if(idx == BROWN_OUT_RESET ||
 800dfde:	79fb      	ldrb	r3, [r7, #7]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d014      	beq.n	800e00e <SystemManager_ProcessFault+0x4e>
 800dfe4:	79fb      	ldrb	r3, [r7, #7]
 800dfe6:	2b04      	cmp	r3, #4
 800dfe8:	d011      	beq.n	800e00e <SystemManager_ProcessFault+0x4e>
					idx == LOW_POWER_RESET ||
 800dfea:	79fb      	ldrb	r3, [r7, #7]
 800dfec:	2b06      	cmp	r3, #6
 800dfee:	d00e      	beq.n	800e00e <SystemManager_ProcessFault+0x4e>
					idx == HARDWARE_RESET ||
 800dff0:	79fb      	ldrb	r3, [r7, #7]
 800dff2:	2b07      	cmp	r3, #7
 800dff4:	d00b      	beq.n	800e00e <SystemManager_ProcessFault+0x4e>
					idx == FLASH_FAULT_RESET ||
 800dff6:	79fb      	ldrb	r3, [r7, #7]
 800dff8:	2b08      	cmp	r3, #8
 800dffa:	d008      	beq.n	800e00e <SystemManager_ProcessFault+0x4e>
					idx == NMI_RESET ||
 800dffc:	79fb      	ldrb	r3, [r7, #7]
 800dffe:	2b09      	cmp	r3, #9
 800e000:	d005      	beq.n	800e00e <SystemManager_ProcessFault+0x4e>
					idx == MEMORY_FAULT_RESET ||
 800e002:	79fb      	ldrb	r3, [r7, #7]
 800e004:	2b0a      	cmp	r3, #10
 800e006:	d002      	beq.n	800e00e <SystemManager_ProcessFault+0x4e>
					idx == USAGE_FAULT_RESET ||
 800e008:	79fb      	ldrb	r3, [r7, #7]
 800e00a:	2b0b      	cmp	r3, #11
 800e00c:	d109      	bne.n	800e022 <SystemManager_ProcessFault+0x62>
					idx == BUS_FAULT_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e00e:	79fb      	ldrb	r3, [r7, #7]
 800e010:	4a2b      	ldr	r2, [pc, #172]	; (800e0c0 <SystemManager_ProcessFault+0x100>)
 800e012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d946      	bls.n	800e0a8 <SystemManager_ProcessFault+0xe8>
				{
					Dem_ReceiveFault(HARDWARE_RESET_DTC_CODE);
 800e01a:	2056      	movs	r0, #86	; 0x56
 800e01c:	f7f5 fe22 	bl	8003c64 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 800e020:	e042      	b.n	800e0a8 <SystemManager_ProcessFault+0xe8>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == SOFTWARE_RESET ||
 800e022:	79fb      	ldrb	r3, [r7, #7]
 800e024:	2b02      	cmp	r3, #2
 800e026:	d008      	beq.n	800e03a <SystemManager_ProcessFault+0x7a>
 800e028:	79fb      	ldrb	r3, [r7, #7]
 800e02a:	2b03      	cmp	r3, #3
 800e02c:	d005      	beq.n	800e03a <SystemManager_ProcessFault+0x7a>
					idx == WATCHDOG_RESET ||
 800e02e:	79fb      	ldrb	r3, [r7, #7]
 800e030:	2b0c      	cmp	r3, #12
 800e032:	d002      	beq.n	800e03a <SystemManager_ProcessFault+0x7a>
					idx == STACK_OVERFLOW_RESET ||
 800e034:	79fb      	ldrb	r3, [r7, #7]
 800e036:	2b0d      	cmp	r3, #13
 800e038:	d109      	bne.n	800e04e <SystemManager_ProcessFault+0x8e>
					idx == MALLOC_FAILED_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e03a:	79fb      	ldrb	r3, [r7, #7]
 800e03c:	4a20      	ldr	r2, [pc, #128]	; (800e0c0 <SystemManager_ProcessFault+0x100>)
 800e03e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d930      	bls.n	800e0a8 <SystemManager_ProcessFault+0xe8>
				{
					Dem_ReceiveFault(SOFTWARE_RESET_DTC_CODE);
 800e046:	2035      	movs	r0, #53	; 0x35
 800e048:	f7f5 fe0c 	bl	8003c64 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 800e04c:	e02c      	b.n	800e0a8 <SystemManager_ProcessFault+0xe8>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == ADC_ERROR_INTERNAL ||
 800e04e:	79fb      	ldrb	r3, [r7, #7]
 800e050:	2b0e      	cmp	r3, #14
 800e052:	d020      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
 800e054:	79fb      	ldrb	r3, [r7, #7]
 800e056:	2b0f      	cmp	r3, #15
 800e058:	d01d      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
					idx == ADC_ERROR_OVR ||
 800e05a:	79fb      	ldrb	r3, [r7, #7]
 800e05c:	2b10      	cmp	r3, #16
 800e05e:	d01a      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
					idx == ADC_ERROR_DMA ||
 800e060:	79fb      	ldrb	r3, [r7, #7]
 800e062:	2b11      	cmp	r3, #17
 800e064:	d017      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_PE ||
 800e066:	79fb      	ldrb	r3, [r7, #7]
 800e068:	2b12      	cmp	r3, #18
 800e06a:	d014      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_NE ||
 800e06c:	79fb      	ldrb	r3, [r7, #7]
 800e06e:	2b13      	cmp	r3, #19
 800e070:	d011      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_FE ||
 800e072:	79fb      	ldrb	r3, [r7, #7]
 800e074:	2b14      	cmp	r3, #20
 800e076:	d00e      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_ORE ||
 800e078:	79fb      	ldrb	r3, [r7, #7]
 800e07a:	2b15      	cmp	r3, #21
 800e07c:	d00b      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_DMA ||
 800e07e:	79fb      	ldrb	r3, [r7, #7]
 800e080:	2b16      	cmp	r3, #22
 800e082:	d008      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
					idx == TIMER2_ERROR ||
 800e084:	79fb      	ldrb	r3, [r7, #7]
 800e086:	2b17      	cmp	r3, #23
 800e088:	d005      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
					idx == TIMER3_ERROR ||
 800e08a:	79fb      	ldrb	r3, [r7, #7]
 800e08c:	2b18      	cmp	r3, #24
 800e08e:	d002      	beq.n	800e096 <SystemManager_ProcessFault+0xd6>
					idx == TIMER4_ERROR ||
 800e090:	79fb      	ldrb	r3, [r7, #7]
 800e092:	2b19      	cmp	r3, #25
 800e094:	d108      	bne.n	800e0a8 <SystemManager_ProcessFault+0xe8>
					idx == TIMER5_ERROR)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e096:	79fb      	ldrb	r3, [r7, #7]
 800e098:	4a09      	ldr	r2, [pc, #36]	; (800e0c0 <SystemManager_ProcessFault+0x100>)
 800e09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d902      	bls.n	800e0a8 <SystemManager_ProcessFault+0xe8>
				{
					Dem_ReceiveFault(PERIPHERAL_ERROR_DTC_CODE);
 800e0a2:	2099      	movs	r0, #153	; 0x99
 800e0a4:	f7f5 fdde 	bl	8003c64 <Dem_ReceiveFault>
	for(uint8 idx = STD_LOW ; idx < 26; idx++)
 800e0a8:	79fb      	ldrb	r3, [r7, #7]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	71fb      	strb	r3, [r7, #7]
 800e0ae:	79fb      	ldrb	r3, [r7, #7]
 800e0b0:	2b19      	cmp	r3, #25
 800e0b2:	d98b      	bls.n	800dfcc <SystemManager_ProcessFault+0xc>
		else
		{
			/* do nothing */
		}
	}
}
 800e0b4:	bf00      	nop
 800e0b6:	bf00      	nop
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	200089a8 	.word	0x200089a8

0800e0c4 <SystemManager_Init>:
/***********************************************************************************
* Function: SystemManager_Init													   *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_Init()
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	af00      	add	r7, sp, #0
	/* Perform system initialization sequence. */
	HAL_Init();
 800e0c8:	f7f5 fe52 	bl	8003d70 <HAL_Init>
	SystemClock_Config();
 800e0cc:	f000 f87c 	bl	800e1c8 <SystemClock_Config>
}
 800e0d0:	bf00      	nop
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <SystemManager_DeInit>:
/***********************************************************************************
* Function: SystemManager_DeInit												   *
* Description: De-initialize the system.  		   								   *
************************************************************************************/
VOID SystemManager_DeInit()
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	af00      	add	r7, sp, #0
	HAL_DeInit();
 800e0d8:	f7f5 fe6c 	bl	8003db4 <HAL_DeInit>
}
 800e0dc:	bf00      	nop
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <SystemManager_SetFault>:
/***********************************************************************************
* Function: SystemManager_SetFault										   		   *
* Description: Set the fault in the system.		 		   						   *
************************************************************************************/
StdReturnType SystemManager_SetFault(uint8 faultType)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	71fb      	strb	r3, [r7, #7]
	/* Store the fault into the data type. */
	for(uint8 index = 0; index < 14; index++)
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	73fb      	strb	r3, [r7, #15]
 800e0ee:	e00e      	b.n	800e10e <SystemManager_SetFault+0x2e>
	{
		if(faultType == index)
 800e0f0:	79fa      	ldrb	r2, [r7, #7]
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d107      	bne.n	800e108 <SystemManager_SetFault+0x28>
		{
			SystemManager_Fault[index]++;
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	4a0a      	ldr	r2, [pc, #40]	; (800e124 <SystemManager_SetFault+0x44>)
 800e0fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e100:	3201      	adds	r2, #1
 800e102:	4908      	ldr	r1, [pc, #32]	; (800e124 <SystemManager_SetFault+0x44>)
 800e104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8 index = 0; index < 14; index++)
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	3301      	adds	r3, #1
 800e10c:	73fb      	strb	r3, [r7, #15]
 800e10e:	7bfb      	ldrb	r3, [r7, #15]
 800e110:	2b0d      	cmp	r3, #13
 800e112:	d9ed      	bls.n	800e0f0 <SystemManager_SetFault+0x10>
		else
		{
			/* do nothing */
		}
	}
	return E_OK;
 800e114:	2300      	movs	r3, #0
}
 800e116:	4618      	mov	r0, r3
 800e118:	3714      	adds	r7, #20
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop
 800e124:	200089a8 	.word	0x200089a8

0800e128 <SystemManager_MainFunction>:
/***********************************************************************************
* Function: SystemManager_MainFunction									   		   *
* Description: System main function.									 		   *
************************************************************************************/
VOID SystemManager_MainFunction()
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	af00      	add	r7, sp, #0
	SystemManager_ProcessFault();
 800e12c:	f7ff ff48 	bl	800dfc0 <SystemManager_ProcessFault>
}
 800e130:	bf00      	nop
 800e132:	bd80      	pop	{r7, pc}

0800e134 <SystemManager_PerformReset>:
/***********************************************************************************
* Function: SystemManager_PerformReset									   		   *
* Description: Perform system reset.		 		   							   *
************************************************************************************/
VOID SystemManager_PerformReset()
{
 800e134:	b580      	push	{r7, lr}
 800e136:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 800e138:	f7f6 fdcf 	bl	8004cda <HAL_NVIC_SystemReset>
}
 800e13c:	bf00      	nop
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <MX_NVIC_Init>:
* Function: MX_NVIC_Init													   	   *
* Description: Initialize the nested vector interrupt controller with configured   *
* 			   values.		 		   											   *
************************************************************************************/
VOID MX_NVIC_Init(VOID)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	af00      	add	r7, sp, #0
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn, 10, 0);
 800e144:	2200      	movs	r2, #0
 800e146:	210a      	movs	r1, #10
 800e148:	2032      	movs	r0, #50	; 0x32
 800e14a:	f7f6 fd8e 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800e14e:	2032      	movs	r0, #50	; 0x32
 800e150:	f7f6 fda7 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 15, 0);
 800e154:	2200      	movs	r2, #0
 800e156:	210f      	movs	r1, #15
 800e158:	2005      	movs	r0, #5
 800e15a:	f7f6 fd86 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 800e15e:	2005      	movs	r0, #5
 800e160:	f7f6 fd9f 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 800e164:	2200      	movs	r2, #0
 800e166:	210f      	movs	r1, #15
 800e168:	2012      	movs	r0, #18
 800e16a:	f7f6 fd7e 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e16e:	2012      	movs	r0, #18
 800e170:	f7f6 fd97 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800e174:	2200      	movs	r2, #0
 800e176:	210f      	movs	r1, #15
 800e178:	201c      	movs	r0, #28
 800e17a:	f7f6 fd76 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e17e:	201c      	movs	r0, #28
 800e180:	f7f6 fd8f 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 800e184:	2200      	movs	r2, #0
 800e186:	210f      	movs	r1, #15
 800e188:	201d      	movs	r0, #29
 800e18a:	f7f6 fd6e 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e18e:	201d      	movs	r0, #29
 800e190:	f7f6 fd87 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 800e194:	2200      	movs	r2, #0
 800e196:	210f      	movs	r1, #15
 800e198:	201e      	movs	r0, #30
 800e19a:	f7f6 fd66 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e19e:	201e      	movs	r0, #30
 800e1a0:	f7f6 fd7f 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	210f      	movs	r1, #15
 800e1a8:	2025      	movs	r0, #37	; 0x25
 800e1aa:	f7f6 fd5e 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e1ae:	2025      	movs	r0, #37	; 0x25
 800e1b0:	f7f6 fd77 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 0);
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	210a      	movs	r1, #10
 800e1b8:	2038      	movs	r0, #56	; 0x38
 800e1ba:	f7f6 fd56 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e1be:	2038      	movs	r0, #56	; 0x38
 800e1c0:	f7f6 fd6f 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
}
 800e1c4:	bf00      	nop
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <SystemClock_Config>:
/***********************************************************************************
* Function: SystemClock_Config													   *
* Description: Initialize the system clock.		 		   						   *
************************************************************************************/
VOID SystemClock_Config(VOID)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b094      	sub	sp, #80	; 0x50
 800e1cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e1ce:	f107 0320 	add.w	r3, r7, #32
 800e1d2:	2230      	movs	r2, #48	; 0x30
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f000 f8c8 	bl	800e36c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e1dc:	f107 030c 	add.w	r3, r7, #12
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	601a      	str	r2, [r3, #0]
 800e1e4:	605a      	str	r2, [r3, #4]
 800e1e6:	609a      	str	r2, [r3, #8]
 800e1e8:	60da      	str	r2, [r3, #12]
 800e1ea:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	60bb      	str	r3, [r7, #8]
 800e1f0:	4b28      	ldr	r3, [pc, #160]	; (800e294 <SystemClock_Config+0xcc>)
 800e1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1f4:	4a27      	ldr	r2, [pc, #156]	; (800e294 <SystemClock_Config+0xcc>)
 800e1f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1fa:	6413      	str	r3, [r2, #64]	; 0x40
 800e1fc:	4b25      	ldr	r3, [pc, #148]	; (800e294 <SystemClock_Config+0xcc>)
 800e1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e204:	60bb      	str	r3, [r7, #8]
 800e206:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e208:	2300      	movs	r3, #0
 800e20a:	607b      	str	r3, [r7, #4]
 800e20c:	4b22      	ldr	r3, [pc, #136]	; (800e298 <SystemClock_Config+0xd0>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a21      	ldr	r2, [pc, #132]	; (800e298 <SystemClock_Config+0xd0>)
 800e212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e216:	6013      	str	r3, [r2, #0]
 800e218:	4b1f      	ldr	r3, [pc, #124]	; (800e298 <SystemClock_Config+0xd0>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e220:	607b      	str	r3, [r7, #4]
 800e222:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800e224:	2309      	movs	r3, #9
 800e226:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e22c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800e22e:	2301      	movs	r3, #1
 800e230:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e232:	2302      	movs	r3, #2
 800e234:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800e23c:	2304      	movs	r3, #4
 800e23e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 800e240:	2364      	movs	r3, #100	; 0x64
 800e242:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e244:	2302      	movs	r3, #2
 800e246:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800e248:	2304      	movs	r3, #4
 800e24a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e24c:	f107 0320 	add.w	r3, r7, #32
 800e250:	4618      	mov	r0, r3
 800e252:	f7f7 fd9d 	bl	8005d90 <HAL_RCC_OscConfig>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800e25c:	f000 f81e 	bl	800e29c <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800e260:	230f      	movs	r3, #15
 800e262:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e264:	2302      	movs	r3, #2
 800e266:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e268:	2300      	movs	r3, #0
 800e26a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800e26c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e270:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e272:	2300      	movs	r3, #0
 800e274:	61fb      	str	r3, [r7, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800e276:	f107 030c 	add.w	r3, r7, #12
 800e27a:	2103      	movs	r1, #3
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7f7 ffff 	bl	8006280 <HAL_RCC_ClockConfig>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800e288:	f000 f808 	bl	800e29c <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
}
 800e28c:	bf00      	nop
 800e28e:	3750      	adds	r7, #80	; 0x50
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	40023800 	.word	0x40023800
 800e298:	40007000 	.word	0x40007000

0800e29c <Error_Handler>:
/***********************************************************************************
* Function: Error_Handler													   	   *
* Description: Perform system reset in case of system fault.			 		   *
************************************************************************************/
VOID Error_Handler(VOID)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e2a0:	b672      	cpsid	i
}
 800e2a2:	bf00      	nop
	__disable_irq();
	SystemManager_PerformReset();
 800e2a4:	f7ff ff46 	bl	800e134 <SystemManager_PerformReset>
	while (1)
 800e2a8:	e7fe      	b.n	800e2a8 <Error_Handler+0xc>
	...

0800e2ac <Watchdog_Init>:
/***********************************************************************************
* Function: Watchdog_Init									   		       		   *
* Description: Peripheral initialization.							 		   	   *
************************************************************************************/
StdReturnType Watchdog_Init()
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 800e2b0:	4b09      	ldr	r3, [pc, #36]	; (800e2d8 <Watchdog_Init+0x2c>)
 800e2b2:	4a0a      	ldr	r2, [pc, #40]	; (800e2dc <Watchdog_Init+0x30>)
 800e2b4:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800e2b6:	4b08      	ldr	r3, [pc, #32]	; (800e2d8 <Watchdog_Init+0x2c>)
 800e2b8:	2205      	movs	r2, #5
 800e2ba:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 50;
 800e2bc:	4b06      	ldr	r3, [pc, #24]	; (800e2d8 <Watchdog_Init+0x2c>)
 800e2be:	2232      	movs	r2, #50	; 0x32
 800e2c0:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800e2c2:	4805      	ldr	r0, [pc, #20]	; (800e2d8 <Watchdog_Init+0x2c>)
 800e2c4:	f7f7 fd11 	bl	8005cea <HAL_IWDG_Init>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d001      	beq.n	800e2d2 <Watchdog_Init+0x26>
	{
		Error_Handler();
 800e2ce:	f7ff ffe5 	bl	800e29c <Error_Handler>
	}
	return E_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	20000288 	.word	0x20000288
 800e2dc:	40003000 	.word	0x40003000

0800e2e0 <Watchdog_MainFunction>:
/***********************************************************************************
* Function: Watchdog_MainFunction									   		       *
* Description: Peripheral main function.							 		       *
************************************************************************************/
VOID Watchdog_MainFunction()
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800e2e4:	4802      	ldr	r0, [pc, #8]	; (800e2f0 <Watchdog_MainFunction+0x10>)
 800e2e6:	f7f7 fd42 	bl	8005d6e <HAL_IWDG_Refresh>
}
 800e2ea:	bf00      	nop
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20000288 	.word	0x20000288

0800e2f4 <atoi>:
 800e2f4:	220a      	movs	r2, #10
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	f000 b978 	b.w	800e5ec <strtol>

0800e2fc <__errno>:
 800e2fc:	4b01      	ldr	r3, [pc, #4]	; (800e304 <__errno+0x8>)
 800e2fe:	6818      	ldr	r0, [r3, #0]
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	2000002c 	.word	0x2000002c

0800e308 <__libc_init_array>:
 800e308:	b570      	push	{r4, r5, r6, lr}
 800e30a:	4d0d      	ldr	r5, [pc, #52]	; (800e340 <__libc_init_array+0x38>)
 800e30c:	4c0d      	ldr	r4, [pc, #52]	; (800e344 <__libc_init_array+0x3c>)
 800e30e:	1b64      	subs	r4, r4, r5
 800e310:	10a4      	asrs	r4, r4, #2
 800e312:	2600      	movs	r6, #0
 800e314:	42a6      	cmp	r6, r4
 800e316:	d109      	bne.n	800e32c <__libc_init_array+0x24>
 800e318:	4d0b      	ldr	r5, [pc, #44]	; (800e348 <__libc_init_array+0x40>)
 800e31a:	4c0c      	ldr	r4, [pc, #48]	; (800e34c <__libc_init_array+0x44>)
 800e31c:	f000 f97c 	bl	800e618 <_init>
 800e320:	1b64      	subs	r4, r4, r5
 800e322:	10a4      	asrs	r4, r4, #2
 800e324:	2600      	movs	r6, #0
 800e326:	42a6      	cmp	r6, r4
 800e328:	d105      	bne.n	800e336 <__libc_init_array+0x2e>
 800e32a:	bd70      	pop	{r4, r5, r6, pc}
 800e32c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e330:	4798      	blx	r3
 800e332:	3601      	adds	r6, #1
 800e334:	e7ee      	b.n	800e314 <__libc_init_array+0xc>
 800e336:	f855 3b04 	ldr.w	r3, [r5], #4
 800e33a:	4798      	blx	r3
 800e33c:	3601      	adds	r6, #1
 800e33e:	e7f2      	b.n	800e326 <__libc_init_array+0x1e>
 800e340:	0800ec68 	.word	0x0800ec68
 800e344:	0800ec68 	.word	0x0800ec68
 800e348:	0800ec68 	.word	0x0800ec68
 800e34c:	0800ec6c 	.word	0x0800ec6c

0800e350 <memcpy>:
 800e350:	440a      	add	r2, r1
 800e352:	4291      	cmp	r1, r2
 800e354:	f100 33ff 	add.w	r3, r0, #4294967295
 800e358:	d100      	bne.n	800e35c <memcpy+0xc>
 800e35a:	4770      	bx	lr
 800e35c:	b510      	push	{r4, lr}
 800e35e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e362:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e366:	4291      	cmp	r1, r2
 800e368:	d1f9      	bne.n	800e35e <memcpy+0xe>
 800e36a:	bd10      	pop	{r4, pc}

0800e36c <memset>:
 800e36c:	4402      	add	r2, r0
 800e36e:	4603      	mov	r3, r0
 800e370:	4293      	cmp	r3, r2
 800e372:	d100      	bne.n	800e376 <memset+0xa>
 800e374:	4770      	bx	lr
 800e376:	f803 1b01 	strb.w	r1, [r3], #1
 800e37a:	e7f9      	b.n	800e370 <memset+0x4>

0800e37c <_free_r>:
 800e37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e37e:	2900      	cmp	r1, #0
 800e380:	d044      	beq.n	800e40c <_free_r+0x90>
 800e382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e386:	9001      	str	r0, [sp, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f1a1 0404 	sub.w	r4, r1, #4
 800e38e:	bfb8      	it	lt
 800e390:	18e4      	addlt	r4, r4, r3
 800e392:	f000 f935 	bl	800e600 <__malloc_lock>
 800e396:	4a1e      	ldr	r2, [pc, #120]	; (800e410 <_free_r+0x94>)
 800e398:	9801      	ldr	r0, [sp, #4]
 800e39a:	6813      	ldr	r3, [r2, #0]
 800e39c:	b933      	cbnz	r3, 800e3ac <_free_r+0x30>
 800e39e:	6063      	str	r3, [r4, #4]
 800e3a0:	6014      	str	r4, [r2, #0]
 800e3a2:	b003      	add	sp, #12
 800e3a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3a8:	f000 b930 	b.w	800e60c <__malloc_unlock>
 800e3ac:	42a3      	cmp	r3, r4
 800e3ae:	d908      	bls.n	800e3c2 <_free_r+0x46>
 800e3b0:	6825      	ldr	r5, [r4, #0]
 800e3b2:	1961      	adds	r1, r4, r5
 800e3b4:	428b      	cmp	r3, r1
 800e3b6:	bf01      	itttt	eq
 800e3b8:	6819      	ldreq	r1, [r3, #0]
 800e3ba:	685b      	ldreq	r3, [r3, #4]
 800e3bc:	1949      	addeq	r1, r1, r5
 800e3be:	6021      	streq	r1, [r4, #0]
 800e3c0:	e7ed      	b.n	800e39e <_free_r+0x22>
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	b10b      	cbz	r3, 800e3cc <_free_r+0x50>
 800e3c8:	42a3      	cmp	r3, r4
 800e3ca:	d9fa      	bls.n	800e3c2 <_free_r+0x46>
 800e3cc:	6811      	ldr	r1, [r2, #0]
 800e3ce:	1855      	adds	r5, r2, r1
 800e3d0:	42a5      	cmp	r5, r4
 800e3d2:	d10b      	bne.n	800e3ec <_free_r+0x70>
 800e3d4:	6824      	ldr	r4, [r4, #0]
 800e3d6:	4421      	add	r1, r4
 800e3d8:	1854      	adds	r4, r2, r1
 800e3da:	42a3      	cmp	r3, r4
 800e3dc:	6011      	str	r1, [r2, #0]
 800e3de:	d1e0      	bne.n	800e3a2 <_free_r+0x26>
 800e3e0:	681c      	ldr	r4, [r3, #0]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	6053      	str	r3, [r2, #4]
 800e3e6:	4421      	add	r1, r4
 800e3e8:	6011      	str	r1, [r2, #0]
 800e3ea:	e7da      	b.n	800e3a2 <_free_r+0x26>
 800e3ec:	d902      	bls.n	800e3f4 <_free_r+0x78>
 800e3ee:	230c      	movs	r3, #12
 800e3f0:	6003      	str	r3, [r0, #0]
 800e3f2:	e7d6      	b.n	800e3a2 <_free_r+0x26>
 800e3f4:	6825      	ldr	r5, [r4, #0]
 800e3f6:	1961      	adds	r1, r4, r5
 800e3f8:	428b      	cmp	r3, r1
 800e3fa:	bf04      	itt	eq
 800e3fc:	6819      	ldreq	r1, [r3, #0]
 800e3fe:	685b      	ldreq	r3, [r3, #4]
 800e400:	6063      	str	r3, [r4, #4]
 800e402:	bf04      	itt	eq
 800e404:	1949      	addeq	r1, r1, r5
 800e406:	6021      	streq	r1, [r4, #0]
 800e408:	6054      	str	r4, [r2, #4]
 800e40a:	e7ca      	b.n	800e3a2 <_free_r+0x26>
 800e40c:	b003      	add	sp, #12
 800e40e:	bd30      	pop	{r4, r5, pc}
 800e410:	20008a10 	.word	0x20008a10

0800e414 <cleanup_glue>:
 800e414:	b538      	push	{r3, r4, r5, lr}
 800e416:	460c      	mov	r4, r1
 800e418:	6809      	ldr	r1, [r1, #0]
 800e41a:	4605      	mov	r5, r0
 800e41c:	b109      	cbz	r1, 800e422 <cleanup_glue+0xe>
 800e41e:	f7ff fff9 	bl	800e414 <cleanup_glue>
 800e422:	4621      	mov	r1, r4
 800e424:	4628      	mov	r0, r5
 800e426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e42a:	f7ff bfa7 	b.w	800e37c <_free_r>
	...

0800e430 <_reclaim_reent>:
 800e430:	4b2c      	ldr	r3, [pc, #176]	; (800e4e4 <_reclaim_reent+0xb4>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4283      	cmp	r3, r0
 800e436:	b570      	push	{r4, r5, r6, lr}
 800e438:	4604      	mov	r4, r0
 800e43a:	d051      	beq.n	800e4e0 <_reclaim_reent+0xb0>
 800e43c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e43e:	b143      	cbz	r3, 800e452 <_reclaim_reent+0x22>
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d14a      	bne.n	800e4dc <_reclaim_reent+0xac>
 800e446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e448:	6819      	ldr	r1, [r3, #0]
 800e44a:	b111      	cbz	r1, 800e452 <_reclaim_reent+0x22>
 800e44c:	4620      	mov	r0, r4
 800e44e:	f7ff ff95 	bl	800e37c <_free_r>
 800e452:	6961      	ldr	r1, [r4, #20]
 800e454:	b111      	cbz	r1, 800e45c <_reclaim_reent+0x2c>
 800e456:	4620      	mov	r0, r4
 800e458:	f7ff ff90 	bl	800e37c <_free_r>
 800e45c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e45e:	b111      	cbz	r1, 800e466 <_reclaim_reent+0x36>
 800e460:	4620      	mov	r0, r4
 800e462:	f7ff ff8b 	bl	800e37c <_free_r>
 800e466:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e468:	b111      	cbz	r1, 800e470 <_reclaim_reent+0x40>
 800e46a:	4620      	mov	r0, r4
 800e46c:	f7ff ff86 	bl	800e37c <_free_r>
 800e470:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e472:	b111      	cbz	r1, 800e47a <_reclaim_reent+0x4a>
 800e474:	4620      	mov	r0, r4
 800e476:	f7ff ff81 	bl	800e37c <_free_r>
 800e47a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e47c:	b111      	cbz	r1, 800e484 <_reclaim_reent+0x54>
 800e47e:	4620      	mov	r0, r4
 800e480:	f7ff ff7c 	bl	800e37c <_free_r>
 800e484:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e486:	b111      	cbz	r1, 800e48e <_reclaim_reent+0x5e>
 800e488:	4620      	mov	r0, r4
 800e48a:	f7ff ff77 	bl	800e37c <_free_r>
 800e48e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e490:	b111      	cbz	r1, 800e498 <_reclaim_reent+0x68>
 800e492:	4620      	mov	r0, r4
 800e494:	f7ff ff72 	bl	800e37c <_free_r>
 800e498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e49a:	b111      	cbz	r1, 800e4a2 <_reclaim_reent+0x72>
 800e49c:	4620      	mov	r0, r4
 800e49e:	f7ff ff6d 	bl	800e37c <_free_r>
 800e4a2:	69a3      	ldr	r3, [r4, #24]
 800e4a4:	b1e3      	cbz	r3, 800e4e0 <_reclaim_reent+0xb0>
 800e4a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	4798      	blx	r3
 800e4ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e4ae:	b1b9      	cbz	r1, 800e4e0 <_reclaim_reent+0xb0>
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4b6:	f7ff bfad 	b.w	800e414 <cleanup_glue>
 800e4ba:	5949      	ldr	r1, [r1, r5]
 800e4bc:	b941      	cbnz	r1, 800e4d0 <_reclaim_reent+0xa0>
 800e4be:	3504      	adds	r5, #4
 800e4c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4c2:	2d80      	cmp	r5, #128	; 0x80
 800e4c4:	68d9      	ldr	r1, [r3, #12]
 800e4c6:	d1f8      	bne.n	800e4ba <_reclaim_reent+0x8a>
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f7ff ff57 	bl	800e37c <_free_r>
 800e4ce:	e7ba      	b.n	800e446 <_reclaim_reent+0x16>
 800e4d0:	680e      	ldr	r6, [r1, #0]
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f7ff ff52 	bl	800e37c <_free_r>
 800e4d8:	4631      	mov	r1, r6
 800e4da:	e7ef      	b.n	800e4bc <_reclaim_reent+0x8c>
 800e4dc:	2500      	movs	r5, #0
 800e4de:	e7ef      	b.n	800e4c0 <_reclaim_reent+0x90>
 800e4e0:	bd70      	pop	{r4, r5, r6, pc}
 800e4e2:	bf00      	nop
 800e4e4:	2000002c 	.word	0x2000002c

0800e4e8 <_strtol_l.constprop.0>:
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ee:	d001      	beq.n	800e4f4 <_strtol_l.constprop.0+0xc>
 800e4f0:	2b24      	cmp	r3, #36	; 0x24
 800e4f2:	d906      	bls.n	800e502 <_strtol_l.constprop.0+0x1a>
 800e4f4:	f7ff ff02 	bl	800e2fc <__errno>
 800e4f8:	2316      	movs	r3, #22
 800e4fa:	6003      	str	r3, [r0, #0]
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e502:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e5e8 <_strtol_l.constprop.0+0x100>
 800e506:	460d      	mov	r5, r1
 800e508:	462e      	mov	r6, r5
 800e50a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e50e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e512:	f017 0708 	ands.w	r7, r7, #8
 800e516:	d1f7      	bne.n	800e508 <_strtol_l.constprop.0+0x20>
 800e518:	2c2d      	cmp	r4, #45	; 0x2d
 800e51a:	d132      	bne.n	800e582 <_strtol_l.constprop.0+0x9a>
 800e51c:	782c      	ldrb	r4, [r5, #0]
 800e51e:	2701      	movs	r7, #1
 800e520:	1cb5      	adds	r5, r6, #2
 800e522:	2b00      	cmp	r3, #0
 800e524:	d05b      	beq.n	800e5de <_strtol_l.constprop.0+0xf6>
 800e526:	2b10      	cmp	r3, #16
 800e528:	d109      	bne.n	800e53e <_strtol_l.constprop.0+0x56>
 800e52a:	2c30      	cmp	r4, #48	; 0x30
 800e52c:	d107      	bne.n	800e53e <_strtol_l.constprop.0+0x56>
 800e52e:	782c      	ldrb	r4, [r5, #0]
 800e530:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e534:	2c58      	cmp	r4, #88	; 0x58
 800e536:	d14d      	bne.n	800e5d4 <_strtol_l.constprop.0+0xec>
 800e538:	786c      	ldrb	r4, [r5, #1]
 800e53a:	2310      	movs	r3, #16
 800e53c:	3502      	adds	r5, #2
 800e53e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e542:	f108 38ff 	add.w	r8, r8, #4294967295
 800e546:	f04f 0c00 	mov.w	ip, #0
 800e54a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e54e:	4666      	mov	r6, ip
 800e550:	fb03 8a19 	mls	sl, r3, r9, r8
 800e554:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e558:	f1be 0f09 	cmp.w	lr, #9
 800e55c:	d816      	bhi.n	800e58c <_strtol_l.constprop.0+0xa4>
 800e55e:	4674      	mov	r4, lr
 800e560:	42a3      	cmp	r3, r4
 800e562:	dd24      	ble.n	800e5ae <_strtol_l.constprop.0+0xc6>
 800e564:	f1bc 0f00 	cmp.w	ip, #0
 800e568:	db1e      	blt.n	800e5a8 <_strtol_l.constprop.0+0xc0>
 800e56a:	45b1      	cmp	r9, r6
 800e56c:	d31c      	bcc.n	800e5a8 <_strtol_l.constprop.0+0xc0>
 800e56e:	d101      	bne.n	800e574 <_strtol_l.constprop.0+0x8c>
 800e570:	45a2      	cmp	sl, r4
 800e572:	db19      	blt.n	800e5a8 <_strtol_l.constprop.0+0xc0>
 800e574:	fb06 4603 	mla	r6, r6, r3, r4
 800e578:	f04f 0c01 	mov.w	ip, #1
 800e57c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e580:	e7e8      	b.n	800e554 <_strtol_l.constprop.0+0x6c>
 800e582:	2c2b      	cmp	r4, #43	; 0x2b
 800e584:	bf04      	itt	eq
 800e586:	782c      	ldrbeq	r4, [r5, #0]
 800e588:	1cb5      	addeq	r5, r6, #2
 800e58a:	e7ca      	b.n	800e522 <_strtol_l.constprop.0+0x3a>
 800e58c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e590:	f1be 0f19 	cmp.w	lr, #25
 800e594:	d801      	bhi.n	800e59a <_strtol_l.constprop.0+0xb2>
 800e596:	3c37      	subs	r4, #55	; 0x37
 800e598:	e7e2      	b.n	800e560 <_strtol_l.constprop.0+0x78>
 800e59a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e59e:	f1be 0f19 	cmp.w	lr, #25
 800e5a2:	d804      	bhi.n	800e5ae <_strtol_l.constprop.0+0xc6>
 800e5a4:	3c57      	subs	r4, #87	; 0x57
 800e5a6:	e7db      	b.n	800e560 <_strtol_l.constprop.0+0x78>
 800e5a8:	f04f 3cff 	mov.w	ip, #4294967295
 800e5ac:	e7e6      	b.n	800e57c <_strtol_l.constprop.0+0x94>
 800e5ae:	f1bc 0f00 	cmp.w	ip, #0
 800e5b2:	da05      	bge.n	800e5c0 <_strtol_l.constprop.0+0xd8>
 800e5b4:	2322      	movs	r3, #34	; 0x22
 800e5b6:	6003      	str	r3, [r0, #0]
 800e5b8:	4646      	mov	r6, r8
 800e5ba:	b942      	cbnz	r2, 800e5ce <_strtol_l.constprop.0+0xe6>
 800e5bc:	4630      	mov	r0, r6
 800e5be:	e79e      	b.n	800e4fe <_strtol_l.constprop.0+0x16>
 800e5c0:	b107      	cbz	r7, 800e5c4 <_strtol_l.constprop.0+0xdc>
 800e5c2:	4276      	negs	r6, r6
 800e5c4:	2a00      	cmp	r2, #0
 800e5c6:	d0f9      	beq.n	800e5bc <_strtol_l.constprop.0+0xd4>
 800e5c8:	f1bc 0f00 	cmp.w	ip, #0
 800e5cc:	d000      	beq.n	800e5d0 <_strtol_l.constprop.0+0xe8>
 800e5ce:	1e69      	subs	r1, r5, #1
 800e5d0:	6011      	str	r1, [r2, #0]
 800e5d2:	e7f3      	b.n	800e5bc <_strtol_l.constprop.0+0xd4>
 800e5d4:	2430      	movs	r4, #48	; 0x30
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1b1      	bne.n	800e53e <_strtol_l.constprop.0+0x56>
 800e5da:	2308      	movs	r3, #8
 800e5dc:	e7af      	b.n	800e53e <_strtol_l.constprop.0+0x56>
 800e5de:	2c30      	cmp	r4, #48	; 0x30
 800e5e0:	d0a5      	beq.n	800e52e <_strtol_l.constprop.0+0x46>
 800e5e2:	230a      	movs	r3, #10
 800e5e4:	e7ab      	b.n	800e53e <_strtol_l.constprop.0+0x56>
 800e5e6:	bf00      	nop
 800e5e8:	0800eb5d 	.word	0x0800eb5d

0800e5ec <strtol>:
 800e5ec:	4613      	mov	r3, r2
 800e5ee:	460a      	mov	r2, r1
 800e5f0:	4601      	mov	r1, r0
 800e5f2:	4802      	ldr	r0, [pc, #8]	; (800e5fc <strtol+0x10>)
 800e5f4:	6800      	ldr	r0, [r0, #0]
 800e5f6:	f7ff bf77 	b.w	800e4e8 <_strtol_l.constprop.0>
 800e5fa:	bf00      	nop
 800e5fc:	2000002c 	.word	0x2000002c

0800e600 <__malloc_lock>:
 800e600:	4801      	ldr	r0, [pc, #4]	; (800e608 <__malloc_lock+0x8>)
 800e602:	f7f5 ba12 	b.w	8003a2a <__retarget_lock_acquire_recursive>
 800e606:	bf00      	nop
 800e608:	2000068c 	.word	0x2000068c

0800e60c <__malloc_unlock>:
 800e60c:	4801      	ldr	r0, [pc, #4]	; (800e614 <__malloc_unlock+0x8>)
 800e60e:	f7f5 ba20 	b.w	8003a52 <__retarget_lock_release_recursive>
 800e612:	bf00      	nop
 800e614:	2000068c 	.word	0x2000068c

0800e618 <_init>:
 800e618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61a:	bf00      	nop
 800e61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e61e:	bc08      	pop	{r3}
 800e620:	469e      	mov	lr, r3
 800e622:	4770      	bx	lr

0800e624 <_fini>:
 800e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e626:	bf00      	nop
 800e628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e62a:	bc08      	pop	{r3}
 800e62c:	469e      	mov	lr, r3
 800e62e:	4770      	bx	lr
