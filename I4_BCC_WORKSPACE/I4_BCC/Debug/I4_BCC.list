
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004078  08004078  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004080  08004080  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  08004094  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08004094  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010aa1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fb  00000000  00000000  00030add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  000332d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000340a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cff  00000000  00000000  00034d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001379e  00000000  00000000  0004ca5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8b1  00000000  00000000  000601fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eeaae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000378c  00000000  00000000  000eeb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004048 	.word	0x08004048

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004048 	.word	0x08004048

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <CenLoc_MainFunction>:
uint8_t CurrentState_CenLoc;
uint8_t BTCenLoc;
uint8_t BTCenLoc_IrqFlag;

void CenLoc_MainFunction()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	if(BTCenLoc == STD_HIGH)
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <CenLoc_MainFunction+0x3c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d108      	bne.n	80004fa <CenLoc_MainFunction+0x1e>
	{
		CurrentState_CenLoc = STD_HIGH;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <CenLoc_MainFunction+0x40>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <CenLoc_MainFunction+0x40>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f82c 	bl	8000550 <CenLoc_Toggle_Door_LED>
//	}
//	else
//	{
//		/* do nothing */
//	}
}
 80004f8:	e00b      	b.n	8000512 <CenLoc_MainFunction+0x36>
	else if(BTCenLoc == STD_LOW)
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <CenLoc_MainFunction+0x3c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d107      	bne.n	8000512 <CenLoc_MainFunction+0x36>
		CurrentState_CenLoc = STD_LOW;
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <CenLoc_MainFunction+0x40>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <CenLoc_MainFunction+0x40>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f81f 	bl	8000550 <CenLoc_Toggle_Door_LED>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000002a 	.word	0x2000002a
 800051c:	20000029 	.word	0x20000029

08000520 <CenLoc_Init>:

uint8_t CenLoc_Init()
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	CurrentState_Door = STD_LOW;
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <CenLoc_Init+0x24>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	CurrentState_CenLoc = STD_LOW;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <CenLoc_Init+0x28>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
	BTCenLoc = STD_LOW;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <CenLoc_Init+0x2c>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000028 	.word	0x20000028
 8000548:	20000029 	.word	0x20000029
 800054c:	2000002a 	.word	0x2000002a

08000550 <CenLoc_Toggle_Door_LED>:

void CenLoc_Toggle_Door_LED(uint8_t PinState)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, PinState);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	461a      	mov	r2, r3
 800055e:	2140      	movs	r1, #64	; 0x40
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <CenLoc_Toggle_Door_LED+0x20>)
 8000562:	f001 fc75 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40020400 	.word	0x40020400

08000574 <ExtLights_MainFunction>:
uint8_t BTHazardLight;
uint8_t BTExtLight_IrqFlag;
uint8_t flag_;

void ExtLights_MainFunction()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	if(BTLowBeam == STD_HIGH)
 8000578:	4b85      	ldr	r3, [pc, #532]	; (8000790 <ExtLights_MainFunction+0x21c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d108      	bne.n	8000592 <ExtLights_MainFunction+0x1e>
	{
		CurrentState_LowBeam = STD_HIGH;
 8000580:	4b84      	ldr	r3, [pc, #528]	; (8000794 <ExtLights_MainFunction+0x220>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
		ExtLights_LowBeam(CurrentState_LowBeam);
 8000586:	4b83      	ldr	r3, [pc, #524]	; (8000794 <ExtLights_MainFunction+0x220>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fa8a 	bl	8000aa4 <ExtLights_LowBeam>
 8000590:	e00b      	b.n	80005aa <ExtLights_MainFunction+0x36>
	}
	else if(BTLowBeam == STD_LOW)
 8000592:	4b7f      	ldr	r3, [pc, #508]	; (8000790 <ExtLights_MainFunction+0x21c>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d107      	bne.n	80005aa <ExtLights_MainFunction+0x36>
	{
		CurrentState_LowBeam = STD_LOW;
 800059a:	4b7e      	ldr	r3, [pc, #504]	; (8000794 <ExtLights_MainFunction+0x220>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
		ExtLights_LowBeam(CurrentState_LowBeam);
 80005a0:	4b7c      	ldr	r3, [pc, #496]	; (8000794 <ExtLights_MainFunction+0x220>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fa7d 	bl	8000aa4 <ExtLights_LowBeam>
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 80005aa:	4b7b      	ldr	r3, [pc, #492]	; (8000798 <ExtLights_MainFunction+0x224>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d108      	bne.n	80005c4 <ExtLights_MainFunction+0x50>
	{
		CurrentState_HighBeam = STD_HIGH;
 80005b2:	4b7a      	ldr	r3, [pc, #488]	; (800079c <ExtLights_MainFunction+0x228>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
		ExtLights_HighBeam(CurrentState_HighBeam);
 80005b8:	4b78      	ldr	r3, [pc, #480]	; (800079c <ExtLights_MainFunction+0x228>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fa83 	bl	8000ac8 <ExtLights_HighBeam>
 80005c2:	e00b      	b.n	80005dc <ExtLights_MainFunction+0x68>
	}
	else if(BTHighBeam == STD_LOW)
 80005c4:	4b74      	ldr	r3, [pc, #464]	; (8000798 <ExtLights_MainFunction+0x224>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d107      	bne.n	80005dc <ExtLights_MainFunction+0x68>
	{
		CurrentState_HighBeam = STD_LOW;
 80005cc:	4b73      	ldr	r3, [pc, #460]	; (800079c <ExtLights_MainFunction+0x228>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
		ExtLights_HighBeam(CurrentState_HighBeam);
 80005d2:	4b72      	ldr	r3, [pc, #456]	; (800079c <ExtLights_MainFunction+0x228>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa76 	bl	8000ac8 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}

	if(BTFogLightFront == STD_HIGH)
 80005dc:	4b70      	ldr	r3, [pc, #448]	; (80007a0 <ExtLights_MainFunction+0x22c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d108      	bne.n	80005f6 <ExtLights_MainFunction+0x82>
	{
		CurrentState_FogLightFront = STD_HIGH;
 80005e4:	4b6f      	ldr	r3, [pc, #444]	; (80007a4 <ExtLights_MainFunction+0x230>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
		ExtLights_FogLightFront(CurrentState_FogLightFront);
 80005ea:	4b6e      	ldr	r3, [pc, #440]	; (80007a4 <ExtLights_MainFunction+0x230>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fa7c 	bl	8000aec <ExtLights_FogLightFront>
 80005f4:	e00b      	b.n	800060e <ExtLights_MainFunction+0x9a>
	}
	else if(BTFogLightFront == STD_LOW)
 80005f6:	4b6a      	ldr	r3, [pc, #424]	; (80007a0 <ExtLights_MainFunction+0x22c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d107      	bne.n	800060e <ExtLights_MainFunction+0x9a>
	{
		CurrentState_FogLightFront = STD_LOW;
 80005fe:	4b69      	ldr	r3, [pc, #420]	; (80007a4 <ExtLights_MainFunction+0x230>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
		ExtLights_FogLightFront(CurrentState_FogLightFront);
 8000604:	4b67      	ldr	r3, [pc, #412]	; (80007a4 <ExtLights_MainFunction+0x230>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fa6f 	bl	8000aec <ExtLights_FogLightFront>
	else
	{
		/* do nothing */
	}

	if(BTFogLightRear == STD_HIGH)
 800060e:	4b66      	ldr	r3, [pc, #408]	; (80007a8 <ExtLights_MainFunction+0x234>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d108      	bne.n	8000628 <ExtLights_MainFunction+0xb4>
	{
		CurrentState_FogLightRear = STD_HIGH;
 8000616:	4b65      	ldr	r3, [pc, #404]	; (80007ac <ExtLights_MainFunction+0x238>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
		ExtLights_FogLightRear(CurrentState_FogLightRear);
 800061c:	4b63      	ldr	r3, [pc, #396]	; (80007ac <ExtLights_MainFunction+0x238>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fa75 	bl	8000b10 <ExtLights_FogLightRear>
 8000626:	e00b      	b.n	8000640 <ExtLights_MainFunction+0xcc>
	}
	else if(BTFogLightRear == STD_LOW)
 8000628:	4b5f      	ldr	r3, [pc, #380]	; (80007a8 <ExtLights_MainFunction+0x234>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d107      	bne.n	8000640 <ExtLights_MainFunction+0xcc>
	{
		CurrentState_FogLightRear = STD_LOW;
 8000630:	4b5e      	ldr	r3, [pc, #376]	; (80007ac <ExtLights_MainFunction+0x238>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
		ExtLights_FogLightRear(CurrentState_FogLightRear);
 8000636:	4b5d      	ldr	r3, [pc, #372]	; (80007ac <ExtLights_MainFunction+0x238>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fa68 	bl	8000b10 <ExtLights_FogLightRear>
		/* do nothing */
	}



	if(BTBrakeLight == STD_HIGH)
 8000640:	4b5b      	ldr	r3, [pc, #364]	; (80007b0 <ExtLights_MainFunction+0x23c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d108      	bne.n	800065a <ExtLights_MainFunction+0xe6>
	{
		CurrentState_BrakeLight = STD_HIGH;
 8000648:	4b5a      	ldr	r3, [pc, #360]	; (80007b4 <ExtLights_MainFunction+0x240>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
		ExtLights_BrakeLight(CurrentState_BrakeLight);
 800064e:	4b59      	ldr	r3, [pc, #356]	; (80007b4 <ExtLights_MainFunction+0x240>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fa92 	bl	8000b7c <ExtLights_BrakeLight>
 8000658:	e00b      	b.n	8000672 <ExtLights_MainFunction+0xfe>
	}
	else if(BTBrakeLight == STD_LOW)
 800065a:	4b55      	ldr	r3, [pc, #340]	; (80007b0 <ExtLights_MainFunction+0x23c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d107      	bne.n	8000672 <ExtLights_MainFunction+0xfe>
	{
		CurrentState_BrakeLight = STD_LOW;
 8000662:	4b54      	ldr	r3, [pc, #336]	; (80007b4 <ExtLights_MainFunction+0x240>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
		ExtLights_BrakeLight(CurrentState_BrakeLight);
 8000668:	4b52      	ldr	r3, [pc, #328]	; (80007b4 <ExtLights_MainFunction+0x240>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fa85 	bl	8000b7c <ExtLights_BrakeLight>
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000672:	4b51      	ldr	r3, [pc, #324]	; (80007b8 <ExtLights_MainFunction+0x244>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d108      	bne.n	800068c <ExtLights_MainFunction+0x118>
	{
		CurrentState_PositionLightRear = STD_HIGH;
 800067a:	4b50      	ldr	r3, [pc, #320]	; (80007bc <ExtLights_MainFunction+0x248>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
		ExtLights_PositionLightRear(CurrentState_PositionLightRear);
 8000680:	4b4e      	ldr	r3, [pc, #312]	; (80007bc <ExtLights_MainFunction+0x248>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fa67 	bl	8000b58 <ExtLights_PositionLightRear>
 800068a:	e00b      	b.n	80006a4 <ExtLights_MainFunction+0x130>
	}
	else if(BTPositionLightRear == STD_LOW)
 800068c:	4b4a      	ldr	r3, [pc, #296]	; (80007b8 <ExtLights_MainFunction+0x244>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d107      	bne.n	80006a4 <ExtLights_MainFunction+0x130>
	{
		CurrentState_PositionLightRear = STD_LOW;
 8000694:	4b49      	ldr	r3, [pc, #292]	; (80007bc <ExtLights_MainFunction+0x248>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
		ExtLights_PositionLightRear(CurrentState_PositionLightRear);
 800069a:	4b48      	ldr	r3, [pc, #288]	; (80007bc <ExtLights_MainFunction+0x248>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fa5a 	bl	8000b58 <ExtLights_PositionLightRear>
	else
	{
		/* do nothing */
	}

	if(BTReverseLight == STD_HIGH)
 80006a4:	4b46      	ldr	r3, [pc, #280]	; (80007c0 <ExtLights_MainFunction+0x24c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d108      	bne.n	80006be <ExtLights_MainFunction+0x14a>
	{
		CurrentState_ReverseLight = STD_HIGH;
 80006ac:	4b45      	ldr	r3, [pc, #276]	; (80007c4 <ExtLights_MainFunction+0x250>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
		ExtLights_ReverseLight(CurrentState_ReverseLight);
 80006b2:	4b44      	ldr	r3, [pc, #272]	; (80007c4 <ExtLights_MainFunction+0x250>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fa72 	bl	8000ba0 <ExtLights_ReverseLight>
 80006bc:	e00b      	b.n	80006d6 <ExtLights_MainFunction+0x162>
	}
	else if(BTReverseLight == STD_LOW)
 80006be:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <ExtLights_MainFunction+0x24c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d107      	bne.n	80006d6 <ExtLights_MainFunction+0x162>
	{
		CurrentState_ReverseLight = STD_LOW;
 80006c6:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <ExtLights_MainFunction+0x250>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
		ExtLights_ReverseLight(CurrentState_ReverseLight);
 80006cc:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <ExtLights_MainFunction+0x250>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fa65 	bl	8000ba0 <ExtLights_ReverseLight>
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalLeft == STD_HIGH)
 80006d6:	4b3c      	ldr	r3, [pc, #240]	; (80007c8 <ExtLights_MainFunction+0x254>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d11a      	bne.n	8000714 <ExtLights_MainFunction+0x1a0>
	{
		CurrentState_TurnSignalLeft = STD_HIGH;
 80006de:	4b3b      	ldr	r3, [pc, #236]	; (80007cc <ExtLights_MainFunction+0x258>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim10);
 80006e4:	483a      	ldr	r0, [pc, #232]	; (80007d0 <ExtLights_MainFunction+0x25c>)
 80006e6:	f002 f8e7 	bl	80028b8 <HAL_TIM_Base_Start_IT>

		if(__HAL_TIM_GET_COUNTER(&htim10) < 5000)
 80006ea:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <ExtLights_MainFunction+0x25c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d803      	bhi.n	8000700 <ExtLights_MainFunction+0x18c>
		{
			ExtLights_TurnSignalLeft(STD_HIGH);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 fa1b 	bl	8000b34 <ExtLights_TurnSignalLeft>
 80006fe:	e009      	b.n	8000714 <ExtLights_MainFunction+0x1a0>
		}
		else if(__HAL_TIM_GET_COUNTER(&htim10) > 5000)
 8000700:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <ExtLights_MainFunction+0x25c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	f241 3288 	movw	r2, #5000	; 0x1388
 800070a:	4293      	cmp	r3, r2
 800070c:	d902      	bls.n	8000714 <ExtLights_MainFunction+0x1a0>
		{
			ExtLights_TurnSignalLeft(STD_LOW);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 fa10 	bl	8000b34 <ExtLights_TurnSignalLeft>
//	else
//	{
//		/* do nothing */
//	}

	if(BTCenLoc == STD_HIGH)
 8000714:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <ExtLights_MainFunction+0x260>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b01      	cmp	r3, #1
 800071a:	f040 80bb 	bne.w	8000894 <ExtLights_MainFunction+0x320>
	{
		HAL_TIM_Base_Start_IT(&htim11);
 800071e:	482e      	ldr	r0, [pc, #184]	; (80007d8 <ExtLights_MainFunction+0x264>)
 8000720:	f002 f8ca 	bl	80028b8 <HAL_TIM_Base_Start_IT>

		if(__HAL_TIM_GET_COUNTER(&htim11) < 2000000 && BTExtLight_IrqFlag == STD_HIGH && flag_ == STD_LOW)
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <ExtLights_MainFunction+0x264>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072a:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <ExtLights_MainFunction+0x268>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d85d      	bhi.n	80007ec <ExtLights_MainFunction+0x278>
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <ExtLights_MainFunction+0x26c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d159      	bne.n	80007ec <ExtLights_MainFunction+0x278>
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <ExtLights_MainFunction+0x270>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d155      	bne.n	80007ec <ExtLights_MainFunction+0x278>
		{
			ExtLights_LowBeam(CurrentState_CenLoc);
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <ExtLights_MainFunction+0x274>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f9ad 	bl	8000aa4 <ExtLights_LowBeam>
			ExtLights_HighBeam(CurrentState_CenLoc);
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <ExtLights_MainFunction+0x274>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f9ba 	bl	8000ac8 <ExtLights_HighBeam>
			ExtLights_FogLightFront(CurrentState_CenLoc);
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <ExtLights_MainFunction+0x274>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f9c7 	bl	8000aec <ExtLights_FogLightFront>
			ExtLights_FogLightRear(CurrentState_CenLoc);
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <ExtLights_MainFunction+0x274>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f9d4 	bl	8000b10 <ExtLights_FogLightRear>
			ExtLights_PositionLightRear(CurrentState_CenLoc);
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <ExtLights_MainFunction+0x274>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f9f3 	bl	8000b58 <ExtLights_PositionLightRear>
			ExtLights_BrakeLight(CurrentState_CenLoc);
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <ExtLights_MainFunction+0x274>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fa00 	bl	8000b7c <ExtLights_BrakeLight>
			ExtLights_ReverseLight(CurrentState_CenLoc);
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <ExtLights_MainFunction+0x274>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fa0d 	bl	8000ba0 <ExtLights_ReverseLight>
			flag_ = STD_HIGH;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <ExtLights_MainFunction+0x270>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e105      	b.n	800099a <ExtLights_MainFunction+0x426>
 800078e:	bf00      	nop
 8000790:	20000036 	.word	0x20000036
 8000794:	2000002c 	.word	0x2000002c
 8000798:	20000037 	.word	0x20000037
 800079c:	2000002d 	.word	0x2000002d
 80007a0:	20000038 	.word	0x20000038
 80007a4:	2000002e 	.word	0x2000002e
 80007a8:	20000039 	.word	0x20000039
 80007ac:	2000002f 	.word	0x2000002f
 80007b0:	2000003b 	.word	0x2000003b
 80007b4:	20000033 	.word	0x20000033
 80007b8:	2000003a 	.word	0x2000003a
 80007bc:	20000032 	.word	0x20000032
 80007c0:	2000003c 	.word	0x2000003c
 80007c4:	20000034 	.word	0x20000034
 80007c8:	2000003e 	.word	0x2000003e
 80007cc:	20000031 	.word	0x20000031
 80007d0:	200000e4 	.word	0x200000e4
 80007d4:	2000002a 	.word	0x2000002a
 80007d8:	2000012c 	.word	0x2000012c
 80007dc:	001e847f 	.word	0x001e847f
 80007e0:	20000040 	.word	0x20000040
 80007e4:	20000041 	.word	0x20000041
 80007e8:	20000029 	.word	0x20000029
		}
		else if(BTExtLight_IrqFlag == STD_HIGH && flag_ == STD_HIGH)
 80007ec:	4b6c      	ldr	r3, [pc, #432]	; (80009a0 <ExtLights_MainFunction+0x42c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	f040 80d2 	bne.w	800099a <ExtLights_MainFunction+0x426>
 80007f6:	4b6b      	ldr	r3, [pc, #428]	; (80009a4 <ExtLights_MainFunction+0x430>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	f040 80cd 	bne.w	800099a <ExtLights_MainFunction+0x426>
		{
			ExtLights_LowBeam(!CurrentState_CenLoc);
 8000800:	4b69      	ldr	r3, [pc, #420]	; (80009a8 <ExtLights_MainFunction+0x434>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	bf0c      	ite	eq
 8000808:	2301      	moveq	r3, #1
 800080a:	2300      	movne	r3, #0
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f948 	bl	8000aa4 <ExtLights_LowBeam>
			ExtLights_HighBeam(!CurrentState_CenLoc);
 8000814:	4b64      	ldr	r3, [pc, #400]	; (80009a8 <ExtLights_MainFunction+0x434>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf0c      	ite	eq
 800081c:	2301      	moveq	r3, #1
 800081e:	2300      	movne	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f950 	bl	8000ac8 <ExtLights_HighBeam>
			ExtLights_FogLightFront(!CurrentState_CenLoc);
 8000828:	4b5f      	ldr	r3, [pc, #380]	; (80009a8 <ExtLights_MainFunction+0x434>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	bf0c      	ite	eq
 8000830:	2301      	moveq	r3, #1
 8000832:	2300      	movne	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f958 	bl	8000aec <ExtLights_FogLightFront>
			ExtLights_FogLightRear(!CurrentState_CenLoc);
 800083c:	4b5a      	ldr	r3, [pc, #360]	; (80009a8 <ExtLights_MainFunction+0x434>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf0c      	ite	eq
 8000844:	2301      	moveq	r3, #1
 8000846:	2300      	movne	r3, #0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f960 	bl	8000b10 <ExtLights_FogLightRear>
			ExtLights_PositionLightRear(!CurrentState_CenLoc);
 8000850:	4b55      	ldr	r3, [pc, #340]	; (80009a8 <ExtLights_MainFunction+0x434>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f97a 	bl	8000b58 <ExtLights_PositionLightRear>
			ExtLights_BrakeLight(!CurrentState_CenLoc);
 8000864:	4b50      	ldr	r3, [pc, #320]	; (80009a8 <ExtLights_MainFunction+0x434>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	bf0c      	ite	eq
 800086c:	2301      	moveq	r3, #1
 800086e:	2300      	movne	r3, #0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f982 	bl	8000b7c <ExtLights_BrakeLight>
			ExtLights_ReverseLight(!CurrentState_CenLoc);
 8000878:	4b4b      	ldr	r3, [pc, #300]	; (80009a8 <ExtLights_MainFunction+0x434>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf0c      	ite	eq
 8000880:	2301      	moveq	r3, #1
 8000882:	2300      	movne	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f98a 	bl	8000ba0 <ExtLights_ReverseLight>
			HAL_TIM_Base_Stop_IT(&htim11);
 800088c:	4847      	ldr	r0, [pc, #284]	; (80009ac <ExtLights_MainFunction+0x438>)
 800088e:	f002 f875 	bl	800297c <HAL_TIM_Base_Stop_IT>
	else
	{
		/*  do nothing */
	}

}
 8000892:	e082      	b.n	800099a <ExtLights_MainFunction+0x426>
	else if(BTCenLoc == STD_LOW)
 8000894:	4b46      	ldr	r3, [pc, #280]	; (80009b0 <ExtLights_MainFunction+0x43c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d17e      	bne.n	800099a <ExtLights_MainFunction+0x426>
		HAL_TIM_Base_Start_IT(&htim11);
 800089c:	4843      	ldr	r0, [pc, #268]	; (80009ac <ExtLights_MainFunction+0x438>)
 800089e:	f002 f80b 	bl	80028b8 <HAL_TIM_Base_Start_IT>
		if(__HAL_TIM_GET_COUNTER(&htim11) < 2000000 && BTExtLight_IrqFlag == STD_LOW )
 80008a2:	4b42      	ldr	r3, [pc, #264]	; (80009ac <ExtLights_MainFunction+0x438>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a8:	4a42      	ldr	r2, [pc, #264]	; (80009b4 <ExtLights_MainFunction+0x440>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d827      	bhi.n	80008fe <ExtLights_MainFunction+0x38a>
 80008ae:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <ExtLights_MainFunction+0x42c>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d123      	bne.n	80008fe <ExtLights_MainFunction+0x38a>
			ExtLights_LowBeam(CurrentState_CenLoc);
 80008b6:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <ExtLights_MainFunction+0x434>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f8f2 	bl	8000aa4 <ExtLights_LowBeam>
			ExtLights_HighBeam(CurrentState_CenLoc);
 80008c0:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <ExtLights_MainFunction+0x434>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f8ff 	bl	8000ac8 <ExtLights_HighBeam>
			ExtLights_FogLightFront(CurrentState_CenLoc);
 80008ca:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <ExtLights_MainFunction+0x434>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f90c 	bl	8000aec <ExtLights_FogLightFront>
			ExtLights_FogLightRear(CurrentState_CenLoc);
 80008d4:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <ExtLights_MainFunction+0x434>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f919 	bl	8000b10 <ExtLights_FogLightRear>
			ExtLights_PositionLightRear(CurrentState_CenLoc);
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <ExtLights_MainFunction+0x434>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f938 	bl	8000b58 <ExtLights_PositionLightRear>
			ExtLights_BrakeLight(CurrentState_CenLoc);
 80008e8:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <ExtLights_MainFunction+0x434>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f945 	bl	8000b7c <ExtLights_BrakeLight>
			ExtLights_ReverseLight(CurrentState_CenLoc);
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <ExtLights_MainFunction+0x434>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f952 	bl	8000ba0 <ExtLights_ReverseLight>
 80008fc:	e04d      	b.n	800099a <ExtLights_MainFunction+0x426>
		else if(BTExtLight_IrqFlag == STD_HIGH)
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <ExtLights_MainFunction+0x42c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d149      	bne.n	800099a <ExtLights_MainFunction+0x426>
			ExtLights_LowBeam(!CurrentState_CenLoc);
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <ExtLights_MainFunction+0x434>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	bf0c      	ite	eq
 800090e:	2301      	moveq	r3, #1
 8000910:	2300      	movne	r3, #0
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f8c5 	bl	8000aa4 <ExtLights_LowBeam>
			ExtLights_HighBeam(!CurrentState_CenLoc);
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <ExtLights_MainFunction+0x434>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	bf0c      	ite	eq
 8000922:	2301      	moveq	r3, #1
 8000924:	2300      	movne	r3, #0
 8000926:	b2db      	uxtb	r3, r3
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f8cd 	bl	8000ac8 <ExtLights_HighBeam>
			ExtLights_FogLightFront(!CurrentState_CenLoc);
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <ExtLights_MainFunction+0x434>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	bf0c      	ite	eq
 8000936:	2301      	moveq	r3, #1
 8000938:	2300      	movne	r3, #0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f8d5 	bl	8000aec <ExtLights_FogLightFront>
			ExtLights_FogLightRear(!CurrentState_CenLoc);
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <ExtLights_MainFunction+0x434>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f8dd 	bl	8000b10 <ExtLights_FogLightRear>
			ExtLights_PositionLightRear(!CurrentState_CenLoc);
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <ExtLights_MainFunction+0x434>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	bf0c      	ite	eq
 800095e:	2301      	moveq	r3, #1
 8000960:	2300      	movne	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f8f7 	bl	8000b58 <ExtLights_PositionLightRear>
			ExtLights_BrakeLight(!CurrentState_CenLoc);
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <ExtLights_MainFunction+0x434>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	bf0c      	ite	eq
 8000972:	2301      	moveq	r3, #1
 8000974:	2300      	movne	r3, #0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f8ff 	bl	8000b7c <ExtLights_BrakeLight>
			ExtLights_ReverseLight(!CurrentState_CenLoc);
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <ExtLights_MainFunction+0x434>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	bf0c      	ite	eq
 8000986:	2301      	moveq	r3, #1
 8000988:	2300      	movne	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	f000 f907 	bl	8000ba0 <ExtLights_ReverseLight>
			HAL_TIM_Base_Stop_IT(&htim11);
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <ExtLights_MainFunction+0x438>)
 8000994:	f001 fff2 	bl	800297c <HAL_TIM_Base_Stop_IT>
}
 8000998:	e7ff      	b.n	800099a <ExtLights_MainFunction+0x426>
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000040 	.word	0x20000040
 80009a4:	20000041 	.word	0x20000041
 80009a8:	20000029 	.word	0x20000029
 80009ac:	2000012c 	.word	0x2000012c
 80009b0:	2000002a 	.word	0x2000002a
 80009b4:	001e847f 	.word	0x001e847f

080009b8 <ExtLights_Init>:

uint8_t ExtLights_Init()
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	CurrentState_LowBeam = STD_LOW;
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <ExtLights_Init+0x94>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
	CurrentState_HighBeam = STD_LOW;
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <ExtLights_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightFront = STD_LOW;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <ExtLights_Init+0x9c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightRear = STD_LOW;
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <ExtLights_Init+0xa0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalLeft = STD_LOW;
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <ExtLights_Init+0xa4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalRight = STD_LOW;
 80009da:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <ExtLights_Init+0xa8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	CurrentState_PositionLightRear = STD_LOW;
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <ExtLights_Init+0xac>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	CurrentState_BrakeLight = STD_LOW;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <ExtLights_Init+0xb0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	CurrentState_ReverseLight = STD_LOW;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <ExtLights_Init+0xb4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	CurrentState_HazardLight = STD_LOW;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <ExtLights_Init+0xb8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
	BTLowBeam = STD_LOW;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <ExtLights_Init+0xbc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	BTHighBeam = STD_LOW;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <ExtLights_Init+0xc0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	BTFogLightFront = STD_LOW;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <ExtLights_Init+0xc4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	BTFogLightRear = STD_LOW;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <ExtLights_Init+0xc8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	BTPositionLightRear = STD_LOW;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <ExtLights_Init+0xcc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
	BTBrakeLight = STD_LOW;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <ExtLights_Init+0xd0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
	BTReverseLight = STD_LOW;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <ExtLights_Init+0xd4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
	BTTurnSignalRight = STD_LOW;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <ExtLights_Init+0xd8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
	BTTurnSignalLeft = STD_LOW;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <ExtLights_Init+0xdc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
	BTHazardLight = STD_LOW;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <ExtLights_Init+0xe0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
	BTExtLight_IrqFlag = STD_LOW;
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <ExtLights_Init+0xe4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
	flag_ = STD_LOW;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <ExtLights_Init+0xe8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	2000002c 	.word	0x2000002c
 8000a50:	2000002d 	.word	0x2000002d
 8000a54:	2000002e 	.word	0x2000002e
 8000a58:	2000002f 	.word	0x2000002f
 8000a5c:	20000031 	.word	0x20000031
 8000a60:	20000030 	.word	0x20000030
 8000a64:	20000032 	.word	0x20000032
 8000a68:	20000033 	.word	0x20000033
 8000a6c:	20000034 	.word	0x20000034
 8000a70:	20000035 	.word	0x20000035
 8000a74:	20000036 	.word	0x20000036
 8000a78:	20000037 	.word	0x20000037
 8000a7c:	20000038 	.word	0x20000038
 8000a80:	20000039 	.word	0x20000039
 8000a84:	2000003a 	.word	0x2000003a
 8000a88:	2000003b 	.word	0x2000003b
 8000a8c:	2000003c 	.word	0x2000003c
 8000a90:	2000003d 	.word	0x2000003d
 8000a94:	2000003e 	.word	0x2000003e
 8000a98:	2000003f 	.word	0x2000003f
 8000a9c:	20000040 	.word	0x20000040
 8000aa0:	20000041 	.word	0x20000041

08000aa4 <ExtLights_LowBeam>:


void ExtLights_LowBeam(uint8_t PinState)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, PinState);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <ExtLights_LowBeam+0x20>)
 8000ab8:	f001 f9ca 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <ExtLights_HighBeam>:

void ExtLights_HighBeam(uint8_t PinState)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, PinState);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <ExtLights_HighBeam+0x20>)
 8000ada:	f001 f9b9 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40020400 	.word	0x40020400

08000aec <ExtLights_FogLightFront>:

void ExtLights_FogLightFront(uint8_t PinState)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, PinState);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	461a      	mov	r2, r3
 8000afa:	2110      	movs	r1, #16
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <ExtLights_FogLightFront+0x20>)
 8000afe:	f001 f9a7 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40020400 	.word	0x40020400

08000b10 <ExtLights_FogLightRear>:

void ExtLights_FogLightRear(uint8_t PinState)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, PinState);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2120      	movs	r1, #32
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <ExtLights_FogLightRear+0x20>)
 8000b22:	f001 f995 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020000 	.word	0x40020000

08000b34 <ExtLights_TurnSignalLeft>:


void ExtLights_TurnSignalLeft(uint8_t PinState)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, PinState);
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	461a      	mov	r2, r3
 8000b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <ExtLights_TurnSignalLeft+0x20>)
 8000b48:	f001 f982 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40020000 	.word	0x40020000

08000b58 <ExtLights_PositionLightRear>:
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, PinState);
}

void ExtLights_PositionLightRear(uint8_t PinState)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, PinState);
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	461a      	mov	r2, r3
 8000b66:	2140      	movs	r1, #64	; 0x40
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <ExtLights_PositionLightRear+0x20>)
 8000b6a:	f001 f971 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40020000 	.word	0x40020000

08000b7c <ExtLights_BrakeLight>:

void ExtLights_BrakeLight(uint8_t PinState)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, PinState);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <ExtLights_BrakeLight+0x20>)
 8000b90:	f001 f95e 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <ExtLights_ReverseLight>:

void ExtLights_ReverseLight(uint8_t PinState)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, PinState);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	461a      	mov	r2, r3
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <ExtLights_ReverseLight+0x20>)
 8000bb2:	f001 f94d 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40020800 	.word	0x40020800

08000bc4 <IntLights_MainFunction>:

uint8_t CurrentState_IntLights;
uint8_t BTIntLights;

void IntLights_MainFunction()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	if(CurrentState_CenLoc == STD_HIGH)
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <IntLights_MainFunction+0xb8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d108      	bne.n	8000be2 <IntLights_MainFunction+0x1e>
	{
		CurrentState_IntLights = STD_HIGH;
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
		IntLights_Toggle_IntLights(CurrentState_IntLights);
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f866 	bl	8000cac <IntLights_Toggle_IntLights>
 8000be0:	e00b      	b.n	8000bfa <IntLights_MainFunction+0x36>
	}
	else if(CurrentState_CenLoc == STD_LOW)
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <IntLights_MainFunction+0xb8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d107      	bne.n	8000bfa <IntLights_MainFunction+0x36>
	{
		CurrentState_IntLights = STD_LOW;
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
		IntLights_Toggle_IntLights(CurrentState_IntLights);
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f859 	bl	8000cac <IntLights_Toggle_IntLights>
	else
	{
		/* do nothing */
	}

	if(BTIntLights == STD_HIGH && CurrentState_IntLights == STD_HIGH)
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <IntLights_MainFunction+0xc0>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d109      	bne.n	8000c16 <IntLights_MainFunction+0x52>
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d105      	bne.n	8000c16 <IntLights_MainFunction+0x52>
	{
		IntLights_Toggle_IntLights(CurrentState_IntLights);
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f84c 	bl	8000cac <IntLights_Toggle_IntLights>
 8000c14:	e02f      	b.n	8000c76 <IntLights_MainFunction+0xb2>
	}
	else if(BTIntLights == STD_LOW && CurrentState_IntLights == STD_HIGH)
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <IntLights_MainFunction+0xc0>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10c      	bne.n	8000c38 <IntLights_MainFunction+0x74>
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d108      	bne.n	8000c38 <IntLights_MainFunction+0x74>
	{
		BTIntLights = STD_LOW;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <IntLights_MainFunction+0xc0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
		IntLights_Toggle_IntLights(CurrentState_IntLights);
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 f83b 	bl	8000cac <IntLights_Toggle_IntLights>
 8000c36:	e01e      	b.n	8000c76 <IntLights_MainFunction+0xb2>
	}
	else if(BTIntLights == STD_LOW && CurrentState_IntLights == STD_LOW)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <IntLights_MainFunction+0xc0>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <IntLights_MainFunction+0x90>
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d105      	bne.n	8000c54 <IntLights_MainFunction+0x90>
	{
		IntLights_Toggle_IntLights(CurrentState_IntLights);
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f82d 	bl	8000cac <IntLights_Toggle_IntLights>
 8000c52:	e010      	b.n	8000c76 <IntLights_MainFunction+0xb2>
	}
	else if(BTIntLights == STD_HIGH && CurrentState_IntLights == STD_LOW)
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <IntLights_MainFunction+0xc0>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d10c      	bne.n	8000c76 <IntLights_MainFunction+0xb2>
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d108      	bne.n	8000c76 <IntLights_MainFunction+0xb2>
	{
		CurrentState_IntLights = STD_HIGH;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
		IntLights_Toggle_IntLights(CurrentState_IntLights);
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <IntLights_MainFunction+0xbc>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f81c 	bl	8000cac <IntLights_Toggle_IntLights>
	}
	else
	{
		/* do nothing */
	}
}
 8000c74:	e7ff      	b.n	8000c76 <IntLights_MainFunction+0xb2>
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000029 	.word	0x20000029
 8000c80:	20000042 	.word	0x20000042
 8000c84:	20000043 	.word	0x20000043

08000c88 <IntLights_Init>:

uint8_t IntLights_Init()
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
	CurrentState_IntLights = STD_LOW;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <IntLights_Init+0x1c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
	BTIntLights = STD_LOW;
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <IntLights_Init+0x20>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20000042 	.word	0x20000042
 8000ca8:	20000043 	.word	0x20000043

08000cac <IntLights_Toggle_IntLights>:

void IntLights_Toggle_IntLights(uint8_t PinState)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, PinState);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cbe:	4803      	ldr	r0, [pc, #12]	; (8000ccc <IntLights_Toggle_IntLights+0x20>)
 8000cc0:	f001 f8c6 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40020400 	.word	0x40020400

08000cd0 <SecAlm_MainFunction>:
uint8_t PrevStateBTCenLoc;
uint8_t NextStateBTCenLoc;


void SecAlm_MainFunction()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	/* TODO: Implement vibration sensor in order
		 * 		 to trigger the ALARM_BUZZER and
		 * 		 ALARM_LED in case of theft.
		 */

    NextStateBTCenLoc = BTCenLoc;
 8000cd4:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <SecAlm_MainFunction+0x100>)
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <SecAlm_MainFunction+0x104>)
 8000cda:	701a      	strb	r2, [r3, #0]

    if(NextStateBTCenLoc != PrevStateBTCenLoc)
 8000cdc:	4b3d      	ldr	r3, [pc, #244]	; (8000dd4 <SecAlm_MainFunction+0x104>)
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <SecAlm_MainFunction+0x108>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d00c      	beq.n	8000d02 <SecAlm_MainFunction+0x32>
    {
    	PrevStateBTCenLoc = NextStateBTCenLoc;
 8000ce8:	4b3a      	ldr	r3, [pc, #232]	; (8000dd4 <SecAlm_MainFunction+0x104>)
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <SecAlm_MainFunction+0x108>)
 8000cee:	701a      	strb	r2, [r3, #0]
    	flag_ = STD_LOW;
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <SecAlm_MainFunction+0x10c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
    	AlarmCount1 = STD_LOW;
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <SecAlm_MainFunction+0x110>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
    	AlarmCount2 = STD_LOW;
 8000cfc:	4b39      	ldr	r3, [pc, #228]	; (8000de4 <SecAlm_MainFunction+0x114>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
    }

	if(BTCenLoc == STD_HIGH && AlarmCount1 < 2)
 8000d02:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <SecAlm_MainFunction+0x100>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d12d      	bne.n	8000d66 <SecAlm_MainFunction+0x96>
 8000d0a:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <SecAlm_MainFunction+0x110>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d829      	bhi.n	8000d66 <SecAlm_MainFunction+0x96>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 8000d12:	4835      	ldr	r0, [pc, #212]	; (8000de8 <SecAlm_MainFunction+0x118>)
 8000d14:	f001 fdd0 	bl	80028b8 <HAL_TIM_Base_Start_IT>

		if(BTCenLoc_IrqFlag == STD_LOW)
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <SecAlm_MainFunction+0x11c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d10e      	bne.n	8000d3e <SecAlm_MainFunction+0x6e>
		{
			CurrentState_Alarm_Buzzer = STD_HIGH;
 8000d20:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <SecAlm_MainFunction+0x120>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
			SecAlm_ToggleAlarmLed(CurrentState_Alarm_Buzzer);
 8000d26:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <SecAlm_MainFunction+0x120>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f898 	bl	8000e60 <SecAlm_ToggleAlarmLed>
			AlarmCount1++;
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <SecAlm_MainFunction+0x110>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <SecAlm_MainFunction+0x110>)
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e00b      	b.n	8000d56 <SecAlm_MainFunction+0x86>
		}
		else if(BTCenLoc_IrqFlag == STD_HIGH)
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <SecAlm_MainFunction+0x11c>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d107      	bne.n	8000d56 <SecAlm_MainFunction+0x86>
		{
			CurrentState_Alarm_Buzzer = STD_LOW;
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <SecAlm_MainFunction+0x120>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
			SecAlm_ToggleAlarmLed(CurrentState_Alarm_Buzzer);
 8000d4c:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <SecAlm_MainFunction+0x120>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f885 	bl	8000e60 <SecAlm_ToggleAlarmLed>
		else
		{
			/* do nothing */
		}

		if(AlarmCount1 == 2)
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <SecAlm_MainFunction+0x110>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d135      	bne.n	8000dca <SecAlm_MainFunction+0xfa>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 8000d5e:	4822      	ldr	r0, [pc, #136]	; (8000de8 <SecAlm_MainFunction+0x118>)
 8000d60:	f001 fe0c 	bl	800297c <HAL_TIM_Base_Stop_IT>
		if(AlarmCount1 == 2)
 8000d64:	e031      	b.n	8000dca <SecAlm_MainFunction+0xfa>
		else
		{
			/* do nothing */
		}
	}
	else if(BTCenLoc == STD_LOW && AlarmCount2 < 1)
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <SecAlm_MainFunction+0x100>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d12d      	bne.n	8000dca <SecAlm_MainFunction+0xfa>
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <SecAlm_MainFunction+0x114>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d129      	bne.n	8000dca <SecAlm_MainFunction+0xfa>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 8000d76:	481c      	ldr	r0, [pc, #112]	; (8000de8 <SecAlm_MainFunction+0x118>)
 8000d78:	f001 fd9e 	bl	80028b8 <HAL_TIM_Base_Start_IT>
//		CurrentState_Alarm_LED = STD_LOW;
//		SecAlm_ToggleAlarmLed(CurrentState_Alarm_LED);
		//test with alarm led

		if(BTCenLoc_IrqFlag == STD_LOW)
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <SecAlm_MainFunction+0x11c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10e      	bne.n	8000da2 <SecAlm_MainFunction+0xd2>
		{
			CurrentState_Alarm_Buzzer = STD_HIGH;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <SecAlm_MainFunction+0x120>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
			SecAlm_ToggleAlarmLed(CurrentState_Alarm_Buzzer);
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <SecAlm_MainFunction+0x120>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f866 	bl	8000e60 <SecAlm_ToggleAlarmLed>
			AlarmCount2++;
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <SecAlm_MainFunction+0x114>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <SecAlm_MainFunction+0x114>)
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e00b      	b.n	8000dba <SecAlm_MainFunction+0xea>
		}
		else if(BTCenLoc_IrqFlag == STD_HIGH)
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <SecAlm_MainFunction+0x11c>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d107      	bne.n	8000dba <SecAlm_MainFunction+0xea>
		{
			CurrentState_Alarm_Buzzer = STD_LOW;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <SecAlm_MainFunction+0x120>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
			SecAlm_ToggleAlarmLed(CurrentState_Alarm_Buzzer);
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <SecAlm_MainFunction+0x120>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f853 	bl	8000e60 <SecAlm_ToggleAlarmLed>
		else
		{
			/* do nothing */
		}

		if(AlarmCount2 == 1)
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <SecAlm_MainFunction+0x114>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d103      	bne.n	8000dca <SecAlm_MainFunction+0xfa>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <SecAlm_MainFunction+0x118>)
 8000dc4:	f001 fdda 	bl	800297c <HAL_TIM_Base_Stop_IT>
		else
		{
			/* do nothing */
		}
	}
}
 8000dc8:	e7ff      	b.n	8000dca <SecAlm_MainFunction+0xfa>
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000002a 	.word	0x2000002a
 8000dd4:	2000004c 	.word	0x2000004c
 8000dd8:	2000004b 	.word	0x2000004b
 8000ddc:	20000041 	.word	0x20000041
 8000de0:	20000049 	.word	0x20000049
 8000de4:	2000004a 	.word	0x2000004a
 8000de8:	2000009c 	.word	0x2000009c
 8000dec:	2000002b 	.word	0x2000002b
 8000df0:	20000047 	.word	0x20000047

08000df4 <SecAlm_Init>:

uint8_t SecAlm_Init()
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	PrevState_UserButton = STD_LOW;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <SecAlm_Init+0x48>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
	NextState_UserButton = STD_LOW;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <SecAlm_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
	CurrentState_UserButton = STD_LOW;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <SecAlm_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
	CurrentState_Alarm_Buzzer = STD_LOW;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <SecAlm_Init+0x54>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
	CurrentState_Alarm_LED = STD_LOW;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <SecAlm_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
	AlarmCount1 = STD_LOW;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <SecAlm_Init+0x5c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
	AlarmCount2 = STD_LOW;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <SecAlm_Init+0x60>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
	PrevStateBTCenLoc = STD_LOW;
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <SecAlm_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
	NextStateBTCenLoc = STD_LOW;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <SecAlm_Init+0x68>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000044 	.word	0x20000044
 8000e40:	20000045 	.word	0x20000045
 8000e44:	20000046 	.word	0x20000046
 8000e48:	20000047 	.word	0x20000047
 8000e4c:	20000048 	.word	0x20000048
 8000e50:	20000049 	.word	0x20000049
 8000e54:	2000004a 	.word	0x2000004a
 8000e58:	2000004b 	.word	0x2000004b
 8000e5c:	2000004c 	.word	0x2000004c

08000e60 <SecAlm_ToggleAlarmLed>:
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, PinState);
}

void SecAlm_ToggleAlarmLed(uint8_t PinState)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, PinState);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <SecAlm_ToggleAlarmLed+0x20>)
 8000e72:	f000 ffed 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40020000 	.word	0x40020000

08000e84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a41      	ldr	r2, [pc, #260]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a3a      	ldr	r2, [pc, #232]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a33      	ldr	r2, [pc, #204]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a2c      	ldr	r2, [pc, #176]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <MX_GPIO_Init+0x124>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f240 71f3 	movw	r1, #2035	; 0x7f3
 8000f10:	4826      	ldr	r0, [pc, #152]	; (8000fac <MX_GPIO_Init+0x128>)
 8000f12:	f000 ff9d 	bl	8001e50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 8000f16:	2200      	movs	r2, #0
 8000f18:	f240 7171 	movw	r1, #1905	; 0x771
 8000f1c:	4824      	ldr	r0, [pc, #144]	; (8000fb0 <MX_GPIO_Init+0x12c>)
 8000f1e:	f000 ff97 	bl	8001e50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	4823      	ldr	r0, [pc, #140]	; (8000fb4 <MX_GPIO_Init+0x130>)
 8000f28:	f000 ff92 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f32:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	481c      	ldr	r0, [pc, #112]	; (8000fb4 <MX_GPIO_Init+0x130>)
 8000f44:	f000 fe00 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PAPin
                           PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8000f48:	f240 73f3 	movw	r3, #2035	; 0x7f3
 8000f4c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4812      	ldr	r0, [pc, #72]	; (8000fac <MX_GPIO_Init+0x128>)
 8000f62:	f000 fdf1 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 8000f66:	f240 7371 	movw	r3, #1905	; 0x771
 8000f6a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <MX_GPIO_Init+0x12c>)
 8000f80:	f000 fde2 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <MX_GPIO_Init+0x130>)
 8000f9c:	f000 fdd4 	bl	8001b48 <HAL_GPIO_Init>

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 fc0e 	bl	80017dc <HAL_Init>
  //HAL_TIM_Base_Start(&htim11);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f820 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff ff5e 	bl	8000e84 <MX_GPIO_Init>
  MX_TIM11_Init();
 8000fc8:	f000 fa70 	bl	80014ac <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8000fcc:	f000 faec 	bl	80015a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fd0:	f000 fb14 	bl	80015fc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fd4:	f000 f9f8 	bl	80013c8 <MX_TIM2_Init>
  MX_TIM10_Init();
 8000fd8:	f000 fa44 	bl	8001464 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000fdc:	f000 f87a 	bl	80010d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CenLoc_Init();
 8000fe0:	f7ff fa9e 	bl	8000520 <CenLoc_Init>
  SecAlm_Init();
 8000fe4:	f7ff ff06 	bl	8000df4 <SecAlm_Init>
  ExtLights_Init();
 8000fe8:	f7ff fce6 	bl	80009b8 <ExtLights_Init>
  IntLights_Init();
 8000fec:	f7ff fe4c 	bl	8000c88 <IntLights_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CenLoc_MainFunction();
 8000ff0:	f7ff fa74 	bl	80004dc <CenLoc_MainFunction>
	  SecAlm_MainFunction();
 8000ff4:	f7ff fe6c 	bl	8000cd0 <SecAlm_MainFunction>
	  ExtLights_MainFunction();
 8000ff8:	f7ff fabc 	bl	8000574 <ExtLights_MainFunction>
	  IntLights_MainFunction();
 8000ffc:	f7ff fde2 	bl	8000bc4 <IntLights_MainFunction>
	  CenLoc_MainFunction();
 8001000:	e7f6      	b.n	8000ff0 <main+0x38>
	...

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2230      	movs	r2, #48	; 0x30
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f003 f810 	bl	8004038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <SystemClock_Config+0xc8>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a26      	ldr	r2, [pc, #152]	; (80010cc <SystemClock_Config+0xc8>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <SystemClock_Config+0xc8>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <SystemClock_Config+0xcc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <SystemClock_Config+0xcc>)
 800104e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <SystemClock_Config+0xcc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001060:	2301      	movs	r3, #1
 8001062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107c:	2302      	movs	r3, #2
 800107e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001080:	2304      	movs	r3, #4
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fefb 	bl	8001e84 <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001094:	f000 f87e 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109c:	2302      	movs	r3, #2
 800109e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2103      	movs	r1, #3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f95d 	bl	8002374 <HAL_RCC_ClockConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010c0:	f000 f868 	bl	8001194 <Error_Handler>
  }
}
 80010c4:	bf00      	nop
 80010c6:	3750      	adds	r7, #80	; 0x50
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2005      	movs	r0, #5
 80010de:	f000 fc77 	bl	80019d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010e2:	2005      	movs	r0, #5
 80010e4:	f000 fc90 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	201a      	movs	r0, #26
 80010ee:	f000 fc6f 	bl	80019d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80010f2:	201a      	movs	r0, #26
 80010f4:	f000 fc88 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2025      	movs	r0, #37	; 0x25
 80010fe:	f000 fc67 	bl	80019d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001102:	2025      	movs	r0, #37	; 0x25
 8001104:	f000 fc80 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2026      	movs	r0, #38	; 0x26
 800110e:	f000 fc5f 	bl	80019d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001112:	2026      	movs	r0, #38	; 0x26
 8001114:	f000 fc78 	bl	8001a08 <HAL_NVIC_EnableIRQ>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_UART_RxCpltCallback+0x28>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d104      	bne.n	800113a <HAL_UART_RxCpltCallback+0x1e>
    {
    HAL_UART_Receive_IT(&huart1, (uint8_t*)RX_BUFFER, BUFFER_LEN);
 8001130:	2201      	movs	r2, #1
 8001132:	4905      	ldr	r1, [pc, #20]	; (8001148 <HAL_UART_RxCpltCallback+0x2c>)
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <HAL_UART_RxCpltCallback+0x28>)
 8001136:	f002 f830 	bl	800319a <HAL_UART_Receive_IT>
    }
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000174 	.word	0x20000174
 8001148:	20000050 	.word	0x20000050

0800114c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim == &htim10)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d103      	bne.n	8001164 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		BTExtLight_IrqFlag = 1;
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e006      	b.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x26>
	}
	else if(htim != &htim10)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d002      	beq.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		BTExtLight_IrqFlag = 0;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
//	{
//		/* do nothing */
//	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d101      	bne.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 800117c:	f000 fb50 	bl	8001820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000e4 	.word	0x200000e4
 800118c:	20000040 	.word	0x20000040
 8001190:	40010000 	.word	0x40010000

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	e7fe      	b.n	800119c <Error_Handler+0x8>
	...

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x4c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011de:	2007      	movs	r0, #7
 80011e0:	f000 fbeb 	bl	80019ba <HAL_NVIC_SetPriorityGrouping>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_InitTick+0xd0>)
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <HAL_InitTick+0xd0>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6453      	str	r3, [r2, #68]	; 0x44
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_InitTick+0xd0>)
 8001212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800121c:	f107 020c 	add.w	r2, r7, #12
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f001 fac4 	bl	80027b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800122c:	f001 faae 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 8001230:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001234:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <HAL_InitTick+0xd4>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	3b01      	subs	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_InitTick+0xd8>)
 8001242:	4a22      	ldr	r2, [pc, #136]	; (80012cc <HAL_InitTick+0xdc>)
 8001244:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_InitTick+0xd8>)
 8001248:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800124e:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <HAL_InitTick+0xd8>)
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_InitTick+0xd8>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_InitTick+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_InitTick+0xd8>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001266:	4818      	ldr	r0, [pc, #96]	; (80012c8 <HAL_InitTick+0xd8>)
 8001268:	f001 fad6 	bl	8002818 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001276:	2b00      	cmp	r3, #0
 8001278:	d11b      	bne.n	80012b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800127a:	4813      	ldr	r0, [pc, #76]	; (80012c8 <HAL_InitTick+0xd8>)
 800127c:	f001 fb1c 	bl	80028b8 <HAL_TIM_Base_Start_IT>
 8001280:	4603      	mov	r3, r0
 8001282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800128a:	2b00      	cmp	r3, #0
 800128c:	d111      	bne.n	80012b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800128e:	2019      	movs	r0, #25
 8001290:	f000 fbba 	bl	8001a08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	d808      	bhi.n	80012ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800129a:	2200      	movs	r2, #0
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	2019      	movs	r0, #25
 80012a0:	f000 fb96 	bl	80019d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_InitTick+0xe0>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e002      	b.n	80012b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3730      	adds	r7, #48	; 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	20000054 	.word	0x20000054
 80012cc:	40010000 	.word	0x40010000
 80012d0:	20000004 	.word	0x20000004

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800133e:	f001 fb4c 	bl	80029da <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001342:	4803      	ldr	r0, [pc, #12]	; (8001350 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001344:	f001 fb49 	bl	80029da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000054 	.word	0x20000054
 8001350:	200000e4 	.word	0x200000e4

08001354 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800135a:	f001 fb3e 	bl	80029da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000012c 	.word	0x2000012c

08001368 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <TIM2_IRQHandler+0x10>)
 800136e:	f001 fb34 	bl	80029da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000009c 	.word	0x2000009c

0800137c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <USART1_IRQHandler+0x10>)
 8001382:	f001 ff3b 	bl	80031fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000174 	.word	0x20000174

08001390 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <USART2_IRQHandler+0x10>)
 8001396:	f001 ff31 	bl	80031fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001b8 	.word	0x200001b8

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <MX_TIM2_Init+0x94>)
 80013e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_TIM2_Init+0x94>)
 80013ee:	2263      	movs	r2, #99	; 0x63
 80013f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_TIM2_Init+0x94>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250000-1;
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_TIM2_Init+0x94>)
 80013fa:	4a19      	ldr	r2, [pc, #100]	; (8001460 <MX_TIM2_Init+0x98>)
 80013fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_TIM2_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_TIM2_Init+0x94>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800140a:	4814      	ldr	r0, [pc, #80]	; (800145c <MX_TIM2_Init+0x94>)
 800140c:	f001 fa04 	bl	8002818 <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001416:	f7ff febd 	bl	8001194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4619      	mov	r1, r3
 8001426:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_TIM2_Init+0x94>)
 8001428:	f001 fbdf 	bl	8002bea <HAL_TIM_ConfigClockSource>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001432:	f7ff feaf 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001436:	2310      	movs	r3, #16
 8001438:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_TIM2_Init+0x94>)
 8001444:	f001 fdda 	bl	8002ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800144e:	f7ff fea1 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000009c 	.word	0x2000009c
 8001460:	0003d08f 	.word	0x0003d08f

08001464 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_TIM10_Init+0x40>)
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <MX_TIM10_Init+0x44>)
 800146c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000-1;
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <MX_TIM10_Init+0x40>)
 8001470:	f242 720f 	movw	r2, #9999	; 0x270f
 8001474:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_TIM10_Init+0x40>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000 - 1;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_TIM10_Init+0x40>)
 800147e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001482:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_TIM10_Init+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_TIM10_Init+0x40>)
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_TIM10_Init+0x40>)
 8001492:	f001 f9c1 	bl	8002818 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800149c:	f7ff fe7a 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000e4 	.word	0x200000e4
 80014a8:	40014400 	.word	0x40014400

080014ac <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_TIM11_Init+0x40>)
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <MX_TIM11_Init+0x44>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MX_TIM11_Init+0x40>)
 80014b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80014bc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_TIM11_Init+0x40>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 20000-1;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_TIM11_Init+0x40>)
 80014c6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014ca:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_TIM11_Init+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_TIM11_Init+0x40>)
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_TIM11_Init+0x40>)
 80014da:	f001 f99d 	bl	8002818 <HAL_TIM_Base_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80014e4:	f7ff fe56 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000012c 	.word	0x2000012c
 80014f0:	40014800 	.word	0x40014800

080014f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001504:	d116      	bne.n	8001534 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_TIM_Base_MspInit+0xa8>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a23      	ldr	r2, [pc, #140]	; (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	201c      	movs	r0, #28
 8001528:	f000 fa52 	bl	80019d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800152c:	201c      	movs	r0, #28
 800152e:	f000 fa6b 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001532:	e02e      	b.n	8001592 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM10)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_TIM_Base_MspInit+0xac>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d116      	bne.n	800156c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2019      	movs	r0, #25
 8001560:	f000 fa36 	bl	80019d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001564:	2019      	movs	r0, #25
 8001566:	f000 fa4f 	bl	8001a08 <HAL_NVIC_EnableIRQ>
}
 800156a:	e012      	b.n	8001592 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM11)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_TIM_Base_MspInit+0xb0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10d      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_TIM_Base_MspInit+0xa8>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40014400 	.word	0x40014400
 80015a4:	40014800 	.word	0x40014800

080015a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_USART1_UART_Init+0x50>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015e0:	f001 fd8e 	bl	8003100 <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ea:	f7ff fdd3 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000174 	.word	0x20000174
 80015f8:	40011000 	.word	0x40011000

080015fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <MX_USART2_UART_Init+0x50>)
 8001604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001608:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800160c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001634:	f001 fd64 	bl	8003100 <HAL_UART_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800163e:	f7ff fda9 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001b8 	.word	0x200001b8
 800164c:	40004400 	.word	0x40004400

08001650 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	; 0x30
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_UART_MspInit+0x124>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d14b      	bne.n	800170a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	4b40      	ldr	r3, [pc, #256]	; (8001778 <HAL_UART_MspInit+0x128>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a3f      	ldr	r2, [pc, #252]	; (8001778 <HAL_UART_MspInit+0x128>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <HAL_UART_MspInit+0x128>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4b39      	ldr	r3, [pc, #228]	; (8001778 <HAL_UART_MspInit+0x128>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a38      	ldr	r2, [pc, #224]	; (8001778 <HAL_UART_MspInit+0x128>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_UART_MspInit+0x128>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_UART_MspInit+0x128>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a31      	ldr	r2, [pc, #196]	; (8001778 <HAL_UART_MspInit+0x128>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_UART_MspInit+0x128>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016d8:	2307      	movs	r3, #7
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	4826      	ldr	r0, [pc, #152]	; (800177c <HAL_UART_MspInit+0x12c>)
 80016e4:	f000 fa30 	bl	8001b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f8:	2307      	movs	r3, #7
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	481f      	ldr	r0, [pc, #124]	; (8001780 <HAL_UART_MspInit+0x130>)
 8001704:	f000 fa20 	bl	8001b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001708:	e030      	b.n	800176c <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_UART_MspInit+0x134>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d12b      	bne.n	800176c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_UART_MspInit+0x128>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	4a16      	ldr	r2, [pc, #88]	; (8001778 <HAL_UART_MspInit+0x128>)
 800171e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001722:	6413      	str	r3, [r2, #64]	; 0x40
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_UART_MspInit+0x128>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_UART_MspInit+0x128>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_UART_MspInit+0x128>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_UART_MspInit+0x128>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800174c:	230c      	movs	r3, #12
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175c:	2307      	movs	r3, #7
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <HAL_UART_MspInit+0x12c>)
 8001768:	f000 f9ee 	bl	8001b48 <HAL_GPIO_Init>
}
 800176c:	bf00      	nop
 800176e:	3730      	adds	r7, #48	; 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40011000 	.word	0x40011000
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400
 8001784:	40004400 	.word	0x40004400

08001788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178e:	490e      	ldr	r1, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a4:	4c0b      	ldr	r4, [pc, #44]	; (80017d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b2:	f7ff fdf7 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f002 fc1b 	bl	8003ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ba:	f7ff fbfd 	bl	8000fb8 <main>
  bx  lr    
 80017be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017cc:	08004088 	.word	0x08004088
  ldr r2, =_sbss
 80017d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017d4:	20000200 	.word	0x20000200

080017d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC_IRQHandler>
	...

080017dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <HAL_Init+0x40>)
 80017e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_Init+0x40>)
 80017f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_Init+0x40>)
 80017fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f8d8 	bl	80019ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fcf0 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001810:	f7ff fcc6 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023c00 	.word	0x40023c00

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	200001fc 	.word	0x200001fc

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200001fc 	.word	0x200001fc

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff4c 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e2:	f7ff ff61 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 80019e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	6978      	ldr	r0, [r7, #20]
 80019ee:	f7ff ffb1 	bl	8001954 <NVIC_EncodePriority>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff80 	bl	8001900 <__NVIC_SetPriority>
}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff54 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a32:	f7ff ff09 	bl	8001848 <HAL_GetTick>
 8001a36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d008      	beq.n	8001a56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e052      	b.n	8001afc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0216 	bic.w	r2, r2, #22
 8001a64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d103      	bne.n	8001a86 <HAL_DMA_Abort+0x62>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0208 	bic.w	r2, r2, #8
 8001a94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa6:	e013      	b.n	8001ad0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aa8:	f7ff fece 	bl	8001848 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d90c      	bls.n	8001ad0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e015      	b.n	8001afc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1e4      	bne.n	8001aa8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	223f      	movs	r2, #63	; 0x3f
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d004      	beq.n	8001b22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00c      	b.n	8001b3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2205      	movs	r2, #5
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e159      	b.n	8001e18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 8148 	bne.w	8001e12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d005      	beq.n	8001b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d130      	bne.n	8001bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 0201 	and.w	r2, r3, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d017      	beq.n	8001c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d123      	bne.n	8001c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3208      	adds	r2, #8
 8001c86:	69b9      	ldr	r1, [r7, #24]
 8001c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80a2 	beq.w	8001e12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a56      	ldr	r2, [pc, #344]	; (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cea:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_GPIO_Init+0x2ec>)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a49      	ldr	r2, [pc, #292]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_GPIO_Init+0x202>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a48      	ldr	r2, [pc, #288]	; (8001e3c <HAL_GPIO_Init+0x2f4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x1fe>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a47      	ldr	r2, [pc, #284]	; (8001e40 <HAL_GPIO_Init+0x2f8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x1fa>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a46      	ldr	r2, [pc, #280]	; (8001e44 <HAL_GPIO_Init+0x2fc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x1f6>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a45      	ldr	r2, [pc, #276]	; (8001e48 <HAL_GPIO_Init+0x300>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x1f2>
 8001d36:	2304      	movs	r3, #4
 8001d38:	e008      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5c:	4935      	ldr	r1, [pc, #212]	; (8001e34 <HAL_GPIO_Init+0x2ec>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8e:	4a2f      	ldr	r2, [pc, #188]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db8:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de2:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f67f aea2 	bls.w	8001b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40013c00 	.word	0x40013c00

08001e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e60:	787b      	ldrb	r3, [r7, #1]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e6c:	e003      	b.n	8001e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	041a      	lsls	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e267      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d075      	beq.n	8001f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea2:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d00c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eae:	4b85      	ldr	r3, [pc, #532]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d112      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eba:	4b82      	ldr	r3, [pc, #520]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec6:	d10b      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	4b7e      	ldr	r3, [pc, #504]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d05b      	beq.n	8001f8c <HAL_RCC_OscConfig+0x108>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d157      	bne.n	8001f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e242      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d106      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x74>
 8001eea:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a75      	ldr	r2, [pc, #468]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x98>
 8001f02:	4b70      	ldr	r3, [pc, #448]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6f      	ldr	r2, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6c      	ldr	r2, [pc, #432]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	4b69      	ldr	r3, [pc, #420]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a68      	ldr	r2, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a65      	ldr	r2, [pc, #404]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fc84 	bl	8001848 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff fc80 	bl	8001848 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e207      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xc0>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fc70 	bl	8001848 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fc6c 	bl	8001848 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1f3      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b51      	ldr	r3, [pc, #324]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0xe8>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9a:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x152>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1c7      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4937      	ldr	r1, [pc, #220]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	e03a      	b.n	8002062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCC_OscConfig+0x244>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fc25 	bl	8001848 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff fc21 	bl	8001848 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1a8      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4925      	ldr	r1, [pc, #148]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCC_OscConfig+0x244>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff fc04 	bl	8001848 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002044:	f7ff fc00 	bl	8001848 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e187      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d036      	beq.n	80020dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d016      	beq.n	80020a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_RCC_OscConfig+0x248>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff fbe4 	bl	8001848 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fbe0 	bl	8001848 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e167      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x200>
 80020a2:	e01b      	b.n	80020dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_OscConfig+0x248>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7ff fbcd 	bl	8001848 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	e00e      	b.n	80020d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b2:	f7ff fbc9 	bl	8001848 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d907      	bls.n	80020d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e150      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
 80020c4:	40023800 	.word	0x40023800
 80020c8:	42470000 	.word	0x42470000
 80020cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ea      	bne.n	80020b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8097 	beq.w	8002218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10f      	bne.n	800211a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b7d      	ldr	r3, [pc, #500]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a7c      	ldr	r2, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	4b77      	ldr	r3, [pc, #476]	; (80022f8 <HAL_RCC_OscConfig+0x474>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d118      	bne.n	8002158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002126:	4b74      	ldr	r3, [pc, #464]	; (80022f8 <HAL_RCC_OscConfig+0x474>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a73      	ldr	r2, [pc, #460]	; (80022f8 <HAL_RCC_OscConfig+0x474>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002132:	f7ff fb89 	bl	8001848 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213a:	f7ff fb85 	bl	8001848 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e10c      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x474>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x2ea>
 8002160:	4b64      	ldr	r3, [pc, #400]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	4a63      	ldr	r2, [pc, #396]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6713      	str	r3, [r2, #112]	; 0x70
 800216c:	e01c      	b.n	80021a8 <HAL_RCC_OscConfig+0x324>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b05      	cmp	r3, #5
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x30c>
 8002176:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a5e      	ldr	r2, [pc, #376]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
 8002182:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	4a5b      	ldr	r2, [pc, #364]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6713      	str	r3, [r2, #112]	; 0x70
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0x324>
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	6713      	str	r3, [r2, #112]	; 0x70
 800219c:	4b55      	ldr	r3, [pc, #340]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a54      	ldr	r2, [pc, #336]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80021a2:	f023 0304 	bic.w	r3, r3, #4
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d015      	beq.n	80021dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7ff fb4a 	bl	8001848 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7ff fb46 	bl	8001848 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e0cb      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	4b49      	ldr	r3, [pc, #292]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0ee      	beq.n	80021b8 <HAL_RCC_OscConfig+0x334>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021dc:	f7ff fb34 	bl	8001848 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e4:	f7ff fb30 	bl	8001848 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0b5      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fa:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1ee      	bne.n	80021e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d105      	bne.n	8002218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002216:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a1 	beq.w	8002364 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002222:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b08      	cmp	r3, #8
 800222c:	d05c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d141      	bne.n	80022ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b31      	ldr	r3, [pc, #196]	; (80022fc <HAL_RCC_OscConfig+0x478>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff fb04 	bl	8001848 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff fb00 	bl	8001848 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e087      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69da      	ldr	r2, [r3, #28]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	019b      	lsls	r3, r3, #6
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	3b01      	subs	r3, #1
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	491b      	ldr	r1, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_RCC_OscConfig+0x478>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7ff fad9 	bl	8001848 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229a:	f7ff fad5 	bl	8001848 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e05c      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x416>
 80022b8:	e054      	b.n	8002364 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_OscConfig+0x478>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fac2 	bl	8001848 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7ff fabe 	bl	8001848 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e045      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x444>
 80022e6:	e03d      	b.n	8002364 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e038      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40007000 	.word	0x40007000
 80022fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x4ec>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d028      	beq.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d121      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d11a      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002330:	4013      	ands	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	4293      	cmp	r3, r2
 800233a:	d111      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	3b01      	subs	r3, #1
 800234a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d107      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0cc      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b68      	ldr	r3, [pc, #416]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d90c      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b8      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a58      	ldr	r2, [pc, #352]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	494d      	ldr	r1, [pc, #308]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d044      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d119      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d003      	beq.n	8002432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242e:	2b03      	cmp	r3, #3
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e067      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4934      	ldr	r1, [pc, #208]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7ff f9f0 	bl	8001848 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7ff f9ec 	bl	8001848 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e04f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d20c      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e032      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4916      	ldr	r1, [pc, #88]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fa:	f000 f821 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024fe:	4602      	mov	r2, r0
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	490a      	ldr	r1, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	5ccb      	ldrb	r3, [r1, r3]
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fe68 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00
 8002530:	40023800 	.word	0x40023800
 8002534:	08004060 	.word	0x08004060
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002544:	b094      	sub	sp, #80	; 0x50
 8002546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	647b      	str	r3, [r7, #68]	; 0x44
 800254c:	2300      	movs	r3, #0
 800254e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002550:	2300      	movs	r3, #0
 8002552:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002558:	4b79      	ldr	r3, [pc, #484]	; (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d00d      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x40>
 8002564:	2b08      	cmp	r3, #8
 8002566:	f200 80e1 	bhi.w	800272c <HAL_RCC_GetSysClockFreq+0x1ec>
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x34>
 800256e:	2b04      	cmp	r3, #4
 8002570:	d003      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x3a>
 8002572:	e0db      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b73      	ldr	r3, [pc, #460]	; (8002744 <HAL_RCC_GetSysClockFreq+0x204>)
 8002576:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002578:	e0db      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800257a:	4b73      	ldr	r3, [pc, #460]	; (8002748 <HAL_RCC_GetSysClockFreq+0x208>)
 800257c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800257e:	e0d8      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002580:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002588:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258a:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d063      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002596:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	099b      	lsrs	r3, r3, #6
 800259c:	2200      	movs	r2, #0
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
 80025a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
 80025aa:	2300      	movs	r3, #0
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
 80025ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025b2:	4622      	mov	r2, r4
 80025b4:	462b      	mov	r3, r5
 80025b6:	f04f 0000 	mov.w	r0, #0
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	0159      	lsls	r1, r3, #5
 80025c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c4:	0150      	lsls	r0, r2, #5
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4621      	mov	r1, r4
 80025cc:	1a51      	subs	r1, r2, r1
 80025ce:	6139      	str	r1, [r7, #16]
 80025d0:	4629      	mov	r1, r5
 80025d2:	eb63 0301 	sbc.w	r3, r3, r1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e4:	4659      	mov	r1, fp
 80025e6:	018b      	lsls	r3, r1, #6
 80025e8:	4651      	mov	r1, sl
 80025ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ee:	4651      	mov	r1, sl
 80025f0:	018a      	lsls	r2, r1, #6
 80025f2:	4651      	mov	r1, sl
 80025f4:	ebb2 0801 	subs.w	r8, r2, r1
 80025f8:	4659      	mov	r1, fp
 80025fa:	eb63 0901 	sbc.w	r9, r3, r1
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800260e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002612:	4690      	mov	r8, r2
 8002614:	4699      	mov	r9, r3
 8002616:	4623      	mov	r3, r4
 8002618:	eb18 0303 	adds.w	r3, r8, r3
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	462b      	mov	r3, r5
 8002620:	eb49 0303 	adc.w	r3, r9, r3
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002632:	4629      	mov	r1, r5
 8002634:	024b      	lsls	r3, r1, #9
 8002636:	4621      	mov	r1, r4
 8002638:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800263c:	4621      	mov	r1, r4
 800263e:	024a      	lsls	r2, r1, #9
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002646:	2200      	movs	r2, #0
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
 800264a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800264c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002650:	f7fd fdc2 	bl	80001d8 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4613      	mov	r3, r2
 800265a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800265c:	e058      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	2200      	movs	r2, #0
 8002666:	4618      	mov	r0, r3
 8002668:	4611      	mov	r1, r2
 800266a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002678:	4642      	mov	r2, r8
 800267a:	464b      	mov	r3, r9
 800267c:	f04f 0000 	mov.w	r0, #0
 8002680:	f04f 0100 	mov.w	r1, #0
 8002684:	0159      	lsls	r1, r3, #5
 8002686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268a:	0150      	lsls	r0, r2, #5
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4641      	mov	r1, r8
 8002692:	ebb2 0a01 	subs.w	sl, r2, r1
 8002696:	4649      	mov	r1, r9
 8002698:	eb63 0b01 	sbc.w	fp, r3, r1
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026b0:	ebb2 040a 	subs.w	r4, r2, sl
 80026b4:	eb63 050b 	sbc.w	r5, r3, fp
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	00eb      	lsls	r3, r5, #3
 80026c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c6:	00e2      	lsls	r2, r4, #3
 80026c8:	4614      	mov	r4, r2
 80026ca:	461d      	mov	r5, r3
 80026cc:	4643      	mov	r3, r8
 80026ce:	18e3      	adds	r3, r4, r3
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	464b      	mov	r3, r9
 80026d4:	eb45 0303 	adc.w	r3, r5, r3
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e6:	4629      	mov	r1, r5
 80026e8:	028b      	lsls	r3, r1, #10
 80026ea:	4621      	mov	r1, r4
 80026ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f0:	4621      	mov	r1, r4
 80026f2:	028a      	lsls	r2, r1, #10
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fa:	2200      	movs	r2, #0
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	61fa      	str	r2, [r7, #28]
 8002700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002704:	f7fd fd68 	bl	80001d8 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4613      	mov	r3, r2
 800270e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	3301      	adds	r3, #1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800272a:	e002      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetSysClockFreq+0x204>)
 800272e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002734:	4618      	mov	r0, r3
 8002736:	3750      	adds	r7, #80	; 0x50
 8002738:	46bd      	mov	sp, r7
 800273a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	00f42400 	.word	0x00f42400
 8002748:	007a1200 	.word	0x007a1200

0800274c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_RCC_GetHCLKFreq+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000000 	.word	0x20000000

08002764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002768:	f7ff fff0 	bl	800274c <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	0a9b      	lsrs	r3, r3, #10
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	; (8002788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	08004070 	.word	0x08004070

0800278c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002790:	f7ff ffdc 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0b5b      	lsrs	r3, r3, #13
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	; (80027b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08004070 	.word	0x08004070

080027b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	220f      	movs	r2, #15
 80027c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	08db      	lsrs	r3, r3, #3
 80027ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <HAL_RCC_GetClockConfig+0x60>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0207 	and.w	r2, r3, #7
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40023c00 	.word	0x40023c00

08002818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e041      	b.n	80028ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe fe58 	bl	80014f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3304      	adds	r3, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f000 fab6 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d001      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e044      	b.n	800295a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <HAL_TIM_Base_Start_IT+0xb0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d018      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x6c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fa:	d013      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x6c>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_TIM_Base_Start_IT+0xb4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00e      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x6c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_TIM_Base_Start_IT+0xb8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x6c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_TIM_Base_Start_IT+0xbc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x6c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_TIM_Base_Start_IT+0xc0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d111      	bne.n	8002948 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b06      	cmp	r3, #6
 8002934:	d010      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	e007      	b.n	8002958 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40010000 	.word	0x40010000
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40000c00 	.word	0x40000c00
 8002978:	40014000 	.word	0x40014000

0800297c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a1a      	ldr	r2, [r3, #32]
 800299a:	f241 1311 	movw	r3, #4369	; 0x1111
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10f      	bne.n	80029c4 <HAL_TIM_Base_Stop_IT+0x48>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6a1a      	ldr	r2, [r3, #32]
 80029aa:	f240 4344 	movw	r3, #1092	; 0x444
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <HAL_TIM_Base_Stop_IT+0x48>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d122      	bne.n	8002a36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d11b      	bne.n	8002a36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f06f 0202 	mvn.w	r2, #2
 8002a06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f9b5 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002a22:	e005      	b.n	8002a30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f9a7 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9b8 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d122      	bne.n	8002a8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d11b      	bne.n	8002a8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f06f 0204 	mvn.w	r2, #4
 8002a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f98b 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002a76:	e005      	b.n	8002a84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f97d 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f98e 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d122      	bne.n	8002ade <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d11b      	bne.n	8002ade <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f06f 0208 	mvn.w	r2, #8
 8002aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f961 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002aca:	e005      	b.n	8002ad8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f953 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f964 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d122      	bne.n	8002b32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d11b      	bne.n	8002b32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f06f 0210 	mvn.w	r2, #16
 8002b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2208      	movs	r2, #8
 8002b08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f937 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002b1e:	e005      	b.n	8002b2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f929 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f93a 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d10e      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d107      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f06f 0201 	mvn.w	r2, #1
 8002b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7fe faf7 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b68:	2b80      	cmp	r3, #128	; 0x80
 8002b6a:	d10e      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d107      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fab1 	bl	80030ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b40      	cmp	r3, #64	; 0x40
 8002b96:	d10e      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b40      	cmp	r3, #64	; 0x40
 8002ba4:	d107      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f8ff 	bl	8002db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d10e      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d107      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f06f 0220 	mvn.w	r2, #32
 8002bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fa7b 	bl	80030d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_ConfigClockSource+0x1c>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0b4      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x186>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c2c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3e:	d03e      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0xd4>
 8002c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c44:	f200 8087 	bhi.w	8002d56 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4c:	f000 8086 	beq.w	8002d5c <HAL_TIM_ConfigClockSource+0x172>
 8002c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c54:	d87f      	bhi.n	8002d56 <HAL_TIM_ConfigClockSource+0x16c>
 8002c56:	2b70      	cmp	r3, #112	; 0x70
 8002c58:	d01a      	beq.n	8002c90 <HAL_TIM_ConfigClockSource+0xa6>
 8002c5a:	2b70      	cmp	r3, #112	; 0x70
 8002c5c:	d87b      	bhi.n	8002d56 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5e:	2b60      	cmp	r3, #96	; 0x60
 8002c60:	d050      	beq.n	8002d04 <HAL_TIM_ConfigClockSource+0x11a>
 8002c62:	2b60      	cmp	r3, #96	; 0x60
 8002c64:	d877      	bhi.n	8002d56 <HAL_TIM_ConfigClockSource+0x16c>
 8002c66:	2b50      	cmp	r3, #80	; 0x50
 8002c68:	d03c      	beq.n	8002ce4 <HAL_TIM_ConfigClockSource+0xfa>
 8002c6a:	2b50      	cmp	r3, #80	; 0x50
 8002c6c:	d873      	bhi.n	8002d56 <HAL_TIM_ConfigClockSource+0x16c>
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d058      	beq.n	8002d24 <HAL_TIM_ConfigClockSource+0x13a>
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d86f      	bhi.n	8002d56 <HAL_TIM_ConfigClockSource+0x16c>
 8002c76:	2b30      	cmp	r3, #48	; 0x30
 8002c78:	d064      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0x15a>
 8002c7a:	2b30      	cmp	r3, #48	; 0x30
 8002c7c:	d86b      	bhi.n	8002d56 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d060      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0x15a>
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d867      	bhi.n	8002d56 <HAL_TIM_ConfigClockSource+0x16c>
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d05c      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0x15a>
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d05a      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0x15a>
 8002c8e:	e062      	b.n	8002d56 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6899      	ldr	r1, [r3, #8]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f000 f98c 	bl	8002fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	609a      	str	r2, [r3, #8]
      break;
 8002cbc:	e04f      	b.n	8002d5e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6899      	ldr	r1, [r3, #8]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f000 f975 	bl	8002fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce0:	609a      	str	r2, [r3, #8]
      break;
 8002ce2:	e03c      	b.n	8002d5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f000 f8e9 	bl	8002ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2150      	movs	r1, #80	; 0x50
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f942 	bl	8002f86 <TIM_ITRx_SetConfig>
      break;
 8002d02:	e02c      	b.n	8002d5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	461a      	mov	r2, r3
 8002d12:	f000 f908 	bl	8002f26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2160      	movs	r1, #96	; 0x60
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 f932 	bl	8002f86 <TIM_ITRx_SetConfig>
      break;
 8002d22:	e01c      	b.n	8002d5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	461a      	mov	r2, r3
 8002d32:	f000 f8c9 	bl	8002ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2140      	movs	r1, #64	; 0x40
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 f922 	bl	8002f86 <TIM_ITRx_SetConfig>
      break;
 8002d42:	e00c      	b.n	8002d5e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 f919 	bl	8002f86 <TIM_ITRx_SetConfig>
      break;
 8002d54:	e003      	b.n	8002d5e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5a:	e000      	b.n	8002d5e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a34      	ldr	r2, [pc, #208]	; (8002eac <TIM_Base_SetConfig+0xe4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00f      	beq.n	8002e00 <TIM_Base_SetConfig+0x38>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d00b      	beq.n	8002e00 <TIM_Base_SetConfig+0x38>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a31      	ldr	r2, [pc, #196]	; (8002eb0 <TIM_Base_SetConfig+0xe8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <TIM_Base_SetConfig+0x38>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a30      	ldr	r2, [pc, #192]	; (8002eb4 <TIM_Base_SetConfig+0xec>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d003      	beq.n	8002e00 <TIM_Base_SetConfig+0x38>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a2f      	ldr	r2, [pc, #188]	; (8002eb8 <TIM_Base_SetConfig+0xf0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d108      	bne.n	8002e12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <TIM_Base_SetConfig+0xe4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01b      	beq.n	8002e52 <TIM_Base_SetConfig+0x8a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d017      	beq.n	8002e52 <TIM_Base_SetConfig+0x8a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a22      	ldr	r2, [pc, #136]	; (8002eb0 <TIM_Base_SetConfig+0xe8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <TIM_Base_SetConfig+0x8a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <TIM_Base_SetConfig+0xec>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00f      	beq.n	8002e52 <TIM_Base_SetConfig+0x8a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <TIM_Base_SetConfig+0xf0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_Base_SetConfig+0x8a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <TIM_Base_SetConfig+0xf4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <TIM_Base_SetConfig+0x8a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <TIM_Base_SetConfig+0xf8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_Base_SetConfig+0x8a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <TIM_Base_SetConfig+0xfc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d108      	bne.n	8002e64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <TIM_Base_SetConfig+0xe4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d103      	bne.n	8002e98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	40000c00 	.word	0x40000c00
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800

08002ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f023 0201 	bic.w	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f023 030a 	bic.w	r3, r3, #10
 8002f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b087      	sub	sp, #28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0210 	bic.w	r2, r3, #16
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	031b      	lsls	r3, r3, #12
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f043 0307 	orr.w	r3, r3, #7
 8002fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	021a      	lsls	r2, r3, #8
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	609a      	str	r2, [r3, #8]
}
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003010:	2302      	movs	r3, #2
 8003012:	e050      	b.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d018      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d013      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d10c      	bne.n	80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	4313      	orrs	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40000c00 	.word	0x40000c00
 80030d4:	40014000 	.word	0x40014000

080030d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e03f      	b.n	8003192 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe fa92 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2224      	movs	r2, #36	; 0x24
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fcdf 	bl	8003b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	4613      	mov	r3, r2
 80031a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d11d      	bne.n	80031f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_UART_Receive_IT+0x26>
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e016      	b.n	80031f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Receive_IT+0x38>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e00f      	b.n	80031f2 <HAL_UART_Receive_IT+0x58>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fab6 	bl	8003758 <UART_Start_Receive_IT>
 80031ec:	4603      	mov	r3, r0
 80031ee:	e000      	b.n	80031f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b0ba      	sub	sp, #232	; 0xe8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800322e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800323a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10f      	bne.n	8003262 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_UART_IRQHandler+0x66>
 800324e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fb99 	bl	8003992 <UART_Receive_IT>
      return;
 8003260:	e256      	b.n	8003710 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80de 	beq.w	8003428 <HAL_UART_IRQHandler+0x22c>
 800326c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800327c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80d1 	beq.w	8003428 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HAL_UART_IRQHandler+0xae>
 8003292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_UART_IRQHandler+0xd2>
 80032b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f043 0202 	orr.w	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <HAL_UART_IRQHandler+0xf6>
 80032da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f043 0204 	orr.w	r2, r3, #4
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d011      	beq.n	8003322 <HAL_UART_IRQHandler+0x126>
 80032fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d105      	bne.n	8003316 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800330a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f043 0208 	orr.w	r2, r3, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 81ed 	beq.w	8003706 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800332c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_UART_IRQHandler+0x14e>
 8003338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fb24 	bl	8003992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <HAL_UART_IRQHandler+0x17a>
 800336e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d04f      	beq.n	8003416 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fa2c 	bl	80037d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d141      	bne.n	800340e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3314      	adds	r3, #20
 8003390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1d9      	bne.n	800338a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d013      	beq.n	8003406 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	4a7d      	ldr	r2, [pc, #500]	; (80035d8 <HAL_UART_IRQHandler+0x3dc>)
 80033e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe fb8a 	bl	8001b04 <HAL_DMA_Abort_IT>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003400:	4610      	mov	r0, r2
 8003402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	e00e      	b.n	8003424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f990 	bl	800372c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	e00a      	b.n	8003424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f98c 	bl	800372c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	e006      	b.n	8003424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f988 	bl	800372c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003422:	e170      	b.n	8003706 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	bf00      	nop
    return;
 8003426:	e16e      	b.n	8003706 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	2b01      	cmp	r3, #1
 800342e:	f040 814a 	bne.w	80036c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8143 	beq.w	80036c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 813c 	beq.w	80036c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	f040 80b4 	bne.w	80035dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8140 	beq.w	800370a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800348e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003492:	429a      	cmp	r2, r3
 8003494:	f080 8139 	bcs.w	800370a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800349e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034aa:	f000 8088 	beq.w	80035be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	330c      	adds	r3, #12
 80034d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1d9      	bne.n	80034ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800350a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800351e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003522:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003526:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e1      	bne.n	80034fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3314      	adds	r3, #20
 800353c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800354c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800355a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800355c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003560:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e3      	bne.n	8003536 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800358c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80035a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80035a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e3      	bne.n	800357c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe fa33 	bl	8001a24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8b6 	bl	8003740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035d4:	e099      	b.n	800370a <HAL_UART_IRQHandler+0x50e>
 80035d6:	bf00      	nop
 80035d8:	0800389b 	.word	0x0800389b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 808b 	beq.w	800370e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80035f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8086 	beq.w	800370e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003626:	647a      	str	r2, [r7, #68]	; 0x44
 8003628:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800362c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e3      	bne.n	8003602 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3314      	adds	r3, #20
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	623b      	str	r3, [r7, #32]
   return(result);
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3314      	adds	r3, #20
 800365a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800365e:	633a      	str	r2, [r7, #48]	; 0x30
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e3      	bne.n	800363a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0310 	bic.w	r3, r3, #16
 8003696:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80036a4:	61fa      	str	r2, [r7, #28]
 80036a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	69b9      	ldr	r1, [r7, #24]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	617b      	str	r3, [r7, #20]
   return(result);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e3      	bne.n	8003680 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f83e 	bl	8003740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036c4:	e023      	b.n	800370e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_UART_IRQHandler+0x4ea>
 80036d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8ef 	bl	80038c2 <UART_Transmit_IT>
    return;
 80036e4:	e014      	b.n	8003710 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00e      	beq.n	8003710 <HAL_UART_IRQHandler+0x514>
 80036f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f92f 	bl	8003962 <UART_EndTransmit_IT>
    return;
 8003704:	e004      	b.n	8003710 <HAL_UART_IRQHandler+0x514>
    return;
 8003706:	bf00      	nop
 8003708:	e002      	b.n	8003710 <HAL_UART_IRQHandler+0x514>
      return;
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <HAL_UART_IRQHandler+0x514>
      return;
 800370e:	bf00      	nop
  }
}
 8003710:	37e8      	adds	r7, #232	; 0xe8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop

08003718 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2222      	movs	r2, #34	; 0x22
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0220 	orr.w	r2, r2, #32
 80037c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b095      	sub	sp, #84	; 0x54
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037fc:	643a      	str	r2, [r7, #64]	; 0x40
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e5      	bne.n	80037dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3314      	adds	r3, #20
 8003816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	64bb      	str	r3, [r7, #72]	; 0x48
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e5      	bne.n	8003810 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	2b01      	cmp	r3, #1
 800384a:	d119      	bne.n	8003880 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	60bb      	str	r3, [r7, #8]
   return(result);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f023 0310 	bic.w	r3, r3, #16
 8003862:	647b      	str	r3, [r7, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800386c:	61ba      	str	r2, [r7, #24]
 800386e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6979      	ldr	r1, [r7, #20]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	613b      	str	r3, [r7, #16]
   return(result);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e5      	bne.n	800384c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800388e:	bf00      	nop
 8003890:	3754      	adds	r7, #84	; 0x54
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7ff ff39 	bl	800372c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b21      	cmp	r3, #33	; 0x21
 80038d4:	d13e      	bne.n	8003954 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d114      	bne.n	800390a <UART_Transmit_IT+0x48>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d110      	bne.n	800390a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	1c9a      	adds	r2, r3, #2
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	621a      	str	r2, [r3, #32]
 8003908:	e008      	b.n	800391c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6211      	str	r1, [r2, #32]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4619      	mov	r1, r3
 800392a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800393e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800394e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fec8 	bl	8003718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b08c      	sub	sp, #48	; 0x30
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b22      	cmp	r3, #34	; 0x22
 80039a4:	f040 80ab 	bne.w	8003afe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d117      	bne.n	80039e2 <UART_Receive_IT+0x50>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d113      	bne.n	80039e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	1c9a      	adds	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
 80039e0:	e026      	b.n	8003a30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f4:	d007      	beq.n	8003a06 <UART_Receive_IT+0x74>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <UART_Receive_IT+0x82>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e008      	b.n	8003a26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d15a      	bne.n	8003afa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0220 	bic.w	r2, r2, #32
 8003a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d135      	bne.n	8003af0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	613b      	str	r3, [r7, #16]
   return(result);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f023 0310 	bic.w	r3, r3, #16
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aaa:	623a      	str	r2, [r7, #32]
 8003aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	69f9      	ldr	r1, [r7, #28]
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d10a      	bne.n	8003ae2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fe29 	bl	8003740 <HAL_UARTEx_RxEventCallback>
 8003aee:	e002      	b.n	8003af6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fd fb13 	bl	800111c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e002      	b.n	8003b00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3730      	adds	r7, #48	; 0x30
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b0c:	b0c0      	sub	sp, #256	; 0x100
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	68d9      	ldr	r1, [r3, #12]
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	ea40 0301 	orr.w	r3, r0, r1
 8003b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b60:	f021 010c 	bic.w	r1, r1, #12
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b82:	6999      	ldr	r1, [r3, #24]
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	ea40 0301 	orr.w	r3, r0, r1
 8003b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b8f      	ldr	r3, [pc, #572]	; (8003dd4 <UART_SetConfig+0x2cc>)
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d005      	beq.n	8003ba8 <UART_SetConfig+0xa0>
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b8d      	ldr	r3, [pc, #564]	; (8003dd8 <UART_SetConfig+0x2d0>)
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d104      	bne.n	8003bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba8:	f7fe fdf0 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 8003bac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bb0:	e003      	b.n	8003bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bb2:	f7fe fdd7 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 8003bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc4:	f040 810c 	bne.w	8003de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bda:	4622      	mov	r2, r4
 8003bdc:	462b      	mov	r3, r5
 8003bde:	1891      	adds	r1, r2, r2
 8003be0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003be2:	415b      	adcs	r3, r3
 8003be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bea:	4621      	mov	r1, r4
 8003bec:	eb12 0801 	adds.w	r8, r2, r1
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	eb43 0901 	adc.w	r9, r3, r1
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c0a:	4690      	mov	r8, r2
 8003c0c:	4699      	mov	r9, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	eb18 0303 	adds.w	r3, r8, r3
 8003c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c18:	462b      	mov	r3, r5
 8003c1a:	eb49 0303 	adc.w	r3, r9, r3
 8003c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c36:	460b      	mov	r3, r1
 8003c38:	18db      	adds	r3, r3, r3
 8003c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	eb42 0303 	adc.w	r3, r2, r3
 8003c42:	657b      	str	r3, [r7, #84]	; 0x54
 8003c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c4c:	f7fc fac4 	bl	80001d8 <__aeabi_uldivmod>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4b61      	ldr	r3, [pc, #388]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003c56:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	011c      	lsls	r4, r3, #4
 8003c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c80:	4641      	mov	r1, r8
 8003c82:	eb12 0a01 	adds.w	sl, r2, r1
 8003c86:	4649      	mov	r1, r9
 8003c88:	eb43 0b01 	adc.w	fp, r3, r1
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ca0:	4692      	mov	sl, r2
 8003ca2:	469b      	mov	fp, r3
 8003ca4:	4643      	mov	r3, r8
 8003ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8003caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	18db      	adds	r3, r3, r3
 8003cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	eb42 0303 	adc.w	r3, r2, r3
 8003cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ce2:	f7fc fa79 	bl	80001d8 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003cee:	fba3 2301 	umull	r2, r3, r3, r1
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2264      	movs	r2, #100	; 0x64
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	1acb      	subs	r3, r1, r3
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003d04:	fba3 2302 	umull	r2, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d10:	441c      	add	r4, r3
 8003d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d24:	4642      	mov	r2, r8
 8003d26:	464b      	mov	r3, r9
 8003d28:	1891      	adds	r1, r2, r2
 8003d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d2c:	415b      	adcs	r3, r3
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d34:	4641      	mov	r1, r8
 8003d36:	1851      	adds	r1, r2, r1
 8003d38:	6339      	str	r1, [r7, #48]	; 0x30
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	414b      	adcs	r3, r1
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	00cb      	lsls	r3, r1, #3
 8003d50:	4651      	mov	r1, sl
 8003d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d56:	4651      	mov	r1, sl
 8003d58:	00ca      	lsls	r2, r1, #3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4642      	mov	r2, r8
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d68:	464b      	mov	r3, r9
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d88:	460b      	mov	r3, r1
 8003d8a:	18db      	adds	r3, r3, r3
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8e:	4613      	mov	r3, r2
 8003d90:	eb42 0303 	adc.w	r3, r2, r3
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d9e:	f7fc fa1b 	bl	80001d8 <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003da8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	2164      	movs	r1, #100	; 0x64
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	3332      	adds	r3, #50	; 0x32
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	f003 0207 	and.w	r2, r3, #7
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4422      	add	r2, r4
 8003dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dd0:	e105      	b.n	8003fde <UART_SetConfig+0x4d6>
 8003dd2:	bf00      	nop
 8003dd4:	40011000 	.word	0x40011000
 8003dd8:	40011400 	.word	0x40011400
 8003ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003df2:	4642      	mov	r2, r8
 8003df4:	464b      	mov	r3, r9
 8003df6:	1891      	adds	r1, r2, r2
 8003df8:	6239      	str	r1, [r7, #32]
 8003dfa:	415b      	adcs	r3, r3
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e02:	4641      	mov	r1, r8
 8003e04:	1854      	adds	r4, r2, r1
 8003e06:	4649      	mov	r1, r9
 8003e08:	eb43 0501 	adc.w	r5, r3, r1
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	00eb      	lsls	r3, r5, #3
 8003e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1a:	00e2      	lsls	r2, r4, #3
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	461d      	mov	r5, r3
 8003e20:	4643      	mov	r3, r8
 8003e22:	18e3      	adds	r3, r4, r3
 8003e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e28:	464b      	mov	r3, r9
 8003e2a:	eb45 0303 	adc.w	r3, r5, r3
 8003e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e4e:	4629      	mov	r1, r5
 8003e50:	008b      	lsls	r3, r1, #2
 8003e52:	4621      	mov	r1, r4
 8003e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e58:	4621      	mov	r1, r4
 8003e5a:	008a      	lsls	r2, r1, #2
 8003e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e60:	f7fc f9ba 	bl	80001d8 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4b60      	ldr	r3, [pc, #384]	; (8003fec <UART_SetConfig+0x4e4>)
 8003e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	011c      	lsls	r4, r3, #4
 8003e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e84:	4642      	mov	r2, r8
 8003e86:	464b      	mov	r3, r9
 8003e88:	1891      	adds	r1, r2, r2
 8003e8a:	61b9      	str	r1, [r7, #24]
 8003e8c:	415b      	adcs	r3, r3
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e94:	4641      	mov	r1, r8
 8003e96:	1851      	adds	r1, r2, r1
 8003e98:	6139      	str	r1, [r7, #16]
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	414b      	adcs	r3, r1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eac:	4659      	mov	r1, fp
 8003eae:	00cb      	lsls	r3, r1, #3
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	00ca      	lsls	r2, r1, #3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	189b      	adds	r3, r3, r2
 8003ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ec8:	464b      	mov	r3, r9
 8003eca:	460a      	mov	r2, r1
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ede:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003eec:	4649      	mov	r1, r9
 8003eee:	008b      	lsls	r3, r1, #2
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	008a      	lsls	r2, r1, #2
 8003efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003efe:	f7fc f96b 	bl	80001d8 <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4b39      	ldr	r3, [pc, #228]	; (8003fec <UART_SetConfig+0x4e4>)
 8003f08:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	2164      	movs	r1, #100	; 0x64
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	3332      	adds	r3, #50	; 0x32
 8003f1a:	4a34      	ldr	r2, [pc, #208]	; (8003fec <UART_SetConfig+0x4e4>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f26:	441c      	add	r4, r3
 8003f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f30:	677a      	str	r2, [r7, #116]	; 0x74
 8003f32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f36:	4642      	mov	r2, r8
 8003f38:	464b      	mov	r3, r9
 8003f3a:	1891      	adds	r1, r2, r2
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f46:	4641      	mov	r1, r8
 8003f48:	1851      	adds	r1, r2, r1
 8003f4a:	6039      	str	r1, [r7, #0]
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	414b      	adcs	r3, r1
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f5e:	4659      	mov	r1, fp
 8003f60:	00cb      	lsls	r3, r1, #3
 8003f62:	4651      	mov	r1, sl
 8003f64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f68:	4651      	mov	r1, sl
 8003f6a:	00ca      	lsls	r2, r1, #3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4603      	mov	r3, r0
 8003f72:	4642      	mov	r2, r8
 8003f74:	189b      	adds	r3, r3, r2
 8003f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f78:	464b      	mov	r3, r9
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f8c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	008b      	lsls	r3, r1, #2
 8003f9e:	4641      	mov	r1, r8
 8003fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	008a      	lsls	r2, r1, #2
 8003fa8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fac:	f7fc f914 	bl	80001d8 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <UART_SetConfig+0x4e4>)
 8003fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2164      	movs	r1, #100	; 0x64
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	3332      	adds	r3, #50	; 0x32
 8003fc8:	4a08      	ldr	r2, [pc, #32]	; (8003fec <UART_SetConfig+0x4e4>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4422      	add	r2, r4
 8003fdc:	609a      	str	r2, [r3, #8]
}
 8003fde:	bf00      	nop
 8003fe0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fea:	bf00      	nop
 8003fec:	51eb851f 	.word	0x51eb851f

08003ff0 <__libc_init_array>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	4d0d      	ldr	r5, [pc, #52]	; (8004028 <__libc_init_array+0x38>)
 8003ff4:	4c0d      	ldr	r4, [pc, #52]	; (800402c <__libc_init_array+0x3c>)
 8003ff6:	1b64      	subs	r4, r4, r5
 8003ff8:	10a4      	asrs	r4, r4, #2
 8003ffa:	2600      	movs	r6, #0
 8003ffc:	42a6      	cmp	r6, r4
 8003ffe:	d109      	bne.n	8004014 <__libc_init_array+0x24>
 8004000:	4d0b      	ldr	r5, [pc, #44]	; (8004030 <__libc_init_array+0x40>)
 8004002:	4c0c      	ldr	r4, [pc, #48]	; (8004034 <__libc_init_array+0x44>)
 8004004:	f000 f820 	bl	8004048 <_init>
 8004008:	1b64      	subs	r4, r4, r5
 800400a:	10a4      	asrs	r4, r4, #2
 800400c:	2600      	movs	r6, #0
 800400e:	42a6      	cmp	r6, r4
 8004010:	d105      	bne.n	800401e <__libc_init_array+0x2e>
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	f855 3b04 	ldr.w	r3, [r5], #4
 8004018:	4798      	blx	r3
 800401a:	3601      	adds	r6, #1
 800401c:	e7ee      	b.n	8003ffc <__libc_init_array+0xc>
 800401e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004022:	4798      	blx	r3
 8004024:	3601      	adds	r6, #1
 8004026:	e7f2      	b.n	800400e <__libc_init_array+0x1e>
 8004028:	08004080 	.word	0x08004080
 800402c:	08004080 	.word	0x08004080
 8004030:	08004080 	.word	0x08004080
 8004034:	08004084 	.word	0x08004084

08004038 <memset>:
 8004038:	4402      	add	r2, r0
 800403a:	4603      	mov	r3, r0
 800403c:	4293      	cmp	r3, r2
 800403e:	d100      	bne.n	8004042 <memset+0xa>
 8004040:	4770      	bx	lr
 8004042:	f803 1b01 	strb.w	r1, [r3], #1
 8004046:	e7f9      	b.n	800403c <memset+0x4>

08004048 <_init>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr

08004054 <_fini>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr
