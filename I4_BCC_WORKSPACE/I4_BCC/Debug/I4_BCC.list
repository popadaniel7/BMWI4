
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f720  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  0800f8c0  0800f8c0  0001f8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010160  08010160  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08010160  08010160  00020160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010168  08010168  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010168  08010168  00020168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801016c  0801016c  0002016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08010170  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054e0  20000074  080101e4  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005554  080101e4  00035554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f92c  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d45  00000000  00000000  0005f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002670  00000000  00000000  00066718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023a0  00000000  00000000  00068d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217ab  00000000  00000000  0006b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b5ce  00000000  00000000  0008c8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b681e  00000000  00000000  000c7ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e6bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a018  00000000  00000000  0017e710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f8a8 	.word	0x0800f8a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800f8a8 	.word	0x0800f8a8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <BtcRxVal>:
	return E_OK;

}

StdReturnType BtcRxVal()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

	switch(BtcReceivedDataOnBluetooth)
 80004e8:	4ba6      	ldr	r3, [pc, #664]	; (8000784 <BtcRxVal+0x2a0>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	3b01      	subs	r3, #1
 80004ee:	2b66      	cmp	r3, #102	; 0x66
 80004f0:	f200 8140 	bhi.w	8000774 <BtcRxVal+0x290>
 80004f4:	a201      	add	r2, pc, #4	; (adr r2, 80004fc <BtcRxVal+0x18>)
 80004f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fa:	bf00      	nop
 80004fc:	080006c9 	.word	0x080006c9
 8000500:	080006d1 	.word	0x080006d1
 8000504:	080006d9 	.word	0x080006d9
 8000508:	080006e1 	.word	0x080006e1
 800050c:	080006e9 	.word	0x080006e9
 8000510:	080006f1 	.word	0x080006f1
 8000514:	080006f9 	.word	0x080006f9
 8000518:	08000707 	.word	0x08000707
 800051c:	0800070f 	.word	0x0800070f
 8000520:	0800071d 	.word	0x0800071d
 8000524:	08000725 	.word	0x08000725
 8000528:	0800072d 	.word	0x0800072d
 800052c:	08000735 	.word	0x08000735
 8000530:	0800073d 	.word	0x0800073d
 8000534:	08000745 	.word	0x08000745
 8000538:	0800074d 	.word	0x0800074d
 800053c:	08000755 	.word	0x08000755
 8000540:	0800075d 	.word	0x0800075d
 8000544:	08000765 	.word	0x08000765
 8000548:	0800076d 	.word	0x0800076d
 800054c:	08000699 	.word	0x08000699
 8000550:	080006a1 	.word	0x080006a1
 8000554:	08000775 	.word	0x08000775
 8000558:	08000775 	.word	0x08000775
 800055c:	08000775 	.word	0x08000775
 8000560:	08000775 	.word	0x08000775
 8000564:	08000775 	.word	0x08000775
 8000568:	08000775 	.word	0x08000775
 800056c:	08000775 	.word	0x08000775
 8000570:	08000775 	.word	0x08000775
 8000574:	08000775 	.word	0x08000775
 8000578:	08000775 	.word	0x08000775
 800057c:	08000775 	.word	0x08000775
 8000580:	08000775 	.word	0x08000775
 8000584:	08000775 	.word	0x08000775
 8000588:	08000775 	.word	0x08000775
 800058c:	08000775 	.word	0x08000775
 8000590:	08000775 	.word	0x08000775
 8000594:	08000775 	.word	0x08000775
 8000598:	08000775 	.word	0x08000775
 800059c:	08000775 	.word	0x08000775
 80005a0:	08000775 	.word	0x08000775
 80005a4:	08000775 	.word	0x08000775
 80005a8:	08000775 	.word	0x08000775
 80005ac:	08000775 	.word	0x08000775
 80005b0:	08000775 	.word	0x08000775
 80005b4:	08000775 	.word	0x08000775
 80005b8:	08000775 	.word	0x08000775
 80005bc:	08000775 	.word	0x08000775
 80005c0:	08000775 	.word	0x08000775
 80005c4:	08000775 	.word	0x08000775
 80005c8:	08000775 	.word	0x08000775
 80005cc:	08000775 	.word	0x08000775
 80005d0:	08000775 	.word	0x08000775
 80005d4:	08000775 	.word	0x08000775
 80005d8:	08000775 	.word	0x08000775
 80005dc:	08000775 	.word	0x08000775
 80005e0:	08000775 	.word	0x08000775
 80005e4:	08000775 	.word	0x08000775
 80005e8:	08000775 	.word	0x08000775
 80005ec:	08000775 	.word	0x08000775
 80005f0:	08000775 	.word	0x08000775
 80005f4:	08000775 	.word	0x08000775
 80005f8:	08000775 	.word	0x08000775
 80005fc:	08000775 	.word	0x08000775
 8000600:	08000775 	.word	0x08000775
 8000604:	08000775 	.word	0x08000775
 8000608:	08000775 	.word	0x08000775
 800060c:	08000775 	.word	0x08000775
 8000610:	08000775 	.word	0x08000775
 8000614:	08000775 	.word	0x08000775
 8000618:	08000775 	.word	0x08000775
 800061c:	08000775 	.word	0x08000775
 8000620:	08000775 	.word	0x08000775
 8000624:	08000775 	.word	0x08000775
 8000628:	08000775 	.word	0x08000775
 800062c:	08000775 	.word	0x08000775
 8000630:	08000775 	.word	0x08000775
 8000634:	08000775 	.word	0x08000775
 8000638:	08000775 	.word	0x08000775
 800063c:	08000775 	.word	0x08000775
 8000640:	08000775 	.word	0x08000775
 8000644:	08000775 	.word	0x08000775
 8000648:	08000775 	.word	0x08000775
 800064c:	08000775 	.word	0x08000775
 8000650:	08000775 	.word	0x08000775
 8000654:	08000775 	.word	0x08000775
 8000658:	08000775 	.word	0x08000775
 800065c:	08000775 	.word	0x08000775
 8000660:	08000775 	.word	0x08000775
 8000664:	08000775 	.word	0x08000775
 8000668:	08000775 	.word	0x08000775
 800066c:	08000775 	.word	0x08000775
 8000670:	08000775 	.word	0x08000775
 8000674:	08000775 	.word	0x08000775
 8000678:	08000775 	.word	0x08000775
 800067c:	08000775 	.word	0x08000775
 8000680:	08000775 	.word	0x08000775
 8000684:	08000775 	.word	0x08000775
 8000688:	080006a9 	.word	0x080006a9
 800068c:	080006b1 	.word	0x080006b1
 8000690:	080006b9 	.word	0x080006b9
 8000694:	080006c1 	.word	0x080006c1
	{

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			Btc_ReverseLight = STD_HIGH;
 8000698:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <BtcRxVal+0x2a4>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]

			break;
 800069e:	e06a      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			Btc_ReverseLight = STD_LOW;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <BtcRxVal+0x2a4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]

			break;
 80006a6:	e066      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 80006a8:	4b38      	ldr	r3, [pc, #224]	; (800078c <BtcRxVal+0x2a8>)
 80006aa:	2264      	movs	r2, #100	; 0x64
 80006ac:	701a      	strb	r2, [r3, #0]

			break;
 80006ae:	e062      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 80006b0:	4b36      	ldr	r3, [pc, #216]	; (800078c <BtcRxVal+0x2a8>)
 80006b2:	2265      	movs	r2, #101	; 0x65
 80006b4:	701a      	strb	r2, [r3, #0]

			break;
 80006b6:	e05e      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <BtcRxVal+0x2a8>)
 80006ba:	2266      	movs	r2, #102	; 0x66
 80006bc:	701a      	strb	r2, [r3, #0]

			break;
 80006be:	e05a      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80006c0:	4b32      	ldr	r3, [pc, #200]	; (800078c <BtcRxVal+0x2a8>)
 80006c2:	2267      	movs	r2, #103	; 0x67
 80006c4:	701a      	strb	r2, [r3, #0]

			break;
 80006c6:	e056      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <BtcRxVal+0x2ac>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]

			break;
 80006ce:	e052      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80006d0:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <BtcRxVal+0x2ac>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]

			break;
 80006d6:	e04e      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80006d8:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <BtcRxVal+0x2b0>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]

			break;
 80006de:	e04a      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <BtcRxVal+0x2b0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]

			break;
 80006e6:	e046      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80006e8:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <BtcRxVal+0x2b4>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]

			break;
 80006ee:	e042      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <BtcRxVal+0x2b4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]

			break;
 80006f6:	e03e      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <BtcRxVal+0x2b8>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalRight = STD_LOW;
 80006fe:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <BtcRxVal+0x2bc>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]

			break;
 8000704:	e037      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <BtcRxVal+0x2b8>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]

			break;
 800070c:	e033      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <BtcRxVal+0x2bc>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalLeft = STD_LOW;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <BtcRxVal+0x2b8>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

			break;
 800071a:	e02c      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <BtcRxVal+0x2bc>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]

			break;
 8000722:	e028      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <BtcRxVal+0x2c0>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]

			break;
 800072a:	e024      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <BtcRxVal+0x2c0>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]

			break;
 8000732:	e020      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <BtcRxVal+0x2c4>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]

			break;
 800073a:	e01c      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <BtcRxVal+0x2c4>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]

			break;
 8000742:	e018      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <BtcRxVal+0x2c8>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]

			break;
 800074a:	e014      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <BtcRxVal+0x2c8>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]

			break;
 8000752:	e010      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <BtcRxVal+0x2cc>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]

			break;
 800075a:	e00c      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <BtcRxVal+0x2cc>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]

			break;
 8000762:	e008      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <BtcRxVal+0x2d0>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]

			break;
 800076a:	e004      	b.n	8000776 <BtcRxVal+0x292>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <BtcRxVal+0x2d0>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]

			break;
 8000772:	e000      	b.n	8000776 <BtcRxVal+0x292>

		default:

			break;
 8000774:	bf00      	nop

	}

	return 1;
 8000776:	2301      	movs	r3, #1

}
 8000778:	4618      	mov	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000090 	.word	0x20000090
 8000788:	200000af 	.word	0x200000af
 800078c:	200000a6 	.word	0x200000a6
 8000790:	20000096 	.word	0x20000096
 8000794:	200000a7 	.word	0x200000a7
 8000798:	200000a8 	.word	0x200000a8
 800079c:	200000aa 	.word	0x200000aa
 80007a0:	200000ab 	.word	0x200000ab
 80007a4:	200000ac 	.word	0x200000ac
 80007a8:	200000a9 	.word	0x200000a9
 80007ac:	200000ae 	.word	0x200000ae
 80007b0:	200000ad 	.word	0x200000ad
 80007b4:	200000ca 	.word	0x200000ca

080007b8 <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 80007c2:	2201      	movs	r2, #1
 80007c4:	490e      	ldr	r1, [pc, #56]	; (8000800 <BtcEnableUart+0x48>)
 80007c6:	480f      	ldr	r0, [pc, #60]	; (8000804 <BtcEnableUart+0x4c>)
 80007c8:	f00a fe28 	bl	800b41c <HAL_UART_Receive_IT>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d007      	beq.n	80007e2 <BtcEnableUart+0x2a>
	{

		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 80007d2:	2201      	movs	r2, #1
 80007d4:	490a      	ldr	r1, [pc, #40]	; (8000800 <BtcEnableUart+0x48>)
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <BtcEnableUart+0x4c>)
 80007d8:	f00a fe20 	bl	800b41c <HAL_UART_Receive_IT>
		status = E_OK;
 80007dc:	2300      	movs	r3, #0
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	e009      	b.n	80007f6 <BtcEnableUart+0x3e>

	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 80007e2:	2201      	movs	r2, #1
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <BtcEnableUart+0x48>)
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <BtcEnableUart+0x4c>)
 80007e8:	f00a fe18 	bl	800b41c <HAL_UART_Receive_IT>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d101      	bne.n	80007f6 <BtcEnableUart+0x3e>
	{

		status = E_NOT_OK;
 80007f2:	2301      	movs	r3, #1
 80007f4:	71fb      	strb	r3, [r7, #7]

		/* do nothing */

	}

	return status;
 80007f6:	79fb      	ldrb	r3, [r7, #7]

}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000090 	.word	0x20000090
 8000804:	20000884 	.word	0x20000884

08000808 <BtcMainFunction>:

void BtcMainFunction()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

	BtcEnableUart();
 800080c:	f7ff ffd4 	bl	80007b8 <BtcEnableUart>
	BtcRxVal();
 8000810:	f7ff fe68 	bl	80004e4 <BtcRxVal>

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <CenLocState>:

	return E_OK;
}

StdReturnType CenLocState()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <CenLocState+0x64>)
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <CenLocState+0x68>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	429a      	cmp	r2, r3
 800082c:	d021      	beq.n	8000872 <CenLocState+0x5a>
	{
		CenLoc_PreviousStateFlag 			= CenLoc_PreviousState;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <CenLocState+0x64>)
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <CenLocState+0x6c>)
 8000834:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 				= CenLoc_CurrentState;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <CenLocState+0x68>)
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <CenLocState+0x64>)
 800083c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag 					= STD_LOW;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <CenLocState+0x70>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag 					= STD_LOW;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <CenLocState+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag					= STD_LOW;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <CenLocState+0x78>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag					= STD_LOW;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <CenLocState+0x7c>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]

		SecAlmInit();
 8000856:	f000 fe5b 	bl	8001510 <SecAlmInit>
		HAL_TIM_Base_Init(&htim2);
 800085a:	480f      	ldr	r0, [pc, #60]	; (8000898 <CenLocState+0x80>)
 800085c:	f009 fc6c 	bl	800a138 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 8000860:	480e      	ldr	r0, [pc, #56]	; (800089c <CenLocState+0x84>)
 8000862:	f009 fc69 	bl	800a138 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim4);
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <CenLocState+0x88>)
 8000868:	f009 fc66 	bl	800a138 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <CenLocState+0x8c>)
 800086e:	f009 fc63 	bl	800a138 <HAL_TIM_Base_Init>

		/* do nothing */

	}

	return status;
 8000872:	79fb      	ldrb	r3, [r7, #7]

}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000092 	.word	0x20000092
 8000880:	20000091 	.word	0x20000091
 8000884:	20000095 	.word	0x20000095
 8000888:	20000098 	.word	0x20000098
 800088c:	2000009a 	.word	0x2000009a
 8000890:	20000099 	.word	0x20000099
 8000894:	2000009b 	.word	0x2000009b
 8000898:	2000044c 	.word	0x2000044c
 800089c:	20000500 	.word	0x20000500
 80008a0:	200005b4 	.word	0x200005b4
 80008a4:	20000668 	.word	0x20000668

080008a8 <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <CenLocSecAlmStateToOff+0x14>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d101      	bne.n	80008b8 <CenLocSecAlmStateToOff+0x10>
	{

		SecAlmInit();
 80008b4:	f000 fe2c 	bl	8001510 <SecAlmInit>

		/* do nothing */

	}

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000091 	.word	0x20000091

080008c0 <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

	CenLoc_CurrentState = Btc_CenLoc;
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <CenLocRxBtcState+0x18>)
 80008c6:	781a      	ldrb	r2, [r3, #0]
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <CenLocRxBtcState+0x1c>)
 80008ca:	701a      	strb	r2, [r3, #0]

}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000096 	.word	0x20000096
 80008dc:	20000091 	.word	0x20000091

080008e0 <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	461a      	mov	r2, r3
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <CenLocToggleDoorLED+0x20>)
 80008f2:	f004 fe99 	bl	8005628 <HAL_GPIO_WritePin>

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400

08000904 <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

	if(CenLoc_Tim5IRQFlag == 1)
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <CenLocFollowMeHome+0x2c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d103      	bne.n	8000918 <CenLocFollowMeHome+0x14>
	{

		CenLoc_FollowMeHomeState = STD_HIGH;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <CenLocFollowMeHome+0x30>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000916:	e006      	b.n	8000926 <CenLocFollowMeHome+0x22>
	else if(CenLoc_Tim5IRQFlag == 2)
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <CenLocFollowMeHome+0x2c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d102      	bne.n	8000926 <CenLocFollowMeHome+0x22>
		CenLoc_FollowMeHomeState = STD_LOW;
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <CenLocFollowMeHome+0x30>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	2000009a 	.word	0x2000009a
 8000934:	20000093 	.word	0x20000093

08000938 <CenLocUnlockSequence>:
	ExtLightsTurnSignalRight(CenLoc_BlinkState);

}

void CenLocUnlockSequence()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim3);
 800093c:	482e      	ldr	r0, [pc, #184]	; (80009f8 <CenLocUnlockSequence+0xc0>)
 800093e:	f009 fd5f 	bl	800a400 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000942:	482e      	ldr	r0, [pc, #184]	; (80009fc <CenLocUnlockSequence+0xc4>)
 8000944:	f009 fcca 	bl	800a2dc <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <CenLocUnlockSequence+0xc0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	; 0x24

	CenLocToggleDoorLED(CenLoc_CurrentState);
 8000950:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <CenLocUnlockSequence+0xc8>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffc3 	bl	80008e0 <CenLocToggleDoorLED>
	CenLocFollowMeHome();
 800095a:	f7ff ffd3 	bl	8000904 <CenLocFollowMeHome>

	localPreviousState = STD_HIGH;
 800095e:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <CenLocUnlockSequence+0xcc>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]

	if(CenLoc_Tim2IRQFlag <= 4)
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <CenLocUnlockSequence+0xd0>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b04      	cmp	r3, #4
 800096a:	d837      	bhi.n	80009dc <CenLocUnlockSequence+0xa4>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 800096c:	4827      	ldr	r0, [pc, #156]	; (8000a0c <CenLocUnlockSequence+0xd4>)
 800096e:	f009 fcb5 	bl	800a2dc <HAL_TIM_Base_Start_IT>

		switch(CenLoc_Tim2IRQFlag)
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <CenLocUnlockSequence+0xd0>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	3b01      	subs	r3, #1
 8000978:	2b03      	cmp	r3, #3
 800097a:	d83a      	bhi.n	80009f2 <CenLocUnlockSequence+0xba>
 800097c:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <CenLocUnlockSequence+0x4c>)
 800097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000982:	bf00      	nop
 8000984:	08000995 	.word	0x08000995
 8000988:	080009a7 	.word	0x080009a7
 800098c:	080009b9 	.word	0x080009b9
 8000990:	080009cb 	.word	0x080009cb
		{

			case 1:

				CenLoc_BlinkState = STD_HIGH;
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <CenLocUnlockSequence+0xd8>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <CenLocUnlockSequence+0xd8>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f8e4 	bl	8000b6c <CenLocToggleBuzzer>

				break;
 80009a4:	e026      	b.n	80009f4 <CenLocUnlockSequence+0xbc>

			case 2:

				CenLoc_BlinkState = STD_LOW;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <CenLocUnlockSequence+0xd8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <CenLocUnlockSequence+0xd8>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f8db 	bl	8000b6c <CenLocToggleBuzzer>

				break;
 80009b6:	e01d      	b.n	80009f4 <CenLocUnlockSequence+0xbc>

			case 3:

				CenLoc_BlinkState = STD_HIGH;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <CenLocUnlockSequence+0xd8>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <CenLocUnlockSequence+0xd8>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f8d2 	bl	8000b6c <CenLocToggleBuzzer>

				break;
 80009c8:	e014      	b.n	80009f4 <CenLocUnlockSequence+0xbc>

			case 4:

				CenLoc_BlinkState = STD_LOW;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <CenLocUnlockSequence+0xd8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <CenLocUnlockSequence+0xd8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f8c9 	bl	8000b6c <CenLocToggleBuzzer>

				break;
 80009da:	e00b      	b.n	80009f4 <CenLocUnlockSequence+0xbc>
				break;

		}

	}
	else if(CenLoc_Tim2IRQFlag == 5)
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <CenLocUnlockSequence+0xd0>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b05      	cmp	r3, #5
 80009e2:	d107      	bne.n	80009f4 <CenLocUnlockSequence+0xbc>
	{

		CenLoc_BlinkState = 2;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <CenLocUnlockSequence+0xd8>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 80009ea:	4808      	ldr	r0, [pc, #32]	; (8000a0c <CenLocUnlockSequence+0xd4>)
 80009ec:	f009 fd08 	bl	800a400 <HAL_TIM_Base_Stop_IT>

		/* do nothing */

	}

}
 80009f0:	e000      	b.n	80009f4 <CenLocUnlockSequence+0xbc>
				break;
 80009f2:	bf00      	nop
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000500 	.word	0x20000500
 80009fc:	20000668 	.word	0x20000668
 8000a00:	20000091 	.word	0x20000091
 8000a04:	20000097 	.word	0x20000097
 8000a08:	20000098 	.word	0x20000098
 8000a0c:	2000044c 	.word	0x2000044c
 8000a10:	20000094 	.word	0x20000094

08000a14 <CenLocLockSequence>:

void CenLocLockSequence()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

	CenLocToggleDoorLED(CenLoc_CurrentState);
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <CenLocLockSequence+0x84>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5f 	bl	80008e0 <CenLocToggleDoorLED>
	CenLocFollowMeHome();
 8000a22:	f7ff ff6f 	bl	8000904 <CenLocFollowMeHome>

	if(CenLoc_Tim2IRQFlag <= 2 && localPreviousState == STD_HIGH)
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <CenLocLockSequence+0x88>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d827      	bhi.n	8000a7e <CenLocLockSequence+0x6a>
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <CenLocLockSequence+0x8c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d123      	bne.n	8000a7e <CenLocLockSequence+0x6a>
	{
		HAL_TIM_Base_Start_IT(&htim5);
 8000a36:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <CenLocLockSequence+0x90>)
 8000a38:	f009 fc50 	bl	800a2dc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 8000a3c:	481a      	ldr	r0, [pc, #104]	; (8000aa8 <CenLocLockSequence+0x94>)
 8000a3e:	f009 fc4d 	bl	800a2dc <HAL_TIM_Base_Start_IT>

		switch(CenLoc_Tim2IRQFlag)
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <CenLocLockSequence+0x88>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d002      	beq.n	8000a50 <CenLocLockSequence+0x3c>
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d009      	beq.n	8000a62 <CenLocLockSequence+0x4e>

			break;

		default:

			break;
 8000a4e:	e014      	b.n	8000a7a <CenLocLockSequence+0x66>
			CenLoc_BlinkState = STD_HIGH;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <CenLocLockSequence+0x98>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
			CenLocToggleBuzzer(CenLoc_BlinkState);
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <CenLocLockSequence+0x98>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f886 	bl	8000b6c <CenLocToggleBuzzer>
			break;
 8000a60:	e00b      	b.n	8000a7a <CenLocLockSequence+0x66>
			CenLoc_BlinkState = STD_LOW;
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <CenLocLockSequence+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
			CenLocToggleBuzzer(CenLoc_BlinkState);
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <CenLocLockSequence+0x98>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f87d 	bl	8000b6c <CenLocToggleBuzzer>
			localPreviousState = STD_LOW;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <CenLocLockSequence+0x8c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
			break;
 8000a78:	bf00      	nop
		switch(CenLoc_Tim2IRQFlag)
 8000a7a:	bf00      	nop
	else
	{
		/* do nothing */
	}

}
 8000a7c:	e009      	b.n	8000a92 <CenLocLockSequence+0x7e>
	else if(CenLoc_Tim2IRQFlag == 3)
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <CenLocLockSequence+0x88>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d105      	bne.n	8000a92 <CenLocLockSequence+0x7e>
		CenLoc_BlinkState = 2;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <CenLocLockSequence+0x98>)
 8000a88:	2202      	movs	r2, #2
 8000a8a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8000a8c:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <CenLocLockSequence+0x94>)
 8000a8e:	f009 fcb7 	bl	800a400 <HAL_TIM_Base_Stop_IT>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000091 	.word	0x20000091
 8000a9c:	20000098 	.word	0x20000098
 8000aa0:	20000097 	.word	0x20000097
 8000aa4:	20000668 	.word	0x20000668
 8000aa8:	2000044c 	.word	0x2000044c
 8000aac:	20000094 	.word	0x20000094

08000ab0 <CenLocControlAlarmLed>:

void CenLocControlAlarmLed()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	if(CenLoc_CurrentState == STD_HIGH)
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <CenLocControlAlarmLed+0x64>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d103      	bne.n	8000ac4 <CenLocControlAlarmLed+0x14>
	{

		SecAlmToggleAlarmLed(STD_LOW);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 fd5d 	bl	800157c <SecAlmToggleAlarmLed>
			/* do nothing */

		}

	}
}
 8000ac2:	e025      	b.n	8000b10 <CenLocControlAlarmLed+0x60>
	else if(CenLoc_CurrentState == STD_LOW)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <CenLocControlAlarmLed+0x64>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d121      	bne.n	8000b10 <CenLocControlAlarmLed+0x60>
		HAL_TIM_Base_Start_IT(&htim3);
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <CenLocControlAlarmLed+0x68>)
 8000ace:	f009 fc05 	bl	800a2dc <HAL_TIM_Base_Start_IT>
		if(CenLoc_Tim3IRQFlag == 2)
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <CenLocControlAlarmLed+0x6c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d11a      	bne.n	8000b10 <CenLocControlAlarmLed+0x60>
			HAL_TIM_Base_Start_IT(&htim11);
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <CenLocControlAlarmLed+0x70>)
 8000adc:	f009 fbfe 	bl	800a2dc <HAL_TIM_Base_Start_IT>
			if(CenLoc_Tim11IRQFlag == 1)
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <CenLocControlAlarmLed+0x74>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d103      	bne.n	8000af0 <CenLocControlAlarmLed+0x40>
				SecAlmToggleAlarmLed(STD_HIGH);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 fd47 	bl	800157c <SecAlmToggleAlarmLed>
}
 8000aee:	e00f      	b.n	8000b10 <CenLocControlAlarmLed+0x60>
			else if(CenLoc_Tim11IRQFlag > 1)
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <CenLocControlAlarmLed+0x74>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d90b      	bls.n	8000b10 <CenLocControlAlarmLed+0x60>
				SecAlmToggleAlarmLed(STD_LOW);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 fd3f 	bl	800157c <SecAlmToggleAlarmLed>
				CenLoc_Tim11IRQFlag = 0;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <CenLocControlAlarmLed+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
				CenLoc_Tim3IRQFlag = 1;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <CenLocControlAlarmLed+0x6c>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim11);
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <CenLocControlAlarmLed+0x70>)
 8000b0c:	f009 fc78 	bl	800a400 <HAL_TIM_Base_Stop_IT>
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000091 	.word	0x20000091
 8000b18:	20000500 	.word	0x20000500
 8000b1c:	20000099 	.word	0x20000099
 8000b20:	200007d0 	.word	0x200007d0
 8000b24:	2000009b 	.word	0x2000009b

08000b28 <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <CenLocLockUnlockStates+0x3c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d108      	bne.n	8000b46 <CenLocLockUnlockStates+0x1e>
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <CenLocLockUnlockStates+0x40>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d104      	bne.n	8000b46 <CenLocLockUnlockStates+0x1e>
	{

		CenLocUnlockSequence();
 8000b3c:	f7ff fefc 	bl	8000938 <CenLocUnlockSequence>
		CenLocControlAlarmLed();
 8000b40:	f7ff ffb6 	bl	8000ab0 <CenLocControlAlarmLed>
 8000b44:	e00b      	b.n	8000b5e <CenLocLockUnlockStates+0x36>

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <CenLocLockUnlockStates+0x3c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d107      	bne.n	8000b5e <CenLocLockUnlockStates+0x36>
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <CenLocLockUnlockStates+0x40>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d103      	bne.n	8000b5e <CenLocLockUnlockStates+0x36>
	{

		CenLocLockSequence();
 8000b56:	f7ff ff5d 	bl	8000a14 <CenLocLockSequence>
		CenLocControlAlarmLed();
 8000b5a:	f7ff ffa9 	bl	8000ab0 <CenLocControlAlarmLed>

	}

	return 1;
 8000b5e:	2301      	movs	r3, #1

}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000091 	.word	0x20000091
 8000b68:	200000cb 	.word	0x200000cb

08000b6c <CenLocToggleBuzzer>:

void CenLocToggleBuzzer(uint8 PinState)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <CenLocToggleBuzzer+0x20>)
 8000b7e:	f004 fd53 	bl	8005628 <HAL_GPIO_WritePin>

}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40020800 	.word	0x40020800

08000b90 <CenLocMainFunction>:

void CenLocMainFunction()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 8000b94:	f7ff fe94 	bl	80008c0 <CenLocRxBtcState>
	CenLocState();
 8000b98:	f7ff fe3e 	bl	8000818 <CenLocState>
	CenLocSecAlmStateToOff();
 8000b9c:	f7ff fe84 	bl	80008a8 <CenLocSecAlmStateToOff>
	CenLocLockUnlockStates();
 8000ba0:	f7ff ffc2 	bl	8000b28 <CenLocLockUnlockStates>

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <ExtLightsTurnSignalHazardLight>:
void ExtLightsPrevStateTSHL();
StdReturnType ExtLightsInit();
uint32 ExtLightsLightReadSensorValue();

void ExtLightsTurnSignalHazardLight()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8000bac:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <ExtLightsTurnSignalHazardLight+0xdc>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d115      	bne.n	8000be0 <ExtLightsTurnSignalHazardLight+0x38>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 8000bb4:	4834      	ldr	r0, [pc, #208]	; (8000c88 <ExtLightsTurnSignalHazardLight+0xe0>)
 8000bb6:	f009 fb91 	bl	800a2dc <HAL_TIM_Base_Start_IT>

		if(ExtLights_LTSFlag % 2 == 0)
 8000bba:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <ExtLightsTurnSignalHazardLight+0xe4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <ExtLightsTurnSignalHazardLight+0x26>
		{

			ExtLightsTurnSignalLeft(STD_HIGH);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f000 fa8c 	bl	80010e4 <ExtLightsTurnSignalLeft>
 8000bcc:	e008      	b.n	8000be0 <ExtLightsTurnSignalHazardLight+0x38>

		}
		else if(ExtLights_LTSFlag % 2 == STD_HIGH)
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <ExtLightsTurnSignalHazardLight+0xe4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <ExtLightsTurnSignalHazardLight+0x38>
		{

			ExtLightsTurnSignalLeft(STD_LOW);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f000 fa82 	bl	80010e4 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8000be0:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <ExtLightsTurnSignalHazardLight+0xe8>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d115      	bne.n	8000c14 <ExtLightsTurnSignalHazardLight+0x6c>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 8000be8:	4827      	ldr	r0, [pc, #156]	; (8000c88 <ExtLightsTurnSignalHazardLight+0xe0>)
 8000bea:	f009 fb77 	bl	800a2dc <HAL_TIM_Base_Start_IT>

		if(ExtLights_RTSFlag % 2 == STD_LOW)
 8000bee:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <ExtLightsTurnSignalHazardLight+0xec>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <ExtLightsTurnSignalHazardLight+0x5a>
		{

			ExtLightsTurnSignalRight(STD_HIGH);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 fa84 	bl	8001108 <ExtLightsTurnSignalRight>
 8000c00:	e008      	b.n	8000c14 <ExtLightsTurnSignalHazardLight+0x6c>

		}
		else if(ExtLights_RTSFlag % 2 == STD_HIGH)
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <ExtLightsTurnSignalHazardLight+0xec>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <ExtLightsTurnSignalHazardLight+0x6c>
		{

			ExtLightsTurnSignalRight(STD_LOW);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 fa7a 	bl	8001108 <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8000c14:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <ExtLightsTurnSignalHazardLight+0xf0>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d11b      	bne.n	8000c54 <ExtLightsTurnSignalHazardLight+0xac>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 8000c1c:	481a      	ldr	r0, [pc, #104]	; (8000c88 <ExtLightsTurnSignalHazardLight+0xe0>)
 8000c1e:	f009 fb5d 	bl	800a2dc <HAL_TIM_Base_Start_IT>

		if(ExtLights_HLFlag % 2 == STD_LOW)
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <ExtLightsTurnSignalHazardLight+0xf4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d106      	bne.n	8000c3c <ExtLightsTurnSignalHazardLight+0x94>
		{

			ExtLightsTurnSignalLeft(STD_HIGH);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f000 fa58 	bl	80010e4 <ExtLightsTurnSignalLeft>
			ExtLightsTurnSignalRight(STD_HIGH);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fa67 	bl	8001108 <ExtLightsTurnSignalRight>
 8000c3a:	e00b      	b.n	8000c54 <ExtLightsTurnSignalHazardLight+0xac>

		}
		else if(ExtLights_HLFlag % 2 == STD_HIGH)
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <ExtLightsTurnSignalHazardLight+0xf4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d005      	beq.n	8000c54 <ExtLightsTurnSignalHazardLight+0xac>
		{

			ExtLightsTurnSignalLeft(STD_LOW);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 fa4b 	bl	80010e4 <ExtLightsTurnSignalLeft>
			ExtLightsTurnSignalRight(STD_LOW);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 fa5a 	bl	8001108 <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <ExtLightsTurnSignalHazardLight+0xe8>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d106      	bne.n	8000c6a <ExtLightsTurnSignalHazardLight+0xc2>
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <ExtLightsTurnSignalHazardLight+0xf0>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <ExtLightsTurnSignalHazardLight+0xc2>
	{

		ExtLightsTurnSignalRight(STD_LOW);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fa4f 	bl	8001108 <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <ExtLightsTurnSignalHazardLight+0xdc>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d106      	bne.n	8000c80 <ExtLightsTurnSignalHazardLight+0xd8>
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <ExtLightsTurnSignalHazardLight+0xf0>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <ExtLightsTurnSignalHazardLight+0xd8>
	{

		ExtLightsTurnSignalLeft(STD_LOW);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 fa32 	bl	80010e4 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200000a2 	.word	0x200000a2
 8000c88:	2000044c 	.word	0x2000044c
 8000c8c:	200000b8 	.word	0x200000b8
 8000c90:	200000a3 	.word	0x200000a3
 8000c94:	200000b4 	.word	0x200000b4
 8000c98:	200000a4 	.word	0x200000a4
 8000c9c:	200000bc 	.word	0x200000bc

08000ca0 <ExtLightsPrevStateTSHL>:

void ExtLightsPrevStateTSHL()
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <ExtLightsPrevStateTSHL+0x5c>)
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <ExtLightsPrevStateTSHL+0x60>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d006      	beq.n	8000cbe <ExtLightsPrevStateTSHL+0x1e>
	{

		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <ExtLightsPrevStateTSHL+0x5c>)
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <ExtLightsPrevStateTSHL+0x60>)
 8000cb6:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <ExtLightsPrevStateTSHL+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <ExtLightsPrevStateTSHL+0x68>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <ExtLightsPrevStateTSHL+0x6c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d006      	beq.n	8000cd8 <ExtLightsPrevStateTSHL+0x38>
	{

		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <ExtLightsPrevStateTSHL+0x68>)
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <ExtLightsPrevStateTSHL+0x6c>)
 8000cd0:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <ExtLightsPrevStateTSHL+0x70>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <ExtLightsPrevStateTSHL+0x74>)
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <ExtLightsPrevStateTSHL+0x78>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d006      	beq.n	8000cf2 <ExtLightsPrevStateTSHL+0x52>
	{

		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <ExtLightsPrevStateTSHL+0x74>)
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <ExtLightsPrevStateTSHL+0x78>)
 8000cea:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <ExtLightsPrevStateTSHL+0x7c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]

		/* do nothing */

	}

}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	200000a2 	.word	0x200000a2
 8000d00:	200000b1 	.word	0x200000b1
 8000d04:	200000b8 	.word	0x200000b8
 8000d08:	200000a3 	.word	0x200000a3
 8000d0c:	200000b0 	.word	0x200000b0
 8000d10:	200000b4 	.word	0x200000b4
 8000d14:	200000a4 	.word	0x200000a4
 8000d18:	200000b2 	.word	0x200000b2
 8000d1c:	200000bc 	.word	0x200000bc

08000d20 <ExtLightsLightState>:

void ExtLightsLightState()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

	if(CenLoc_FollowMeHomeState == STD_HIGH)
 8000d24:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <ExtLightsLightState+0x130>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d114      	bne.n	8000d56 <ExtLightsLightState+0x36>
	{

		ExtLightsLowBeam(CenLoc_FollowMeHomeState);
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <ExtLightsLightState+0x130>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f98f 	bl	8001054 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(CenLoc_FollowMeHomeState);
 8000d36:	4b46      	ldr	r3, [pc, #280]	; (8000e50 <ExtLightsLightState+0x130>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f9ae 	bl	800109c <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(CenLoc_FollowMeHomeState);
 8000d40:	4b43      	ldr	r3, [pc, #268]	; (8000e50 <ExtLightsLightState+0x130>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f9f1 	bl	800112c <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(CenLoc_FollowMeHomeState);
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <ExtLightsLightState+0x130>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fa34 	bl	80011bc <ExtLightsLicensePlateLight>
 8000d54:	e00d      	b.n	8000d72 <ExtLightsLightState+0x52>

	}
	else if(CenLoc_FollowMeHomeState == STD_LOW && ExtLights_LightsSwitch_CurrentState == 0)
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <ExtLightsLightState+0x130>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d109      	bne.n	8000d72 <ExtLightsLightState+0x52>
 8000d5e:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <ExtLightsLightState+0x134>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <ExtLightsLightState+0x52>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEZERO;
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <ExtLightsLightState+0x134>)
 8000d68:	2264      	movs	r2, #100	; 0x64
 8000d6a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim5);
 8000d6c:	483a      	ldr	r0, [pc, #232]	; (8000e58 <ExtLightsLightState+0x138>)
 8000d6e:	f009 fb47 	bl	800a400 <HAL_TIM_Base_Stop_IT>

	}

	if(ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8000d72:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <ExtLightsLightState+0x13c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d023      	beq.n	8000dc2 <ExtLightsLightState+0xa2>
				ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8000d7a:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <ExtLightsLightState+0x140>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
	if(ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d01f      	beq.n	8000dc2 <ExtLightsLightState+0xa2>
				ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8000d82:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <ExtLightsLightState+0x144>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
				ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d01b      	beq.n	8000dc2 <ExtLightsLightState+0xa2>
				ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8000d8a:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <ExtLightsLightState+0x134>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
				ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d117      	bne.n	8000dc2 <ExtLightsLightState+0xa2>
				ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <ExtLightsLightState+0x148>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
				ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d013      	beq.n	8000dc2 <ExtLightsLightState+0xa2>
				ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <ExtLightsLightState+0x14c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
				ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d00f      	beq.n	8000dc2 <ExtLightsLightState+0xa2>
				ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8000da2:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <ExtLightsLightState+0x150>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
				ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d00b      	beq.n	8000dc2 <ExtLightsLightState+0xa2>
				ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <ExtLightsLightState+0x154>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
				ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d007      	beq.n	8000dc2 <ExtLightsLightState+0xa2>
				ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <ExtLightsLightState+0x158>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
				ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d003      	beq.n	8000dc2 <ExtLightsLightState+0xa2>
				ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <ExtLightsLightState+0x15c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
				ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d105      	bne.n	8000dce <ExtLightsLightState+0xae>
	{

		CenLoc_FollowMeHomeState = STD_LOW;
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <ExtLightsLightState+0x130>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag = 2;
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <ExtLightsLightState+0x160>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(CenLoc_BlinkState == STD_HIGH)
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <ExtLightsLightState+0x164>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10a      	bne.n	8000dec <ExtLightsLightState+0xcc>
	{

		ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <ExtLightsLightState+0x164>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f982 	bl	80010e4 <ExtLightsTurnSignalLeft>
		ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <ExtLightsLightState+0x164>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f98f 	bl	8001108 <ExtLightsTurnSignalRight>
 8000dea:	e014      	b.n	8000e16 <ExtLightsLightState+0xf6>

	}
	else if(CenLoc_BlinkState == STD_LOW)
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <ExtLightsLightState+0x164>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10a      	bne.n	8000e0a <ExtLightsLightState+0xea>
	{

		ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <ExtLightsLightState+0x164>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 f973 	bl	80010e4 <ExtLightsTurnSignalLeft>
		ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <ExtLightsLightState+0x164>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f980 	bl	8001108 <ExtLightsTurnSignalRight>
 8000e08:	e005      	b.n	8000e16 <ExtLightsLightState+0xf6>

	}
	else if(CenLoc_BlinkState == 2)
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <ExtLightsLightState+0x164>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d101      	bne.n	8000e16 <ExtLightsLightState+0xf6>
	{

		ExtLightsTurnSignalHazardLight();
 8000e12:	f7ff fec9 	bl	8000ba8 <ExtLightsTurnSignalHazardLight>

		/* do nothing */

	}

	ExtLightsLightSwitchMode();
 8000e16:	f000 f841 	bl	8000e9c <ExtLightsLightSwitchMode>
	ExtLightsReverseLight(ExtLights_ReverseLight_CurrentState);
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <ExtLightsLightState+0x13c>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f9ba 	bl	8001198 <ExtLightsReverseLight>
	ExtLightsBrakeLight(ExtLights_BrakeLight_CurrentState);
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <ExtLightsLightState+0x140>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f9a3 	bl	8001174 <ExtLightsBrakeLight>
	ExtLightsHighBeam(ExtLights_HighBeam_CurrentState);
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <ExtLightsLightState+0x148>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f920 	bl	8001078 <ExtLightsHighBeam>
	ExtLightsRearFogLight(ExtLights_RearFogLight_CurrentState);
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <ExtLightsLightState+0x15c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f987 	bl	8001150 <ExtLightsRearFogLight>
	ExtLightsFrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <ExtLightsLightState+0x14c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f93a 	bl	80010c0 <ExtLightsFrontFogLight>

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000093 	.word	0x20000093
 8000e54:	2000009f 	.word	0x2000009f
 8000e58:	20000668 	.word	0x20000668
 8000e5c:	2000009c 	.word	0x2000009c
 8000e60:	2000009d 	.word	0x2000009d
 8000e64:	2000009e 	.word	0x2000009e
 8000e68:	200000a0 	.word	0x200000a0
 8000e6c:	200000a1 	.word	0x200000a1
 8000e70:	200000a2 	.word	0x200000a2
 8000e74:	200000a3 	.word	0x200000a3
 8000e78:	200000a4 	.word	0x200000a4
 8000e7c:	200000a5 	.word	0x200000a5
 8000e80:	2000009a 	.word	0x2000009a
 8000e84:	20000094 	.word	0x20000094

08000e88 <ExtLightsMainFunction>:

void ExtLightsMainFunction()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

	ExtLightsRxBtcState();
 8000e8c:	f000 f870 	bl	8000f70 <ExtLightsRxBtcState>
	ExtLightsLightState();
 8000e90:	f7ff ff46 	bl	8000d20 <ExtLightsLightState>
	ExtLightsPrevStateTSHL();
 8000e94:	f7ff ff04 	bl	8000ca0 <ExtLightsPrevStateTSHL>

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <ExtLightsLightSwitchMode>:

void ExtLightsLightSwitchMode()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

	switch(ExtLights_LightsSwitch_CurrentState)
 8000ea0:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <ExtLightsLightSwitchMode+0xcc>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	3b64      	subs	r3, #100	; 0x64
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d859      	bhi.n	8000f5e <ExtLightsLightSwitchMode+0xc2>
 8000eaa:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <ExtLightsLightSwitchMode+0x14>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000ec1 	.word	0x08000ec1
 8000eb4:	08000edb 	.word	0x08000edb
 8000eb8:	08000f2b 	.word	0x08000f2b
 8000ebc:	08000f45 	.word	0x08000f45
	{
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:

			ExtLightsLowBeam(STD_LOW);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f000 f8c7 	bl	8001054 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_LOW);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f8e8 	bl	800109c <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_LOW);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 f92d 	bl	800112c <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_LOW);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f972 	bl	80011bc <ExtLightsLicensePlateLight>

			break;
 8000ed8:	e044      	b.n	8000f64 <ExtLightsLightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATEONE:

			lightSensorState = ExtLightsLightReadSensorValue();
 8000eda:	f000 f899 	bl	8001010 <ExtLightsLightReadSensorValue>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <ExtLightsLightSwitchMode+0xd0>)
 8000ee4:	701a      	strb	r2, [r3, #0]

			if(lightSensorState == STD_HIGH)
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <ExtLightsLightSwitchMode+0xd0>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10c      	bne.n	8000f08 <ExtLightsLightSwitchMode+0x6c>
			{

				ExtLightsLowBeam(STD_HIGH);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f000 f8b0 	bl	8001054 <ExtLightsLowBeam>
				ExtLightsDayTimeRunningLight(STD_HIGH);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f000 f8d1 	bl	800109c <ExtLightsDayTimeRunningLight>
				ExtLightsRearPositionLight(STD_HIGH);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 f916 	bl	800112c <ExtLightsRearPositionLight>
				ExtLightsLicensePlateLight(STD_HIGH);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 f95b 	bl	80011bc <ExtLightsLicensePlateLight>
				ExtLightsRearPositionLight(STD_LOW);
				ExtLightsLicensePlateLight(STD_LOW);

			}

			break;
 8000f06:	e02c      	b.n	8000f62 <ExtLightsLightSwitchMode+0xc6>
			else if(lightSensorState == STD_LOW)
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <ExtLightsLightSwitchMode+0xd0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d128      	bne.n	8000f62 <ExtLightsLightSwitchMode+0xc6>
				ExtLightsLowBeam(STD_LOW);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f89f 	bl	8001054 <ExtLightsLowBeam>
				ExtLightsDayTimeRunningLight(STD_HIGH);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 f8c0 	bl	800109c <ExtLightsDayTimeRunningLight>
				ExtLightsRearPositionLight(STD_LOW);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 f905 	bl	800112c <ExtLightsRearPositionLight>
				ExtLightsLicensePlateLight(STD_LOW);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f94a 	bl	80011bc <ExtLightsLicensePlateLight>
			break;
 8000f28:	e01b      	b.n	8000f62 <ExtLightsLightSwitchMode+0xc6>

		case EXTLIGHTS_LIGHTSWITCH_STATETWO:

			ExtLightsLowBeam(STD_LOW);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f892 	bl	8001054 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f000 f8b3 	bl	800109c <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 f8f8 	bl	800112c <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f000 f93d 	bl	80011bc <ExtLightsLicensePlateLight>

			break;
 8000f42:	e00f      	b.n	8000f64 <ExtLightsLightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:

			ExtLightsLowBeam(STD_HIGH);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 f885 	bl	8001054 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 f8a6 	bl	800109c <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f000 f8eb 	bl	800112c <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f000 f930 	bl	80011bc <ExtLightsLicensePlateLight>

			break;
 8000f5c:	e002      	b.n	8000f64 <ExtLightsLightSwitchMode+0xc8>

		default:

			break;
 8000f5e:	bf00      	nop
 8000f60:	e000      	b.n	8000f64 <ExtLightsLightSwitchMode+0xc8>
			break;
 8000f62:	bf00      	nop

	}

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000009f 	.word	0x2000009f
 8000f6c:	200000c8 	.word	0x200000c8

08000f70 <ExtLightsRxBtcState>:
	return E_OK;

}

void ExtLightsRxBtcState()
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

	ExtLights_ReverseLight_CurrentState 	= Btc_ReverseLight;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <ExtLightsRxBtcState+0x58>)
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <ExtLightsRxBtcState+0x5c>)
 8000f7a:	701a      	strb	r2, [r3, #0]
	ExtLights_LightsSwitch_CurrentState 	= Btc_LightSwitch;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <ExtLightsRxBtcState+0x60>)
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <ExtLightsRxBtcState+0x64>)
 8000f82:	701a      	strb	r2, [r3, #0]
	ExtLights_HighBeam_CurrentState 		= Btc_HighBeam;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <ExtLightsRxBtcState+0x68>)
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <ExtLightsRxBtcState+0x6c>)
 8000f8a:	701a      	strb	r2, [r3, #0]
	ExtLights_FrontFogLight_CurrentState 	= Btc_FrontFogLight;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <ExtLightsRxBtcState+0x70>)
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <ExtLightsRxBtcState+0x74>)
 8000f92:	701a      	strb	r2, [r3, #0]
	ExtLights_RearFogLight_CurrentState 	= Btc_RearFogLight;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <ExtLightsRxBtcState+0x78>)
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <ExtLightsRxBtcState+0x7c>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	ExtLights_BrakeLight_CurrentState 		= Btc_BrakeLight;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <ExtLightsRxBtcState+0x80>)
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <ExtLightsRxBtcState+0x84>)
 8000fa2:	701a      	strb	r2, [r3, #0]
	ExtLights_TurnSignalLeft_CurrentState 	= Btc_TurnSignalLeft;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <ExtLightsRxBtcState+0x88>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <ExtLightsRxBtcState+0x8c>)
 8000faa:	701a      	strb	r2, [r3, #0]
	ExtLights_TurnSignalRight_CurrentState 	= Btc_TurnSignalRight;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <ExtLightsRxBtcState+0x90>)
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <ExtLightsRxBtcState+0x94>)
 8000fb2:	701a      	strb	r2, [r3, #0]
	ExtLights_HazardLight_CurrentState		= Btc_HazardLight;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <ExtLightsRxBtcState+0x98>)
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <ExtLightsRxBtcState+0x9c>)
 8000fba:	701a      	strb	r2, [r3, #0]

}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200000af 	.word	0x200000af
 8000fcc:	2000009c 	.word	0x2000009c
 8000fd0:	200000a6 	.word	0x200000a6
 8000fd4:	2000009f 	.word	0x2000009f
 8000fd8:	200000a7 	.word	0x200000a7
 8000fdc:	200000a0 	.word	0x200000a0
 8000fe0:	200000a9 	.word	0x200000a9
 8000fe4:	200000a1 	.word	0x200000a1
 8000fe8:	200000ae 	.word	0x200000ae
 8000fec:	200000a5 	.word	0x200000a5
 8000ff0:	200000ad 	.word	0x200000ad
 8000ff4:	2000009d 	.word	0x2000009d
 8000ff8:	200000aa 	.word	0x200000aa
 8000ffc:	200000a2 	.word	0x200000a2
 8001000:	200000ab 	.word	0x200000ab
 8001004:	200000a3 	.word	0x200000a3
 8001008:	200000ac 	.word	0x200000ac
 800100c:	200000a4 	.word	0x200000a4

08001010 <ExtLightsLightReadSensorValue>:

uint32 ExtLightsLightReadSensorValue()
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
	uint8 sensorValue = STD_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 2);
 800101a:	2202      	movs	r2, #2
 800101c:	490b      	ldr	r1, [pc, #44]	; (800104c <ExtLightsLightReadSensorValue+0x3c>)
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <ExtLightsLightReadSensorValue+0x40>)
 8001020:	f002 fb7c 	bl	800371c <HAL_ADC_Start_DMA>

	if(ADC_BUFFER[1] < 4000)
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <ExtLightsLightReadSensorValue+0x3c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800102c:	d202      	bcs.n	8001034 <ExtLightsLightReadSensorValue+0x24>
	{

		sensorValue = STD_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e006      	b.n	8001042 <ExtLightsLightReadSensorValue+0x32>

	}
	else if(ADC_BUFFER[1] > 4000)
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <ExtLightsLightReadSensorValue+0x3c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800103c:	d901      	bls.n	8001042 <ExtLightsLightReadSensorValue+0x32>
	{

		sensorValue = STD_HIGH;
 800103e:	2301      	movs	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]

		/* do nothing */

	}

	return sensorValue;
 8001042:	79fb      	ldrb	r3, [r7, #7]

}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200000c0 	.word	0x200000c0
 8001050:	200000e0 	.word	0x200000e0

08001054 <ExtLightsLowBeam>:

void ExtLightsLowBeam(uint8 PinState)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	461a      	mov	r2, r3
 8001062:	2110      	movs	r1, #16
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <ExtLightsLowBeam+0x20>)
 8001066:	f004 fadf 	bl	8005628 <HAL_GPIO_WritePin>

}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020000 	.word	0x40020000

08001078 <ExtLightsHighBeam>:

void ExtLightsHighBeam(uint8 PinState)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	461a      	mov	r2, r3
 8001086:	2101      	movs	r1, #1
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <ExtLightsHighBeam+0x20>)
 800108a:	f004 facd 	bl	8005628 <HAL_GPIO_WritePin>

}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020400 	.word	0x40020400

0800109c <ExtLightsDayTimeRunningLight>:

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	461a      	mov	r2, r3
 80010aa:	2102      	movs	r1, #2
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <ExtLightsDayTimeRunningLight+0x20>)
 80010ae:	f004 fabb 	bl	8005628 <HAL_GPIO_WritePin>

}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020000 	.word	0x40020000

080010c0 <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	461a      	mov	r2, r3
 80010ce:	2108      	movs	r1, #8
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <ExtLightsFrontFogLight+0x20>)
 80010d2:	f004 faa9 	bl	8005628 <HAL_GPIO_WritePin>

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40020800 	.word	0x40020800

080010e4 <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	461a      	mov	r2, r3
 80010f2:	2101      	movs	r1, #1
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <ExtLightsTurnSignalLeft+0x20>)
 80010f6:	f004 fa97 	bl	8005628 <HAL_GPIO_WritePin>

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020800 	.word	0x40020800

08001108 <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	461a      	mov	r2, r3
 8001116:	2102      	movs	r1, #2
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <ExtLightsTurnSignalRight+0x20>)
 800111a:	f004 fa85 	bl	8005628 <HAL_GPIO_WritePin>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40020800 	.word	0x40020800

0800112c <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	461a      	mov	r2, r3
 800113a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <ExtLightsRearPositionLight+0x20>)
 8001140:	f004 fa72 	bl	8005628 <HAL_GPIO_WritePin>

}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40020800 	.word	0x40020800

08001150 <ExtLightsRearFogLight>:

void ExtLightsRearFogLight(uint8 PinState)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	461a      	mov	r2, r3
 800115e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <ExtLightsRearFogLight+0x20>)
 8001164:	f004 fa60 	bl	8005628 <HAL_GPIO_WritePin>

}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40020800 	.word	0x40020800

08001174 <ExtLightsBrakeLight>:

void ExtLightsBrakeLight(uint8 PinState)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	461a      	mov	r2, r3
 8001182:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001186:	4803      	ldr	r0, [pc, #12]	; (8001194 <ExtLightsBrakeLight+0x20>)
 8001188:	f004 fa4e 	bl	8005628 <HAL_GPIO_WritePin>

}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020800 	.word	0x40020800

08001198 <ExtLightsReverseLight>:

void ExtLightsReverseLight(uint8 PinState)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	461a      	mov	r2, r3
 80011a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <ExtLightsReverseLight+0x20>)
 80011ac:	f004 fa3c 	bl	8005628 <HAL_GPIO_WritePin>

}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40020000 	.word	0x40020000

080011bc <ExtLightsLicensePlateLight>:

void ExtLightsLicensePlateLight(uint8 PinState)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	461a      	mov	r2, r3
 80011ca:	2104      	movs	r1, #4
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <ExtLightsLicensePlateLight+0x20>)
 80011ce:	f004 fa2b 	bl	8005628 <HAL_GPIO_WritePin>

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020000 	.word	0x40020000

080011e0 <IntLightsRxBtcState>:
void IntLightsMainFunction();
void IntLightsToggleIntLights(uint8 PinState);
void IntLightsRxBtcState();

void IntLightsRxBtcState()
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand = BtcReceivedDataOnBluetooth;
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <IntLightsRxBtcState+0x98>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]

	switch(lightsStateFromBtcCommand)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	2b13      	cmp	r3, #19
 80011f2:	d83b      	bhi.n	800126c <IntLightsRxBtcState+0x8c>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <IntLightsRxBtcState+0x1c>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	0800124d 	.word	0x0800124d
 8001200:	08001255 	.word	0x08001255
 8001204:	0800126d 	.word	0x0800126d
 8001208:	0800126d 	.word	0x0800126d
 800120c:	0800126d 	.word	0x0800126d
 8001210:	0800126d 	.word	0x0800126d
 8001214:	0800126d 	.word	0x0800126d
 8001218:	0800126d 	.word	0x0800126d
 800121c:	0800126d 	.word	0x0800126d
 8001220:	0800126d 	.word	0x0800126d
 8001224:	0800126d 	.word	0x0800126d
 8001228:	0800126d 	.word	0x0800126d
 800122c:	0800126d 	.word	0x0800126d
 8001230:	0800126d 	.word	0x0800126d
 8001234:	0800126d 	.word	0x0800126d
 8001238:	0800126d 	.word	0x0800126d
 800123c:	0800126d 	.word	0x0800126d
 8001240:	0800126d 	.word	0x0800126d
 8001244:	0800125d 	.word	0x0800125d
 8001248:	08001265 	.word	0x08001265
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <IntLightsRxBtcState+0x9c>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]

			break;
 8001252:	e00b      	b.n	800126c <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <IntLightsRxBtcState+0x9c>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]

			break;
 800125a:	e007      	b.n	800126c <IntLightsRxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <IntLightsRxBtcState+0x9c>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]

			break;
 8001262:	e003      	b.n	800126c <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <IntLightsRxBtcState+0x9c>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]

			break;
 800126a:	bf00      	nop

	}

}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000090 	.word	0x20000090
 800127c:	200000c9 	.word	0x200000c9

08001280 <IntLightsMainFunction>:

void IntLightsMainFunction()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

	IntLightsRxBtcState();
 8001284:	f7ff ffac 	bl	80011e0 <IntLightsRxBtcState>
	IntLightsToggleIntLights(IntLights_CurrentState);
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <IntLightsMainFunction+0x18>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f805 	bl	800129c <IntLightsToggleIntLights>

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200000c9 	.word	0x200000c9

0800129c <IntLightsToggleIntLights>:
	return E_OK;

}

void IntLightsToggleIntLights(uint8 PinState)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	461a      	mov	r2, r3
 80012aa:	2104      	movs	r1, #4
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <IntLightsToggleIntLights+0x20>)
 80012ae:	f004 f9bb 	bl	8005628 <HAL_GPIO_WritePin>

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020800 	.word	0x40020800

080012c0 <SecAlmLightsBuzzerControl>:
void SecAlmLightsBuzzerControl();


uint8 SecAlm_TriggerPreviousState;
void SecAlmLightsBuzzerControl()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

	uint16 sensorStatus = STD_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	80fb      	strh	r3, [r7, #6]

	sensorStatus = SecAlmVibSenStatus();
 80012ca:	f000 f89b 	bl	8001404 <SecAlmVibSenStatus>
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]

	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 80012d2:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <SecAlmLightsBuzzerControl+0xf4>)
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <SecAlmLightsBuzzerControl+0xf8>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d006      	beq.n	80012ec <SecAlmLightsBuzzerControl+0x2c>
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <SecAlmLightsBuzzerControl+0xf8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <SecAlmLightsBuzzerControl+0x2c>
	{

		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 80012e6:	4b35      	ldr	r3, [pc, #212]	; (80013bc <SecAlmLightsBuzzerControl+0xfc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 80012ec:	4b33      	ldr	r3, [pc, #204]	; (80013bc <SecAlmLightsBuzzerControl+0xfc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b13      	cmp	r3, #19
 80012f2:	d920      	bls.n	8001336 <SecAlmLightsBuzzerControl+0x76>
	{

		SecAlm_TriggerPreviousState 		= SecAlm_Trigger;
 80012f4:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <SecAlmLightsBuzzerControl+0xf8>)
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <SecAlmLightsBuzzerControl+0xf4>)
 80012fa:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag 					= STD_HIGH;
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <SecAlmLightsBuzzerControl+0x100>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag 				= STD_LOW;
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <SecAlmLightsBuzzerControl+0x104>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 						= STD_LOW;
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <SecAlmLightsBuzzerControl+0xf8>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 				= STD_LOW;
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <SecAlmLightsBuzzerControl+0x108>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <SecAlmLightsBuzzerControl+0xfc>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 			= STD_LOW;
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <SecAlmLightsBuzzerControl+0x10c>)
 800131c:	2200      	movs	r2, #0
 800131e:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 				= STD_LOW;
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <SecAlmLightsBuzzerControl+0x110>)
 8001322:	2200      	movs	r2, #0
 8001324:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 			= STD_LOW;
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <SecAlmLightsBuzzerControl+0x10c>)
 8001328:	2200      	movs	r2, #0
 800132a:	801a      	strh	r2, [r3, #0]

		HAL_TIM_Base_Stop_IT(&htim4);
 800132c:	4829      	ldr	r0, [pc, #164]	; (80013d4 <SecAlmLightsBuzzerControl+0x114>)
 800132e:	f009 f867 	bl	800a400 <HAL_TIM_Base_Stop_IT>
		SecAlmTurnOnExtLights();
 8001332:	f000 f8bd 	bl	80014b0 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

	if(SecAlm_SensorStatusCounter == STD_LOW)
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <SecAlmLightsBuzzerControl+0x10c>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d107      	bne.n	800134e <SecAlmLightsBuzzerControl+0x8e>
	{

		sensorStatus 	= STD_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	80fb      	strh	r3, [r7, #6]
		SecAlm_Trigger 	= STD_LOW;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <SecAlmLightsBuzzerControl+0xf8>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <SecAlmLightsBuzzerControl+0x108>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(sensorStatus == STD_HIGH)
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d102      	bne.n	800135a <SecAlmLightsBuzzerControl+0x9a>
	{

		SecAlm_Trigger = STD_HIGH;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <SecAlmLightsBuzzerControl+0xf8>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_Trigger == STD_HIGH)
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <SecAlmLightsBuzzerControl+0xf8>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d11c      	bne.n	800139c <SecAlmLightsBuzzerControl+0xdc>
	{

		HAL_TIM_Base_Start_IT(&htim4);
 8001362:	481c      	ldr	r0, [pc, #112]	; (80013d4 <SecAlmLightsBuzzerControl+0x114>)
 8001364:	f008 ffba 	bl	800a2dc <HAL_TIM_Base_Start_IT>

		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <SecAlmLightsBuzzerControl+0xfc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <SecAlmLightsBuzzerControl+0xc2>
		{

			SecAlm_PinStateChange = STD_HIGH;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <SecAlmLightsBuzzerControl+0x108>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
			SecAlmTurnOnExtLights();
 800137c:	f000 f898 	bl	80014b0 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

}
 8001380:	e013      	b.n	80013aa <SecAlmLightsBuzzerControl+0xea>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <SecAlmLightsBuzzerControl+0xfc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10c      	bne.n	80013aa <SecAlmLightsBuzzerControl+0xea>
			SecAlm_PinStateChange = STD_LOW;
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <SecAlmLightsBuzzerControl+0x108>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
			SecAlmTurnOnExtLights();
 8001396:	f000 f88b 	bl	80014b0 <SecAlmTurnOnExtLights>
}
 800139a:	e006      	b.n	80013aa <SecAlmLightsBuzzerControl+0xea>
	else if(SecAlm_Trigger == STD_LOW)
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <SecAlmLightsBuzzerControl+0xf8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <SecAlmLightsBuzzerControl+0xea>
		SecAlmToggleAlarmBuzzer(STD_LOW);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 f8d7 	bl	8001558 <SecAlmToggleAlarmBuzzer>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200000de 	.word	0x200000de
 80013b8:	200000cb 	.word	0x200000cb
 80013bc:	200000cd 	.word	0x200000cd
 80013c0:	20000099 	.word	0x20000099
 80013c4:	2000009b 	.word	0x2000009b
 80013c8:	200000cc 	.word	0x200000cc
 80013cc:	200000ce 	.word	0x200000ce
 80013d0:	200000d0 	.word	0x200000d0
 80013d4:	200005b4 	.word	0x200005b4

080013d8 <SecAlmVibeSenReadPin>:


uint16 SecAlmVibeSenReadPin()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

	uint16 sensorValue = STD_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 2);
 80013e2:	2202      	movs	r2, #2
 80013e4:	4905      	ldr	r1, [pc, #20]	; (80013fc <SecAlmVibeSenReadPin+0x24>)
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <SecAlmVibeSenReadPin+0x28>)
 80013e8:	f002 f998 	bl	800371c <HAL_ADC_Start_DMA>

	sensorValue = ADC_BUFFER[0];
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <SecAlmVibeSenReadPin+0x24>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	80fb      	strh	r3, [r7, #6]

	return sensorValue;
 80013f2:	88fb      	ldrh	r3, [r7, #6]

}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200000c0 	.word	0x200000c0
 8001400:	200000e0 	.word	0x200000e0

08001404 <SecAlmVibSenStatus>:

StdReturnType SecAlmVibSenStatus()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

	uint16 sensorValue 		= STD_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	80bb      	strh	r3, [r7, #4]
	uint16 sensorStatus 	= STD_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	80fb      	strh	r3, [r7, #6]

	sensorValue = SecAlmVibeSenReadPin();
 8001412:	f7ff ffe1 	bl	80013d8 <SecAlmVibeSenReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	80bb      	strh	r3, [r7, #4]
	currentTick = HAL_GetTick();
 800141a:	f001 feaf 	bl	800317c <HAL_GetTick>
 800141e:	4603      	mov	r3, r0
 8001420:	4a1e      	ldr	r2, [pc, #120]	; (800149c <SecAlmVibSenStatus+0x98>)
 8001422:	6013      	str	r3, [r2, #0]

	if(sensorValue != debouncedSensorValue)
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <SecAlmVibSenStatus+0x9c>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	88ba      	ldrh	r2, [r7, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	d01d      	beq.n	800146a <SecAlmVibSenStatus+0x66>
	{

		if((currentTick - lastTick) >= SECALM_DEBOUNCETIME_SENSOR_VALUE)
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <SecAlmVibSenStatus+0x98>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <SecAlmVibSenStatus+0xa0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b31      	cmp	r3, #49	; 0x31
 800143a:	d902      	bls.n	8001442 <SecAlmVibSenStatus+0x3e>
		{

			debouncedSensorValue = sensorValue;
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <SecAlmVibSenStatus+0x9c>)
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	8013      	strh	r3, [r2, #0]

			/* do nothing */

		}

		if(debouncedSensorValue == 4095)
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <SecAlmVibSenStatus+0x9c>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	f640 72ff 	movw	r2, #4095	; 0xfff
 800144a:	4293      	cmp	r3, r2
 800144c:	d111      	bne.n	8001472 <SecAlmVibSenStatus+0x6e>
		{

			SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <SecAlmVibSenStatus+0xa4>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <SecAlmVibSenStatus+0xa4>)
 8001458:	801a      	strh	r2, [r3, #0]
			osTimerStart(AlarmResetHandle, 10000);
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <SecAlmVibSenStatus+0xa8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001462:	4618      	mov	r0, r3
 8001464:	f00b f992 	bl	800c78c <osTimerStart>
 8001468:	e003      	b.n	8001472 <SecAlmVibSenStatus+0x6e>

	}
	else
	{

		lastTick = currentTick;
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <SecAlmVibSenStatus+0x98>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <SecAlmVibSenStatus+0xa0>)
 8001470:	6013      	str	r3, [r2, #0]

	}

	if(SecAlm_SensorStatusCounter >= 2000)
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <SecAlmVibSenStatus+0xa4>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800147a:	d302      	bcc.n	8001482 <SecAlmVibSenStatus+0x7e>
	{

		sensorStatus = STD_HIGH;
 800147c:	2301      	movs	r3, #1
 800147e:	80fb      	strh	r3, [r7, #6]
 8001480:	e006      	b.n	8001490 <SecAlmVibSenStatus+0x8c>

	}
	else if(SecAlm_SensorStatusCounter < 2000)
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <SecAlmVibSenStatus+0xa4>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800148a:	d201      	bcs.n	8001490 <SecAlmVibSenStatus+0x8c>
	{

		sensorStatus = STD_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	80fb      	strh	r3, [r7, #6]

		/* do nothing */

	}

	return sensorStatus;
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	b2db      	uxtb	r3, r3

}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200000d8 	.word	0x200000d8
 80014a0:	200000dc 	.word	0x200000dc
 80014a4:	200000d4 	.word	0x200000d4
 80014a8:	200000ce 	.word	0x200000ce
 80014ac:	200001d4 	.word	0x200001d4

080014b0 <SecAlmTurnOnExtLights>:


void SecAlmTurnOnExtLights()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

	ExtLightsLowBeam(SecAlm_PinStateChange);
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <SecAlmTurnOnExtLights+0x50>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fdcb 	bl	8001054 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(SecAlm_PinStateChange);
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <SecAlmTurnOnExtLights+0x50>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fe32 	bl	800112c <ExtLightsRearPositionLight>
	ExtLightsFrontFogLight(SecAlm_PinStateChange);
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <SecAlmTurnOnExtLights+0x50>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fdf7 	bl	80010c0 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(SecAlm_PinStateChange);
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <SecAlmTurnOnExtLights+0x50>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe3a 	bl	8001150 <ExtLightsRearFogLight>
	ExtLightsTurnSignalRight(SecAlm_PinStateChange);
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <SecAlmTurnOnExtLights+0x50>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe11 	bl	8001108 <ExtLightsTurnSignalRight>
	ExtLightsTurnSignalLeft(SecAlm_PinStateChange);
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <SecAlmTurnOnExtLights+0x50>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fdfa 	bl	80010e4 <ExtLightsTurnSignalLeft>
	SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <SecAlmTurnOnExtLights+0x50>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f82f 	bl	8001558 <SecAlmToggleAlarmBuzzer>

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000cc 	.word	0x200000cc

08001504 <SecAlmMainFunction>:

void SecAlmMainFunction()
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

	SecAlmLightsBuzzerControl();
 8001508:	f7ff feda 	bl	80012c0 <SecAlmLightsBuzzerControl>

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <SecAlmInit>:


StdReturnType SecAlmInit()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

	SecAlm_Trigger 						= STD_LOW;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <SecAlmInit+0x30>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <SecAlmInit+0x34>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <SecAlmInit+0x38>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <SecAlmInit+0x3c>)
 8001528:	2200      	movs	r2, #0
 800152a:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus 				= STD_LOW;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <SecAlmInit+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Init(&htim4);
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <SecAlmInit+0x44>)
 8001534:	f008 fe00 	bl	800a138 <HAL_TIM_Base_Init>

	return E_OK;
 8001538:	2300      	movs	r3, #0

}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200000cb 	.word	0x200000cb
 8001544:	200000cc 	.word	0x200000cc
 8001548:	200000cd 	.word	0x200000cd
 800154c:	200000ce 	.word	0x200000ce
 8001550:	200000d0 	.word	0x200000d0
 8001554:	200005b4 	.word	0x200005b4

08001558 <SecAlmToggleAlarmBuzzer>:


void SecAlmToggleAlarmBuzzer(uint8 PinState)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	461a      	mov	r2, r3
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <SecAlmToggleAlarmBuzzer+0x20>)
 800156c:	f004 f85c 	bl	8005628 <HAL_GPIO_WritePin>

}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40020400 	.word	0x40020400

0800157c <SecAlmToggleAlarmLed>:


void SecAlmToggleAlarmLed(uint8 PinState)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	461a      	mov	r2, r3
 800158a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <SecAlmToggleAlarmLed+0x20>)
 8001590:	f004 f84a 	bl	8005628 <HAL_GPIO_WritePin>

}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40020000 	.word	0x40020000

080015a0 <MCP2515_Initialize>:
uint8_t MCP2515_ReadStatus(void);
uint8_t MCP2515_GetRxStatus(void);
void MCP2515_BitModify(uint8_t address, uint8_t mask, uint8_t data);

/* MCP2515 Initialize */
bool MCP2515_Initialize(void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();

  uint8_t loop = 10;
 80015a6:	230a      	movs	r3, #10
 80015a8:	71fb      	strb	r3, [r7, #7]

  do{
    /* SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY){
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <MCP2515_Initialize+0x30>)
 80015ac:	f008 fc70 	bl	8009e90 <HAL_SPI_GetState>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <MCP2515_Initialize+0x1a>
      return true;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e006      	b.n	80015c8 <MCP2515_Initialize+0x28>
    }
    loop--;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	3b01      	subs	r3, #1
 80015be:	71fb      	strb	r3, [r7, #7]
  }while(loop > 0);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f1      	bne.n	80015aa <MCP2515_Initialize+0xa>

  return false;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000298 	.word	0x20000298

080015d4 <MCP2515_SetConfigMode>:

/* MCP2515 Set Configuration Mode */
bool MCP2515_SetConfigMode(void){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* CANCTRL Register Configuration Mode */
  MCP2515_WriteByte(MCP2515_CANCTRL, MODE_CONFIG);
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	200f      	movs	r0, #15
 80015de:	f000 f866 	bl	80016ae <MCP2515_WriteByte>

  uint8_t loop = 10;
 80015e2:	230a      	movs	r3, #10
 80015e4:	71fb      	strb	r3, [r7, #7]

  do{
    /* Confirm Operation */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & MODE_MASK) == MODE_CONFIG){
 80015e6:	200e      	movs	r0, #14
 80015e8:	f000 f837 	bl	800165a <MCP2515_ReadByte>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80015f2:	2b80      	cmp	r3, #128	; 0x80
 80015f4:	d101      	bne.n	80015fa <MCP2515_SetConfigMode+0x26>
      return true;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e006      	b.n	8001608 <MCP2515_SetConfigMode+0x34>
    }
    loop--;
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	71fb      	strb	r3, [r7, #7]
  }while(loop > 0);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ef      	bne.n	80015e6 <MCP2515_SetConfigMode+0x12>

  return false;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <MCP2515_SetNormalMode>:

/* MCP2515 Set Normal Mode */
bool MCP2515_SetNormalMode(void){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* CANCTRL Register Normal Mode */
  MCP2515_WriteByte(MCP2515_CANCTRL, MODE_NORMAL);
 8001616:	2100      	movs	r1, #0
 8001618:	200f      	movs	r0, #15
 800161a:	f000 f848 	bl	80016ae <MCP2515_WriteByte>

  uint8_t loop = 10;
 800161e:	230a      	movs	r3, #10
 8001620:	71fb      	strb	r3, [r7, #7]

  do{
    /* Confirm Operation */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & MODE_MASK) == MODE_NORMAL){
 8001622:	200e      	movs	r0, #14
 8001624:	f000 f819 	bl	800165a <MCP2515_ReadByte>
 8001628:	4603      	mov	r3, r0
 800162a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <MCP2515_SetNormalMode+0x26>
      return true;
 8001632:	2301      	movs	r3, #1
 8001634:	e006      	b.n	8001644 <MCP2515_SetNormalMode+0x34>
    }
    loop--;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	3b01      	subs	r3, #1
 800163a:	71fb      	strb	r3, [r7, #7]
  }while(loop > 0);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ef      	bne.n	8001622 <MCP2515_SetNormalMode+0x12>

  return false;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <MCP2515_Reset>:

/* MCP2515 SPI Reset */
void MCP2515_Reset(void){
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();

  SPI_Tx(MCP2515_RESET);
 8001650:	20c0      	movs	r0, #192	; 0xc0
 8001652:	f000 f8d9 	bl	8001808 <SPI_Tx>

  MCP2515_CS_HIGH();
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}

0800165a <MCP2515_ReadByte>:

/* Read Byte */
uint8_t MCP2515_ReadByte (uint8_t address){
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();

  SPI_Tx(MCP2515_READ);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f8cf 	bl	8001808 <SPI_Tx>
  SPI_Tx(address);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f8cb 	bl	8001808 <SPI_Tx>
  retVal = SPI_Rx();
 8001672:	f000 f8ef 	bl	8001854 <SPI_Rx>
 8001676:	4603      	mov	r3, r0
 8001678:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();

  return retVal;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <MCP2515_ReadRxSequence>:

/* Read Sequential Bytes */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	4613      	mov	r3, r2
 8001692:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();

  SPI_Tx(instruction);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f8b6 	bl	8001808 <SPI_Tx>
  SPI_RxBuffer(data, length);
 800169c:	79bb      	ldrb	r3, [r7, #6]
 800169e:	4619      	mov	r1, r3
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f000 f8e7 	bl	8001874 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <MCP2515_WriteByte>:

/* Write Byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data){
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	460a      	mov	r2, r1
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	4613      	mov	r3, r2
 80016bc:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();

  SPI_Tx(MCP2515_WRITE);
 80016be:	2002      	movs	r0, #2
 80016c0:	f000 f8a2 	bl	8001808 <SPI_Tx>
  SPI_Tx(address);
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f89e 	bl	8001808 <SPI_Tx>
  SPI_Tx(data);
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f89a 	bl	8001808 <SPI_Tx>

  MCP2515_CS_HIGH();
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <MCP2515_WriteByteSequence>:

/* Write Sequential Bytes */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	603a      	str	r2, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	460b      	mov	r3, r1
 80016ea:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();

  SPI_Tx(MCP2515_WRITE);
 80016ec:	2002      	movs	r0, #2
 80016ee:	f000 f88b 	bl	8001808 <SPI_Tx>
  SPI_Tx(startAddress);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f887 	bl	8001808 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80016fa:	79ba      	ldrb	r2, [r7, #6]
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	3301      	adds	r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	f000 f88f 	bl	800182c <SPI_TxBuffer>

  MCP2515_CS_HIGH();
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <MCP2515_LoadTxSequence>:

/* Write Sequential Bytes to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data){
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	4613      	mov	r3, r2
 8001726:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();

  SPI_Tx(instruction);
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f86c 	bl	8001808 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8001730:	2104      	movs	r1, #4
 8001732:	68b8      	ldr	r0, [r7, #8]
 8001734:	f000 f87a 	bl	800182c <SPI_TxBuffer>
  SPI_Tx(dlc);
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f864 	bl	8001808 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f871 	bl	800182c <SPI_TxBuffer>

  MCP2515_CS_HIGH();
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <MCP2515_LoadTxBuffer>:

/* Write Byte to TxBuffer */
void MCP2515_LoadTxBuffer(uint8_t instruction, uint8_t data){
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	460a      	mov	r2, r1
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	4613      	mov	r3, r2
 8001760:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();

  SPI_Tx(instruction);
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f84f 	bl	8001808 <SPI_Tx>
  SPI_Tx(data);
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f84b 	bl	8001808 <SPI_Tx>

  MCP2515_CS_HIGH();
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <MCP2515_RequestToSend>:

/* Transmit TxBuffer using RTS Command */
void MCP2515_RequestToSend(uint8_t instruction){
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();

  SPI_Tx(instruction);
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f83e 	bl	8001808 <SPI_Tx>

  MCP2515_CS_HIGH();
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <MCP2515_ReadStatus>:

/* MCP2515 Read Status */
uint8_t MCP2515_ReadStatus(void){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();

  SPI_Tx(MCP2515_READ_STATUS);
 800179a:	20a0      	movs	r0, #160	; 0xa0
 800179c:	f000 f834 	bl	8001808 <SPI_Tx>
  retVal = SPI_Rx();
 80017a0:	f000 f858 	bl	8001854 <SPI_Rx>
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();

  return retVal;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <MCP2515_GetRxStatus>:

/* MCP2515 Get RxStatus */
uint8_t MCP2515_GetRxStatus(void){
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();

  SPI_Tx(MCP2515_RX_STATUS);
 80017b8:	20b0      	movs	r0, #176	; 0xb0
 80017ba:	f000 f825 	bl	8001808 <SPI_Tx>
  retVal = SPI_Rx();
 80017be:	f000 f849 	bl	8001854 <SPI_Rx>
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();

  return retVal;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <MCP2515_BitModify>:

/* Change Register Value */
void MCP2515_BitModify(uint8_t address, uint8_t mask, uint8_t data){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	460b      	mov	r3, r1
 80017dc:	71bb      	strb	r3, [r7, #6]
 80017de:	4613      	mov	r3, r2
 80017e0:	717b      	strb	r3, [r7, #5]
  MCP2515_CS_LOW();

  SPI_Tx(MCP2515_BIT_MOD);
 80017e2:	2005      	movs	r0, #5
 80017e4:	f000 f810 	bl	8001808 <SPI_Tx>
  SPI_Tx(address);
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f80c 	bl	8001808 <SPI_Tx>
  SPI_Tx(mask);
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f808 	bl	8001808 <SPI_Tx>
  SPI_Tx(data);
 80017f8:	797b      	ldrb	r3, [r7, #5]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f804 	bl	8001808 <SPI_Tx>

  MCP2515_CS_HIGH();
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <SPI_Tx>:

/* SPI Tx Wrapper Function */
static void SPI_Tx(uint8_t data){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001812:	1df9      	adds	r1, r7, #7
 8001814:	230a      	movs	r3, #10
 8001816:	2201      	movs	r2, #1
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <SPI_Tx+0x20>)
 800181a:	f007 fccf 	bl	80091bc <HAL_SPI_Transmit>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000298 	.word	0x20000298

0800182c <SPI_TxBuffer>:

/* SPI Tx Wrapper Function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	b29a      	uxth	r2, r3
 800183c:	230a      	movs	r3, #10
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <SPI_TxBuffer+0x24>)
 8001842:	f007 fcbb 	bl	80091bc <HAL_SPI_Transmit>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000298 	.word	0x20000298

08001854 <SPI_Rx>:

/* SPI Rx Wrapper Function */
static uint8_t SPI_Rx(void){
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800185a:	1df9      	adds	r1, r7, #7
 800185c:	230a      	movs	r3, #10
 800185e:	2201      	movs	r2, #1
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <SPI_Rx+0x1c>)
 8001862:	f007 fe1b 	bl	800949c <HAL_SPI_Receive>
  return retVal;
 8001866:	79fb      	ldrb	r3, [r7, #7]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000298 	.word	0x20000298

08001874 <SPI_RxBuffer>:

/* SPI Rx Wrapper Function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	b29a      	uxth	r2, r3
 8001884:	230a      	movs	r3, #10
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <SPI_RxBuffer+0x24>)
 800188a:	f007 fe07 	bl	800949c <HAL_SPI_Receive>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000298 	.word	0x20000298

0800189c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018ae:	4b28      	ldr	r3, [pc, #160]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018b0:	4a28      	ldr	r2, [pc, #160]	; (8001954 <MX_ADC1_Init+0xb8>)
 80018b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018bc:	4b24      	ldr	r3, [pc, #144]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018de:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <MX_ADC1_Init+0xbc>)
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018ea:	2202      	movs	r2, #2
 80018ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018fc:	4814      	ldr	r0, [pc, #80]	; (8001950 <MX_ADC1_Init+0xb4>)
 80018fe:	f001 fc49 	bl	8003194 <HAL_ADC_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001908:	f000 fce8 	bl	80022dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800190c:	2306      	movs	r3, #6
 800190e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	4619      	mov	r1, r3
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_ADC1_Init+0xb4>)
 800191e:	f002 f83d 	bl	800399c <HAL_ADC_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001928:	f000 fcd8 	bl	80022dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800192c:	230f      	movs	r3, #15
 800192e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001930:	2302      	movs	r3, #2
 8001932:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001934:	463b      	mov	r3, r7
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_ADC1_Init+0xb4>)
 800193a:	f002 f82f 	bl	800399c <HAL_ADC_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001944:	f000 fcca 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200000e0 	.word	0x200000e0
 8001954:	40012000 	.word	0x40012000
 8001958:	0f000001 	.word	0x0f000001

0800195c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a3f      	ldr	r2, [pc, #252]	; (8001a78 <HAL_ADC_MspInit+0x11c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d178      	bne.n	8001a70 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_ADC_MspInit+0x120>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4a3d      	ldr	r2, [pc, #244]	; (8001a7c <HAL_ADC_MspInit+0x120>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_ADC_MspInit+0x120>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <HAL_ADC_MspInit+0x120>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a36      	ldr	r2, [pc, #216]	; (8001a7c <HAL_ADC_MspInit+0x120>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_ADC_MspInit+0x120>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_ADC_MspInit+0x120>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a2f      	ldr	r2, [pc, #188]	; (8001a7c <HAL_ADC_MspInit+0x120>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_ADC_MspInit+0x120>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019d2:	2340      	movs	r3, #64	; 0x40
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d6:	2303      	movs	r3, #3
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	4826      	ldr	r0, [pc, #152]	; (8001a80 <HAL_ADC_MspInit+0x124>)
 80019e6:	f003 fb85 	bl	80050f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LIGHTSEN_Pin;
 80019ea:	2320      	movs	r3, #32
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ee:	2303      	movs	r3, #3
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIGHTSEN_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4821      	ldr	r0, [pc, #132]	; (8001a84 <HAL_ADC_MspInit+0x128>)
 80019fe:	f003 fb79 	bl	80050f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a04:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <HAL_ADC_MspInit+0x130>)
 8001a06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a44:	4810      	ldr	r0, [pc, #64]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a46:	f002 fbf5 	bl	8004234 <HAL_DMA_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001a50:	f000 fc44 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a58:	639a      	str	r2, [r3, #56]	; 0x38
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <HAL_ADC_MspInit+0x12c>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2105      	movs	r1, #5
 8001a64:	2012      	movs	r0, #18
 8001a66:	f002 fb77 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a6a:	2012      	movs	r0, #18
 8001a6c:	f002 fba0 	bl	80041b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40012000 	.word	0x40012000
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40020800 	.word	0x40020800
 8001a88:	20000144 	.word	0x20000144
 8001a8c:	40026410 	.word	0x40026410

08001a90 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_CRC_Init+0x20>)
 8001a96:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <MX_CRC_Init+0x24>)
 8001a98:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_CRC_Init+0x20>)
 8001a9c:	f002 fba0 	bl	80041e0 <HAL_CRC_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001aa6:	f000 fc19 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200001a4 	.word	0x200001a4
 8001ab4:	40023000 	.word	0x40023000

08001ab8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_CRC_MspInit+0x3c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_CRC_MspInit+0x40>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_CRC_MspInit+0x40>)
 8001ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <HAL_CRC_MspInit+0x40>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023000 	.word	0x40023000
 8001af8:	40023800 	.word	0x40023800

08001afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <MX_DMA_Init+0x3c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <MX_DMA_Init+0x3c>)
 8001b0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <MX_DMA_Init+0x3c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2105      	movs	r1, #5
 8001b22:	2038      	movs	r0, #56	; 0x38
 8001b24:	f002 fb18 	bl	8004158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b28:	2038      	movs	r0, #56	; 0x38
 8001b2a:	f002 fb41 	bl	80041b0 <HAL_NVIC_EnableIRQ>

}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PdcFrontDelayTimer */
  PdcFrontDelayTimerHandle = osTimerNew(PdcFrontDelayCallback, osTimerPeriodic, NULL, &PdcFrontDelayTimer_attributes);
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <MX_FREERTOS_Init+0xb8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2101      	movs	r1, #1
 8001bda:	482c      	ldr	r0, [pc, #176]	; (8001c8c <MX_FREERTOS_Init+0xbc>)
 8001bdc:	f00a fd5a 	bl	800c694 <osTimerNew>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <MX_FREERTOS_Init+0xc0>)
 8001be4:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondFrontDelayTimer */
  PdcSecondFrontDelayTimerHandle = osTimerNew(PdcSecondFrontDelayCallback, osTimerPeriodic, NULL, &PdcSecondFrontDelayTimer_attributes);
 8001be6:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <MX_FREERTOS_Init+0xc4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	2101      	movs	r1, #1
 8001bec:	482a      	ldr	r0, [pc, #168]	; (8001c98 <MX_FREERTOS_Init+0xc8>)
 8001bee:	f00a fd51 	bl	800c694 <osTimerNew>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <MX_FREERTOS_Init+0xcc>)
 8001bf6:	6013      	str	r3, [r2, #0]

  /* creation of PdcFrontGlobalTimer */
  PdcFrontGlobalTimerHandle = osTimerNew(PdcFrontGlobalTimerCallback, osTimerPeriodic, NULL, &PdcFrontGlobalTimer_attributes);
 8001bf8:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <MX_FREERTOS_Init+0xd0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4829      	ldr	r0, [pc, #164]	; (8001ca4 <MX_FREERTOS_Init+0xd4>)
 8001c00:	f00a fd48 	bl	800c694 <osTimerNew>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <MX_FREERTOS_Init+0xd8>)
 8001c08:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearGlobalTimer */
  PdcRearGlobalTimerHandle = osTimerNew(PdcRearGlobalCallback, osTimerPeriodic, NULL, &PdcRearGlobalTimer_attributes);
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <MX_FREERTOS_Init+0xdc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4827      	ldr	r0, [pc, #156]	; (8001cb0 <MX_FREERTOS_Init+0xe0>)
 8001c12:	f00a fd3f 	bl	800c694 <osTimerNew>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <MX_FREERTOS_Init+0xe4>)
 8001c1a:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearDelayTimer */
  PdcRearDelayTimerHandle = osTimerNew(PdcRearDelayCallback, osTimerPeriodic, NULL, &PdcRearDelayTimer_attributes);
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <MX_FREERTOS_Init+0xe8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2101      	movs	r1, #1
 8001c22:	4826      	ldr	r0, [pc, #152]	; (8001cbc <MX_FREERTOS_Init+0xec>)
 8001c24:	f00a fd36 	bl	800c694 <osTimerNew>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <MX_FREERTOS_Init+0xf0>)
 8001c2c:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondRearDelayTimer */
  PdcSecondRearDelayTimerHandle = osTimerNew(PdcSecondRearDelayCallback, osTimerPeriodic, NULL, &PdcSecondRearDelayTimer_attributes);
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <MX_FREERTOS_Init+0xf4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	2101      	movs	r1, #1
 8001c34:	4824      	ldr	r0, [pc, #144]	; (8001cc8 <MX_FREERTOS_Init+0xf8>)
 8001c36:	f00a fd2d 	bl	800c694 <osTimerNew>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <MX_FREERTOS_Init+0xfc>)
 8001c3e:	6013      	str	r3, [r2, #0]

  /* creation of RLTSHL */
  RLTSHLHandle = osTimerNew(RLTSHLCallback, osTimerPeriodic, NULL, &RLTSHL_attributes);
 8001c40:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <MX_FREERTOS_Init+0x100>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	2101      	movs	r1, #1
 8001c46:	4823      	ldr	r0, [pc, #140]	; (8001cd4 <MX_FREERTOS_Init+0x104>)
 8001c48:	f00a fd24 	bl	800c694 <osTimerNew>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <MX_FREERTOS_Init+0x108>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* creation of AlarmReset */
  AlarmResetHandle = osTimerNew(AlarmReset_Callback, osTimerPeriodic, NULL, &AlarmReset_attributes);
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <MX_FREERTOS_Init+0x10c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	2101      	movs	r1, #1
 8001c58:	4821      	ldr	r0, [pc, #132]	; (8001ce0 <MX_FREERTOS_Init+0x110>)
 8001c5a:	f00a fd1b 	bl	800c694 <osTimerNew>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <MX_FREERTOS_Init+0x114>)
 8001c62:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c64:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <MX_FREERTOS_Init+0x118>)
 8001c66:	2100      	movs	r1, #0
 8001c68:	4820      	ldr	r0, [pc, #128]	; (8001cec <MX_FREERTOS_Init+0x11c>)
 8001c6a:	f00a fc4f 	bl	800c50c <osThreadNew>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <MX_FREERTOS_Init+0x120>)
 8001c72:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <MX_FREERTOS_Init+0x124>)
 8001c76:	2100      	movs	r1, #0
 8001c78:	481f      	ldr	r0, [pc, #124]	; (8001cf8 <MX_FREERTOS_Init+0x128>)
 8001c7a:	f00a fc47 	bl	800c50c <osThreadNew>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a1e      	ldr	r2, [pc, #120]	; (8001cfc <MX_FREERTOS_Init+0x12c>)
 8001c82:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	08010060 	.word	0x08010060
 8001c8c:	08001da5 	.word	0x08001da5
 8001c90:	200001b8 	.word	0x200001b8
 8001c94:	08010070 	.word	0x08010070
 8001c98:	08001db9 	.word	0x08001db9
 8001c9c:	200001bc 	.word	0x200001bc
 8001ca0:	08010080 	.word	0x08010080
 8001ca4:	08001dcd 	.word	0x08001dcd
 8001ca8:	200001c0 	.word	0x200001c0
 8001cac:	08010090 	.word	0x08010090
 8001cb0:	08001de1 	.word	0x08001de1
 8001cb4:	200001c4 	.word	0x200001c4
 8001cb8:	080100a0 	.word	0x080100a0
 8001cbc:	08001df5 	.word	0x08001df5
 8001cc0:	200001c8 	.word	0x200001c8
 8001cc4:	080100b0 	.word	0x080100b0
 8001cc8:	08001e09 	.word	0x08001e09
 8001ccc:	200001cc 	.word	0x200001cc
 8001cd0:	080100c0 	.word	0x080100c0
 8001cd4:	08001e1d 	.word	0x08001e1d
 8001cd8:	200001d0 	.word	0x200001d0
 8001cdc:	080100d0 	.word	0x080100d0
 8001ce0:	08001e31 	.word	0x08001e31
 8001ce4:	200001d4 	.word	0x200001d4
 8001ce8:	08010018 	.word	0x08010018
 8001cec:	08001d01 	.word	0x08001d01
 8001cf0:	200001b0 	.word	0x200001b0
 8001cf4:	0801003c 	.word	0x0801003c
 8001cf8:	08001d85 	.word	0x08001d85
 8001cfc:	200001b4 	.word	0x200001b4

08001d00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

		BtcMainFunction();
 8001d08:	f7fe fd7e 	bl	8000808 <BtcMainFunction>
		CenLocMainFunction();
 8001d0c:	f7fe ff40 	bl	8000b90 <CenLocMainFunction>
		ExtLightsMainFunction();
 8001d10:	f7ff f8ba 	bl	8000e88 <ExtLightsMainFunction>
		IntLightsMainFunction();
 8001d14:	f7ff fab4 	bl	8001280 <IntLightsMainFunction>
		SecAlmMainFunction();
 8001d18:	f7ff fbf4 	bl	8001504 <SecAlmMainFunction>
		 MCP2515_Initialize();
 8001d1c:	f7ff fc40 	bl	80015a0 <MCP2515_Initialize>
		 MCP2515_SetConfigMode();
 8001d20:	f7ff fc58 	bl	80015d4 <MCP2515_SetConfigMode>
		 MCP2515_SetNormalMode();
 8001d24:	f7ff fc74 	bl	8001610 <MCP2515_SetNormalMode>
		 MCP2515_Reset();
 8001d28:	f7ff fc90 	bl	800164c <MCP2515_Reset>
		 MCP2515_ReadByte (0);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fc94 	bl	800165a <MCP2515_ReadByte>
		 MCP2515_ReadRxSequence(0,0,0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fca4 	bl	8001684 <MCP2515_ReadRxSequence>
		 MCP2515_WriteByte(0, 0);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fcb5 	bl	80016ae <MCP2515_WriteByte>
		 MCP2515_WriteByteSequence(0,0,0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fcc7 	bl	80016dc <MCP2515_WriteByteSequence>
		 MCP2515_LoadTxSequence(0,0,0,0);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fcde 	bl	8001716 <MCP2515_LoadTxSequence>
		 MCP2515_LoadTxBuffer(0,0);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff fcf8 	bl	8001752 <MCP2515_LoadTxBuffer>
		 MCP2515_RequestToSend(0);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff fd09 	bl	800177a <MCP2515_RequestToSend>
		 MCP2515_ReadStatus();
 8001d68:	f7ff fd14 	bl	8001794 <MCP2515_ReadStatus>
		 MCP2515_GetRxStatus();
 8001d6c:	f7ff fd21 	bl	80017b2 <MCP2515_GetRxStatus>
		 MCP2515_BitModify(0,0,0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff fd2b 	bl	80017d0 <MCP2515_BitModify>
		osDelay(1);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f00a fc59 	bl	800c632 <osDelay>
		BtcMainFunction();
 8001d80:	e7c2      	b.n	8001d08 <StartDefaultTask+0x8>
	...

08001d84 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  lcd_init();
//	  lcd_clear();
	  OS_Counter++;
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <StartTask02+0x1c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <StartTask02+0x1c>)
 8001d94:	6013      	str	r3, [r2, #0]
	  osDelay(1);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f00a fc4b 	bl	800c632 <osDelay>
	  OS_Counter++;
 8001d9c:	e7f6      	b.n	8001d8c <StartTask02+0x8>
 8001d9e:	bf00      	nop
 8001da0:	200001ac 	.word	0x200001ac

08001da4 <PdcFrontDelayCallback>:
  /* USER CODE END StartTask02 */
}

/* PdcFrontDelayCallback function */
void PdcFrontDelayCallback(void *argument)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontDelayCallback */

  /* USER CODE END PdcFrontDelayCallback */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <PdcSecondFrontDelayCallback>:

/* PdcSecondFrontDelayCallback function */
void PdcSecondFrontDelayCallback(void *argument)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondFrontDelayCallback */

  /* USER CODE END PdcSecondFrontDelayCallback */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <PdcFrontGlobalTimerCallback>:

/* PdcFrontGlobalTimerCallback function */
void PdcFrontGlobalTimerCallback(void *argument)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontGlobalTimerCallback */

  /* USER CODE END PdcFrontGlobalTimerCallback */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <PdcRearGlobalCallback>:

/* PdcRearGlobalCallback function */
void PdcRearGlobalCallback(void *argument)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearGlobalCallback */

  /* USER CODE END PdcRearGlobalCallback */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <PdcRearDelayCallback>:

/* PdcRearDelayCallback function */
void PdcRearDelayCallback(void *argument)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearDelayCallback */

  /* USER CODE END PdcRearDelayCallback */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <PdcSecondRearDelayCallback>:

/* PdcSecondRearDelayCallback function */
void PdcSecondRearDelayCallback(void *argument)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondRearDelayCallback */

  /* USER CODE END PdcSecondRearDelayCallback */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <RLTSHLCallback>:

/* RLTSHLCallback function */
void RLTSHLCallback(void *argument)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RLTSHLCallback */



  /* USER CODE END RLTSHLCallback */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <AlarmReset_Callback>:

/* AlarmReset_Callback function */
void AlarmReset_Callback(void *argument)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AlarmReset_Callback */

	SecAlm_SensorStatusCounter = STD_LOW;
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <AlarmReset_Callback+0x1c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	801a      	strh	r2, [r3, #0]

  /* USER CODE END AlarmReset_Callback */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200000ce 	.word	0x200000ce

08001e50 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a5c      	ldr	r2, [pc, #368]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b5a      	ldr	r3, [pc, #360]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b56      	ldr	r3, [pc, #344]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a55      	ldr	r2, [pc, #340]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a47      	ldr	r2, [pc, #284]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b45      	ldr	r3, [pc, #276]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a40      	ldr	r2, [pc, #256]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTS_Pin|RTS_Pin|IL_Pin|FL_Pin
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8001ef8:	483a      	ldr	r0, [pc, #232]	; (8001fe4 <MX_GPIO_Init+0x194>)
 8001efa:	f003 fb95 	bl	8005628 <HAL_GPIO_WritePin>
                          |BUZZ1_Pin|RFL_Pin|BL_Pin|PRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRL_Pin|LPN_Pin|LB_Pin|GPIO_PIN_8
 8001efe:	2200      	movs	r2, #0
 8001f00:	f248 1116 	movw	r1, #33046	; 0x8116
 8001f04:	4838      	ldr	r0, [pc, #224]	; (8001fe8 <MX_GPIO_Init+0x198>)
 8001f06:	f003 fb8f 	bl	8005628 <HAL_GPIO_WritePin>
                          |SAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_Pin|GPIO_PIN_1|BUZZ2_Pin|CLL_Pin, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f242 0183 	movw	r1, #8323	; 0x2083
 8001f10:	4836      	ldr	r0, [pc, #216]	; (8001fec <MX_GPIO_Init+0x19c>)
 8001f12:	f003 fb89 	bl	8005628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8001f16:	f24e 33c0 	movw	r3, #58304	; 0xe3c0
 8001f1a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	482e      	ldr	r0, [pc, #184]	; (8001fe4 <MX_GPIO_Init+0x194>)
 8001f2c:	f003 f8e2 	bl	80050f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTS_Pin|RTS_Pin|IL_Pin|FL_Pin
 8001f30:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001f34:	617b      	str	r3, [r7, #20]
                          |BUZZ1_Pin|RFL_Pin|BL_Pin|PRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	4826      	ldr	r0, [pc, #152]	; (8001fe4 <MX_GPIO_Init+0x194>)
 8001f4a:	f003 f8d3 	bl	80050f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PA8
                           PAPin */
  GPIO_InitStruct.Pin = DRL_Pin|LPN_Pin|LB_Pin|GPIO_PIN_8
 8001f4e:	f248 1316 	movw	r3, #33046	; 0x8116
 8001f52:	617b      	str	r3, [r7, #20]
                          |SAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	4820      	ldr	r0, [pc, #128]	; (8001fe8 <MX_GPIO_Init+0x198>)
 8001f68:	f003 f8c4 	bl	80050f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA7 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
 8001f6c:	f641 6388 	movw	r3, #7816	; 0x1e88
 8001f70:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f72:	2303      	movs	r3, #3
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4819      	ldr	r0, [pc, #100]	; (8001fe8 <MX_GPIO_Init+0x198>)
 8001f82:	f003 f8b7 	bl	80050f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB1 PBPin PBPin */
  GPIO_InitStruct.Pin = HB_Pin|GPIO_PIN_1|BUZZ2_Pin|CLL_Pin;
 8001f86:	f242 0383 	movw	r3, #8323	; 0x2083
 8001f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4813      	ldr	r0, [pc, #76]	; (8001fec <MX_GPIO_Init+0x19c>)
 8001fa0:	f003 f8a8 	bl	80050f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8001fa4:	f241 0304 	movw	r3, #4100	; 0x1004
 8001fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001faa:	2303      	movs	r3, #3
 8001fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <MX_GPIO_Init+0x19c>)
 8001fba:	f003 f89b 	bl	80050f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <MX_GPIO_Init+0x1a0>)
 8001fd2:	f003 f88f 	bl	80050f4 <HAL_GPIO_Init>

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	40020c00 	.word	0x40020c00

08001ff4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_I2C1_Init+0x50>)
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <MX_I2C1_Init+0x54>)
 8001ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_I2C1_Init+0x50>)
 8002000:	4a12      	ldr	r2, [pc, #72]	; (800204c <MX_I2C1_Init+0x58>)
 8002002:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_I2C1_Init+0x50>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_I2C1_Init+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_I2C1_Init+0x50>)
 8002012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002016:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <MX_I2C1_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_I2C1_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <MX_I2C1_Init+0x50>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_I2C1_Init+0x50>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <MX_I2C1_Init+0x50>)
 8002032:	f003 fb2b 	bl	800568c <HAL_I2C_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800203c:	f000 f94e 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200001d8 	.word	0x200001d8
 8002048:	40005400 	.word	0x40005400
 800204c:	000186a0 	.word	0x000186a0

08002050 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a21      	ldr	r2, [pc, #132]	; (80020f4 <HAL_I2C_MspInit+0xa4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d13c      	bne.n	80020ec <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_I2C_MspInit+0xa8>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a1f      	ldr	r2, [pc, #124]	; (80020f8 <HAL_I2C_MspInit+0xa8>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_I2C_MspInit+0xa8>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800208e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002094:	2312      	movs	r3, #18
 8002096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020a0:	2304      	movs	r3, #4
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4619      	mov	r1, r3
 80020aa:	4814      	ldr	r0, [pc, #80]	; (80020fc <HAL_I2C_MspInit+0xac>)
 80020ac:	f003 f822 	bl	80050f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_I2C_MspInit+0xa8>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_I2C_MspInit+0xa8>)
 80020ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_I2C_MspInit+0xa8>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2105      	movs	r1, #5
 80020d0:	201f      	movs	r0, #31
 80020d2:	f002 f841 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020d6:	201f      	movs	r0, #31
 80020d8:	f002 f86a 	bl	80041b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2105      	movs	r1, #5
 80020e0:	2020      	movs	r0, #32
 80020e2:	f002 f839 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80020e6:	2020      	movs	r0, #32
 80020e8:	f002 f862 	bl	80041b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	; 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40005400 	.word	0x40005400
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020400 	.word	0x40020400

08002100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002104:	f001 f804 	bl	8003110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002108:	f000 f82c 	bl	8002164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210c:	f7ff fea0 	bl	8001e50 <MX_GPIO_Init>
  MX_DMA_Init();
 8002110:	f7ff fcf4 	bl	8001afc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002114:	f000 febe 	bl	8002e94 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002118:	f000 fc68 	bl	80029ec <MX_TIM2_Init>
  MX_TIM3_Init();
 800211c:	f000 fcb4 	bl	8002a88 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002120:	f000 fd4e 	bl	8002bc0 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002124:	f000 fcfe 	bl	8002b24 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002128:	f7ff fbb8 	bl	800189c <MX_ADC1_Init>
  MX_CRC_Init();
 800212c:	f7ff fcb0 	bl	8001a90 <MX_CRC_Init>
  MX_TIM9_Init();
 8002130:	f000 fd96 	bl	8002c60 <MX_TIM9_Init>
  MX_SPI1_Init();
 8002134:	f000 f97e 	bl	8002434 <MX_SPI1_Init>
  MX_MBEDTLS_Init();
 8002138:	f00a f952 	bl	800c3e0 <MX_MBEDTLS_Init>
  MX_TIM11_Init();
 800213c:	f000 fdca 	bl	8002cd4 <MX_TIM11_Init>
  MX_I2C1_Init();
 8002140:	f7ff ff58 	bl	8001ff4 <MX_I2C1_Init>
  MX_RTC_Init();
 8002144:	f000 f8da 	bl	80022fc <MX_RTC_Init>
  MX_SPI2_Init();
 8002148:	f000 f9ac 	bl	80024a4 <MX_SPI2_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 800214c:	f00a f948 	bl	800c3e0 <MX_MBEDTLS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002150:	f000 f872 	bl	8002238 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002154:	f00a f990 	bl	800c478 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002158:	f7ff fd3a 	bl	8001bd0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800215c:	f00a f9b0 	bl	800c4c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002160:	e7fe      	b.n	8002160 <main+0x60>
	...

08002164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b094      	sub	sp, #80	; 0x50
 8002168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216a:	f107 0320 	add.w	r3, r7, #32
 800216e:	2230      	movs	r2, #48	; 0x30
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f00d face 	bl	800f714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	4b28      	ldr	r3, [pc, #160]	; (8002230 <SystemClock_Config+0xcc>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a27      	ldr	r2, [pc, #156]	; (8002230 <SystemClock_Config+0xcc>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <SystemClock_Config+0xcc>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a4:	2300      	movs	r3, #0
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	4b22      	ldr	r3, [pc, #136]	; (8002234 <SystemClock_Config+0xd0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a21      	ldr	r2, [pc, #132]	; (8002234 <SystemClock_Config+0xd0>)
 80021ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <SystemClock_Config+0xd0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80021c0:	2309      	movs	r3, #9
 80021c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021ca:	2301      	movs	r3, #1
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ce:	2302      	movs	r3, #2
 80021d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021d8:	2304      	movs	r3, #4
 80021da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80021dc:	2364      	movs	r3, #100	; 0x64
 80021de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e0:	2302      	movs	r3, #2
 80021e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021e4:	2304      	movs	r3, #4
 80021e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	4618      	mov	r0, r3
 80021ee:	f005 f967 	bl	80074c0 <HAL_RCC_OscConfig>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021f8:	f000 f870 	bl	80022dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021fc:	230f      	movs	r3, #15
 80021fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002200:	2302      	movs	r3, #2
 8002202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	2103      	movs	r1, #3
 8002218:	4618      	mov	r0, r3
 800221a:	f005 fc79 	bl	8007b10 <HAL_RCC_ClockConfig>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002224:	f000 f85a 	bl	80022dc <Error_Handler>
  }
}
 8002228:	bf00      	nop
 800222a:	3750      	adds	r7, #80	; 0x50
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	40007000 	.word	0x40007000

08002238 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2105      	movs	r1, #5
 8002240:	2004      	movs	r0, #4
 8002242:	f001 ff89 	bl	8004158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002246:	2004      	movs	r0, #4
 8002248:	f001 ffb2 	bl	80041b0 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2105      	movs	r1, #5
 8002250:	2051      	movs	r0, #81	; 0x51
 8002252:	f001 ff81 	bl	8004158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002256:	2051      	movs	r0, #81	; 0x51
 8002258:	f001 ffaa 	bl	80041b0 <HAL_NVIC_EnableIRQ>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002270:	d11a      	bne.n	80022a8 <HAL_TIM_PeriodElapsedCallback+0x48>
	{

		if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d104      	bne.n	8002284 <HAL_TIM_PeriodElapsedCallback+0x24>
		{

			ExtLights_LTSFlag++;
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002282:	6013      	str	r3, [r2, #0]

			/* do nothing */

		}

		if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d104      	bne.n	8002296 <HAL_TIM_PeriodElapsedCallback+0x36>
		{

			ExtLights_RTSFlag++;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002294:	6013      	str	r3, [r2, #0]

			/* do nothing */

		}

		if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d104      	bne.n	80022a8 <HAL_TIM_PeriodElapsedCallback+0x48>
		{

			ExtLights_HLFlag++;
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80022a6:	6013      	str	r3, [r2, #0]
		/* do nothin */

	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x56>
    HAL_IncTick();
 80022b2:	f000 ff4f 	bl	8003154 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */



  /* USER CODE END Callback 1 */
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200000a2 	.word	0x200000a2
 80022c4:	200000b8 	.word	0x200000b8
 80022c8:	200000a3 	.word	0x200000a3
 80022cc:	200000b4 	.word	0x200000b4
 80022d0:	200000a4 	.word	0x200000a4
 80022d4:	200000bc 	.word	0x200000bc
 80022d8:	40010000 	.word	0x40010000

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <Error_Handler+0x8>

080022e6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002310:	2300      	movs	r3, #0
 8002312:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <MX_RTC_Init+0xac>)
 8002316:	4a25      	ldr	r2, [pc, #148]	; (80023ac <MX_RTC_Init+0xb0>)
 8002318:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <MX_RTC_Init+0xac>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <MX_RTC_Init+0xac>)
 8002322:	227f      	movs	r2, #127	; 0x7f
 8002324:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <MX_RTC_Init+0xac>)
 8002328:	22ff      	movs	r2, #255	; 0xff
 800232a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <MX_RTC_Init+0xac>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <MX_RTC_Init+0xac>)
 8002334:	2200      	movs	r2, #0
 8002336:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <MX_RTC_Init+0xac>)
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800233e:	481a      	ldr	r0, [pc, #104]	; (80023a8 <MX_RTC_Init+0xac>)
 8002340:	f006 f8f6 	bl	8008530 <HAL_RTC_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800234a:	f7ff ffc7 	bl	80022dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800234e:	2300      	movs	r3, #0
 8002350:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002352:	2300      	movs	r3, #0
 8002354:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002356:	2300      	movs	r3, #0
 8002358:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2201      	movs	r2, #1
 8002366:	4619      	mov	r1, r3
 8002368:	480f      	ldr	r0, [pc, #60]	; (80023a8 <MX_RTC_Init+0xac>)
 800236a:	f006 f9e5 	bl	8008738 <HAL_RTC_SetTime>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002374:	f7ff ffb2 	bl	80022dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002378:	2301      	movs	r3, #1
 800237a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800237c:	2301      	movs	r3, #1
 800237e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002380:	2301      	movs	r3, #1
 8002382:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002384:	2300      	movs	r3, #0
 8002386:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002388:	463b      	mov	r3, r7
 800238a:	2201      	movs	r2, #1
 800238c:	4619      	mov	r1, r3
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <MX_RTC_Init+0xac>)
 8002390:	f006 fb1a 	bl	80089c8 <HAL_RTC_SetDate>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800239a:	f7ff ff9f 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000025c 	.word	0x2000025c
 80023ac:	40002800 	.word	0x40002800

080023b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
 80023c8:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <HAL_RTC_MspInit+0x50>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d111      	bne.n	80023f8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023d4:	2302      	movs	r3, #2
 80023d6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023dc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023de:	f107 0308 	add.w	r3, r7, #8
 80023e2:	4618      	mov	r0, r3
 80023e4:	f005 fe8e 	bl	8008104 <HAL_RCCEx_PeriphCLKConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80023ee:	f7ff ff75 	bl	80022dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <HAL_RTC_MspInit+0x54>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023f8:	bf00      	nop
 80023fa:	3720      	adds	r7, #32
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40002800 	.word	0x40002800
 8002404:	42470e3c 	.word	0x42470e3c

08002408 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a05      	ldr	r2, [pc, #20]	; (800242c <HAL_RTC_MspDeInit+0x24>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d102      	bne.n	8002420 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RTC_MspDeInit+0x28>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40002800 	.word	0x40002800
 8002430:	42470e3c 	.word	0x42470e3c

08002434 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <MX_SPI1_Init+0x68>)
 800243a:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <MX_SPI1_Init+0x6c>)
 800243c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <MX_SPI1_Init+0x68>)
 8002440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002444:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <MX_SPI1_Init+0x68>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_SPI1_Init+0x68>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <MX_SPI1_Init+0x68>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <MX_SPI1_Init+0x68>)
 800245a:	2200      	movs	r2, #0
 800245c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_SPI1_Init+0x68>)
 8002460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002464:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <MX_SPI1_Init+0x68>)
 8002468:	2200      	movs	r2, #0
 800246a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_SPI1_Init+0x68>)
 800246e:	2200      	movs	r2, #0
 8002470:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <MX_SPI1_Init+0x68>)
 8002474:	2200      	movs	r2, #0
 8002476:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_SPI1_Init+0x68>)
 800247a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_SPI1_Init+0x68>)
 8002482:	220a      	movs	r2, #10
 8002484:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_SPI1_Init+0x68>)
 8002488:	f006 fc9a 	bl	8008dc0 <HAL_SPI_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002492:	f7ff ff23 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000298 	.word	0x20000298
 80024a0:	40013000 	.word	0x40013000

080024a4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <MX_SPI2_Init+0x68>)
 80024aa:	4a19      	ldr	r2, [pc, #100]	; (8002510 <MX_SPI2_Init+0x6c>)
 80024ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <MX_SPI2_Init+0x68>)
 80024b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <MX_SPI2_Init+0x68>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <MX_SPI2_Init+0x68>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <MX_SPI2_Init+0x68>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <MX_SPI2_Init+0x68>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_SPI2_Init+0x68>)
 80024d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <MX_SPI2_Init+0x68>)
 80024d8:	2200      	movs	r2, #0
 80024da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_SPI2_Init+0x68>)
 80024de:	2200      	movs	r2, #0
 80024e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <MX_SPI2_Init+0x68>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_SPI2_Init+0x68>)
 80024ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_SPI2_Init+0x68>)
 80024f2:	220a      	movs	r2, #10
 80024f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_SPI2_Init+0x68>)
 80024f8:	f006 fc62 	bl	8008dc0 <HAL_SPI_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002502:	f7ff feeb 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000318 	.word	0x20000318
 8002510:	40003800 	.word	0x40003800

08002514 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a49      	ldr	r2, [pc, #292]	; (8002658 <HAL_SPI_MspInit+0x144>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d152      	bne.n	80025dc <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <HAL_SPI_MspInit+0x148>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_SPI_MspInit+0x148>)
 8002540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b45      	ldr	r3, [pc, #276]	; (800265c <HAL_SPI_MspInit+0x148>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_SPI_MspInit+0x148>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a40      	ldr	r2, [pc, #256]	; (800265c <HAL_SPI_MspInit+0x148>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <HAL_SPI_MspInit+0x148>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b3a      	ldr	r3, [pc, #232]	; (800265c <HAL_SPI_MspInit+0x148>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a39      	ldr	r2, [pc, #228]	; (800265c <HAL_SPI_MspInit+0x148>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_SPI_MspInit+0x148>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800258a:	2320      	movs	r3, #32
 800258c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259a:	2305      	movs	r3, #5
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	482e      	ldr	r0, [pc, #184]	; (8002660 <HAL_SPI_MspInit+0x14c>)
 80025a6:	f002 fda5 	bl	80050f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025aa:	2330      	movs	r3, #48	; 0x30
 80025ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ba:	2305      	movs	r3, #5
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	f107 031c 	add.w	r3, r7, #28
 80025c2:	4619      	mov	r1, r3
 80025c4:	4827      	ldr	r0, [pc, #156]	; (8002664 <HAL_SPI_MspInit+0x150>)
 80025c6:	f002 fd95 	bl	80050f4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2105      	movs	r1, #5
 80025ce:	2023      	movs	r0, #35	; 0x23
 80025d0:	f001 fdc2 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025d4:	2023      	movs	r0, #35	; 0x23
 80025d6:	f001 fdeb 	bl	80041b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80025da:	e039      	b.n	8002650 <HAL_SPI_MspInit+0x13c>
  else if(spiHandle->Instance==SPI2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a21      	ldr	r2, [pc, #132]	; (8002668 <HAL_SPI_MspInit+0x154>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d134      	bne.n	8002650 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_SPI_MspInit+0x148>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a1b      	ldr	r2, [pc, #108]	; (800265c <HAL_SPI_MspInit+0x148>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_SPI_MspInit+0x148>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_SPI_MspInit+0x148>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a14      	ldr	r2, [pc, #80]	; (800265c <HAL_SPI_MspInit+0x148>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_SPI_MspInit+0x148>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800261e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002630:	2305      	movs	r3, #5
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	4619      	mov	r1, r3
 800263a:	480a      	ldr	r0, [pc, #40]	; (8002664 <HAL_SPI_MspInit+0x150>)
 800263c:	f002 fd5a 	bl	80050f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2105      	movs	r1, #5
 8002644:	2024      	movs	r0, #36	; 0x24
 8002646:	f001 fd87 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800264a:	2024      	movs	r0, #36	; 0x24
 800264c:	f001 fdb0 	bl	80041b0 <HAL_NVIC_EnableIRQ>
}
 8002650:	bf00      	nop
 8002652:	3730      	adds	r7, #48	; 0x30
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40013000 	.word	0x40013000
 800265c:	40023800 	.word	0x40023800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40003800 	.word	0x40003800

0800266c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_MspInit+0x74>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_MspInit+0x74>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <HAL_MspInit+0x74>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_MspInit+0x74>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <HAL_MspInit+0x74>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_MspInit+0x74>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	210f      	movs	r1, #15
 80026ae:	f06f 0001 	mvn.w	r0, #1
 80026b2:	f001 fd51 	bl	8004158 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2105      	movs	r1, #5
 80026ba:	2001      	movs	r0, #1
 80026bc:	f001 fd4c 	bl	8004158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f001 fd75 	bl	80041b0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2105      	movs	r1, #5
 80026ca:	2005      	movs	r0, #5
 80026cc:	f001 fd44 	bl	8004158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80026d0:	2005      	movs	r0, #5
 80026d2:	f001 fd6d 	bl	80041b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800

080026e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08c      	sub	sp, #48	; 0x30
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <HAL_InitTick+0xd0>)
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	4a2d      	ldr	r2, [pc, #180]	; (80027b4 <HAL_InitTick+0xd0>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6453      	str	r3, [r2, #68]	; 0x44
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_InitTick+0xd0>)
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002710:	f107 020c 	add.w	r2, r7, #12
 8002714:	f107 0310 	add.w	r3, r7, #16
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f005 fcc0 	bl	80080a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002720:	f005 fcaa 	bl	8008078 <HAL_RCC_GetPCLK2Freq>
 8002724:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <HAL_InitTick+0xd4>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0c9b      	lsrs	r3, r3, #18
 8002730:	3b01      	subs	r3, #1
 8002732:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_InitTick+0xd8>)
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <HAL_InitTick+0xdc>)
 8002738:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_InitTick+0xd8>)
 800273c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002740:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002742:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_InitTick+0xd8>)
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002748:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_InitTick+0xd8>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_InitTick+0xd8>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_InitTick+0xd8>)
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800275a:	4818      	ldr	r0, [pc, #96]	; (80027bc <HAL_InitTick+0xd8>)
 800275c:	f007 fcec 	bl	800a138 <HAL_TIM_Base_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800276a:	2b00      	cmp	r3, #0
 800276c:	d11b      	bne.n	80027a6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800276e:	4813      	ldr	r0, [pc, #76]	; (80027bc <HAL_InitTick+0xd8>)
 8002770:	f007 fdb4 	bl	800a2dc <HAL_TIM_Base_Start_IT>
 8002774:	4603      	mov	r3, r0
 8002776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800277a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800277e:	2b00      	cmp	r3, #0
 8002780:	d111      	bne.n	80027a6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002782:	2019      	movs	r0, #25
 8002784:	f001 fd14 	bl	80041b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	d808      	bhi.n	80027a0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800278e:	2200      	movs	r2, #0
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	2019      	movs	r0, #25
 8002794:	f001 fce0 	bl	8004158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_InitTick+0xe0>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e002      	b.n	80027a6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80027a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3730      	adds	r7, #48	; 0x30
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	431bde83 	.word	0x431bde83
 80027bc:	20000398 	.word	0x20000398
 80027c0:	40010000 	.word	0x40010000
 80027c4:	20000004 	.word	0x20000004

080027c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <NMI_Handler+0x4>

080027ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <HardFault_Handler+0x4>

080027d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <MemManage_Handler+0x4>

080027da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027de:	e7fe      	b.n	80027de <BusFault_Handler+0x4>

080027e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <UsageFault_Handler+0x4>

080027e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80027f8:	f004 fe48 	bl	800748c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}

08002800 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002804:	f002 faa0 	bl	8004d48 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}

0800280c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <ADC_IRQHandler+0x10>)
 8002822:	f000 fe39 	bl	8003498 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200000e0 	.word	0x200000e0

08002830 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002836:	f007 fe4d 	bl	800a4d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000071c 	.word	0x2000071c

08002844 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800284a:	f007 fe43 	bl	800a4d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000398 	.word	0x20000398

08002858 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	if(CenLoc_Tim3IRQFlag == 2)
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d105      	bne.n	8002870 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>
	{

		CenLoc_Tim11IRQFlag++;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 800286e:	701a      	strb	r2, [r3, #0]
		/* do nothing */

	}

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002870:	4804      	ldr	r0, [pc, #16]	; (8002884 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8002872:	f007 fe2f 	bl	800a4d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000099 	.word	0x20000099
 8002880:	2000009b 	.word	0x2000009b
 8002884:	200007d0 	.word	0x200007d0

08002888 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if((CenLoc_CurrentState == STD_LOW && CenLoc_PreviousStateFlag == STD_HIGH) || (CenLoc_CurrentState == STD_HIGH && CenLoc_PreviousStateFlag == STD_LOW))
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <TIM2_IRQHandler+0x3c>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d103      	bne.n	800289c <TIM2_IRQHandler+0x14>
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <TIM2_IRQHandler+0x40>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d007      	beq.n	80028ac <TIM2_IRQHandler+0x24>
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <TIM2_IRQHandler+0x3c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d109      	bne.n	80028b8 <TIM2_IRQHandler+0x30>
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <TIM2_IRQHandler+0x40>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <TIM2_IRQHandler+0x30>
	{

		CenLoc_Tim2IRQFlag = CenLoc_Tim2IRQFlag + 1;
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <TIM2_IRQHandler+0x44>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <TIM2_IRQHandler+0x44>)
 80028b6:	701a      	strb	r2, [r3, #0]
		/* do nothing */

	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028b8:	4805      	ldr	r0, [pc, #20]	; (80028d0 <TIM2_IRQHandler+0x48>)
 80028ba:	f007 fe0b 	bl	800a4d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000091 	.word	0x20000091
 80028c8:	20000095 	.word	0x20000095
 80028cc:	20000098 	.word	0x20000098
 80028d0:	2000044c 	.word	0x2000044c

080028d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	CenLoc_Tim3IRQFlag++;
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <TIM3_IRQHandler+0x1c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <TIM3_IRQHandler+0x1c>)
 80028e2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028e4:	4803      	ldr	r0, [pc, #12]	; (80028f4 <TIM3_IRQHandler+0x20>)
 80028e6:	f007 fdf5 	bl	800a4d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000099 	.word	0x20000099
 80028f4:	20000500 	.word	0x20000500

080028f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	SecAlm_TriggerIRQCounterForTimer4++;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <TIM4_IRQHandler+0x1c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <TIM4_IRQHandler+0x1c>)
 8002906:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002908:	4803      	ldr	r0, [pc, #12]	; (8002918 <TIM4_IRQHandler+0x20>)
 800290a:	f007 fde3 	bl	800a4d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200000cd 	.word	0x200000cd
 8002918:	200005b4 	.word	0x200005b4

0800291c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <I2C1_EV_IRQHandler+0x10>)
 8002922:	f003 f8bd 	bl	8005aa0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200001d8 	.word	0x200001d8

08002930 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <I2C1_ER_IRQHandler+0x10>)
 8002936:	f003 fa24 	bl	8005d82 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200001d8 	.word	0x200001d8

08002944 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <SPI1_IRQHandler+0x10>)
 800294a:	f007 f951 	bl	8009bf0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000298 	.word	0x20000298

08002958 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <SPI2_IRQHandler+0x10>)
 800295e:	f007 f947 	bl	8009bf0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000318 	.word	0x20000318

0800296c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <USART1_IRQHandler+0x10>)
 8002972:	f008 fd83 	bl	800b47c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000884 	.word	0x20000884

08002980 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	CenLoc_Tim5IRQFlag++;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <TIM5_IRQHandler+0x1c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <TIM5_IRQHandler+0x1c>)
 800298e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002990:	4803      	ldr	r0, [pc, #12]	; (80029a0 <TIM5_IRQHandler+0x20>)
 8002992:	f007 fd9f 	bl	800a4d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	2000009a 	.word	0x2000009a
 80029a0:	20000668 	.word	0x20000668

080029a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <DMA2_Stream0_IRQHandler+0x10>)
 80029aa:	f001 ff55 	bl	8004858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000144 	.word	0x20000144

080029b8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <SystemInit+0x20>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <SystemInit+0x20>)
 80029d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a00:	463b      	mov	r3, r7
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <MX_TIM2_Init+0x98>)
 8002a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8002a10:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <MX_TIM2_Init+0x98>)
 8002a12:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <MX_TIM2_Init+0x98>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_TIM2_Init+0x98>)
 8002a20:	f241 3287 	movw	r2, #4999	; 0x1387
 8002a24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <MX_TIM2_Init+0x98>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <MX_TIM2_Init+0x98>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a32:	4814      	ldr	r0, [pc, #80]	; (8002a84 <MX_TIM2_Init+0x98>)
 8002a34:	f007 fb80 	bl	800a138 <HAL_TIM_Base_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002a3e:	f7ff fc4d 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a48:	f107 0308 	add.w	r3, r7, #8
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	480d      	ldr	r0, [pc, #52]	; (8002a84 <MX_TIM2_Init+0x98>)
 8002a50:	f007 fe68 	bl	800a724 <HAL_TIM_ConfigClockSource>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002a5a:	f7ff fc3f 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a66:	463b      	mov	r3, r7
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4806      	ldr	r0, [pc, #24]	; (8002a84 <MX_TIM2_Init+0x98>)
 8002a6c:	f008 fb36 	bl	800b0dc <HAL_TIMEx_MasterConfigSynchronization>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a76:	f7ff fc31 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a7a:	bf00      	nop
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2000044c 	.word	0x2000044c

08002a88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8e:	f107 0308 	add.w	r3, r7, #8
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <MX_TIM3_Init+0x94>)
 8002aa6:	4a1e      	ldr	r2, [pc, #120]	; (8002b20 <MX_TIM3_Init+0x98>)
 8002aa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <MX_TIM3_Init+0x94>)
 8002aac:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ab0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <MX_TIM3_Init+0x94>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <MX_TIM3_Init+0x94>)
 8002aba:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002abe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <MX_TIM3_Init+0x94>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <MX_TIM3_Init+0x94>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002acc:	4813      	ldr	r0, [pc, #76]	; (8002b1c <MX_TIM3_Init+0x94>)
 8002ace:	f007 fb33 	bl	800a138 <HAL_TIM_Base_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ad8:	f7ff fc00 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480c      	ldr	r0, [pc, #48]	; (8002b1c <MX_TIM3_Init+0x94>)
 8002aea:	f007 fe1b 	bl	800a724 <HAL_TIM_ConfigClockSource>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002af4:	f7ff fbf2 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af8:	2300      	movs	r3, #0
 8002afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b00:	463b      	mov	r3, r7
 8002b02:	4619      	mov	r1, r3
 8002b04:	4805      	ldr	r0, [pc, #20]	; (8002b1c <MX_TIM3_Init+0x94>)
 8002b06:	f008 fae9 	bl	800b0dc <HAL_TIMEx_MasterConfigSynchronization>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b10:	f7ff fbe4 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000500 	.word	0x20000500
 8002b20:	40000400 	.word	0x40000400

08002b24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b38:	463b      	mov	r3, r7
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <MX_TIM4_Init+0x94>)
 8002b42:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <MX_TIM4_Init+0x98>)
 8002b44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8002b46:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <MX_TIM4_Init+0x94>)
 8002b48:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <MX_TIM4_Init+0x94>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <MX_TIM4_Init+0x94>)
 8002b56:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5c:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <MX_TIM4_Init+0x94>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <MX_TIM4_Init+0x94>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b68:	4813      	ldr	r0, [pc, #76]	; (8002bb8 <MX_TIM4_Init+0x94>)
 8002b6a:	f007 fae5 	bl	800a138 <HAL_TIM_Base_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002b74:	f7ff fbb2 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	4619      	mov	r1, r3
 8002b84:	480c      	ldr	r0, [pc, #48]	; (8002bb8 <MX_TIM4_Init+0x94>)
 8002b86:	f007 fdcd 	bl	800a724 <HAL_TIM_ConfigClockSource>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002b90:	f7ff fba4 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b94:	2300      	movs	r3, #0
 8002b96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <MX_TIM4_Init+0x94>)
 8002ba2:	f008 fa9b 	bl	800b0dc <HAL_TIMEx_MasterConfigSynchronization>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002bac:	f7ff fb96 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bb0:	bf00      	nop
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	200005b4 	.word	0x200005b4
 8002bbc:	40000800 	.word	0x40000800

08002bc0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002bde:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <MX_TIM5_Init+0x98>)
 8002be0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 8002be2:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002be4:	f242 720f 	movw	r2, #9999	; 0x270f
 8002be8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bea:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 8002bf0:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <MX_TIM5_Init+0x9c>)
 8002bf4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c02:	4814      	ldr	r0, [pc, #80]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002c04:	f007 fa98 	bl	800a138 <HAL_TIM_Base_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c0e:	f7ff fb65 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c18:	f107 0308 	add.w	r3, r7, #8
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	480d      	ldr	r0, [pc, #52]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002c20:	f007 fd80 	bl	800a724 <HAL_TIM_ConfigClockSource>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002c2a:	f7ff fb57 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c36:	463b      	mov	r3, r7
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4806      	ldr	r0, [pc, #24]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002c3c:	f008 fa4e 	bl	800b0dc <HAL_TIMEx_MasterConfigSynchronization>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002c46:	f7ff fb49 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000668 	.word	0x20000668
 8002c58:	40000c00 	.word	0x40000c00
 8002c5c:	0001869f 	.word	0x0001869f

08002c60 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c66:	463b      	mov	r3, r7
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002c72:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <MX_TIM9_Init+0x6c>)
 8002c74:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <MX_TIM9_Init+0x70>)
 8002c76:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <MX_TIM9_Init+0x6c>)
 8002c7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c7e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <MX_TIM9_Init+0x6c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <MX_TIM9_Init+0x6c>)
 8002c88:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c8c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <MX_TIM9_Init+0x6c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c94:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <MX_TIM9_Init+0x6c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002c9a:	480c      	ldr	r0, [pc, #48]	; (8002ccc <MX_TIM9_Init+0x6c>)
 8002c9c:	f007 fa4c 	bl	800a138 <HAL_TIM_Base_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002ca6:	f7ff fb19 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cae:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002cb0:	463b      	mov	r3, r7
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4805      	ldr	r0, [pc, #20]	; (8002ccc <MX_TIM9_Init+0x6c>)
 8002cb6:	f007 fd35 	bl	800a724 <HAL_TIM_ConfigClockSource>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002cc0:	f7ff fb0c 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	2000071c 	.word	0x2000071c
 8002cd0:	40014000 	.word	0x40014000

08002cd4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <MX_TIM11_Init+0x40>)
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <MX_TIM11_Init+0x44>)
 8002cdc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <MX_TIM11_Init+0x40>)
 8002ce0:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ce4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <MX_TIM11_Init+0x40>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <MX_TIM11_Init+0x40>)
 8002cee:	f241 3287 	movw	r2, #4999	; 0x1387
 8002cf2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <MX_TIM11_Init+0x40>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <MX_TIM11_Init+0x40>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d00:	4804      	ldr	r0, [pc, #16]	; (8002d14 <MX_TIM11_Init+0x40>)
 8002d02:	f007 fa19 	bl	800a138 <HAL_TIM_Base_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002d0c:	f7ff fae6 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200007d0 	.word	0x200007d0
 8002d18:	40014800 	.word	0x40014800

08002d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2c:	d116      	bne.n	8002d5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	4b52      	ldr	r3, [pc, #328]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a51      	ldr	r2, [pc, #324]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	4b4f      	ldr	r3, [pc, #316]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2105      	movs	r1, #5
 8002d4e:	201c      	movs	r0, #28
 8002d50:	f001 fa02 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d54:	201c      	movs	r0, #28
 8002d56:	f001 fa2b 	bl	80041b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002d5a:	e08a      	b.n	8002e72 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a47      	ldr	r2, [pc, #284]	; (8002e80 <HAL_TIM_Base_MspInit+0x164>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d116      	bne.n	8002d94 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a43      	ldr	r2, [pc, #268]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2105      	movs	r1, #5
 8002d86:	201d      	movs	r0, #29
 8002d88:	f001 f9e6 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d8c:	201d      	movs	r0, #29
 8002d8e:	f001 fa0f 	bl	80041b0 <HAL_NVIC_EnableIRQ>
}
 8002d92:	e06e      	b.n	8002e72 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3a      	ldr	r2, [pc, #232]	; (8002e84 <HAL_TIM_Base_MspInit+0x168>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d116      	bne.n	8002dcc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a35      	ldr	r2, [pc, #212]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2105      	movs	r1, #5
 8002dbe:	201e      	movs	r0, #30
 8002dc0:	f001 f9ca 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dc4:	201e      	movs	r0, #30
 8002dc6:	f001 f9f3 	bl	80041b0 <HAL_NVIC_EnableIRQ>
}
 8002dca:	e052      	b.n	8002e72 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <HAL_TIM_Base_MspInit+0x16c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d116      	bne.n	8002e04 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002de0:	f043 0308 	orr.w	r3, r3, #8
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2105      	movs	r1, #5
 8002df6:	2032      	movs	r0, #50	; 0x32
 8002df8:	f001 f9ae 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002dfc:	2032      	movs	r0, #50	; 0x32
 8002dfe:	f001 f9d7 	bl	80041b0 <HAL_NVIC_EnableIRQ>
}
 8002e02:	e036      	b.n	8002e72 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM9)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a20      	ldr	r2, [pc, #128]	; (8002e8c <HAL_TIM_Base_MspInit+0x170>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d116      	bne.n	8002e3c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2105      	movs	r1, #5
 8002e2e:	2018      	movs	r0, #24
 8002e30:	f001 f992 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002e34:	2018      	movs	r0, #24
 8002e36:	f001 f9bb 	bl	80041b0 <HAL_NVIC_EnableIRQ>
}
 8002e3a:	e01a      	b.n	8002e72 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <HAL_TIM_Base_MspInit+0x174>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d115      	bne.n	8002e72 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_TIM_Base_MspInit+0x160>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2105      	movs	r1, #5
 8002e66:	201a      	movs	r0, #26
 8002e68:	f001 f976 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e6c:	201a      	movs	r0, #26
 8002e6e:	f001 f99f 	bl	80041b0 <HAL_NVIC_EnableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40014800 	.word	0x40014800

08002e94 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <MX_USART1_UART_Init+0x50>)
 8002e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002eba:	220c      	movs	r2, #12
 8002ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eca:	4805      	ldr	r0, [pc, #20]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ecc:	f008 f9e2 	bl	800b294 <HAL_UART_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ed6:	f7ff fa01 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000884 	.word	0x20000884
 8002ee4:	40011000 	.word	0x40011000

08002ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <HAL_UART_MspInit+0x94>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d133      	bne.n	8002f72 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <HAL_UART_MspInit+0x98>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <HAL_UART_MspInit+0x98>)
 8002f14:	f043 0310 	orr.w	r3, r3, #16
 8002f18:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_UART_MspInit+0x98>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_UART_MspInit+0x98>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_UART_MspInit+0x98>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_UART_MspInit+0x98>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002f42:	2348      	movs	r3, #72	; 0x48
 8002f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f52:	2307      	movs	r3, #7
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4809      	ldr	r0, [pc, #36]	; (8002f84 <HAL_UART_MspInit+0x9c>)
 8002f5e:	f002 f8c9 	bl	80050f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2105      	movs	r1, #5
 8002f66:	2025      	movs	r0, #37	; 0x25
 8002f68:	f001 f8f6 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f6c:	2025      	movs	r0, #37	; 0x25
 8002f6e:	f001 f91f 	bl	80041b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f72:	bf00      	nop
 8002f74:	3728      	adds	r7, #40	; 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40011000 	.word	0x40011000
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40020400 	.word	0x40020400

08002f88 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a05      	ldr	r2, [pc, #20]	; (8002fac <HAL_UART_RxCpltCallback+0x24>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d104      	bne.n	8002fa4 <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <HAL_UART_RxCpltCallback+0x28>)
 8002f9e:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <HAL_UART_RxCpltCallback+0x2c>)
 8002fa0:	f008 fa3c 	bl	800b41c <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	20000090 	.word	0x20000090
 8002fb4:	20000884 	.word	0x20000884

08002fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ff0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fbc:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fbe:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fc0:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc4:	e002      	b.n	8002fcc <LoopCopyDataInit>

08002fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fca:	3304      	adds	r3, #4

08002fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd0:	d3f9      	bcc.n	8002fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fd4:	4c0b      	ldr	r4, [pc, #44]	; (8003004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd8:	e001      	b.n	8002fde <LoopFillZerobss>

08002fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fdc:	3204      	adds	r2, #4

08002fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe0:	d3fb      	bcc.n	8002fda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fe2:	f7ff fcf1 	bl	80029c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fe6:	f00c fb63 	bl	800f6b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fea:	f7ff f889 	bl	8002100 <main>
  bx  lr    
 8002fee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002ffc:	08010170 	.word	0x08010170
  ldr r2, =_sbss
 8003000:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003004:	20005554 	.word	0x20005554

08003008 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <DMA1_Stream0_IRQHandler>

0800300a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003018:	b672      	cpsid	i
}
 800301a:	bf00      	nop
 800301c:	f7ff f95e 	bl	80022dc <Error_Handler>
 8003020:	e7fe      	b.n	8003020 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7a1b      	ldrb	r3, [r3, #8]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d904      	bls.n	8003034 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800302a:	b672      	cpsid	i
}
 800302c:	bf00      	nop
 800302e:	f7ff f955 	bl	80022dc <Error_Handler>
 8003032:	e7fe      	b.n	8003032 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7a1b      	ldrb	r3, [r3, #8]
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	b2d1      	uxtb	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	7211      	strb	r1, [r2, #8]
 8003040:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003042:	f3ef 8211 	mrs	r2, BASEPRI
 8003046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	60fa      	str	r2, [r7, #12]
 8003058:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003078:	b672      	cpsid	i
}
 800307a:	bf00      	nop
 800307c:	f7ff f92e 	bl	80022dc <Error_Handler>
 8003080:	e7fe      	b.n	8003080 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7a1b      	ldrb	r3, [r3, #8]
 8003086:	3b01      	subs	r3, #1
 8003088:	b2da      	uxtb	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7a1b      	ldrb	r3, [r3, #8]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d904      	bls.n	80030a0 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003096:	b672      	cpsid	i
}
 8003098:	bf00      	nop
 800309a:	f7ff f91f 	bl	80022dc <Error_Handler>
 800309e:	e7fe      	b.n	800309e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7a1b      	ldrb	r3, [r3, #8]
 80030a4:	461a      	mov	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030b4:	bf00      	nop
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80030cc:	b672      	cpsid	i
}
 80030ce:	bf00      	nop
 80030d0:	f7ff f904 	bl	80022dc <Error_Handler>
 80030d4:	e7fe      	b.n	80030d4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff96 	bl	800300a <stm32_lock_acquire>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80030f4:	b672      	cpsid	i
}
 80030f6:	bf00      	nop
 80030f8:	f7ff f8f0 	bl	80022dc <Error_Handler>
 80030fc:	e7fe      	b.n	80030fc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ffb2 	bl	800306a <stm32_lock_release>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003114:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <HAL_Init+0x40>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0d      	ldr	r2, [pc, #52]	; (8003150 <HAL_Init+0x40>)
 800311a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800311e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_Init+0x40>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_Init+0x40>)
 8003126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800312a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_Init+0x40>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a07      	ldr	r2, [pc, #28]	; (8003150 <HAL_Init+0x40>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003138:	2003      	movs	r0, #3
 800313a:	f000 ffed 	bl	8004118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800313e:	200f      	movs	r0, #15
 8003140:	f7ff fad0 	bl	80026e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003144:	f7ff fa92 	bl	800266c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40023c00 	.word	0x40023c00

08003154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_IncTick+0x20>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_IncTick+0x24>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4413      	add	r3, r2
 8003164:	4a04      	ldr	r2, [pc, #16]	; (8003178 <HAL_IncTick+0x24>)
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000008 	.word	0x20000008
 8003178:	20000904 	.word	0x20000904

0800317c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return uwTick;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_GetTick+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000904 	.word	0x20000904

08003194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e16f      	b.n	800348a <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a93      	ldr	r2, [pc, #588]	; (80033fc <HAL_ADC_Init+0x268>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d004      	beq.n	80031be <HAL_ADC_Init+0x2a>
 80031b4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80031b8:	4891      	ldr	r0, [pc, #580]	; (8003400 <HAL_ADC_Init+0x26c>)
 80031ba:	f7ff f894 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d013      	beq.n	80031ee <HAL_ADC_Init+0x5a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ce:	d00e      	beq.n	80031ee <HAL_ADC_Init+0x5a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031d8:	d009      	beq.n	80031ee <HAL_ADC_Init+0x5a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031e2:	d004      	beq.n	80031ee <HAL_ADC_Init+0x5a>
 80031e4:	f240 1143 	movw	r1, #323	; 0x143
 80031e8:	4885      	ldr	r0, [pc, #532]	; (8003400 <HAL_ADC_Init+0x26c>)
 80031ea:	f7ff f87c 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d013      	beq.n	800321e <HAL_ADC_Init+0x8a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031fe:	d00e      	beq.n	800321e <HAL_ADC_Init+0x8a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003208:	d009      	beq.n	800321e <HAL_ADC_Init+0x8a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003212:	d004      	beq.n	800321e <HAL_ADC_Init+0x8a>
 8003214:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003218:	4879      	ldr	r0, [pc, #484]	; (8003400 <HAL_ADC_Init+0x26c>)
 800321a:	f7ff f864 	bl	80022e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_ADC_Init+0xa4>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d004      	beq.n	8003238 <HAL_ADC_Init+0xa4>
 800322e:	f240 1145 	movw	r1, #325	; 0x145
 8003232:	4873      	ldr	r0, [pc, #460]	; (8003400 <HAL_ADC_Init+0x26c>)
 8003234:	f7ff f857 	bl	80022e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7e1b      	ldrb	r3, [r3, #24]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_ADC_Init+0xbe>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7e1b      	ldrb	r3, [r3, #24]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d004      	beq.n	8003252 <HAL_ADC_Init+0xbe>
 8003248:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800324c:	486c      	ldr	r0, [pc, #432]	; (8003400 <HAL_ADC_Init+0x26c>)
 800324e:	f7ff f84a 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	2b00      	cmp	r3, #0
 8003258:	d054      	beq.n	8003304 <HAL_ADC_Init+0x170>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003262:	d04f      	beq.n	8003304 <HAL_ADC_Init+0x170>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800326c:	d04a      	beq.n	8003304 <HAL_ADC_Init+0x170>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003276:	d045      	beq.n	8003304 <HAL_ADC_Init+0x170>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003280:	d040      	beq.n	8003304 <HAL_ADC_Init+0x170>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800328a:	d03b      	beq.n	8003304 <HAL_ADC_Init+0x170>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003294:	d036      	beq.n	8003304 <HAL_ADC_Init+0x170>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800329e:	d031      	beq.n	8003304 <HAL_ADC_Init+0x170>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a8:	d02c      	beq.n	8003304 <HAL_ADC_Init+0x170>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80032b2:	d027      	beq.n	8003304 <HAL_ADC_Init+0x170>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80032bc:	d022      	beq.n	8003304 <HAL_ADC_Init+0x170>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80032c6:	d01d      	beq.n	8003304 <HAL_ADC_Init+0x170>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80032d0:	d018      	beq.n	8003304 <HAL_ADC_Init+0x170>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80032da:	d013      	beq.n	8003304 <HAL_ADC_Init+0x170>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80032e4:	d00e      	beq.n	8003304 <HAL_ADC_Init+0x170>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80032ee:	d009      	beq.n	8003304 <HAL_ADC_Init+0x170>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	4a43      	ldr	r2, [pc, #268]	; (8003404 <HAL_ADC_Init+0x270>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_ADC_Init+0x170>
 80032fa:	f240 1147 	movw	r1, #327	; 0x147
 80032fe:	4840      	ldr	r0, [pc, #256]	; (8003400 <HAL_ADC_Init+0x26c>)
 8003300:	f7fe fff1 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_ADC_Init+0x18c>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003314:	d004      	beq.n	8003320 <HAL_ADC_Init+0x18c>
 8003316:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800331a:	4839      	ldr	r0, [pc, #228]	; (8003400 <HAL_ADC_Init+0x26c>)
 800331c:	f7fe ffe3 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_ADC_Init+0x19c>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	2b10      	cmp	r3, #16
 800332e:	d904      	bls.n	800333a <HAL_ADC_Init+0x1a6>
 8003330:	f240 1149 	movw	r1, #329	; 0x149
 8003334:	4832      	ldr	r0, [pc, #200]	; (8003400 <HAL_ADC_Init+0x26c>)
 8003336:	f7fe ffd6 	bl	80022e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <HAL_ADC_Init+0x1c4>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800334a:	2b01      	cmp	r3, #1
 800334c:	d004      	beq.n	8003358 <HAL_ADC_Init+0x1c4>
 800334e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003352:	482b      	ldr	r0, [pc, #172]	; (8003400 <HAL_ADC_Init+0x26c>)
 8003354:	f7fe ffc7 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d00c      	beq.n	800337a <HAL_ADC_Init+0x1e6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_ADC_Init+0x1e6>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d004      	beq.n	800337a <HAL_ADC_Init+0x1e6>
 8003370:	f240 114b 	movw	r1, #331	; 0x14b
 8003374:	4822      	ldr	r0, [pc, #136]	; (8003400 <HAL_ADC_Init+0x26c>)
 8003376:	f7fe ffb6 	bl	80022e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d009      	beq.n	8003398 <HAL_ADC_Init+0x204>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d004      	beq.n	8003398 <HAL_ADC_Init+0x204>
 800338e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003392:	481b      	ldr	r0, [pc, #108]	; (8003400 <HAL_ADC_Init+0x26c>)
 8003394:	f7fe ffa7 	bl	80022e6 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	4a19      	ldr	r2, [pc, #100]	; (8003404 <HAL_ADC_Init+0x270>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d017      	beq.n	80033d2 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d013      	beq.n	80033d2 <HAL_ADC_Init+0x23e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b2:	d00e      	beq.n	80033d2 <HAL_ADC_Init+0x23e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033bc:	d009      	beq.n	80033d2 <HAL_ADC_Init+0x23e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033c6:	d004      	beq.n	80033d2 <HAL_ADC_Init+0x23e>
 80033c8:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80033cc:	480c      	ldr	r0, [pc, #48]	; (8003400 <HAL_ADC_Init+0x26c>)
 80033ce:	f7fe ff8a 	bl	80022e6 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d131      	bne.n	800343e <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_ADC_Init+0x274>)
 80033de:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a0a      	ldr	r2, [pc, #40]	; (800340c <HAL_ADC_Init+0x278>)
 80033e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_ADC_Init+0x27c>)
 80033ea:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a09      	ldr	r2, [pc, #36]	; (8003414 <HAL_ADC_Init+0x280>)
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a08      	ldr	r2, [pc, #32]	; (8003418 <HAL_ADC_Init+0x284>)
 80033f6:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	e00f      	b.n	800341c <HAL_ADC_Init+0x288>
 80033fc:	40012000 	.word	0x40012000
 8003400:	0800f970 	.word	0x0800f970
 8003404:	0f000001 	.word	0x0f000001
 8003408:	0800394d 	.word	0x0800394d
 800340c:	08003961 	.word	0x08003961
 8003410:	08003975 	.word	0x08003975
 8003414:	08003989 	.word	0x08003989
 8003418:	08003fa9 	.word	0x08003fa9
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d102      	bne.n	8003428 <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <HAL_ADC_Init+0x300>)
 8003426:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d118      	bne.n	800347c <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003452:	f023 0302 	bic.w	r3, r3, #2
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fc12 	bl	8003c88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f023 0303 	bic.w	r3, r3, #3
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
 800347a:	e001      	b.n	8003480 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	0800195d 	.word	0x0800195d

08003498 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	7e1b      	ldrb	r3, [r3, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_ADC_IRQHandler+0x3a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	7e1b      	ldrb	r3, [r3, #24]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d004      	beq.n	80034d2 <HAL_ADC_IRQHandler+0x3a>
 80034c8:	f240 41b7 	movw	r1, #1207	; 0x4b7
 80034cc:	4892      	ldr	r0, [pc, #584]	; (8003718 <HAL_ADC_IRQHandler+0x280>)
 80034ce:	f7fe ff0a 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_ADC_IRQHandler+0x4a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d904      	bls.n	80034ec <HAL_ADC_IRQHandler+0x54>
 80034e2:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 80034e6:	488c      	ldr	r0, [pc, #560]	; (8003718 <HAL_ADC_IRQHandler+0x280>)
 80034e8:	f7fe fefd 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d00c      	beq.n	800350e <HAL_ADC_IRQHandler+0x76>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_ADC_IRQHandler+0x76>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d004      	beq.n	800350e <HAL_ADC_IRQHandler+0x76>
 8003504:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8003508:	4883      	ldr	r0, [pc, #524]	; (8003718 <HAL_ADC_IRQHandler+0x280>)
 800350a:	f7fe feec 	bl	80022e6 <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d04a      	beq.n	80035ba <HAL_ADC_IRQHandler+0x122>
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d047      	beq.n	80035ba <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	d105      	bne.n	8003542 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d12b      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003554:	2b00      	cmp	r3, #0
 8003556:	d127      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003570:	2b00      	cmp	r3, #0
 8003572:	d119      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0220 	bic.w	r2, r2, #32
 8003582:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0212 	mvn.w	r2, #18
 80035b8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d058      	beq.n	8003682 <HAL_ADC_IRQHandler+0x1ea>
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d055      	beq.n	8003682 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d105      	bne.n	80035ee <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d139      	bne.n	8003670 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003614:	2b00      	cmp	r3, #0
 8003616:	d12b      	bne.n	8003670 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003622:	2b00      	cmp	r3, #0
 8003624:	d124      	bne.n	8003670 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11d      	bne.n	8003670 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003638:	2b00      	cmp	r3, #0
 800363a:	d119      	bne.n	8003670 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800364a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 020c 	mvn.w	r2, #12
 8003680:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d018      	beq.n	80036ca <HAL_ADC_IRQHandler+0x232>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d015      	beq.n	80036ca <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d10e      	bne.n	80036ca <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0201 	mvn.w	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d016      	beq.n	800370e <HAL_ADC_IRQHandler+0x276>
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d013      	beq.n	800370e <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f043 0202 	orr.w	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f06f 0220 	mvn.w	r2, #32
 80036fa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0220 	mvn.w	r2, #32
 800370c:	601a      	str	r2, [r3, #0]
  }
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	0800f970 	.word	0x0800f970

0800371c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	7e1b      	ldrb	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_ADC_Start_DMA+0x2a>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	7e1b      	ldrb	r3, [r3, #24]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d004      	beq.n	8003746 <HAL_ADC_Start_DMA+0x2a>
 800373c:	f240 515a 	movw	r1, #1370	; 0x55a
 8003740:	487a      	ldr	r0, [pc, #488]	; (800392c <HAL_ADC_Start_DMA+0x210>)
 8003742:	f7fe fdd0 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <HAL_ADC_Start_DMA+0x5a>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003756:	d00e      	beq.n	8003776 <HAL_ADC_Start_DMA+0x5a>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003760:	d009      	beq.n	8003776 <HAL_ADC_Start_DMA+0x5a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800376a:	d004      	beq.n	8003776 <HAL_ADC_Start_DMA+0x5a>
 800376c:	f240 515b 	movw	r1, #1371	; 0x55b
 8003770:	486e      	ldr	r0, [pc, #440]	; (800392c <HAL_ADC_Start_DMA+0x210>)
 8003772:	f7fe fdb8 	bl	80022e6 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_ADC_Start_DMA+0x68>
 8003780:	2302      	movs	r3, #2
 8003782:	e0ce      	b.n	8003922 <HAL_ADC_Start_DMA+0x206>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d018      	beq.n	80037cc <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037aa:	4b61      	ldr	r3, [pc, #388]	; (8003930 <HAL_ADC_Start_DMA+0x214>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a61      	ldr	r2, [pc, #388]	; (8003934 <HAL_ADC_Start_DMA+0x218>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	0c9a      	lsrs	r2, r3, #18
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80037be:	e002      	b.n	80037c6 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f9      	bne.n	80037c0 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037da:	d107      	bne.n	80037ec <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ea:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	f040 8086 	bne.w	8003908 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003826:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	d106      	bne.n	800384a <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	f023 0206 	bic.w	r2, r3, #6
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	645a      	str	r2, [r3, #68]	; 0x44
 8003848:	e002      	b.n	8003850 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003858:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_ADC_Start_DMA+0x21c>)
 800385a:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	4a36      	ldr	r2, [pc, #216]	; (800393c <HAL_ADC_Start_DMA+0x220>)
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	4a35      	ldr	r2, [pc, #212]	; (8003940 <HAL_ADC_Start_DMA+0x224>)
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	4a34      	ldr	r2, [pc, #208]	; (8003944 <HAL_ADC_Start_DMA+0x228>)
 8003872:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800387c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800388c:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800389c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	334c      	adds	r3, #76	; 0x4c
 80038a8:	4619      	mov	r1, r3
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f000 fedb 	bl	8004668 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d129      	bne.n	8003920 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	e020      	b.n	8003920 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a19      	ldr	r2, [pc, #100]	; (8003948 <HAL_ADC_Start_DMA+0x22c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d11b      	bne.n	8003920 <HAL_ADC_Start_DMA+0x204>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d114      	bne.n	8003920 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	e00b      	b.n	8003920 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0210 	orr.w	r2, r3, #16
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	f043 0201 	orr.w	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	0800f970 	.word	0x0800f970
 8003930:	20000000 	.word	0x20000000
 8003934:	431bde83 	.word	0x431bde83
 8003938:	40012300 	.word	0x40012300
 800393c:	08003e9d 	.word	0x08003e9d
 8003940:	08003f5b 	.word	0x08003f5b
 8003944:	08003f79 	.word	0x08003f79
 8003948:	40012000 	.word	0x40012000

0800394c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b12      	cmp	r3, #18
 80039b0:	d909      	bls.n	80039c6 <HAL_ADC_ConfigChannel+0x2a>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a72      	ldr	r2, [pc, #456]	; (8003b80 <HAL_ADC_ConfigChannel+0x1e4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_ADC_ConfigChannel+0x2a>
 80039bc:	f240 618b 	movw	r1, #1675	; 0x68b
 80039c0:	4870      	ldr	r0, [pc, #448]	; (8003b84 <HAL_ADC_ConfigChannel+0x1e8>)
 80039c2:	f7fe fc90 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_ADC_ConfigChannel+0x3a>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d904      	bls.n	80039e0 <HAL_ADC_ConfigChannel+0x44>
 80039d6:	f240 618c 	movw	r1, #1676	; 0x68c
 80039da:	486a      	ldr	r0, [pc, #424]	; (8003b84 <HAL_ADC_ConfigChannel+0x1e8>)
 80039dc:	f7fe fc83 	bl	80022e6 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x8e>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d01c      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x8e>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d018      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x8e>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d014      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x8e>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d010      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x8e>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d00c      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x8e>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b06      	cmp	r3, #6
 8003a16:	d008      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x8e>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b07      	cmp	r3, #7
 8003a1e:	d004      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x8e>
 8003a20:	f240 618d 	movw	r1, #1677	; 0x68d
 8003a24:	4857      	ldr	r0, [pc, #348]	; (8003b84 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a26:	f7fe fc5e 	bl	80022e6 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x9c>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e118      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x2ce>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b09      	cmp	r3, #9
 8003a46:	d925      	bls.n	8003a94 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68d9      	ldr	r1, [r3, #12]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	4613      	mov	r3, r2
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3b1e      	subs	r3, #30
 8003a5e:	2207      	movs	r2, #7
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43da      	mvns	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68d9      	ldr	r1, [r3, #12]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4618      	mov	r0, r3
 8003a80:	4603      	mov	r3, r0
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4403      	add	r3, r0
 8003a86:	3b1e      	subs	r3, #30
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	e022      	b.n	8003ada <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6919      	ldr	r1, [r3, #16]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	400a      	ands	r2, r1
 8003ab6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6919      	ldr	r1, [r3, #16]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	4618      	mov	r0, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4403      	add	r3, r0
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d824      	bhi.n	8003b2c <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	3b05      	subs	r3, #5
 8003af4:	221f      	movs	r2, #31
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43da      	mvns	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	400a      	ands	r2, r1
 8003b02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	4618      	mov	r0, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3b05      	subs	r3, #5
 8003b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	635a      	str	r2, [r3, #52]	; 0x34
 8003b2a:	e051      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b0c      	cmp	r3, #12
 8003b32:	d829      	bhi.n	8003b88 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	3b23      	subs	r3, #35	; 0x23
 8003b46:	221f      	movs	r2, #31
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	400a      	ands	r2, r1
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	4618      	mov	r0, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3b23      	subs	r3, #35	; 0x23
 8003b70:	fa00 f203 	lsl.w	r2, r0, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b7c:	e028      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x234>
 8003b7e:	bf00      	nop
 8003b80:	10000012 	.word	0x10000012
 8003b84:	0800f970 	.word	0x0800f970
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	3b41      	subs	r3, #65	; 0x41
 8003b9a:	221f      	movs	r2, #31
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43da      	mvns	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3b41      	subs	r3, #65	; 0x41
 8003bc4:	fa00 f203 	lsl.w	r2, r0, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bd0:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <HAL_ADC_ConfigChannel+0x2d8>)
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a27      	ldr	r2, [pc, #156]	; (8003c78 <HAL_ADC_ConfigChannel+0x2dc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10f      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x262>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b12      	cmp	r3, #18
 8003be4:	d10b      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <HAL_ADC_ConfigChannel+0x2dc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d12b      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x2c4>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_ADC_ConfigChannel+0x2e0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <HAL_ADC_ConfigChannel+0x27e>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b11      	cmp	r3, #17
 8003c18:	d122      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <HAL_ADC_ConfigChannel+0x2e0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d111      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c3c:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_ADC_ConfigChannel+0x2e4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <HAL_ADC_ConfigChannel+0x2e8>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0c9a      	lsrs	r2, r3, #18
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c52:	e002      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f9      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40012300 	.word	0x40012300
 8003c78:	40012000 	.word	0x40012000
 8003c7c:	10000012 	.word	0x10000012
 8003c80:	20000000 	.word	0x20000000
 8003c84:	431bde83 	.word	0x431bde83

08003c88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c90:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <ADC_Init+0x208>)
 8003c92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	021a      	lsls	r2, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	4a5e      	ldr	r2, [pc, #376]	; (8003e94 <ADC_Init+0x20c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d022      	beq.n	8003d66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6899      	ldr	r1, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	e00f      	b.n	8003d86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0202 	bic.w	r2, r2, #2
 8003d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6899      	ldr	r1, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7e1b      	ldrb	r3, [r3, #24]
 8003da0:	005a      	lsls	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d028      	beq.n	8003e06 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <ADC_Init+0x13c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d904      	bls.n	8003dce <ADC_Init+0x146>
 8003dc4:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003dc8:	4833      	ldr	r0, [pc, #204]	; (8003e98 <ADC_Init+0x210>)
 8003dca:	f7fe fa8c 	bl	80022e6 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ddc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dec:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	035a      	lsls	r2, r3, #13
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	e007      	b.n	8003e16 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e14:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	051a      	lsls	r2, r3, #20
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6899      	ldr	r1, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e58:	025a      	lsls	r2, r3, #9
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6899      	ldr	r1, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	029a      	lsls	r2, r3, #10
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	609a      	str	r2, [r3, #8]
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40012300 	.word	0x40012300
 8003e94:	0f000001 	.word	0x0f000001
 8003e98:	0800f970 	.word	0x0800f970

08003e9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d13d      	bne.n	8003f32 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d12b      	bne.n	8003f28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d127      	bne.n	8003f28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d006      	beq.n	8003ef4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d119      	bne.n	8003f28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0220 	bic.w	r2, r2, #32
 8003f02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f043 0201 	orr.w	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f30:	e00f      	b.n	8003f52 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	4798      	blx	r3
}
 8003f46:	e004      	b.n	8003f52 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2240      	movs	r2, #64	; 0x40
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	f043 0204 	orr.w	r2, r3, #4
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fee:	4a04      	ldr	r2, [pc, #16]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	60d3      	str	r3, [r2, #12]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	2b00      	cmp	r3, #0
 800406e:	db0a      	blt.n	8004086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	490c      	ldr	r1, [pc, #48]	; (80040a8 <__NVIC_SetPriority+0x4c>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	440b      	add	r3, r1
 8004080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004084:	e00a      	b.n	800409c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4908      	ldr	r1, [pc, #32]	; (80040ac <__NVIC_SetPriority+0x50>)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3b04      	subs	r3, #4
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	440b      	add	r3, r1
 800409a:	761a      	strb	r2, [r3, #24]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000e100 	.word	0xe000e100
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f1c3 0307 	rsb	r3, r3, #7
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf28      	it	cs
 80040ce:	2304      	movcs	r3, #4
 80040d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d902      	bls.n	80040e0 <NVIC_EncodePriority+0x30>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3b03      	subs	r3, #3
 80040de:	e000      	b.n	80040e2 <NVIC_EncodePriority+0x32>
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	401a      	ands	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f8:	f04f 31ff 	mov.w	r1, #4294967295
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	43d9      	mvns	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	4313      	orrs	r3, r2
         );
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b07      	cmp	r3, #7
 8004124:	d00f      	beq.n	8004146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b06      	cmp	r3, #6
 800412a:	d00c      	beq.n	8004146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d009      	beq.n	8004146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b04      	cmp	r3, #4
 8004136:	d006      	beq.n	8004146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d003      	beq.n	8004146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800413e:	2190      	movs	r1, #144	; 0x90
 8004140:	4804      	ldr	r0, [pc, #16]	; (8004154 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004142:	f7fe f8d0 	bl	80022e6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ff38 	bl	8003fbc <__NVIC_SetPriorityGrouping>
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	0800f9e4 	.word	0x0800f9e4

08004158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b0f      	cmp	r3, #15
 800416e:	d903      	bls.n	8004178 <HAL_NVIC_SetPriority+0x20>
 8004170:	21a8      	movs	r1, #168	; 0xa8
 8004172:	480e      	ldr	r0, [pc, #56]	; (80041ac <HAL_NVIC_SetPriority+0x54>)
 8004174:	f7fe f8b7 	bl	80022e6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	d903      	bls.n	8004186 <HAL_NVIC_SetPriority+0x2e>
 800417e:	21a9      	movs	r1, #169	; 0xa9
 8004180:	480a      	ldr	r0, [pc, #40]	; (80041ac <HAL_NVIC_SetPriority+0x54>)
 8004182:	f7fe f8b0 	bl	80022e6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004186:	f7ff ff3d 	bl	8004004 <__NVIC_GetPriorityGrouping>
 800418a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	6978      	ldr	r0, [r7, #20]
 8004192:	f7ff ff8d 	bl	80040b0 <NVIC_EncodePriority>
 8004196:	4602      	mov	r2, r0
 8004198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ff5c 	bl	800405c <__NVIC_SetPriority>
}
 80041a4:	bf00      	nop
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	0800f9e4 	.word	0x0800f9e4

080041b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	da03      	bge.n	80041ca <HAL_NVIC_EnableIRQ+0x1a>
 80041c2:	21bc      	movs	r1, #188	; 0xbc
 80041c4:	4805      	ldr	r0, [pc, #20]	; (80041dc <HAL_NVIC_EnableIRQ+0x2c>)
 80041c6:	f7fe f88e 	bl	80022e6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ff26 	bl	8004020 <__NVIC_EnableIRQ>
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	0800f9e4 	.word	0x0800f9e4

080041e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e017      	b.n	8004222 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a0d      	ldr	r2, [pc, #52]	; (800422c <HAL_CRC_Init+0x4c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <HAL_CRC_Init+0x24>
 80041fc:	2168      	movs	r1, #104	; 0x68
 80041fe:	480c      	ldr	r0, [pc, #48]	; (8004230 <HAL_CRC_Init+0x50>)
 8004200:	f7fe f871 	bl	80022e6 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	795b      	ldrb	r3, [r3, #5]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fd fc4f 	bl	8001ab8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023000 	.word	0x40023000
 8004230:	0800fa5c 	.word	0x0800fa5c

08004234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004240:	f7fe ff9c 	bl	800317c <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e203      	b.n	8004658 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a8b      	ldr	r2, [pc, #556]	; (8004484 <HAL_DMA_Init+0x250>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d04e      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a8a      	ldr	r2, [pc, #552]	; (8004488 <HAL_DMA_Init+0x254>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d049      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a88      	ldr	r2, [pc, #544]	; (800448c <HAL_DMA_Init+0x258>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d044      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a87      	ldr	r2, [pc, #540]	; (8004490 <HAL_DMA_Init+0x25c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d03f      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a85      	ldr	r2, [pc, #532]	; (8004494 <HAL_DMA_Init+0x260>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d03a      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a84      	ldr	r2, [pc, #528]	; (8004498 <HAL_DMA_Init+0x264>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d035      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a82      	ldr	r2, [pc, #520]	; (800449c <HAL_DMA_Init+0x268>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d030      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a81      	ldr	r2, [pc, #516]	; (80044a0 <HAL_DMA_Init+0x26c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d02b      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a7f      	ldr	r2, [pc, #508]	; (80044a4 <HAL_DMA_Init+0x270>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d026      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7e      	ldr	r2, [pc, #504]	; (80044a8 <HAL_DMA_Init+0x274>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d021      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7c      	ldr	r2, [pc, #496]	; (80044ac <HAL_DMA_Init+0x278>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01c      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7b      	ldr	r2, [pc, #492]	; (80044b0 <HAL_DMA_Init+0x27c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d017      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a79      	ldr	r2, [pc, #484]	; (80044b4 <HAL_DMA_Init+0x280>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d012      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a78      	ldr	r2, [pc, #480]	; (80044b8 <HAL_DMA_Init+0x284>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00d      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a76      	ldr	r2, [pc, #472]	; (80044bc <HAL_DMA_Init+0x288>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d008      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a75      	ldr	r2, [pc, #468]	; (80044c0 <HAL_DMA_Init+0x28c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <HAL_DMA_Init+0xc4>
 80042f0:	21b7      	movs	r1, #183	; 0xb7
 80042f2:	4874      	ldr	r0, [pc, #464]	; (80044c4 <HAL_DMA_Init+0x290>)
 80042f4:	f7fd fff7 	bl	80022e6 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d026      	beq.n	800434e <HAL_DMA_Init+0x11a>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004308:	d021      	beq.n	800434e <HAL_DMA_Init+0x11a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004312:	d01c      	beq.n	800434e <HAL_DMA_Init+0x11a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800431c:	d017      	beq.n	800434e <HAL_DMA_Init+0x11a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004326:	d012      	beq.n	800434e <HAL_DMA_Init+0x11a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004330:	d00d      	beq.n	800434e <HAL_DMA_Init+0x11a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800433a:	d008      	beq.n	800434e <HAL_DMA_Init+0x11a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004344:	d003      	beq.n	800434e <HAL_DMA_Init+0x11a>
 8004346:	21b8      	movs	r1, #184	; 0xb8
 8004348:	485e      	ldr	r0, [pc, #376]	; (80044c4 <HAL_DMA_Init+0x290>)
 800434a:	f7fd ffcc 	bl	80022e6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_DMA_Init+0x13a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d007      	beq.n	800436e <HAL_DMA_Init+0x13a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b80      	cmp	r3, #128	; 0x80
 8004364:	d003      	beq.n	800436e <HAL_DMA_Init+0x13a>
 8004366:	21b9      	movs	r1, #185	; 0xb9
 8004368:	4856      	ldr	r0, [pc, #344]	; (80044c4 <HAL_DMA_Init+0x290>)
 800436a:	f7fd ffbc 	bl	80022e6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004376:	d007      	beq.n	8004388 <HAL_DMA_Init+0x154>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_DMA_Init+0x154>
 8004380:	21ba      	movs	r1, #186	; 0xba
 8004382:	4850      	ldr	r0, [pc, #320]	; (80044c4 <HAL_DMA_Init+0x290>)
 8004384:	f7fd ffaf 	bl	80022e6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004390:	d007      	beq.n	80043a2 <HAL_DMA_Init+0x16e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_DMA_Init+0x16e>
 800439a:	21bb      	movs	r1, #187	; 0xbb
 800439c:	4849      	ldr	r0, [pc, #292]	; (80044c4 <HAL_DMA_Init+0x290>)
 800439e:	f7fd ffa2 	bl	80022e6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <HAL_DMA_Init+0x192>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b2:	d008      	beq.n	80043c6 <HAL_DMA_Init+0x192>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043bc:	d003      	beq.n	80043c6 <HAL_DMA_Init+0x192>
 80043be:	21bc      	movs	r1, #188	; 0xbc
 80043c0:	4840      	ldr	r0, [pc, #256]	; (80044c4 <HAL_DMA_Init+0x290>)
 80043c2:	f7fd ff90 	bl	80022e6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <HAL_DMA_Init+0x1b6>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d6:	d008      	beq.n	80043ea <HAL_DMA_Init+0x1b6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e0:	d003      	beq.n	80043ea <HAL_DMA_Init+0x1b6>
 80043e2:	21bd      	movs	r1, #189	; 0xbd
 80043e4:	4837      	ldr	r0, [pc, #220]	; (80044c4 <HAL_DMA_Init+0x290>)
 80043e6:	f7fd ff7e 	bl	80022e6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00c      	beq.n	800440c <HAL_DMA_Init+0x1d8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d007      	beq.n	800440c <HAL_DMA_Init+0x1d8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	2b20      	cmp	r3, #32
 8004402:	d003      	beq.n	800440c <HAL_DMA_Init+0x1d8>
 8004404:	21be      	movs	r1, #190	; 0xbe
 8004406:	482f      	ldr	r0, [pc, #188]	; (80044c4 <HAL_DMA_Init+0x290>)
 8004408:	f7fd ff6d 	bl	80022e6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d012      	beq.n	800443a <HAL_DMA_Init+0x206>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d00d      	beq.n	800443a <HAL_DMA_Init+0x206>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004426:	d008      	beq.n	800443a <HAL_DMA_Init+0x206>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004430:	d003      	beq.n	800443a <HAL_DMA_Init+0x206>
 8004432:	21bf      	movs	r1, #191	; 0xbf
 8004434:	4823      	ldr	r0, [pc, #140]	; (80044c4 <HAL_DMA_Init+0x290>)
 8004436:	f7fd ff56 	bl	80022e6 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HAL_DMA_Init+0x21e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	2b04      	cmp	r3, #4
 8004448:	d003      	beq.n	8004452 <HAL_DMA_Init+0x21e>
 800444a:	21c0      	movs	r1, #192	; 0xc0
 800444c:	481d      	ldr	r0, [pc, #116]	; (80044c4 <HAL_DMA_Init+0x290>)
 800444e:	f7fd ff4a 	bl	80022e6 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	2b00      	cmp	r3, #0
 8004458:	d064      	beq.n	8004524 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d032      	beq.n	80044c8 <HAL_DMA_Init+0x294>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	2b01      	cmp	r3, #1
 8004468:	d02e      	beq.n	80044c8 <HAL_DMA_Init+0x294>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	2b02      	cmp	r3, #2
 8004470:	d02a      	beq.n	80044c8 <HAL_DMA_Init+0x294>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	2b03      	cmp	r3, #3
 8004478:	d026      	beq.n	80044c8 <HAL_DMA_Init+0x294>
 800447a:	21c5      	movs	r1, #197	; 0xc5
 800447c:	4811      	ldr	r0, [pc, #68]	; (80044c4 <HAL_DMA_Init+0x290>)
 800447e:	f7fd ff32 	bl	80022e6 <assert_failed>
 8004482:	e021      	b.n	80044c8 <HAL_DMA_Init+0x294>
 8004484:	40026010 	.word	0x40026010
 8004488:	40026028 	.word	0x40026028
 800448c:	40026040 	.word	0x40026040
 8004490:	40026058 	.word	0x40026058
 8004494:	40026070 	.word	0x40026070
 8004498:	40026088 	.word	0x40026088
 800449c:	400260a0 	.word	0x400260a0
 80044a0:	400260b8 	.word	0x400260b8
 80044a4:	40026410 	.word	0x40026410
 80044a8:	40026428 	.word	0x40026428
 80044ac:	40026440 	.word	0x40026440
 80044b0:	40026458 	.word	0x40026458
 80044b4:	40026470 	.word	0x40026470
 80044b8:	40026488 	.word	0x40026488
 80044bc:	400264a0 	.word	0x400264a0
 80044c0:	400264b8 	.word	0x400264b8
 80044c4:	0800fad0 	.word	0x0800fad0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d012      	beq.n	80044f6 <HAL_DMA_Init+0x2c2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044d8:	d00d      	beq.n	80044f6 <HAL_DMA_Init+0x2c2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044e2:	d008      	beq.n	80044f6 <HAL_DMA_Init+0x2c2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044ec:	d003      	beq.n	80044f6 <HAL_DMA_Init+0x2c2>
 80044ee:	21c6      	movs	r1, #198	; 0xc6
 80044f0:	485b      	ldr	r0, [pc, #364]	; (8004660 <HAL_DMA_Init+0x42c>)
 80044f2:	f7fd fef8 	bl	80022e6 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d012      	beq.n	8004524 <HAL_DMA_Init+0x2f0>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004506:	d00d      	beq.n	8004524 <HAL_DMA_Init+0x2f0>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004510:	d008      	beq.n	8004524 <HAL_DMA_Init+0x2f0>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800451a:	d003      	beq.n	8004524 <HAL_DMA_Init+0x2f0>
 800451c:	21c7      	movs	r1, #199	; 0xc7
 800451e:	4850      	ldr	r0, [pc, #320]	; (8004660 <HAL_DMA_Init+0x42c>)
 8004520:	f7fd fee1 	bl	80022e6 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004544:	e00f      	b.n	8004566 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004546:	f7fe fe19 	bl	800317c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b05      	cmp	r3, #5
 8004552:	d908      	bls.n	8004566 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2203      	movs	r2, #3
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e078      	b.n	8004658 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e8      	bne.n	8004546 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4b39      	ldr	r3, [pc, #228]	; (8004664 <HAL_DMA_Init+0x430>)
 8004580:	4013      	ands	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004592:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d107      	bne.n	80045d0 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	4313      	orrs	r3, r2
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0307 	bic.w	r3, r3, #7
 80045e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d117      	bne.n	800462a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fb1f 	bl	8004c50 <DMA_CheckFifoParam>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2240      	movs	r2, #64	; 0x40
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004626:	2301      	movs	r3, #1
 8004628:	e016      	b.n	8004658 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fad6 	bl	8004be4 <DMA_CalcBaseAndBitshift>
 8004638:	4603      	mov	r3, r0
 800463a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004640:	223f      	movs	r2, #63	; 0x3f
 8004642:	409a      	lsls	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	0800fad0 	.word	0x0800fad0
 8004664:	f010803f 	.word	0xf010803f

08004668 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_DMA_Start_IT+0x26>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d304      	bcc.n	8004698 <HAL_DMA_Start_IT+0x30>
 800468e:	f240 11cb 	movw	r1, #459	; 0x1cb
 8004692:	4827      	ldr	r0, [pc, #156]	; (8004730 <HAL_DMA_Start_IT+0xc8>)
 8004694:	f7fd fe27 	bl	80022e6 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_DMA_Start_IT+0x3e>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e040      	b.n	8004728 <HAL_DMA_Start_IT+0xc0>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d12f      	bne.n	800471a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fa5a 	bl	8004b88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d8:	223f      	movs	r2, #63	; 0x3f
 80046da:	409a      	lsls	r2, r3
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0216 	orr.w	r2, r2, #22
 80046ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0208 	orr.w	r2, r2, #8
 8004706:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e005      	b.n	8004726 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004722:	2302      	movs	r3, #2
 8004724:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004726:	7dfb      	ldrb	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	0800fad0 	.word	0x0800fad0

08004734 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004742:	f7fe fd1b 	bl	800317c <HAL_GetTick>
 8004746:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d008      	beq.n	8004766 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2280      	movs	r2, #128	; 0x80
 8004758:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e052      	b.n	800480c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0216 	bic.w	r2, r2, #22
 8004774:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004784:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <HAL_DMA_Abort+0x62>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0208 	bic.w	r2, r2, #8
 80047a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047b6:	e013      	b.n	80047e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047b8:	f7fe fce0 	bl	800317c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d90c      	bls.n	80047e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2203      	movs	r2, #3
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e015      	b.n	800480c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e4      	bne.n	80047b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f2:	223f      	movs	r2, #63	; 0x3f
 80047f4:	409a      	lsls	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d004      	beq.n	8004832 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2280      	movs	r2, #128	; 0x80
 800482c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e00c      	b.n	800484c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2205      	movs	r2, #5
 8004836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004864:	4b8e      	ldr	r3, [pc, #568]	; (8004aa0 <HAL_DMA_IRQHandler+0x248>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a8e      	ldr	r2, [pc, #568]	; (8004aa4 <HAL_DMA_IRQHandler+0x24c>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	0a9b      	lsrs	r3, r3, #10
 8004870:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004876:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004882:	2208      	movs	r2, #8
 8004884:	409a      	lsls	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01a      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0204 	bic.w	r2, r2, #4
 80048aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b0:	2208      	movs	r2, #8
 80048b2:	409a      	lsls	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	f043 0201 	orr.w	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	2201      	movs	r2, #1
 80048ca:	409a      	lsls	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d012      	beq.n	80048fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	2201      	movs	r2, #1
 80048e8:	409a      	lsls	r2, r3
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f043 0202 	orr.w	r2, r3, #2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	2204      	movs	r2, #4
 8004900:	409a      	lsls	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d012      	beq.n	8004930 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00b      	beq.n	8004930 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491c:	2204      	movs	r2, #4
 800491e:	409a      	lsls	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	f043 0204 	orr.w	r2, r3, #4
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004934:	2210      	movs	r2, #16
 8004936:	409a      	lsls	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d043      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d03c      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004952:	2210      	movs	r2, #16
 8004954:	409a      	lsls	r2, r3
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d018      	beq.n	800499a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d108      	bne.n	8004988 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d024      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
 8004986:	e01f      	b.n	80049c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01b      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
 8004998:	e016      	b.n	80049c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d107      	bne.n	80049b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0208 	bic.w	r2, r2, #8
 80049b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049cc:	2220      	movs	r2, #32
 80049ce:	409a      	lsls	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 808f 	beq.w	8004af8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8087 	beq.w	8004af8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ee:	2220      	movs	r2, #32
 80049f0:	409a      	lsls	r2, r3
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b05      	cmp	r3, #5
 8004a00:	d136      	bne.n	8004a70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0216 	bic.w	r2, r2, #22
 8004a10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d103      	bne.n	8004a32 <HAL_DMA_IRQHandler+0x1da>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0208 	bic.w	r2, r2, #8
 8004a40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	223f      	movs	r2, #63	; 0x3f
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d07e      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
        }
        return;
 8004a6e:	e079      	b.n	8004b64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01d      	beq.n	8004aba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10d      	bne.n	8004aa8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d031      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	4798      	blx	r3
 8004a9c:	e02c      	b.n	8004af8 <HAL_DMA_IRQHandler+0x2a0>
 8004a9e:	bf00      	nop
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d023      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
 8004ab8:	e01e      	b.n	8004af8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10f      	bne.n	8004ae8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0210 	bic.w	r2, r2, #16
 8004ad6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d032      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d022      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2205      	movs	r2, #5
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d307      	bcc.n	8004b40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f2      	bne.n	8004b24 <HAL_DMA_IRQHandler+0x2cc>
 8004b3e:	e000      	b.n	8004b42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
 8004b62:	e000      	b.n	8004b66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b64:	bf00      	nop
    }
  }
}
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b7a:	b2db      	uxtb	r3, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d108      	bne.n	8004bc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004bc6:	e007      	b.n	8004bd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	3b10      	subs	r3, #16
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <DMA_CalcBaseAndBitshift+0x64>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bfe:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <DMA_CalcBaseAndBitshift+0x68>)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d909      	bls.n	8004c26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	659a      	str	r2, [r3, #88]	; 0x58
 8004c24:	e007      	b.n	8004c36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	aaaaaaab 	.word	0xaaaaaaab
 8004c4c:	080100f8 	.word	0x080100f8

08004c50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d11f      	bne.n	8004caa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d856      	bhi.n	8004d1e <DMA_CheckFifoParam+0xce>
 8004c70:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <DMA_CheckFifoParam+0x28>)
 8004c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c76:	bf00      	nop
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004c9b 	.word	0x08004c9b
 8004c80:	08004c89 	.word	0x08004c89
 8004c84:	08004d1f 	.word	0x08004d1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d046      	beq.n	8004d22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c98:	e043      	b.n	8004d22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ca2:	d140      	bne.n	8004d26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca8:	e03d      	b.n	8004d26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb2:	d121      	bne.n	8004cf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d837      	bhi.n	8004d2a <DMA_CheckFifoParam+0xda>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <DMA_CheckFifoParam+0x70>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004cd7 	.word	0x08004cd7
 8004cc8:	08004cd1 	.word	0x08004cd1
 8004ccc:	08004ce9 	.word	0x08004ce9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd4:	e030      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d025      	beq.n	8004d2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce6:	e022      	b.n	8004d2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cf0:	d11f      	bne.n	8004d32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cf6:	e01c      	b.n	8004d32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d903      	bls.n	8004d06 <DMA_CheckFifoParam+0xb6>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d003      	beq.n	8004d0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d04:	e018      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0a:	e015      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00e      	beq.n	8004d36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e00b      	b.n	8004d36 <DMA_CheckFifoParam+0xe6>
      break;
 8004d1e:	bf00      	nop
 8004d20:	e00a      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d22:	bf00      	nop
 8004d24:	e008      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d26:	bf00      	nop
 8004d28:	e006      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e004      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d2e:	bf00      	nop
 8004d30:	e002      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d36:	bf00      	nop
    }
  } 
  
  return status; 
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop

08004d48 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004d52:	4b4b      	ldr	r3, [pc, #300]	; (8004e80 <HAL_FLASH_IRQHandler+0x138>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d020      	beq.n	8004da0 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8004d5e:	4b49      	ldr	r3, [pc, #292]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d107      	bne.n	8004d78 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8004d68:	4b46      	ldr	r3, [pc, #280]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8004d6e:	4b45      	ldr	r3, [pc, #276]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004d70:	f04f 32ff 	mov.w	r2, #4294967295
 8004d74:	60da      	str	r2, [r3, #12]
 8004d76:	e00b      	b.n	8004d90 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8004d78:	4b42      	ldr	r3, [pc, #264]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d103      	bne.n	8004d8a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8004d82:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	e002      	b.n	8004d90 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8004d90:	f000 f88e 	bl	8004eb0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f881 	bl	8004e9c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004d9a:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004da0:	4b37      	ldr	r3, [pc, #220]	; (8004e80 <HAL_FLASH_IRQHandler+0x138>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d04a      	beq.n	8004e42 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004dac:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <HAL_FLASH_IRQHandler+0x138>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8004db2:	4b34      	ldr	r3, [pc, #208]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d12d      	bne.n	8004e18 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8004dbc:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	4a30      	ldr	r2, [pc, #192]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004dc4:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d015      	beq.n	8004dfa <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8004dce:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f857 	bl	8004e88 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8004dda:	4b2a      	ldr	r3, [pc, #168]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	4a28      	ldr	r2, [pc, #160]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004de2:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8004de4:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8004dea:	4b26      	ldr	r3, [pc, #152]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004dec:	7a1b      	ldrb	r3, [r3, #8]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f8c2 	bl	8004f7c <FLASH_Erase_Sector>
 8004df8:	e023      	b.n	8004e42 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004e06:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8004e0c:	f000 f92c 	bl	8005068 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f839 	bl	8004e88 <HAL_FLASH_EndOfOperationCallback>
 8004e16:	e014      	b.n	8004e42 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8004e18:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d107      	bne.n	8004e32 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8004e22:	f000 f921 	bl	8005068 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8004e26:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f82c 	bl	8004e88 <HAL_FLASH_EndOfOperationCallback>
 8004e30:	e004      	b.n	8004e3c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8004e32:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 f826 	bl	8004e88 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8004e42:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d114      	bne.n	8004e76 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <HAL_FLASH_IRQHandler+0x138>)
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	4a0b      	ldr	r2, [pc, #44]	; (8004e80 <HAL_FLASH_IRQHandler+0x138>)
 8004e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e56:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_FLASH_IRQHandler+0x138>)
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <HAL_FLASH_IRQHandler+0x138>)
 8004e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e62:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <HAL_FLASH_IRQHandler+0x138>)
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	4a05      	ldr	r2, [pc, #20]	; (8004e80 <HAL_FLASH_IRQHandler+0x138>)
 8004e6a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004e70:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <HAL_FLASH_IRQHandler+0x13c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	761a      	strb	r2, [r3, #24]
  }
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40023c00 	.word	0x40023c00
 8004e84:	20000908 	.word	0x20000908

08004e88 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004eb4:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004ec0:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f043 0310 	orr.w	r3, r3, #16
 8004ec8:	4a2b      	ldr	r2, [pc, #172]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004eca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004ecc:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004ece:	2210      	movs	r2, #16
 8004ed0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004ed2:	4b28      	ldr	r3, [pc, #160]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004ede:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f043 0308 	orr.w	r3, r3, #8
 8004ee6:	4a24      	ldr	r2, [pc, #144]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004ee8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004eea:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004eec:	2220      	movs	r2, #32
 8004eee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004ef0:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004efc:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004f06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004f08:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004f0a:	2240      	movs	r2, #64	; 0x40
 8004f0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004f0e:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004f1a:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f043 0302 	orr.w	r3, r3, #2
 8004f22:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004f24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004f26:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004f28:	2280      	movs	r2, #128	; 0x80
 8004f2a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004f2c:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	4a0d      	ldr	r2, [pc, #52]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004f42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f4a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004f4c:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004f58:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f043 0320 	orr.w	r3, r3, #32
 8004f60:	4a05      	ldr	r2, [pc, #20]	; (8004f78 <FLASH_SetErrorCode+0xc8>)
 8004f62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004f64:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <FLASH_SetErrorCode+0xc4>)
 8004f66:	2202      	movs	r2, #2
 8004f68:	60da      	str	r2, [r3, #12]
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	40023c00 	.word	0x40023c00
 8004f78:	20000908 	.word	0x20000908

08004f7c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d019      	beq.n	8004fc6 <FLASH_Erase_Sector+0x4a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d016      	beq.n	8004fc6 <FLASH_Erase_Sector+0x4a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d013      	beq.n	8004fc6 <FLASH_Erase_Sector+0x4a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d010      	beq.n	8004fc6 <FLASH_Erase_Sector+0x4a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d00d      	beq.n	8004fc6 <FLASH_Erase_Sector+0x4a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b05      	cmp	r3, #5
 8004fae:	d00a      	beq.n	8004fc6 <FLASH_Erase_Sector+0x4a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b06      	cmp	r3, #6
 8004fb4:	d007      	beq.n	8004fc6 <FLASH_Erase_Sector+0x4a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b07      	cmp	r3, #7
 8004fba:	d004      	beq.n	8004fc6 <FLASH_Erase_Sector+0x4a>
 8004fbc:	f240 31d9 	movw	r1, #985	; 0x3d9
 8004fc0:	4827      	ldr	r0, [pc, #156]	; (8005060 <FLASH_Erase_Sector+0xe4>)
 8004fc2:	f7fd f990 	bl	80022e6 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00d      	beq.n	8004fe8 <FLASH_Erase_Sector+0x6c>
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d00a      	beq.n	8004fe8 <FLASH_Erase_Sector+0x6c>
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d007      	beq.n	8004fe8 <FLASH_Erase_Sector+0x6c>
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d004      	beq.n	8004fe8 <FLASH_Erase_Sector+0x6c>
 8004fde:	f240 31da 	movw	r1, #986	; 0x3da
 8004fe2:	481f      	ldr	r0, [pc, #124]	; (8005060 <FLASH_Erase_Sector+0xe4>)
 8004fe4:	f7fd f97f 	bl	80022e6 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d102      	bne.n	8004ff4 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	e010      	b.n	8005016 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d103      	bne.n	8005002 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e009      	b.n	8005016 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005002:	78fb      	ldrb	r3, [r7, #3]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d103      	bne.n	8005010 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e002      	b.n	8005016 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005010:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005014:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <FLASH_Erase_Sector+0xe8>)
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	4a12      	ldr	r2, [pc, #72]	; (8005064 <FLASH_Erase_Sector+0xe8>)
 800501c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005020:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <FLASH_Erase_Sector+0xe8>)
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	490f      	ldr	r1, [pc, #60]	; (8005064 <FLASH_Erase_Sector+0xe8>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800502e:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <FLASH_Erase_Sector+0xe8>)
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	4a0c      	ldr	r2, [pc, #48]	; (8005064 <FLASH_Erase_Sector+0xe8>)
 8005034:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005038:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <FLASH_Erase_Sector+0xe8>)
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4313      	orrs	r3, r2
 8005044:	4a07      	ldr	r2, [pc, #28]	; (8005064 <FLASH_Erase_Sector+0xe8>)
 8005046:	f043 0302 	orr.w	r3, r3, #2
 800504a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <FLASH_Erase_Sector+0xe8>)
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	4a04      	ldr	r2, [pc, #16]	; (8005064 <FLASH_Erase_Sector+0xe8>)
 8005052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005056:	6113      	str	r3, [r2, #16]
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	0800fb44 	.word	0x0800fb44
 8005064:	40023c00 	.word	0x40023c00

08005068 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800506c:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <FLASH_FlushCaches+0x88>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005074:	2b00      	cmp	r3, #0
 8005076:	d017      	beq.n	80050a8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <FLASH_FlushCaches+0x88>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1c      	ldr	r2, [pc, #112]	; (80050f0 <FLASH_FlushCaches+0x88>)
 800507e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005082:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005084:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <FLASH_FlushCaches+0x88>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a19      	ldr	r2, [pc, #100]	; (80050f0 <FLASH_FlushCaches+0x88>)
 800508a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <FLASH_FlushCaches+0x88>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <FLASH_FlushCaches+0x88>)
 8005096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800509a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <FLASH_FlushCaches+0x88>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <FLASH_FlushCaches+0x88>)
 80050a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050a6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <FLASH_FlushCaches+0x88>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d017      	beq.n	80050e4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <FLASH_FlushCaches+0x88>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a0d      	ldr	r2, [pc, #52]	; (80050f0 <FLASH_FlushCaches+0x88>)
 80050ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050be:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <FLASH_FlushCaches+0x88>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <FLASH_FlushCaches+0x88>)
 80050c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <FLASH_FlushCaches+0x88>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a07      	ldr	r2, [pc, #28]	; (80050f0 <FLASH_FlushCaches+0x88>)
 80050d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <FLASH_FlushCaches+0x88>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a04      	ldr	r2, [pc, #16]	; (80050f0 <FLASH_FlushCaches+0x88>)
 80050de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050e2:	6013      	str	r3, [r2, #0]
  }
}
 80050e4:	bf00      	nop
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40023c00 	.word	0x40023c00

080050f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005102:	2300      	movs	r3, #0
 8005104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a33      	ldr	r2, [pc, #204]	; (80051dc <HAL_GPIO_Init+0xe8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d017      	beq.n	8005142 <HAL_GPIO_Init+0x4e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a32      	ldr	r2, [pc, #200]	; (80051e0 <HAL_GPIO_Init+0xec>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_GPIO_Init+0x4e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a31      	ldr	r2, [pc, #196]	; (80051e4 <HAL_GPIO_Init+0xf0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00f      	beq.n	8005142 <HAL_GPIO_Init+0x4e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a30      	ldr	r2, [pc, #192]	; (80051e8 <HAL_GPIO_Init+0xf4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00b      	beq.n	8005142 <HAL_GPIO_Init+0x4e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2f      	ldr	r2, [pc, #188]	; (80051ec <HAL_GPIO_Init+0xf8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <HAL_GPIO_Init+0x4e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a2e      	ldr	r2, [pc, #184]	; (80051f0 <HAL_GPIO_Init+0xfc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <HAL_GPIO_Init+0x4e>
 800513a:	21ac      	movs	r1, #172	; 0xac
 800513c:	482d      	ldr	r0, [pc, #180]	; (80051f4 <HAL_GPIO_Init+0x100>)
 800513e:	f7fd f8d2 	bl	80022e6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_GPIO_Init+0x64>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	041b      	lsls	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_GPIO_Init+0x6c>
 8005158:	21ad      	movs	r1, #173	; 0xad
 800515a:	4826      	ldr	r0, [pc, #152]	; (80051f4 <HAL_GPIO_Init+0x100>)
 800515c:	f7fd f8c3 	bl	80022e6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d035      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d031      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b11      	cmp	r3, #17
 8005176:	d02d      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d029      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b12      	cmp	r3, #18
 8005186:	d025      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005190:	d020      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800519a:	d01b      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80051a4:	d016      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80051ae:	d011      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80051b8:	d00c      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80051c2:	d007      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d003      	beq.n	80051d4 <HAL_GPIO_Init+0xe0>
 80051cc:	21ae      	movs	r1, #174	; 0xae
 80051ce:	4809      	ldr	r0, [pc, #36]	; (80051f4 <HAL_GPIO_Init+0x100>)
 80051d0:	f7fd f889 	bl	80022e6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	e20c      	b.n	80055f4 <HAL_GPIO_Init+0x500>
 80051da:	bf00      	nop
 80051dc:	40020000 	.word	0x40020000
 80051e0:	40020400 	.word	0x40020400
 80051e4:	40020800 	.word	0x40020800
 80051e8:	40020c00 	.word	0x40020c00
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40021c00 	.word	0x40021c00
 80051f4:	0800fbbc 	.word	0x0800fbbc
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051f8:	2201      	movs	r2, #1
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4013      	ands	r3, r2
 800520a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	429a      	cmp	r2, r3
 8005212:	f040 81ec 	bne.w	80055ee <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d005      	beq.n	800522e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800522a:	2b02      	cmp	r3, #2
 800522c:	d144      	bne.n	80052b8 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00f      	beq.n	8005256 <HAL_GPIO_Init+0x162>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d00b      	beq.n	8005256 <HAL_GPIO_Init+0x162>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d007      	beq.n	8005256 <HAL_GPIO_Init+0x162>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d003      	beq.n	8005256 <HAL_GPIO_Init+0x162>
 800524e:	21c0      	movs	r1, #192	; 0xc0
 8005250:	4884      	ldr	r0, [pc, #528]	; (8005464 <HAL_GPIO_Init+0x370>)
 8005252:	f7fd f848 	bl	80022e6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	2203      	movs	r2, #3
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43db      	mvns	r3, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4013      	ands	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4313      	orrs	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800528c:	2201      	movs	r2, #1
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	43db      	mvns	r3, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4013      	ands	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	f003 0201 	and.w	r2, r3, #1
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d027      	beq.n	8005314 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <HAL_GPIO_Init+0x1f0>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d007      	beq.n	80052e4 <HAL_GPIO_Init+0x1f0>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d003      	beq.n	80052e4 <HAL_GPIO_Init+0x1f0>
 80052dc:	21d1      	movs	r1, #209	; 0xd1
 80052de:	4861      	ldr	r0, [pc, #388]	; (8005464 <HAL_GPIO_Init+0x370>)
 80052e0:	f7fd f801 	bl	80022e6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	2203      	movs	r2, #3
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4013      	ands	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4313      	orrs	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	2b02      	cmp	r3, #2
 800531e:	f040 80a3 	bne.w	8005468 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d077      	beq.n	800541a <HAL_GPIO_Init+0x326>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b09      	cmp	r3, #9
 8005330:	d073      	beq.n	800541a <HAL_GPIO_Init+0x326>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d06f      	beq.n	800541a <HAL_GPIO_Init+0x326>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d06b      	beq.n	800541a <HAL_GPIO_Init+0x326>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d067      	beq.n	800541a <HAL_GPIO_Init+0x326>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d063      	beq.n	800541a <HAL_GPIO_Init+0x326>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d05f      	beq.n	800541a <HAL_GPIO_Init+0x326>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d05b      	beq.n	800541a <HAL_GPIO_Init+0x326>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d057      	beq.n	800541a <HAL_GPIO_Init+0x326>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d053      	beq.n	800541a <HAL_GPIO_Init+0x326>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d04f      	beq.n	800541a <HAL_GPIO_Init+0x326>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b04      	cmp	r3, #4
 8005380:	d04b      	beq.n	800541a <HAL_GPIO_Init+0x326>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b04      	cmp	r3, #4
 8005388:	d047      	beq.n	800541a <HAL_GPIO_Init+0x326>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d043      	beq.n	800541a <HAL_GPIO_Init+0x326>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b05      	cmp	r3, #5
 8005398:	d03f      	beq.n	800541a <HAL_GPIO_Init+0x326>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b05      	cmp	r3, #5
 80053a0:	d03b      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b05      	cmp	r3, #5
 80053a8:	d037      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b06      	cmp	r3, #6
 80053b0:	d033      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d02f      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b05      	cmp	r3, #5
 80053c0:	d02b      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d027      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b07      	cmp	r3, #7
 80053d0:	d023      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	2b07      	cmp	r3, #7
 80053d8:	d01f      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b07      	cmp	r3, #7
 80053e0:	d01b      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d017      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b0a      	cmp	r3, #10
 80053f0:	d013      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b09      	cmp	r3, #9
 80053f8:	d00f      	beq.n	800541a <HAL_GPIO_Init+0x326>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b09      	cmp	r3, #9
 8005400:	d00b      	beq.n	800541a <HAL_GPIO_Init+0x326>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b0c      	cmp	r3, #12
 8005408:	d007      	beq.n	800541a <HAL_GPIO_Init+0x326>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d003      	beq.n	800541a <HAL_GPIO_Init+0x326>
 8005412:	21de      	movs	r1, #222	; 0xde
 8005414:	4813      	ldr	r0, [pc, #76]	; (8005464 <HAL_GPIO_Init+0x370>)
 8005416:	f7fc ff66 	bl	80022e6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	08da      	lsrs	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3208      	adds	r2, #8
 8005422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	220f      	movs	r2, #15
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	43db      	mvns	r3, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4013      	ands	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	08da      	lsrs	r2, r3, #3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3208      	adds	r2, #8
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005462:	e001      	b.n	8005468 <HAL_GPIO_Init+0x374>
 8005464:	0800fbbc 	.word	0x0800fbbc
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	2203      	movs	r2, #3
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4013      	ands	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 0203 	and.w	r2, r3, #3
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4313      	orrs	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80a2 	beq.w	80055ee <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	4b56      	ldr	r3, [pc, #344]	; (8005608 <HAL_GPIO_Init+0x514>)
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	4a55      	ldr	r2, [pc, #340]	; (8005608 <HAL_GPIO_Init+0x514>)
 80054b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054b8:	6453      	str	r3, [r2, #68]	; 0x44
 80054ba:	4b53      	ldr	r3, [pc, #332]	; (8005608 <HAL_GPIO_Init+0x514>)
 80054bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054c6:	4a51      	ldr	r2, [pc, #324]	; (800560c <HAL_GPIO_Init+0x518>)
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	3302      	adds	r3, #2
 80054ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	220f      	movs	r2, #15
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43db      	mvns	r3, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4013      	ands	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a48      	ldr	r2, [pc, #288]	; (8005610 <HAL_GPIO_Init+0x51c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d019      	beq.n	8005526 <HAL_GPIO_Init+0x432>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a47      	ldr	r2, [pc, #284]	; (8005614 <HAL_GPIO_Init+0x520>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_GPIO_Init+0x42e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a46      	ldr	r2, [pc, #280]	; (8005618 <HAL_GPIO_Init+0x524>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00d      	beq.n	800551e <HAL_GPIO_Init+0x42a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a45      	ldr	r2, [pc, #276]	; (800561c <HAL_GPIO_Init+0x528>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <HAL_GPIO_Init+0x426>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a44      	ldr	r2, [pc, #272]	; (8005620 <HAL_GPIO_Init+0x52c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d101      	bne.n	8005516 <HAL_GPIO_Init+0x422>
 8005512:	2304      	movs	r3, #4
 8005514:	e008      	b.n	8005528 <HAL_GPIO_Init+0x434>
 8005516:	2307      	movs	r3, #7
 8005518:	e006      	b.n	8005528 <HAL_GPIO_Init+0x434>
 800551a:	2303      	movs	r3, #3
 800551c:	e004      	b.n	8005528 <HAL_GPIO_Init+0x434>
 800551e:	2302      	movs	r3, #2
 8005520:	e002      	b.n	8005528 <HAL_GPIO_Init+0x434>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <HAL_GPIO_Init+0x434>
 8005526:	2300      	movs	r3, #0
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	f002 0203 	and.w	r2, r2, #3
 800552e:	0092      	lsls	r2, r2, #2
 8005530:	4093      	lsls	r3, r2
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005538:	4934      	ldr	r1, [pc, #208]	; (800560c <HAL_GPIO_Init+0x518>)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	089b      	lsrs	r3, r3, #2
 800553e:	3302      	adds	r3, #2
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005546:	4b37      	ldr	r3, [pc, #220]	; (8005624 <HAL_GPIO_Init+0x530>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800556a:	4a2e      	ldr	r2, [pc, #184]	; (8005624 <HAL_GPIO_Init+0x530>)
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005570:	4b2c      	ldr	r3, [pc, #176]	; (8005624 <HAL_GPIO_Init+0x530>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005594:	4a23      	ldr	r2, [pc, #140]	; (8005624 <HAL_GPIO_Init+0x530>)
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800559a:	4b22      	ldr	r3, [pc, #136]	; (8005624 <HAL_GPIO_Init+0x530>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4013      	ands	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055be:	4a19      	ldr	r2, [pc, #100]	; (8005624 <HAL_GPIO_Init+0x530>)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055c4:	4b17      	ldr	r3, [pc, #92]	; (8005624 <HAL_GPIO_Init+0x530>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4013      	ands	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055e8:	4a0e      	ldr	r2, [pc, #56]	; (8005624 <HAL_GPIO_Init+0x530>)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3301      	adds	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b0f      	cmp	r3, #15
 80055f8:	f67f adfe 	bls.w	80051f8 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800
 800560c:	40013800 	.word	0x40013800
 8005610:	40020000 	.word	0x40020000
 8005614:	40020400 	.word	0x40020400
 8005618:	40020800 	.word	0x40020800
 800561c:	40020c00 	.word	0x40020c00
 8005620:	40021000 	.word	0x40021000
 8005624:	40013c00 	.word	0x40013c00

08005628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	807b      	strh	r3, [r7, #2]
 8005634:	4613      	mov	r3, r2
 8005636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005638:	887b      	ldrh	r3, [r7, #2]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <HAL_GPIO_WritePin+0x20>
 800563e:	887b      	ldrh	r3, [r7, #2]
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_GPIO_WritePin+0x2a>
 8005648:	f240 119d 	movw	r1, #413	; 0x19d
 800564c:	480e      	ldr	r0, [pc, #56]	; (8005688 <HAL_GPIO_WritePin+0x60>)
 800564e:	f7fc fe4a 	bl	80022e6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005652:	787b      	ldrb	r3, [r7, #1]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <HAL_GPIO_WritePin+0x40>
 8005658:	787b      	ldrb	r3, [r7, #1]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d004      	beq.n	8005668 <HAL_GPIO_WritePin+0x40>
 800565e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8005662:	4809      	ldr	r0, [pc, #36]	; (8005688 <HAL_GPIO_WritePin+0x60>)
 8005664:	f7fc fe3f 	bl	80022e6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005668:	787b      	ldrb	r3, [r7, #1]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800566e:	887a      	ldrh	r2, [r7, #2]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005674:	e003      	b.n	800567e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005676:	887b      	ldrh	r3, [r7, #2]
 8005678:	041a      	lsls	r2, r3, #16
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	619a      	str	r2, [r3, #24]
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	0800fbbc 	.word	0x0800fbbc

0800568c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e1f7      	b.n	8005a8e <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a81      	ldr	r2, [pc, #516]	; (80058a8 <HAL_I2C_Init+0x21c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <HAL_I2C_Init+0x3a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a7f      	ldr	r2, [pc, #508]	; (80058ac <HAL_I2C_Init+0x220>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_I2C_Init+0x3a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a7e      	ldr	r2, [pc, #504]	; (80058b0 <HAL_I2C_Init+0x224>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_I2C_Init+0x3a>
 80056bc:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80056c0:	487c      	ldr	r0, [pc, #496]	; (80058b4 <HAL_I2C_Init+0x228>)
 80056c2:	f7fc fe10 	bl	80022e6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d004      	beq.n	80056d8 <HAL_I2C_Init+0x4c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	4a79      	ldr	r2, [pc, #484]	; (80058b8 <HAL_I2C_Init+0x22c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d904      	bls.n	80056e2 <HAL_I2C_Init+0x56>
 80056d8:	f240 11bf 	movw	r1, #447	; 0x1bf
 80056dc:	4875      	ldr	r0, [pc, #468]	; (80058b4 <HAL_I2C_Init+0x228>)
 80056de:	f7fc fe02 	bl	80022e6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <HAL_I2C_Init+0x72>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f2:	d004      	beq.n	80056fe <HAL_I2C_Init+0x72>
 80056f4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80056f8:	486e      	ldr	r0, [pc, #440]	; (80058b4 <HAL_I2C_Init+0x228>)
 80056fa:	f7fc fdf4 	bl	80022e6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d004      	beq.n	8005718 <HAL_I2C_Init+0x8c>
 800570e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005712:	4868      	ldr	r0, [pc, #416]	; (80058b4 <HAL_I2C_Init+0x228>)
 8005714:	f7fc fde7 	bl	80022e6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005720:	d009      	beq.n	8005736 <HAL_I2C_Init+0xaa>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800572a:	d004      	beq.n	8005736 <HAL_I2C_Init+0xaa>
 800572c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8005730:	4860      	ldr	r0, [pc, #384]	; (80058b4 <HAL_I2C_Init+0x228>)
 8005732:	f7fc fdd8 	bl	80022e6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d008      	beq.n	8005750 <HAL_I2C_Init+0xc4>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d004      	beq.n	8005750 <HAL_I2C_Init+0xc4>
 8005746:	f240 11c3 	movw	r1, #451	; 0x1c3
 800574a:	485a      	ldr	r0, [pc, #360]	; (80058b4 <HAL_I2C_Init+0x228>)
 800574c:	f7fc fdcb 	bl	80022e6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <HAL_I2C_Init+0xda>
 800575c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005760:	4854      	ldr	r0, [pc, #336]	; (80058b4 <HAL_I2C_Init+0x228>)
 8005762:	f7fc fdc0 	bl	80022e6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <HAL_I2C_Init+0xf4>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d004      	beq.n	8005780 <HAL_I2C_Init+0xf4>
 8005776:	f240 11c5 	movw	r1, #453	; 0x1c5
 800577a:	484e      	ldr	r0, [pc, #312]	; (80058b4 <HAL_I2C_Init+0x228>)
 800577c:	f7fc fdb3 	bl	80022e6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_I2C_Init+0x10e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	2b80      	cmp	r3, #128	; 0x80
 800578e:	d004      	beq.n	800579a <HAL_I2C_Init+0x10e>
 8005790:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005794:	4847      	ldr	r0, [pc, #284]	; (80058b4 <HAL_I2C_Init+0x228>)
 8005796:	f7fc fda6 	bl	80022e6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d12c      	bne.n	8005800 <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a42      	ldr	r2, [pc, #264]	; (80058bc <HAL_I2C_Init+0x230>)
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a42      	ldr	r2, [pc, #264]	; (80058c0 <HAL_I2C_Init+0x234>)
 80057b8:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a41      	ldr	r2, [pc, #260]	; (80058c4 <HAL_I2C_Init+0x238>)
 80057be:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a41      	ldr	r2, [pc, #260]	; (80058c8 <HAL_I2C_Init+0x23c>)
 80057c4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a40      	ldr	r2, [pc, #256]	; (80058cc <HAL_I2C_Init+0x240>)
 80057ca:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a40      	ldr	r2, [pc, #256]	; (80058d0 <HAL_I2C_Init+0x244>)
 80057d0:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a3f      	ldr	r2, [pc, #252]	; (80058d4 <HAL_I2C_Init+0x248>)
 80057d6:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a3f      	ldr	r2, [pc, #252]	; (80058d8 <HAL_I2C_Init+0x24c>)
 80057dc:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a3e      	ldr	r2, [pc, #248]	; (80058dc <HAL_I2C_Init+0x250>)
 80057e2:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a3e      	ldr	r2, [pc, #248]	; (80058e0 <HAL_I2C_Init+0x254>)
 80057e8:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d102      	bne.n	80057f8 <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a3b      	ldr	r2, [pc, #236]	; (80058e4 <HAL_I2C_Init+0x258>)
 80057f6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2224      	movs	r2, #36	; 0x24
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0201 	bic.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005826:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005838:	f002 fc0a 	bl	8008050 <HAL_RCC_GetPCLK1Freq>
 800583c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <HAL_I2C_Init+0x25c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d807      	bhi.n	8005858 <HAL_I2C_Init+0x1cc>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4a28      	ldr	r2, [pc, #160]	; (80058ec <HAL_I2C_Init+0x260>)
 800584c:	4293      	cmp	r3, r2
 800584e:	bf94      	ite	ls
 8005850:	2301      	movls	r3, #1
 8005852:	2300      	movhi	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	e006      	b.n	8005866 <HAL_I2C_Init+0x1da>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4a25      	ldr	r2, [pc, #148]	; (80058f0 <HAL_I2C_Init+0x264>)
 800585c:	4293      	cmp	r3, r2
 800585e:	bf94      	ite	ls
 8005860:	2301      	movls	r3, #1
 8005862:	2300      	movhi	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e10f      	b.n	8005a8e <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4a20      	ldr	r2, [pc, #128]	; (80058f4 <HAL_I2C_Init+0x268>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	0c9b      	lsrs	r3, r3, #18
 8005878:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	4a12      	ldr	r2, [pc, #72]	; (80058e8 <HAL_I2C_Init+0x25c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d82a      	bhi.n	80058f8 <HAL_I2C_Init+0x26c>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	3301      	adds	r3, #1
 80058a6:	e031      	b.n	800590c <HAL_I2C_Init+0x280>
 80058a8:	40005400 	.word	0x40005400
 80058ac:	40005800 	.word	0x40005800
 80058b0:	40005c00 	.word	0x40005c00
 80058b4:	0800fc30 	.word	0x0800fc30
 80058b8:	00061a80 	.word	0x00061a80
 80058bc:	08005ed1 	.word	0x08005ed1
 80058c0:	08005ee5 	.word	0x08005ee5
 80058c4:	08005ef9 	.word	0x08005ef9
 80058c8:	08005f0d 	.word	0x08005f0d
 80058cc:	08005f3d 	.word	0x08005f3d
 80058d0:	08005f51 	.word	0x08005f51
 80058d4:	08005f65 	.word	0x08005f65
 80058d8:	08005f79 	.word	0x08005f79
 80058dc:	08005f8d 	.word	0x08005f8d
 80058e0:	08005f21 	.word	0x08005f21
 80058e4:	08002051 	.word	0x08002051
 80058e8:	000186a0 	.word	0x000186a0
 80058ec:	001e847f 	.word	0x001e847f
 80058f0:	003d08ff 	.word	0x003d08ff
 80058f4:	431bde83 	.word	0x431bde83
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	4a65      	ldr	r2, [pc, #404]	; (8005a98 <HAL_I2C_Init+0x40c>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	099b      	lsrs	r3, r3, #6
 800590a:	3301      	adds	r3, #1
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	430b      	orrs	r3, r1
 8005912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800591e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	495d      	ldr	r1, [pc, #372]	; (8005a9c <HAL_I2C_Init+0x410>)
 8005928:	428b      	cmp	r3, r1
 800592a:	d819      	bhi.n	8005960 <HAL_I2C_Init+0x2d4>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	1e59      	subs	r1, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fbb1 f3f3 	udiv	r3, r1, r3
 800593a:	1c59      	adds	r1, r3, #1
 800593c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005940:	400b      	ands	r3, r1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_I2C_Init+0x2d0>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1e59      	subs	r1, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	fbb1 f3f3 	udiv	r3, r1, r3
 8005954:	3301      	adds	r3, #1
 8005956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595a:	e051      	b.n	8005a00 <HAL_I2C_Init+0x374>
 800595c:	2304      	movs	r3, #4
 800595e:	e04f      	b.n	8005a00 <HAL_I2C_Init+0x374>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d111      	bne.n	800598c <HAL_I2C_Init+0x300>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1e58      	subs	r0, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6859      	ldr	r1, [r3, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	440b      	add	r3, r1
 8005976:	fbb0 f3f3 	udiv	r3, r0, r3
 800597a:	3301      	adds	r3, #1
 800597c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005980:	2b00      	cmp	r3, #0
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e012      	b.n	80059b2 <HAL_I2C_Init+0x326>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1e58      	subs	r0, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6859      	ldr	r1, [r3, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	0099      	lsls	r1, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a2:	3301      	adds	r3, #1
 80059a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bf0c      	ite	eq
 80059ac:	2301      	moveq	r3, #1
 80059ae:	2300      	movne	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_I2C_Init+0x32e>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e022      	b.n	8005a00 <HAL_I2C_Init+0x374>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10e      	bne.n	80059e0 <HAL_I2C_Init+0x354>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1e58      	subs	r0, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	440b      	add	r3, r1
 80059d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80059d4:	3301      	adds	r3, #1
 80059d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059de:	e00f      	b.n	8005a00 <HAL_I2C_Init+0x374>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1e58      	subs	r0, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6859      	ldr	r1, [r3, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	0099      	lsls	r1, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f6:	3301      	adds	r3, #1
 80059f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	6809      	ldr	r1, [r1, #0]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6911      	ldr	r1, [r2, #16]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68d2      	ldr	r2, [r2, #12]
 8005a3a:	4311      	orrs	r1, r2
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	10624dd3 	.word	0x10624dd3
 8005a9c:	000186a0 	.word	0x000186a0

08005aa0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d003      	beq.n	8005ad8 <HAL_I2C_EV_IRQHandler+0x38>
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	f040 80c1 	bne.w	8005c5a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10d      	bne.n	8005b0e <HAL_I2C_EV_IRQHandler+0x6e>
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005af8:	d003      	beq.n	8005b02 <HAL_I2C_EV_IRQHandler+0x62>
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b00:	d101      	bne.n	8005b06 <HAL_I2C_EV_IRQHandler+0x66>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <HAL_I2C_EV_IRQHandler+0x68>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	f000 8132 	beq.w	8005d72 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00c      	beq.n	8005b32 <HAL_I2C_EV_IRQHandler+0x92>
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	0a5b      	lsrs	r3, r3, #9
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 fc95 	bl	8007454 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fd8f 	bl	800664e <I2C_Master_SB>
 8005b30:	e092      	b.n	8005c58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	08db      	lsrs	r3, r3, #3
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <HAL_I2C_EV_IRQHandler+0xb2>
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	0a5b      	lsrs	r3, r3, #9
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fe05 	bl	800675a <I2C_Master_ADD10>
 8005b50:	e082      	b.n	8005c58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <HAL_I2C_EV_IRQHandler+0xd2>
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	0a5b      	lsrs	r3, r3, #9
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fe1f 	bl	80067ae <I2C_Master_ADDR>
 8005b70:	e072      	b.n	8005c58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	089b      	lsrs	r3, r3, #2
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d03b      	beq.n	8005bf6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b8c:	f000 80f3 	beq.w	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	09db      	lsrs	r3, r3, #7
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00f      	beq.n	8005bbc <HAL_I2C_EV_IRQHandler+0x11c>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	0a9b      	lsrs	r3, r3, #10
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <HAL_I2C_EV_IRQHandler+0x11c>
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	089b      	lsrs	r3, r3, #2
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d103      	bne.n	8005bbc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f9f3 	bl	8005fa0 <I2C_MasterTransmit_TXE>
 8005bba:	e04d      	b.n	8005c58 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	089b      	lsrs	r3, r3, #2
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80d6 	beq.w	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	0a5b      	lsrs	r3, r3, #9
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80cf 	beq.w	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005bd8:	7bbb      	ldrb	r3, [r7, #14]
 8005bda:	2b21      	cmp	r3, #33	; 0x21
 8005bdc:	d103      	bne.n	8005be6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa7d 	bl	80060de <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005be4:	e0c7      	b.n	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b40      	cmp	r3, #64	; 0x40
 8005bea:	f040 80c4 	bne.w	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 faee 	bl	80061d0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bf4:	e0bf      	b.n	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c04:	f000 80b7 	beq.w	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	099b      	lsrs	r3, r3, #6
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00f      	beq.n	8005c34 <HAL_I2C_EV_IRQHandler+0x194>
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	0a9b      	lsrs	r3, r3, #10
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <HAL_I2C_EV_IRQHandler+0x194>
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	089b      	lsrs	r3, r3, #2
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fb64 	bl	80062fa <I2C_MasterReceive_RXNE>
 8005c32:	e011      	b.n	8005c58 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	089b      	lsrs	r3, r3, #2
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 809a 	beq.w	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	0a5b      	lsrs	r3, r3, #9
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8093 	beq.w	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fc10 	bl	8006476 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c56:	e08e      	b.n	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c58:	e08d      	b.n	8005d76 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	e007      	b.n	8005c7c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d012      	beq.n	8005cae <HAL_I2C_EV_IRQHandler+0x20e>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	0a5b      	lsrs	r3, r3, #9
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00c      	beq.n	8005cae <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005ca4:	69b9      	ldr	r1, [r7, #24]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 ffd2 	bl	8006c50 <I2C_Slave_ADDR>
 8005cac:	e066      	b.n	8005d7c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <HAL_I2C_EV_IRQHandler+0x22e>
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	0a5b      	lsrs	r3, r3, #9
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f001 f80c 	bl	8006ce4 <I2C_Slave_STOPF>
 8005ccc:	e056      	b.n	8005d7c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cce:	7bbb      	ldrb	r3, [r7, #14]
 8005cd0:	2b21      	cmp	r3, #33	; 0x21
 8005cd2:	d002      	beq.n	8005cda <HAL_I2C_EV_IRQHandler+0x23a>
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	2b29      	cmp	r3, #41	; 0x29
 8005cd8:	d125      	bne.n	8005d26 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	09db      	lsrs	r3, r3, #7
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00f      	beq.n	8005d06 <HAL_I2C_EV_IRQHandler+0x266>
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	0a9b      	lsrs	r3, r3, #10
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <HAL_I2C_EV_IRQHandler+0x266>
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	089b      	lsrs	r3, r3, #2
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fee6 	bl	8006ad0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d04:	e039      	b.n	8005d7a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	089b      	lsrs	r3, r3, #2
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d033      	beq.n	8005d7a <HAL_I2C_EV_IRQHandler+0x2da>
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	0a5b      	lsrs	r3, r3, #9
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02d      	beq.n	8005d7a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 ff14 	bl	8006b4c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d24:	e029      	b.n	8005d7a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	099b      	lsrs	r3, r3, #6
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00f      	beq.n	8005d52 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	0a9b      	lsrs	r3, r3, #10
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	089b      	lsrs	r3, r3, #2
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 ff1f 	bl	8006b8e <I2C_SlaveReceive_RXNE>
 8005d50:	e014      	b.n	8005d7c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	089b      	lsrs	r3, r3, #2
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00e      	beq.n	8005d7c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	0a5b      	lsrs	r3, r3, #9
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 ff4e 	bl	8006c0c <I2C_SlaveReceive_BTF>
 8005d70:	e004      	b.n	8005d7c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d7a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b08a      	sub	sp, #40	; 0x28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	0a1b      	lsrs	r3, r3, #8
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00e      	beq.n	8005dd0 <HAL_I2C_ER_IRQHandler+0x4e>
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	0a1b      	lsrs	r3, r3, #8
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d008      	beq.n	8005dd0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dce:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	0a5b      	lsrs	r3, r3, #9
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00e      	beq.n	8005dfa <HAL_I2C_ER_IRQHandler+0x78>
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d008      	beq.n	8005dfa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	f043 0302 	orr.w	r3, r3, #2
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005df8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	0a9b      	lsrs	r3, r3, #10
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d03f      	beq.n	8005e86 <HAL_I2C_ER_IRQHandler+0x104>
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d039      	beq.n	8005e86 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005e12:	7efb      	ldrb	r3, [r7, #27]
 8005e14:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e24:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005e2c:	7ebb      	ldrb	r3, [r7, #26]
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d112      	bne.n	8005e58 <HAL_I2C_ER_IRQHandler+0xd6>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10f      	bne.n	8005e58 <HAL_I2C_ER_IRQHandler+0xd6>
 8005e38:	7cfb      	ldrb	r3, [r7, #19]
 8005e3a:	2b21      	cmp	r3, #33	; 0x21
 8005e3c:	d008      	beq.n	8005e50 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005e3e:	7cfb      	ldrb	r3, [r7, #19]
 8005e40:	2b29      	cmp	r3, #41	; 0x29
 8005e42:	d005      	beq.n	8005e50 <HAL_I2C_ER_IRQHandler+0xce>
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	2b28      	cmp	r3, #40	; 0x28
 8005e48:	d106      	bne.n	8005e58 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b21      	cmp	r3, #33	; 0x21
 8005e4e:	d103      	bne.n	8005e58 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f001 f87b 	bl	8006f4c <I2C_Slave_AF>
 8005e56:	e016      	b.n	8005e86 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e60:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	f043 0304 	orr.w	r3, r3, #4
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005e6a:	7efb      	ldrb	r3, [r7, #27]
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d002      	beq.n	8005e76 <HAL_I2C_ER_IRQHandler+0xf4>
 8005e70:	7efb      	ldrb	r3, [r7, #27]
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d107      	bne.n	8005e86 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e84:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	0adb      	lsrs	r3, r3, #11
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00e      	beq.n	8005eb0 <HAL_I2C_ER_IRQHandler+0x12e>
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	f043 0308 	orr.w	r3, r3, #8
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005eae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f001 f8b4 	bl	8007030 <I2C_ITError>
  }
}
 8005ec8:	bf00      	nop
 8005eca:	3728      	adds	r7, #40	; 0x28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fb6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d153      	bne.n	800606e <I2C_MasterTransmit_TXE+0xce>
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b21      	cmp	r3, #33	; 0x21
 8005fca:	d150      	bne.n	800606e <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d01e      	beq.n	8006010 <I2C_MasterTransmit_TXE+0x70>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d01b      	beq.n	8006010 <I2C_MasterTransmit_TXE+0x70>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fde:	d017      	beq.n	8006010 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2211      	movs	r2, #17
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800600e:	e062      	b.n	80060d6 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800601e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800602e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d108      	bne.n	800605c <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800605a:	e03c      	b.n	80060d6 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800606c:	e033      	b.n	80060d6 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	2b21      	cmp	r3, #33	; 0x21
 8006072:	d005      	beq.n	8006080 <I2C_MasterTransmit_TXE+0xe0>
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d12d      	bne.n	80060d6 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2b22      	cmp	r3, #34	; 0x22
 800607e:	d12a      	bne.n	80060d6 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d108      	bne.n	800609c <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006098:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800609a:	e01c      	b.n	80060d6 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d103      	bne.n	80060b0 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f891 	bl	80061d0 <I2C_MemoryTransmit_TXE_BTF>
}
 80060ae:	e012      	b.n	80060d6 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	781a      	ldrb	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80060d4:	e7ff      	b.n	80060d6 <I2C_MasterTransmit_TXE+0x136>
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ea:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b21      	cmp	r3, #33	; 0x21
 80060f6:	d167      	bne.n	80061c8 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d012      	beq.n	8006128 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006126:	e04f      	b.n	80061c8 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b08      	cmp	r3, #8
 800612c:	d01e      	beq.n	800616c <I2C_MasterTransmit_BTF+0x8e>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b20      	cmp	r3, #32
 8006132:	d01b      	beq.n	800616c <I2C_MasterTransmit_BTF+0x8e>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800613a:	d017      	beq.n	800616c <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800614a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2211      	movs	r2, #17
 8006150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	4798      	blx	r3
}
 800616a:	e02d      	b.n	80061c8 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800617a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d108      	bne.n	80061b8 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
}
 80061b6:	e007      	b.n	80061c8 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4798      	blx	r3
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11d      	bne.n	8006224 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10b      	bne.n	8006208 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006200:	1c9a      	adds	r2, r3, #2
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006206:	e074      	b.n	80062f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620c:	b29b      	uxth	r3, r3
 800620e:	121b      	asrs	r3, r3, #8
 8006210:	b2da      	uxtb	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006222:	e066      	b.n	80062f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	2b01      	cmp	r3, #1
 800622a:	d10b      	bne.n	8006244 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006230:	b2da      	uxtb	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006242:	e056      	b.n	80062f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006248:	2b02      	cmp	r3, #2
 800624a:	d152      	bne.n	80062f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2b22      	cmp	r3, #34	; 0x22
 8006250:	d10d      	bne.n	800626e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006260:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800626c:	e041      	b.n	80062f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d015      	beq.n	80062a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	2b21      	cmp	r3, #33	; 0x21
 800627c:	d112      	bne.n	80062a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062a2:	e026      	b.n	80062f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d121      	bne.n	80062f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	2b21      	cmp	r3, #33	; 0x21
 80062b2:	d11e      	bne.n	80062f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b22      	cmp	r3, #34	; 0x22
 800630c:	f040 80af 	bne.w	800646e <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b03      	cmp	r3, #3
 800631c:	d921      	bls.n	8006362 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b03      	cmp	r3, #3
 800634c:	f040 808f 	bne.w	800646e <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006360:	e085      	b.n	800646e <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	2b02      	cmp	r3, #2
 8006368:	d078      	beq.n	800645c <I2C_MasterReceive_RXNE+0x162>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d002      	beq.n	8006376 <I2C_MasterReceive_RXNE+0x7c>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d172      	bne.n	800645c <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 f83a 	bl	80073f0 <I2C_WaitOnSTOPRequestThroughIT>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d144      	bne.n	800640c <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006390:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d10b      	bne.n	80063f4 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80063f2:	e03c      	b.n	800646e <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2212      	movs	r2, #18
 8006400:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800640a:	e030      	b.n	800646e <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800641a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800645a:	e008      	b.n	800646e <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800646a:	605a      	str	r2, [r3, #4]
}
 800646c:	e7ff      	b.n	800646e <I2C_MasterReceive_RXNE+0x174>
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006482:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b04      	cmp	r3, #4
 800648c:	d11b      	bne.n	80064c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800649c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80064c4:	e0bf      	b.n	8006646 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d129      	bne.n	8006524 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d00a      	beq.n	80064fc <I2C_MasterReceive_BTF+0x86>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d007      	beq.n	80064fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006522:	e090      	b.n	8006646 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d178      	bne.n	8006620 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d002      	beq.n	800653a <I2C_MasterReceive_BTF+0xc4>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b10      	cmp	r3, #16
 8006538:	d108      	bne.n	800654c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e019      	b.n	8006580 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b04      	cmp	r3, #4
 8006550:	d002      	beq.n	8006558 <I2C_MasterReceive_BTF+0xe2>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d108      	bne.n	800656a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	e00a      	b.n	8006580 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b10      	cmp	r3, #16
 800656e:	d007      	beq.n	8006580 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800657e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80065da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	d10b      	bne.n	8006608 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
}
 8006606:	e01e      	b.n	8006646 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2212      	movs	r2, #18
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
}
 800661e:	e012      	b.n	8006646 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d117      	bne.n	8006692 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	b2db      	uxtb	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800667a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800667c:	e067      	b.n	800674e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	b2da      	uxtb	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	611a      	str	r2, [r3, #16]
}
 8006690:	e05d      	b.n	800674e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800669a:	d133      	bne.n	8006704 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b21      	cmp	r3, #33	; 0x21
 80066a6:	d109      	bne.n	80066bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066b8:	611a      	str	r2, [r3, #16]
 80066ba:	e008      	b.n	80066ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <I2C_Master_SB+0x92>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d108      	bne.n	80066f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d032      	beq.n	800674e <I2C_Master_SB+0x100>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02d      	beq.n	800674e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006700:	605a      	str	r2, [r3, #4]
}
 8006702:	e024      	b.n	800674e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10e      	bne.n	800672a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006710:	b29b      	uxth	r3, r3
 8006712:	11db      	asrs	r3, r3, #7
 8006714:	b2db      	uxtb	r3, r3
 8006716:	f003 0306 	and.w	r3, r3, #6
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f063 030f 	orn	r3, r3, #15
 8006720:	b2da      	uxtb	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	611a      	str	r2, [r3, #16]
}
 8006728:	e011      	b.n	800674e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672e:	2b01      	cmp	r3, #1
 8006730:	d10d      	bne.n	800674e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	b29b      	uxth	r3, r3
 8006738:	11db      	asrs	r3, r3, #7
 800673a:	b2db      	uxtb	r3, r3
 800673c:	f003 0306 	and.w	r3, r3, #6
 8006740:	b2db      	uxtb	r3, r3
 8006742:	f063 030e 	orn	r3, r3, #14
 8006746:	b2da      	uxtb	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	611a      	str	r2, [r3, #16]
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	b2da      	uxtb	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <I2C_Master_ADD10+0x26>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d108      	bne.n	8006792 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00c      	beq.n	80067a2 <I2C_Master_ADD10+0x48>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a0:	605a      	str	r2, [r3, #4]
  }
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b091      	sub	sp, #68	; 0x44
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b22      	cmp	r3, #34	; 0x22
 80067d6:	f040 8169 	bne.w	8006aac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10f      	bne.n	8006802 <I2C_Master_ADDR+0x54>
 80067e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d10b      	bne.n	8006802 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ea:	2300      	movs	r3, #0
 80067ec:	633b      	str	r3, [r7, #48]	; 0x30
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	633b      	str	r3, [r7, #48]	; 0x30
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	633b      	str	r3, [r7, #48]	; 0x30
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	e160      	b.n	8006ac4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006806:	2b00      	cmp	r3, #0
 8006808:	d11d      	bne.n	8006846 <I2C_Master_ADDR+0x98>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006812:	d118      	bne.n	8006846 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006814:	2300      	movs	r3, #0
 8006816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006838:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	651a      	str	r2, [r3, #80]	; 0x50
 8006844:	e13e      	b.n	8006ac4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d113      	bne.n	8006878 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006850:	2300      	movs	r3, #0
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e115      	b.n	8006aa4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b01      	cmp	r3, #1
 8006880:	f040 808a 	bne.w	8006998 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800688a:	d137      	bne.n	80068fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068aa:	d113      	bne.n	80068d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068bc:	2300      	movs	r3, #0
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	e0e7      	b.n	8006aa4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d4:	2300      	movs	r3, #0
 80068d6:	623b      	str	r3, [r7, #32]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	623b      	str	r3, [r7, #32]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	623b      	str	r3, [r7, #32]
 80068e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	e0d3      	b.n	8006aa4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d02e      	beq.n	8006960 <I2C_Master_ADDR+0x1b2>
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	2b20      	cmp	r3, #32
 8006906:	d02b      	beq.n	8006960 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	2b12      	cmp	r3, #18
 800690c:	d102      	bne.n	8006914 <I2C_Master_ADDR+0x166>
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	2b01      	cmp	r3, #1
 8006912:	d125      	bne.n	8006960 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	2b04      	cmp	r3, #4
 8006918:	d00e      	beq.n	8006938 <I2C_Master_ADDR+0x18a>
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	2b02      	cmp	r3, #2
 800691e:	d00b      	beq.n	8006938 <I2C_Master_ADDR+0x18a>
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	2b10      	cmp	r3, #16
 8006924:	d008      	beq.n	8006938 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	e007      	b.n	8006948 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006946:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006948:	2300      	movs	r3, #0
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	e0a1      	b.n	8006aa4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800696e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006970:	2300      	movs	r3, #0
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	e085      	b.n	8006aa4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d14d      	bne.n	8006a3e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d016      	beq.n	80069d6 <I2C_Master_ADDR+0x228>
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d013      	beq.n	80069d6 <I2C_Master_ADDR+0x228>
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	2b10      	cmp	r3, #16
 80069b2:	d010      	beq.n	80069d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e007      	b.n	80069e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f4:	d117      	bne.n	8006a26 <I2C_Master_ADDR+0x278>
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069fc:	d00b      	beq.n	8006a16 <I2C_Master_ADDR+0x268>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d008      	beq.n	8006a16 <I2C_Master_ADDR+0x268>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d005      	beq.n	8006a16 <I2C_Master_ADDR+0x268>
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d002      	beq.n	8006a16 <I2C_Master_ADDR+0x268>
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d107      	bne.n	8006a26 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a24:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	e032      	b.n	8006aa4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a4c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5c:	d117      	bne.n	8006a8e <I2C_Master_ADDR+0x2e0>
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a64:	d00b      	beq.n	8006a7e <I2C_Master_ADDR+0x2d0>
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d008      	beq.n	8006a7e <I2C_Master_ADDR+0x2d0>
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d005      	beq.n	8006a7e <I2C_Master_ADDR+0x2d0>
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	2b10      	cmp	r3, #16
 8006a76:	d002      	beq.n	8006a7e <I2C_Master_ADDR+0x2d0>
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d107      	bne.n	8006a8e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006aaa:	e00b      	b.n	8006ac4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
}
 8006ac2:	e7ff      	b.n	8006ac4 <I2C_Master_ADDR+0x316>
 8006ac4:	bf00      	nop
 8006ac6:	3744      	adds	r7, #68	; 0x44
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ade:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d02c      	beq.n	8006b44 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	781a      	ldrb	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d115      	bne.n	8006b44 <I2C_SlaveTransmit_TXE+0x74>
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b29      	cmp	r3, #41	; 0x29
 8006b1c:	d112      	bne.n	8006b44 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2221      	movs	r2, #33	; 0x21
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2228      	movs	r2, #40	; 0x28
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b44:	bf00      	nop
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d011      	beq.n	8006b82 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d02d      	beq.n	8006c04 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d115      	bne.n	8006c04 <I2C_SlaveReceive_RXNE+0x76>
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	2b2a      	cmp	r3, #42	; 0x2a
 8006bdc:	d112      	bne.n	8006c04 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2222      	movs	r2, #34	; 0x22
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2228      	movs	r2, #40	; 0x28
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d012      	beq.n	8006c44 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c6a:	2b28      	cmp	r3, #40	; 0x28
 8006c6c:	d127      	bne.n	8006cbe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	089b      	lsrs	r3, r3, #2
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	09db      	lsrs	r3, r3, #7
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	81bb      	strh	r3, [r7, #12]
 8006ca0:	e002      	b.n	8006ca8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cb4:	89ba      	ldrh	r2, [r7, #12]
 8006cb6:	7bf9      	ldrb	r1, [r7, #15]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006cbc:	e00e      	b.n	8006cdc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60bb      	str	r3, [r7, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	60bb      	str	r3, [r7, #8]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d02:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006d04:	2300      	movs	r3, #0
 8006d06:	60bb      	str	r3, [r7, #8]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	60bb      	str	r3, [r7, #8]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d30:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d40:	d172      	bne.n	8006e28 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b22      	cmp	r3, #34	; 0x22
 8006d46:	d002      	beq.n	8006d4e <I2C_Slave_STOPF+0x6a>
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4c:	d135      	bne.n	8006dba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d005      	beq.n	8006d72 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	f043 0204 	orr.w	r2, r3, #4
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fd fef0 	bl	8004b6c <HAL_DMA_GetState>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d049      	beq.n	8006e26 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	4a6b      	ldr	r2, [pc, #428]	; (8006f44 <I2C_Slave_STOPF+0x260>)
 8006d98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fd fd38 	bl	8004814 <HAL_DMA_Abort_IT>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d03d      	beq.n	8006e26 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006db8:	e035      	b.n	8006e26 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	f043 0204 	orr.w	r2, r3, #4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fd feba 	bl	8004b6c <HAL_DMA_GetState>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d014      	beq.n	8006e28 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e02:	4a50      	ldr	r2, [pc, #320]	; (8006f44 <I2C_Slave_STOPF+0x260>)
 8006e04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fd fd02 	bl	8004814 <HAL_DMA_Abort_IT>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e20:	4610      	mov	r0, r2
 8006e22:	4798      	blx	r3
 8006e24:	e000      	b.n	8006e28 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e26:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d03e      	beq.n	8006eb0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d112      	bne.n	8006e66 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b40      	cmp	r3, #64	; 0x40
 8006e72:	d112      	bne.n	8006e9a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	f043 0204 	orr.w	r2, r3, #4
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f8b9 	bl	8007030 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006ebe:	e03c      	b.n	8006f3a <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec4:	d10a      	bne.n	8006edc <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2228      	movs	r2, #40	; 0x28
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b28      	cmp	r3, #40	; 0x28
 8006ee6:	d112      	bne.n	8006f0e <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <I2C_Slave_STOPF+0x264>)
 8006eec:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3
}
 8006f0c:	e015      	b.n	8006f3a <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	2b22      	cmp	r3, #34	; 0x22
 8006f14:	d002      	beq.n	8006f1c <I2C_Slave_STOPF+0x238>
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	2b22      	cmp	r3, #34	; 0x22
 8006f1a:	d10e      	bne.n	8006f3a <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	0800729d 	.word	0x0800729d
 8006f48:	ffff0000 	.word	0xffff0000

08006f4c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d002      	beq.n	8006f6e <I2C_Slave_AF+0x22>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	d12a      	bne.n	8006fc4 <I2C_Slave_AF+0x78>
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	2b28      	cmp	r3, #40	; 0x28
 8006f72:	d127      	bne.n	8006fc4 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a2d      	ldr	r2, [pc, #180]	; (800702c <I2C_Slave_AF+0xe0>)
 8006f78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f88:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f92:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006fc2:	e02f      	b.n	8007024 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	2b21      	cmp	r3, #33	; 0x21
 8006fc8:	d127      	bne.n	800701a <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a17      	ldr	r2, [pc, #92]	; (800702c <I2C_Slave_AF+0xe0>)
 8006fce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2221      	movs	r2, #33	; 0x21
 8006fd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ff4:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ffe:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700e:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
}
 8007018:	e004      	b.n	8007024 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007022:	615a      	str	r2, [r3, #20]
}
 8007024:	bf00      	nop
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	ffff0000 	.word	0xffff0000

08007030 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800703e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007046:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b10      	cmp	r3, #16
 800704c:	d002      	beq.n	8007054 <I2C_ITError+0x24>
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	2b40      	cmp	r3, #64	; 0x40
 8007052:	d10a      	bne.n	800706a <I2C_ITError+0x3a>
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	2b22      	cmp	r3, #34	; 0x22
 8007058:	d107      	bne.n	800706a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007068:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007070:	2b28      	cmp	r3, #40	; 0x28
 8007072:	d107      	bne.n	8007084 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2228      	movs	r2, #40	; 0x28
 800707e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007082:	e015      	b.n	80070b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800708e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007092:	d00a      	beq.n	80070aa <I2C_ITError+0x7a>
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	2b60      	cmp	r3, #96	; 0x60
 8007098:	d007      	beq.n	80070aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070be:	d162      	bne.n	8007186 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d020      	beq.n	8007120 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	4a6c      	ldr	r2, [pc, #432]	; (8007294 <I2C_ITError+0x264>)
 80070e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fd fb92 	bl	8004814 <HAL_DMA_Abort_IT>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 808b 	beq.w	800720e <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0201 	bic.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800711a:	4610      	mov	r0, r2
 800711c:	4798      	blx	r3
 800711e:	e076      	b.n	800720e <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	4a5b      	ldr	r2, [pc, #364]	; (8007294 <I2C_ITError+0x264>)
 8007126:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	4618      	mov	r0, r3
 800712e:	f7fd fb71 	bl	8004814 <HAL_DMA_Abort_IT>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d06a      	beq.n	800720e <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b40      	cmp	r3, #64	; 0x40
 8007144:	d10b      	bne.n	800715e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691a      	ldr	r2, [r3, #16]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0201 	bic.w	r2, r2, #1
 800716c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007180:	4610      	mov	r0, r2
 8007182:	4798      	blx	r3
 8007184:	e043      	b.n	800720e <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b60      	cmp	r3, #96	; 0x60
 8007190:	d126      	bne.n	80071e0 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2220      	movs	r2, #32
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b40      	cmp	r3, #64	; 0x40
 80071ac:	d10b      	bne.n	80071c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
 80071de:	e016      	b.n	800720e <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ea:	2b40      	cmp	r3, #64	; 0x40
 80071ec:	d10b      	bne.n	8007206 <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10e      	bne.n	800723c <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007224:	2b00      	cmp	r3, #0
 8007226:	d109      	bne.n	800723c <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800724a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007252:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b04      	cmp	r3, #4
 800725e:	d114      	bne.n	800728a <I2C_ITError+0x25a>
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	2b28      	cmp	r3, #40	; 0x28
 8007264:	d111      	bne.n	800728a <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a0b      	ldr	r2, [pc, #44]	; (8007298 <I2C_ITError+0x268>)
 800726a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	0800729d 	.word	0x0800729d
 8007298:	ffff0000 	.word	0xffff0000

0800729c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80072b6:	4b4c      	ldr	r3, [pc, #304]	; (80073e8 <I2C_DMAAbort+0x14c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	08db      	lsrs	r3, r3, #3
 80072bc:	4a4b      	ldr	r2, [pc, #300]	; (80073ec <I2C_DMAAbort+0x150>)
 80072be:	fba2 2303 	umull	r2, r3, r2, r3
 80072c2:	0a1a      	lsrs	r2, r3, #8
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	00da      	lsls	r2, r3, #3
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f043 0220 	orr.w	r2, r3, #32
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80072e2:	e00a      	b.n	80072fa <I2C_DMAAbort+0x5e>
    }
    count--;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f8:	d0ea      	beq.n	80072d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	2200      	movs	r2, #0
 8007308:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	2200      	movs	r2, #0
 8007318:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007328:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2200      	movs	r2, #0
 800732e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733c:	2200      	movs	r2, #0
 800733e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	2200      	movs	r2, #0
 800734e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0201 	bic.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b60      	cmp	r3, #96	; 0x60
 800736a:	d10f      	bne.n	800738c <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2220      	movs	r2, #32
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2200      	movs	r2, #0
 8007380:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007386:	6978      	ldr	r0, [r7, #20]
 8007388:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800738a:	e028      	b.n	80073de <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800738c:	7cfb      	ldrb	r3, [r7, #19]
 800738e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007392:	2b28      	cmp	r3, #40	; 0x28
 8007394:	d117      	bne.n	80073c6 <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f042 0201 	orr.w	r2, r2, #1
 80073a4:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073b4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2200      	movs	r2, #0
 80073ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2228      	movs	r2, #40	; 0x28
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073c4:	e007      	b.n	80073d6 <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073da:	6978      	ldr	r0, [r7, #20]
 80073dc:	4798      	blx	r3
}
 80073de:	bf00      	nop
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000000 	.word	0x20000000
 80073ec:	14f8b589 	.word	0x14f8b589

080073f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80073fc:	4b13      	ldr	r3, [pc, #76]	; (800744c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	4a13      	ldr	r2, [pc, #76]	; (8007450 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007404:	fba2 2303 	umull	r2, r3, r2, r3
 8007408:	0a1a      	lsrs	r2, r3, #8
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3b01      	subs	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d107      	bne.n	800742e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f043 0220 	orr.w	r2, r3, #32
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e008      	b.n	8007440 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800743c:	d0e9      	beq.n	8007412 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20000000 	.word	0x20000000
 8007450:	14f8b589 	.word	0x14f8b589

08007454 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007464:	d103      	bne.n	800746e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800746c:	e007      	b.n	800747e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007476:	d102      	bne.n	800747e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2208      	movs	r2, #8
 800747c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
	...

0800748c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007490:	4b06      	ldr	r3, [pc, #24]	; (80074ac <HAL_PWR_PVD_IRQHandler+0x20>)
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800749c:	f000 f808 	bl	80074b0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80074a0:	4b02      	ldr	r3, [pc, #8]	; (80074ac <HAL_PWR_PVD_IRQHandler+0x20>)
 80074a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80074a6:	615a      	str	r2, [r3, #20]
  }
}
 80074a8:	bf00      	nop
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40013c00 	.word	0x40013c00

080074b0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80074b4:	bf00      	nop
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
	...

080074c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e314      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d903      	bls.n	80074e2 <HAL_RCC_OscConfig+0x22>
 80074da:	21e6      	movs	r1, #230	; 0xe6
 80074dc:	4897      	ldr	r0, [pc, #604]	; (800773c <HAL_RCC_OscConfig+0x27c>)
 80074de:	f7fa ff02 	bl	80022e6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 8088 	beq.w	8007600 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00d      	beq.n	8007514 <HAL_RCC_OscConfig+0x54>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007500:	d008      	beq.n	8007514 <HAL_RCC_OscConfig+0x54>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800750a:	d003      	beq.n	8007514 <HAL_RCC_OscConfig+0x54>
 800750c:	21eb      	movs	r1, #235	; 0xeb
 800750e:	488b      	ldr	r0, [pc, #556]	; (800773c <HAL_RCC_OscConfig+0x27c>)
 8007510:	f7fa fee9 	bl	80022e6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007514:	4b8a      	ldr	r3, [pc, #552]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f003 030c 	and.w	r3, r3, #12
 800751c:	2b04      	cmp	r3, #4
 800751e:	d00c      	beq.n	800753a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007520:	4b87      	ldr	r3, [pc, #540]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007528:	2b08      	cmp	r3, #8
 800752a:	d112      	bne.n	8007552 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800752c:	4b84      	ldr	r3, [pc, #528]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007538:	d10b      	bne.n	8007552 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800753a:	4b81      	ldr	r3, [pc, #516]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d05b      	beq.n	80075fe <HAL_RCC_OscConfig+0x13e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d157      	bne.n	80075fe <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e2d4      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755a:	d106      	bne.n	800756a <HAL_RCC_OscConfig+0xaa>
 800755c:	4b78      	ldr	r3, [pc, #480]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a77      	ldr	r2, [pc, #476]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e01d      	b.n	80075a6 <HAL_RCC_OscConfig+0xe6>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007572:	d10c      	bne.n	800758e <HAL_RCC_OscConfig+0xce>
 8007574:	4b72      	ldr	r3, [pc, #456]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a71      	ldr	r2, [pc, #452]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 800757a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	4b6f      	ldr	r3, [pc, #444]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a6e      	ldr	r2, [pc, #440]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	e00b      	b.n	80075a6 <HAL_RCC_OscConfig+0xe6>
 800758e:	4b6c      	ldr	r3, [pc, #432]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a6b      	ldr	r2, [pc, #428]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	4b69      	ldr	r3, [pc, #420]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a68      	ldr	r2, [pc, #416]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 80075a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d013      	beq.n	80075d6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ae:	f7fb fde5 	bl	800317c <HAL_GetTick>
 80075b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075b6:	f7fb fde1 	bl	800317c <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b64      	cmp	r3, #100	; 0x64
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e299      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075c8:	4b5d      	ldr	r3, [pc, #372]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f0      	beq.n	80075b6 <HAL_RCC_OscConfig+0xf6>
 80075d4:	e014      	b.n	8007600 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d6:	f7fb fdd1 	bl	800317c <HAL_GetTick>
 80075da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075dc:	e008      	b.n	80075f0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075de:	f7fb fdcd 	bl	800317c <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b64      	cmp	r3, #100	; 0x64
 80075ea:	d901      	bls.n	80075f0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e285      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075f0:	4b53      	ldr	r3, [pc, #332]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f0      	bne.n	80075de <HAL_RCC_OscConfig+0x11e>
 80075fc:	e000      	b.n	8007600 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d079      	beq.n	8007700 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <HAL_RCC_OscConfig+0x166>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d004      	beq.n	8007626 <HAL_RCC_OscConfig+0x166>
 800761c:	f240 111d 	movw	r1, #285	; 0x11d
 8007620:	4846      	ldr	r0, [pc, #280]	; (800773c <HAL_RCC_OscConfig+0x27c>)
 8007622:	f7fa fe60 	bl	80022e6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b1f      	cmp	r3, #31
 800762c:	d904      	bls.n	8007638 <HAL_RCC_OscConfig+0x178>
 800762e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8007632:	4842      	ldr	r0, [pc, #264]	; (800773c <HAL_RCC_OscConfig+0x27c>)
 8007634:	f7fa fe57 	bl	80022e6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007638:	4b41      	ldr	r3, [pc, #260]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f003 030c 	and.w	r3, r3, #12
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007644:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800764c:	2b08      	cmp	r3, #8
 800764e:	d11c      	bne.n	800768a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007650:	4b3b      	ldr	r3, [pc, #236]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d116      	bne.n	800768a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800765c:	4b38      	ldr	r3, [pc, #224]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_RCC_OscConfig+0x1b4>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d001      	beq.n	8007674 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e243      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007674:	4b32      	ldr	r3, [pc, #200]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	492f      	ldr	r1, [pc, #188]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 8007684:	4313      	orrs	r3, r2
 8007686:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007688:	e03a      	b.n	8007700 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d020      	beq.n	80076d4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007692:	4b2c      	ldr	r3, [pc, #176]	; (8007744 <HAL_RCC_OscConfig+0x284>)
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007698:	f7fb fd70 	bl	800317c <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076a0:	f7fb fd6c 	bl	800317c <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e224      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076b2:	4b23      	ldr	r3, [pc, #140]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0f0      	beq.n	80076a0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076be:	4b20      	ldr	r3, [pc, #128]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	491c      	ldr	r1, [pc, #112]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	600b      	str	r3, [r1, #0]
 80076d2:	e015      	b.n	8007700 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076d4:	4b1b      	ldr	r3, [pc, #108]	; (8007744 <HAL_RCC_OscConfig+0x284>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076da:	f7fb fd4f 	bl	800317c <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076e2:	f7fb fd4b 	bl	800317c <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e203      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076f4:	4b12      	ldr	r3, [pc, #72]	; (8007740 <HAL_RCC_OscConfig+0x280>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1f0      	bne.n	80076e2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d045      	beq.n	8007798 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_RCC_OscConfig+0x266>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d004      	beq.n	8007726 <HAL_RCC_OscConfig+0x266>
 800771c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007720:	4806      	ldr	r0, [pc, #24]	; (800773c <HAL_RCC_OscConfig+0x27c>)
 8007722:	f7fa fde0 	bl	80022e6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d01e      	beq.n	800776c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800772e:	4b06      	ldr	r3, [pc, #24]	; (8007748 <HAL_RCC_OscConfig+0x288>)
 8007730:	2201      	movs	r2, #1
 8007732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007734:	f7fb fd22 	bl	800317c <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800773a:	e010      	b.n	800775e <HAL_RCC_OscConfig+0x29e>
 800773c:	0800fca4 	.word	0x0800fca4
 8007740:	40023800 	.word	0x40023800
 8007744:	42470000 	.word	0x42470000
 8007748:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800774c:	f7fb fd16 	bl	800317c <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e1ce      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800775e:	4b5e      	ldr	r3, [pc, #376]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 8007760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0f0      	beq.n	800774c <HAL_RCC_OscConfig+0x28c>
 800776a:	e015      	b.n	8007798 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800776c:	4b5b      	ldr	r3, [pc, #364]	; (80078dc <HAL_RCC_OscConfig+0x41c>)
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007772:	f7fb fd03 	bl	800317c <HAL_GetTick>
 8007776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007778:	e008      	b.n	800778c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800777a:	f7fb fcff 	bl	800317c <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e1b7      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800778c:	4b52      	ldr	r3, [pc, #328]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 800778e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f0      	bne.n	800777a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 80b0 	beq.w	8007906 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00c      	beq.n	80077cc <HAL_RCC_OscConfig+0x30c>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d008      	beq.n	80077cc <HAL_RCC_OscConfig+0x30c>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b05      	cmp	r3, #5
 80077c0:	d004      	beq.n	80077cc <HAL_RCC_OscConfig+0x30c>
 80077c2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80077c6:	4846      	ldr	r0, [pc, #280]	; (80078e0 <HAL_RCC_OscConfig+0x420>)
 80077c8:	f7fa fd8d 	bl	80022e6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077cc:	4b42      	ldr	r3, [pc, #264]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10f      	bne.n	80077f8 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077d8:	2300      	movs	r3, #0
 80077da:	60bb      	str	r3, [r7, #8]
 80077dc:	4b3e      	ldr	r3, [pc, #248]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 80077de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e0:	4a3d      	ldr	r2, [pc, #244]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 80077e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e6:	6413      	str	r3, [r2, #64]	; 0x40
 80077e8:	4b3b      	ldr	r3, [pc, #236]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f0:	60bb      	str	r3, [r7, #8]
 80077f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077f4:	2301      	movs	r3, #1
 80077f6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077f8:	4b3a      	ldr	r3, [pc, #232]	; (80078e4 <HAL_RCC_OscConfig+0x424>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d118      	bne.n	8007836 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007804:	4b37      	ldr	r3, [pc, #220]	; (80078e4 <HAL_RCC_OscConfig+0x424>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a36      	ldr	r2, [pc, #216]	; (80078e4 <HAL_RCC_OscConfig+0x424>)
 800780a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800780e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007810:	f7fb fcb4 	bl	800317c <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007818:	f7fb fcb0 	bl	800317c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e168      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800782a:	4b2e      	ldr	r3, [pc, #184]	; (80078e4 <HAL_RCC_OscConfig+0x424>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0f0      	beq.n	8007818 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d106      	bne.n	800784c <HAL_RCC_OscConfig+0x38c>
 800783e:	4b26      	ldr	r3, [pc, #152]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 8007840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007842:	4a25      	ldr	r2, [pc, #148]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 8007844:	f043 0301 	orr.w	r3, r3, #1
 8007848:	6713      	str	r3, [r2, #112]	; 0x70
 800784a:	e01c      	b.n	8007886 <HAL_RCC_OscConfig+0x3c6>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b05      	cmp	r3, #5
 8007852:	d10c      	bne.n	800786e <HAL_RCC_OscConfig+0x3ae>
 8007854:	4b20      	ldr	r3, [pc, #128]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 8007856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007858:	4a1f      	ldr	r2, [pc, #124]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 800785a:	f043 0304 	orr.w	r3, r3, #4
 800785e:	6713      	str	r3, [r2, #112]	; 0x70
 8007860:	4b1d      	ldr	r3, [pc, #116]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 8007862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007864:	4a1c      	ldr	r2, [pc, #112]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 8007866:	f043 0301 	orr.w	r3, r3, #1
 800786a:	6713      	str	r3, [r2, #112]	; 0x70
 800786c:	e00b      	b.n	8007886 <HAL_RCC_OscConfig+0x3c6>
 800786e:	4b1a      	ldr	r3, [pc, #104]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 8007870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007872:	4a19      	ldr	r2, [pc, #100]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 8007874:	f023 0301 	bic.w	r3, r3, #1
 8007878:	6713      	str	r3, [r2, #112]	; 0x70
 800787a:	4b17      	ldr	r3, [pc, #92]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 800787c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787e:	4a16      	ldr	r2, [pc, #88]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 8007880:	f023 0304 	bic.w	r3, r3, #4
 8007884:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d015      	beq.n	80078ba <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788e:	f7fb fc75 	bl	800317c <HAL_GetTick>
 8007892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007894:	e00a      	b.n	80078ac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007896:	f7fb fc71 	bl	800317c <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d901      	bls.n	80078ac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e127      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ac:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <HAL_RCC_OscConfig+0x418>)
 80078ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0ee      	beq.n	8007896 <HAL_RCC_OscConfig+0x3d6>
 80078b8:	e01c      	b.n	80078f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078ba:	f7fb fc5f 	bl	800317c <HAL_GetTick>
 80078be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078c0:	e012      	b.n	80078e8 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078c2:	f7fb fc5b 	bl	800317c <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d909      	bls.n	80078e8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e111      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
 80078d8:	40023800 	.word	0x40023800
 80078dc:	42470e80 	.word	0x42470e80
 80078e0:	0800fca4 	.word	0x0800fca4
 80078e4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e8:	4b86      	ldr	r3, [pc, #536]	; (8007b04 <HAL_RCC_OscConfig+0x644>)
 80078ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e6      	bne.n	80078c2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d105      	bne.n	8007906 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078fa:	4b82      	ldr	r3, [pc, #520]	; (8007b04 <HAL_RCC_OscConfig+0x644>)
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	4a81      	ldr	r2, [pc, #516]	; (8007b04 <HAL_RCC_OscConfig+0x644>)
 8007900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007904:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00c      	beq.n	8007928 <HAL_RCC_OscConfig+0x468>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d008      	beq.n	8007928 <HAL_RCC_OscConfig+0x468>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	2b02      	cmp	r3, #2
 800791c:	d004      	beq.n	8007928 <HAL_RCC_OscConfig+0x468>
 800791e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8007922:	4879      	ldr	r0, [pc, #484]	; (8007b08 <HAL_RCC_OscConfig+0x648>)
 8007924:	f7fa fcdf 	bl	80022e6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 80e4 	beq.w	8007afa <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007932:	4b74      	ldr	r3, [pc, #464]	; (8007b04 <HAL_RCC_OscConfig+0x644>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f003 030c 	and.w	r3, r3, #12
 800793a:	2b08      	cmp	r3, #8
 800793c:	f000 80a5 	beq.w	8007a8a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b02      	cmp	r3, #2
 8007946:	f040 8089 	bne.w	8007a5c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <HAL_RCC_OscConfig+0x4a6>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800795a:	d004      	beq.n	8007966 <HAL_RCC_OscConfig+0x4a6>
 800795c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007960:	4869      	ldr	r0, [pc, #420]	; (8007b08 <HAL_RCC_OscConfig+0x648>)
 8007962:	f7fa fcc0 	bl	80022e6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	2b3f      	cmp	r3, #63	; 0x3f
 800796c:	d904      	bls.n	8007978 <HAL_RCC_OscConfig+0x4b8>
 800796e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8007972:	4865      	ldr	r0, [pc, #404]	; (8007b08 <HAL_RCC_OscConfig+0x648>)
 8007974:	f7fa fcb7 	bl	80022e6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	2b31      	cmp	r3, #49	; 0x31
 800797e:	d904      	bls.n	800798a <HAL_RCC_OscConfig+0x4ca>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007988:	d904      	bls.n	8007994 <HAL_RCC_OscConfig+0x4d4>
 800798a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800798e:	485e      	ldr	r0, [pc, #376]	; (8007b08 <HAL_RCC_OscConfig+0x648>)
 8007990:	f7fa fca9 	bl	80022e6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	2b02      	cmp	r3, #2
 800799a:	d010      	beq.n	80079be <HAL_RCC_OscConfig+0x4fe>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d00c      	beq.n	80079be <HAL_RCC_OscConfig+0x4fe>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	2b06      	cmp	r3, #6
 80079aa:	d008      	beq.n	80079be <HAL_RCC_OscConfig+0x4fe>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d004      	beq.n	80079be <HAL_RCC_OscConfig+0x4fe>
 80079b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079b8:	4853      	ldr	r0, [pc, #332]	; (8007b08 <HAL_RCC_OscConfig+0x648>)
 80079ba:	f7fa fc94 	bl	80022e6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d903      	bls.n	80079ce <HAL_RCC_OscConfig+0x50e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	2b0f      	cmp	r3, #15
 80079cc:	d904      	bls.n	80079d8 <HAL_RCC_OscConfig+0x518>
 80079ce:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80079d2:	484d      	ldr	r0, [pc, #308]	; (8007b08 <HAL_RCC_OscConfig+0x648>)
 80079d4:	f7fa fc87 	bl	80022e6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d8:	4b4c      	ldr	r3, [pc, #304]	; (8007b0c <HAL_RCC_OscConfig+0x64c>)
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079de:	f7fb fbcd 	bl	800317c <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079e4:	e008      	b.n	80079f8 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079e6:	f7fb fbc9 	bl	800317c <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e081      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079f8:	4b42      	ldr	r3, [pc, #264]	; (8007b04 <HAL_RCC_OscConfig+0x644>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1f0      	bne.n	80079e6 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69da      	ldr	r2, [r3, #28]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	019b      	lsls	r3, r3, #6
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	041b      	lsls	r3, r3, #16
 8007a20:	431a      	orrs	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	061b      	lsls	r3, r3, #24
 8007a28:	4936      	ldr	r1, [pc, #216]	; (8007b04 <HAL_RCC_OscConfig+0x644>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a2e:	4b37      	ldr	r3, [pc, #220]	; (8007b0c <HAL_RCC_OscConfig+0x64c>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a34:	f7fb fba2 	bl	800317c <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a3c:	f7fb fb9e 	bl	800317c <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e056      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a4e:	4b2d      	ldr	r3, [pc, #180]	; (8007b04 <HAL_RCC_OscConfig+0x644>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0f0      	beq.n	8007a3c <HAL_RCC_OscConfig+0x57c>
 8007a5a:	e04e      	b.n	8007afa <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a5c:	4b2b      	ldr	r3, [pc, #172]	; (8007b0c <HAL_RCC_OscConfig+0x64c>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a62:	f7fb fb8b 	bl	800317c <HAL_GetTick>
 8007a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a68:	e008      	b.n	8007a7c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a6a:	f7fb fb87 	bl	800317c <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e03f      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a7c:	4b21      	ldr	r3, [pc, #132]	; (8007b04 <HAL_RCC_OscConfig+0x644>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f0      	bne.n	8007a6a <HAL_RCC_OscConfig+0x5aa>
 8007a88:	e037      	b.n	8007afa <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d101      	bne.n	8007a96 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e032      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a96:	4b1b      	ldr	r3, [pc, #108]	; (8007b04 <HAL_RCC_OscConfig+0x644>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d028      	beq.n	8007af6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d121      	bne.n	8007af6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d11a      	bne.n	8007af6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007acc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d111      	bne.n	8007af6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	085b      	lsrs	r3, r3, #1
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d107      	bne.n	8007af6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d001      	beq.n	8007afa <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	40023800 	.word	0x40023800
 8007b08:	0800fca4 	.word	0x0800fca4
 8007b0c:	42470060 	.word	0x42470060

08007b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e174      	b.n	8007e0e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <HAL_RCC_ClockConfig+0x24>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b0f      	cmp	r3, #15
 8007b32:	d904      	bls.n	8007b3e <HAL_RCC_ClockConfig+0x2e>
 8007b34:	f240 215a 	movw	r1, #602	; 0x25a
 8007b38:	487b      	ldr	r0, [pc, #492]	; (8007d28 <HAL_RCC_ClockConfig+0x218>)
 8007b3a:	f7fa fbd4 	bl	80022e6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d019      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x68>
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d016      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x68>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d013      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x68>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d010      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x68>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d00d      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x68>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b05      	cmp	r3, #5
 8007b60:	d00a      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x68>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b06      	cmp	r3, #6
 8007b66:	d007      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x68>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b07      	cmp	r3, #7
 8007b6c:	d004      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x68>
 8007b6e:	f240 215b 	movw	r1, #603	; 0x25b
 8007b72:	486d      	ldr	r0, [pc, #436]	; (8007d28 <HAL_RCC_ClockConfig+0x218>)
 8007b74:	f7fa fbb7 	bl	80022e6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b78:	4b6c      	ldr	r3, [pc, #432]	; (8007d2c <HAL_RCC_ClockConfig+0x21c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0307 	and.w	r3, r3, #7
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d90c      	bls.n	8007ba0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b86:	4b69      	ldr	r3, [pc, #420]	; (8007d2c <HAL_RCC_ClockConfig+0x21c>)
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b8e:	4b67      	ldr	r3, [pc, #412]	; (8007d2c <HAL_RCC_ClockConfig+0x21c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d001      	beq.n	8007ba0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e136      	b.n	8007e0e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d049      	beq.n	8007c40 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d005      	beq.n	8007bc4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bb8:	4b5d      	ldr	r3, [pc, #372]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	4a5c      	ldr	r2, [pc, #368]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bd0:	4b57      	ldr	r3, [pc, #348]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	4a56      	ldr	r2, [pc, #344]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d024      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x11e>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	2b80      	cmp	r3, #128	; 0x80
 8007bea:	d020      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x11e>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b90      	cmp	r3, #144	; 0x90
 8007bf2:	d01c      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x11e>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2ba0      	cmp	r3, #160	; 0xa0
 8007bfa:	d018      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x11e>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2bb0      	cmp	r3, #176	; 0xb0
 8007c02:	d014      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x11e>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	2bc0      	cmp	r3, #192	; 0xc0
 8007c0a:	d010      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x11e>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	2bd0      	cmp	r3, #208	; 0xd0
 8007c12:	d00c      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x11e>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	2be0      	cmp	r3, #224	; 0xe0
 8007c1a:	d008      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x11e>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	2bf0      	cmp	r3, #240	; 0xf0
 8007c22:	d004      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x11e>
 8007c24:	f240 217e 	movw	r1, #638	; 0x27e
 8007c28:	483f      	ldr	r0, [pc, #252]	; (8007d28 <HAL_RCC_ClockConfig+0x218>)
 8007c2a:	f7fa fb5c 	bl	80022e6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c2e:	4b40      	ldr	r3, [pc, #256]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	493d      	ldr	r1, [pc, #244]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d059      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d010      	beq.n	8007c76 <HAL_RCC_ClockConfig+0x166>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d00c      	beq.n	8007c76 <HAL_RCC_ClockConfig+0x166>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d008      	beq.n	8007c76 <HAL_RCC_ClockConfig+0x166>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d004      	beq.n	8007c76 <HAL_RCC_ClockConfig+0x166>
 8007c6c:	f240 2185 	movw	r1, #645	; 0x285
 8007c70:	482d      	ldr	r0, [pc, #180]	; (8007d28 <HAL_RCC_ClockConfig+0x218>)
 8007c72:	f7fa fb38 	bl	80022e6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d107      	bne.n	8007c8e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c7e:	4b2c      	ldr	r3, [pc, #176]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d119      	bne.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e0bf      	b.n	8007e0e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d003      	beq.n	8007c9e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d107      	bne.n	8007cae <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c9e:	4b24      	ldr	r3, [pc, #144]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d109      	bne.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e0af      	b.n	8007e0e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cae:	4b20      	ldr	r3, [pc, #128]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e0a7      	b.n	8007e0e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f023 0203 	bic.w	r2, r3, #3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	4919      	ldr	r1, [pc, #100]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cd0:	f7fb fa54 	bl	800317c <HAL_GetTick>
 8007cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cd6:	e00a      	b.n	8007cee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cd8:	f7fb fa50 	bl	800317c <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e08f      	b.n	8007e0e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cee:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <HAL_RCC_ClockConfig+0x220>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f003 020c 	and.w	r2, r3, #12
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d1eb      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <HAL_RCC_ClockConfig+0x21c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d212      	bcs.n	8007d34 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d0e:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <HAL_RCC_ClockConfig+0x21c>)
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d16:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <HAL_RCC_ClockConfig+0x21c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d007      	beq.n	8007d34 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e072      	b.n	8007e0e <HAL_RCC_ClockConfig+0x2fe>
 8007d28:	0800fca4 	.word	0x0800fca4
 8007d2c:	40023c00 	.word	0x40023c00
 8007d30:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d025      	beq.n	8007d8c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d018      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x26a>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d50:	d013      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x26a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d5a:	d00e      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x26a>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007d64:	d009      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x26a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007d6e:	d004      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x26a>
 8007d70:	f240 21c3 	movw	r1, #707	; 0x2c3
 8007d74:	4828      	ldr	r0, [pc, #160]	; (8007e18 <HAL_RCC_ClockConfig+0x308>)
 8007d76:	f7fa fab6 	bl	80022e6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d7a:	4b28      	ldr	r3, [pc, #160]	; (8007e1c <HAL_RCC_ClockConfig+0x30c>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	4925      	ldr	r1, [pc, #148]	; (8007e1c <HAL_RCC_ClockConfig+0x30c>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d026      	beq.n	8007de6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d018      	beq.n	8007dd2 <HAL_RCC_ClockConfig+0x2c2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da8:	d013      	beq.n	8007dd2 <HAL_RCC_ClockConfig+0x2c2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007db2:	d00e      	beq.n	8007dd2 <HAL_RCC_ClockConfig+0x2c2>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007dbc:	d009      	beq.n	8007dd2 <HAL_RCC_ClockConfig+0x2c2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007dc6:	d004      	beq.n	8007dd2 <HAL_RCC_ClockConfig+0x2c2>
 8007dc8:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007dcc:	4812      	ldr	r0, [pc, #72]	; (8007e18 <HAL_RCC_ClockConfig+0x308>)
 8007dce:	f7fa fa8a 	bl	80022e6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dd2:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <HAL_RCC_ClockConfig+0x30c>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	490e      	ldr	r1, [pc, #56]	; (8007e1c <HAL_RCC_ClockConfig+0x30c>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007de6:	f000 f821 	bl	8007e2c <HAL_RCC_GetSysClockFreq>
 8007dea:	4602      	mov	r2, r0
 8007dec:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <HAL_RCC_ClockConfig+0x30c>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	091b      	lsrs	r3, r3, #4
 8007df2:	f003 030f 	and.w	r3, r3, #15
 8007df6:	490a      	ldr	r1, [pc, #40]	; (8007e20 <HAL_RCC_ClockConfig+0x310>)
 8007df8:	5ccb      	ldrb	r3, [r1, r3]
 8007dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007dfe:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <HAL_RCC_ClockConfig+0x314>)
 8007e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e02:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <HAL_RCC_ClockConfig+0x318>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fa fc6c 	bl	80026e4 <HAL_InitTick>

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	0800fca4 	.word	0x0800fca4
 8007e1c:	40023800 	.word	0x40023800
 8007e20:	080100e0 	.word	0x080100e0
 8007e24:	20000000 	.word	0x20000000
 8007e28:	20000004 	.word	0x20000004

08007e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e30:	b094      	sub	sp, #80	; 0x50
 8007e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	647b      	str	r3, [r7, #68]	; 0x44
 8007e38:	2300      	movs	r3, #0
 8007e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e44:	4b79      	ldr	r3, [pc, #484]	; (800802c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 030c 	and.w	r3, r3, #12
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d00d      	beq.n	8007e6c <HAL_RCC_GetSysClockFreq+0x40>
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	f200 80e1 	bhi.w	8008018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_RCC_GetSysClockFreq+0x34>
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d003      	beq.n	8007e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e5e:	e0db      	b.n	8008018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e60:	4b73      	ldr	r3, [pc, #460]	; (8008030 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007e64:	e0db      	b.n	800801e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e66:	4b73      	ldr	r3, [pc, #460]	; (8008034 <HAL_RCC_GetSysClockFreq+0x208>)
 8007e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e6a:	e0d8      	b.n	800801e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e6c:	4b6f      	ldr	r3, [pc, #444]	; (800802c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e76:	4b6d      	ldr	r3, [pc, #436]	; (800802c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d063      	beq.n	8007f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e82:	4b6a      	ldr	r3, [pc, #424]	; (800802c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	099b      	lsrs	r3, r3, #6
 8007e88:	2200      	movs	r2, #0
 8007e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	633b      	str	r3, [r7, #48]	; 0x30
 8007e96:	2300      	movs	r3, #0
 8007e98:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	f04f 0000 	mov.w	r0, #0
 8007ea6:	f04f 0100 	mov.w	r1, #0
 8007eaa:	0159      	lsls	r1, r3, #5
 8007eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007eb0:	0150      	lsls	r0, r2, #5
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	1a51      	subs	r1, r2, r1
 8007eba:	6139      	str	r1, [r7, #16]
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	f04f 0200 	mov.w	r2, #0
 8007ec8:	f04f 0300 	mov.w	r3, #0
 8007ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ed0:	4659      	mov	r1, fp
 8007ed2:	018b      	lsls	r3, r1, #6
 8007ed4:	4651      	mov	r1, sl
 8007ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007eda:	4651      	mov	r1, sl
 8007edc:	018a      	lsls	r2, r1, #6
 8007ede:	4651      	mov	r1, sl
 8007ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007efe:	4690      	mov	r8, r2
 8007f00:	4699      	mov	r9, r3
 8007f02:	4623      	mov	r3, r4
 8007f04:	eb18 0303 	adds.w	r3, r8, r3
 8007f08:	60bb      	str	r3, [r7, #8]
 8007f0a:	462b      	mov	r3, r5
 8007f0c:	eb49 0303 	adc.w	r3, r9, r3
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	f04f 0200 	mov.w	r2, #0
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f1e:	4629      	mov	r1, r5
 8007f20:	024b      	lsls	r3, r1, #9
 8007f22:	4621      	mov	r1, r4
 8007f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f28:	4621      	mov	r1, r4
 8007f2a:	024a      	lsls	r2, r1, #9
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f32:	2200      	movs	r2, #0
 8007f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f3c:	f7f8 f950 	bl	80001e0 <__aeabi_uldivmod>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4613      	mov	r3, r2
 8007f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f48:	e058      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f4a:	4b38      	ldr	r3, [pc, #224]	; (800802c <HAL_RCC_GetSysClockFreq+0x200>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	099b      	lsrs	r3, r3, #6
 8007f50:	2200      	movs	r2, #0
 8007f52:	4618      	mov	r0, r3
 8007f54:	4611      	mov	r1, r2
 8007f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f5a:	623b      	str	r3, [r7, #32]
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f64:	4642      	mov	r2, r8
 8007f66:	464b      	mov	r3, r9
 8007f68:	f04f 0000 	mov.w	r0, #0
 8007f6c:	f04f 0100 	mov.w	r1, #0
 8007f70:	0159      	lsls	r1, r3, #5
 8007f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f76:	0150      	lsls	r0, r2, #5
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4641      	mov	r1, r8
 8007f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f82:	4649      	mov	r1, r9
 8007f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8007fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	00eb      	lsls	r3, r5, #3
 8007fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fb2:	00e2      	lsls	r2, r4, #3
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	461d      	mov	r5, r3
 8007fb8:	4643      	mov	r3, r8
 8007fba:	18e3      	adds	r3, r4, r3
 8007fbc:	603b      	str	r3, [r7, #0]
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	eb45 0303 	adc.w	r3, r5, r3
 8007fc4:	607b      	str	r3, [r7, #4]
 8007fc6:	f04f 0200 	mov.w	r2, #0
 8007fca:	f04f 0300 	mov.w	r3, #0
 8007fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	028b      	lsls	r3, r1, #10
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fdc:	4621      	mov	r1, r4
 8007fde:	028a      	lsls	r2, r1, #10
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	61fa      	str	r2, [r7, #28]
 8007fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ff0:	f7f8 f8f6 	bl	80001e0 <__aeabi_uldivmod>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	; (800802c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	0c1b      	lsrs	r3, r3, #16
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	3301      	adds	r3, #1
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800800c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800800e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008010:	fbb2 f3f3 	udiv	r3, r2, r3
 8008014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008016:	e002      	b.n	800801e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008018:	4b05      	ldr	r3, [pc, #20]	; (8008030 <HAL_RCC_GetSysClockFreq+0x204>)
 800801a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800801c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800801e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008020:	4618      	mov	r0, r3
 8008022:	3750      	adds	r7, #80	; 0x50
 8008024:	46bd      	mov	sp, r7
 8008026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800802a:	bf00      	nop
 800802c:	40023800 	.word	0x40023800
 8008030:	00f42400 	.word	0x00f42400
 8008034:	007a1200 	.word	0x007a1200

08008038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800803c:	4b03      	ldr	r3, [pc, #12]	; (800804c <HAL_RCC_GetHCLKFreq+0x14>)
 800803e:	681b      	ldr	r3, [r3, #0]
}
 8008040:	4618      	mov	r0, r3
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20000000 	.word	0x20000000

08008050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008054:	f7ff fff0 	bl	8008038 <HAL_RCC_GetHCLKFreq>
 8008058:	4602      	mov	r2, r0
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	0a9b      	lsrs	r3, r3, #10
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	4903      	ldr	r1, [pc, #12]	; (8008074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008066:	5ccb      	ldrb	r3, [r1, r3]
 8008068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800806c:	4618      	mov	r0, r3
 800806e:	bd80      	pop	{r7, pc}
 8008070:	40023800 	.word	0x40023800
 8008074:	080100f0 	.word	0x080100f0

08008078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800807c:	f7ff ffdc 	bl	8008038 <HAL_RCC_GetHCLKFreq>
 8008080:	4602      	mov	r2, r0
 8008082:	4b05      	ldr	r3, [pc, #20]	; (8008098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	0b5b      	lsrs	r3, r3, #13
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	4903      	ldr	r1, [pc, #12]	; (800809c <HAL_RCC_GetPCLK2Freq+0x24>)
 800808e:	5ccb      	ldrb	r3, [r1, r3]
 8008090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008094:	4618      	mov	r0, r3
 8008096:	bd80      	pop	{r7, pc}
 8008098:	40023800 	.word	0x40023800
 800809c:	080100f0 	.word	0x080100f0

080080a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	220f      	movs	r2, #15
 80080ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080b0:	4b12      	ldr	r3, [pc, #72]	; (80080fc <HAL_RCC_GetClockConfig+0x5c>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f003 0203 	and.w	r2, r3, #3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <HAL_RCC_GetClockConfig+0x5c>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80080c8:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <HAL_RCC_GetClockConfig+0x5c>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <HAL_RCC_GetClockConfig+0x5c>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	08db      	lsrs	r3, r3, #3
 80080da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80080e2:	4b07      	ldr	r3, [pc, #28]	; (8008100 <HAL_RCC_GetClockConfig+0x60>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0207 	and.w	r2, r3, #7
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	601a      	str	r2, [r3, #0]
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40023800 	.word	0x40023800
 8008100:	40023c00 	.word	0x40023c00

08008104 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b0f      	cmp	r3, #15
 8008122:	d904      	bls.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8008124:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8008128:	4834      	ldr	r0, [pc, #208]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800812a:	f7fa f8dc 	bl	80022e6 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008142:	2b00      	cmp	r3, #0
 8008144:	d066      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d903      	bls.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	2b07      	cmp	r3, #7
 8008154:	d904      	bls.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008156:	f640 11de 	movw	r1, #2526	; 0x9de
 800815a:	4828      	ldr	r0, [pc, #160]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800815c:	f7fa f8c3 	bl	80022e6 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	2b31      	cmp	r3, #49	; 0x31
 8008166:	d904      	bls.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008170:	d904      	bls.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008172:	f640 11df 	movw	r1, #2527	; 0x9df
 8008176:	4821      	ldr	r0, [pc, #132]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008178:	f7fa f8b5 	bl	80022e6 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d903      	bls.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	2b3f      	cmp	r3, #63	; 0x3f
 800818a:	d904      	bls.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800818c:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8008190:	481a      	ldr	r0, [pc, #104]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008192:	f7fa f8a8 	bl	80022e6 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008196:	4b1a      	ldr	r3, [pc, #104]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800819c:	f7fa ffee 	bl	800317c <HAL_GetTick>
 80081a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081a2:	e008      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081a4:	f7fa ffea 	bl	800317c <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d901      	bls.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e1b3      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081b6:	4b13      	ldr	r3, [pc, #76]	; (8008204 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1f0      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	019b      	lsls	r3, r3, #6
 80081cc:	431a      	orrs	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	071b      	lsls	r3, r3, #28
 80081d4:	490b      	ldr	r1, [pc, #44]	; (8008204 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081dc:	4b08      	ldr	r3, [pc, #32]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80081de:	2201      	movs	r2, #1
 80081e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081e2:	f7fa ffcb 	bl	800317c <HAL_GetTick>
 80081e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081e8:	e00e      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081ea:	f7fa ffc7 	bl	800317c <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d907      	bls.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e190      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80081fc:	0800fd18 	.word	0x0800fd18
 8008200:	42470068 	.word	0x42470068
 8008204:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008208:	4b88      	ldr	r3, [pc, #544]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0ea      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8173 	beq.w	8008508 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822a:	f000 80a6 	beq.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008236:	f000 80a0 	beq.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	4a7c      	ldr	r2, [pc, #496]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	f000 809a 	beq.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	4a7a      	ldr	r2, [pc, #488]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800824c:	4293      	cmp	r3, r2
 800824e:	f000 8094 	beq.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	4a78      	ldr	r2, [pc, #480]	; (8008438 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008258:	4293      	cmp	r3, r2
 800825a:	f000 808e 	beq.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	4a76      	ldr	r2, [pc, #472]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008264:	4293      	cmp	r3, r2
 8008266:	f000 8088 	beq.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	4a74      	ldr	r2, [pc, #464]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	f000 8082 	beq.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	4a72      	ldr	r2, [pc, #456]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d07c      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	4a70      	ldr	r2, [pc, #448]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d077      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	4a6f      	ldr	r2, [pc, #444]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d072      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	4a6d      	ldr	r2, [pc, #436]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d06d      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	4a6c      	ldr	r2, [pc, #432]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d068      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	4a6a      	ldr	r2, [pc, #424]	; (8008458 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d063      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	4a69      	ldr	r2, [pc, #420]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d05e      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	4a67      	ldr	r2, [pc, #412]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d059      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	4a66      	ldr	r2, [pc, #408]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d054      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	4a64      	ldr	r2, [pc, #400]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d04f      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	4a63      	ldr	r2, [pc, #396]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d04a      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	4a61      	ldr	r2, [pc, #388]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d045      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	4a60      	ldr	r2, [pc, #384]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d040      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	4a5e      	ldr	r2, [pc, #376]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d03b      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	4a5d      	ldr	r2, [pc, #372]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d036      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	4a5b      	ldr	r2, [pc, #364]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d031      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	4a5a      	ldr	r2, [pc, #360]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d02c      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	4a58      	ldr	r2, [pc, #352]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d027      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	4a57      	ldr	r2, [pc, #348]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d022      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	4a55      	ldr	r2, [pc, #340]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d01d      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	4a54      	ldr	r2, [pc, #336]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d018      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	4a52      	ldr	r2, [pc, #328]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d013      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	4a51      	ldr	r2, [pc, #324]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00e      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	4a4f      	ldr	r2, [pc, #316]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d009      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	4a4e      	ldr	r2, [pc, #312]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d004      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008370:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8008374:	484c      	ldr	r0, [pc, #304]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8008376:	f7f9 ffb6 	bl	80022e6 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
 800837e:	4b2b      	ldr	r3, [pc, #172]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	4a2a      	ldr	r2, [pc, #168]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008388:	6413      	str	r3, [r2, #64]	; 0x40
 800838a:	4b28      	ldr	r3, [pc, #160]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008396:	4b45      	ldr	r3, [pc, #276]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a44      	ldr	r2, [pc, #272]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800839c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083a2:	f7fa feeb 	bl	800317c <HAL_GetTick>
 80083a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083a8:	e008      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80083aa:	f7fa fee7 	bl	800317c <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d901      	bls.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e0b0      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083bc:	4b3b      	ldr	r3, [pc, #236]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0f0      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083c8:	4b18      	ldr	r3, [pc, #96]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80083ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d073      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d06c      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083e6:	4b11      	ldr	r3, [pc, #68]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80083e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083f0:	4b2f      	ldr	r3, [pc, #188]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80083f2:	2201      	movs	r2, #1
 80083f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083f6:	4b2e      	ldr	r3, [pc, #184]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80083fc:	4a0b      	ldr	r2, [pc, #44]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008402:	4b0a      	ldr	r3, [pc, #40]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b01      	cmp	r3, #1
 800840c:	d158      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800840e:	f7fa feb5 	bl	800317c <HAL_GetTick>
 8008412:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008414:	e04e      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008416:	f7fa feb1 	bl	800317c <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	f241 3288 	movw	r2, #5000	; 0x1388
 8008424:	4293      	cmp	r3, r2
 8008426:	d945      	bls.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e078      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800842c:	40023800 	.word	0x40023800
 8008430:	00020300 	.word	0x00020300
 8008434:	00030300 	.word	0x00030300
 8008438:	00040300 	.word	0x00040300
 800843c:	00050300 	.word	0x00050300
 8008440:	00060300 	.word	0x00060300
 8008444:	00070300 	.word	0x00070300
 8008448:	00080300 	.word	0x00080300
 800844c:	00090300 	.word	0x00090300
 8008450:	000a0300 	.word	0x000a0300
 8008454:	000b0300 	.word	0x000b0300
 8008458:	000c0300 	.word	0x000c0300
 800845c:	000d0300 	.word	0x000d0300
 8008460:	000e0300 	.word	0x000e0300
 8008464:	000f0300 	.word	0x000f0300
 8008468:	00100300 	.word	0x00100300
 800846c:	00110300 	.word	0x00110300
 8008470:	00120300 	.word	0x00120300
 8008474:	00130300 	.word	0x00130300
 8008478:	00140300 	.word	0x00140300
 800847c:	00150300 	.word	0x00150300
 8008480:	00160300 	.word	0x00160300
 8008484:	00170300 	.word	0x00170300
 8008488:	00180300 	.word	0x00180300
 800848c:	00190300 	.word	0x00190300
 8008490:	001a0300 	.word	0x001a0300
 8008494:	001b0300 	.word	0x001b0300
 8008498:	001c0300 	.word	0x001c0300
 800849c:	001d0300 	.word	0x001d0300
 80084a0:	001e0300 	.word	0x001e0300
 80084a4:	001f0300 	.word	0x001f0300
 80084a8:	0800fd18 	.word	0x0800fd18
 80084ac:	40007000 	.word	0x40007000
 80084b0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084b4:	4b1c      	ldr	r3, [pc, #112]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0aa      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084cc:	d10d      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80084ce:	4b16      	ldr	r3, [pc, #88]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80084de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084e2:	4911      	ldr	r1, [pc, #68]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	608b      	str	r3, [r1, #8]
 80084e8:	e005      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80084ea:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	4a0e      	ldr	r2, [pc, #56]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80084f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084f4:	6093      	str	r3, [r2, #8]
 80084f6:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80084f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008502:	4909      	ldr	r1, [pc, #36]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008504:	4313      	orrs	r3, r2
 8008506:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0308 	and.w	r3, r3, #8
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	7d1a      	ldrb	r2, [r3, #20]
 8008518:	4b04      	ldr	r3, [pc, #16]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800851a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	40023800 	.word	0x40023800
 800852c:	424711e0 	.word	0x424711e0

08008530 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e0e2      	b.n	800870c <HAL_RTC_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a72      	ldr	r2, [pc, #456]	; (8008714 <HAL_RTC_Init+0x1e4>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d004      	beq.n	800855a <HAL_RTC_Init+0x2a>
 8008550:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008554:	4870      	ldr	r0, [pc, #448]	; (8008718 <HAL_RTC_Init+0x1e8>)
 8008556:	f7f9 fec6 	bl	80022e6 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	d008      	beq.n	8008574 <HAL_RTC_Init+0x44>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d004      	beq.n	8008574 <HAL_RTC_Init+0x44>
 800856a:	f240 1105 	movw	r1, #261	; 0x105
 800856e:	486a      	ldr	r0, [pc, #424]	; (8008718 <HAL_RTC_Init+0x1e8>)
 8008570:	f7f9 feb9 	bl	80022e6 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	2b7f      	cmp	r3, #127	; 0x7f
 800857a:	d904      	bls.n	8008586 <HAL_RTC_Init+0x56>
 800857c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008580:	4865      	ldr	r0, [pc, #404]	; (8008718 <HAL_RTC_Init+0x1e8>)
 8008582:	f7f9 feb0 	bl	80022e6 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800858e:	d304      	bcc.n	800859a <HAL_RTC_Init+0x6a>
 8008590:	f240 1107 	movw	r1, #263	; 0x107
 8008594:	4860      	ldr	r0, [pc, #384]	; (8008718 <HAL_RTC_Init+0x1e8>)
 8008596:	f7f9 fea6 	bl	80022e6 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d013      	beq.n	80085ca <HAL_RTC_Init+0x9a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085aa:	d00e      	beq.n	80085ca <HAL_RTC_Init+0x9a>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085b4:	d009      	beq.n	80085ca <HAL_RTC_Init+0x9a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085be:	d004      	beq.n	80085ca <HAL_RTC_Init+0x9a>
 80085c0:	f44f 7184 	mov.w	r1, #264	; 0x108
 80085c4:	4854      	ldr	r0, [pc, #336]	; (8008718 <HAL_RTC_Init+0x1e8>)
 80085c6:	f7f9 fe8e 	bl	80022e6 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d009      	beq.n	80085e6 <HAL_RTC_Init+0xb6>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085da:	d004      	beq.n	80085e6 <HAL_RTC_Init+0xb6>
 80085dc:	f240 1109 	movw	r1, #265	; 0x109
 80085e0:	484d      	ldr	r0, [pc, #308]	; (8008718 <HAL_RTC_Init+0x1e8>)
 80085e2:	f7f9 fe80 	bl	80022e6 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d009      	beq.n	8008602 <HAL_RTC_Init+0xd2>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085f6:	d004      	beq.n	8008602 <HAL_RTC_Init+0xd2>
 80085f8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80085fc:	4846      	ldr	r0, [pc, #280]	; (8008718 <HAL_RTC_Init+0x1e8>)
 80085fe:	f7f9 fe72 	bl	80022e6 <assert_failed>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	7f5b      	ldrb	r3, [r3, #29]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d123      	bne.n	8008654 <HAL_RTC_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a41      	ldr	r2, [pc, #260]	; (800871c <HAL_RTC_Init+0x1ec>)
 8008616:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a41      	ldr	r2, [pc, #260]	; (8008720 <HAL_RTC_Init+0x1f0>)
 800861c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a40      	ldr	r2, [pc, #256]	; (8008724 <HAL_RTC_Init+0x1f4>)
 8008622:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a40      	ldr	r2, [pc, #256]	; (8008728 <HAL_RTC_Init+0x1f8>)
 8008628:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a3f      	ldr	r2, [pc, #252]	; (800872c <HAL_RTC_Init+0x1fc>)
 800862e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008634:	2b00      	cmp	r3, #0
 8008636:	d102      	bne.n	800863e <HAL_RTC_Init+0x10e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a3d      	ldr	r2, [pc, #244]	; (8008730 <HAL_RTC_Init+0x200>)
 800863c:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	2b00      	cmp	r3, #0
 800864c:	d102      	bne.n	8008654 <HAL_RTC_Init+0x124>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a38      	ldr	r2, [pc, #224]	; (8008734 <HAL_RTC_Init+0x204>)
 8008652:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	22ca      	movs	r2, #202	; 0xca
 8008660:	625a      	str	r2, [r3, #36]	; 0x24
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2253      	movs	r2, #83	; 0x53
 8008668:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 faea 	bl	8008c44 <RTC_EnterInitMode>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d12c      	bne.n	80086d4 <HAL_RTC_Init+0x1a4>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800868c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6899      	ldr	r1, [r3, #8]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	431a      	orrs	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	431a      	orrs	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	68d2      	ldr	r2, [r2, #12]
 80086b4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6919      	ldr	r1, [r3, #16]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	041a      	lsls	r2, r3, #16
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 faf1 	bl	8008cb2 <RTC_ExitInitMode>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d113      	bne.n	8008702 <HAL_RTC_Init+0x1d2>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086e8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	699a      	ldr	r2, [r3, #24]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	22ff      	movs	r2, #255	; 0xff
 8008708:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40002800 	.word	0x40002800
 8008718:	0800fd90 	.word	0x0800fd90
 800871c:	08008be1 	.word	0x08008be1
 8008720:	08008dab 	.word	0x08008dab
 8008724:	08008d6f 	.word	0x08008d6f
 8008728:	08008d97 	.word	0x08008d97
 800872c:	08008d83 	.word	0x08008d83
 8008730:	080023b1 	.word	0x080023b1
 8008734:	08002409 	.word	0x08002409

08008738 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008738:	b590      	push	{r4, r7, lr}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <HAL_RTC_SetTime+0x26>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d004      	beq.n	800875e <HAL_RTC_SetTime+0x26>
 8008754:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8008758:	489a      	ldr	r0, [pc, #616]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 800875a:	f7f9 fdc4 	bl	80022e6 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008766:	d00d      	beq.n	8008784 <HAL_RTC_SetTime+0x4c>
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008770:	d008      	beq.n	8008784 <HAL_RTC_SetTime+0x4c>
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <HAL_RTC_SetTime+0x4c>
 800877a:	f240 21b5 	movw	r1, #693	; 0x2b5
 800877e:	4891      	ldr	r0, [pc, #580]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 8008780:	f7f9 fdb1 	bl	80022e6 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <HAL_RTC_SetTime+0x68>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008794:	d004      	beq.n	80087a0 <HAL_RTC_SetTime+0x68>
 8008796:	f240 21b6 	movw	r1, #694	; 0x2b6
 800879a:	488a      	ldr	r0, [pc, #552]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 800879c:	f7f9 fda3 	bl	80022e6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	7f1b      	ldrb	r3, [r3, #28]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d101      	bne.n	80087ac <HAL_RTC_SetTime+0x74>
 80087a8:	2302      	movs	r3, #2
 80087aa:	e107      	b.n	80089bc <HAL_RTC_SetTime+0x284>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2202      	movs	r2, #2
 80087b6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d15c      	bne.n	8008878 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01a      	beq.n	8008802 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <HAL_RTC_SetTime+0xa4>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2b0c      	cmp	r3, #12
 80087da:	d904      	bls.n	80087e6 <HAL_RTC_SetTime+0xae>
 80087dc:	f240 21c1 	movw	r1, #705	; 0x2c1
 80087e0:	4878      	ldr	r0, [pc, #480]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 80087e2:	f7f9 fd80 	bl	80022e6 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	78db      	ldrb	r3, [r3, #3]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d015      	beq.n	800881a <HAL_RTC_SetTime+0xe2>
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	78db      	ldrb	r3, [r3, #3]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d011      	beq.n	800881a <HAL_RTC_SetTime+0xe2>
 80087f6:	f240 21c2 	movw	r1, #706	; 0x2c2
 80087fa:	4872      	ldr	r0, [pc, #456]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 80087fc:	f7f9 fd73 	bl	80022e6 <assert_failed>
 8008800:	e00b      	b.n	800881a <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2200      	movs	r2, #0
 8008806:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b17      	cmp	r3, #23
 800880e:	d904      	bls.n	800881a <HAL_RTC_SetTime+0xe2>
 8008810:	f240 21c7 	movw	r1, #711	; 0x2c7
 8008814:	486b      	ldr	r0, [pc, #428]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 8008816:	f7f9 fd66 	bl	80022e6 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	2b3b      	cmp	r3, #59	; 0x3b
 8008820:	d904      	bls.n	800882c <HAL_RTC_SetTime+0xf4>
 8008822:	f240 21c9 	movw	r1, #713	; 0x2c9
 8008826:	4867      	ldr	r0, [pc, #412]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 8008828:	f7f9 fd5d 	bl	80022e6 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	789b      	ldrb	r3, [r3, #2]
 8008830:	2b3b      	cmp	r3, #59	; 0x3b
 8008832:	d904      	bls.n	800883e <HAL_RTC_SetTime+0x106>
 8008834:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008838:	4862      	ldr	r0, [pc, #392]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 800883a:	f7f9 fd54 	bl	80022e6 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fa5a 	bl	8008cfc <RTC_ByteToBcd2>
 8008848:	4603      	mov	r3, r0
 800884a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	785b      	ldrb	r3, [r3, #1]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fa53 	bl	8008cfc <RTC_ByteToBcd2>
 8008856:	4603      	mov	r3, r0
 8008858:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800885a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	789b      	ldrb	r3, [r3, #2]
 8008860:	4618      	mov	r0, r3
 8008862:	f000 fa4b 	bl	8008cfc <RTC_ByteToBcd2>
 8008866:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008868:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	78db      	ldrb	r3, [r3, #3]
 8008870:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]
 8008876:	e062      	b.n	800893e <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d022      	beq.n	80088cc <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fa53 	bl	8008d36 <RTC_Bcd2ToByte>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d007      	beq.n	80088a6 <HAL_RTC_SetTime+0x16e>
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fa4b 	bl	8008d36 <RTC_Bcd2ToByte>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b0c      	cmp	r3, #12
 80088a4:	d904      	bls.n	80088b0 <HAL_RTC_SetTime+0x178>
 80088a6:	f240 21d5 	movw	r1, #725	; 0x2d5
 80088aa:	4846      	ldr	r0, [pc, #280]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 80088ac:	f7f9 fd1b 	bl	80022e6 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	78db      	ldrb	r3, [r3, #3]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d019      	beq.n	80088ec <HAL_RTC_SetTime+0x1b4>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	78db      	ldrb	r3, [r3, #3]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d015      	beq.n	80088ec <HAL_RTC_SetTime+0x1b4>
 80088c0:	f240 21d6 	movw	r1, #726	; 0x2d6
 80088c4:	483f      	ldr	r0, [pc, #252]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 80088c6:	f7f9 fd0e 	bl	80022e6 <assert_failed>
 80088ca:	e00f      	b.n	80088ec <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2200      	movs	r2, #0
 80088d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fa2d 	bl	8008d36 <RTC_Bcd2ToByte>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b17      	cmp	r3, #23
 80088e0:	d904      	bls.n	80088ec <HAL_RTC_SetTime+0x1b4>
 80088e2:	f240 21db 	movw	r1, #731	; 0x2db
 80088e6:	4837      	ldr	r0, [pc, #220]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 80088e8:	f7f9 fcfd 	bl	80022e6 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fa20 	bl	8008d36 <RTC_Bcd2ToByte>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b3b      	cmp	r3, #59	; 0x3b
 80088fa:	d904      	bls.n	8008906 <HAL_RTC_SetTime+0x1ce>
 80088fc:	f240 21dd 	movw	r1, #733	; 0x2dd
 8008900:	4830      	ldr	r0, [pc, #192]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 8008902:	f7f9 fcf0 	bl	80022e6 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	789b      	ldrb	r3, [r3, #2]
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fa13 	bl	8008d36 <RTC_Bcd2ToByte>
 8008910:	4603      	mov	r3, r0
 8008912:	2b3b      	cmp	r3, #59	; 0x3b
 8008914:	d904      	bls.n	8008920 <HAL_RTC_SetTime+0x1e8>
 8008916:	f240 21de 	movw	r1, #734	; 0x2de
 800891a:	482a      	ldr	r0, [pc, #168]	; (80089c4 <HAL_RTC_SetTime+0x28c>)
 800891c:	f7f9 fce3 	bl	80022e6 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800892c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008932:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	78db      	ldrb	r3, [r3, #3]
 8008938:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800893a:	4313      	orrs	r3, r2
 800893c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	22ca      	movs	r2, #202	; 0xca
 8008944:	625a      	str	r2, [r3, #36]	; 0x24
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2253      	movs	r2, #83	; 0x53
 800894c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 f978 	bl	8008c44 <RTC_EnterInitMode>
 8008954:	4603      	mov	r3, r0
 8008956:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008958:	7cfb      	ldrb	r3, [r7, #19]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d120      	bne.n	80089a0 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008968:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800896c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800897c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6899      	ldr	r1, [r3, #8]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	68da      	ldr	r2, [r3, #12]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	431a      	orrs	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f98b 	bl	8008cb2 <RTC_ExitInitMode>
 800899c:	4603      	mov	r3, r0
 800899e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80089a0:	7cfb      	ldrb	r3, [r7, #19]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d102      	bne.n	80089ac <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	22ff      	movs	r2, #255	; 0xff
 80089b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	771a      	strb	r2, [r3, #28]

  return status;
 80089ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	371c      	adds	r7, #28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd90      	pop	{r4, r7, pc}
 80089c4:	0800fd90 	.word	0x0800fd90

080089c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d007      	beq.n	80089ee <HAL_RTC_SetDate+0x26>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d004      	beq.n	80089ee <HAL_RTC_SetDate+0x26>
 80089e4:	f240 3153 	movw	r1, #851	; 0x353
 80089e8:	487c      	ldr	r0, [pc, #496]	; (8008bdc <HAL_RTC_SetDate+0x214>)
 80089ea:	f7f9 fc7c 	bl	80022e6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	7f1b      	ldrb	r3, [r3, #28]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_RTC_SetDate+0x32>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e0ec      	b.n	8008bd4 <HAL_RTC_SetDate+0x20c>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2201      	movs	r2, #1
 80089fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2202      	movs	r2, #2
 8008a04:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10e      	bne.n	8008a2a <HAL_RTC_SetDate+0x62>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	785b      	ldrb	r3, [r3, #1]
 8008a10:	f003 0310 	and.w	r3, r3, #16
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d008      	beq.n	8008a2a <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	785b      	ldrb	r3, [r3, #1]
 8008a1c:	f023 0310 	bic.w	r3, r3, #16
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	330a      	adds	r3, #10
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d01c      	beq.n	8008a6c <HAL_RTC_SetDate+0xa4>
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d018      	beq.n	8008a6c <HAL_RTC_SetDate+0xa4>
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d014      	beq.n	8008a6c <HAL_RTC_SetDate+0xa4>
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d010      	beq.n	8008a6c <HAL_RTC_SetDate+0xa4>
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	d00c      	beq.n	8008a6c <HAL_RTC_SetDate+0xa4>
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b06      	cmp	r3, #6
 8008a58:	d008      	beq.n	8008a6c <HAL_RTC_SetDate+0xa4>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b07      	cmp	r3, #7
 8008a60:	d004      	beq.n	8008a6c <HAL_RTC_SetDate+0xa4>
 8008a62:	f240 315f 	movw	r1, #863	; 0x35f
 8008a66:	485d      	ldr	r0, [pc, #372]	; (8008bdc <HAL_RTC_SetDate+0x214>)
 8008a68:	f7f9 fc3d 	bl	80022e6 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d13f      	bne.n	8008af2 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	78db      	ldrb	r3, [r3, #3]
 8008a76:	2b63      	cmp	r3, #99	; 0x63
 8008a78:	d904      	bls.n	8008a84 <HAL_RTC_SetDate+0xbc>
 8008a7a:	f240 3163 	movw	r1, #867	; 0x363
 8008a7e:	4857      	ldr	r0, [pc, #348]	; (8008bdc <HAL_RTC_SetDate+0x214>)
 8008a80:	f7f9 fc31 	bl	80022e6 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	785b      	ldrb	r3, [r3, #1]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <HAL_RTC_SetDate+0xcc>
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	785b      	ldrb	r3, [r3, #1]
 8008a90:	2b0c      	cmp	r3, #12
 8008a92:	d904      	bls.n	8008a9e <HAL_RTC_SetDate+0xd6>
 8008a94:	f44f 7159 	mov.w	r1, #868	; 0x364
 8008a98:	4850      	ldr	r0, [pc, #320]	; (8008bdc <HAL_RTC_SetDate+0x214>)
 8008a9a:	f7f9 fc24 	bl	80022e6 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	789b      	ldrb	r3, [r3, #2]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <HAL_RTC_SetDate+0xe6>
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	789b      	ldrb	r3, [r3, #2]
 8008aaa:	2b1f      	cmp	r3, #31
 8008aac:	d904      	bls.n	8008ab8 <HAL_RTC_SetDate+0xf0>
 8008aae:	f240 3165 	movw	r1, #869	; 0x365
 8008ab2:	484a      	ldr	r0, [pc, #296]	; (8008bdc <HAL_RTC_SetDate+0x214>)
 8008ab4:	f7f9 fc17 	bl	80022e6 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	78db      	ldrb	r3, [r3, #3]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 f91d 	bl	8008cfc <RTC_ByteToBcd2>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	785b      	ldrb	r3, [r3, #1]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f916 	bl	8008cfc <RTC_ByteToBcd2>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ad4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	789b      	ldrb	r3, [r3, #2]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f90e 	bl	8008cfc <RTC_ByteToBcd2>
 8008ae0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ae2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008aec:	4313      	orrs	r3, r2
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e045      	b.n	8008b7e <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	78db      	ldrb	r3, [r3, #3]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f91d 	bl	8008d36 <RTC_Bcd2ToByte>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b63      	cmp	r3, #99	; 0x63
 8008b00:	d904      	bls.n	8008b0c <HAL_RTC_SetDate+0x144>
 8008b02:	f240 316e 	movw	r1, #878	; 0x36e
 8008b06:	4835      	ldr	r0, [pc, #212]	; (8008bdc <HAL_RTC_SetDate+0x214>)
 8008b08:	f7f9 fbed 	bl	80022e6 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f910 	bl	8008d36 <RTC_Bcd2ToByte>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d007      	beq.n	8008b2c <HAL_RTC_SetDate+0x164>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f908 	bl	8008d36 <RTC_Bcd2ToByte>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b0c      	cmp	r3, #12
 8008b2a:	d904      	bls.n	8008b36 <HAL_RTC_SetDate+0x16e>
 8008b2c:	f240 316f 	movw	r1, #879	; 0x36f
 8008b30:	482a      	ldr	r0, [pc, #168]	; (8008bdc <HAL_RTC_SetDate+0x214>)
 8008b32:	f7f9 fbd8 	bl	80022e6 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	789b      	ldrb	r3, [r3, #2]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f8fb 	bl	8008d36 <RTC_Bcd2ToByte>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d007      	beq.n	8008b56 <HAL_RTC_SetDate+0x18e>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	789b      	ldrb	r3, [r3, #2]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f8f3 	bl	8008d36 <RTC_Bcd2ToByte>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b1f      	cmp	r3, #31
 8008b54:	d904      	bls.n	8008b60 <HAL_RTC_SetDate+0x198>
 8008b56:	f44f 715c 	mov.w	r1, #880	; 0x370
 8008b5a:	4820      	ldr	r0, [pc, #128]	; (8008bdc <HAL_RTC_SetDate+0x214>)
 8008b5c:	f7f9 fbc3 	bl	80022e6 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	78db      	ldrb	r3, [r3, #3]
 8008b64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b6c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008b72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	22ca      	movs	r2, #202	; 0xca
 8008b84:	625a      	str	r2, [r3, #36]	; 0x24
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2253      	movs	r2, #83	; 0x53
 8008b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 f858 	bl	8008c44 <RTC_EnterInitMode>
 8008b94:	4603      	mov	r3, r0
 8008b96:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008b98:	7cfb      	ldrb	r3, [r7, #19]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10c      	bne.n	8008bb8 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008ba8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008bac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 f87f 	bl	8008cb2 <RTC_ExitInitMode>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008bb8:	7cfb      	ldrb	r3, [r7, #19]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	22ff      	movs	r2, #255	; 0xff
 8008bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	771a      	strb	r2, [r3, #28]

  return status;
 8008bd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	371c      	adds	r7, #28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd90      	pop	{r4, r7, pc}
 8008bdc:	0800fd90 	.word	0x0800fd90

08008be0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c0e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c10:	f7fa fab4 	bl	800317c <HAL_GetTick>
 8008c14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008c16:	e009      	b.n	8008c2c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c18:	f7fa fab0 	bl	800317c <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c26:	d901      	bls.n	8008c2c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e007      	b.n	8008c3c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f003 0320 	and.w	r3, r3, #32
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0ee      	beq.n	8008c18 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d122      	bne.n	8008ca8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68da      	ldr	r2, [r3, #12]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c70:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c72:	f7fa fa83 	bl	800317c <HAL_GetTick>
 8008c76:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008c78:	e00c      	b.n	8008c94 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c7a:	f7fa fa7f 	bl	800317c <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c88:	d904      	bls.n	8008c94 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <RTC_EnterInitMode+0x64>
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d1e8      	bne.n	8008c7a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ccc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f003 0320 	and.w	r3, r3, #32
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10a      	bne.n	8008cf2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff ff89 	bl	8008bf4 <HAL_RTC_WaitForSynchro>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d004      	beq.n	8008cf2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2204      	movs	r2, #4
 8008cec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008d0a:	e005      	b.n	8008d18 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	3b0a      	subs	r3, #10
 8008d16:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	2b09      	cmp	r3, #9
 8008d1c:	d8f6      	bhi.n	8008d0c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	011b      	lsls	r3, r3, #4
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	b2db      	uxtb	r3, r3
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b085      	sub	sp, #20
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	091b      	lsrs	r3, r3, #4
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	0092      	lsls	r2, r2, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	f003 030f 	and.w	r3, r3, #15
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	4413      	add	r3, r2
 8008d60:	b2db      	uxtb	r3, r3
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8008d76:	bf00      	nop
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8008d8a:	bf00      	nop
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8008d9e:	bf00      	nop
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008db2:	bf00      	nop
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
	...

08008dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e1db      	b.n	800918a <HAL_SPI_Init+0x3ca>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a75      	ldr	r2, [pc, #468]	; (8008fac <HAL_SPI_Init+0x1ec>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d018      	beq.n	8008e0e <HAL_SPI_Init+0x4e>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a73      	ldr	r2, [pc, #460]	; (8008fb0 <HAL_SPI_Init+0x1f0>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d013      	beq.n	8008e0e <HAL_SPI_Init+0x4e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a72      	ldr	r2, [pc, #456]	; (8008fb4 <HAL_SPI_Init+0x1f4>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00e      	beq.n	8008e0e <HAL_SPI_Init+0x4e>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a70      	ldr	r2, [pc, #448]	; (8008fb8 <HAL_SPI_Init+0x1f8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d009      	beq.n	8008e0e <HAL_SPI_Init+0x4e>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a6f      	ldr	r2, [pc, #444]	; (8008fbc <HAL_SPI_Init+0x1fc>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d004      	beq.n	8008e0e <HAL_SPI_Init+0x4e>
 8008e04:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e08:	486d      	ldr	r0, [pc, #436]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008e0a:	f7f9 fa6c 	bl	80022e6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d009      	beq.n	8008e2a <HAL_SPI_Init+0x6a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e1e:	d004      	beq.n	8008e2a <HAL_SPI_Init+0x6a>
 8008e20:	f240 1141 	movw	r1, #321	; 0x141
 8008e24:	4866      	ldr	r0, [pc, #408]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008e26:	f7f9 fa5e 	bl	80022e6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00e      	beq.n	8008e50 <HAL_SPI_Init+0x90>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e3a:	d009      	beq.n	8008e50 <HAL_SPI_Init+0x90>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e44:	d004      	beq.n	8008e50 <HAL_SPI_Init+0x90>
 8008e46:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008e4a:	485d      	ldr	r0, [pc, #372]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008e4c:	f7f9 fa4b 	bl	80022e6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e58:	d008      	beq.n	8008e6c <HAL_SPI_Init+0xac>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d004      	beq.n	8008e6c <HAL_SPI_Init+0xac>
 8008e62:	f240 1143 	movw	r1, #323	; 0x143
 8008e66:	4856      	ldr	r0, [pc, #344]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008e68:	f7f9 fa3d 	bl	80022e6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e74:	d00d      	beq.n	8008e92 <HAL_SPI_Init+0xd2>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <HAL_SPI_Init+0xd2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e86:	d004      	beq.n	8008e92 <HAL_SPI_Init+0xd2>
 8008e88:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008e8c:	484c      	ldr	r0, [pc, #304]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008e8e:	f7f9 fa2a 	bl	80022e6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d020      	beq.n	8008edc <HAL_SPI_Init+0x11c>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	2b08      	cmp	r3, #8
 8008ea0:	d01c      	beq.n	8008edc <HAL_SPI_Init+0x11c>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	2b10      	cmp	r3, #16
 8008ea8:	d018      	beq.n	8008edc <HAL_SPI_Init+0x11c>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	2b18      	cmp	r3, #24
 8008eb0:	d014      	beq.n	8008edc <HAL_SPI_Init+0x11c>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	2b20      	cmp	r3, #32
 8008eb8:	d010      	beq.n	8008edc <HAL_SPI_Init+0x11c>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	2b28      	cmp	r3, #40	; 0x28
 8008ec0:	d00c      	beq.n	8008edc <HAL_SPI_Init+0x11c>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	2b30      	cmp	r3, #48	; 0x30
 8008ec8:	d008      	beq.n	8008edc <HAL_SPI_Init+0x11c>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	2b38      	cmp	r3, #56	; 0x38
 8008ed0:	d004      	beq.n	8008edc <HAL_SPI_Init+0x11c>
 8008ed2:	f240 1145 	movw	r1, #325	; 0x145
 8008ed6:	483a      	ldr	r0, [pc, #232]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008ed8:	f7f9 fa05 	bl	80022e6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d008      	beq.n	8008ef6 <HAL_SPI_Init+0x136>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	2b80      	cmp	r3, #128	; 0x80
 8008eea:	d004      	beq.n	8008ef6 <HAL_SPI_Init+0x136>
 8008eec:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008ef0:	4833      	ldr	r0, [pc, #204]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008ef2:	f7f9 f9f8 	bl	80022e6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d008      	beq.n	8008f10 <HAL_SPI_Init+0x150>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	2b10      	cmp	r3, #16
 8008f04:	d004      	beq.n	8008f10 <HAL_SPI_Init+0x150>
 8008f06:	f240 1147 	movw	r1, #327	; 0x147
 8008f0a:	482d      	ldr	r0, [pc, #180]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008f0c:	f7f9 f9eb 	bl	80022e6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d155      	bne.n	8008fc4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d008      	beq.n	8008f32 <HAL_SPI_Init+0x172>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d004      	beq.n	8008f32 <HAL_SPI_Init+0x172>
 8008f28:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008f2c:	4824      	ldr	r0, [pc, #144]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008f2e:	f7f9 f9da 	bl	80022e6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d008      	beq.n	8008f4c <HAL_SPI_Init+0x18c>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d004      	beq.n	8008f4c <HAL_SPI_Init+0x18c>
 8008f42:	f240 114b 	movw	r1, #331	; 0x14b
 8008f46:	481e      	ldr	r0, [pc, #120]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008f48:	f7f9 f9cd 	bl	80022e6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f54:	d125      	bne.n	8008fa2 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d05d      	beq.n	800901a <HAL_SPI_Init+0x25a>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	d059      	beq.n	800901a <HAL_SPI_Init+0x25a>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	2b10      	cmp	r3, #16
 8008f6c:	d055      	beq.n	800901a <HAL_SPI_Init+0x25a>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	2b18      	cmp	r3, #24
 8008f74:	d051      	beq.n	800901a <HAL_SPI_Init+0x25a>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	d04d      	beq.n	800901a <HAL_SPI_Init+0x25a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	2b28      	cmp	r3, #40	; 0x28
 8008f84:	d049      	beq.n	800901a <HAL_SPI_Init+0x25a>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	2b30      	cmp	r3, #48	; 0x30
 8008f8c:	d045      	beq.n	800901a <HAL_SPI_Init+0x25a>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	2b38      	cmp	r3, #56	; 0x38
 8008f94:	d041      	beq.n	800901a <HAL_SPI_Init+0x25a>
 8008f96:	f240 114f 	movw	r1, #335	; 0x14f
 8008f9a:	4809      	ldr	r0, [pc, #36]	; (8008fc0 <HAL_SPI_Init+0x200>)
 8008f9c:	f7f9 f9a3 	bl	80022e6 <assert_failed>
 8008fa0:	e03b      	b.n	800901a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	61da      	str	r2, [r3, #28]
 8008fa8:	e037      	b.n	800901a <HAL_SPI_Init+0x25a>
 8008faa:	bf00      	nop
 8008fac:	40013000 	.word	0x40013000
 8008fb0:	40003800 	.word	0x40003800
 8008fb4:	40003c00 	.word	0x40003c00
 8008fb8:	40013400 	.word	0x40013400
 8008fbc:	40015000 	.word	0x40015000
 8008fc0:	0800fe04 	.word	0x0800fe04
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d020      	beq.n	800900e <HAL_SPI_Init+0x24e>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d01c      	beq.n	800900e <HAL_SPI_Init+0x24e>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	2b10      	cmp	r3, #16
 8008fda:	d018      	beq.n	800900e <HAL_SPI_Init+0x24e>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	2b18      	cmp	r3, #24
 8008fe2:	d014      	beq.n	800900e <HAL_SPI_Init+0x24e>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d010      	beq.n	800900e <HAL_SPI_Init+0x24e>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	2b28      	cmp	r3, #40	; 0x28
 8008ff2:	d00c      	beq.n	800900e <HAL_SPI_Init+0x24e>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	2b30      	cmp	r3, #48	; 0x30
 8008ffa:	d008      	beq.n	800900e <HAL_SPI_Init+0x24e>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	69db      	ldr	r3, [r3, #28]
 8009000:	2b38      	cmp	r3, #56	; 0x38
 8009002:	d004      	beq.n	800900e <HAL_SPI_Init+0x24e>
 8009004:	f240 1159 	movw	r1, #345	; 0x159
 8009008:	4862      	ldr	r0, [pc, #392]	; (8009194 <HAL_SPI_Init+0x3d4>)
 800900a:	f7f9 f96c 	bl	80022e6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	615a      	str	r2, [r3, #20]
  }
#if (USE_SPI_CRC != 0U)
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901e:	2b00      	cmp	r3, #0
 8009020:	d009      	beq.n	8009036 <HAL_SPI_Init+0x276>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800902a:	d004      	beq.n	8009036 <HAL_SPI_Init+0x276>
 800902c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8009030:	4858      	ldr	r0, [pc, #352]	; (8009194 <HAL_SPI_Init+0x3d4>)
 8009032:	f7f9 f958 	bl	80022e6 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800903e:	d113      	bne.n	8009068 <HAL_SPI_Init+0x2a8>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00a      	beq.n	800905e <HAL_SPI_Init+0x29e>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009050:	d205      	bcs.n	800905e <HAL_SPI_Init+0x29e>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <HAL_SPI_Init+0x2a8>
 800905e:	f240 1163 	movw	r1, #355	; 0x163
 8009062:	484c      	ldr	r0, [pc, #304]	; (8009194 <HAL_SPI_Init+0x3d4>)
 8009064:	f7f9 f93f 	bl	80022e6 <assert_failed>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	d126      	bne.n	80090c2 <HAL_SPI_Init+0x302>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a46      	ldr	r2, [pc, #280]	; (8009198 <HAL_SPI_Init+0x3d8>)
 8009080:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a45      	ldr	r2, [pc, #276]	; (800919c <HAL_SPI_Init+0x3dc>)
 8009086:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a45      	ldr	r2, [pc, #276]	; (80091a0 <HAL_SPI_Init+0x3e0>)
 800908c:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a44      	ldr	r2, [pc, #272]	; (80091a4 <HAL_SPI_Init+0x3e4>)
 8009092:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a44      	ldr	r2, [pc, #272]	; (80091a8 <HAL_SPI_Init+0x3e8>)
 8009098:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a43      	ldr	r2, [pc, #268]	; (80091ac <HAL_SPI_Init+0x3ec>)
 800909e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a43      	ldr	r2, [pc, #268]	; (80091b0 <HAL_SPI_Init+0x3f0>)
 80090a4:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a42      	ldr	r2, [pc, #264]	; (80091b4 <HAL_SPI_Init+0x3f4>)
 80090aa:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d102      	bne.n	80090ba <HAL_SPI_Init+0x2fa>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a40      	ldr	r2, [pc, #256]	; (80091b8 <HAL_SPI_Init+0x3f8>)
 80090b8:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80090ea:	431a      	orrs	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090f4:	431a      	orrs	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	431a      	orrs	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	431a      	orrs	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009112:	431a      	orrs	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800911c:	431a      	orrs	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009126:	ea42 0103 	orr.w	r1, r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	0c1b      	lsrs	r3, r3, #16
 8009140:	f003 0104 	and.w	r1, r3, #4
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	f003 0210 	and.w	r2, r3, #16
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800915c:	d105      	bne.n	800916a <HAL_SPI_Init+0x3aa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	b292      	uxth	r2, r2
 8009168:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69da      	ldr	r2, [r3, #28]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009178:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	0800fe04 	.word	0x0800fe04
 8009198:	08009df1 	.word	0x08009df1
 800919c:	08009e05 	.word	0x08009e05
 80091a0:	08009e19 	.word	0x08009e19
 80091a4:	08009e2d 	.word	0x08009e2d
 80091a8:	08009e41 	.word	0x08009e41
 80091ac:	08009e55 	.word	0x08009e55
 80091b0:	08009e69 	.word	0x08009e69
 80091b4:	08009e7d 	.word	0x08009e7d
 80091b8:	08002515 	.word	0x08002515

080091bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	4613      	mov	r3, r2
 80091ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d009      	beq.n	80091ec <HAL_SPI_Transmit+0x30>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091e0:	d004      	beq.n	80091ec <HAL_SPI_Transmit+0x30>
 80091e2:	f44f 7142 	mov.w	r1, #776	; 0x308
 80091e6:	488b      	ldr	r0, [pc, #556]	; (8009414 <HAL_SPI_Transmit+0x258>)
 80091e8:	f7f9 f87d 	bl	80022e6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d101      	bne.n	80091fa <HAL_SPI_Transmit+0x3e>
 80091f6:	2302      	movs	r3, #2
 80091f8:	e14b      	b.n	8009492 <HAL_SPI_Transmit+0x2d6>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009202:	f7f9 ffbb 	bl	800317c <HAL_GetTick>
 8009206:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009208:	88fb      	ldrh	r3, [r7, #6]
 800920a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b01      	cmp	r3, #1
 8009216:	d002      	beq.n	800921e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8009218:	2302      	movs	r3, #2
 800921a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800921c:	e130      	b.n	8009480 <HAL_SPI_Transmit+0x2c4>
  }

  if ((pData == NULL) || (Size == 0U))
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <HAL_SPI_Transmit+0x6e>
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d102      	bne.n	8009230 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800922e:	e127      	b.n	8009480 <HAL_SPI_Transmit+0x2c4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2203      	movs	r2, #3
 8009234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	88fa      	ldrh	r2, [r7, #6]
 8009248:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	88fa      	ldrh	r2, [r7, #6]
 800924e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009276:	d10f      	bne.n	8009298 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009286:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009296:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092a0:	d10f      	bne.n	80092c2 <HAL_SPI_Transmit+0x106>
  {
    SPI_RESET_CRC(hspi);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092c0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092cc:	2b40      	cmp	r3, #64	; 0x40
 80092ce:	d007      	beq.n	80092e0 <HAL_SPI_Transmit+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092e8:	d14b      	bne.n	8009382 <HAL_SPI_Transmit+0x1c6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <HAL_SPI_Transmit+0x13c>
 80092f2:	8afb      	ldrh	r3, [r7, #22]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d13e      	bne.n	8009376 <HAL_SPI_Transmit+0x1ba>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fc:	881a      	ldrh	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009308:	1c9a      	adds	r2, r3, #2
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009312:	b29b      	uxth	r3, r3
 8009314:	3b01      	subs	r3, #1
 8009316:	b29a      	uxth	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800931c:	e02b      	b.n	8009376 <HAL_SPI_Transmit+0x1ba>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b02      	cmp	r3, #2
 800932a:	d112      	bne.n	8009352 <HAL_SPI_Transmit+0x196>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009330:	881a      	ldrh	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	1c9a      	adds	r2, r3, #2
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009346:	b29b      	uxth	r3, r3
 8009348:	3b01      	subs	r3, #1
 800934a:	b29a      	uxth	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009350:	e011      	b.n	8009376 <HAL_SPI_Transmit+0x1ba>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009352:	f7f9 ff13 	bl	800317c <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	429a      	cmp	r2, r3
 8009360:	d803      	bhi.n	800936a <HAL_SPI_Transmit+0x1ae>
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009368:	d102      	bne.n	8009370 <HAL_SPI_Transmit+0x1b4>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <HAL_SPI_Transmit+0x1ba>
        {
          errorcode = HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009374:	e084      	b.n	8009480 <HAL_SPI_Transmit+0x2c4>
    while (hspi->TxXferCount > 0U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800937a:	b29b      	uxth	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1ce      	bne.n	800931e <HAL_SPI_Transmit+0x162>
 8009380:	e04f      	b.n	8009422 <HAL_SPI_Transmit+0x266>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d002      	beq.n	8009390 <HAL_SPI_Transmit+0x1d4>
 800938a:	8afb      	ldrh	r3, [r7, #22]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d143      	bne.n	8009418 <HAL_SPI_Transmit+0x25c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	330c      	adds	r3, #12
 800939a:	7812      	ldrb	r2, [r2, #0]
 800939c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	3b01      	subs	r3, #1
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80093b6:	e02f      	b.n	8009418 <HAL_SPI_Transmit+0x25c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d113      	bne.n	80093ee <HAL_SPI_Transmit+0x232>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	330c      	adds	r3, #12
 80093d0:	7812      	ldrb	r2, [r2, #0]
 80093d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80093ec:	e014      	b.n	8009418 <HAL_SPI_Transmit+0x25c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093ee:	f7f9 fec5 	bl	800317c <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d803      	bhi.n	8009406 <HAL_SPI_Transmit+0x24a>
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009404:	d102      	bne.n	800940c <HAL_SPI_Transmit+0x250>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d105      	bne.n	8009418 <HAL_SPI_Transmit+0x25c>
        {
          errorcode = HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009410:	e036      	b.n	8009480 <HAL_SPI_Transmit+0x2c4>
 8009412:	bf00      	nop
 8009414:	0800fe04 	.word	0x0800fe04
    while (hspi->TxXferCount > 0U)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1ca      	bne.n	80093b8 <HAL_SPI_Transmit+0x1fc>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800942a:	d107      	bne.n	800943c <HAL_SPI_Transmit+0x280>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800943a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800943c:	69ba      	ldr	r2, [r7, #24]
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f000 fe37 	bl	800a0b4 <SPI_EndRxTxTransaction>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_SPI_Transmit+0x296>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2220      	movs	r2, #32
 8009450:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <HAL_SPI_Transmit+0x2b4>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800945a:	2300      	movs	r3, #0
 800945c:	613b      	str	r3, [r7, #16]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	613b      	str	r3, [r7, #16]
 800946e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <HAL_SPI_Transmit+0x2c2>
  {
    errorcode = HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	77fb      	strb	r3, [r7, #31]
 800947c:	e000      	b.n	8009480 <HAL_SPI_Transmit+0x2c4>
  }

error:
 800947e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009490:	7ffb      	ldrb	r3, [r7, #31]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3720      	adds	r7, #32
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop

0800949c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08a      	sub	sp, #40	; 0x28
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	4613      	mov	r3, r2
 80094aa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094bc:	d112      	bne.n	80094e4 <HAL_SPI_Receive+0x48>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10e      	bne.n	80094e4 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2204      	movs	r2, #4
 80094ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80094ce:	88fa      	ldrh	r2, [r7, #6]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	4613      	mov	r3, r2
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	68b9      	ldr	r1, [r7, #8]
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 f96a 	bl	80097b4 <HAL_SPI_TransmitReceive>
 80094e0:	4603      	mov	r3, r0
 80094e2:	e162      	b.n	80097aa <HAL_SPI_Receive+0x30e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d101      	bne.n	80094f2 <HAL_SPI_Receive+0x56>
 80094ee:	2302      	movs	r3, #2
 80094f0:	e15b      	b.n	80097aa <HAL_SPI_Receive+0x30e>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094fa:	f7f9 fe3f 	bl	800317c <HAL_GetTick>
 80094fe:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b01      	cmp	r3, #1
 800950a:	d002      	beq.n	8009512 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 800950c:	2302      	movs	r3, #2
 800950e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009510:	e142      	b.n	8009798 <HAL_SPI_Receive+0x2fc>
  }

  if ((pData == NULL) || (Size == 0U))
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <HAL_SPI_Receive+0x82>
 8009518:	88fb      	ldrh	r3, [r7, #6]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d102      	bne.n	8009524 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009522:	e139      	b.n	8009798 <HAL_SPI_Receive+0x2fc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2204      	movs	r2, #4
 8009528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	88fa      	ldrh	r2, [r7, #6]
 800953c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	88fa      	ldrh	r2, [r7, #6]
 8009542:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800956a:	d116      	bne.n	800959a <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800958a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009590:	b29b      	uxth	r3, r3
 8009592:	3b01      	subs	r3, #1
 8009594:	b29a      	uxth	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095a2:	d10f      	bne.n	80095c4 <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80095c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ce:	2b40      	cmp	r3, #64	; 0x40
 80095d0:	d007      	beq.n	80095e2 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d162      	bne.n	80096b0 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80095ea:	e02e      	b.n	800964a <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d115      	bne.n	8009626 <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f103 020c 	add.w	r2, r3, #12
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009606:	7812      	ldrb	r2, [r2, #0]
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800961a:	b29b      	uxth	r3, r3
 800961c:	3b01      	subs	r3, #1
 800961e:	b29a      	uxth	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009624:	e011      	b.n	800964a <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009626:	f7f9 fda9 	bl	800317c <HAL_GetTick>
 800962a:	4602      	mov	r2, r0
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	429a      	cmp	r2, r3
 8009634:	d803      	bhi.n	800963e <HAL_SPI_Receive+0x1a2>
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963c:	d102      	bne.n	8009644 <HAL_SPI_Receive+0x1a8>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d102      	bne.n	800964a <HAL_SPI_Receive+0x1ae>
        {
          errorcode = HAL_TIMEOUT;
 8009644:	2303      	movs	r3, #3
 8009646:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009648:	e0a6      	b.n	8009798 <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800964e:	b29b      	uxth	r3, r3
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1cb      	bne.n	80095ec <HAL_SPI_Receive+0x150>
 8009654:	e031      	b.n	80096ba <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b01      	cmp	r3, #1
 8009662:	d113      	bne.n	800968c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966e:	b292      	uxth	r2, r2
 8009670:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	1c9a      	adds	r2, r3, #2
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009680:	b29b      	uxth	r3, r3
 8009682:	3b01      	subs	r3, #1
 8009684:	b29a      	uxth	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	87da      	strh	r2, [r3, #62]	; 0x3e
 800968a:	e011      	b.n	80096b0 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800968c:	f7f9 fd76 	bl	800317c <HAL_GetTick>
 8009690:	4602      	mov	r2, r0
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d803      	bhi.n	80096a4 <HAL_SPI_Receive+0x208>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a2:	d102      	bne.n	80096aa <HAL_SPI_Receive+0x20e>
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d102      	bne.n	80096b0 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096ae:	e073      	b.n	8009798 <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1cd      	bne.n	8009656 <HAL_SPI_Receive+0x1ba>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c2:	d144      	bne.n	800974e <HAL_SPI_Receive+0x2b2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80096d2:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2201      	movs	r2, #1
 80096dc:	2101      	movs	r1, #1
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fbfa 	bl	8009ed8 <SPI_WaitFlagStateUntilTimeout>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <HAL_SPI_Receive+0x254>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	77fb      	strb	r3, [r7, #31]
      goto error;
 80096ee:	e053      	b.n	8009798 <HAL_SPI_Receive+0x2fc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096f8:	d107      	bne.n	800970a <HAL_SPI_Receive+0x26e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	b292      	uxth	r2, r2
 8009706:	801a      	strh	r2, [r3, #0]
 8009708:	e008      	b.n	800971c <HAL_SPI_Receive+0x280>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f103 020c 	add.w	r2, r3, #12
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	7812      	ldrb	r2, [r2, #0]
 8009718:	b2d2      	uxtb	r2, r2
 800971a:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2201      	movs	r2, #1
 8009724:	2101      	movs	r1, #1
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f000 fbd6 	bl	8009ed8 <SPI_WaitFlagStateUntilTimeout>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d008      	beq.n	8009744 <HAL_SPI_Receive+0x2a8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009736:	f043 0202 	orr.w	r2, r3, #2
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	77fb      	strb	r3, [r7, #31]
      goto error;
 8009742:	e029      	b.n	8009798 <HAL_SPI_Receive+0x2fc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 800974c:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800974e:	69ba      	ldr	r2, [r7, #24]
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 fc48 	bl	8009fe8 <SPI_EndRxTransaction>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <HAL_SPI_Receive+0x2c8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2220      	movs	r2, #32
 8009762:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f003 0310 	and.w	r3, r3, #16
 800976e:	2b10      	cmp	r3, #16
 8009770:	d10a      	bne.n	8009788 <HAL_SPI_Receive+0x2ec>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009776:	f043 0202 	orr.w	r2, r3, #2
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009786:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <HAL_SPI_Receive+0x2fa>
  {
    errorcode = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	77fb      	strb	r3, [r7, #31]
 8009794:	e000      	b.n	8009798 <HAL_SPI_Receive+0x2fc>
  }

error :
 8009796:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3720      	adds	r7, #32
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08e      	sub	sp, #56	; 0x38
 80097b8:	af02      	add	r7, sp, #8
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097c6:	2301      	movs	r3, #1
 80097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d004      	beq.n	80097e2 <HAL_SPI_TransmitReceive+0x2e>
 80097d8:	f240 417c 	movw	r1, #1148	; 0x47c
 80097dc:	488a      	ldr	r0, [pc, #552]	; (8009a08 <HAL_SPI_TransmitReceive+0x254>)
 80097de:	f7f8 fd82 	bl	80022e6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d101      	bne.n	80097f0 <HAL_SPI_TransmitReceive+0x3c>
 80097ec:	2302      	movs	r3, #2
 80097ee:	e1fa      	b.n	8009be6 <HAL_SPI_TransmitReceive+0x432>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097f8:	f7f9 fcc0 	bl	800317c <HAL_GetTick>
 80097fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800980e:	887b      	ldrh	r3, [r7, #2]
 8009810:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009816:	2b01      	cmp	r3, #1
 8009818:	d00f      	beq.n	800983a <HAL_SPI_TransmitReceive+0x86>
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009820:	d107      	bne.n	8009832 <HAL_SPI_TransmitReceive+0x7e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d103      	bne.n	8009832 <HAL_SPI_TransmitReceive+0x7e>
 800982a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800982e:	2b04      	cmp	r3, #4
 8009830:	d003      	beq.n	800983a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8009832:	2302      	movs	r3, #2
 8009834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009838:	e1cb      	b.n	8009bd2 <HAL_SPI_TransmitReceive+0x41e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d005      	beq.n	800984c <HAL_SPI_TransmitReceive+0x98>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <HAL_SPI_TransmitReceive+0x98>
 8009846:	887b      	ldrh	r3, [r7, #2]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d103      	bne.n	8009854 <HAL_SPI_TransmitReceive+0xa0>
  {
    errorcode = HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009852:	e1be      	b.n	8009bd2 <HAL_SPI_TransmitReceive+0x41e>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b04      	cmp	r3, #4
 800985e:	d003      	beq.n	8009868 <HAL_SPI_TransmitReceive+0xb4>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2205      	movs	r2, #5
 8009864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	887a      	ldrh	r2, [r7, #2]
 8009878:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	887a      	ldrh	r2, [r7, #2]
 800987e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	887a      	ldrh	r2, [r7, #2]
 800988a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	887a      	ldrh	r2, [r7, #2]
 8009890:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a6:	d10f      	bne.n	80098c8 <HAL_SPI_TransmitReceive+0x114>
  {
    SPI_RESET_CRC(hspi);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098c6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d2:	2b40      	cmp	r3, #64	; 0x40
 80098d4:	d007      	beq.n	80098e6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098ee:	f040 808d 	bne.w	8009a0c <HAL_SPI_TransmitReceive+0x258>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <HAL_SPI_TransmitReceive+0x14c>
 80098fa:	8b7b      	ldrh	r3, [r7, #26]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d178      	bne.n	80099f2 <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009904:	881a      	ldrh	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009910:	1c9a      	adds	r2, r3, #2
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800991a:	b29b      	uxth	r3, r3
 800991c:	3b01      	subs	r3, #1
 800991e:	b29a      	uxth	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009924:	e065      	b.n	80099f2 <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	f003 0302 	and.w	r3, r3, #2
 8009930:	2b02      	cmp	r3, #2
 8009932:	d12d      	bne.n	8009990 <HAL_SPI_TransmitReceive+0x1dc>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009938:	b29b      	uxth	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d028      	beq.n	8009990 <HAL_SPI_TransmitReceive+0x1dc>
 800993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009940:	2b01      	cmp	r3, #1
 8009942:	d125      	bne.n	8009990 <HAL_SPI_TransmitReceive+0x1dc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009948:	881a      	ldrh	r2, [r3, #0]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009954:	1c9a      	adds	r2, r3, #2
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800995e:	b29b      	uxth	r3, r3
 8009960:	3b01      	subs	r3, #1
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009968:	2300      	movs	r3, #0
 800996a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009970:	b29b      	uxth	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10c      	bne.n	8009990 <HAL_SPI_TransmitReceive+0x1dc>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800997e:	d107      	bne.n	8009990 <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800998e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b01      	cmp	r3, #1
 800999c:	d119      	bne.n	80099d2 <HAL_SPI_TransmitReceive+0x21e>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d014      	beq.n	80099d2 <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68da      	ldr	r2, [r3, #12]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b2:	b292      	uxth	r2, r2
 80099b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	1c9a      	adds	r2, r3, #2
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	3b01      	subs	r3, #1
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80099ce:	2301      	movs	r3, #1
 80099d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80099d2:	f7f9 fbd3 	bl	800317c <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099de:	429a      	cmp	r2, r3
 80099e0:	d807      	bhi.n	80099f2 <HAL_SPI_TransmitReceive+0x23e>
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e8:	d003      	beq.n	80099f2 <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80099f0:	e0ef      	b.n	8009bd2 <HAL_SPI_TransmitReceive+0x41e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d194      	bne.n	8009926 <HAL_SPI_TransmitReceive+0x172>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d18f      	bne.n	8009926 <HAL_SPI_TransmitReceive+0x172>
 8009a06:	e090      	b.n	8009b2a <HAL_SPI_TransmitReceive+0x376>
 8009a08:	0800fe04 	.word	0x0800fe04
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <HAL_SPI_TransmitReceive+0x266>
 8009a14:	8b7b      	ldrh	r3, [r7, #26]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d17d      	bne.n	8009b16 <HAL_SPI_TransmitReceive+0x362>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	330c      	adds	r3, #12
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a40:	e069      	b.n	8009b16 <HAL_SPI_TransmitReceive+0x362>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d12e      	bne.n	8009aae <HAL_SPI_TransmitReceive+0x2fa>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d029      	beq.n	8009aae <HAL_SPI_TransmitReceive+0x2fa>
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d126      	bne.n	8009aae <HAL_SPI_TransmitReceive+0x2fa>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	330c      	adds	r3, #12
 8009a6a:	7812      	ldrb	r2, [r2, #0]
 8009a6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10c      	bne.n	8009aae <HAL_SPI_TransmitReceive+0x2fa>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a9c:	d107      	bne.n	8009aae <HAL_SPI_TransmitReceive+0x2fa>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009aac:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d119      	bne.n	8009af0 <HAL_SPI_TransmitReceive+0x33c>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d014      	beq.n	8009af0 <HAL_SPI_TransmitReceive+0x33c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68da      	ldr	r2, [r3, #12]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad0:	b2d2      	uxtb	r2, r2
 8009ad2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009aec:	2301      	movs	r3, #1
 8009aee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009af0:	f7f9 fb44 	bl	800317c <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d803      	bhi.n	8009b08 <HAL_SPI_TransmitReceive+0x354>
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b06:	d102      	bne.n	8009b0e <HAL_SPI_TransmitReceive+0x35a>
 8009b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d103      	bne.n	8009b16 <HAL_SPI_TransmitReceive+0x362>
      {
        errorcode = HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b14:	e05d      	b.n	8009bd2 <HAL_SPI_TransmitReceive+0x41e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d190      	bne.n	8009a42 <HAL_SPI_TransmitReceive+0x28e>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d18b      	bne.n	8009a42 <HAL_SPI_TransmitReceive+0x28e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b32:	d119      	bne.n	8009b68 <HAL_SPI_TransmitReceive+0x3b4>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f000 f9ca 	bl	8009ed8 <SPI_WaitFlagStateUntilTimeout>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d009      	beq.n	8009b5e <HAL_SPI_TransmitReceive+0x3aa>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4e:	f043 0202 	orr.w	r2, r3, #2
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8009b5c:	e039      	b.n	8009bd2 <HAL_SPI_TransmitReceive+0x41e>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8009b66:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f003 0310 	and.w	r3, r3, #16
 8009b72:	2b10      	cmp	r3, #16
 8009b74:	d10d      	bne.n	8009b92 <HAL_SPI_TransmitReceive+0x3de>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7a:	f043 0202 	orr.w	r2, r3, #2
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009b8a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 fa8c 	bl	800a0b4 <SPI_EndRxTxTransaction>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d006      	beq.n	8009bb0 <HAL_SPI_TransmitReceive+0x3fc>
  {
    errorcode = HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2220      	movs	r2, #32
 8009bac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009bae:	e010      	b.n	8009bd2 <HAL_SPI_TransmitReceive+0x41e>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10b      	bne.n	8009bd0 <HAL_SPI_TransmitReceive+0x41c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bb8:	2300      	movs	r3, #0
 8009bba:	613b      	str	r3, [r7, #16]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	613b      	str	r3, [r7, #16]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	613b      	str	r3, [r7, #16]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	e000      	b.n	8009bd2 <HAL_SPI_TransmitReceive+0x41e>
  }

error :
 8009bd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009be2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3730      	adds	r7, #48	; 0x30
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop

08009bf0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	099b      	lsrs	r3, r3, #6
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10f      	bne.n	8009c34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00a      	beq.n	8009c34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	099b      	lsrs	r3, r3, #6
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d004      	beq.n	8009c34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	4798      	blx	r3
    return;
 8009c32:	e0d8      	b.n	8009de6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	085b      	lsrs	r3, r3, #1
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00a      	beq.n	8009c56 <HAL_SPI_IRQHandler+0x66>
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	09db      	lsrs	r3, r3, #7
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d004      	beq.n	8009c56 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4798      	blx	r3
    return;
 8009c54:	e0c7      	b.n	8009de6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	095b      	lsrs	r3, r3, #5
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10c      	bne.n	8009c7c <HAL_SPI_IRQHandler+0x8c>
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	099b      	lsrs	r3, r3, #6
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d106      	bne.n	8009c7c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	0a1b      	lsrs	r3, r3, #8
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 80b5 	beq.w	8009de6 <HAL_SPI_IRQHandler+0x1f6>
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	095b      	lsrs	r3, r3, #5
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 80ae 	beq.w	8009de6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	099b      	lsrs	r3, r3, #6
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d023      	beq.n	8009cde <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d011      	beq.n	8009cc6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca6:	f043 0204 	orr.w	r2, r3, #4
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cae:	2300      	movs	r3, #0
 8009cb0:	617b      	str	r3, [r7, #20]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	617b      	str	r3, [r7, #20]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	e00b      	b.n	8009cde <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	613b      	str	r3, [r7, #16]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	613b      	str	r3, [r7, #16]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	613b      	str	r3, [r7, #16]
 8009cda:	693b      	ldr	r3, [r7, #16]
        return;
 8009cdc:	e083      	b.n	8009de6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	095b      	lsrs	r3, r3, #5
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d014      	beq.n	8009d14 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cee:	f043 0201 	orr.w	r2, r3, #1
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60fb      	str	r3, [r7, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	60fb      	str	r3, [r7, #12]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	0a1b      	lsrs	r3, r3, #8
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00c      	beq.n	8009d3a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d24:	f043 0208 	orr.w	r2, r3, #8
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	60bb      	str	r3, [r7, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	60bb      	str	r3, [r7, #8]
 8009d38:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d050      	beq.n	8009de4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d50:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	f003 0302 	and.w	r3, r3, #2
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <HAL_SPI_IRQHandler+0x17e>
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d034      	beq.n	8009dd8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f022 0203 	bic.w	r2, r2, #3
 8009d7c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d011      	beq.n	8009daa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d8a:	4a18      	ldr	r2, [pc, #96]	; (8009dec <HAL_SPI_IRQHandler+0x1fc>)
 8009d8c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fa fd3e 	bl	8004814 <HAL_DMA_Abort_IT>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d005      	beq.n	8009daa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d017      	beq.n	8009de2 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db6:	4a0d      	ldr	r2, [pc, #52]	; (8009dec <HAL_SPI_IRQHandler+0x1fc>)
 8009db8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fa fd28 	bl	8004814 <HAL_DMA_Abort_IT>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00b      	beq.n	8009de2 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009dd6:	e004      	b.n	8009de2 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009de0:	e000      	b.n	8009de4 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8009de2:	bf00      	nop
    return;
 8009de4:	bf00      	nop
  }
}
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	08009ead 	.word	0x08009ead

08009df0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e9e:	b2db      	uxtb	r3, r3
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ece:	bf00      	nop
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ee8:	f7f9 f948 	bl	800317c <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef0:	1a9b      	subs	r3, r3, r2
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009ef8:	f7f9 f940 	bl	800317c <HAL_GetTick>
 8009efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009efe:	4b39      	ldr	r3, [pc, #228]	; (8009fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	015b      	lsls	r3, r3, #5
 8009f04:	0d1b      	lsrs	r3, r3, #20
 8009f06:	69fa      	ldr	r2, [r7, #28]
 8009f08:	fb02 f303 	mul.w	r3, r2, r3
 8009f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f0e:	e054      	b.n	8009fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f16:	d050      	beq.n	8009fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f18:	f7f9 f930 	bl	800317c <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	69fa      	ldr	r2, [r7, #28]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d902      	bls.n	8009f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d13d      	bne.n	8009faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f46:	d111      	bne.n	8009f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f50:	d004      	beq.n	8009f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f5a:	d107      	bne.n	8009f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f74:	d10f      	bne.n	8009f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e017      	b.n	8009fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689a      	ldr	r2, [r3, #8]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	bf0c      	ite	eq
 8009fca:	2301      	moveq	r3, #1
 8009fcc:	2300      	movne	r3, #0
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d19b      	bne.n	8009f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3720      	adds	r7, #32
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000000 	.word	0x20000000

08009fe8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af02      	add	r7, sp, #8
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ffc:	d111      	bne.n	800a022 <SPI_EndRxTransaction+0x3a>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a006:	d004      	beq.n	800a012 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a010:	d107      	bne.n	800a022 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a020:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a02a:	d12a      	bne.n	800a082 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a034:	d012      	beq.n	800a05c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2200      	movs	r2, #0
 800a03e:	2180      	movs	r1, #128	; 0x80
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff ff49 	bl	8009ed8 <SPI_WaitFlagStateUntilTimeout>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d02d      	beq.n	800a0a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a050:	f043 0220 	orr.w	r2, r3, #32
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e026      	b.n	800a0aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2200      	movs	r2, #0
 800a064:	2101      	movs	r1, #1
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7ff ff36 	bl	8009ed8 <SPI_WaitFlagStateUntilTimeout>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d01a      	beq.n	800a0a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a076:	f043 0220 	orr.w	r2, r3, #32
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e013      	b.n	800a0aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	2200      	movs	r2, #0
 800a08a:	2101      	movs	r1, #1
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f7ff ff23 	bl	8009ed8 <SPI_WaitFlagStateUntilTimeout>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d007      	beq.n	800a0a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a09c:	f043 0220 	orr.w	r2, r3, #32
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e000      	b.n	800a0aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a0c0:	4b1b      	ldr	r3, [pc, #108]	; (800a130 <SPI_EndRxTxTransaction+0x7c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a1b      	ldr	r2, [pc, #108]	; (800a134 <SPI_EndRxTxTransaction+0x80>)
 800a0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ca:	0d5b      	lsrs	r3, r3, #21
 800a0cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0d0:	fb02 f303 	mul.w	r3, r2, r3
 800a0d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0de:	d112      	bne.n	800a106 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2180      	movs	r1, #128	; 0x80
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f7ff fef4 	bl	8009ed8 <SPI_WaitFlagStateUntilTimeout>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d016      	beq.n	800a124 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0fa:	f043 0220 	orr.w	r2, r3, #32
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	e00f      	b.n	800a126 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00a      	beq.n	800a122 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	3b01      	subs	r3, #1
 800a110:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a11c:	2b80      	cmp	r3, #128	; 0x80
 800a11e:	d0f2      	beq.n	800a106 <SPI_EndRxTxTransaction+0x52>
 800a120:	e000      	b.n	800a124 <SPI_EndRxTxTransaction+0x70>
        break;
 800a122:	bf00      	nop
  }

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000000 	.word	0x20000000
 800a134:	165e9f81 	.word	0x165e9f81

0800a138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e0b2      	b.n	800a2b0 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a5a      	ldr	r2, [pc, #360]	; (800a2b8 <HAL_TIM_Base_Init+0x180>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d027      	beq.n	800a1a4 <HAL_TIM_Base_Init+0x6c>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a15c:	d022      	beq.n	800a1a4 <HAL_TIM_Base_Init+0x6c>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a56      	ldr	r2, [pc, #344]	; (800a2bc <HAL_TIM_Base_Init+0x184>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d01d      	beq.n	800a1a4 <HAL_TIM_Base_Init+0x6c>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a54      	ldr	r2, [pc, #336]	; (800a2c0 <HAL_TIM_Base_Init+0x188>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d018      	beq.n	800a1a4 <HAL_TIM_Base_Init+0x6c>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a53      	ldr	r2, [pc, #332]	; (800a2c4 <HAL_TIM_Base_Init+0x18c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d013      	beq.n	800a1a4 <HAL_TIM_Base_Init+0x6c>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a51      	ldr	r2, [pc, #324]	; (800a2c8 <HAL_TIM_Base_Init+0x190>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d00e      	beq.n	800a1a4 <HAL_TIM_Base_Init+0x6c>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a50      	ldr	r2, [pc, #320]	; (800a2cc <HAL_TIM_Base_Init+0x194>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d009      	beq.n	800a1a4 <HAL_TIM_Base_Init+0x6c>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a4e      	ldr	r2, [pc, #312]	; (800a2d0 <HAL_TIM_Base_Init+0x198>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d004      	beq.n	800a1a4 <HAL_TIM_Base_Init+0x6c>
 800a19a:	f240 1113 	movw	r1, #275	; 0x113
 800a19e:	484d      	ldr	r0, [pc, #308]	; (800a2d4 <HAL_TIM_Base_Init+0x19c>)
 800a1a0:	f7f8 f8a1 	bl	80022e6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d014      	beq.n	800a1d6 <HAL_TIM_Base_Init+0x9e>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d010      	beq.n	800a1d6 <HAL_TIM_Base_Init+0x9e>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	2b20      	cmp	r3, #32
 800a1ba:	d00c      	beq.n	800a1d6 <HAL_TIM_Base_Init+0x9e>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	2b40      	cmp	r3, #64	; 0x40
 800a1c2:	d008      	beq.n	800a1d6 <HAL_TIM_Base_Init+0x9e>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	2b60      	cmp	r3, #96	; 0x60
 800a1ca:	d004      	beq.n	800a1d6 <HAL_TIM_Base_Init+0x9e>
 800a1cc:	f44f 718a 	mov.w	r1, #276	; 0x114
 800a1d0:	4840      	ldr	r0, [pc, #256]	; (800a2d4 <HAL_TIM_Base_Init+0x19c>)
 800a1d2:	f7f8 f888 	bl	80022e6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00e      	beq.n	800a1fc <HAL_TIM_Base_Init+0xc4>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1e6:	d009      	beq.n	800a1fc <HAL_TIM_Base_Init+0xc4>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1f0:	d004      	beq.n	800a1fc <HAL_TIM_Base_Init+0xc4>
 800a1f2:	f240 1115 	movw	r1, #277	; 0x115
 800a1f6:	4837      	ldr	r0, [pc, #220]	; (800a2d4 <HAL_TIM_Base_Init+0x19c>)
 800a1f8:	f7f8 f875 	bl	80022e6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d008      	beq.n	800a216 <HAL_TIM_Base_Init+0xde>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	2b80      	cmp	r3, #128	; 0x80
 800a20a:	d004      	beq.n	800a216 <HAL_TIM_Base_Init+0xde>
 800a20c:	f44f 718b 	mov.w	r1, #278	; 0x116
 800a210:	4830      	ldr	r0, [pc, #192]	; (800a2d4 <HAL_TIM_Base_Init+0x19c>)
 800a212:	f7f8 f868 	bl	80022e6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d111      	bne.n	800a246 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fefe 	bl	800b02c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a27      	ldr	r2, [pc, #156]	; (800a2d8 <HAL_TIM_Base_Init+0x1a0>)
 800a23c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2202      	movs	r2, #2
 800a24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3304      	adds	r3, #4
 800a256:	4619      	mov	r1, r3
 800a258:	4610      	mov	r0, r2
 800a25a:	f000 fdcd 	bl	800adf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	40010000 	.word	0x40010000
 800a2bc:	40000400 	.word	0x40000400
 800a2c0:	40000800 	.word	0x40000800
 800a2c4:	40000c00 	.word	0x40000c00
 800a2c8:	40014000 	.word	0x40014000
 800a2cc:	40014400 	.word	0x40014400
 800a2d0:	40014800 	.word	0x40014800
 800a2d4:	0800fe78 	.word	0x0800fe78
 800a2d8:	08002d1d 	.word	0x08002d1d

0800a2dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a3d      	ldr	r2, [pc, #244]	; (800a3e0 <HAL_TIM_Base_Start_IT+0x104>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d027      	beq.n	800a33e <HAL_TIM_Base_Start_IT+0x62>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2f6:	d022      	beq.n	800a33e <HAL_TIM_Base_Start_IT+0x62>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a39      	ldr	r2, [pc, #228]	; (800a3e4 <HAL_TIM_Base_Start_IT+0x108>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d01d      	beq.n	800a33e <HAL_TIM_Base_Start_IT+0x62>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a38      	ldr	r2, [pc, #224]	; (800a3e8 <HAL_TIM_Base_Start_IT+0x10c>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d018      	beq.n	800a33e <HAL_TIM_Base_Start_IT+0x62>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a36      	ldr	r2, [pc, #216]	; (800a3ec <HAL_TIM_Base_Start_IT+0x110>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d013      	beq.n	800a33e <HAL_TIM_Base_Start_IT+0x62>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a35      	ldr	r2, [pc, #212]	; (800a3f0 <HAL_TIM_Base_Start_IT+0x114>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d00e      	beq.n	800a33e <HAL_TIM_Base_Start_IT+0x62>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a33      	ldr	r2, [pc, #204]	; (800a3f4 <HAL_TIM_Base_Start_IT+0x118>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d009      	beq.n	800a33e <HAL_TIM_Base_Start_IT+0x62>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a32      	ldr	r2, [pc, #200]	; (800a3f8 <HAL_TIM_Base_Start_IT+0x11c>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d004      	beq.n	800a33e <HAL_TIM_Base_Start_IT+0x62>
 800a334:	f240 11cf 	movw	r1, #463	; 0x1cf
 800a338:	4830      	ldr	r0, [pc, #192]	; (800a3fc <HAL_TIM_Base_Start_IT+0x120>)
 800a33a:	f7f7 ffd4 	bl	80022e6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b01      	cmp	r3, #1
 800a348:	d001      	beq.n	800a34e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e044      	b.n	800a3d8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2202      	movs	r2, #2
 800a352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68da      	ldr	r2, [r3, #12]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f042 0201 	orr.w	r2, r2, #1
 800a364:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a1d      	ldr	r2, [pc, #116]	; (800a3e0 <HAL_TIM_Base_Start_IT+0x104>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d018      	beq.n	800a3a2 <HAL_TIM_Base_Start_IT+0xc6>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a378:	d013      	beq.n	800a3a2 <HAL_TIM_Base_Start_IT+0xc6>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a19      	ldr	r2, [pc, #100]	; (800a3e4 <HAL_TIM_Base_Start_IT+0x108>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d00e      	beq.n	800a3a2 <HAL_TIM_Base_Start_IT+0xc6>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a17      	ldr	r2, [pc, #92]	; (800a3e8 <HAL_TIM_Base_Start_IT+0x10c>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d009      	beq.n	800a3a2 <HAL_TIM_Base_Start_IT+0xc6>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a16      	ldr	r2, [pc, #88]	; (800a3ec <HAL_TIM_Base_Start_IT+0x110>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d004      	beq.n	800a3a2 <HAL_TIM_Base_Start_IT+0xc6>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a14      	ldr	r2, [pc, #80]	; (800a3f0 <HAL_TIM_Base_Start_IT+0x114>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d111      	bne.n	800a3c6 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f003 0307 	and.w	r3, r3, #7
 800a3ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b06      	cmp	r3, #6
 800a3b2:	d010      	beq.n	800a3d6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f042 0201 	orr.w	r2, r2, #1
 800a3c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c4:	e007      	b.n	800a3d6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f042 0201 	orr.w	r2, r2, #1
 800a3d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	40010000 	.word	0x40010000
 800a3e4:	40000400 	.word	0x40000400
 800a3e8:	40000800 	.word	0x40000800
 800a3ec:	40000c00 	.word	0x40000c00
 800a3f0:	40014000 	.word	0x40014000
 800a3f4:	40014400 	.word	0x40014400
 800a3f8:	40014800 	.word	0x40014800
 800a3fc:	0800fe78 	.word	0x0800fe78

0800a400 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a29      	ldr	r2, [pc, #164]	; (800a4b4 <HAL_TIM_Base_Stop_IT+0xb4>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d027      	beq.n	800a462 <HAL_TIM_Base_Stop_IT+0x62>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a41a:	d022      	beq.n	800a462 <HAL_TIM_Base_Stop_IT+0x62>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a25      	ldr	r2, [pc, #148]	; (800a4b8 <HAL_TIM_Base_Stop_IT+0xb8>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d01d      	beq.n	800a462 <HAL_TIM_Base_Stop_IT+0x62>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a24      	ldr	r2, [pc, #144]	; (800a4bc <HAL_TIM_Base_Stop_IT+0xbc>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d018      	beq.n	800a462 <HAL_TIM_Base_Stop_IT+0x62>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a22      	ldr	r2, [pc, #136]	; (800a4c0 <HAL_TIM_Base_Stop_IT+0xc0>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d013      	beq.n	800a462 <HAL_TIM_Base_Stop_IT+0x62>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a21      	ldr	r2, [pc, #132]	; (800a4c4 <HAL_TIM_Base_Stop_IT+0xc4>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d00e      	beq.n	800a462 <HAL_TIM_Base_Stop_IT+0x62>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a1f      	ldr	r2, [pc, #124]	; (800a4c8 <HAL_TIM_Base_Stop_IT+0xc8>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d009      	beq.n	800a462 <HAL_TIM_Base_Stop_IT+0x62>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a1e      	ldr	r2, [pc, #120]	; (800a4cc <HAL_TIM_Base_Stop_IT+0xcc>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d004      	beq.n	800a462 <HAL_TIM_Base_Stop_IT+0x62>
 800a458:	f240 11f7 	movw	r1, #503	; 0x1f7
 800a45c:	481c      	ldr	r0, [pc, #112]	; (800a4d0 <HAL_TIM_Base_Stop_IT+0xd0>)
 800a45e:	f7f7 ff42 	bl	80022e6 <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68da      	ldr	r2, [r3, #12]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f022 0201 	bic.w	r2, r2, #1
 800a470:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6a1a      	ldr	r2, [r3, #32]
 800a478:	f241 1311 	movw	r3, #4369	; 0x1111
 800a47c:	4013      	ands	r3, r2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10f      	bne.n	800a4a2 <HAL_TIM_Base_Stop_IT+0xa2>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6a1a      	ldr	r2, [r3, #32]
 800a488:	f240 4344 	movw	r3, #1092	; 0x444
 800a48c:	4013      	ands	r3, r2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d107      	bne.n	800a4a2 <HAL_TIM_Base_Stop_IT+0xa2>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 0201 	bic.w	r2, r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	40010000 	.word	0x40010000
 800a4b8:	40000400 	.word	0x40000400
 800a4bc:	40000800 	.word	0x40000800
 800a4c0:	40000c00 	.word	0x40000c00
 800a4c4:	40014000 	.word	0x40014000
 800a4c8:	40014400 	.word	0x40014400
 800a4cc:	40014800 	.word	0x40014800
 800a4d0:	0800fe78 	.word	0x0800fe78

0800a4d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d128      	bne.n	800a53c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d121      	bne.n	800a53c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f06f 0202 	mvn.w	r2, #2
 800a500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	f003 0303 	and.w	r3, r3, #3
 800a512:	2b00      	cmp	r3, #0
 800a514:	d005      	beq.n	800a522 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	4798      	blx	r3
 800a520:	e009      	b.n	800a536 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	f003 0304 	and.w	r3, r3, #4
 800a546:	2b04      	cmp	r3, #4
 800a548:	d128      	bne.n	800a59c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f003 0304 	and.w	r3, r3, #4
 800a554:	2b04      	cmp	r3, #4
 800a556:	d121      	bne.n	800a59c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f06f 0204 	mvn.w	r2, #4
 800a560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2202      	movs	r2, #2
 800a566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a572:	2b00      	cmp	r3, #0
 800a574:	d005      	beq.n	800a582 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	4798      	blx	r3
 800a580:	e009      	b.n	800a596 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	f003 0308 	and.w	r3, r3, #8
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	d128      	bne.n	800a5fc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	f003 0308 	and.w	r3, r3, #8
 800a5b4:	2b08      	cmp	r3, #8
 800a5b6:	d121      	bne.n	800a5fc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f06f 0208 	mvn.w	r2, #8
 800a5c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2204      	movs	r2, #4
 800a5c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	69db      	ldr	r3, [r3, #28]
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d005      	beq.n	800a5e2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	4798      	blx	r3
 800a5e0:	e009      	b.n	800a5f6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	f003 0310 	and.w	r3, r3, #16
 800a606:	2b10      	cmp	r3, #16
 800a608:	d128      	bne.n	800a65c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f003 0310 	and.w	r3, r3, #16
 800a614:	2b10      	cmp	r3, #16
 800a616:	d121      	bne.n	800a65c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f06f 0210 	mvn.w	r2, #16
 800a620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2208      	movs	r2, #8
 800a626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	4798      	blx	r3
 800a640:	e009      	b.n	800a656 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b01      	cmp	r3, #1
 800a668:	d110      	bne.n	800a68c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	2b01      	cmp	r3, #1
 800a676:	d109      	bne.n	800a68c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f06f 0201 	mvn.w	r2, #1
 800a680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a696:	2b80      	cmp	r3, #128	; 0x80
 800a698:	d110      	bne.n	800a6bc <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a4:	2b80      	cmp	r3, #128	; 0x80
 800a6a6:	d109      	bne.n	800a6bc <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c6:	2b40      	cmp	r3, #64	; 0x40
 800a6c8:	d110      	bne.n	800a6ec <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d4:	2b40      	cmp	r3, #64	; 0x40
 800a6d6:	d109      	bne.n	800a6ec <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	f003 0320 	and.w	r3, r3, #32
 800a6f6:	2b20      	cmp	r3, #32
 800a6f8:	d110      	bne.n	800a71c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f003 0320 	and.w	r3, r3, #32
 800a704:	2b20      	cmp	r3, #32
 800a706:	d109      	bne.n	800a71c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f06f 0220 	mvn.w	r2, #32
 800a710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d101      	bne.n	800a740 <HAL_TIM_ConfigClockSource+0x1c>
 800a73c:	2302      	movs	r3, #2
 800a73e:	e2f0      	b.n	800ad22 <HAL_TIM_ConfigClockSource+0x5fe>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2202      	movs	r2, #2
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a758:	d029      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b70      	cmp	r3, #112	; 0x70
 800a760:	d025      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a76a:	d020      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b40      	cmp	r3, #64	; 0x40
 800a772:	d01c      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b50      	cmp	r3, #80	; 0x50
 800a77a:	d018      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b60      	cmp	r3, #96	; 0x60
 800a782:	d014      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d010      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b10      	cmp	r3, #16
 800a792:	d00c      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d008      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b30      	cmp	r3, #48	; 0x30
 800a7a2:	d004      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x8a>
 800a7a4:	f241 41b7 	movw	r1, #5303	; 0x14b7
 800a7a8:	487c      	ldr	r0, [pc, #496]	; (800a99c <HAL_TIM_ConfigClockSource+0x278>)
 800a7aa:	f7f7 fd9c 	bl	80022e6 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a7bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7d6:	f000 80f1 	beq.w	800a9bc <HAL_TIM_ConfigClockSource+0x298>
 800a7da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7de:	f200 8293 	bhi.w	800ad08 <HAL_TIM_ConfigClockSource+0x5e4>
 800a7e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7e6:	d02d      	beq.n	800a844 <HAL_TIM_ConfigClockSource+0x120>
 800a7e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ec:	f200 828c 	bhi.w	800ad08 <HAL_TIM_ConfigClockSource+0x5e4>
 800a7f0:	2b70      	cmp	r3, #112	; 0x70
 800a7f2:	d05d      	beq.n	800a8b0 <HAL_TIM_ConfigClockSource+0x18c>
 800a7f4:	2b70      	cmp	r3, #112	; 0x70
 800a7f6:	f200 8287 	bhi.w	800ad08 <HAL_TIM_ConfigClockSource+0x5e4>
 800a7fa:	2b60      	cmp	r3, #96	; 0x60
 800a7fc:	f000 81a0 	beq.w	800ab40 <HAL_TIM_ConfigClockSource+0x41c>
 800a800:	2b60      	cmp	r3, #96	; 0x60
 800a802:	f200 8281 	bhi.w	800ad08 <HAL_TIM_ConfigClockSource+0x5e4>
 800a806:	2b50      	cmp	r3, #80	; 0x50
 800a808:	f000 8144 	beq.w	800aa94 <HAL_TIM_ConfigClockSource+0x370>
 800a80c:	2b50      	cmp	r3, #80	; 0x50
 800a80e:	f200 827b 	bhi.w	800ad08 <HAL_TIM_ConfigClockSource+0x5e4>
 800a812:	2b40      	cmp	r3, #64	; 0x40
 800a814:	f000 81f6 	beq.w	800ac04 <HAL_TIM_ConfigClockSource+0x4e0>
 800a818:	2b40      	cmp	r3, #64	; 0x40
 800a81a:	f200 8275 	bhi.w	800ad08 <HAL_TIM_ConfigClockSource+0x5e4>
 800a81e:	2b30      	cmp	r3, #48	; 0x30
 800a820:	f000 8246 	beq.w	800acb0 <HAL_TIM_ConfigClockSource+0x58c>
 800a824:	2b30      	cmp	r3, #48	; 0x30
 800a826:	f200 826f 	bhi.w	800ad08 <HAL_TIM_ConfigClockSource+0x5e4>
 800a82a:	2b20      	cmp	r3, #32
 800a82c:	f000 8240 	beq.w	800acb0 <HAL_TIM_ConfigClockSource+0x58c>
 800a830:	2b20      	cmp	r3, #32
 800a832:	f200 8269 	bhi.w	800ad08 <HAL_TIM_ConfigClockSource+0x5e4>
 800a836:	2b00      	cmp	r3, #0
 800a838:	f000 823a 	beq.w	800acb0 <HAL_TIM_ConfigClockSource+0x58c>
 800a83c:	2b10      	cmp	r3, #16
 800a83e:	f000 8237 	beq.w	800acb0 <HAL_TIM_ConfigClockSource+0x58c>
 800a842:	e261      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a55      	ldr	r2, [pc, #340]	; (800a9a0 <HAL_TIM_ConfigClockSource+0x27c>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	f000 825f 	beq.w	800ad0e <HAL_TIM_ConfigClockSource+0x5ea>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a858:	f000 8259 	beq.w	800ad0e <HAL_TIM_ConfigClockSource+0x5ea>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a50      	ldr	r2, [pc, #320]	; (800a9a4 <HAL_TIM_ConfigClockSource+0x280>)
 800a862:	4293      	cmp	r3, r2
 800a864:	f000 8253 	beq.w	800ad0e <HAL_TIM_ConfigClockSource+0x5ea>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a4e      	ldr	r2, [pc, #312]	; (800a9a8 <HAL_TIM_ConfigClockSource+0x284>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	f000 824d 	beq.w	800ad0e <HAL_TIM_ConfigClockSource+0x5ea>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a4c      	ldr	r2, [pc, #304]	; (800a9ac <HAL_TIM_ConfigClockSource+0x288>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	f000 8247 	beq.w	800ad0e <HAL_TIM_ConfigClockSource+0x5ea>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a4a      	ldr	r2, [pc, #296]	; (800a9b0 <HAL_TIM_ConfigClockSource+0x28c>)
 800a886:	4293      	cmp	r3, r2
 800a888:	f000 8241 	beq.w	800ad0e <HAL_TIM_ConfigClockSource+0x5ea>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a48      	ldr	r2, [pc, #288]	; (800a9b4 <HAL_TIM_ConfigClockSource+0x290>)
 800a892:	4293      	cmp	r3, r2
 800a894:	f000 823b 	beq.w	800ad0e <HAL_TIM_ConfigClockSource+0x5ea>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a46      	ldr	r2, [pc, #280]	; (800a9b8 <HAL_TIM_ConfigClockSource+0x294>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	f000 8235 	beq.w	800ad0e <HAL_TIM_ConfigClockSource+0x5ea>
 800a8a4:	f241 41c3 	movw	r1, #5315	; 0x14c3
 800a8a8:	483c      	ldr	r0, [pc, #240]	; (800a99c <HAL_TIM_ConfigClockSource+0x278>)
 800a8aa:	f7f7 fd1c 	bl	80022e6 <assert_failed>
      break;
 800a8ae:	e22e      	b.n	800ad0e <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a3a      	ldr	r2, [pc, #232]	; (800a9a0 <HAL_TIM_ConfigClockSource+0x27c>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d01d      	beq.n	800a8f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8c2:	d018      	beq.n	800a8f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a36      	ldr	r2, [pc, #216]	; (800a9a4 <HAL_TIM_ConfigClockSource+0x280>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d013      	beq.n	800a8f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a35      	ldr	r2, [pc, #212]	; (800a9a8 <HAL_TIM_ConfigClockSource+0x284>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d00e      	beq.n	800a8f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a33      	ldr	r2, [pc, #204]	; (800a9ac <HAL_TIM_ConfigClockSource+0x288>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d009      	beq.n	800a8f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a32      	ldr	r2, [pc, #200]	; (800a9b0 <HAL_TIM_ConfigClockSource+0x28c>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d004      	beq.n	800a8f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a8ec:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800a8f0:	482a      	ldr	r0, [pc, #168]	; (800a99c <HAL_TIM_ConfigClockSource+0x278>)
 800a8f2:	f7f7 fcf8 	bl	80022e6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d013      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x202>
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a906:	d00e      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x202>
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a910:	d009      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x202>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a91a:	d004      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x202>
 800a91c:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800a920:	481e      	ldr	r0, [pc, #120]	; (800a99c <HAL_TIM_ConfigClockSource+0x278>)
 800a922:	f7f7 fce0 	bl	80022e6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a92e:	d014      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x236>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d010      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x236>
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00c      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x236>
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	2b02      	cmp	r3, #2
 800a946:	d008      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x236>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	2b0a      	cmp	r3, #10
 800a94e:	d004      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x236>
 800a950:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800a954:	4811      	ldr	r0, [pc, #68]	; (800a99c <HAL_TIM_ConfigClockSource+0x278>)
 800a956:	f7f7 fcc6 	bl	80022e6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	2b0f      	cmp	r3, #15
 800a960:	d904      	bls.n	800a96c <HAL_TIM_ConfigClockSource+0x248>
 800a962:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800a966:	480d      	ldr	r0, [pc, #52]	; (800a99c <HAL_TIM_ConfigClockSource+0x278>)
 800a968:	f7f7 fcbd 	bl	80022e6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6818      	ldr	r0, [r3, #0]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	6899      	ldr	r1, [r3, #8]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	f000 fb36 	bl	800afec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a98e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	609a      	str	r2, [r3, #8]
      break;
 800a998:	e1ba      	b.n	800ad10 <HAL_TIM_ConfigClockSource+0x5ec>
 800a99a:	bf00      	nop
 800a99c:	0800fe78 	.word	0x0800fe78
 800a9a0:	40010000 	.word	0x40010000
 800a9a4:	40000400 	.word	0x40000400
 800a9a8:	40000800 	.word	0x40000800
 800a9ac:	40000c00 	.word	0x40000c00
 800a9b0:	40014000 	.word	0x40014000
 800a9b4:	40014400 	.word	0x40014400
 800a9b8:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a8a      	ldr	r2, [pc, #552]	; (800abec <HAL_TIM_ConfigClockSource+0x4c8>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d018      	beq.n	800a9f8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ce:	d013      	beq.n	800a9f8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a86      	ldr	r2, [pc, #536]	; (800abf0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d00e      	beq.n	800a9f8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a85      	ldr	r2, [pc, #532]	; (800abf4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d009      	beq.n	800a9f8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a83      	ldr	r2, [pc, #524]	; (800abf8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d004      	beq.n	800a9f8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a9ee:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800a9f2:	4882      	ldr	r0, [pc, #520]	; (800abfc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a9f4:	f7f7 fc77 	bl	80022e6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d013      	beq.n	800aa28 <HAL_TIM_ConfigClockSource+0x304>
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa08:	d00e      	beq.n	800aa28 <HAL_TIM_ConfigClockSource+0x304>
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa12:	d009      	beq.n	800aa28 <HAL_TIM_ConfigClockSource+0x304>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa1c:	d004      	beq.n	800aa28 <HAL_TIM_ConfigClockSource+0x304>
 800aa1e:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800aa22:	4876      	ldr	r0, [pc, #472]	; (800abfc <HAL_TIM_ConfigClockSource+0x4d8>)
 800aa24:	f7f7 fc5f 	bl	80022e6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa30:	d014      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x338>
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d010      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x338>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00c      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x338>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d008      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x338>
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2b0a      	cmp	r3, #10
 800aa50:	d004      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x338>
 800aa52:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800aa56:	4869      	ldr	r0, [pc, #420]	; (800abfc <HAL_TIM_ConfigClockSource+0x4d8>)
 800aa58:	f7f7 fc45 	bl	80022e6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	2b0f      	cmp	r3, #15
 800aa62:	d904      	bls.n	800aa6e <HAL_TIM_ConfigClockSource+0x34a>
 800aa64:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800aa68:	4864      	ldr	r0, [pc, #400]	; (800abfc <HAL_TIM_ConfigClockSource+0x4d8>)
 800aa6a:	f7f7 fc3c 	bl	80022e6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6818      	ldr	r0, [r3, #0]
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	6899      	ldr	r1, [r3, #8]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	685a      	ldr	r2, [r3, #4]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f000 fab5 	bl	800afec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	689a      	ldr	r2, [r3, #8]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa90:	609a      	str	r2, [r3, #8]
      break;
 800aa92:	e13d      	b.n	800ad10 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a54      	ldr	r2, [pc, #336]	; (800abec <HAL_TIM_ConfigClockSource+0x4c8>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d01d      	beq.n	800aada <HAL_TIM_ConfigClockSource+0x3b6>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaa6:	d018      	beq.n	800aada <HAL_TIM_ConfigClockSource+0x3b6>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a50      	ldr	r2, [pc, #320]	; (800abf0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d013      	beq.n	800aada <HAL_TIM_ConfigClockSource+0x3b6>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a4f      	ldr	r2, [pc, #316]	; (800abf4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d00e      	beq.n	800aada <HAL_TIM_ConfigClockSource+0x3b6>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a4d      	ldr	r2, [pc, #308]	; (800abf8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d009      	beq.n	800aada <HAL_TIM_ConfigClockSource+0x3b6>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a4d      	ldr	r2, [pc, #308]	; (800ac00 <HAL_TIM_ConfigClockSource+0x4dc>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d004      	beq.n	800aada <HAL_TIM_ConfigClockSource+0x3b6>
 800aad0:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800aad4:	4849      	ldr	r0, [pc, #292]	; (800abfc <HAL_TIM_ConfigClockSource+0x4d8>)
 800aad6:	f7f7 fc06 	bl	80022e6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aae2:	d014      	beq.n	800ab0e <HAL_TIM_ConfigClockSource+0x3ea>
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d010      	beq.n	800ab0e <HAL_TIM_ConfigClockSource+0x3ea>
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00c      	beq.n	800ab0e <HAL_TIM_ConfigClockSource+0x3ea>
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d008      	beq.n	800ab0e <HAL_TIM_ConfigClockSource+0x3ea>
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	2b0a      	cmp	r3, #10
 800ab02:	d004      	beq.n	800ab0e <HAL_TIM_ConfigClockSource+0x3ea>
 800ab04:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800ab08:	483c      	ldr	r0, [pc, #240]	; (800abfc <HAL_TIM_ConfigClockSource+0x4d8>)
 800ab0a:	f7f7 fbec 	bl	80022e6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	2b0f      	cmp	r3, #15
 800ab14:	d904      	bls.n	800ab20 <HAL_TIM_ConfigClockSource+0x3fc>
 800ab16:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800ab1a:	4838      	ldr	r0, [pc, #224]	; (800abfc <HAL_TIM_ConfigClockSource+0x4d8>)
 800ab1c:	f7f7 fbe3 	bl	80022e6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6818      	ldr	r0, [r3, #0]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	6859      	ldr	r1, [r3, #4]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	f000 f9e3 	bl	800aef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2150      	movs	r1, #80	; 0x50
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 fa3c 	bl	800afb6 <TIM_ITRx_SetConfig>
      break;
 800ab3e:	e0e7      	b.n	800ad10 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a29      	ldr	r2, [pc, #164]	; (800abec <HAL_TIM_ConfigClockSource+0x4c8>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d01d      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x462>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab52:	d018      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x462>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a25      	ldr	r2, [pc, #148]	; (800abf0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d013      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x462>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a24      	ldr	r2, [pc, #144]	; (800abf4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d00e      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x462>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a22      	ldr	r2, [pc, #136]	; (800abf8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d009      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x462>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a22      	ldr	r2, [pc, #136]	; (800ac00 <HAL_TIM_ConfigClockSource+0x4dc>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d004      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x462>
 800ab7c:	f241 5106 	movw	r1, #5382	; 0x1506
 800ab80:	481e      	ldr	r0, [pc, #120]	; (800abfc <HAL_TIM_ConfigClockSource+0x4d8>)
 800ab82:	f7f7 fbb0 	bl	80022e6 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab8e:	d014      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x496>
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d010      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x496>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00c      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x496>
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d008      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x496>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	2b0a      	cmp	r3, #10
 800abae:	d004      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x496>
 800abb0:	f241 5109 	movw	r1, #5385	; 0x1509
 800abb4:	4811      	ldr	r0, [pc, #68]	; (800abfc <HAL_TIM_ConfigClockSource+0x4d8>)
 800abb6:	f7f7 fb96 	bl	80022e6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	2b0f      	cmp	r3, #15
 800abc0:	d904      	bls.n	800abcc <HAL_TIM_ConfigClockSource+0x4a8>
 800abc2:	f241 510a 	movw	r1, #5386	; 0x150a
 800abc6:	480d      	ldr	r0, [pc, #52]	; (800abfc <HAL_TIM_ConfigClockSource+0x4d8>)
 800abc8:	f7f7 fb8d 	bl	80022e6 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	6859      	ldr	r1, [r3, #4]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	461a      	mov	r2, r3
 800abda:	f000 f9bc 	bl	800af56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2160      	movs	r1, #96	; 0x60
 800abe4:	4618      	mov	r0, r3
 800abe6:	f000 f9e6 	bl	800afb6 <TIM_ITRx_SetConfig>
      break;
 800abea:	e091      	b.n	800ad10 <HAL_TIM_ConfigClockSource+0x5ec>
 800abec:	40010000 	.word	0x40010000
 800abf0:	40000400 	.word	0x40000400
 800abf4:	40000800 	.word	0x40000800
 800abf8:	40000c00 	.word	0x40000c00
 800abfc:	0800fe78 	.word	0x0800fe78
 800ac00:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a48      	ldr	r2, [pc, #288]	; (800ad2c <HAL_TIM_ConfigClockSource+0x608>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d01d      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x526>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac16:	d018      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x526>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a44      	ldr	r2, [pc, #272]	; (800ad30 <HAL_TIM_ConfigClockSource+0x60c>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d013      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x526>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a43      	ldr	r2, [pc, #268]	; (800ad34 <HAL_TIM_ConfigClockSource+0x610>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d00e      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x526>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a41      	ldr	r2, [pc, #260]	; (800ad38 <HAL_TIM_ConfigClockSource+0x614>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d009      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x526>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a40      	ldr	r2, [pc, #256]	; (800ad3c <HAL_TIM_ConfigClockSource+0x618>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d004      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x526>
 800ac40:	f241 5116 	movw	r1, #5398	; 0x1516
 800ac44:	483e      	ldr	r0, [pc, #248]	; (800ad40 <HAL_TIM_ConfigClockSource+0x61c>)
 800ac46:	f7f7 fb4e 	bl	80022e6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac52:	d014      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0x55a>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d010      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0x55a>
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00c      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0x55a>
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d008      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0x55a>
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	2b0a      	cmp	r3, #10
 800ac72:	d004      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0x55a>
 800ac74:	f241 5119 	movw	r1, #5401	; 0x1519
 800ac78:	4831      	ldr	r0, [pc, #196]	; (800ad40 <HAL_TIM_ConfigClockSource+0x61c>)
 800ac7a:	f7f7 fb34 	bl	80022e6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	2b0f      	cmp	r3, #15
 800ac84:	d904      	bls.n	800ac90 <HAL_TIM_ConfigClockSource+0x56c>
 800ac86:	f241 511a 	movw	r1, #5402	; 0x151a
 800ac8a:	482d      	ldr	r0, [pc, #180]	; (800ad40 <HAL_TIM_ConfigClockSource+0x61c>)
 800ac8c:	f7f7 fb2b 	bl	80022e6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6818      	ldr	r0, [r3, #0]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	6859      	ldr	r1, [r3, #4]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f000 f92b 	bl	800aef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2140      	movs	r1, #64	; 0x40
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 f984 	bl	800afb6 <TIM_ITRx_SetConfig>
      break;
 800acae:	e02f      	b.n	800ad10 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a1d      	ldr	r2, [pc, #116]	; (800ad2c <HAL_TIM_ConfigClockSource+0x608>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d01d      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x5d2>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc2:	d018      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x5d2>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a19      	ldr	r2, [pc, #100]	; (800ad30 <HAL_TIM_ConfigClockSource+0x60c>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d013      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x5d2>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a18      	ldr	r2, [pc, #96]	; (800ad34 <HAL_TIM_ConfigClockSource+0x610>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d00e      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x5d2>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a16      	ldr	r2, [pc, #88]	; (800ad38 <HAL_TIM_ConfigClockSource+0x614>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d009      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x5d2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a15      	ldr	r2, [pc, #84]	; (800ad3c <HAL_TIM_ConfigClockSource+0x618>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d004      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x5d2>
 800acec:	f241 5129 	movw	r1, #5417	; 0x1529
 800acf0:	4813      	ldr	r0, [pc, #76]	; (800ad40 <HAL_TIM_ConfigClockSource+0x61c>)
 800acf2:	f7f7 faf8 	bl	80022e6 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4619      	mov	r1, r3
 800ad00:	4610      	mov	r0, r2
 800ad02:	f000 f958 	bl	800afb6 <TIM_ITRx_SetConfig>
      break;
 800ad06:	e003      	b.n	800ad10 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad0c:	e000      	b.n	800ad10 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800ad0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	40010000 	.word	0x40010000
 800ad30:	40000400 	.word	0x40000400
 800ad34:	40000800 	.word	0x40000800
 800ad38:	40000c00 	.word	0x40000c00
 800ad3c:	40014000 	.word	0x40014000
 800ad40:	0800fe78 	.word	0x0800fe78

0800ad44 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a34      	ldr	r2, [pc, #208]	; (800aedc <TIM_Base_SetConfig+0xe4>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d00f      	beq.n	800ae30 <TIM_Base_SetConfig+0x38>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae16:	d00b      	beq.n	800ae30 <TIM_Base_SetConfig+0x38>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a31      	ldr	r2, [pc, #196]	; (800aee0 <TIM_Base_SetConfig+0xe8>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d007      	beq.n	800ae30 <TIM_Base_SetConfig+0x38>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a30      	ldr	r2, [pc, #192]	; (800aee4 <TIM_Base_SetConfig+0xec>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d003      	beq.n	800ae30 <TIM_Base_SetConfig+0x38>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a2f      	ldr	r2, [pc, #188]	; (800aee8 <TIM_Base_SetConfig+0xf0>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d108      	bne.n	800ae42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a25      	ldr	r2, [pc, #148]	; (800aedc <TIM_Base_SetConfig+0xe4>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d01b      	beq.n	800ae82 <TIM_Base_SetConfig+0x8a>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae50:	d017      	beq.n	800ae82 <TIM_Base_SetConfig+0x8a>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a22      	ldr	r2, [pc, #136]	; (800aee0 <TIM_Base_SetConfig+0xe8>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d013      	beq.n	800ae82 <TIM_Base_SetConfig+0x8a>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a21      	ldr	r2, [pc, #132]	; (800aee4 <TIM_Base_SetConfig+0xec>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d00f      	beq.n	800ae82 <TIM_Base_SetConfig+0x8a>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a20      	ldr	r2, [pc, #128]	; (800aee8 <TIM_Base_SetConfig+0xf0>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d00b      	beq.n	800ae82 <TIM_Base_SetConfig+0x8a>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a1f      	ldr	r2, [pc, #124]	; (800aeec <TIM_Base_SetConfig+0xf4>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d007      	beq.n	800ae82 <TIM_Base_SetConfig+0x8a>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a1e      	ldr	r2, [pc, #120]	; (800aef0 <TIM_Base_SetConfig+0xf8>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d003      	beq.n	800ae82 <TIM_Base_SetConfig+0x8a>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a1d      	ldr	r2, [pc, #116]	; (800aef4 <TIM_Base_SetConfig+0xfc>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d108      	bne.n	800ae94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	689a      	ldr	r2, [r3, #8]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a08      	ldr	r2, [pc, #32]	; (800aedc <TIM_Base_SetConfig+0xe4>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d103      	bne.n	800aec8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	691a      	ldr	r2, [r3, #16]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	615a      	str	r2, [r3, #20]
}
 800aece:	bf00      	nop
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	40010000 	.word	0x40010000
 800aee0:	40000400 	.word	0x40000400
 800aee4:	40000800 	.word	0x40000800
 800aee8:	40000c00 	.word	0x40000c00
 800aeec:	40014000 	.word	0x40014000
 800aef0:	40014400 	.word	0x40014400
 800aef4:	40014800 	.word	0x40014800

0800aef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6a1b      	ldr	r3, [r3, #32]
 800af08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	f023 0201 	bic.w	r2, r3, #1
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	011b      	lsls	r3, r3, #4
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f023 030a 	bic.w	r3, r3, #10
 800af34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	621a      	str	r2, [r3, #32]
}
 800af4a:	bf00      	nop
 800af4c:	371c      	adds	r7, #28
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr

0800af56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af56:	b480      	push	{r7}
 800af58:	b087      	sub	sp, #28
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	f023 0210 	bic.w	r2, r3, #16
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6a1b      	ldr	r3, [r3, #32]
 800af78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	031b      	lsls	r3, r3, #12
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	4313      	orrs	r3, r2
 800af8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	011b      	lsls	r3, r3, #4
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	697a      	ldr	r2, [r7, #20]
 800afa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	621a      	str	r2, [r3, #32]
}
 800afaa:	bf00      	nop
 800afac:	371c      	adds	r7, #28
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b085      	sub	sp, #20
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	f043 0307 	orr.w	r3, r3, #7
 800afd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	609a      	str	r2, [r3, #8]
}
 800afe0:	bf00      	nop
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	021a      	lsls	r2, r3, #8
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	431a      	orrs	r2, r3
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	4313      	orrs	r3, r2
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	4313      	orrs	r3, r2
 800b018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	609a      	str	r2, [r3, #8]
}
 800b020:	bf00      	nop
 800b022:	371c      	adds	r7, #28
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a1c      	ldr	r2, [pc, #112]	; (800b0a8 <TIM_ResetCallback+0x7c>)
 800b038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a1b      	ldr	r2, [pc, #108]	; (800b0ac <TIM_ResetCallback+0x80>)
 800b040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a1a      	ldr	r2, [pc, #104]	; (800b0b0 <TIM_ResetCallback+0x84>)
 800b048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a19      	ldr	r2, [pc, #100]	; (800b0b4 <TIM_ResetCallback+0x88>)
 800b050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <TIM_ResetCallback+0x8c>)
 800b058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a17      	ldr	r2, [pc, #92]	; (800b0bc <TIM_ResetCallback+0x90>)
 800b060:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a16      	ldr	r2, [pc, #88]	; (800b0c0 <TIM_ResetCallback+0x94>)
 800b068:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a15      	ldr	r2, [pc, #84]	; (800b0c4 <TIM_ResetCallback+0x98>)
 800b070:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a14      	ldr	r2, [pc, #80]	; (800b0c8 <TIM_ResetCallback+0x9c>)
 800b078:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a13      	ldr	r2, [pc, #76]	; (800b0cc <TIM_ResetCallback+0xa0>)
 800b080:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a12      	ldr	r2, [pc, #72]	; (800b0d0 <TIM_ResetCallback+0xa4>)
 800b088:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a11      	ldr	r2, [pc, #68]	; (800b0d4 <TIM_ResetCallback+0xa8>)
 800b090:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a10      	ldr	r2, [pc, #64]	; (800b0d8 <TIM_ResetCallback+0xac>)
 800b098:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	08002261 	.word	0x08002261
 800b0ac:	0800ad45 	.word	0x0800ad45
 800b0b0:	0800adbd 	.word	0x0800adbd
 800b0b4:	0800add1 	.word	0x0800add1
 800b0b8:	0800ad6d 	.word	0x0800ad6d
 800b0bc:	0800ad81 	.word	0x0800ad81
 800b0c0:	0800ad59 	.word	0x0800ad59
 800b0c4:	0800ad95 	.word	0x0800ad95
 800b0c8:	0800ada9 	.word	0x0800ada9
 800b0cc:	0800ade5 	.word	0x0800ade5
 800b0d0:	0800b259 	.word	0x0800b259
 800b0d4:	0800b26d 	.word	0x0800b26d
 800b0d8:	0800b281 	.word	0x0800b281

0800b0dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a55      	ldr	r2, [pc, #340]	; (800b240 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d018      	beq.n	800b122 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0f8:	d013      	beq.n	800b122 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a51      	ldr	r2, [pc, #324]	; (800b244 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d00e      	beq.n	800b122 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a4f      	ldr	r2, [pc, #316]	; (800b248 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d009      	beq.n	800b122 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a4e      	ldr	r2, [pc, #312]	; (800b24c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d004      	beq.n	800b122 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800b118:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800b11c:	484c      	ldr	r0, [pc, #304]	; (800b250 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b11e:	f7f7 f8e2 	bl	80022e6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d020      	beq.n	800b16c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b10      	cmp	r3, #16
 800b130:	d01c      	beq.n	800b16c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b20      	cmp	r3, #32
 800b138:	d018      	beq.n	800b16c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b30      	cmp	r3, #48	; 0x30
 800b140:	d014      	beq.n	800b16c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b40      	cmp	r3, #64	; 0x40
 800b148:	d010      	beq.n	800b16c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b50      	cmp	r3, #80	; 0x50
 800b150:	d00c      	beq.n	800b16c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b60      	cmp	r3, #96	; 0x60
 800b158:	d008      	beq.n	800b16c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b70      	cmp	r3, #112	; 0x70
 800b160:	d004      	beq.n	800b16c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b162:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800b166:	483a      	ldr	r0, [pc, #232]	; (800b250 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b168:	f7f7 f8bd 	bl	80022e6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	2b80      	cmp	r3, #128	; 0x80
 800b172:	d008      	beq.n	800b186 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d004      	beq.n	800b186 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800b17c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800b180:	4833      	ldr	r0, [pc, #204]	; (800b250 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b182:	f7f7 f8b0 	bl	80022e6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d101      	bne.n	800b194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b190:	2302      	movs	r3, #2
 800b192:	e050      	b.n	800b236 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a1b      	ldr	r2, [pc, #108]	; (800b240 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d018      	beq.n	800b20a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1e0:	d013      	beq.n	800b20a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a17      	ldr	r2, [pc, #92]	; (800b244 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d00e      	beq.n	800b20a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a15      	ldr	r2, [pc, #84]	; (800b248 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d009      	beq.n	800b20a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a14      	ldr	r2, [pc, #80]	; (800b24c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d004      	beq.n	800b20a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a13      	ldr	r2, [pc, #76]	; (800b254 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d10c      	bne.n	800b224 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	4313      	orrs	r3, r2
 800b21a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	40010000 	.word	0x40010000
 800b244:	40000400 	.word	0x40000400
 800b248:	40000800 	.word	0x40000800
 800b24c:	40000c00 	.word	0x40000c00
 800b250:	0800feec 	.word	0x0800feec
 800b254:	40014000 	.word	0x40014000

0800b258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e0ab      	b.n	800b3fe <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d02c      	beq.n	800b308 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a55      	ldr	r2, [pc, #340]	; (800b408 <HAL_UART_Init+0x174>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d00e      	beq.n	800b2d6 <HAL_UART_Init+0x42>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a53      	ldr	r2, [pc, #332]	; (800b40c <HAL_UART_Init+0x178>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d009      	beq.n	800b2d6 <HAL_UART_Init+0x42>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a52      	ldr	r2, [pc, #328]	; (800b410 <HAL_UART_Init+0x17c>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d004      	beq.n	800b2d6 <HAL_UART_Init+0x42>
 800b2cc:	f240 1173 	movw	r1, #371	; 0x173
 800b2d0:	4850      	ldr	r0, [pc, #320]	; (800b414 <HAL_UART_Init+0x180>)
 800b2d2:	f7f7 f808 	bl	80022e6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d028      	beq.n	800b330 <HAL_UART_Init+0x9c>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2e6:	d023      	beq.n	800b330 <HAL_UART_Init+0x9c>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2f0:	d01e      	beq.n	800b330 <HAL_UART_Init+0x9c>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2fa:	d019      	beq.n	800b330 <HAL_UART_Init+0x9c>
 800b2fc:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800b300:	4844      	ldr	r0, [pc, #272]	; (800b414 <HAL_UART_Init+0x180>)
 800b302:	f7f6 fff0 	bl	80022e6 <assert_failed>
 800b306:	e013      	b.n	800b330 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a3e      	ldr	r2, [pc, #248]	; (800b408 <HAL_UART_Init+0x174>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d00e      	beq.n	800b330 <HAL_UART_Init+0x9c>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a3d      	ldr	r2, [pc, #244]	; (800b40c <HAL_UART_Init+0x178>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d009      	beq.n	800b330 <HAL_UART_Init+0x9c>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a3b      	ldr	r2, [pc, #236]	; (800b410 <HAL_UART_Init+0x17c>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d004      	beq.n	800b330 <HAL_UART_Init+0x9c>
 800b326:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800b32a:	483a      	ldr	r0, [pc, #232]	; (800b414 <HAL_UART_Init+0x180>)
 800b32c:	f7f6 ffdb 	bl	80022e6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d009      	beq.n	800b34c <HAL_UART_Init+0xb8>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b340:	d004      	beq.n	800b34c <HAL_UART_Init+0xb8>
 800b342:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800b346:	4833      	ldr	r0, [pc, #204]	; (800b414 <HAL_UART_Init+0x180>)
 800b348:	f7f6 ffcd 	bl	80022e6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	69db      	ldr	r3, [r3, #28]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d009      	beq.n	800b368 <HAL_UART_Init+0xd4>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b35c:	d004      	beq.n	800b368 <HAL_UART_Init+0xd4>
 800b35e:	f240 117b 	movw	r1, #379	; 0x17b
 800b362:	482c      	ldr	r0, [pc, #176]	; (800b414 <HAL_UART_Init+0x180>)
 800b364:	f7f6 ffbf 	bl	80022e6 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d111      	bne.n	800b398 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fb61 	bl	800ba44 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d102      	bne.n	800b390 <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a22      	ldr	r2, [pc, #136]	; (800b418 <HAL_UART_Init+0x184>)
 800b38e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2224      	movs	r2, #36	; 0x24
 800b39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68da      	ldr	r2, [r3, #12]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fd5b 	bl	800be6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	691a      	ldr	r2, [r3, #16]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	695a      	ldr	r2, [r3, #20]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68da      	ldr	r2, [r3, #12]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b3e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2220      	movs	r2, #32
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	40011000 	.word	0x40011000
 800b40c:	40004400 	.word	0x40004400
 800b410:	40011400 	.word	0x40011400
 800b414:	0800ff64 	.word	0x0800ff64
 800b418:	08002ee9 	.word	0x08002ee9

0800b41c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b20      	cmp	r3, #32
 800b434:	d11d      	bne.n	800b472 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <HAL_UART_Receive_IT+0x26>
 800b43c:	88fb      	ldrh	r3, [r7, #6]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d101      	bne.n	800b446 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e016      	b.n	800b474 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d101      	bne.n	800b454 <HAL_UART_Receive_IT+0x38>
 800b450:	2302      	movs	r3, #2
 800b452:	e00f      	b.n	800b474 <HAL_UART_Receive_IT+0x58>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b462:	88fb      	ldrh	r3, [r7, #6]
 800b464:	461a      	mov	r2, r3
 800b466:	68b9      	ldr	r1, [r7, #8]
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 fb23 	bl	800bab4 <UART_Start_Receive_IT>
 800b46e:	4603      	mov	r3, r0
 800b470:	e000      	b.n	800b474 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b472:	2302      	movs	r3, #2
  }
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b0ba      	sub	sp, #232	; 0xe8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	695b      	ldr	r3, [r3, #20]
 800b49e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b2:	f003 030f 	and.w	r3, r3, #15
 800b4b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b4ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10f      	bne.n	800b4e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4c6:	f003 0320 	and.w	r3, r3, #32
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d009      	beq.n	800b4e2 <HAL_UART_IRQHandler+0x66>
 800b4ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4d2:	f003 0320 	and.w	r3, r3, #32
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 fc09 	bl	800bcf2 <UART_Receive_IT>
      return;
 800b4e0:	e25b      	b.n	800b99a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b4e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f000 80e1 	beq.w	800b6ae <HAL_UART_IRQHandler+0x232>
 800b4ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4f0:	f003 0301 	and.w	r3, r3, #1
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d106      	bne.n	800b506 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 80d4 	beq.w	800b6ae <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00b      	beq.n	800b52a <HAL_UART_IRQHandler+0xae>
 800b512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d005      	beq.n	800b52a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b522:	f043 0201 	orr.w	r2, r3, #1
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b52a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b52e:	f003 0304 	and.w	r3, r3, #4
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00b      	beq.n	800b54e <HAL_UART_IRQHandler+0xd2>
 800b536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d005      	beq.n	800b54e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b546:	f043 0202 	orr.w	r2, r3, #2
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00b      	beq.n	800b572 <HAL_UART_IRQHandler+0xf6>
 800b55a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	2b00      	cmp	r3, #0
 800b564:	d005      	beq.n	800b572 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	f043 0204 	orr.w	r2, r3, #4
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b576:	f003 0308 	and.w	r3, r3, #8
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d011      	beq.n	800b5a2 <HAL_UART_IRQHandler+0x126>
 800b57e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b582:	f003 0320 	and.w	r3, r3, #32
 800b586:	2b00      	cmp	r3, #0
 800b588:	d105      	bne.n	800b596 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b58a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	2b00      	cmp	r3, #0
 800b594:	d005      	beq.n	800b5a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59a:	f043 0208 	orr.w	r2, r3, #8
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 81f2 	beq.w	800b990 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5b0:	f003 0320 	and.w	r3, r3, #32
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d008      	beq.n	800b5ca <HAL_UART_IRQHandler+0x14e>
 800b5b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5bc:	f003 0320 	and.w	r3, r3, #32
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fb94 	bl	800bcf2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	695b      	ldr	r3, [r3, #20]
 800b5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d4:	2b40      	cmp	r3, #64	; 0x40
 800b5d6:	bf0c      	ite	eq
 800b5d8:	2301      	moveq	r3, #1
 800b5da:	2300      	movne	r3, #0
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e6:	f003 0308 	and.w	r3, r3, #8
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d103      	bne.n	800b5f6 <HAL_UART_IRQHandler+0x17a>
 800b5ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d051      	beq.n	800b69a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fa9a 	bl	800bb30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	695b      	ldr	r3, [r3, #20]
 800b602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b606:	2b40      	cmp	r3, #64	; 0x40
 800b608:	d142      	bne.n	800b690 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3314      	adds	r3, #20
 800b610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b614:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b618:	e853 3f00 	ldrex	r3, [r3]
 800b61c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3314      	adds	r3, #20
 800b632:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b636:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b63a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b642:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b646:	e841 2300 	strex	r3, r2, [r1]
 800b64a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b64e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1d9      	bne.n	800b60a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d013      	beq.n	800b686 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b662:	4a7f      	ldr	r2, [pc, #508]	; (800b860 <HAL_UART_IRQHandler+0x3e4>)
 800b664:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7f9 f8d2 	bl	8004814 <HAL_DMA_Abort_IT>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d019      	beq.n	800b6aa <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b680:	4610      	mov	r0, r2
 800b682:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b684:	e011      	b.n	800b6aa <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b68e:	e00c      	b.n	800b6aa <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b698:	e007      	b.n	800b6aa <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b6a8:	e172      	b.n	800b990 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6aa:	bf00      	nop
    return;
 800b6ac:	e170      	b.n	800b990 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	f040 814c 	bne.w	800b950 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b6b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6bc:	f003 0310 	and.w	r3, r3, #16
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 8145 	beq.w	800b950 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b6c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ca:	f003 0310 	and.w	r3, r3, #16
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f000 813e 	beq.w	800b950 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	60bb      	str	r3, [r7, #8]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	60bb      	str	r3, [r7, #8]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	60bb      	str	r3, [r7, #8]
 800b6e8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	695b      	ldr	r3, [r3, #20]
 800b6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f4:	2b40      	cmp	r3, #64	; 0x40
 800b6f6:	f040 80b5 	bne.w	800b864 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b706:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	f000 8142 	beq.w	800b994 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b714:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b718:	429a      	cmp	r2, r3
 800b71a:	f080 813b 	bcs.w	800b994 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b724:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72a:	69db      	ldr	r3, [r3, #28]
 800b72c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b730:	f000 8088 	beq.w	800b844 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	330c      	adds	r3, #12
 800b73a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b742:	e853 3f00 	ldrex	r3, [r3]
 800b746:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b74a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b74e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b752:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	330c      	adds	r3, #12
 800b75c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b760:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b768:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b76c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b770:	e841 2300 	strex	r3, r2, [r1]
 800b774:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1d9      	bne.n	800b734 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	3314      	adds	r3, #20
 800b786:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b78a:	e853 3f00 	ldrex	r3, [r3]
 800b78e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b792:	f023 0301 	bic.w	r3, r3, #1
 800b796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3314      	adds	r3, #20
 800b7a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b7a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b7a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b7ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b7b0:	e841 2300 	strex	r3, r2, [r1]
 800b7b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b7b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1e1      	bne.n	800b780 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3314      	adds	r3, #20
 800b7c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7c6:	e853 3f00 	ldrex	r3, [r3]
 800b7ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b7cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3314      	adds	r3, #20
 800b7dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b7e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b7e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b7e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7e8:	e841 2300 	strex	r3, r2, [r1]
 800b7ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b7ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e3      	bne.n	800b7bc <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	330c      	adds	r3, #12
 800b808:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b80c:	e853 3f00 	ldrex	r3, [r3]
 800b810:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b814:	f023 0310 	bic.w	r3, r3, #16
 800b818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	330c      	adds	r3, #12
 800b822:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b826:	65ba      	str	r2, [r7, #88]	; 0x58
 800b828:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b82c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b82e:	e841 2300 	strex	r3, r2, [r1]
 800b832:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1e3      	bne.n	800b802 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83e:	4618      	mov	r0, r3
 800b840:	f7f8 ff78 	bl	8004734 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b850:	b292      	uxth	r2, r2
 800b852:	1a8a      	subs	r2, r1, r2
 800b854:	b292      	uxth	r2, r2
 800b856:	4611      	mov	r1, r2
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b85c:	e09a      	b.n	800b994 <HAL_UART_IRQHandler+0x518>
 800b85e:	bf00      	nop
 800b860:	0800bbf7 	.word	0x0800bbf7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	1ad3      	subs	r3, r2, r3
 800b870:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b878:	b29b      	uxth	r3, r3
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 808c 	beq.w	800b998 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b880:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b884:	2b00      	cmp	r3, #0
 800b886:	f000 8087 	beq.w	800b998 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	330c      	adds	r3, #12
 800b890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	e853 3f00 	ldrex	r3, [r3]
 800b898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b8a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	330c      	adds	r3, #12
 800b8aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b8ae:	647a      	str	r2, [r7, #68]	; 0x44
 800b8b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8b6:	e841 2300 	strex	r3, r2, [r1]
 800b8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e3      	bne.n	800b88a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3314      	adds	r3, #20
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	e853 3f00 	ldrex	r3, [r3]
 800b8d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	f023 0301 	bic.w	r3, r3, #1
 800b8d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3314      	adds	r3, #20
 800b8e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b8e6:	633a      	str	r2, [r7, #48]	; 0x30
 800b8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ee:	e841 2300 	strex	r3, r2, [r1]
 800b8f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e3      	bne.n	800b8c2 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2220      	movs	r2, #32
 800b8fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	330c      	adds	r3, #12
 800b90e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	e853 3f00 	ldrex	r3, [r3]
 800b916:	60fb      	str	r3, [r7, #12]
   return(result);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f023 0310 	bic.w	r3, r3, #16
 800b91e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	330c      	adds	r3, #12
 800b928:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b92c:	61fa      	str	r2, [r7, #28]
 800b92e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	69b9      	ldr	r1, [r7, #24]
 800b932:	69fa      	ldr	r2, [r7, #28]
 800b934:	e841 2300 	strex	r3, r2, [r1]
 800b938:	617b      	str	r3, [r7, #20]
   return(result);
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e3      	bne.n	800b908 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b944:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b948:	4611      	mov	r1, r2
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b94e:	e023      	b.n	800b998 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d009      	beq.n	800b970 <HAL_UART_IRQHandler+0x4f4>
 800b95c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b964:	2b00      	cmp	r3, #0
 800b966:	d003      	beq.n	800b970 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f959 	bl	800bc20 <UART_Transmit_IT>
    return;
 800b96e:	e014      	b.n	800b99a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00e      	beq.n	800b99a <HAL_UART_IRQHandler+0x51e>
 800b97c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b984:	2b00      	cmp	r3, #0
 800b986:	d008      	beq.n	800b99a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f999 	bl	800bcc0 <UART_EndTransmit_IT>
    return;
 800b98e:	e004      	b.n	800b99a <HAL_UART_IRQHandler+0x51e>
    return;
 800b990:	bf00      	nop
 800b992:	e002      	b.n	800b99a <HAL_UART_IRQHandler+0x51e>
      return;
 800b994:	bf00      	nop
 800b996:	e000      	b.n	800b99a <HAL_UART_IRQHandler+0x51e>
      return;
 800b998:	bf00      	nop
  }
}
 800b99a:	37e8      	adds	r7, #232	; 0xe8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	460b      	mov	r3, r1
 800ba36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a10      	ldr	r2, [pc, #64]	; (800ba90 <UART_InitCallbacksToDefault+0x4c>)
 800ba50:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a0f      	ldr	r2, [pc, #60]	; (800ba94 <UART_InitCallbacksToDefault+0x50>)
 800ba56:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a0f      	ldr	r2, [pc, #60]	; (800ba98 <UART_InitCallbacksToDefault+0x54>)
 800ba5c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a0e      	ldr	r2, [pc, #56]	; (800ba9c <UART_InitCallbacksToDefault+0x58>)
 800ba62:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a0e      	ldr	r2, [pc, #56]	; (800baa0 <UART_InitCallbacksToDefault+0x5c>)
 800ba68:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a0d      	ldr	r2, [pc, #52]	; (800baa4 <UART_InitCallbacksToDefault+0x60>)
 800ba6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a0d      	ldr	r2, [pc, #52]	; (800baa8 <UART_InitCallbacksToDefault+0x64>)
 800ba74:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a0c      	ldr	r2, [pc, #48]	; (800baac <UART_InitCallbacksToDefault+0x68>)
 800ba7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a0c      	ldr	r2, [pc, #48]	; (800bab0 <UART_InitCallbacksToDefault+0x6c>)
 800ba80:	669a      	str	r2, [r3, #104]	; 0x68

}
 800ba82:	bf00      	nop
 800ba84:	370c      	adds	r7, #12
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	0800b9b5 	.word	0x0800b9b5
 800ba94:	0800b9a1 	.word	0x0800b9a1
 800ba98:	0800b9c9 	.word	0x0800b9c9
 800ba9c:	08002f89 	.word	0x08002f89
 800baa0:	0800b9dd 	.word	0x0800b9dd
 800baa4:	0800b9f1 	.word	0x0800b9f1
 800baa8:	0800ba05 	.word	0x0800ba05
 800baac:	0800ba19 	.word	0x0800ba19
 800bab0:	0800ba2d 	.word	0x0800ba2d

0800bab4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	4613      	mov	r3, r2
 800bac0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	88fa      	ldrh	r2, [r7, #6]
 800bacc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	88fa      	ldrh	r2, [r7, #6]
 800bad2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2222      	movs	r2, #34	; 0x22
 800bade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d007      	beq.n	800bb02 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68da      	ldr	r2, [r3, #12]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	695a      	ldr	r2, [r3, #20]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f042 0201 	orr.w	r2, r2, #1
 800bb10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	68da      	ldr	r2, [r3, #12]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f042 0220 	orr.w	r2, r2, #32
 800bb20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b095      	sub	sp, #84	; 0x54
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	330c      	adds	r3, #12
 800bb3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb42:	e853 3f00 	ldrex	r3, [r3]
 800bb46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	330c      	adds	r3, #12
 800bb56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb58:	643a      	str	r2, [r7, #64]	; 0x40
 800bb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb60:	e841 2300 	strex	r3, r2, [r1]
 800bb64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1e5      	bne.n	800bb38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3314      	adds	r3, #20
 800bb72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb74:	6a3b      	ldr	r3, [r7, #32]
 800bb76:	e853 3f00 	ldrex	r3, [r3]
 800bb7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	f023 0301 	bic.w	r3, r3, #1
 800bb82:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3314      	adds	r3, #20
 800bb8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb94:	e841 2300 	strex	r3, r2, [r1]
 800bb98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1e5      	bne.n	800bb6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d119      	bne.n	800bbdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	330c      	adds	r3, #12
 800bbae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	e853 3f00 	ldrex	r3, [r3]
 800bbb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	f023 0310 	bic.w	r3, r3, #16
 800bbbe:	647b      	str	r3, [r7, #68]	; 0x44
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	330c      	adds	r3, #12
 800bbc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbc8:	61ba      	str	r2, [r7, #24]
 800bbca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbcc:	6979      	ldr	r1, [r7, #20]
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	e841 2300 	strex	r3, r2, [r1]
 800bbd4:	613b      	str	r3, [r7, #16]
   return(result);
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1e5      	bne.n	800bba8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2220      	movs	r2, #32
 800bbe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bbea:	bf00      	nop
 800bbec:	3754      	adds	r7, #84	; 0x54
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc18:	bf00      	nop
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2b21      	cmp	r3, #33	; 0x21
 800bc32:	d13e      	bne.n	800bcb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc3c:	d114      	bne.n	800bc68 <UART_Transmit_IT+0x48>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d110      	bne.n	800bc68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a1b      	ldr	r3, [r3, #32]
 800bc60:	1c9a      	adds	r2, r3, #2
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	621a      	str	r2, [r3, #32]
 800bc66:	e008      	b.n	800bc7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a1b      	ldr	r3, [r3, #32]
 800bc6c:	1c59      	adds	r1, r3, #1
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	6211      	str	r1, [r2, #32]
 800bc72:	781a      	ldrb	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	3b01      	subs	r3, #1
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	4619      	mov	r1, r3
 800bc88:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10f      	bne.n	800bcae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68da      	ldr	r2, [r3, #12]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68da      	ldr	r2, [r3, #12]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e000      	b.n	800bcb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bcb2:	2302      	movs	r3, #2
  }
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	68da      	ldr	r2, [r3, #12]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2220      	movs	r2, #32
 800bcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b08c      	sub	sp, #48	; 0x30
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	2b22      	cmp	r3, #34	; 0x22
 800bd04:	f040 80ad 	bne.w	800be62 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd10:	d117      	bne.n	800bd42 <UART_Receive_IT+0x50>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d113      	bne.n	800bd42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd3a:	1c9a      	adds	r2, r3, #2
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	629a      	str	r2, [r3, #40]	; 0x28
 800bd40:	e026      	b.n	800bd90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd54:	d007      	beq.n	800bd66 <UART_Receive_IT+0x74>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10a      	bne.n	800bd74 <UART_Receive_IT+0x82>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d106      	bne.n	800bd74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	701a      	strb	r2, [r3, #0]
 800bd72:	e008      	b.n	800bd86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8a:	1c5a      	adds	r2, r3, #1
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	3b01      	subs	r3, #1
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d15c      	bne.n	800be5e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68da      	ldr	r2, [r3, #12]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f022 0220 	bic.w	r2, r2, #32
 800bdb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68da      	ldr	r2, [r3, #12]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bdc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	695a      	ldr	r2, [r3, #20]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f022 0201 	bic.w	r2, r2, #1
 800bdd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2220      	movs	r2, #32
 800bdd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d136      	bne.n	800be52 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	330c      	adds	r3, #12
 800bdf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	e853 3f00 	ldrex	r3, [r3]
 800bdf8:	613b      	str	r3, [r7, #16]
   return(result);
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	f023 0310 	bic.w	r3, r3, #16
 800be00:	627b      	str	r3, [r7, #36]	; 0x24
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	330c      	adds	r3, #12
 800be08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be0a:	623a      	str	r2, [r7, #32]
 800be0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0e:	69f9      	ldr	r1, [r7, #28]
 800be10:	6a3a      	ldr	r2, [r7, #32]
 800be12:	e841 2300 	strex	r3, r2, [r1]
 800be16:	61bb      	str	r3, [r7, #24]
   return(result);
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1e5      	bne.n	800bdea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f003 0310 	and.w	r3, r3, #16
 800be28:	2b10      	cmp	r3, #16
 800be2a:	d10a      	bne.n	800be42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be2c:	2300      	movs	r3, #0
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	60fb      	str	r3, [r7, #12]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800be4a:	4611      	mov	r1, r2
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	4798      	blx	r3
 800be50:	e003      	b.n	800be5a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	e002      	b.n	800be64 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	e000      	b.n	800be64 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800be62:	2302      	movs	r3, #2
  }
}
 800be64:	4618      	mov	r0, r3
 800be66:	3730      	adds	r7, #48	; 0x30
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be70:	b0c0      	sub	sp, #256	; 0x100
 800be72:	af00      	add	r7, sp, #0
 800be74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800be78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	4bcf      	ldr	r3, [pc, #828]	; (800c1bc <UART_SetConfig+0x350>)
 800be80:	429a      	cmp	r2, r3
 800be82:	d904      	bls.n	800be8e <UART_SetConfig+0x22>
 800be84:	f640 6161 	movw	r1, #3681	; 0xe61
 800be88:	48cd      	ldr	r0, [pc, #820]	; (800c1c0 <UART_SetConfig+0x354>)
 800be8a:	f7f6 fa2c 	bl	80022e6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800be8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00a      	beq.n	800beae <UART_SetConfig+0x42>
 800be98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea2:	d004      	beq.n	800beae <UART_SetConfig+0x42>
 800bea4:	f640 6162 	movw	r1, #3682	; 0xe62
 800bea8:	48c5      	ldr	r0, [pc, #788]	; (800c1c0 <UART_SetConfig+0x354>)
 800beaa:	f7f6 fa1c 	bl	80022e6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800beae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d010      	beq.n	800beda <UART_SetConfig+0x6e>
 800beb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bec2:	d00a      	beq.n	800beda <UART_SetConfig+0x6e>
 800bec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bece:	d004      	beq.n	800beda <UART_SetConfig+0x6e>
 800bed0:	f640 6163 	movw	r1, #3683	; 0xe63
 800bed4:	48ba      	ldr	r0, [pc, #744]	; (800c1c0 <UART_SetConfig+0x354>)
 800bed6:	f7f6 fa06 	bl	80022e6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800beda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bede:	695a      	ldr	r2, [r3, #20]
 800bee0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800bee4:	4013      	ands	r3, r2
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d104      	bne.n	800bef4 <UART_SetConfig+0x88>
 800beea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beee:	695b      	ldr	r3, [r3, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d104      	bne.n	800befe <UART_SetConfig+0x92>
 800bef4:	f640 6164 	movw	r1, #3684	; 0xe64
 800bef8:	48b1      	ldr	r0, [pc, #708]	; (800c1c0 <UART_SetConfig+0x354>)
 800befa:	f7f6 f9f4 	bl	80022e6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800befe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bf0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf0e:	68d9      	ldr	r1, [r3, #12]
 800bf10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	ea40 0301 	orr.w	r3, r0, r1
 800bf1a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bf1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf20:	689a      	ldr	r2, [r3, #8]
 800bf22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	431a      	orrs	r2, r3
 800bf2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	431a      	orrs	r2, r3
 800bf32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf36:	69db      	ldr	r3, [r3, #28]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bf3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bf4a:	f021 010c 	bic.w	r1, r1, #12
 800bf4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bf58:	430b      	orrs	r3, r1
 800bf5a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bf5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bf68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf6c:	6999      	ldr	r1, [r3, #24]
 800bf6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	ea40 0301 	orr.w	r3, r0, r1
 800bf78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	4b90      	ldr	r3, [pc, #576]	; (800c1c4 <UART_SetConfig+0x358>)
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d005      	beq.n	800bf92 <UART_SetConfig+0x126>
 800bf86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	4b8e      	ldr	r3, [pc, #568]	; (800c1c8 <UART_SetConfig+0x35c>)
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d104      	bne.n	800bf9c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bf92:	f7fc f871 	bl	8008078 <HAL_RCC_GetPCLK2Freq>
 800bf96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bf9a:	e003      	b.n	800bfa4 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bf9c:	f7fc f858 	bl	8008050 <HAL_RCC_GetPCLK1Freq>
 800bfa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfa8:	69db      	ldr	r3, [r3, #28]
 800bfaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfae:	f040 810f 	bne.w	800c1d0 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bfb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bfbc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bfc0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	462b      	mov	r3, r5
 800bfc8:	1891      	adds	r1, r2, r2
 800bfca:	65b9      	str	r1, [r7, #88]	; 0x58
 800bfcc:	415b      	adcs	r3, r3
 800bfce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	eb12 0801 	adds.w	r8, r2, r1
 800bfda:	4629      	mov	r1, r5
 800bfdc:	eb43 0901 	adc.w	r9, r3, r1
 800bfe0:	f04f 0200 	mov.w	r2, #0
 800bfe4:	f04f 0300 	mov.w	r3, #0
 800bfe8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bfec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bff0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bff4:	4690      	mov	r8, r2
 800bff6:	4699      	mov	r9, r3
 800bff8:	4623      	mov	r3, r4
 800bffa:	eb18 0303 	adds.w	r3, r8, r3
 800bffe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c002:	462b      	mov	r3, r5
 800c004:	eb49 0303 	adc.w	r3, r9, r3
 800c008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c018:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c01c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c020:	460b      	mov	r3, r1
 800c022:	18db      	adds	r3, r3, r3
 800c024:	653b      	str	r3, [r7, #80]	; 0x50
 800c026:	4613      	mov	r3, r2
 800c028:	eb42 0303 	adc.w	r3, r2, r3
 800c02c:	657b      	str	r3, [r7, #84]	; 0x54
 800c02e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c032:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c036:	f7f4 f8d3 	bl	80001e0 <__aeabi_uldivmod>
 800c03a:	4602      	mov	r2, r0
 800c03c:	460b      	mov	r3, r1
 800c03e:	4b63      	ldr	r3, [pc, #396]	; (800c1cc <UART_SetConfig+0x360>)
 800c040:	fba3 2302 	umull	r2, r3, r3, r2
 800c044:	095b      	lsrs	r3, r3, #5
 800c046:	011c      	lsls	r4, r3, #4
 800c048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c04c:	2200      	movs	r2, #0
 800c04e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c052:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c056:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c05a:	4642      	mov	r2, r8
 800c05c:	464b      	mov	r3, r9
 800c05e:	1891      	adds	r1, r2, r2
 800c060:	64b9      	str	r1, [r7, #72]	; 0x48
 800c062:	415b      	adcs	r3, r3
 800c064:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c066:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c06a:	4641      	mov	r1, r8
 800c06c:	eb12 0a01 	adds.w	sl, r2, r1
 800c070:	4649      	mov	r1, r9
 800c072:	eb43 0b01 	adc.w	fp, r3, r1
 800c076:	f04f 0200 	mov.w	r2, #0
 800c07a:	f04f 0300 	mov.w	r3, #0
 800c07e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c082:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c086:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c08a:	4692      	mov	sl, r2
 800c08c:	469b      	mov	fp, r3
 800c08e:	4643      	mov	r3, r8
 800c090:	eb1a 0303 	adds.w	r3, sl, r3
 800c094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c098:	464b      	mov	r3, r9
 800c09a:	eb4b 0303 	adc.w	r3, fp, r3
 800c09e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c0a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c0ae:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c0b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	18db      	adds	r3, r3, r3
 800c0ba:	643b      	str	r3, [r7, #64]	; 0x40
 800c0bc:	4613      	mov	r3, r2
 800c0be:	eb42 0303 	adc.w	r3, r2, r3
 800c0c2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c0c8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c0cc:	f7f4 f888 	bl	80001e0 <__aeabi_uldivmod>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	4b3d      	ldr	r3, [pc, #244]	; (800c1cc <UART_SetConfig+0x360>)
 800c0d8:	fba3 2301 	umull	r2, r3, r3, r1
 800c0dc:	095b      	lsrs	r3, r3, #5
 800c0de:	2264      	movs	r2, #100	; 0x64
 800c0e0:	fb02 f303 	mul.w	r3, r2, r3
 800c0e4:	1acb      	subs	r3, r1, r3
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c0ec:	4b37      	ldr	r3, [pc, #220]	; (800c1cc <UART_SetConfig+0x360>)
 800c0ee:	fba3 2302 	umull	r2, r3, r3, r2
 800c0f2:	095b      	lsrs	r3, r3, #5
 800c0f4:	005b      	lsls	r3, r3, #1
 800c0f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c0fa:	441c      	add	r4, r3
 800c0fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c100:	2200      	movs	r2, #0
 800c102:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c106:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c10a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c10e:	4642      	mov	r2, r8
 800c110:	464b      	mov	r3, r9
 800c112:	1891      	adds	r1, r2, r2
 800c114:	63b9      	str	r1, [r7, #56]	; 0x38
 800c116:	415b      	adcs	r3, r3
 800c118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c11a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c11e:	4641      	mov	r1, r8
 800c120:	1851      	adds	r1, r2, r1
 800c122:	6339      	str	r1, [r7, #48]	; 0x30
 800c124:	4649      	mov	r1, r9
 800c126:	414b      	adcs	r3, r1
 800c128:	637b      	str	r3, [r7, #52]	; 0x34
 800c12a:	f04f 0200 	mov.w	r2, #0
 800c12e:	f04f 0300 	mov.w	r3, #0
 800c132:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c136:	4659      	mov	r1, fp
 800c138:	00cb      	lsls	r3, r1, #3
 800c13a:	4651      	mov	r1, sl
 800c13c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c140:	4651      	mov	r1, sl
 800c142:	00ca      	lsls	r2, r1, #3
 800c144:	4610      	mov	r0, r2
 800c146:	4619      	mov	r1, r3
 800c148:	4603      	mov	r3, r0
 800c14a:	4642      	mov	r2, r8
 800c14c:	189b      	adds	r3, r3, r2
 800c14e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c152:	464b      	mov	r3, r9
 800c154:	460a      	mov	r2, r1
 800c156:	eb42 0303 	adc.w	r3, r2, r3
 800c15a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c16a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c16e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c172:	460b      	mov	r3, r1
 800c174:	18db      	adds	r3, r3, r3
 800c176:	62bb      	str	r3, [r7, #40]	; 0x28
 800c178:	4613      	mov	r3, r2
 800c17a:	eb42 0303 	adc.w	r3, r2, r3
 800c17e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c184:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c188:	f7f4 f82a 	bl	80001e0 <__aeabi_uldivmod>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4b0e      	ldr	r3, [pc, #56]	; (800c1cc <UART_SetConfig+0x360>)
 800c192:	fba3 1302 	umull	r1, r3, r3, r2
 800c196:	095b      	lsrs	r3, r3, #5
 800c198:	2164      	movs	r1, #100	; 0x64
 800c19a:	fb01 f303 	mul.w	r3, r1, r3
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	00db      	lsls	r3, r3, #3
 800c1a2:	3332      	adds	r3, #50	; 0x32
 800c1a4:	4a09      	ldr	r2, [pc, #36]	; (800c1cc <UART_SetConfig+0x360>)
 800c1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1aa:	095b      	lsrs	r3, r3, #5
 800c1ac:	f003 0207 	and.w	r2, r3, #7
 800c1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4422      	add	r2, r4
 800c1b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c1ba:	e108      	b.n	800c3ce <UART_SetConfig+0x562>
 800c1bc:	00a037a0 	.word	0x00a037a0
 800c1c0:	0800ff64 	.word	0x0800ff64
 800c1c4:	40011000 	.word	0x40011000
 800c1c8:	40011400 	.word	0x40011400
 800c1cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c1d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c1da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c1de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c1e2:	4642      	mov	r2, r8
 800c1e4:	464b      	mov	r3, r9
 800c1e6:	1891      	adds	r1, r2, r2
 800c1e8:	6239      	str	r1, [r7, #32]
 800c1ea:	415b      	adcs	r3, r3
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c1f2:	4641      	mov	r1, r8
 800c1f4:	1854      	adds	r4, r2, r1
 800c1f6:	4649      	mov	r1, r9
 800c1f8:	eb43 0501 	adc.w	r5, r3, r1
 800c1fc:	f04f 0200 	mov.w	r2, #0
 800c200:	f04f 0300 	mov.w	r3, #0
 800c204:	00eb      	lsls	r3, r5, #3
 800c206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c20a:	00e2      	lsls	r2, r4, #3
 800c20c:	4614      	mov	r4, r2
 800c20e:	461d      	mov	r5, r3
 800c210:	4643      	mov	r3, r8
 800c212:	18e3      	adds	r3, r4, r3
 800c214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c218:	464b      	mov	r3, r9
 800c21a:	eb45 0303 	adc.w	r3, r5, r3
 800c21e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c22e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c232:	f04f 0200 	mov.w	r2, #0
 800c236:	f04f 0300 	mov.w	r3, #0
 800c23a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c23e:	4629      	mov	r1, r5
 800c240:	008b      	lsls	r3, r1, #2
 800c242:	4621      	mov	r1, r4
 800c244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c248:	4621      	mov	r1, r4
 800c24a:	008a      	lsls	r2, r1, #2
 800c24c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c250:	f7f3 ffc6 	bl	80001e0 <__aeabi_uldivmod>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	4b60      	ldr	r3, [pc, #384]	; (800c3dc <UART_SetConfig+0x570>)
 800c25a:	fba3 2302 	umull	r2, r3, r3, r2
 800c25e:	095b      	lsrs	r3, r3, #5
 800c260:	011c      	lsls	r4, r3, #4
 800c262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c266:	2200      	movs	r2, #0
 800c268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c26c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c270:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c274:	4642      	mov	r2, r8
 800c276:	464b      	mov	r3, r9
 800c278:	1891      	adds	r1, r2, r2
 800c27a:	61b9      	str	r1, [r7, #24]
 800c27c:	415b      	adcs	r3, r3
 800c27e:	61fb      	str	r3, [r7, #28]
 800c280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c284:	4641      	mov	r1, r8
 800c286:	1851      	adds	r1, r2, r1
 800c288:	6139      	str	r1, [r7, #16]
 800c28a:	4649      	mov	r1, r9
 800c28c:	414b      	adcs	r3, r1
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	f04f 0200 	mov.w	r2, #0
 800c294:	f04f 0300 	mov.w	r3, #0
 800c298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c29c:	4659      	mov	r1, fp
 800c29e:	00cb      	lsls	r3, r1, #3
 800c2a0:	4651      	mov	r1, sl
 800c2a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2a6:	4651      	mov	r1, sl
 800c2a8:	00ca      	lsls	r2, r1, #3
 800c2aa:	4610      	mov	r0, r2
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	4642      	mov	r2, r8
 800c2b2:	189b      	adds	r3, r3, r2
 800c2b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2b8:	464b      	mov	r3, r9
 800c2ba:	460a      	mov	r2, r1
 800c2bc:	eb42 0303 	adc.w	r3, r2, r3
 800c2c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	67bb      	str	r3, [r7, #120]	; 0x78
 800c2ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c2d0:	f04f 0200 	mov.w	r2, #0
 800c2d4:	f04f 0300 	mov.w	r3, #0
 800c2d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c2dc:	4649      	mov	r1, r9
 800c2de:	008b      	lsls	r3, r1, #2
 800c2e0:	4641      	mov	r1, r8
 800c2e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c2e6:	4641      	mov	r1, r8
 800c2e8:	008a      	lsls	r2, r1, #2
 800c2ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c2ee:	f7f3 ff77 	bl	80001e0 <__aeabi_uldivmod>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	4b39      	ldr	r3, [pc, #228]	; (800c3dc <UART_SetConfig+0x570>)
 800c2f8:	fba3 1302 	umull	r1, r3, r3, r2
 800c2fc:	095b      	lsrs	r3, r3, #5
 800c2fe:	2164      	movs	r1, #100	; 0x64
 800c300:	fb01 f303 	mul.w	r3, r1, r3
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	3332      	adds	r3, #50	; 0x32
 800c30a:	4a34      	ldr	r2, [pc, #208]	; (800c3dc <UART_SetConfig+0x570>)
 800c30c:	fba2 2303 	umull	r2, r3, r2, r3
 800c310:	095b      	lsrs	r3, r3, #5
 800c312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c316:	441c      	add	r4, r3
 800c318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c31c:	2200      	movs	r2, #0
 800c31e:	673b      	str	r3, [r7, #112]	; 0x70
 800c320:	677a      	str	r2, [r7, #116]	; 0x74
 800c322:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c326:	4642      	mov	r2, r8
 800c328:	464b      	mov	r3, r9
 800c32a:	1891      	adds	r1, r2, r2
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	415b      	adcs	r3, r3
 800c330:	60fb      	str	r3, [r7, #12]
 800c332:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c336:	4641      	mov	r1, r8
 800c338:	1851      	adds	r1, r2, r1
 800c33a:	6039      	str	r1, [r7, #0]
 800c33c:	4649      	mov	r1, r9
 800c33e:	414b      	adcs	r3, r1
 800c340:	607b      	str	r3, [r7, #4]
 800c342:	f04f 0200 	mov.w	r2, #0
 800c346:	f04f 0300 	mov.w	r3, #0
 800c34a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c34e:	4659      	mov	r1, fp
 800c350:	00cb      	lsls	r3, r1, #3
 800c352:	4651      	mov	r1, sl
 800c354:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c358:	4651      	mov	r1, sl
 800c35a:	00ca      	lsls	r2, r1, #3
 800c35c:	4610      	mov	r0, r2
 800c35e:	4619      	mov	r1, r3
 800c360:	4603      	mov	r3, r0
 800c362:	4642      	mov	r2, r8
 800c364:	189b      	adds	r3, r3, r2
 800c366:	66bb      	str	r3, [r7, #104]	; 0x68
 800c368:	464b      	mov	r3, r9
 800c36a:	460a      	mov	r2, r1
 800c36c:	eb42 0303 	adc.w	r3, r2, r3
 800c370:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	663b      	str	r3, [r7, #96]	; 0x60
 800c37c:	667a      	str	r2, [r7, #100]	; 0x64
 800c37e:	f04f 0200 	mov.w	r2, #0
 800c382:	f04f 0300 	mov.w	r3, #0
 800c386:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c38a:	4649      	mov	r1, r9
 800c38c:	008b      	lsls	r3, r1, #2
 800c38e:	4641      	mov	r1, r8
 800c390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c394:	4641      	mov	r1, r8
 800c396:	008a      	lsls	r2, r1, #2
 800c398:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c39c:	f7f3 ff20 	bl	80001e0 <__aeabi_uldivmod>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	4b0d      	ldr	r3, [pc, #52]	; (800c3dc <UART_SetConfig+0x570>)
 800c3a6:	fba3 1302 	umull	r1, r3, r3, r2
 800c3aa:	095b      	lsrs	r3, r3, #5
 800c3ac:	2164      	movs	r1, #100	; 0x64
 800c3ae:	fb01 f303 	mul.w	r3, r1, r3
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	011b      	lsls	r3, r3, #4
 800c3b6:	3332      	adds	r3, #50	; 0x32
 800c3b8:	4a08      	ldr	r2, [pc, #32]	; (800c3dc <UART_SetConfig+0x570>)
 800c3ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c3be:	095b      	lsrs	r3, r3, #5
 800c3c0:	f003 020f 	and.w	r2, r3, #15
 800c3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4422      	add	r2, r4
 800c3cc:	609a      	str	r2, [r3, #8]
}
 800c3ce:	bf00      	nop
 800c3d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3da:	bf00      	nop
 800c3dc:	51eb851f 	.word	0x51eb851f

0800c3e0 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800c3e4:	bf00      	nop
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
	...

0800c3f0 <__NVIC_SetPriority>:
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	6039      	str	r1, [r7, #0]
 800c3fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c400:	2b00      	cmp	r3, #0
 800c402:	db0a      	blt.n	800c41a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	b2da      	uxtb	r2, r3
 800c408:	490c      	ldr	r1, [pc, #48]	; (800c43c <__NVIC_SetPriority+0x4c>)
 800c40a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c40e:	0112      	lsls	r2, r2, #4
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	440b      	add	r3, r1
 800c414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c418:	e00a      	b.n	800c430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	b2da      	uxtb	r2, r3
 800c41e:	4908      	ldr	r1, [pc, #32]	; (800c440 <__NVIC_SetPriority+0x50>)
 800c420:	79fb      	ldrb	r3, [r7, #7]
 800c422:	f003 030f 	and.w	r3, r3, #15
 800c426:	3b04      	subs	r3, #4
 800c428:	0112      	lsls	r2, r2, #4
 800c42a:	b2d2      	uxtb	r2, r2
 800c42c:	440b      	add	r3, r1
 800c42e:	761a      	strb	r2, [r3, #24]
}
 800c430:	bf00      	nop
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	e000e100 	.word	0xe000e100
 800c440:	e000ed00 	.word	0xe000ed00

0800c444 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c444:	b580      	push	{r7, lr}
 800c446:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c448:	4b05      	ldr	r3, [pc, #20]	; (800c460 <SysTick_Handler+0x1c>)
 800c44a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c44c:	f002 fc3a 	bl	800ecc4 <xTaskGetSchedulerState>
 800c450:	4603      	mov	r3, r0
 800c452:	2b01      	cmp	r3, #1
 800c454:	d001      	beq.n	800c45a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c456:	f000 fe5f 	bl	800d118 <xPortSysTickHandler>
  }
}
 800c45a:	bf00      	nop
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	e000e010 	.word	0xe000e010

0800c464 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c464:	b580      	push	{r7, lr}
 800c466:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c468:	2100      	movs	r1, #0
 800c46a:	f06f 0004 	mvn.w	r0, #4
 800c46e:	f7ff ffbf 	bl	800c3f0 <__NVIC_SetPriority>
#endif
}
 800c472:	bf00      	nop
 800c474:	bd80      	pop	{r7, pc}
	...

0800c478 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c47e:	f3ef 8305 	mrs	r3, IPSR
 800c482:	603b      	str	r3, [r7, #0]
  return(result);
 800c484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c486:	2b00      	cmp	r3, #0
 800c488:	d003      	beq.n	800c492 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c48a:	f06f 0305 	mvn.w	r3, #5
 800c48e:	607b      	str	r3, [r7, #4]
 800c490:	e00c      	b.n	800c4ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c492:	4b0a      	ldr	r3, [pc, #40]	; (800c4bc <osKernelInitialize+0x44>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d105      	bne.n	800c4a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c49a:	4b08      	ldr	r3, [pc, #32]	; (800c4bc <osKernelInitialize+0x44>)
 800c49c:	2201      	movs	r2, #1
 800c49e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	607b      	str	r3, [r7, #4]
 800c4a4:	e002      	b.n	800c4ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c4ac:	687b      	ldr	r3, [r7, #4]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	370c      	adds	r7, #12
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	20000928 	.word	0x20000928

0800c4c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4c6:	f3ef 8305 	mrs	r3, IPSR
 800c4ca:	603b      	str	r3, [r7, #0]
  return(result);
 800c4cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <osKernelStart+0x1a>
    stat = osErrorISR;
 800c4d2:	f06f 0305 	mvn.w	r3, #5
 800c4d6:	607b      	str	r3, [r7, #4]
 800c4d8:	e010      	b.n	800c4fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c4da:	4b0b      	ldr	r3, [pc, #44]	; (800c508 <osKernelStart+0x48>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d109      	bne.n	800c4f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c4e2:	f7ff ffbf 	bl	800c464 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c4e6:	4b08      	ldr	r3, [pc, #32]	; (800c508 <osKernelStart+0x48>)
 800c4e8:	2202      	movs	r2, #2
 800c4ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c4ec:	f001 fe7a 	bl	800e1e4 <vTaskStartScheduler>
      stat = osOK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	607b      	str	r3, [r7, #4]
 800c4f4:	e002      	b.n	800c4fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c4f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c4fc:	687b      	ldr	r3, [r7, #4]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20000928 	.word	0x20000928

0800c50c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b08e      	sub	sp, #56	; 0x38
 800c510:	af04      	add	r7, sp, #16
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c518:	2300      	movs	r3, #0
 800c51a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c51c:	f3ef 8305 	mrs	r3, IPSR
 800c520:	617b      	str	r3, [r7, #20]
  return(result);
 800c522:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c524:	2b00      	cmp	r3, #0
 800c526:	d17f      	bne.n	800c628 <osThreadNew+0x11c>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d07c      	beq.n	800c628 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c52e:	2380      	movs	r3, #128	; 0x80
 800c530:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c532:	2318      	movs	r3, #24
 800c534:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c536:	2300      	movs	r3, #0
 800c538:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c53a:	f04f 33ff 	mov.w	r3, #4294967295
 800c53e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d046      	beq.n	800c5d4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d002      	beq.n	800c554 <osThreadNew+0x48>
        name = attr->name;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d002      	beq.n	800c562 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	699b      	ldr	r3, [r3, #24]
 800c560:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d008      	beq.n	800c57a <osThreadNew+0x6e>
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	2b38      	cmp	r3, #56	; 0x38
 800c56c:	d805      	bhi.n	800c57a <osThreadNew+0x6e>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <osThreadNew+0x72>
        return (NULL);
 800c57a:	2300      	movs	r3, #0
 800c57c:	e055      	b.n	800c62a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	695b      	ldr	r3, [r3, #20]
 800c58a:	089b      	lsrs	r3, r3, #2
 800c58c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00f      	beq.n	800c5b6 <osThreadNew+0xaa>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800c59e:	d30a      	bcc.n	800c5b6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d006      	beq.n	800c5b6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d002      	beq.n	800c5b6 <osThreadNew+0xaa>
        mem = 1;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	61bb      	str	r3, [r7, #24]
 800c5b4:	e010      	b.n	800c5d8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10c      	bne.n	800c5d8 <osThreadNew+0xcc>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d108      	bne.n	800c5d8 <osThreadNew+0xcc>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d104      	bne.n	800c5d8 <osThreadNew+0xcc>
          mem = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	61bb      	str	r3, [r7, #24]
 800c5d2:	e001      	b.n	800c5d8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d110      	bne.n	800c600 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c5e6:	9202      	str	r2, [sp, #8]
 800c5e8:	9301      	str	r3, [sp, #4]
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	6a3a      	ldr	r2, [r7, #32]
 800c5f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f001 fbef 	bl	800ddd8 <xTaskCreateStatic>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	613b      	str	r3, [r7, #16]
 800c5fe:	e013      	b.n	800c628 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d110      	bne.n	800c628 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	b29a      	uxth	r2, r3
 800c60a:	f107 0310 	add.w	r3, r7, #16
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f001 fc3c 	bl	800de96 <xTaskCreate>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b01      	cmp	r3, #1
 800c622:	d001      	beq.n	800c628 <osThreadNew+0x11c>
            hTask = NULL;
 800c624:	2300      	movs	r3, #0
 800c626:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c628:	693b      	ldr	r3, [r7, #16]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3728      	adds	r7, #40	; 0x28
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c632:	b580      	push	{r7, lr}
 800c634:	b084      	sub	sp, #16
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c63a:	f3ef 8305 	mrs	r3, IPSR
 800c63e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c640:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c642:	2b00      	cmp	r3, #0
 800c644:	d003      	beq.n	800c64e <osDelay+0x1c>
    stat = osErrorISR;
 800c646:	f06f 0305 	mvn.w	r3, #5
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	e007      	b.n	800c65e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c64e:	2300      	movs	r3, #0
 800c650:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <osDelay+0x2c>
      vTaskDelay(ticks);
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f001 fd8f 	bl	800e17c <vTaskDelay>
    }
  }

  return (stat);
 800c65e:	68fb      	ldr	r3, [r7, #12]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f002 fffd 	bl	800f670 <pvTimerGetTimerID>
 800c676:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d005      	beq.n	800c68a <TimerCallback+0x22>
    callb->func (callb->arg);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	6852      	ldr	r2, [r2, #4]
 800c686:	4610      	mov	r0, r2
 800c688:	4798      	blx	r3
  }
}
 800c68a:	bf00      	nop
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
	...

0800c694 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800c694:	b580      	push	{r7, lr}
 800c696:	b08c      	sub	sp, #48	; 0x30
 800c698:	af02      	add	r7, sp, #8
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	607a      	str	r2, [r7, #4]
 800c69e:	603b      	str	r3, [r7, #0]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6a8:	f3ef 8305 	mrs	r3, IPSR
 800c6ac:	613b      	str	r3, [r7, #16]
  return(result);
 800c6ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d163      	bne.n	800c77c <osTimerNew+0xe8>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d060      	beq.n	800c77c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800c6ba:	2008      	movs	r0, #8
 800c6bc:	f000 f8c8 	bl	800c850 <pvPortMalloc>
 800c6c0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d059      	beq.n	800c77c <osTimerNew+0xe8>
      callb->func = func;
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800c6d4:	7afb      	ldrb	r3, [r7, #11]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d102      	bne.n	800c6e0 <osTimerNew+0x4c>
        reload = pdFALSE;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	61fb      	str	r3, [r7, #28]
 800c6de:	e001      	b.n	800c6e4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800c6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d01c      	beq.n	800c72e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <osTimerNew+0x6e>
          name = attr->name;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d006      	beq.n	800c718 <osTimerNew+0x84>
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	2b2b      	cmp	r3, #43	; 0x2b
 800c710:	d902      	bls.n	800c718 <osTimerNew+0x84>
          mem = 1;
 800c712:	2301      	movs	r3, #1
 800c714:	61bb      	str	r3, [r7, #24]
 800c716:	e00c      	b.n	800c732 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d108      	bne.n	800c732 <osTimerNew+0x9e>
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d104      	bne.n	800c732 <osTimerNew+0x9e>
            mem = 0;
 800c728:	2300      	movs	r3, #0
 800c72a:	61bb      	str	r3, [r7, #24]
 800c72c:	e001      	b.n	800c732 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d10c      	bne.n	800c752 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	9301      	str	r3, [sp, #4]
 800c73e:	4b12      	ldr	r3, [pc, #72]	; (800c788 <osTimerNew+0xf4>)
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	69fa      	ldr	r2, [r7, #28]
 800c746:	2101      	movs	r1, #1
 800c748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c74a:	f002 fc10 	bl	800ef6e <xTimerCreateStatic>
 800c74e:	6238      	str	r0, [r7, #32]
 800c750:	e00b      	b.n	800c76a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d108      	bne.n	800c76a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c758:	4b0b      	ldr	r3, [pc, #44]	; (800c788 <osTimerNew+0xf4>)
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	69fa      	ldr	r2, [r7, #28]
 800c760:	2101      	movs	r1, #1
 800c762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c764:	f002 fbe2 	bl	800ef2c <xTimerCreate>
 800c768:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d105      	bne.n	800c77c <osTimerNew+0xe8>
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d002      	beq.n	800c77c <osTimerNew+0xe8>
        vPortFree (callb);
 800c776:	6978      	ldr	r0, [r7, #20]
 800c778:	f000 f93a 	bl	800c9f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c77c:	6a3b      	ldr	r3, [r7, #32]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3728      	adds	r7, #40	; 0x28
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	0800c669 	.word	0x0800c669

0800c78c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b088      	sub	sp, #32
 800c790:	af02      	add	r7, sp, #8
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c79a:	f3ef 8305 	mrs	r3, IPSR
 800c79e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d003      	beq.n	800c7ae <osTimerStart+0x22>
    stat = osErrorISR;
 800c7a6:	f06f 0305 	mvn.w	r3, #5
 800c7aa:	617b      	str	r3, [r7, #20]
 800c7ac:	e017      	b.n	800c7de <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d103      	bne.n	800c7bc <osTimerStart+0x30>
    stat = osErrorParameter;
 800c7b4:	f06f 0303 	mvn.w	r3, #3
 800c7b8:	617b      	str	r3, [r7, #20]
 800c7ba:	e010      	b.n	800c7de <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800c7bc:	2300      	movs	r3, #0
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	2104      	movs	r1, #4
 800c7c6:	6938      	ldr	r0, [r7, #16]
 800c7c8:	f002 fc4a 	bl	800f060 <xTimerGenericCommand>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d102      	bne.n	800c7d8 <osTimerStart+0x4c>
      stat = osOK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	617b      	str	r3, [r7, #20]
 800c7d6:	e002      	b.n	800c7de <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800c7d8:	f06f 0302 	mvn.w	r3, #2
 800c7dc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c7de:	697b      	ldr	r3, [r7, #20]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3718      	adds	r7, #24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4a07      	ldr	r2, [pc, #28]	; (800c814 <vApplicationGetIdleTaskMemory+0x2c>)
 800c7f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	4a06      	ldr	r2, [pc, #24]	; (800c818 <vApplicationGetIdleTaskMemory+0x30>)
 800c7fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2280      	movs	r2, #128	; 0x80
 800c804:	601a      	str	r2, [r3, #0]
}
 800c806:	bf00      	nop
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	2000092c 	.word	0x2000092c
 800c818:	20000ae8 	.word	0x20000ae8

0800c81c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	4a07      	ldr	r2, [pc, #28]	; (800c848 <vApplicationGetTimerTaskMemory+0x2c>)
 800c82c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	4a06      	ldr	r2, [pc, #24]	; (800c84c <vApplicationGetTimerTaskMemory+0x30>)
 800c832:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c83a:	601a      	str	r2, [r3, #0]
}
 800c83c:	bf00      	nop
 800c83e:	3714      	adds	r7, #20
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr
 800c848:	20000ce8 	.word	0x20000ce8
 800c84c:	20000ea4 	.word	0x20000ea4

0800c850 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b08a      	sub	sp, #40	; 0x28
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c858:	2300      	movs	r3, #0
 800c85a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c85c:	f001 fd34 	bl	800e2c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c860:	4b5d      	ldr	r3, [pc, #372]	; (800c9d8 <pvPortMalloc+0x188>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d101      	bne.n	800c86c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c868:	f000 f924 	bl	800cab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c86c:	4b5b      	ldr	r3, [pc, #364]	; (800c9dc <pvPortMalloc+0x18c>)
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4013      	ands	r3, r2
 800c874:	2b00      	cmp	r3, #0
 800c876:	f040 8093 	bne.w	800c9a0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d01d      	beq.n	800c8bc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c880:	2208      	movs	r2, #8
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4413      	add	r3, r2
 800c886:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f003 0307 	and.w	r3, r3, #7
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d014      	beq.n	800c8bc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f023 0307 	bic.w	r3, r3, #7
 800c898:	3308      	adds	r3, #8
 800c89a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f003 0307 	and.w	r3, r3, #7
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00a      	beq.n	800c8bc <pvPortMalloc+0x6c>
	__asm volatile
 800c8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	617b      	str	r3, [r7, #20]
}
 800c8b8:	bf00      	nop
 800c8ba:	e7fe      	b.n	800c8ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d06e      	beq.n	800c9a0 <pvPortMalloc+0x150>
 800c8c2:	4b47      	ldr	r3, [pc, #284]	; (800c9e0 <pvPortMalloc+0x190>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d869      	bhi.n	800c9a0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8cc:	4b45      	ldr	r3, [pc, #276]	; (800c9e4 <pvPortMalloc+0x194>)
 800c8ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8d0:	4b44      	ldr	r3, [pc, #272]	; (800c9e4 <pvPortMalloc+0x194>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8d6:	e004      	b.n	800c8e2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d903      	bls.n	800c8f4 <pvPortMalloc+0xa4>
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1f1      	bne.n	800c8d8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8f4:	4b38      	ldr	r3, [pc, #224]	; (800c9d8 <pvPortMalloc+0x188>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d050      	beq.n	800c9a0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8fe:	6a3b      	ldr	r3, [r7, #32]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2208      	movs	r2, #8
 800c904:	4413      	add	r3, r2
 800c906:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	1ad2      	subs	r2, r2, r3
 800c918:	2308      	movs	r3, #8
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d91f      	bls.n	800c960 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4413      	add	r3, r2
 800c926:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	f003 0307 	and.w	r3, r3, #7
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00a      	beq.n	800c948 <pvPortMalloc+0xf8>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	613b      	str	r3, [r7, #16]
}
 800c944:	bf00      	nop
 800c946:	e7fe      	b.n	800c946 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	1ad2      	subs	r2, r2, r3
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c95a:	69b8      	ldr	r0, [r7, #24]
 800c95c:	f000 f90c 	bl	800cb78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c960:	4b1f      	ldr	r3, [pc, #124]	; (800c9e0 <pvPortMalloc+0x190>)
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	4a1d      	ldr	r2, [pc, #116]	; (800c9e0 <pvPortMalloc+0x190>)
 800c96c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c96e:	4b1c      	ldr	r3, [pc, #112]	; (800c9e0 <pvPortMalloc+0x190>)
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	4b1d      	ldr	r3, [pc, #116]	; (800c9e8 <pvPortMalloc+0x198>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	429a      	cmp	r2, r3
 800c978:	d203      	bcs.n	800c982 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c97a:	4b19      	ldr	r3, [pc, #100]	; (800c9e0 <pvPortMalloc+0x190>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a1a      	ldr	r2, [pc, #104]	; (800c9e8 <pvPortMalloc+0x198>)
 800c980:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	4b15      	ldr	r3, [pc, #84]	; (800c9dc <pvPortMalloc+0x18c>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	431a      	orrs	r2, r3
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c996:	4b15      	ldr	r3, [pc, #84]	; (800c9ec <pvPortMalloc+0x19c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	3301      	adds	r3, #1
 800c99c:	4a13      	ldr	r2, [pc, #76]	; (800c9ec <pvPortMalloc+0x19c>)
 800c99e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9a0:	f001 fcd8 	bl	800e354 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c9aa:	f7f5 f8ef 	bl	8001b8c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	f003 0307 	and.w	r3, r3, #7
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00a      	beq.n	800c9ce <pvPortMalloc+0x17e>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	60fb      	str	r3, [r7, #12]
}
 800c9ca:	bf00      	nop
 800c9cc:	e7fe      	b.n	800c9cc <pvPortMalloc+0x17c>
	return pvReturn;
 800c9ce:	69fb      	ldr	r3, [r7, #28]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3728      	adds	r7, #40	; 0x28
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	20004eac 	.word	0x20004eac
 800c9dc:	20004ec0 	.word	0x20004ec0
 800c9e0:	20004eb0 	.word	0x20004eb0
 800c9e4:	20004ea4 	.word	0x20004ea4
 800c9e8:	20004eb4 	.word	0x20004eb4
 800c9ec:	20004eb8 	.word	0x20004eb8

0800c9f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d04d      	beq.n	800ca9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca02:	2308      	movs	r3, #8
 800ca04:	425b      	negs	r3, r3
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	4413      	add	r3, r2
 800ca0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	4b24      	ldr	r3, [pc, #144]	; (800caa8 <vPortFree+0xb8>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4013      	ands	r3, r2
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10a      	bne.n	800ca34 <vPortFree+0x44>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	60fb      	str	r3, [r7, #12]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00a      	beq.n	800ca52 <vPortFree+0x62>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	60bb      	str	r3, [r7, #8]
}
 800ca4e:	bf00      	nop
 800ca50:	e7fe      	b.n	800ca50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	4b14      	ldr	r3, [pc, #80]	; (800caa8 <vPortFree+0xb8>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d01e      	beq.n	800ca9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d11a      	bne.n	800ca9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	4b0e      	ldr	r3, [pc, #56]	; (800caa8 <vPortFree+0xb8>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	43db      	mvns	r3, r3
 800ca72:	401a      	ands	r2, r3
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca78:	f001 fc26 	bl	800e2c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	4b0a      	ldr	r3, [pc, #40]	; (800caac <vPortFree+0xbc>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4413      	add	r3, r2
 800ca86:	4a09      	ldr	r2, [pc, #36]	; (800caac <vPortFree+0xbc>)
 800ca88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca8a:	6938      	ldr	r0, [r7, #16]
 800ca8c:	f000 f874 	bl	800cb78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca90:	4b07      	ldr	r3, [pc, #28]	; (800cab0 <vPortFree+0xc0>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	3301      	adds	r3, #1
 800ca96:	4a06      	ldr	r2, [pc, #24]	; (800cab0 <vPortFree+0xc0>)
 800ca98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca9a:	f001 fc5b 	bl	800e354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca9e:	bf00      	nop
 800caa0:	3718      	adds	r7, #24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	20004ec0 	.word	0x20004ec0
 800caac:	20004eb0 	.word	0x20004eb0
 800cab0:	20004ebc 	.word	0x20004ebc

0800cab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800caba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cabe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cac0:	4b27      	ldr	r3, [pc, #156]	; (800cb60 <prvHeapInit+0xac>)
 800cac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00c      	beq.n	800cae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3307      	adds	r3, #7
 800cad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f023 0307 	bic.w	r3, r3, #7
 800cada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	4a1f      	ldr	r2, [pc, #124]	; (800cb60 <prvHeapInit+0xac>)
 800cae4:	4413      	add	r3, r2
 800cae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800caec:	4a1d      	ldr	r2, [pc, #116]	; (800cb64 <prvHeapInit+0xb0>)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800caf2:	4b1c      	ldr	r3, [pc, #112]	; (800cb64 <prvHeapInit+0xb0>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	4413      	add	r3, r2
 800cafe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb00:	2208      	movs	r2, #8
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	1a9b      	subs	r3, r3, r2
 800cb06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f023 0307 	bic.w	r3, r3, #7
 800cb0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	4a15      	ldr	r2, [pc, #84]	; (800cb68 <prvHeapInit+0xb4>)
 800cb14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb16:	4b14      	ldr	r3, [pc, #80]	; (800cb68 <prvHeapInit+0xb4>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb1e:	4b12      	ldr	r3, [pc, #72]	; (800cb68 <prvHeapInit+0xb4>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	1ad2      	subs	r2, r2, r3
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb34:	4b0c      	ldr	r3, [pc, #48]	; (800cb68 <prvHeapInit+0xb4>)
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	4a0a      	ldr	r2, [pc, #40]	; (800cb6c <prvHeapInit+0xb8>)
 800cb42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	4a09      	ldr	r2, [pc, #36]	; (800cb70 <prvHeapInit+0xbc>)
 800cb4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb4c:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <prvHeapInit+0xc0>)
 800cb4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb52:	601a      	str	r2, [r3, #0]
}
 800cb54:	bf00      	nop
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	200012a4 	.word	0x200012a4
 800cb64:	20004ea4 	.word	0x20004ea4
 800cb68:	20004eac 	.word	0x20004eac
 800cb6c:	20004eb4 	.word	0x20004eb4
 800cb70:	20004eb0 	.word	0x20004eb0
 800cb74:	20004ec0 	.word	0x20004ec0

0800cb78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb80:	4b28      	ldr	r3, [pc, #160]	; (800cc24 <prvInsertBlockIntoFreeList+0xac>)
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	e002      	b.n	800cb8c <prvInsertBlockIntoFreeList+0x14>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d8f7      	bhi.n	800cb86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	4413      	add	r3, r2
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d108      	bne.n	800cbba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	441a      	add	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	441a      	add	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d118      	bne.n	800cc00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	4b15      	ldr	r3, [pc, #84]	; (800cc28 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d00d      	beq.n	800cbf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	441a      	add	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	e008      	b.n	800cc08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbf6:	4b0c      	ldr	r3, [pc, #48]	; (800cc28 <prvInsertBlockIntoFreeList+0xb0>)
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	e003      	b.n	800cc08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d002      	beq.n	800cc16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc16:	bf00      	nop
 800cc18:	3714      	adds	r7, #20
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	20004ea4 	.word	0x20004ea4
 800cc28:	20004eac 	.word	0x20004eac

0800cc2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f103 0208 	add.w	r2, r3, #8
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f04f 32ff 	mov.w	r2, #4294967295
 800cc44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f103 0208 	add.w	r2, r3, #8
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f103 0208 	add.w	r2, r3, #8
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cc7a:	bf00      	nop
 800cc7c:	370c      	adds	r7, #12
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc86:	b480      	push	{r7}
 800cc88:	b085      	sub	sp, #20
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	689a      	ldr	r2, [r3, #8]
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	683a      	ldr	r2, [r7, #0]
 800ccaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	601a      	str	r2, [r3, #0]
}
 800ccc2:	bf00      	nop
 800ccc4:	3714      	adds	r7, #20
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr

0800ccce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b085      	sub	sp, #20
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce4:	d103      	bne.n	800ccee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	e00c      	b.n	800cd08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	3308      	adds	r3, #8
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	e002      	b.n	800ccfc <vListInsert+0x2e>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68ba      	ldr	r2, [r7, #8]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d2f6      	bcs.n	800ccf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	685a      	ldr	r2, [r3, #4]
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	683a      	ldr	r2, [r7, #0]
 800cd16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	68fa      	ldr	r2, [r7, #12]
 800cd1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	601a      	str	r2, [r3, #0]
}
 800cd34:	bf00      	nop
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	6892      	ldr	r2, [r2, #8]
 800cd56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	6852      	ldr	r2, [r2, #4]
 800cd60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d103      	bne.n	800cd74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	689a      	ldr	r2, [r3, #8]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	1e5a      	subs	r2, r3, #1
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3714      	adds	r7, #20
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd94:	b480      	push	{r7}
 800cd96:	b085      	sub	sp, #20
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	3b04      	subs	r3, #4
 800cda4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cdac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	3b04      	subs	r3, #4
 800cdb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	f023 0201 	bic.w	r2, r3, #1
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3b04      	subs	r3, #4
 800cdc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cdc4:	4a0c      	ldr	r2, [pc, #48]	; (800cdf8 <pxPortInitialiseStack+0x64>)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3b14      	subs	r3, #20
 800cdce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3b04      	subs	r3, #4
 800cdda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f06f 0202 	mvn.w	r2, #2
 800cde2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	3b20      	subs	r3, #32
 800cde8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cdea:	68fb      	ldr	r3, [r7, #12]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3714      	adds	r7, #20
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr
 800cdf8:	0800cdfd 	.word	0x0800cdfd

0800cdfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ce06:	4b12      	ldr	r3, [pc, #72]	; (800ce50 <prvTaskExitError+0x54>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0e:	d00a      	beq.n	800ce26 <prvTaskExitError+0x2a>
	__asm volatile
 800ce10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	60fb      	str	r3, [r7, #12]
}
 800ce22:	bf00      	nop
 800ce24:	e7fe      	b.n	800ce24 <prvTaskExitError+0x28>
	__asm volatile
 800ce26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	60bb      	str	r3, [r7, #8]
}
 800ce38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ce3a:	bf00      	nop
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d0fc      	beq.n	800ce3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ce42:	bf00      	nop
 800ce44:	bf00      	nop
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	2000000c 	.word	0x2000000c
	...

0800ce60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce60:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <pxCurrentTCBConst2>)
 800ce62:	6819      	ldr	r1, [r3, #0]
 800ce64:	6808      	ldr	r0, [r1, #0]
 800ce66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6a:	f380 8809 	msr	PSP, r0
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f04f 0000 	mov.w	r0, #0
 800ce76:	f380 8811 	msr	BASEPRI, r0
 800ce7a:	4770      	bx	lr
 800ce7c:	f3af 8000 	nop.w

0800ce80 <pxCurrentTCBConst2>:
 800ce80:	20004f18 	.word	0x20004f18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce84:	bf00      	nop
 800ce86:	bf00      	nop

0800ce88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce88:	4808      	ldr	r0, [pc, #32]	; (800ceac <prvPortStartFirstTask+0x24>)
 800ce8a:	6800      	ldr	r0, [r0, #0]
 800ce8c:	6800      	ldr	r0, [r0, #0]
 800ce8e:	f380 8808 	msr	MSP, r0
 800ce92:	f04f 0000 	mov.w	r0, #0
 800ce96:	f380 8814 	msr	CONTROL, r0
 800ce9a:	b662      	cpsie	i
 800ce9c:	b661      	cpsie	f
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	df00      	svc	0
 800cea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ceaa:	bf00      	nop
 800ceac:	e000ed08 	.word	0xe000ed08

0800ceb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ceb6:	4b46      	ldr	r3, [pc, #280]	; (800cfd0 <xPortStartScheduler+0x120>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a46      	ldr	r2, [pc, #280]	; (800cfd4 <xPortStartScheduler+0x124>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d10a      	bne.n	800ced6 <xPortStartScheduler+0x26>
	__asm volatile
 800cec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec4:	f383 8811 	msr	BASEPRI, r3
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	613b      	str	r3, [r7, #16]
}
 800ced2:	bf00      	nop
 800ced4:	e7fe      	b.n	800ced4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ced6:	4b3e      	ldr	r3, [pc, #248]	; (800cfd0 <xPortStartScheduler+0x120>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a3f      	ldr	r2, [pc, #252]	; (800cfd8 <xPortStartScheduler+0x128>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d10a      	bne.n	800cef6 <xPortStartScheduler+0x46>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	60fb      	str	r3, [r7, #12]
}
 800cef2:	bf00      	nop
 800cef4:	e7fe      	b.n	800cef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cef6:	4b39      	ldr	r3, [pc, #228]	; (800cfdc <xPortStartScheduler+0x12c>)
 800cef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	22ff      	movs	r2, #255	; 0xff
 800cf06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cf10:	78fb      	ldrb	r3, [r7, #3]
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	4b31      	ldr	r3, [pc, #196]	; (800cfe0 <xPortStartScheduler+0x130>)
 800cf1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cf1e:	4b31      	ldr	r3, [pc, #196]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf20:	2207      	movs	r2, #7
 800cf22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf24:	e009      	b.n	800cf3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cf26:	4b2f      	ldr	r3, [pc, #188]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	4a2d      	ldr	r2, [pc, #180]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cf30:	78fb      	ldrb	r3, [r7, #3]
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	005b      	lsls	r3, r3, #1
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf3a:	78fb      	ldrb	r3, [r7, #3]
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf42:	2b80      	cmp	r3, #128	; 0x80
 800cf44:	d0ef      	beq.n	800cf26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cf46:	4b27      	ldr	r3, [pc, #156]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f1c3 0307 	rsb	r3, r3, #7
 800cf4e:	2b04      	cmp	r3, #4
 800cf50:	d00a      	beq.n	800cf68 <xPortStartScheduler+0xb8>
	__asm volatile
 800cf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	60bb      	str	r3, [r7, #8]
}
 800cf64:	bf00      	nop
 800cf66:	e7fe      	b.n	800cf66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf68:	4b1e      	ldr	r3, [pc, #120]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	021b      	lsls	r3, r3, #8
 800cf6e:	4a1d      	ldr	r2, [pc, #116]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf72:	4b1c      	ldr	r3, [pc, #112]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cf7a:	4a1a      	ldr	r2, [pc, #104]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	b2da      	uxtb	r2, r3
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf86:	4b18      	ldr	r3, [pc, #96]	; (800cfe8 <xPortStartScheduler+0x138>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a17      	ldr	r2, [pc, #92]	; (800cfe8 <xPortStartScheduler+0x138>)
 800cf8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf92:	4b15      	ldr	r3, [pc, #84]	; (800cfe8 <xPortStartScheduler+0x138>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a14      	ldr	r2, [pc, #80]	; (800cfe8 <xPortStartScheduler+0x138>)
 800cf98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cf9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf9e:	f000 f9a9 	bl	800d2f4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cfa2:	4b12      	ldr	r3, [pc, #72]	; (800cfec <xPortStartScheduler+0x13c>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cfa8:	f000 f9e0 	bl	800d36c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cfac:	4b10      	ldr	r3, [pc, #64]	; (800cff0 <xPortStartScheduler+0x140>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a0f      	ldr	r2, [pc, #60]	; (800cff0 <xPortStartScheduler+0x140>)
 800cfb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cfb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cfb8:	f7ff ff66 	bl	800ce88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cfbc:	f001 fb62 	bl	800e684 <vTaskSwitchContext>
	prvTaskExitError();
 800cfc0:	f7ff ff1c 	bl	800cdfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	e000ed00 	.word	0xe000ed00
 800cfd4:	410fc271 	.word	0x410fc271
 800cfd8:	410fc270 	.word	0x410fc270
 800cfdc:	e000e400 	.word	0xe000e400
 800cfe0:	20004ed0 	.word	0x20004ed0
 800cfe4:	20004ed4 	.word	0x20004ed4
 800cfe8:	e000ed20 	.word	0xe000ed20
 800cfec:	2000000c 	.word	0x2000000c
 800cff0:	e000ef34 	.word	0xe000ef34

0800cff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	607b      	str	r3, [r7, #4]
}
 800d00c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d00e:	4b0f      	ldr	r3, [pc, #60]	; (800d04c <vPortEnterCritical+0x58>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3301      	adds	r3, #1
 800d014:	4a0d      	ldr	r2, [pc, #52]	; (800d04c <vPortEnterCritical+0x58>)
 800d016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d018:	4b0c      	ldr	r3, [pc, #48]	; (800d04c <vPortEnterCritical+0x58>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d10f      	bne.n	800d040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d020:	4b0b      	ldr	r3, [pc, #44]	; (800d050 <vPortEnterCritical+0x5c>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00a      	beq.n	800d040 <vPortEnterCritical+0x4c>
	__asm volatile
 800d02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	603b      	str	r3, [r7, #0]
}
 800d03c:	bf00      	nop
 800d03e:	e7fe      	b.n	800d03e <vPortEnterCritical+0x4a>
	}
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr
 800d04c:	2000000c 	.word	0x2000000c
 800d050:	e000ed04 	.word	0xe000ed04

0800d054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d05a:	4b12      	ldr	r3, [pc, #72]	; (800d0a4 <vPortExitCritical+0x50>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10a      	bne.n	800d078 <vPortExitCritical+0x24>
	__asm volatile
 800d062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d066:	f383 8811 	msr	BASEPRI, r3
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	607b      	str	r3, [r7, #4]
}
 800d074:	bf00      	nop
 800d076:	e7fe      	b.n	800d076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d078:	4b0a      	ldr	r3, [pc, #40]	; (800d0a4 <vPortExitCritical+0x50>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	4a09      	ldr	r2, [pc, #36]	; (800d0a4 <vPortExitCritical+0x50>)
 800d080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d082:	4b08      	ldr	r3, [pc, #32]	; (800d0a4 <vPortExitCritical+0x50>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d105      	bne.n	800d096 <vPortExitCritical+0x42>
 800d08a:	2300      	movs	r3, #0
 800d08c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	f383 8811 	msr	BASEPRI, r3
}
 800d094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d096:	bf00      	nop
 800d098:	370c      	adds	r7, #12
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	2000000c 	.word	0x2000000c
	...

0800d0b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d0b0:	f3ef 8009 	mrs	r0, PSP
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	4b15      	ldr	r3, [pc, #84]	; (800d110 <pxCurrentTCBConst>)
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	f01e 0f10 	tst.w	lr, #16
 800d0c0:	bf08      	it	eq
 800d0c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d0c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ca:	6010      	str	r0, [r2, #0]
 800d0cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d0d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d0d4:	f380 8811 	msr	BASEPRI, r0
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f001 fad0 	bl	800e684 <vTaskSwitchContext>
 800d0e4:	f04f 0000 	mov.w	r0, #0
 800d0e8:	f380 8811 	msr	BASEPRI, r0
 800d0ec:	bc09      	pop	{r0, r3}
 800d0ee:	6819      	ldr	r1, [r3, #0]
 800d0f0:	6808      	ldr	r0, [r1, #0]
 800d0f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f6:	f01e 0f10 	tst.w	lr, #16
 800d0fa:	bf08      	it	eq
 800d0fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d100:	f380 8809 	msr	PSP, r0
 800d104:	f3bf 8f6f 	isb	sy
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	f3af 8000 	nop.w

0800d110 <pxCurrentTCBConst>:
 800d110:	20004f18 	.word	0x20004f18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d114:	bf00      	nop
 800d116:	bf00      	nop

0800d118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
	__asm volatile
 800d11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	607b      	str	r3, [r7, #4]
}
 800d130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d132:	f001 f9e5 	bl	800e500 <xTaskIncrementTick>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d003      	beq.n	800d144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d13c:	4b06      	ldr	r3, [pc, #24]	; (800d158 <xPortSysTickHandler+0x40>)
 800d13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d142:	601a      	str	r2, [r3, #0]
 800d144:	2300      	movs	r3, #0
 800d146:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	f383 8811 	msr	BASEPRI, r3
}
 800d14e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d150:	bf00      	nop
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	e000ed04 	.word	0xe000ed04

0800d15c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b088      	sub	sp, #32
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800d164:	4b5d      	ldr	r3, [pc, #372]	; (800d2dc <vPortSuppressTicksAndSleep+0x180>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d902      	bls.n	800d174 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800d16e:	4b5b      	ldr	r3, [pc, #364]	; (800d2dc <vPortSuppressTicksAndSleep+0x180>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800d174:	4b5a      	ldr	r3, [pc, #360]	; (800d2e0 <vPortSuppressTicksAndSleep+0x184>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a59      	ldr	r2, [pc, #356]	; (800d2e0 <vPortSuppressTicksAndSleep+0x184>)
 800d17a:	f023 0301 	bic.w	r3, r3, #1
 800d17e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800d180:	4b58      	ldr	r3, [pc, #352]	; (800d2e4 <vPortSuppressTicksAndSleep+0x188>)
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3b01      	subs	r3, #1
 800d188:	4957      	ldr	r1, [pc, #348]	; (800d2e8 <vPortSuppressTicksAndSleep+0x18c>)
 800d18a:	6809      	ldr	r1, [r1, #0]
 800d18c:	fb01 f303 	mul.w	r3, r1, r3
 800d190:	4413      	add	r3, r2
 800d192:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800d194:	4b55      	ldr	r3, [pc, #340]	; (800d2ec <vPortSuppressTicksAndSleep+0x190>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	69fa      	ldr	r2, [r7, #28]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d904      	bls.n	800d1a8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800d19e:	4b53      	ldr	r3, [pc, #332]	; (800d2ec <vPortSuppressTicksAndSleep+0x190>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	69fa      	ldr	r2, [r7, #28]
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800d1a8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800d1aa:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800d1ae:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800d1b2:	f001 fc95 	bl	800eae0 <eTaskConfirmSleepModeStatus>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d110      	bne.n	800d1de <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800d1bc:	4b49      	ldr	r3, [pc, #292]	; (800d2e4 <vPortSuppressTicksAndSleep+0x188>)
 800d1be:	4a4c      	ldr	r2, [pc, #304]	; (800d2f0 <vPortSuppressTicksAndSleep+0x194>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800d1c4:	4b46      	ldr	r3, [pc, #280]	; (800d2e0 <vPortSuppressTicksAndSleep+0x184>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a45      	ldr	r2, [pc, #276]	; (800d2e0 <vPortSuppressTicksAndSleep+0x184>)
 800d1ca:	f043 0301 	orr.w	r3, r3, #1
 800d1ce:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800d1d0:	4b45      	ldr	r3, [pc, #276]	; (800d2e8 <vPortSuppressTicksAndSleep+0x18c>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a46      	ldr	r2, [pc, #280]	; (800d2f0 <vPortSuppressTicksAndSleep+0x194>)
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800d1da:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800d1dc:	e079      	b.n	800d2d2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800d1de:	4a44      	ldr	r2, [pc, #272]	; (800d2f0 <vPortSuppressTicksAndSleep+0x194>)
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d1e4:	4b3f      	ldr	r3, [pc, #252]	; (800d2e4 <vPortSuppressTicksAndSleep+0x188>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800d1ea:	4b3d      	ldr	r3, [pc, #244]	; (800d2e0 <vPortSuppressTicksAndSleep+0x184>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a3c      	ldr	r2, [pc, #240]	; (800d2e0 <vPortSuppressTicksAndSleep+0x184>)
 800d1f0:	f043 0301 	orr.w	r3, r3, #1
 800d1f4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	613b      	str	r3, [r7, #16]
 800d1fe:	6938      	ldr	r0, [r7, #16]
 800d200:	f7f4 fcd2 	bl	8001ba8 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d004      	beq.n	800d214 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800d20a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800d20e:	bf30      	wfi
				__asm volatile( "isb" );
 800d210:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7f4 fcd1 	bl	8001bbc <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800d21a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800d21c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800d220:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800d224:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800d226:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800d22a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800d22e:	4b2c      	ldr	r3, [pc, #176]	; (800d2e0 <vPortSuppressTicksAndSleep+0x184>)
 800d230:	2206      	movs	r2, #6
 800d232:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800d234:	4b2a      	ldr	r3, [pc, #168]	; (800d2e0 <vPortSuppressTicksAndSleep+0x184>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d01d      	beq.n	800d27c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800d240:	4b29      	ldr	r3, [pc, #164]	; (800d2e8 <vPortSuppressTicksAndSleep+0x18c>)
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	4b27      	ldr	r3, [pc, #156]	; (800d2e4 <vPortSuppressTicksAndSleep+0x188>)
 800d246:	6819      	ldr	r1, [r3, #0]
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	1acb      	subs	r3, r1, r3
 800d24c:	4413      	add	r3, r2
 800d24e:	3b01      	subs	r3, #1
 800d250:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800d252:	4b26      	ldr	r3, [pc, #152]	; (800d2ec <vPortSuppressTicksAndSleep+0x190>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	697a      	ldr	r2, [r7, #20]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d304      	bcc.n	800d266 <vPortSuppressTicksAndSleep+0x10a>
 800d25c:	4b22      	ldr	r3, [pc, #136]	; (800d2e8 <vPortSuppressTicksAndSleep+0x18c>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	697a      	ldr	r2, [r7, #20]
 800d262:	429a      	cmp	r2, r3
 800d264:	d903      	bls.n	800d26e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800d266:	4b20      	ldr	r3, [pc, #128]	; (800d2e8 <vPortSuppressTicksAndSleep+0x18c>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800d26e:	4a20      	ldr	r2, [pc, #128]	; (800d2f0 <vPortSuppressTicksAndSleep+0x194>)
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	3b01      	subs	r3, #1
 800d278:	61bb      	str	r3, [r7, #24]
 800d27a:	e018      	b.n	800d2ae <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800d27c:	4b1a      	ldr	r3, [pc, #104]	; (800d2e8 <vPortSuppressTicksAndSleep+0x18c>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	fb03 f202 	mul.w	r2, r3, r2
 800d286:	4b17      	ldr	r3, [pc, #92]	; (800d2e4 <vPortSuppressTicksAndSleep+0x188>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800d28e:	4b16      	ldr	r3, [pc, #88]	; (800d2e8 <vPortSuppressTicksAndSleep+0x18c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	fbb2 f3f3 	udiv	r3, r2, r3
 800d298:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	3301      	adds	r3, #1
 800d29e:	4a12      	ldr	r2, [pc, #72]	; (800d2e8 <vPortSuppressTicksAndSleep+0x18c>)
 800d2a0:	6812      	ldr	r2, [r2, #0]
 800d2a2:	fb03 f202 	mul.w	r2, r3, r2
 800d2a6:	4912      	ldr	r1, [pc, #72]	; (800d2f0 <vPortSuppressTicksAndSleep+0x194>)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d2ae:	4b0d      	ldr	r3, [pc, #52]	; (800d2e4 <vPortSuppressTicksAndSleep+0x188>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800d2b4:	4b0a      	ldr	r3, [pc, #40]	; (800d2e0 <vPortSuppressTicksAndSleep+0x184>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a09      	ldr	r2, [pc, #36]	; (800d2e0 <vPortSuppressTicksAndSleep+0x184>)
 800d2ba:	f043 0301 	orr.w	r3, r3, #1
 800d2be:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800d2c0:	69b8      	ldr	r0, [r7, #24]
 800d2c2:	f001 f8f5 	bl	800e4b0 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800d2c6:	4b08      	ldr	r3, [pc, #32]	; (800d2e8 <vPortSuppressTicksAndSleep+0x18c>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a09      	ldr	r2, [pc, #36]	; (800d2f0 <vPortSuppressTicksAndSleep+0x194>)
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800d2d0:	b662      	cpsie	i
	}
 800d2d2:	bf00      	nop
 800d2d4:	3720      	adds	r7, #32
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	20004ec8 	.word	0x20004ec8
 800d2e0:	e000e010 	.word	0xe000e010
 800d2e4:	e000e018 	.word	0xe000e018
 800d2e8:	20004ec4 	.word	0x20004ec4
 800d2ec:	20004ecc 	.word	0x20004ecc
 800d2f0:	e000e014 	.word	0xe000e014

0800d2f4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800d2f8:	4b14      	ldr	r3, [pc, #80]	; (800d34c <vPortSetupTimerInterrupt+0x58>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4a14      	ldr	r2, [pc, #80]	; (800d350 <vPortSetupTimerInterrupt+0x5c>)
 800d2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d302:	099b      	lsrs	r3, r3, #6
 800d304:	4a13      	ldr	r2, [pc, #76]	; (800d354 <vPortSetupTimerInterrupt+0x60>)
 800d306:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800d308:	4b12      	ldr	r3, [pc, #72]	; (800d354 <vPortSetupTimerInterrupt+0x60>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d310:	fbb2 f3f3 	udiv	r3, r2, r3
 800d314:	4a10      	ldr	r2, [pc, #64]	; (800d358 <vPortSetupTimerInterrupt+0x64>)
 800d316:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800d318:	4b10      	ldr	r3, [pc, #64]	; (800d35c <vPortSetupTimerInterrupt+0x68>)
 800d31a:	222d      	movs	r2, #45	; 0x2d
 800d31c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d31e:	4b10      	ldr	r3, [pc, #64]	; (800d360 <vPortSetupTimerInterrupt+0x6c>)
 800d320:	2200      	movs	r2, #0
 800d322:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d324:	4b0f      	ldr	r3, [pc, #60]	; (800d364 <vPortSetupTimerInterrupt+0x70>)
 800d326:	2200      	movs	r2, #0
 800d328:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d32a:	4b08      	ldr	r3, [pc, #32]	; (800d34c <vPortSetupTimerInterrupt+0x58>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a08      	ldr	r2, [pc, #32]	; (800d350 <vPortSetupTimerInterrupt+0x5c>)
 800d330:	fba2 2303 	umull	r2, r3, r2, r3
 800d334:	099b      	lsrs	r3, r3, #6
 800d336:	4a0c      	ldr	r2, [pc, #48]	; (800d368 <vPortSetupTimerInterrupt+0x74>)
 800d338:	3b01      	subs	r3, #1
 800d33a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d33c:	4b08      	ldr	r3, [pc, #32]	; (800d360 <vPortSetupTimerInterrupt+0x6c>)
 800d33e:	2207      	movs	r2, #7
 800d340:	601a      	str	r2, [r3, #0]
}
 800d342:	bf00      	nop
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	20000000 	.word	0x20000000
 800d350:	10624dd3 	.word	0x10624dd3
 800d354:	20004ec4 	.word	0x20004ec4
 800d358:	20004ec8 	.word	0x20004ec8
 800d35c:	20004ecc 	.word	0x20004ecc
 800d360:	e000e010 	.word	0xe000e010
 800d364:	e000e018 	.word	0xe000e018
 800d368:	e000e014 	.word	0xe000e014

0800d36c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d36c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d37c <vPortEnableVFP+0x10>
 800d370:	6801      	ldr	r1, [r0, #0]
 800d372:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d376:	6001      	str	r1, [r0, #0]
 800d378:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d37a:	bf00      	nop
 800d37c:	e000ed88 	.word	0xe000ed88

0800d380 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d386:	f3ef 8305 	mrs	r3, IPSR
 800d38a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b0f      	cmp	r3, #15
 800d390:	d914      	bls.n	800d3bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d392:	4a17      	ldr	r2, [pc, #92]	; (800d3f0 <vPortValidateInterruptPriority+0x70>)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	4413      	add	r3, r2
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d39c:	4b15      	ldr	r3, [pc, #84]	; (800d3f4 <vPortValidateInterruptPriority+0x74>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	7afa      	ldrb	r2, [r7, #11]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d20a      	bcs.n	800d3bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3aa:	f383 8811 	msr	BASEPRI, r3
 800d3ae:	f3bf 8f6f 	isb	sy
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	607b      	str	r3, [r7, #4]
}
 800d3b8:	bf00      	nop
 800d3ba:	e7fe      	b.n	800d3ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d3bc:	4b0e      	ldr	r3, [pc, #56]	; (800d3f8 <vPortValidateInterruptPriority+0x78>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d3c4:	4b0d      	ldr	r3, [pc, #52]	; (800d3fc <vPortValidateInterruptPriority+0x7c>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d90a      	bls.n	800d3e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d0:	f383 8811 	msr	BASEPRI, r3
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	603b      	str	r3, [r7, #0]
}
 800d3de:	bf00      	nop
 800d3e0:	e7fe      	b.n	800d3e0 <vPortValidateInterruptPriority+0x60>
	}
 800d3e2:	bf00      	nop
 800d3e4:	3714      	adds	r7, #20
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	e000e3f0 	.word	0xe000e3f0
 800d3f4:	20004ed0 	.word	0x20004ed0
 800d3f8:	e000ed0c 	.word	0xe000ed0c
 800d3fc:	20004ed4 	.word	0x20004ed4

0800d400 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10a      	bne.n	800d42a <xQueueGenericReset+0x2a>
	__asm volatile
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	f383 8811 	msr	BASEPRI, r3
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f3bf 8f4f 	dsb	sy
 800d424:	60bb      	str	r3, [r7, #8]
}
 800d426:	bf00      	nop
 800d428:	e7fe      	b.n	800d428 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d42a:	f7ff fde3 	bl	800cff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d436:	68f9      	ldr	r1, [r7, #12]
 800d438:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d43a:	fb01 f303 	mul.w	r3, r1, r3
 800d43e:	441a      	add	r2, r3
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2200      	movs	r2, #0
 800d448:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d45a:	3b01      	subs	r3, #1
 800d45c:	68f9      	ldr	r1, [r7, #12]
 800d45e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d460:	fb01 f303 	mul.w	r3, r1, r3
 800d464:	441a      	add	r2, r3
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	22ff      	movs	r2, #255	; 0xff
 800d46e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	22ff      	movs	r2, #255	; 0xff
 800d476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d114      	bne.n	800d4aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d01a      	beq.n	800d4be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	3310      	adds	r3, #16
 800d48c:	4618      	mov	r0, r3
 800d48e:	f001 f9eb 	bl	800e868 <xTaskRemoveFromEventList>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d012      	beq.n	800d4be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d498:	4b0c      	ldr	r3, [pc, #48]	; (800d4cc <xQueueGenericReset+0xcc>)
 800d49a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d49e:	601a      	str	r2, [r3, #0]
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	e009      	b.n	800d4be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3310      	adds	r3, #16
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7ff fbbc 	bl	800cc2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	3324      	adds	r3, #36	; 0x24
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7ff fbb7 	bl	800cc2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d4be:	f7ff fdc9 	bl	800d054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d4c2:	2301      	movs	r3, #1
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	e000ed04 	.word	0xe000ed04

0800d4d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b08e      	sub	sp, #56	; 0x38
 800d4d4:	af02      	add	r7, sp, #8
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
 800d4dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10a      	bne.n	800d4fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e8:	f383 8811 	msr	BASEPRI, r3
 800d4ec:	f3bf 8f6f 	isb	sy
 800d4f0:	f3bf 8f4f 	dsb	sy
 800d4f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4f6:	bf00      	nop
 800d4f8:	e7fe      	b.n	800d4f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d10a      	bne.n	800d516 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d512:	bf00      	nop
 800d514:	e7fe      	b.n	800d514 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d002      	beq.n	800d522 <xQueueGenericCreateStatic+0x52>
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d001      	beq.n	800d526 <xQueueGenericCreateStatic+0x56>
 800d522:	2301      	movs	r3, #1
 800d524:	e000      	b.n	800d528 <xQueueGenericCreateStatic+0x58>
 800d526:	2300      	movs	r3, #0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d10a      	bne.n	800d542 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d530:	f383 8811 	msr	BASEPRI, r3
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	623b      	str	r3, [r7, #32]
}
 800d53e:	bf00      	nop
 800d540:	e7fe      	b.n	800d540 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d102      	bne.n	800d54e <xQueueGenericCreateStatic+0x7e>
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d101      	bne.n	800d552 <xQueueGenericCreateStatic+0x82>
 800d54e:	2301      	movs	r3, #1
 800d550:	e000      	b.n	800d554 <xQueueGenericCreateStatic+0x84>
 800d552:	2300      	movs	r3, #0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10a      	bne.n	800d56e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55c:	f383 8811 	msr	BASEPRI, r3
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	61fb      	str	r3, [r7, #28]
}
 800d56a:	bf00      	nop
 800d56c:	e7fe      	b.n	800d56c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d56e:	2350      	movs	r3, #80	; 0x50
 800d570:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	2b50      	cmp	r3, #80	; 0x50
 800d576:	d00a      	beq.n	800d58e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	61bb      	str	r3, [r7, #24]
}
 800d58a:	bf00      	nop
 800d58c:	e7fe      	b.n	800d58c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d58e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00d      	beq.n	800d5b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59c:	2201      	movs	r2, #1
 800d59e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	68b9      	ldr	r1, [r7, #8]
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f000 f805 	bl	800d5c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3730      	adds	r7, #48	; 0x30
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
 800d5cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d103      	bne.n	800d5dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	69ba      	ldr	r2, [r7, #24]
 800d5d8:	601a      	str	r2, [r3, #0]
 800d5da:	e002      	b.n	800d5e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d5ee:	2101      	movs	r1, #1
 800d5f0:	69b8      	ldr	r0, [r7, #24]
 800d5f2:	f7ff ff05 	bl	800d400 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	78fa      	ldrb	r2, [r7, #3]
 800d5fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d5fe:	bf00      	nop
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
	...

0800d608 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b08e      	sub	sp, #56	; 0x38
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
 800d614:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d616:	2300      	movs	r3, #0
 800d618:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10a      	bne.n	800d63a <xQueueGenericSend+0x32>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d636:	bf00      	nop
 800d638:	e7fe      	b.n	800d638 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d103      	bne.n	800d648 <xQueueGenericSend+0x40>
 800d640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d644:	2b00      	cmp	r3, #0
 800d646:	d101      	bne.n	800d64c <xQueueGenericSend+0x44>
 800d648:	2301      	movs	r3, #1
 800d64a:	e000      	b.n	800d64e <xQueueGenericSend+0x46>
 800d64c:	2300      	movs	r3, #0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d10a      	bne.n	800d668 <xQueueGenericSend+0x60>
	__asm volatile
 800d652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d656:	f383 8811 	msr	BASEPRI, r3
 800d65a:	f3bf 8f6f 	isb	sy
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d664:	bf00      	nop
 800d666:	e7fe      	b.n	800d666 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d103      	bne.n	800d676 <xQueueGenericSend+0x6e>
 800d66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d672:	2b01      	cmp	r3, #1
 800d674:	d101      	bne.n	800d67a <xQueueGenericSend+0x72>
 800d676:	2301      	movs	r3, #1
 800d678:	e000      	b.n	800d67c <xQueueGenericSend+0x74>
 800d67a:	2300      	movs	r3, #0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10a      	bne.n	800d696 <xQueueGenericSend+0x8e>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	623b      	str	r3, [r7, #32]
}
 800d692:	bf00      	nop
 800d694:	e7fe      	b.n	800d694 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d696:	f001 fb15 	bl	800ecc4 <xTaskGetSchedulerState>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d102      	bne.n	800d6a6 <xQueueGenericSend+0x9e>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d101      	bne.n	800d6aa <xQueueGenericSend+0xa2>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e000      	b.n	800d6ac <xQueueGenericSend+0xa4>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10a      	bne.n	800d6c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	61fb      	str	r3, [r7, #28]
}
 800d6c2:	bf00      	nop
 800d6c4:	e7fe      	b.n	800d6c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6c6:	f7ff fc95 	bl	800cff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d302      	bcc.n	800d6dc <xQueueGenericSend+0xd4>
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d129      	bne.n	800d730 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6dc:	683a      	ldr	r2, [r7, #0]
 800d6de:	68b9      	ldr	r1, [r7, #8]
 800d6e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6e2:	f000 fa0b 	bl	800dafc <prvCopyDataToQueue>
 800d6e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d010      	beq.n	800d712 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f2:	3324      	adds	r3, #36	; 0x24
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f001 f8b7 	bl	800e868 <xTaskRemoveFromEventList>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d013      	beq.n	800d728 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d700:	4b3f      	ldr	r3, [pc, #252]	; (800d800 <xQueueGenericSend+0x1f8>)
 800d702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d706:	601a      	str	r2, [r3, #0]
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	e00a      	b.n	800d728 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	2b00      	cmp	r3, #0
 800d716:	d007      	beq.n	800d728 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d718:	4b39      	ldr	r3, [pc, #228]	; (800d800 <xQueueGenericSend+0x1f8>)
 800d71a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d71e:	601a      	str	r2, [r3, #0]
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d728:	f7ff fc94 	bl	800d054 <vPortExitCritical>
				return pdPASS;
 800d72c:	2301      	movs	r3, #1
 800d72e:	e063      	b.n	800d7f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d103      	bne.n	800d73e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d736:	f7ff fc8d 	bl	800d054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d73a:	2300      	movs	r3, #0
 800d73c:	e05c      	b.n	800d7f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d740:	2b00      	cmp	r3, #0
 800d742:	d106      	bne.n	800d752 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d744:	f107 0314 	add.w	r3, r7, #20
 800d748:	4618      	mov	r0, r3
 800d74a:	f001 f8f3 	bl	800e934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d74e:	2301      	movs	r3, #1
 800d750:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d752:	f7ff fc7f 	bl	800d054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d756:	f000 fdb7 	bl	800e2c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d75a:	f7ff fc4b 	bl	800cff4 <vPortEnterCritical>
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d764:	b25b      	sxtb	r3, r3
 800d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76a:	d103      	bne.n	800d774 <xQueueGenericSend+0x16c>
 800d76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76e:	2200      	movs	r2, #0
 800d770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d77a:	b25b      	sxtb	r3, r3
 800d77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d780:	d103      	bne.n	800d78a <xQueueGenericSend+0x182>
 800d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d784:	2200      	movs	r2, #0
 800d786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d78a:	f7ff fc63 	bl	800d054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d78e:	1d3a      	adds	r2, r7, #4
 800d790:	f107 0314 	add.w	r3, r7, #20
 800d794:	4611      	mov	r1, r2
 800d796:	4618      	mov	r0, r3
 800d798:	f001 f8e2 	bl	800e960 <xTaskCheckForTimeOut>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d124      	bne.n	800d7ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d7a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7a4:	f000 faa2 	bl	800dcec <prvIsQueueFull>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d018      	beq.n	800d7e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b0:	3310      	adds	r3, #16
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 f806 	bl	800e7c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d7bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7be:	f000 fa2d 	bl	800dc1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d7c2:	f000 fdc7 	bl	800e354 <xTaskResumeAll>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f47f af7c 	bne.w	800d6c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d7ce:	4b0c      	ldr	r3, [pc, #48]	; (800d800 <xQueueGenericSend+0x1f8>)
 800d7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	f3bf 8f4f 	dsb	sy
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	e772      	b.n	800d6c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d7e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7e2:	f000 fa1b 	bl	800dc1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7e6:	f000 fdb5 	bl	800e354 <xTaskResumeAll>
 800d7ea:	e76c      	b.n	800d6c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d7ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7ee:	f000 fa15 	bl	800dc1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7f2:	f000 fdaf 	bl	800e354 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d7f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3738      	adds	r7, #56	; 0x38
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	e000ed04 	.word	0xe000ed04

0800d804 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b090      	sub	sp, #64	; 0x40
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
 800d810:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d10a      	bne.n	800d832 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d820:	f383 8811 	msr	BASEPRI, r3
 800d824:	f3bf 8f6f 	isb	sy
 800d828:	f3bf 8f4f 	dsb	sy
 800d82c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d82e:	bf00      	nop
 800d830:	e7fe      	b.n	800d830 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d103      	bne.n	800d840 <xQueueGenericSendFromISR+0x3c>
 800d838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d101      	bne.n	800d844 <xQueueGenericSendFromISR+0x40>
 800d840:	2301      	movs	r3, #1
 800d842:	e000      	b.n	800d846 <xQueueGenericSendFromISR+0x42>
 800d844:	2300      	movs	r3, #0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10a      	bne.n	800d860 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84e:	f383 8811 	msr	BASEPRI, r3
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	f3bf 8f4f 	dsb	sy
 800d85a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d85c:	bf00      	nop
 800d85e:	e7fe      	b.n	800d85e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	2b02      	cmp	r3, #2
 800d864:	d103      	bne.n	800d86e <xQueueGenericSendFromISR+0x6a>
 800d866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d101      	bne.n	800d872 <xQueueGenericSendFromISR+0x6e>
 800d86e:	2301      	movs	r3, #1
 800d870:	e000      	b.n	800d874 <xQueueGenericSendFromISR+0x70>
 800d872:	2300      	movs	r3, #0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d10a      	bne.n	800d88e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87c:	f383 8811 	msr	BASEPRI, r3
 800d880:	f3bf 8f6f 	isb	sy
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	623b      	str	r3, [r7, #32]
}
 800d88a:	bf00      	nop
 800d88c:	e7fe      	b.n	800d88c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d88e:	f7ff fd77 	bl	800d380 <vPortValidateInterruptPriority>
	__asm volatile
 800d892:	f3ef 8211 	mrs	r2, BASEPRI
 800d896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d89a:	f383 8811 	msr	BASEPRI, r3
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	f3bf 8f4f 	dsb	sy
 800d8a6:	61fa      	str	r2, [r7, #28]
 800d8a8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d8aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d302      	bcc.n	800d8c0 <xQueueGenericSendFromISR+0xbc>
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d12f      	bne.n	800d920 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8d0:	683a      	ldr	r2, [r7, #0]
 800d8d2:	68b9      	ldr	r1, [r7, #8]
 800d8d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d8d6:	f000 f911 	bl	800dafc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d8da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e2:	d112      	bne.n	800d90a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d016      	beq.n	800d91a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ee:	3324      	adds	r3, #36	; 0x24
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f000 ffb9 	bl	800e868 <xTaskRemoveFromEventList>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00e      	beq.n	800d91a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00b      	beq.n	800d91a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2201      	movs	r2, #1
 800d906:	601a      	str	r2, [r3, #0]
 800d908:	e007      	b.n	800d91a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d90a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d90e:	3301      	adds	r3, #1
 800d910:	b2db      	uxtb	r3, r3
 800d912:	b25a      	sxtb	r2, r3
 800d914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d91a:	2301      	movs	r3, #1
 800d91c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d91e:	e001      	b.n	800d924 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d920:	2300      	movs	r3, #0
 800d922:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d926:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	f383 8811 	msr	BASEPRI, r3
}
 800d92e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d932:	4618      	mov	r0, r3
 800d934:	3740      	adds	r7, #64	; 0x40
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
	...

0800d93c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b08c      	sub	sp, #48	; 0x30
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d948:	2300      	movs	r3, #0
 800d94a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	2b00      	cmp	r3, #0
 800d954:	d10a      	bne.n	800d96c <xQueueReceive+0x30>
	__asm volatile
 800d956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95a:	f383 8811 	msr	BASEPRI, r3
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	623b      	str	r3, [r7, #32]
}
 800d968:	bf00      	nop
 800d96a:	e7fe      	b.n	800d96a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d103      	bne.n	800d97a <xQueueReceive+0x3e>
 800d972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d976:	2b00      	cmp	r3, #0
 800d978:	d101      	bne.n	800d97e <xQueueReceive+0x42>
 800d97a:	2301      	movs	r3, #1
 800d97c:	e000      	b.n	800d980 <xQueueReceive+0x44>
 800d97e:	2300      	movs	r3, #0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10a      	bne.n	800d99a <xQueueReceive+0x5e>
	__asm volatile
 800d984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d988:	f383 8811 	msr	BASEPRI, r3
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	61fb      	str	r3, [r7, #28]
}
 800d996:	bf00      	nop
 800d998:	e7fe      	b.n	800d998 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d99a:	f001 f993 	bl	800ecc4 <xTaskGetSchedulerState>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d102      	bne.n	800d9aa <xQueueReceive+0x6e>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d101      	bne.n	800d9ae <xQueueReceive+0x72>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e000      	b.n	800d9b0 <xQueueReceive+0x74>
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d10a      	bne.n	800d9ca <xQueueReceive+0x8e>
	__asm volatile
 800d9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b8:	f383 8811 	msr	BASEPRI, r3
 800d9bc:	f3bf 8f6f 	isb	sy
 800d9c0:	f3bf 8f4f 	dsb	sy
 800d9c4:	61bb      	str	r3, [r7, #24]
}
 800d9c6:	bf00      	nop
 800d9c8:	e7fe      	b.n	800d9c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9ca:	f7ff fb13 	bl	800cff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d01f      	beq.n	800da1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9da:	68b9      	ldr	r1, [r7, #8]
 800d9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9de:	f000 f8f7 	bl	800dbd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	1e5a      	subs	r2, r3, #1
 800d9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00f      	beq.n	800da12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f4:	3310      	adds	r3, #16
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f000 ff36 	bl	800e868 <xTaskRemoveFromEventList>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d007      	beq.n	800da12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da02:	4b3d      	ldr	r3, [pc, #244]	; (800daf8 <xQueueReceive+0x1bc>)
 800da04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da08:	601a      	str	r2, [r3, #0]
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da12:	f7ff fb1f 	bl	800d054 <vPortExitCritical>
				return pdPASS;
 800da16:	2301      	movs	r3, #1
 800da18:	e069      	b.n	800daee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d103      	bne.n	800da28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da20:	f7ff fb18 	bl	800d054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da24:	2300      	movs	r3, #0
 800da26:	e062      	b.n	800daee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d106      	bne.n	800da3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da2e:	f107 0310 	add.w	r3, r7, #16
 800da32:	4618      	mov	r0, r3
 800da34:	f000 ff7e 	bl	800e934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da38:	2301      	movs	r3, #1
 800da3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da3c:	f7ff fb0a 	bl	800d054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da40:	f000 fc42 	bl	800e2c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da44:	f7ff fad6 	bl	800cff4 <vPortEnterCritical>
 800da48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da4e:	b25b      	sxtb	r3, r3
 800da50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da54:	d103      	bne.n	800da5e <xQueueReceive+0x122>
 800da56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da64:	b25b      	sxtb	r3, r3
 800da66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da6a:	d103      	bne.n	800da74 <xQueueReceive+0x138>
 800da6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6e:	2200      	movs	r2, #0
 800da70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da74:	f7ff faee 	bl	800d054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da78:	1d3a      	adds	r2, r7, #4
 800da7a:	f107 0310 	add.w	r3, r7, #16
 800da7e:	4611      	mov	r1, r2
 800da80:	4618      	mov	r0, r3
 800da82:	f000 ff6d 	bl	800e960 <xTaskCheckForTimeOut>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d123      	bne.n	800dad4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da8e:	f000 f917 	bl	800dcc0 <prvIsQueueEmpty>
 800da92:	4603      	mov	r3, r0
 800da94:	2b00      	cmp	r3, #0
 800da96:	d017      	beq.n	800dac8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9a:	3324      	adds	r3, #36	; 0x24
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	4611      	mov	r1, r2
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 fe91 	bl	800e7c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800daa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daa8:	f000 f8b8 	bl	800dc1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800daac:	f000 fc52 	bl	800e354 <xTaskResumeAll>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d189      	bne.n	800d9ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dab6:	4b10      	ldr	r3, [pc, #64]	; (800daf8 <xQueueReceive+0x1bc>)
 800dab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	e780      	b.n	800d9ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daca:	f000 f8a7 	bl	800dc1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dace:	f000 fc41 	bl	800e354 <xTaskResumeAll>
 800dad2:	e77a      	b.n	800d9ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dad6:	f000 f8a1 	bl	800dc1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dada:	f000 fc3b 	bl	800e354 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dae0:	f000 f8ee 	bl	800dcc0 <prvIsQueueEmpty>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f43f af6f 	beq.w	800d9ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800daec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3730      	adds	r7, #48	; 0x30
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	e000ed04 	.word	0xe000ed04

0800dafc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b086      	sub	sp, #24
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800db08:	2300      	movs	r3, #0
 800db0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10d      	bne.n	800db36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d14d      	bne.n	800dbbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	4618      	mov	r0, r3
 800db28:	f001 f8ea 	bl	800ed00 <xTaskPriorityDisinherit>
 800db2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2200      	movs	r2, #0
 800db32:	609a      	str	r2, [r3, #8]
 800db34:	e043      	b.n	800dbbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d119      	bne.n	800db70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6858      	ldr	r0, [r3, #4]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db44:	461a      	mov	r2, r3
 800db46:	68b9      	ldr	r1, [r7, #8]
 800db48:	f001 fdd6 	bl	800f6f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	685a      	ldr	r2, [r3, #4]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db54:	441a      	add	r2, r3
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	685a      	ldr	r2, [r3, #4]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	429a      	cmp	r2, r3
 800db64:	d32b      	bcc.n	800dbbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	605a      	str	r2, [r3, #4]
 800db6e:	e026      	b.n	800dbbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	68d8      	ldr	r0, [r3, #12]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db78:	461a      	mov	r2, r3
 800db7a:	68b9      	ldr	r1, [r7, #8]
 800db7c:	f001 fdbc 	bl	800f6f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	68da      	ldr	r2, [r3, #12]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db88:	425b      	negs	r3, r3
 800db8a:	441a      	add	r2, r3
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	68da      	ldr	r2, [r3, #12]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d207      	bcs.n	800dbac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	689a      	ldr	r2, [r3, #8]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba4:	425b      	negs	r3, r3
 800dba6:	441a      	add	r2, r3
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2b02      	cmp	r3, #2
 800dbb0:	d105      	bne.n	800dbbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d002      	beq.n	800dbbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	1c5a      	adds	r2, r3, #1
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dbc6:	697b      	ldr	r3, [r7, #20]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3718      	adds	r7, #24
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d018      	beq.n	800dc14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	68da      	ldr	r2, [r3, #12]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbea:	441a      	add	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68da      	ldr	r2, [r3, #12]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d303      	bcc.n	800dc04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68d9      	ldr	r1, [r3, #12]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	6838      	ldr	r0, [r7, #0]
 800dc10:	f001 fd72 	bl	800f6f8 <memcpy>
	}
}
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc24:	f7ff f9e6 	bl	800cff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc30:	e011      	b.n	800dc56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d012      	beq.n	800dc60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	3324      	adds	r3, #36	; 0x24
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 fe12 	bl	800e868 <xTaskRemoveFromEventList>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc4a:	f000 fefb 	bl	800ea44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc4e:	7bfb      	ldrb	r3, [r7, #15]
 800dc50:	3b01      	subs	r3, #1
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	dce9      	bgt.n	800dc32 <prvUnlockQueue+0x16>
 800dc5e:	e000      	b.n	800dc62 <prvUnlockQueue+0x46>
					break;
 800dc60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	22ff      	movs	r2, #255	; 0xff
 800dc66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc6a:	f7ff f9f3 	bl	800d054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc6e:	f7ff f9c1 	bl	800cff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc7a:	e011      	b.n	800dca0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	691b      	ldr	r3, [r3, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d012      	beq.n	800dcaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	3310      	adds	r3, #16
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f000 fded 	bl	800e868 <xTaskRemoveFromEventList>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d001      	beq.n	800dc98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc94:	f000 fed6 	bl	800ea44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc98:	7bbb      	ldrb	r3, [r7, #14]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	dce9      	bgt.n	800dc7c <prvUnlockQueue+0x60>
 800dca8:	e000      	b.n	800dcac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dcaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	22ff      	movs	r2, #255	; 0xff
 800dcb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dcb4:	f7ff f9ce 	bl	800d054 <vPortExitCritical>
}
 800dcb8:	bf00      	nop
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcc8:	f7ff f994 	bl	800cff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d102      	bne.n	800dcda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	60fb      	str	r3, [r7, #12]
 800dcd8:	e001      	b.n	800dcde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcde:	f7ff f9b9 	bl	800d054 <vPortExitCritical>

	return xReturn;
 800dce2:	68fb      	ldr	r3, [r7, #12]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcf4:	f7ff f97e 	bl	800cff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d102      	bne.n	800dd0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dd04:	2301      	movs	r3, #1
 800dd06:	60fb      	str	r3, [r7, #12]
 800dd08:	e001      	b.n	800dd0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd0e:	f7ff f9a1 	bl	800d054 <vPortExitCritical>

	return xReturn;
 800dd12:	68fb      	ldr	r3, [r7, #12]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3710      	adds	r7, #16
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd26:	2300      	movs	r3, #0
 800dd28:	60fb      	str	r3, [r7, #12]
 800dd2a:	e014      	b.n	800dd56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dd2c:	4a0f      	ldr	r2, [pc, #60]	; (800dd6c <vQueueAddToRegistry+0x50>)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10b      	bne.n	800dd50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd38:	490c      	ldr	r1, [pc, #48]	; (800dd6c <vQueueAddToRegistry+0x50>)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	683a      	ldr	r2, [r7, #0]
 800dd3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dd42:	4a0a      	ldr	r2, [pc, #40]	; (800dd6c <vQueueAddToRegistry+0x50>)
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	00db      	lsls	r3, r3, #3
 800dd48:	4413      	add	r3, r2
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd4e:	e006      	b.n	800dd5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	3301      	adds	r3, #1
 800dd54:	60fb      	str	r3, [r7, #12]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2b07      	cmp	r3, #7
 800dd5a:	d9e7      	bls.n	800dd2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd5c:	bf00      	nop
 800dd5e:	bf00      	nop
 800dd60:	3714      	adds	r7, #20
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	20004ed8 	.word	0x20004ed8

0800dd70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b086      	sub	sp, #24
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	60b9      	str	r1, [r7, #8]
 800dd7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd80:	f7ff f938 	bl	800cff4 <vPortEnterCritical>
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd8a:	b25b      	sxtb	r3, r3
 800dd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd90:	d103      	bne.n	800dd9a <vQueueWaitForMessageRestricted+0x2a>
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dda0:	b25b      	sxtb	r3, r3
 800dda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda6:	d103      	bne.n	800ddb0 <vQueueWaitForMessageRestricted+0x40>
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddb0:	f7ff f950 	bl	800d054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d106      	bne.n	800ddca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	3324      	adds	r3, #36	; 0x24
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	68b9      	ldr	r1, [r7, #8]
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f000 fd23 	bl	800e810 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ddca:	6978      	ldr	r0, [r7, #20]
 800ddcc:	f7ff ff26 	bl	800dc1c <prvUnlockQueue>
	}
 800ddd0:	bf00      	nop
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08e      	sub	sp, #56	; 0x38
 800dddc:	af04      	add	r7, sp, #16
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
 800dde4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dde6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10a      	bne.n	800de02 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	623b      	str	r3, [r7, #32]
}
 800ddfe:	bf00      	nop
 800de00:	e7fe      	b.n	800de00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800de02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10a      	bne.n	800de1e <xTaskCreateStatic+0x46>
	__asm volatile
 800de08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	61fb      	str	r3, [r7, #28]
}
 800de1a:	bf00      	nop
 800de1c:	e7fe      	b.n	800de1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de1e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800de22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800de2a:	d00a      	beq.n	800de42 <xTaskCreateStatic+0x6a>
	__asm volatile
 800de2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de30:	f383 8811 	msr	BASEPRI, r3
 800de34:	f3bf 8f6f 	isb	sy
 800de38:	f3bf 8f4f 	dsb	sy
 800de3c:	61bb      	str	r3, [r7, #24]
}
 800de3e:	bf00      	nop
 800de40:	e7fe      	b.n	800de40 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de46:	2b00      	cmp	r3, #0
 800de48:	d01e      	beq.n	800de88 <xTaskCreateStatic+0xb0>
 800de4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d01b      	beq.n	800de88 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5c:	2202      	movs	r2, #2
 800de5e:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de62:	2300      	movs	r3, #0
 800de64:	9303      	str	r3, [sp, #12]
 800de66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de68:	9302      	str	r3, [sp, #8]
 800de6a:	f107 0314 	add.w	r3, r7, #20
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	68b9      	ldr	r1, [r7, #8]
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f000 f852 	bl	800df24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de82:	f000 f90b 	bl	800e09c <prvAddNewTaskToReadyList>
 800de86:	e001      	b.n	800de8c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800de88:	2300      	movs	r3, #0
 800de8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de8c:	697b      	ldr	r3, [r7, #20]
	}
 800de8e:	4618      	mov	r0, r3
 800de90:	3728      	adds	r7, #40	; 0x28
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}

0800de96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de96:	b580      	push	{r7, lr}
 800de98:	b08c      	sub	sp, #48	; 0x30
 800de9a:	af04      	add	r7, sp, #16
 800de9c:	60f8      	str	r0, [r7, #12]
 800de9e:	60b9      	str	r1, [r7, #8]
 800dea0:	603b      	str	r3, [r7, #0]
 800dea2:	4613      	mov	r3, r2
 800dea4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dea6:	88fb      	ldrh	r3, [r7, #6]
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fe fcd0 	bl	800c850 <pvPortMalloc>
 800deb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00f      	beq.n	800ded8 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800deb8:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800debc:	f7fe fcc8 	bl	800c850 <pvPortMalloc>
 800dec0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d003      	beq.n	800ded0 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	697a      	ldr	r2, [r7, #20]
 800decc:	631a      	str	r2, [r3, #48]	; 0x30
 800dece:	e005      	b.n	800dedc <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ded0:	6978      	ldr	r0, [r7, #20]
 800ded2:	f7fe fd8d 	bl	800c9f0 <vPortFree>
 800ded6:	e001      	b.n	800dedc <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ded8:	2300      	movs	r3, #0
 800deda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d017      	beq.n	800df12 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800deea:	88fa      	ldrh	r2, [r7, #6]
 800deec:	2300      	movs	r3, #0
 800deee:	9303      	str	r3, [sp, #12]
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	9302      	str	r3, [sp, #8]
 800def4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def6:	9301      	str	r3, [sp, #4]
 800def8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	68b9      	ldr	r1, [r7, #8]
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f000 f80f 	bl	800df24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df06:	69f8      	ldr	r0, [r7, #28]
 800df08:	f000 f8c8 	bl	800e09c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df0c:	2301      	movs	r3, #1
 800df0e:	61bb      	str	r3, [r7, #24]
 800df10:	e002      	b.n	800df18 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df12:	f04f 33ff 	mov.w	r3, #4294967295
 800df16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800df18:	69bb      	ldr	r3, [r7, #24]
	}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3720      	adds	r7, #32
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
	...

0800df24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b088      	sub	sp, #32
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	607a      	str	r2, [r7, #4]
 800df30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	461a      	mov	r2, r3
 800df3c:	21a5      	movs	r1, #165	; 0xa5
 800df3e:	f001 fbe9 	bl	800f714 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df4c:	3b01      	subs	r3, #1
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	f023 0307 	bic.w	r3, r3, #7
 800df5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	f003 0307 	and.w	r3, r3, #7
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00a      	beq.n	800df7c <prvInitialiseNewTask+0x58>
	__asm volatile
 800df66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6a:	f383 8811 	msr	BASEPRI, r3
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	f3bf 8f4f 	dsb	sy
 800df76:	617b      	str	r3, [r7, #20]
}
 800df78:	bf00      	nop
 800df7a:	e7fe      	b.n	800df7a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800df7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7e:	69ba      	ldr	r2, [r7, #24]
 800df80:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d01f      	beq.n	800dfca <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df8a:	2300      	movs	r3, #0
 800df8c:	61fb      	str	r3, [r7, #28]
 800df8e:	e012      	b.n	800dfb6 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df90:	68ba      	ldr	r2, [r7, #8]
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	4413      	add	r3, r2
 800df96:	7819      	ldrb	r1, [r3, #0]
 800df98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	4413      	add	r3, r2
 800df9e:	3334      	adds	r3, #52	; 0x34
 800dfa0:	460a      	mov	r2, r1
 800dfa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d006      	beq.n	800dfbe <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	61fb      	str	r3, [r7, #28]
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	2bfe      	cmp	r3, #254	; 0xfe
 800dfba:	d9e9      	bls.n	800df90 <prvInitialiseNewTask+0x6c>
 800dfbc:	e000      	b.n	800dfc0 <prvInitialiseNewTask+0x9c>
			{
				break;
 800dfbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800dfc8:	e003      	b.n	800dfd2 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd4:	2b37      	cmp	r3, #55	; 0x37
 800dfd6:	d901      	bls.n	800dfdc <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfd8:	2337      	movs	r3, #55	; 0x37
 800dfda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	2200      	movs	r2, #0
 800dfee:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff4:	3304      	adds	r3, #4
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fe fe38 	bl	800cc6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffe:	3318      	adds	r3, #24
 800e000:	4618      	mov	r0, r3
 800e002:	f7fe fe33 	bl	800cc6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e00a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e01a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01e:	2200      	movs	r2, #0
 800e020:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e026:	2200      	movs	r2, #0
 800e028:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02e:	2200      	movs	r2, #0
 800e030:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e036:	2200      	movs	r2, #0
 800e038:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e042:	2260      	movs	r2, #96	; 0x60
 800e044:	2100      	movs	r1, #0
 800e046:	4618      	mov	r0, r3
 800e048:	f001 fb64 	bl	800f714 <memset>
 800e04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04e:	4a10      	ldr	r2, [pc, #64]	; (800e090 <prvInitialiseNewTask+0x16c>)
 800e050:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800e054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e056:	4a0f      	ldr	r2, [pc, #60]	; (800e094 <prvInitialiseNewTask+0x170>)
 800e058:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800e05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05e:	4a0e      	ldr	r2, [pc, #56]	; (800e098 <prvInitialiseNewTask+0x174>)
 800e060:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800e064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e066:	2200      	movs	r2, #0
 800e068:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e06c:	683a      	ldr	r2, [r7, #0]
 800e06e:	68f9      	ldr	r1, [r7, #12]
 800e070:	69b8      	ldr	r0, [r7, #24]
 800e072:	f7fe fe8f 	bl	800cd94 <pxPortInitialiseStack>
 800e076:	4602      	mov	r2, r0
 800e078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e086:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e088:	bf00      	nop
 800e08a:	3720      	adds	r7, #32
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	08010120 	.word	0x08010120
 800e094:	08010140 	.word	0x08010140
 800e098:	08010100 	.word	0x08010100

0800e09c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e0a4:	f7fe ffa6 	bl	800cff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e0a8:	4b2d      	ldr	r3, [pc, #180]	; (800e160 <prvAddNewTaskToReadyList+0xc4>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	4a2c      	ldr	r2, [pc, #176]	; (800e160 <prvAddNewTaskToReadyList+0xc4>)
 800e0b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e0b2:	4b2c      	ldr	r3, [pc, #176]	; (800e164 <prvAddNewTaskToReadyList+0xc8>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d109      	bne.n	800e0ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e0ba:	4a2a      	ldr	r2, [pc, #168]	; (800e164 <prvAddNewTaskToReadyList+0xc8>)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e0c0:	4b27      	ldr	r3, [pc, #156]	; (800e160 <prvAddNewTaskToReadyList+0xc4>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d110      	bne.n	800e0ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0c8:	f000 fd38 	bl	800eb3c <prvInitialiseTaskLists>
 800e0cc:	e00d      	b.n	800e0ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e0ce:	4b26      	ldr	r3, [pc, #152]	; (800e168 <prvAddNewTaskToReadyList+0xcc>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d109      	bne.n	800e0ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e0d6:	4b23      	ldr	r3, [pc, #140]	; (800e164 <prvAddNewTaskToReadyList+0xc8>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d802      	bhi.n	800e0ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e0e4:	4a1f      	ldr	r2, [pc, #124]	; (800e164 <prvAddNewTaskToReadyList+0xc8>)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e0ea:	4b20      	ldr	r3, [pc, #128]	; (800e16c <prvAddNewTaskToReadyList+0xd0>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	4a1e      	ldr	r2, [pc, #120]	; (800e16c <prvAddNewTaskToReadyList+0xd0>)
 800e0f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e0f4:	4b1d      	ldr	r3, [pc, #116]	; (800e16c <prvAddNewTaskToReadyList+0xd0>)
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e102:	4b1b      	ldr	r3, [pc, #108]	; (800e170 <prvAddNewTaskToReadyList+0xd4>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	429a      	cmp	r2, r3
 800e108:	d903      	bls.n	800e112 <prvAddNewTaskToReadyList+0x76>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e10e:	4a18      	ldr	r2, [pc, #96]	; (800e170 <prvAddNewTaskToReadyList+0xd4>)
 800e110:	6013      	str	r3, [r2, #0]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e116:	4613      	mov	r3, r2
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	4413      	add	r3, r2
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	4a15      	ldr	r2, [pc, #84]	; (800e174 <prvAddNewTaskToReadyList+0xd8>)
 800e120:	441a      	add	r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	3304      	adds	r3, #4
 800e126:	4619      	mov	r1, r3
 800e128:	4610      	mov	r0, r2
 800e12a:	f7fe fdac 	bl	800cc86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e12e:	f7fe ff91 	bl	800d054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e132:	4b0d      	ldr	r3, [pc, #52]	; (800e168 <prvAddNewTaskToReadyList+0xcc>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00e      	beq.n	800e158 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e13a:	4b0a      	ldr	r3, [pc, #40]	; (800e164 <prvAddNewTaskToReadyList+0xc8>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e144:	429a      	cmp	r2, r3
 800e146:	d207      	bcs.n	800e158 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e148:	4b0b      	ldr	r3, [pc, #44]	; (800e178 <prvAddNewTaskToReadyList+0xdc>)
 800e14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e14e:	601a      	str	r2, [r3, #0]
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e158:	bf00      	nop
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	200053f0 	.word	0x200053f0
 800e164:	20004f18 	.word	0x20004f18
 800e168:	200053fc 	.word	0x200053fc
 800e16c:	2000540c 	.word	0x2000540c
 800e170:	200053f8 	.word	0x200053f8
 800e174:	20004f1c 	.word	0x20004f1c
 800e178:	e000ed04 	.word	0xe000ed04

0800e17c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e184:	2300      	movs	r3, #0
 800e186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d017      	beq.n	800e1be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e18e:	4b13      	ldr	r3, [pc, #76]	; (800e1dc <vTaskDelay+0x60>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00a      	beq.n	800e1ac <vTaskDelay+0x30>
	__asm volatile
 800e196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	60bb      	str	r3, [r7, #8]
}
 800e1a8:	bf00      	nop
 800e1aa:	e7fe      	b.n	800e1aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e1ac:	f000 f88c 	bl	800e2c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 fe18 	bl	800ede8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e1b8:	f000 f8cc 	bl	800e354 <xTaskResumeAll>
 800e1bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d107      	bne.n	800e1d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e1c4:	4b06      	ldr	r3, [pc, #24]	; (800e1e0 <vTaskDelay+0x64>)
 800e1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ca:	601a      	str	r2, [r3, #0]
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e1d4:	bf00      	nop
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	20005418 	.word	0x20005418
 800e1e0:	e000ed04 	.word	0xe000ed04

0800e1e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b08a      	sub	sp, #40	; 0x28
 800e1e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1f2:	463a      	mov	r2, r7
 800e1f4:	1d39      	adds	r1, r7, #4
 800e1f6:	f107 0308 	add.w	r3, r7, #8
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fe faf4 	bl	800c7e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e200:	6839      	ldr	r1, [r7, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	68ba      	ldr	r2, [r7, #8]
 800e206:	9202      	str	r2, [sp, #8]
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	2300      	movs	r3, #0
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	2300      	movs	r3, #0
 800e210:	460a      	mov	r2, r1
 800e212:	4925      	ldr	r1, [pc, #148]	; (800e2a8 <vTaskStartScheduler+0xc4>)
 800e214:	4825      	ldr	r0, [pc, #148]	; (800e2ac <vTaskStartScheduler+0xc8>)
 800e216:	f7ff fddf 	bl	800ddd8 <xTaskCreateStatic>
 800e21a:	4603      	mov	r3, r0
 800e21c:	4a24      	ldr	r2, [pc, #144]	; (800e2b0 <vTaskStartScheduler+0xcc>)
 800e21e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e220:	4b23      	ldr	r3, [pc, #140]	; (800e2b0 <vTaskStartScheduler+0xcc>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d002      	beq.n	800e22e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e228:	2301      	movs	r3, #1
 800e22a:	617b      	str	r3, [r7, #20]
 800e22c:	e001      	b.n	800e232 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e22e:	2300      	movs	r3, #0
 800e230:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	2b01      	cmp	r3, #1
 800e236:	d102      	bne.n	800e23e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e238:	f000 fe30 	bl	800ee9c <xTimerCreateTimerTask>
 800e23c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d11e      	bne.n	800e282 <vTaskStartScheduler+0x9e>
	__asm volatile
 800e244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e248:	f383 8811 	msr	BASEPRI, r3
 800e24c:	f3bf 8f6f 	isb	sy
 800e250:	f3bf 8f4f 	dsb	sy
 800e254:	613b      	str	r3, [r7, #16]
}
 800e256:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e258:	4b16      	ldr	r3, [pc, #88]	; (800e2b4 <vTaskStartScheduler+0xd0>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e260:	4a15      	ldr	r2, [pc, #84]	; (800e2b8 <vTaskStartScheduler+0xd4>)
 800e262:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e264:	4b15      	ldr	r3, [pc, #84]	; (800e2bc <vTaskStartScheduler+0xd8>)
 800e266:	f04f 32ff 	mov.w	r2, #4294967295
 800e26a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e26c:	4b14      	ldr	r3, [pc, #80]	; (800e2c0 <vTaskStartScheduler+0xdc>)
 800e26e:	2201      	movs	r2, #1
 800e270:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e272:	4b14      	ldr	r3, [pc, #80]	; (800e2c4 <vTaskStartScheduler+0xe0>)
 800e274:	2200      	movs	r2, #0
 800e276:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e278:	f7f3 fc60 	bl	8001b3c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e27c:	f7fe fe18 	bl	800ceb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e280:	e00e      	b.n	800e2a0 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e288:	d10a      	bne.n	800e2a0 <vTaskStartScheduler+0xbc>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	60fb      	str	r3, [r7, #12]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <vTaskStartScheduler+0xba>
}
 800e2a0:	bf00      	nop
 800e2a2:	3718      	adds	r7, #24
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	0800ffd8 	.word	0x0800ffd8
 800e2ac:	0800ea5d 	.word	0x0800ea5d
 800e2b0:	20005414 	.word	0x20005414
 800e2b4:	20004f18 	.word	0x20004f18
 800e2b8:	20000010 	.word	0x20000010
 800e2bc:	20005410 	.word	0x20005410
 800e2c0:	200053fc 	.word	0x200053fc
 800e2c4:	200053f4 	.word	0x200053f4

0800e2c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e2cc:	4b04      	ldr	r3, [pc, #16]	; (800e2e0 <vTaskSuspendAll+0x18>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	4a03      	ldr	r2, [pc, #12]	; (800e2e0 <vTaskSuspendAll+0x18>)
 800e2d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e2d6:	bf00      	nop
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr
 800e2e0:	20005418 	.word	0x20005418

0800e2e4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800e2ee:	4b14      	ldr	r3, [pc, #80]	; (800e340 <prvGetExpectedIdleTime+0x5c>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d001      	beq.n	800e2fa <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e2fa:	4b12      	ldr	r3, [pc, #72]	; (800e344 <prvGetExpectedIdleTime+0x60>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e300:	2b00      	cmp	r3, #0
 800e302:	d002      	beq.n	800e30a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800e304:	2300      	movs	r3, #0
 800e306:	607b      	str	r3, [r7, #4]
 800e308:	e012      	b.n	800e330 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e30a:	4b0f      	ldr	r3, [pc, #60]	; (800e348 <prvGetExpectedIdleTime+0x64>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d902      	bls.n	800e318 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800e312:	2300      	movs	r3, #0
 800e314:	607b      	str	r3, [r7, #4]
 800e316:	e00b      	b.n	800e330 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	607b      	str	r3, [r7, #4]
 800e322:	e005      	b.n	800e330 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800e324:	4b09      	ldr	r3, [pc, #36]	; (800e34c <prvGetExpectedIdleTime+0x68>)
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	4b09      	ldr	r3, [pc, #36]	; (800e350 <prvGetExpectedIdleTime+0x6c>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	1ad3      	subs	r3, r2, r3
 800e32e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800e330:	687b      	ldr	r3, [r7, #4]
	}
 800e332:	4618      	mov	r0, r3
 800e334:	370c      	adds	r7, #12
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	200053f8 	.word	0x200053f8
 800e344:	20004f18 	.word	0x20004f18
 800e348:	20004f1c 	.word	0x20004f1c
 800e34c:	20005410 	.word	0x20005410
 800e350:	200053f4 	.word	0x200053f4

0800e354 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e35a:	2300      	movs	r3, #0
 800e35c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e35e:	2300      	movs	r3, #0
 800e360:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e362:	4b42      	ldr	r3, [pc, #264]	; (800e46c <xTaskResumeAll+0x118>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d10a      	bne.n	800e380 <xTaskResumeAll+0x2c>
	__asm volatile
 800e36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36e:	f383 8811 	msr	BASEPRI, r3
 800e372:	f3bf 8f6f 	isb	sy
 800e376:	f3bf 8f4f 	dsb	sy
 800e37a:	603b      	str	r3, [r7, #0]
}
 800e37c:	bf00      	nop
 800e37e:	e7fe      	b.n	800e37e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e380:	f7fe fe38 	bl	800cff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e384:	4b39      	ldr	r3, [pc, #228]	; (800e46c <xTaskResumeAll+0x118>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	3b01      	subs	r3, #1
 800e38a:	4a38      	ldr	r2, [pc, #224]	; (800e46c <xTaskResumeAll+0x118>)
 800e38c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e38e:	4b37      	ldr	r3, [pc, #220]	; (800e46c <xTaskResumeAll+0x118>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d162      	bne.n	800e45c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e396:	4b36      	ldr	r3, [pc, #216]	; (800e470 <xTaskResumeAll+0x11c>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d05e      	beq.n	800e45c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e39e:	e02f      	b.n	800e400 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3a0:	4b34      	ldr	r3, [pc, #208]	; (800e474 <xTaskResumeAll+0x120>)
 800e3a2:	68db      	ldr	r3, [r3, #12]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	3318      	adds	r3, #24
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fe fcc7 	bl	800cd40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3304      	adds	r3, #4
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fe fcc2 	bl	800cd40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c0:	4b2d      	ldr	r3, [pc, #180]	; (800e478 <xTaskResumeAll+0x124>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d903      	bls.n	800e3d0 <xTaskResumeAll+0x7c>
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3cc:	4a2a      	ldr	r2, [pc, #168]	; (800e478 <xTaskResumeAll+0x124>)
 800e3ce:	6013      	str	r3, [r2, #0]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	4413      	add	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	4a27      	ldr	r2, [pc, #156]	; (800e47c <xTaskResumeAll+0x128>)
 800e3de:	441a      	add	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	f7fe fc4d 	bl	800cc86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f0:	4b23      	ldr	r3, [pc, #140]	; (800e480 <xTaskResumeAll+0x12c>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d302      	bcc.n	800e400 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e3fa:	4b22      	ldr	r3, [pc, #136]	; (800e484 <xTaskResumeAll+0x130>)
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e400:	4b1c      	ldr	r3, [pc, #112]	; (800e474 <xTaskResumeAll+0x120>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1cb      	bne.n	800e3a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e40e:	f000 fc39 	bl	800ec84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e412:	4b1d      	ldr	r3, [pc, #116]	; (800e488 <xTaskResumeAll+0x134>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d010      	beq.n	800e440 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e41e:	f000 f86f 	bl	800e500 <xTaskIncrementTick>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d002      	beq.n	800e42e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e428:	4b16      	ldr	r3, [pc, #88]	; (800e484 <xTaskResumeAll+0x130>)
 800e42a:	2201      	movs	r2, #1
 800e42c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	3b01      	subs	r3, #1
 800e432:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1f1      	bne.n	800e41e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e43a:	4b13      	ldr	r3, [pc, #76]	; (800e488 <xTaskResumeAll+0x134>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e440:	4b10      	ldr	r3, [pc, #64]	; (800e484 <xTaskResumeAll+0x130>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d009      	beq.n	800e45c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e448:	2301      	movs	r3, #1
 800e44a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e44c:	4b0f      	ldr	r3, [pc, #60]	; (800e48c <xTaskResumeAll+0x138>)
 800e44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e45c:	f7fe fdfa 	bl	800d054 <vPortExitCritical>

	return xAlreadyYielded;
 800e460:	68bb      	ldr	r3, [r7, #8]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	20005418 	.word	0x20005418
 800e470:	200053f0 	.word	0x200053f0
 800e474:	200053ac 	.word	0x200053ac
 800e478:	200053f8 	.word	0x200053f8
 800e47c:	20004f1c 	.word	0x20004f1c
 800e480:	20004f18 	.word	0x20004f18
 800e484:	20005404 	.word	0x20005404
 800e488:	20005400 	.word	0x20005400
 800e48c:	e000ed04 	.word	0xe000ed04

0800e490 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e496:	4b05      	ldr	r3, [pc, #20]	; (800e4ac <xTaskGetTickCount+0x1c>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e49c:	687b      	ldr	r3, [r7, #4]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	370c      	adds	r7, #12
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop
 800e4ac:	200053f4 	.word	0x200053f4

0800e4b0 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800e4b8:	4b0f      	ldr	r3, [pc, #60]	; (800e4f8 <vTaskStepTick+0x48>)
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	441a      	add	r2, r3
 800e4c0:	4b0e      	ldr	r3, [pc, #56]	; (800e4fc <vTaskStepTick+0x4c>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d90a      	bls.n	800e4de <vTaskStepTick+0x2e>
	__asm volatile
 800e4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4cc:	f383 8811 	msr	BASEPRI, r3
 800e4d0:	f3bf 8f6f 	isb	sy
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	60fb      	str	r3, [r7, #12]
}
 800e4da:	bf00      	nop
 800e4dc:	e7fe      	b.n	800e4dc <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800e4de:	4b06      	ldr	r3, [pc, #24]	; (800e4f8 <vTaskStepTick+0x48>)
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	4a04      	ldr	r2, [pc, #16]	; (800e4f8 <vTaskStepTick+0x48>)
 800e4e8:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800e4ea:	bf00      	nop
 800e4ec:	3714      	adds	r7, #20
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	200053f4 	.word	0x200053f4
 800e4fc:	20005410 	.word	0x20005410

0800e500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b086      	sub	sp, #24
 800e504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e506:	2300      	movs	r3, #0
 800e508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e50a:	4b53      	ldr	r3, [pc, #332]	; (800e658 <xTaskIncrementTick+0x158>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f040 8095 	bne.w	800e63e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e514:	4b51      	ldr	r3, [pc, #324]	; (800e65c <xTaskIncrementTick+0x15c>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	3301      	adds	r3, #1
 800e51a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e51c:	4a4f      	ldr	r2, [pc, #316]	; (800e65c <xTaskIncrementTick+0x15c>)
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d120      	bne.n	800e56a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e528:	4b4d      	ldr	r3, [pc, #308]	; (800e660 <xTaskIncrementTick+0x160>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00a      	beq.n	800e548 <xTaskIncrementTick+0x48>
	__asm volatile
 800e532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e536:	f383 8811 	msr	BASEPRI, r3
 800e53a:	f3bf 8f6f 	isb	sy
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	603b      	str	r3, [r7, #0]
}
 800e544:	bf00      	nop
 800e546:	e7fe      	b.n	800e546 <xTaskIncrementTick+0x46>
 800e548:	4b45      	ldr	r3, [pc, #276]	; (800e660 <xTaskIncrementTick+0x160>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	60fb      	str	r3, [r7, #12]
 800e54e:	4b45      	ldr	r3, [pc, #276]	; (800e664 <xTaskIncrementTick+0x164>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4a43      	ldr	r2, [pc, #268]	; (800e660 <xTaskIncrementTick+0x160>)
 800e554:	6013      	str	r3, [r2, #0]
 800e556:	4a43      	ldr	r2, [pc, #268]	; (800e664 <xTaskIncrementTick+0x164>)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6013      	str	r3, [r2, #0]
 800e55c:	4b42      	ldr	r3, [pc, #264]	; (800e668 <xTaskIncrementTick+0x168>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3301      	adds	r3, #1
 800e562:	4a41      	ldr	r2, [pc, #260]	; (800e668 <xTaskIncrementTick+0x168>)
 800e564:	6013      	str	r3, [r2, #0]
 800e566:	f000 fb8d 	bl	800ec84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e56a:	4b40      	ldr	r3, [pc, #256]	; (800e66c <xTaskIncrementTick+0x16c>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	693a      	ldr	r2, [r7, #16]
 800e570:	429a      	cmp	r2, r3
 800e572:	d349      	bcc.n	800e608 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e574:	4b3a      	ldr	r3, [pc, #232]	; (800e660 <xTaskIncrementTick+0x160>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d104      	bne.n	800e588 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e57e:	4b3b      	ldr	r3, [pc, #236]	; (800e66c <xTaskIncrementTick+0x16c>)
 800e580:	f04f 32ff 	mov.w	r2, #4294967295
 800e584:	601a      	str	r2, [r3, #0]
					break;
 800e586:	e03f      	b.n	800e608 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e588:	4b35      	ldr	r3, [pc, #212]	; (800e660 <xTaskIncrementTick+0x160>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e598:	693a      	ldr	r2, [r7, #16]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d203      	bcs.n	800e5a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5a0:	4a32      	ldr	r2, [pc, #200]	; (800e66c <xTaskIncrementTick+0x16c>)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5a6:	e02f      	b.n	800e608 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	3304      	adds	r3, #4
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fe fbc7 	bl	800cd40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d004      	beq.n	800e5c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	3318      	adds	r3, #24
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe fbbe 	bl	800cd40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c8:	4b29      	ldr	r3, [pc, #164]	; (800e670 <xTaskIncrementTick+0x170>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d903      	bls.n	800e5d8 <xTaskIncrementTick+0xd8>
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d4:	4a26      	ldr	r2, [pc, #152]	; (800e670 <xTaskIncrementTick+0x170>)
 800e5d6:	6013      	str	r3, [r2, #0]
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5dc:	4613      	mov	r3, r2
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4413      	add	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	4a23      	ldr	r2, [pc, #140]	; (800e674 <xTaskIncrementTick+0x174>)
 800e5e6:	441a      	add	r2, r3
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	4610      	mov	r0, r2
 800e5f0:	f7fe fb49 	bl	800cc86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5f8:	4b1f      	ldr	r3, [pc, #124]	; (800e678 <xTaskIncrementTick+0x178>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d3b8      	bcc.n	800e574 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e602:	2301      	movs	r3, #1
 800e604:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e606:	e7b5      	b.n	800e574 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e608:	4b1b      	ldr	r3, [pc, #108]	; (800e678 <xTaskIncrementTick+0x178>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e60e:	4919      	ldr	r1, [pc, #100]	; (800e674 <xTaskIncrementTick+0x174>)
 800e610:	4613      	mov	r3, r2
 800e612:	009b      	lsls	r3, r3, #2
 800e614:	4413      	add	r3, r2
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	440b      	add	r3, r1
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d901      	bls.n	800e624 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e620:	2301      	movs	r3, #1
 800e622:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800e624:	4b15      	ldr	r3, [pc, #84]	; (800e67c <xTaskIncrementTick+0x17c>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800e62c:	f7f3 fa9c 	bl	8001b68 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e630:	4b13      	ldr	r3, [pc, #76]	; (800e680 <xTaskIncrementTick+0x180>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d009      	beq.n	800e64c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800e638:	2301      	movs	r3, #1
 800e63a:	617b      	str	r3, [r7, #20]
 800e63c:	e006      	b.n	800e64c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e63e:	4b0f      	ldr	r3, [pc, #60]	; (800e67c <xTaskIncrementTick+0x17c>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3301      	adds	r3, #1
 800e644:	4a0d      	ldr	r2, [pc, #52]	; (800e67c <xTaskIncrementTick+0x17c>)
 800e646:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800e648:	f7f3 fa8e 	bl	8001b68 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800e64c:	697b      	ldr	r3, [r7, #20]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	20005418 	.word	0x20005418
 800e65c:	200053f4 	.word	0x200053f4
 800e660:	200053a4 	.word	0x200053a4
 800e664:	200053a8 	.word	0x200053a8
 800e668:	20005408 	.word	0x20005408
 800e66c:	20005410 	.word	0x20005410
 800e670:	200053f8 	.word	0x200053f8
 800e674:	20004f1c 	.word	0x20004f1c
 800e678:	20004f18 	.word	0x20004f18
 800e67c:	20005400 	.word	0x20005400
 800e680:	20005404 	.word	0x20005404

0800e684 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e68a:	4b46      	ldr	r3, [pc, #280]	; (800e7a4 <vTaskSwitchContext+0x120>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d003      	beq.n	800e69a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e692:	4b45      	ldr	r3, [pc, #276]	; (800e7a8 <vTaskSwitchContext+0x124>)
 800e694:	2201      	movs	r2, #1
 800e696:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e698:	e07f      	b.n	800e79a <vTaskSwitchContext+0x116>
		xYieldPending = pdFALSE;
 800e69a:	4b43      	ldr	r3, [pc, #268]	; (800e7a8 <vTaskSwitchContext+0x124>)
 800e69c:	2200      	movs	r2, #0
 800e69e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e6a0:	f7f3 fa53 	bl	8001b4a <getRunTimeCounterValue>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	4a41      	ldr	r2, [pc, #260]	; (800e7ac <vTaskSwitchContext+0x128>)
 800e6a8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e6aa:	4b40      	ldr	r3, [pc, #256]	; (800e7ac <vTaskSwitchContext+0x128>)
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	4b40      	ldr	r3, [pc, #256]	; (800e7b0 <vTaskSwitchContext+0x12c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d90b      	bls.n	800e6ce <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e6b6:	4b3f      	ldr	r3, [pc, #252]	; (800e7b4 <vTaskSwitchContext+0x130>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800e6be:	4a3b      	ldr	r2, [pc, #236]	; (800e7ac <vTaskSwitchContext+0x128>)
 800e6c0:	6810      	ldr	r0, [r2, #0]
 800e6c2:	4a3b      	ldr	r2, [pc, #236]	; (800e7b0 <vTaskSwitchContext+0x12c>)
 800e6c4:	6812      	ldr	r2, [r2, #0]
 800e6c6:	1a82      	subs	r2, r0, r2
 800e6c8:	440a      	add	r2, r1
 800e6ca:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e6ce:	4b37      	ldr	r3, [pc, #220]	; (800e7ac <vTaskSwitchContext+0x128>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4a37      	ldr	r2, [pc, #220]	; (800e7b0 <vTaskSwitchContext+0x12c>)
 800e6d4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e6d6:	4b37      	ldr	r3, [pc, #220]	; (800e7b4 <vTaskSwitchContext+0x130>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	4b35      	ldr	r3, [pc, #212]	; (800e7b4 <vTaskSwitchContext+0x130>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d808      	bhi.n	800e6f8 <vTaskSwitchContext+0x74>
 800e6e6:	4b33      	ldr	r3, [pc, #204]	; (800e7b4 <vTaskSwitchContext+0x130>)
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	4b32      	ldr	r3, [pc, #200]	; (800e7b4 <vTaskSwitchContext+0x130>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3334      	adds	r3, #52	; 0x34
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	4610      	mov	r0, r2
 800e6f4:	f7f3 fa3f 	bl	8001b76 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800e6f8:	4b2e      	ldr	r3, [pc, #184]	; (800e7b4 <vTaskSwitchContext+0x130>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a2e      	ldr	r2, [pc, #184]	; (800e7b8 <vTaskSwitchContext+0x134>)
 800e6fe:	6812      	ldr	r2, [r2, #0]
 800e700:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e704:	4b2d      	ldr	r3, [pc, #180]	; (800e7bc <vTaskSwitchContext+0x138>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	60fb      	str	r3, [r7, #12]
 800e70a:	e010      	b.n	800e72e <vTaskSwitchContext+0xaa>
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10a      	bne.n	800e728 <vTaskSwitchContext+0xa4>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	607b      	str	r3, [r7, #4]
}
 800e724:	bf00      	nop
 800e726:	e7fe      	b.n	800e726 <vTaskSwitchContext+0xa2>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	3b01      	subs	r3, #1
 800e72c:	60fb      	str	r3, [r7, #12]
 800e72e:	4924      	ldr	r1, [pc, #144]	; (800e7c0 <vTaskSwitchContext+0x13c>)
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	4613      	mov	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4413      	add	r3, r2
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	440b      	add	r3, r1
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d0e4      	beq.n	800e70c <vTaskSwitchContext+0x88>
 800e742:	68fa      	ldr	r2, [r7, #12]
 800e744:	4613      	mov	r3, r2
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	4413      	add	r3, r2
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	4a1c      	ldr	r2, [pc, #112]	; (800e7c0 <vTaskSwitchContext+0x13c>)
 800e74e:	4413      	add	r3, r2
 800e750:	60bb      	str	r3, [r7, #8]
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	685a      	ldr	r2, [r3, #4]
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	605a      	str	r2, [r3, #4]
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	685a      	ldr	r2, [r3, #4]
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	3308      	adds	r3, #8
 800e764:	429a      	cmp	r2, r3
 800e766:	d104      	bne.n	800e772 <vTaskSwitchContext+0xee>
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	685a      	ldr	r2, [r3, #4]
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	605a      	str	r2, [r3, #4]
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	4a0e      	ldr	r2, [pc, #56]	; (800e7b4 <vTaskSwitchContext+0x130>)
 800e77a:	6013      	str	r3, [r2, #0]
 800e77c:	4a0f      	ldr	r2, [pc, #60]	; (800e7bc <vTaskSwitchContext+0x138>)
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800e782:	4b0c      	ldr	r3, [pc, #48]	; (800e7b4 <vTaskSwitchContext+0x130>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800e78a:	4a0b      	ldr	r2, [pc, #44]	; (800e7b8 <vTaskSwitchContext+0x134>)
 800e78c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e78e:	4b09      	ldr	r3, [pc, #36]	; (800e7b4 <vTaskSwitchContext+0x130>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e796:	4a0b      	ldr	r2, [pc, #44]	; (800e7c4 <vTaskSwitchContext+0x140>)
 800e798:	6013      	str	r3, [r2, #0]
}
 800e79a:	bf00      	nop
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	20005418 	.word	0x20005418
 800e7a8:	20005404 	.word	0x20005404
 800e7ac:	20005420 	.word	0x20005420
 800e7b0:	2000541c 	.word	0x2000541c
 800e7b4:	20004f18 	.word	0x20004f18
 800e7b8:	200053ec 	.word	0x200053ec
 800e7bc:	200053f8 	.word	0x200053f8
 800e7c0:	20004f1c 	.word	0x20004f1c
 800e7c4:	20000010 	.word	0x20000010

0800e7c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d10a      	bne.n	800e7ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7dc:	f383 8811 	msr	BASEPRI, r3
 800e7e0:	f3bf 8f6f 	isb	sy
 800e7e4:	f3bf 8f4f 	dsb	sy
 800e7e8:	60fb      	str	r3, [r7, #12]
}
 800e7ea:	bf00      	nop
 800e7ec:	e7fe      	b.n	800e7ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7ee:	4b07      	ldr	r3, [pc, #28]	; (800e80c <vTaskPlaceOnEventList+0x44>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	3318      	adds	r3, #24
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7fe fa69 	bl	800ccce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7fc:	2101      	movs	r1, #1
 800e7fe:	6838      	ldr	r0, [r7, #0]
 800e800:	f000 faf2 	bl	800ede8 <prvAddCurrentTaskToDelayedList>
}
 800e804:	bf00      	nop
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	20004f18 	.word	0x20004f18

0800e810 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e810:	b580      	push	{r7, lr}
 800e812:	b086      	sub	sp, #24
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d10a      	bne.n	800e838 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	617b      	str	r3, [r7, #20]
}
 800e834:	bf00      	nop
 800e836:	e7fe      	b.n	800e836 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e838:	4b0a      	ldr	r3, [pc, #40]	; (800e864 <vTaskPlaceOnEventListRestricted+0x54>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	3318      	adds	r3, #24
 800e83e:	4619      	mov	r1, r3
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f7fe fa20 	bl	800cc86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d002      	beq.n	800e852 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e84c:	f04f 33ff 	mov.w	r3, #4294967295
 800e850:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e852:	6879      	ldr	r1, [r7, #4]
 800e854:	68b8      	ldr	r0, [r7, #8]
 800e856:	f000 fac7 	bl	800ede8 <prvAddCurrentTaskToDelayedList>
	}
 800e85a:	bf00      	nop
 800e85c:	3718      	adds	r7, #24
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	20004f18 	.word	0x20004f18

0800e868 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	68db      	ldr	r3, [r3, #12]
 800e876:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d10a      	bne.n	800e894 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	60fb      	str	r3, [r7, #12]
}
 800e890:	bf00      	nop
 800e892:	e7fe      	b.n	800e892 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	3318      	adds	r3, #24
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fe fa51 	bl	800cd40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e89e:	4b1f      	ldr	r3, [pc, #124]	; (800e91c <xTaskRemoveFromEventList+0xb4>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d11f      	bne.n	800e8e6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fe fa48 	bl	800cd40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b4:	4b1a      	ldr	r3, [pc, #104]	; (800e920 <xTaskRemoveFromEventList+0xb8>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d903      	bls.n	800e8c4 <xTaskRemoveFromEventList+0x5c>
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c0:	4a17      	ldr	r2, [pc, #92]	; (800e920 <xTaskRemoveFromEventList+0xb8>)
 800e8c2:	6013      	str	r3, [r2, #0]
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	4413      	add	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	4a14      	ldr	r2, [pc, #80]	; (800e924 <xTaskRemoveFromEventList+0xbc>)
 800e8d2:	441a      	add	r2, r3
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f7fe f9d3 	bl	800cc86 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800e8e0:	f000 f9d0 	bl	800ec84 <prvResetNextTaskUnblockTime>
 800e8e4:	e005      	b.n	800e8f2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	3318      	adds	r3, #24
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	480e      	ldr	r0, [pc, #56]	; (800e928 <xTaskRemoveFromEventList+0xc0>)
 800e8ee:	f7fe f9ca 	bl	800cc86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f6:	4b0d      	ldr	r3, [pc, #52]	; (800e92c <xTaskRemoveFromEventList+0xc4>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d905      	bls.n	800e90c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e900:	2301      	movs	r3, #1
 800e902:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e904:	4b0a      	ldr	r3, [pc, #40]	; (800e930 <xTaskRemoveFromEventList+0xc8>)
 800e906:	2201      	movs	r2, #1
 800e908:	601a      	str	r2, [r3, #0]
 800e90a:	e001      	b.n	800e910 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e90c:	2300      	movs	r3, #0
 800e90e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e910:	697b      	ldr	r3, [r7, #20]
}
 800e912:	4618      	mov	r0, r3
 800e914:	3718      	adds	r7, #24
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	20005418 	.word	0x20005418
 800e920:	200053f8 	.word	0x200053f8
 800e924:	20004f1c 	.word	0x20004f1c
 800e928:	200053ac 	.word	0x200053ac
 800e92c:	20004f18 	.word	0x20004f18
 800e930:	20005404 	.word	0x20005404

0800e934 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e93c:	4b06      	ldr	r3, [pc, #24]	; (800e958 <vTaskInternalSetTimeOutState+0x24>)
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e944:	4b05      	ldr	r3, [pc, #20]	; (800e95c <vTaskInternalSetTimeOutState+0x28>)
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	605a      	str	r2, [r3, #4]
}
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	20005408 	.word	0x20005408
 800e95c:	200053f4 	.word	0x200053f4

0800e960 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b088      	sub	sp, #32
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d10a      	bne.n	800e986 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	613b      	str	r3, [r7, #16]
}
 800e982:	bf00      	nop
 800e984:	e7fe      	b.n	800e984 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d10a      	bne.n	800e9a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e990:	f383 8811 	msr	BASEPRI, r3
 800e994:	f3bf 8f6f 	isb	sy
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	60fb      	str	r3, [r7, #12]
}
 800e99e:	bf00      	nop
 800e9a0:	e7fe      	b.n	800e9a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e9a2:	f7fe fb27 	bl	800cff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9a6:	4b24      	ldr	r3, [pc, #144]	; (800ea38 <xTaskCheckForTimeOut+0xd8>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	69ba      	ldr	r2, [r7, #24]
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800e9b6:	4b21      	ldr	r3, [pc, #132]	; (800ea3c <xTaskCheckForTimeOut+0xdc>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d007      	beq.n	800e9d2 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e9c2:	4b1e      	ldr	r3, [pc, #120]	; (800ea3c <xTaskCheckForTimeOut+0xdc>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	61fb      	str	r3, [r7, #28]
 800e9d0:	e02b      	b.n	800ea2a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9da:	d102      	bne.n	800e9e2 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	61fb      	str	r3, [r7, #28]
 800e9e0:	e023      	b.n	800ea2a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	4b16      	ldr	r3, [pc, #88]	; (800ea40 <xTaskCheckForTimeOut+0xe0>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d007      	beq.n	800e9fe <xTaskCheckForTimeOut+0x9e>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	69ba      	ldr	r2, [r7, #24]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d302      	bcc.n	800e9fe <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	61fb      	str	r3, [r7, #28]
 800e9fc:	e015      	b.n	800ea2a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d20b      	bcs.n	800ea20 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	1ad2      	subs	r2, r2, r3
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7ff ff8d 	bl	800e934 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	61fb      	str	r3, [r7, #28]
 800ea1e:	e004      	b.n	800ea2a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	2200      	movs	r2, #0
 800ea24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea26:	2301      	movs	r3, #1
 800ea28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea2a:	f7fe fb13 	bl	800d054 <vPortExitCritical>

	return xReturn;
 800ea2e:	69fb      	ldr	r3, [r7, #28]
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3720      	adds	r7, #32
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	200053f4 	.word	0x200053f4
 800ea3c:	20004f18 	.word	0x20004f18
 800ea40:	20005408 	.word	0x20005408

0800ea44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea44:	b480      	push	{r7}
 800ea46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea48:	4b03      	ldr	r3, [pc, #12]	; (800ea58 <vTaskMissedYield+0x14>)
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	601a      	str	r2, [r3, #0]
}
 800ea4e:	bf00      	nop
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	20005404 	.word	0x20005404

0800ea5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea64:	f000 f8aa 	bl	800ebbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea68:	4b19      	ldr	r3, [pc, #100]	; (800ead0 <prvIdleTask+0x74>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d907      	bls.n	800ea80 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ea70:	4b18      	ldr	r3, [pc, #96]	; (800ead4 <prvIdleTask+0x78>)
 800ea72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea76:	601a      	str	r2, [r3, #0]
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ea80:	f7f3 f86b 	bl	8001b5a <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800ea84:	f7ff fc2e 	bl	800e2e4 <prvGetExpectedIdleTime>
 800ea88:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d9e9      	bls.n	800ea64 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800ea90:	f7ff fc1a 	bl	800e2c8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800ea94:	4b10      	ldr	r3, [pc, #64]	; (800ead8 <prvIdleTask+0x7c>)
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	4b10      	ldr	r3, [pc, #64]	; (800eadc <prvIdleTask+0x80>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d20a      	bcs.n	800eab6 <prvIdleTask+0x5a>
	__asm volatile
 800eaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	60bb      	str	r3, [r7, #8]
}
 800eab2:	bf00      	nop
 800eab4:	e7fe      	b.n	800eab4 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800eab6:	f7ff fc15 	bl	800e2e4 <prvGetExpectedIdleTime>
 800eaba:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d902      	bls.n	800eac8 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f7fe fb4a 	bl	800d15c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800eac8:	f7ff fc44 	bl	800e354 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800eacc:	e7ca      	b.n	800ea64 <prvIdleTask+0x8>
 800eace:	bf00      	nop
 800ead0:	20004f1c 	.word	0x20004f1c
 800ead4:	e000ed04 	.word	0xe000ed04
 800ead8:	20005410 	.word	0x20005410
 800eadc:	200053f4 	.word	0x200053f4

0800eae0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800eae6:	2301      	movs	r3, #1
 800eae8:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800eaea:	2301      	movs	r3, #1
 800eaec:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800eaee:	4b0f      	ldr	r3, [pc, #60]	; (800eb2c <eTaskConfirmSleepModeStatus+0x4c>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d002      	beq.n	800eafc <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	71fb      	strb	r3, [r7, #7]
 800eafa:	e010      	b.n	800eb1e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800eafc:	4b0c      	ldr	r3, [pc, #48]	; (800eb30 <eTaskConfirmSleepModeStatus+0x50>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800eb04:	2300      	movs	r3, #0
 800eb06:	71fb      	strb	r3, [r7, #7]
 800eb08:	e009      	b.n	800eb1e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800eb0a:	4b0a      	ldr	r3, [pc, #40]	; (800eb34 <eTaskConfirmSleepModeStatus+0x54>)
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	4b0a      	ldr	r3, [pc, #40]	; (800eb38 <eTaskConfirmSleepModeStatus+0x58>)
 800eb10:	6819      	ldr	r1, [r3, #0]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	1acb      	subs	r3, r1, r3
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d101      	bne.n	800eb1e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800eb1a:	2302      	movs	r3, #2
 800eb1c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800eb1e:	79fb      	ldrb	r3, [r7, #7]
	}
 800eb20:	4618      	mov	r0, r3
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr
 800eb2c:	200053ac 	.word	0x200053ac
 800eb30:	20005404 	.word	0x20005404
 800eb34:	200053d8 	.word	0x200053d8
 800eb38:	200053f0 	.word	0x200053f0

0800eb3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb42:	2300      	movs	r3, #0
 800eb44:	607b      	str	r3, [r7, #4]
 800eb46:	e00c      	b.n	800eb62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	4413      	add	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4a12      	ldr	r2, [pc, #72]	; (800eb9c <prvInitialiseTaskLists+0x60>)
 800eb54:	4413      	add	r3, r2
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fe f868 	bl	800cc2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	607b      	str	r3, [r7, #4]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2b37      	cmp	r3, #55	; 0x37
 800eb66:	d9ef      	bls.n	800eb48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb68:	480d      	ldr	r0, [pc, #52]	; (800eba0 <prvInitialiseTaskLists+0x64>)
 800eb6a:	f7fe f85f 	bl	800cc2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb6e:	480d      	ldr	r0, [pc, #52]	; (800eba4 <prvInitialiseTaskLists+0x68>)
 800eb70:	f7fe f85c 	bl	800cc2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb74:	480c      	ldr	r0, [pc, #48]	; (800eba8 <prvInitialiseTaskLists+0x6c>)
 800eb76:	f7fe f859 	bl	800cc2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb7a:	480c      	ldr	r0, [pc, #48]	; (800ebac <prvInitialiseTaskLists+0x70>)
 800eb7c:	f7fe f856 	bl	800cc2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb80:	480b      	ldr	r0, [pc, #44]	; (800ebb0 <prvInitialiseTaskLists+0x74>)
 800eb82:	f7fe f853 	bl	800cc2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb86:	4b0b      	ldr	r3, [pc, #44]	; (800ebb4 <prvInitialiseTaskLists+0x78>)
 800eb88:	4a05      	ldr	r2, [pc, #20]	; (800eba0 <prvInitialiseTaskLists+0x64>)
 800eb8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb8c:	4b0a      	ldr	r3, [pc, #40]	; (800ebb8 <prvInitialiseTaskLists+0x7c>)
 800eb8e:	4a05      	ldr	r2, [pc, #20]	; (800eba4 <prvInitialiseTaskLists+0x68>)
 800eb90:	601a      	str	r2, [r3, #0]
}
 800eb92:	bf00      	nop
 800eb94:	3708      	adds	r7, #8
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20004f1c 	.word	0x20004f1c
 800eba0:	2000537c 	.word	0x2000537c
 800eba4:	20005390 	.word	0x20005390
 800eba8:	200053ac 	.word	0x200053ac
 800ebac:	200053c0 	.word	0x200053c0
 800ebb0:	200053d8 	.word	0x200053d8
 800ebb4:	200053a4 	.word	0x200053a4
 800ebb8:	200053a8 	.word	0x200053a8

0800ebbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebc2:	e019      	b.n	800ebf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ebc4:	f7fe fa16 	bl	800cff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebc8:	4b10      	ldr	r3, [pc, #64]	; (800ec0c <prvCheckTasksWaitingTermination+0x50>)
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fe f8b3 	bl	800cd40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ebda:	4b0d      	ldr	r3, [pc, #52]	; (800ec10 <prvCheckTasksWaitingTermination+0x54>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	4a0b      	ldr	r2, [pc, #44]	; (800ec10 <prvCheckTasksWaitingTermination+0x54>)
 800ebe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ebe4:	4b0b      	ldr	r3, [pc, #44]	; (800ec14 <prvCheckTasksWaitingTermination+0x58>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	4a0a      	ldr	r2, [pc, #40]	; (800ec14 <prvCheckTasksWaitingTermination+0x58>)
 800ebec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ebee:	f7fe fa31 	bl	800d054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 f810 	bl	800ec18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebf8:	4b06      	ldr	r3, [pc, #24]	; (800ec14 <prvCheckTasksWaitingTermination+0x58>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d1e1      	bne.n	800ebc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec00:	bf00      	nop
 800ec02:	bf00      	nop
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	200053c0 	.word	0x200053c0
 800ec10:	200053f0 	.word	0x200053f0
 800ec14:	200053d4 	.word	0x200053d4

0800ec18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ec26:	4618      	mov	r0, r3
 800ec28:	f000 fdd6 	bl	800f7d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d108      	bne.n	800ec48 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fd fed8 	bl	800c9f0 <vPortFree>
				vPortFree( pxTCB );
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7fd fed5 	bl	800c9f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec46:	e018      	b.n	800ec7a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d103      	bne.n	800ec5a <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7fd fecc 	bl	800c9f0 <vPortFree>
	}
 800ec58:	e00f      	b.n	800ec7a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800ec60:	2b02      	cmp	r3, #2
 800ec62:	d00a      	beq.n	800ec7a <prvDeleteTCB+0x62>
	__asm volatile
 800ec64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec68:	f383 8811 	msr	BASEPRI, r3
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	60fb      	str	r3, [r7, #12]
}
 800ec76:	bf00      	nop
 800ec78:	e7fe      	b.n	800ec78 <prvDeleteTCB+0x60>
	}
 800ec7a:	bf00      	nop
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
	...

0800ec84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec8a:	4b0c      	ldr	r3, [pc, #48]	; (800ecbc <prvResetNextTaskUnblockTime+0x38>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d104      	bne.n	800ec9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec94:	4b0a      	ldr	r3, [pc, #40]	; (800ecc0 <prvResetNextTaskUnblockTime+0x3c>)
 800ec96:	f04f 32ff 	mov.w	r2, #4294967295
 800ec9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec9c:	e008      	b.n	800ecb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec9e:	4b07      	ldr	r3, [pc, #28]	; (800ecbc <prvResetNextTaskUnblockTime+0x38>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	4a04      	ldr	r2, [pc, #16]	; (800ecc0 <prvResetNextTaskUnblockTime+0x3c>)
 800ecae:	6013      	str	r3, [r2, #0]
}
 800ecb0:	bf00      	nop
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	200053a4 	.word	0x200053a4
 800ecc0:	20005410 	.word	0x20005410

0800ecc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecca:	4b0b      	ldr	r3, [pc, #44]	; (800ecf8 <xTaskGetSchedulerState+0x34>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d102      	bne.n	800ecd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	607b      	str	r3, [r7, #4]
 800ecd6:	e008      	b.n	800ecea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecd8:	4b08      	ldr	r3, [pc, #32]	; (800ecfc <xTaskGetSchedulerState+0x38>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d102      	bne.n	800ece6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ece0:	2302      	movs	r3, #2
 800ece2:	607b      	str	r3, [r7, #4]
 800ece4:	e001      	b.n	800ecea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ece6:	2300      	movs	r3, #0
 800ece8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ecea:	687b      	ldr	r3, [r7, #4]
	}
 800ecec:	4618      	mov	r0, r3
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	200053fc 	.word	0x200053fc
 800ecfc:	20005418 	.word	0x20005418

0800ed00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b086      	sub	sp, #24
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d05c      	beq.n	800edd0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed16:	4b31      	ldr	r3, [pc, #196]	; (800eddc <xTaskPriorityDisinherit+0xdc>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	693a      	ldr	r2, [r7, #16]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d00a      	beq.n	800ed36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ed20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	60fb      	str	r3, [r7, #12]
}
 800ed32:	bf00      	nop
 800ed34:	e7fe      	b.n	800ed34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d10a      	bne.n	800ed56 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800ed40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	60bb      	str	r3, [r7, #8]
}
 800ed52:	bf00      	nop
 800ed54:	e7fe      	b.n	800ed54 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ed5c:	1e5a      	subs	r2, r3, #1
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d02e      	beq.n	800edd0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d129      	bne.n	800edd0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	3304      	adds	r3, #4
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fd ffdd 	bl	800cd40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eda0:	4b0f      	ldr	r3, [pc, #60]	; (800ede0 <xTaskPriorityDisinherit+0xe0>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d903      	bls.n	800edb0 <xTaskPriorityDisinherit+0xb0>
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edac:	4a0c      	ldr	r2, [pc, #48]	; (800ede0 <xTaskPriorityDisinherit+0xe0>)
 800edae:	6013      	str	r3, [r2, #0]
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edb4:	4613      	mov	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4413      	add	r3, r2
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	4a09      	ldr	r2, [pc, #36]	; (800ede4 <xTaskPriorityDisinherit+0xe4>)
 800edbe:	441a      	add	r2, r3
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	3304      	adds	r3, #4
 800edc4:	4619      	mov	r1, r3
 800edc6:	4610      	mov	r0, r2
 800edc8:	f7fd ff5d 	bl	800cc86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800edcc:	2301      	movs	r3, #1
 800edce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edd0:	697b      	ldr	r3, [r7, #20]
	}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3718      	adds	r7, #24
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	20004f18 	.word	0x20004f18
 800ede0:	200053f8 	.word	0x200053f8
 800ede4:	20004f1c 	.word	0x20004f1c

0800ede8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800edf2:	4b24      	ldr	r3, [pc, #144]	; (800ee84 <prvAddCurrentTaskToDelayedList+0x9c>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800edf8:	4b23      	ldr	r3, [pc, #140]	; (800ee88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee02:	4b21      	ldr	r3, [pc, #132]	; (800ee88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3304      	adds	r3, #4
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fd ff99 	bl	800cd40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee14:	d10a      	bne.n	800ee2c <prvAddCurrentTaskToDelayedList+0x44>
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d007      	beq.n	800ee2c <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee1c:	4b1a      	ldr	r3, [pc, #104]	; (800ee88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	3304      	adds	r3, #4
 800ee22:	4619      	mov	r1, r3
 800ee24:	4819      	ldr	r0, [pc, #100]	; (800ee8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee26:	f7fd ff2e 	bl	800cc86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee2a:	e026      	b.n	800ee7a <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4413      	add	r3, r2
 800ee32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee34:	4b14      	ldr	r3, [pc, #80]	; (800ee88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee3c:	68ba      	ldr	r2, [r7, #8]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d209      	bcs.n	800ee58 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee44:	4b12      	ldr	r3, [pc, #72]	; (800ee90 <prvAddCurrentTaskToDelayedList+0xa8>)
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	4b0f      	ldr	r3, [pc, #60]	; (800ee88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	4619      	mov	r1, r3
 800ee50:	4610      	mov	r0, r2
 800ee52:	f7fd ff3c 	bl	800ccce <vListInsert>
}
 800ee56:	e010      	b.n	800ee7a <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee58:	4b0e      	ldr	r3, [pc, #56]	; (800ee94 <prvAddCurrentTaskToDelayedList+0xac>)
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	4b0a      	ldr	r3, [pc, #40]	; (800ee88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	3304      	adds	r3, #4
 800ee62:	4619      	mov	r1, r3
 800ee64:	4610      	mov	r0, r2
 800ee66:	f7fd ff32 	bl	800ccce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee6a:	4b0b      	ldr	r3, [pc, #44]	; (800ee98 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	68ba      	ldr	r2, [r7, #8]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d202      	bcs.n	800ee7a <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800ee74:	4a08      	ldr	r2, [pc, #32]	; (800ee98 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	6013      	str	r3, [r2, #0]
}
 800ee7a:	bf00      	nop
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	200053f4 	.word	0x200053f4
 800ee88:	20004f18 	.word	0x20004f18
 800ee8c:	200053d8 	.word	0x200053d8
 800ee90:	200053a8 	.word	0x200053a8
 800ee94:	200053a4 	.word	0x200053a4
 800ee98:	20005410 	.word	0x20005410

0800ee9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b08a      	sub	sp, #40	; 0x28
 800eea0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eea2:	2300      	movs	r3, #0
 800eea4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eea6:	f000 fba3 	bl	800f5f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eeaa:	4b1c      	ldr	r3, [pc, #112]	; (800ef1c <xTimerCreateTimerTask+0x80>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d021      	beq.n	800eef6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eeba:	1d3a      	adds	r2, r7, #4
 800eebc:	f107 0108 	add.w	r1, r7, #8
 800eec0:	f107 030c 	add.w	r3, r7, #12
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fd fca9 	bl	800c81c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eeca:	6879      	ldr	r1, [r7, #4]
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	9202      	str	r2, [sp, #8]
 800eed2:	9301      	str	r3, [sp, #4]
 800eed4:	2302      	movs	r3, #2
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	2300      	movs	r3, #0
 800eeda:	460a      	mov	r2, r1
 800eedc:	4910      	ldr	r1, [pc, #64]	; (800ef20 <xTimerCreateTimerTask+0x84>)
 800eede:	4811      	ldr	r0, [pc, #68]	; (800ef24 <xTimerCreateTimerTask+0x88>)
 800eee0:	f7fe ff7a 	bl	800ddd8 <xTaskCreateStatic>
 800eee4:	4603      	mov	r3, r0
 800eee6:	4a10      	ldr	r2, [pc, #64]	; (800ef28 <xTimerCreateTimerTask+0x8c>)
 800eee8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eeea:	4b0f      	ldr	r3, [pc, #60]	; (800ef28 <xTimerCreateTimerTask+0x8c>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d001      	beq.n	800eef6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eef2:	2301      	movs	r3, #1
 800eef4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d10a      	bne.n	800ef12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800eefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef00:	f383 8811 	msr	BASEPRI, r3
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	f3bf 8f4f 	dsb	sy
 800ef0c:	613b      	str	r3, [r7, #16]
}
 800ef0e:	bf00      	nop
 800ef10:	e7fe      	b.n	800ef10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ef12:	697b      	ldr	r3, [r7, #20]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	20005454 	.word	0x20005454
 800ef20:	08010008 	.word	0x08010008
 800ef24:	0800f195 	.word	0x0800f195
 800ef28:	20005458 	.word	0x20005458

0800ef2c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b088      	sub	sp, #32
 800ef30:	af02      	add	r7, sp, #8
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	607a      	str	r2, [r7, #4]
 800ef38:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ef3a:	202c      	movs	r0, #44	; 0x2c
 800ef3c:	f7fd fc88 	bl	800c850 <pvPortMalloc>
 800ef40:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00d      	beq.n	800ef64 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	9301      	str	r3, [sp, #4]
 800ef54:	6a3b      	ldr	r3, [r7, #32]
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	68b9      	ldr	r1, [r7, #8]
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	f000 f843 	bl	800efea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ef64:	697b      	ldr	r3, [r7, #20]
	}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3718      	adds	r7, #24
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b08a      	sub	sp, #40	; 0x28
 800ef72:	af02      	add	r7, sp, #8
 800ef74:	60f8      	str	r0, [r7, #12]
 800ef76:	60b9      	str	r1, [r7, #8]
 800ef78:	607a      	str	r2, [r7, #4]
 800ef7a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ef7c:	232c      	movs	r3, #44	; 0x2c
 800ef7e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	2b2c      	cmp	r3, #44	; 0x2c
 800ef84:	d00a      	beq.n	800ef9c <xTimerCreateStatic+0x2e>
	__asm volatile
 800ef86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8a:	f383 8811 	msr	BASEPRI, r3
 800ef8e:	f3bf 8f6f 	isb	sy
 800ef92:	f3bf 8f4f 	dsb	sy
 800ef96:	61bb      	str	r3, [r7, #24]
}
 800ef98:	bf00      	nop
 800ef9a:	e7fe      	b.n	800ef9a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ef9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ef9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10a      	bne.n	800efba <xTimerCreateStatic+0x4c>
	__asm volatile
 800efa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	617b      	str	r3, [r7, #20]
}
 800efb6:	bf00      	nop
 800efb8:	e7fe      	b.n	800efb8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d00d      	beq.n	800efe0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	2202      	movs	r2, #2
 800efc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	9301      	str	r3, [sp, #4]
 800efd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	68b9      	ldr	r1, [r7, #8]
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f000 f805 	bl	800efea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800efe0:	69fb      	ldr	r3, [r7, #28]
	}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3720      	adds	r7, #32
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b086      	sub	sp, #24
 800efee:	af00      	add	r7, sp, #0
 800eff0:	60f8      	str	r0, [r7, #12]
 800eff2:	60b9      	str	r1, [r7, #8]
 800eff4:	607a      	str	r2, [r7, #4]
 800eff6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d10a      	bne.n	800f014 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800effe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	617b      	str	r3, [r7, #20]
}
 800f010:	bf00      	nop
 800f012:	e7fe      	b.n	800f012 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	2b00      	cmp	r3, #0
 800f018:	d01e      	beq.n	800f058 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f01a:	f000 fae9 	bl	800f5f0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f026:	68ba      	ldr	r2, [r7, #8]
 800f028:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02c:	683a      	ldr	r2, [r7, #0]
 800f02e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	6a3a      	ldr	r2, [r7, #32]
 800f034:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f038:	3304      	adds	r3, #4
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fd fe16 	bl	800cc6c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d008      	beq.n	800f058 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f04c:	f043 0304 	orr.w	r3, r3, #4
 800f050:	b2da      	uxtb	r2, r3
 800f052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f054:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f058:	bf00      	nop
 800f05a:	3718      	adds	r7, #24
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b08a      	sub	sp, #40	; 0x28
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
 800f06c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f06e:	2300      	movs	r3, #0
 800f070:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d10a      	bne.n	800f08e <xTimerGenericCommand+0x2e>
	__asm volatile
 800f078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07c:	f383 8811 	msr	BASEPRI, r3
 800f080:	f3bf 8f6f 	isb	sy
 800f084:	f3bf 8f4f 	dsb	sy
 800f088:	623b      	str	r3, [r7, #32]
}
 800f08a:	bf00      	nop
 800f08c:	e7fe      	b.n	800f08c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f08e:	4b1a      	ldr	r3, [pc, #104]	; (800f0f8 <xTimerGenericCommand+0x98>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d02a      	beq.n	800f0ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	2b05      	cmp	r3, #5
 800f0a6:	dc18      	bgt.n	800f0da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f0a8:	f7ff fe0c 	bl	800ecc4 <xTaskGetSchedulerState>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b02      	cmp	r3, #2
 800f0b0:	d109      	bne.n	800f0c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0b2:	4b11      	ldr	r3, [pc, #68]	; (800f0f8 <xTimerGenericCommand+0x98>)
 800f0b4:	6818      	ldr	r0, [r3, #0]
 800f0b6:	f107 0110 	add.w	r1, r7, #16
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0be:	f7fe faa3 	bl	800d608 <xQueueGenericSend>
 800f0c2:	6278      	str	r0, [r7, #36]	; 0x24
 800f0c4:	e012      	b.n	800f0ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0c6:	4b0c      	ldr	r3, [pc, #48]	; (800f0f8 <xTimerGenericCommand+0x98>)
 800f0c8:	6818      	ldr	r0, [r3, #0]
 800f0ca:	f107 0110 	add.w	r1, r7, #16
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f7fe fa99 	bl	800d608 <xQueueGenericSend>
 800f0d6:	6278      	str	r0, [r7, #36]	; 0x24
 800f0d8:	e008      	b.n	800f0ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f0da:	4b07      	ldr	r3, [pc, #28]	; (800f0f8 <xTimerGenericCommand+0x98>)
 800f0dc:	6818      	ldr	r0, [r3, #0]
 800f0de:	f107 0110 	add.w	r1, r7, #16
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	683a      	ldr	r2, [r7, #0]
 800f0e6:	f7fe fb8d 	bl	800d804 <xQueueGenericSendFromISR>
 800f0ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3728      	adds	r7, #40	; 0x28
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	20005454 	.word	0x20005454

0800f0fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b088      	sub	sp, #32
 800f100:	af02      	add	r7, sp, #8
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f106:	4b22      	ldr	r3, [pc, #136]	; (800f190 <prvProcessExpiredTimer+0x94>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	3304      	adds	r3, #4
 800f114:	4618      	mov	r0, r3
 800f116:	f7fd fe13 	bl	800cd40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f120:	f003 0304 	and.w	r3, r3, #4
 800f124:	2b00      	cmp	r3, #0
 800f126:	d022      	beq.n	800f16e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	699a      	ldr	r2, [r3, #24]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	18d1      	adds	r1, r2, r3
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	683a      	ldr	r2, [r7, #0]
 800f134:	6978      	ldr	r0, [r7, #20]
 800f136:	f000 f8d3 	bl	800f2e0 <prvInsertTimerInActiveList>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d01f      	beq.n	800f180 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f140:	2300      	movs	r3, #0
 800f142:	9300      	str	r3, [sp, #0]
 800f144:	2300      	movs	r3, #0
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	2100      	movs	r1, #0
 800f14a:	6978      	ldr	r0, [r7, #20]
 800f14c:	f7ff ff88 	bl	800f060 <xTimerGenericCommand>
 800f150:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d113      	bne.n	800f180 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15c:	f383 8811 	msr	BASEPRI, r3
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	f3bf 8f4f 	dsb	sy
 800f168:	60fb      	str	r3, [r7, #12]
}
 800f16a:	bf00      	nop
 800f16c:	e7fe      	b.n	800f16c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f174:	f023 0301 	bic.w	r3, r3, #1
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	6a1b      	ldr	r3, [r3, #32]
 800f184:	6978      	ldr	r0, [r7, #20]
 800f186:	4798      	blx	r3
}
 800f188:	bf00      	nop
 800f18a:	3718      	adds	r7, #24
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	2000544c 	.word	0x2000544c

0800f194 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800f19c:	f7f2 fcfd 	bl	8001b9a <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1a0:	f107 0308 	add.w	r3, r7, #8
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f000 f857 	bl	800f258 <prvGetNextExpireTime>
 800f1aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	f000 f803 	bl	800f1bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f1b6:	f000 f8d5 	bl	800f364 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1ba:	e7f1      	b.n	800f1a0 <prvTimerTask+0xc>

0800f1bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f1c6:	f7ff f87f 	bl	800e2c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1ca:	f107 0308 	add.w	r3, r7, #8
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f000 f866 	bl	800f2a0 <prvSampleTimeNow>
 800f1d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d130      	bne.n	800f23e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d10a      	bne.n	800f1f8 <prvProcessTimerOrBlockTask+0x3c>
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d806      	bhi.n	800f1f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f1ea:	f7ff f8b3 	bl	800e354 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f1ee:	68f9      	ldr	r1, [r7, #12]
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7ff ff83 	bl	800f0fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f1f6:	e024      	b.n	800f242 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d008      	beq.n	800f210 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f1fe:	4b13      	ldr	r3, [pc, #76]	; (800f24c <prvProcessTimerOrBlockTask+0x90>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d101      	bne.n	800f20c <prvProcessTimerOrBlockTask+0x50>
 800f208:	2301      	movs	r3, #1
 800f20a:	e000      	b.n	800f20e <prvProcessTimerOrBlockTask+0x52>
 800f20c:	2300      	movs	r3, #0
 800f20e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f210:	4b0f      	ldr	r3, [pc, #60]	; (800f250 <prvProcessTimerOrBlockTask+0x94>)
 800f212:	6818      	ldr	r0, [r3, #0]
 800f214:	687a      	ldr	r2, [r7, #4]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	1ad3      	subs	r3, r2, r3
 800f21a:	683a      	ldr	r2, [r7, #0]
 800f21c:	4619      	mov	r1, r3
 800f21e:	f7fe fda7 	bl	800dd70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f222:	f7ff f897 	bl	800e354 <xTaskResumeAll>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d10a      	bne.n	800f242 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f22c:	4b09      	ldr	r3, [pc, #36]	; (800f254 <prvProcessTimerOrBlockTask+0x98>)
 800f22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f232:	601a      	str	r2, [r3, #0]
 800f234:	f3bf 8f4f 	dsb	sy
 800f238:	f3bf 8f6f 	isb	sy
}
 800f23c:	e001      	b.n	800f242 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f23e:	f7ff f889 	bl	800e354 <xTaskResumeAll>
}
 800f242:	bf00      	nop
 800f244:	3710      	adds	r7, #16
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	20005450 	.word	0x20005450
 800f250:	20005454 	.word	0x20005454
 800f254:	e000ed04 	.word	0xe000ed04

0800f258 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f258:	b480      	push	{r7}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f260:	4b0e      	ldr	r3, [pc, #56]	; (800f29c <prvGetNextExpireTime+0x44>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d101      	bne.n	800f26e <prvGetNextExpireTime+0x16>
 800f26a:	2201      	movs	r2, #1
 800f26c:	e000      	b.n	800f270 <prvGetNextExpireTime+0x18>
 800f26e:	2200      	movs	r2, #0
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d105      	bne.n	800f288 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f27c:	4b07      	ldr	r3, [pc, #28]	; (800f29c <prvGetNextExpireTime+0x44>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	60fb      	str	r3, [r7, #12]
 800f286:	e001      	b.n	800f28c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f288:	2300      	movs	r3, #0
 800f28a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f28c:	68fb      	ldr	r3, [r7, #12]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3714      	adds	r7, #20
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop
 800f29c:	2000544c 	.word	0x2000544c

0800f2a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f2a8:	f7ff f8f2 	bl	800e490 <xTaskGetTickCount>
 800f2ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f2ae:	4b0b      	ldr	r3, [pc, #44]	; (800f2dc <prvSampleTimeNow+0x3c>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	68fa      	ldr	r2, [r7, #12]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d205      	bcs.n	800f2c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f2b8:	f000 f936 	bl	800f528 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	601a      	str	r2, [r3, #0]
 800f2c2:	e002      	b.n	800f2ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f2ca:	4a04      	ldr	r2, [pc, #16]	; (800f2dc <prvSampleTimeNow+0x3c>)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	2000545c 	.word	0x2000545c

0800f2e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	607a      	str	r2, [r7, #4]
 800f2ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	68ba      	ldr	r2, [r7, #8]
 800f2f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	68fa      	ldr	r2, [r7, #12]
 800f2fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f2fe:	68ba      	ldr	r2, [r7, #8]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	429a      	cmp	r2, r3
 800f304:	d812      	bhi.n	800f32c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	1ad2      	subs	r2, r2, r3
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	699b      	ldr	r3, [r3, #24]
 800f310:	429a      	cmp	r2, r3
 800f312:	d302      	bcc.n	800f31a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f314:	2301      	movs	r3, #1
 800f316:	617b      	str	r3, [r7, #20]
 800f318:	e01b      	b.n	800f352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f31a:	4b10      	ldr	r3, [pc, #64]	; (800f35c <prvInsertTimerInActiveList+0x7c>)
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	3304      	adds	r3, #4
 800f322:	4619      	mov	r1, r3
 800f324:	4610      	mov	r0, r2
 800f326:	f7fd fcd2 	bl	800ccce <vListInsert>
 800f32a:	e012      	b.n	800f352 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	429a      	cmp	r2, r3
 800f332:	d206      	bcs.n	800f342 <prvInsertTimerInActiveList+0x62>
 800f334:	68ba      	ldr	r2, [r7, #8]
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d302      	bcc.n	800f342 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f33c:	2301      	movs	r3, #1
 800f33e:	617b      	str	r3, [r7, #20]
 800f340:	e007      	b.n	800f352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f342:	4b07      	ldr	r3, [pc, #28]	; (800f360 <prvInsertTimerInActiveList+0x80>)
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	3304      	adds	r3, #4
 800f34a:	4619      	mov	r1, r3
 800f34c:	4610      	mov	r0, r2
 800f34e:	f7fd fcbe 	bl	800ccce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f352:	697b      	ldr	r3, [r7, #20]
}
 800f354:	4618      	mov	r0, r3
 800f356:	3718      	adds	r7, #24
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	20005450 	.word	0x20005450
 800f360:	2000544c 	.word	0x2000544c

0800f364 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08e      	sub	sp, #56	; 0x38
 800f368:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f36a:	e0ca      	b.n	800f502 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	da18      	bge.n	800f3a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f372:	1d3b      	adds	r3, r7, #4
 800f374:	3304      	adds	r3, #4
 800f376:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d10a      	bne.n	800f394 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f382:	f383 8811 	msr	BASEPRI, r3
 800f386:	f3bf 8f6f 	isb	sy
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	61fb      	str	r3, [r7, #28]
}
 800f390:	bf00      	nop
 800f392:	e7fe      	b.n	800f392 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f39a:	6850      	ldr	r0, [r2, #4]
 800f39c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f39e:	6892      	ldr	r2, [r2, #8]
 800f3a0:	4611      	mov	r1, r2
 800f3a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f2c0 80aa 	blt.w	800f500 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b2:	695b      	ldr	r3, [r3, #20]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d004      	beq.n	800f3c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ba:	3304      	adds	r3, #4
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7fd fcbf 	bl	800cd40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f3c2:	463b      	mov	r3, r7
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff ff6b 	bl	800f2a0 <prvSampleTimeNow>
 800f3ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2b09      	cmp	r3, #9
 800f3d0:	f200 8097 	bhi.w	800f502 <prvProcessReceivedCommands+0x19e>
 800f3d4:	a201      	add	r2, pc, #4	; (adr r2, 800f3dc <prvProcessReceivedCommands+0x78>)
 800f3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3da:	bf00      	nop
 800f3dc:	0800f405 	.word	0x0800f405
 800f3e0:	0800f405 	.word	0x0800f405
 800f3e4:	0800f405 	.word	0x0800f405
 800f3e8:	0800f479 	.word	0x0800f479
 800f3ec:	0800f48d 	.word	0x0800f48d
 800f3f0:	0800f4d7 	.word	0x0800f4d7
 800f3f4:	0800f405 	.word	0x0800f405
 800f3f8:	0800f405 	.word	0x0800f405
 800f3fc:	0800f479 	.word	0x0800f479
 800f400:	0800f48d 	.word	0x0800f48d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f40a:	f043 0301 	orr.w	r3, r3, #1
 800f40e:	b2da      	uxtb	r2, r3
 800f410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f416:	68ba      	ldr	r2, [r7, #8]
 800f418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41a:	699b      	ldr	r3, [r3, #24]
 800f41c:	18d1      	adds	r1, r2, r3
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f424:	f7ff ff5c 	bl	800f2e0 <prvInsertTimerInActiveList>
 800f428:	4603      	mov	r3, r0
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d069      	beq.n	800f502 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f430:	6a1b      	ldr	r3, [r3, #32]
 800f432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f434:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f43c:	f003 0304 	and.w	r3, r3, #4
 800f440:	2b00      	cmp	r3, #0
 800f442:	d05e      	beq.n	800f502 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f444:	68ba      	ldr	r2, [r7, #8]
 800f446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f448:	699b      	ldr	r3, [r3, #24]
 800f44a:	441a      	add	r2, r3
 800f44c:	2300      	movs	r3, #0
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	2300      	movs	r3, #0
 800f452:	2100      	movs	r1, #0
 800f454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f456:	f7ff fe03 	bl	800f060 <xTimerGenericCommand>
 800f45a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f45c:	6a3b      	ldr	r3, [r7, #32]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d14f      	bne.n	800f502 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f466:	f383 8811 	msr	BASEPRI, r3
 800f46a:	f3bf 8f6f 	isb	sy
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	61bb      	str	r3, [r7, #24]
}
 800f474:	bf00      	nop
 800f476:	e7fe      	b.n	800f476 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f47e:	f023 0301 	bic.w	r3, r3, #1
 800f482:	b2da      	uxtb	r2, r3
 800f484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f48a:	e03a      	b.n	800f502 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f492:	f043 0301 	orr.w	r3, r3, #1
 800f496:	b2da      	uxtb	r2, r3
 800f498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f49e:	68ba      	ldr	r2, [r7, #8]
 800f4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a6:	699b      	ldr	r3, [r3, #24]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d10a      	bne.n	800f4c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b0:	f383 8811 	msr	BASEPRI, r3
 800f4b4:	f3bf 8f6f 	isb	sy
 800f4b8:	f3bf 8f4f 	dsb	sy
 800f4bc:	617b      	str	r3, [r7, #20]
}
 800f4be:	bf00      	nop
 800f4c0:	e7fe      	b.n	800f4c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c4:	699a      	ldr	r2, [r3, #24]
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c8:	18d1      	adds	r1, r2, r3
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4d0:	f7ff ff06 	bl	800f2e0 <prvInsertTimerInActiveList>
					break;
 800f4d4:	e015      	b.n	800f502 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4dc:	f003 0302 	and.w	r3, r3, #2
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d103      	bne.n	800f4ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f4e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4e6:	f7fd fa83 	bl	800c9f0 <vPortFree>
 800f4ea:	e00a      	b.n	800f502 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4f2:	f023 0301 	bic.w	r3, r3, #1
 800f4f6:	b2da      	uxtb	r2, r3
 800f4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f4fe:	e000      	b.n	800f502 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f500:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f502:	4b08      	ldr	r3, [pc, #32]	; (800f524 <prvProcessReceivedCommands+0x1c0>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	1d39      	adds	r1, r7, #4
 800f508:	2200      	movs	r2, #0
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7fe fa16 	bl	800d93c <xQueueReceive>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	f47f af2a 	bne.w	800f36c <prvProcessReceivedCommands+0x8>
	}
}
 800f518:	bf00      	nop
 800f51a:	bf00      	nop
 800f51c:	3730      	adds	r7, #48	; 0x30
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	20005454 	.word	0x20005454

0800f528 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b088      	sub	sp, #32
 800f52c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f52e:	e048      	b.n	800f5c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f530:	4b2d      	ldr	r3, [pc, #180]	; (800f5e8 <prvSwitchTimerLists+0xc0>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f53a:	4b2b      	ldr	r3, [pc, #172]	; (800f5e8 <prvSwitchTimerLists+0xc0>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	3304      	adds	r3, #4
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fd fbf9 	bl	800cd40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	6a1b      	ldr	r3, [r3, #32]
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f55c:	f003 0304 	and.w	r3, r3, #4
 800f560:	2b00      	cmp	r3, #0
 800f562:	d02e      	beq.n	800f5c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	699b      	ldr	r3, [r3, #24]
 800f568:	693a      	ldr	r2, [r7, #16]
 800f56a:	4413      	add	r3, r2
 800f56c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f56e:	68ba      	ldr	r2, [r7, #8]
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	429a      	cmp	r2, r3
 800f574:	d90e      	bls.n	800f594 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	68ba      	ldr	r2, [r7, #8]
 800f57a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	68fa      	ldr	r2, [r7, #12]
 800f580:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f582:	4b19      	ldr	r3, [pc, #100]	; (800f5e8 <prvSwitchTimerLists+0xc0>)
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	3304      	adds	r3, #4
 800f58a:	4619      	mov	r1, r3
 800f58c:	4610      	mov	r0, r2
 800f58e:	f7fd fb9e 	bl	800ccce <vListInsert>
 800f592:	e016      	b.n	800f5c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f594:	2300      	movs	r3, #0
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	2300      	movs	r3, #0
 800f59a:	693a      	ldr	r2, [r7, #16]
 800f59c:	2100      	movs	r1, #0
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	f7ff fd5e 	bl	800f060 <xTimerGenericCommand>
 800f5a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10a      	bne.n	800f5c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	603b      	str	r3, [r7, #0]
}
 800f5be:	bf00      	nop
 800f5c0:	e7fe      	b.n	800f5c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5c2:	4b09      	ldr	r3, [pc, #36]	; (800f5e8 <prvSwitchTimerLists+0xc0>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1b1      	bne.n	800f530 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f5cc:	4b06      	ldr	r3, [pc, #24]	; (800f5e8 <prvSwitchTimerLists+0xc0>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f5d2:	4b06      	ldr	r3, [pc, #24]	; (800f5ec <prvSwitchTimerLists+0xc4>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4a04      	ldr	r2, [pc, #16]	; (800f5e8 <prvSwitchTimerLists+0xc0>)
 800f5d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f5da:	4a04      	ldr	r2, [pc, #16]	; (800f5ec <prvSwitchTimerLists+0xc4>)
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	6013      	str	r3, [r2, #0]
}
 800f5e0:	bf00      	nop
 800f5e2:	3718      	adds	r7, #24
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	2000544c 	.word	0x2000544c
 800f5ec:	20005450 	.word	0x20005450

0800f5f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f5f6:	f7fd fcfd 	bl	800cff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f5fa:	4b15      	ldr	r3, [pc, #84]	; (800f650 <prvCheckForValidListAndQueue+0x60>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d120      	bne.n	800f644 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f602:	4814      	ldr	r0, [pc, #80]	; (800f654 <prvCheckForValidListAndQueue+0x64>)
 800f604:	f7fd fb12 	bl	800cc2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f608:	4813      	ldr	r0, [pc, #76]	; (800f658 <prvCheckForValidListAndQueue+0x68>)
 800f60a:	f7fd fb0f 	bl	800cc2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f60e:	4b13      	ldr	r3, [pc, #76]	; (800f65c <prvCheckForValidListAndQueue+0x6c>)
 800f610:	4a10      	ldr	r2, [pc, #64]	; (800f654 <prvCheckForValidListAndQueue+0x64>)
 800f612:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f614:	4b12      	ldr	r3, [pc, #72]	; (800f660 <prvCheckForValidListAndQueue+0x70>)
 800f616:	4a10      	ldr	r2, [pc, #64]	; (800f658 <prvCheckForValidListAndQueue+0x68>)
 800f618:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f61a:	2300      	movs	r3, #0
 800f61c:	9300      	str	r3, [sp, #0]
 800f61e:	4b11      	ldr	r3, [pc, #68]	; (800f664 <prvCheckForValidListAndQueue+0x74>)
 800f620:	4a11      	ldr	r2, [pc, #68]	; (800f668 <prvCheckForValidListAndQueue+0x78>)
 800f622:	2110      	movs	r1, #16
 800f624:	200a      	movs	r0, #10
 800f626:	f7fd ff53 	bl	800d4d0 <xQueueGenericCreateStatic>
 800f62a:	4603      	mov	r3, r0
 800f62c:	4a08      	ldr	r2, [pc, #32]	; (800f650 <prvCheckForValidListAndQueue+0x60>)
 800f62e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f630:	4b07      	ldr	r3, [pc, #28]	; (800f650 <prvCheckForValidListAndQueue+0x60>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d005      	beq.n	800f644 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f638:	4b05      	ldr	r3, [pc, #20]	; (800f650 <prvCheckForValidListAndQueue+0x60>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	490b      	ldr	r1, [pc, #44]	; (800f66c <prvCheckForValidListAndQueue+0x7c>)
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fe fb6c 	bl	800dd1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f644:	f7fd fd06 	bl	800d054 <vPortExitCritical>
}
 800f648:	bf00      	nop
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	20005454 	.word	0x20005454
 800f654:	20005424 	.word	0x20005424
 800f658:	20005438 	.word	0x20005438
 800f65c:	2000544c 	.word	0x2000544c
 800f660:	20005450 	.word	0x20005450
 800f664:	20005500 	.word	0x20005500
 800f668:	20005460 	.word	0x20005460
 800f66c:	08010010 	.word	0x08010010

0800f670 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b086      	sub	sp, #24
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d10a      	bne.n	800f698 <pvTimerGetTimerID+0x28>
	__asm volatile
 800f682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f686:	f383 8811 	msr	BASEPRI, r3
 800f68a:	f3bf 8f6f 	isb	sy
 800f68e:	f3bf 8f4f 	dsb	sy
 800f692:	60fb      	str	r3, [r7, #12]
}
 800f694:	bf00      	nop
 800f696:	e7fe      	b.n	800f696 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f698:	f7fd fcac 	bl	800cff4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	69db      	ldr	r3, [r3, #28]
 800f6a0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f6a2:	f7fd fcd7 	bl	800d054 <vPortExitCritical>

	return pvReturn;
 800f6a6:	693b      	ldr	r3, [r7, #16]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3718      	adds	r7, #24
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <__libc_init_array>:
 800f6b0:	b570      	push	{r4, r5, r6, lr}
 800f6b2:	4d0d      	ldr	r5, [pc, #52]	; (800f6e8 <__libc_init_array+0x38>)
 800f6b4:	4c0d      	ldr	r4, [pc, #52]	; (800f6ec <__libc_init_array+0x3c>)
 800f6b6:	1b64      	subs	r4, r4, r5
 800f6b8:	10a4      	asrs	r4, r4, #2
 800f6ba:	2600      	movs	r6, #0
 800f6bc:	42a6      	cmp	r6, r4
 800f6be:	d109      	bne.n	800f6d4 <__libc_init_array+0x24>
 800f6c0:	4d0b      	ldr	r5, [pc, #44]	; (800f6f0 <__libc_init_array+0x40>)
 800f6c2:	4c0c      	ldr	r4, [pc, #48]	; (800f6f4 <__libc_init_array+0x44>)
 800f6c4:	f000 f8f0 	bl	800f8a8 <_init>
 800f6c8:	1b64      	subs	r4, r4, r5
 800f6ca:	10a4      	asrs	r4, r4, #2
 800f6cc:	2600      	movs	r6, #0
 800f6ce:	42a6      	cmp	r6, r4
 800f6d0:	d105      	bne.n	800f6de <__libc_init_array+0x2e>
 800f6d2:	bd70      	pop	{r4, r5, r6, pc}
 800f6d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6d8:	4798      	blx	r3
 800f6da:	3601      	adds	r6, #1
 800f6dc:	e7ee      	b.n	800f6bc <__libc_init_array+0xc>
 800f6de:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6e2:	4798      	blx	r3
 800f6e4:	3601      	adds	r6, #1
 800f6e6:	e7f2      	b.n	800f6ce <__libc_init_array+0x1e>
 800f6e8:	08010168 	.word	0x08010168
 800f6ec:	08010168 	.word	0x08010168
 800f6f0:	08010168 	.word	0x08010168
 800f6f4:	0801016c 	.word	0x0801016c

0800f6f8 <memcpy>:
 800f6f8:	440a      	add	r2, r1
 800f6fa:	4291      	cmp	r1, r2
 800f6fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f700:	d100      	bne.n	800f704 <memcpy+0xc>
 800f702:	4770      	bx	lr
 800f704:	b510      	push	{r4, lr}
 800f706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f70e:	4291      	cmp	r1, r2
 800f710:	d1f9      	bne.n	800f706 <memcpy+0xe>
 800f712:	bd10      	pop	{r4, pc}

0800f714 <memset>:
 800f714:	4402      	add	r2, r0
 800f716:	4603      	mov	r3, r0
 800f718:	4293      	cmp	r3, r2
 800f71a:	d100      	bne.n	800f71e <memset+0xa>
 800f71c:	4770      	bx	lr
 800f71e:	f803 1b01 	strb.w	r1, [r3], #1
 800f722:	e7f9      	b.n	800f718 <memset+0x4>

0800f724 <_free_r>:
 800f724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f726:	2900      	cmp	r1, #0
 800f728:	d044      	beq.n	800f7b4 <_free_r+0x90>
 800f72a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f72e:	9001      	str	r0, [sp, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	f1a1 0404 	sub.w	r4, r1, #4
 800f736:	bfb8      	it	lt
 800f738:	18e4      	addlt	r4, r4, r3
 800f73a:	f000 f8a9 	bl	800f890 <__malloc_lock>
 800f73e:	4a1e      	ldr	r2, [pc, #120]	; (800f7b8 <_free_r+0x94>)
 800f740:	9801      	ldr	r0, [sp, #4]
 800f742:	6813      	ldr	r3, [r2, #0]
 800f744:	b933      	cbnz	r3, 800f754 <_free_r+0x30>
 800f746:	6063      	str	r3, [r4, #4]
 800f748:	6014      	str	r4, [r2, #0]
 800f74a:	b003      	add	sp, #12
 800f74c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f750:	f000 b8a4 	b.w	800f89c <__malloc_unlock>
 800f754:	42a3      	cmp	r3, r4
 800f756:	d908      	bls.n	800f76a <_free_r+0x46>
 800f758:	6825      	ldr	r5, [r4, #0]
 800f75a:	1961      	adds	r1, r4, r5
 800f75c:	428b      	cmp	r3, r1
 800f75e:	bf01      	itttt	eq
 800f760:	6819      	ldreq	r1, [r3, #0]
 800f762:	685b      	ldreq	r3, [r3, #4]
 800f764:	1949      	addeq	r1, r1, r5
 800f766:	6021      	streq	r1, [r4, #0]
 800f768:	e7ed      	b.n	800f746 <_free_r+0x22>
 800f76a:	461a      	mov	r2, r3
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	b10b      	cbz	r3, 800f774 <_free_r+0x50>
 800f770:	42a3      	cmp	r3, r4
 800f772:	d9fa      	bls.n	800f76a <_free_r+0x46>
 800f774:	6811      	ldr	r1, [r2, #0]
 800f776:	1855      	adds	r5, r2, r1
 800f778:	42a5      	cmp	r5, r4
 800f77a:	d10b      	bne.n	800f794 <_free_r+0x70>
 800f77c:	6824      	ldr	r4, [r4, #0]
 800f77e:	4421      	add	r1, r4
 800f780:	1854      	adds	r4, r2, r1
 800f782:	42a3      	cmp	r3, r4
 800f784:	6011      	str	r1, [r2, #0]
 800f786:	d1e0      	bne.n	800f74a <_free_r+0x26>
 800f788:	681c      	ldr	r4, [r3, #0]
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	6053      	str	r3, [r2, #4]
 800f78e:	4421      	add	r1, r4
 800f790:	6011      	str	r1, [r2, #0]
 800f792:	e7da      	b.n	800f74a <_free_r+0x26>
 800f794:	d902      	bls.n	800f79c <_free_r+0x78>
 800f796:	230c      	movs	r3, #12
 800f798:	6003      	str	r3, [r0, #0]
 800f79a:	e7d6      	b.n	800f74a <_free_r+0x26>
 800f79c:	6825      	ldr	r5, [r4, #0]
 800f79e:	1961      	adds	r1, r4, r5
 800f7a0:	428b      	cmp	r3, r1
 800f7a2:	bf04      	itt	eq
 800f7a4:	6819      	ldreq	r1, [r3, #0]
 800f7a6:	685b      	ldreq	r3, [r3, #4]
 800f7a8:	6063      	str	r3, [r4, #4]
 800f7aa:	bf04      	itt	eq
 800f7ac:	1949      	addeq	r1, r1, r5
 800f7ae:	6021      	streq	r1, [r4, #0]
 800f7b0:	6054      	str	r4, [r2, #4]
 800f7b2:	e7ca      	b.n	800f74a <_free_r+0x26>
 800f7b4:	b003      	add	sp, #12
 800f7b6:	bd30      	pop	{r4, r5, pc}
 800f7b8:	20005550 	.word	0x20005550

0800f7bc <cleanup_glue>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	460c      	mov	r4, r1
 800f7c0:	6809      	ldr	r1, [r1, #0]
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	b109      	cbz	r1, 800f7ca <cleanup_glue+0xe>
 800f7c6:	f7ff fff9 	bl	800f7bc <cleanup_glue>
 800f7ca:	4621      	mov	r1, r4
 800f7cc:	4628      	mov	r0, r5
 800f7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7d2:	f7ff bfa7 	b.w	800f724 <_free_r>
	...

0800f7d8 <_reclaim_reent>:
 800f7d8:	4b2c      	ldr	r3, [pc, #176]	; (800f88c <_reclaim_reent+0xb4>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	4283      	cmp	r3, r0
 800f7de:	b570      	push	{r4, r5, r6, lr}
 800f7e0:	4604      	mov	r4, r0
 800f7e2:	d051      	beq.n	800f888 <_reclaim_reent+0xb0>
 800f7e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f7e6:	b143      	cbz	r3, 800f7fa <_reclaim_reent+0x22>
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d14a      	bne.n	800f884 <_reclaim_reent+0xac>
 800f7ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7f0:	6819      	ldr	r1, [r3, #0]
 800f7f2:	b111      	cbz	r1, 800f7fa <_reclaim_reent+0x22>
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f7ff ff95 	bl	800f724 <_free_r>
 800f7fa:	6961      	ldr	r1, [r4, #20]
 800f7fc:	b111      	cbz	r1, 800f804 <_reclaim_reent+0x2c>
 800f7fe:	4620      	mov	r0, r4
 800f800:	f7ff ff90 	bl	800f724 <_free_r>
 800f804:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f806:	b111      	cbz	r1, 800f80e <_reclaim_reent+0x36>
 800f808:	4620      	mov	r0, r4
 800f80a:	f7ff ff8b 	bl	800f724 <_free_r>
 800f80e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f810:	b111      	cbz	r1, 800f818 <_reclaim_reent+0x40>
 800f812:	4620      	mov	r0, r4
 800f814:	f7ff ff86 	bl	800f724 <_free_r>
 800f818:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f81a:	b111      	cbz	r1, 800f822 <_reclaim_reent+0x4a>
 800f81c:	4620      	mov	r0, r4
 800f81e:	f7ff ff81 	bl	800f724 <_free_r>
 800f822:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f824:	b111      	cbz	r1, 800f82c <_reclaim_reent+0x54>
 800f826:	4620      	mov	r0, r4
 800f828:	f7ff ff7c 	bl	800f724 <_free_r>
 800f82c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f82e:	b111      	cbz	r1, 800f836 <_reclaim_reent+0x5e>
 800f830:	4620      	mov	r0, r4
 800f832:	f7ff ff77 	bl	800f724 <_free_r>
 800f836:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f838:	b111      	cbz	r1, 800f840 <_reclaim_reent+0x68>
 800f83a:	4620      	mov	r0, r4
 800f83c:	f7ff ff72 	bl	800f724 <_free_r>
 800f840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f842:	b111      	cbz	r1, 800f84a <_reclaim_reent+0x72>
 800f844:	4620      	mov	r0, r4
 800f846:	f7ff ff6d 	bl	800f724 <_free_r>
 800f84a:	69a3      	ldr	r3, [r4, #24]
 800f84c:	b1e3      	cbz	r3, 800f888 <_reclaim_reent+0xb0>
 800f84e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f850:	4620      	mov	r0, r4
 800f852:	4798      	blx	r3
 800f854:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f856:	b1b9      	cbz	r1, 800f888 <_reclaim_reent+0xb0>
 800f858:	4620      	mov	r0, r4
 800f85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f85e:	f7ff bfad 	b.w	800f7bc <cleanup_glue>
 800f862:	5949      	ldr	r1, [r1, r5]
 800f864:	b941      	cbnz	r1, 800f878 <_reclaim_reent+0xa0>
 800f866:	3504      	adds	r5, #4
 800f868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f86a:	2d80      	cmp	r5, #128	; 0x80
 800f86c:	68d9      	ldr	r1, [r3, #12]
 800f86e:	d1f8      	bne.n	800f862 <_reclaim_reent+0x8a>
 800f870:	4620      	mov	r0, r4
 800f872:	f7ff ff57 	bl	800f724 <_free_r>
 800f876:	e7ba      	b.n	800f7ee <_reclaim_reent+0x16>
 800f878:	680e      	ldr	r6, [r1, #0]
 800f87a:	4620      	mov	r0, r4
 800f87c:	f7ff ff52 	bl	800f724 <_free_r>
 800f880:	4631      	mov	r1, r6
 800f882:	e7ef      	b.n	800f864 <_reclaim_reent+0x8c>
 800f884:	2500      	movs	r5, #0
 800f886:	e7ef      	b.n	800f868 <_reclaim_reent+0x90>
 800f888:	bd70      	pop	{r4, r5, r6, pc}
 800f88a:	bf00      	nop
 800f88c:	20000010 	.word	0x20000010

0800f890 <__malloc_lock>:
 800f890:	4801      	ldr	r0, [pc, #4]	; (800f898 <__malloc_lock+0x8>)
 800f892:	f7f3 bc14 	b.w	80030be <__retarget_lock_acquire_recursive>
 800f896:	bf00      	nop
 800f898:	200008f8 	.word	0x200008f8

0800f89c <__malloc_unlock>:
 800f89c:	4801      	ldr	r0, [pc, #4]	; (800f8a4 <__malloc_unlock+0x8>)
 800f89e:	f7f3 bc22 	b.w	80030e6 <__retarget_lock_release_recursive>
 800f8a2:	bf00      	nop
 800f8a4:	200008f8 	.word	0x200008f8

0800f8a8 <_init>:
 800f8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8aa:	bf00      	nop
 800f8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ae:	bc08      	pop	{r3}
 800f8b0:	469e      	mov	lr, r3
 800f8b2:	4770      	bx	lr

0800f8b4 <_fini>:
 800f8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b6:	bf00      	nop
 800f8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ba:	bc08      	pop	{r3}
 800f8bc:	469e      	mov	lr, r3
 800f8be:	4770      	bx	lr
