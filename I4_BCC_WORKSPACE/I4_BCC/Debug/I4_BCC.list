
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  0800f034  0800f034  0001f034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbc8  0800fbc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbc8  0800fbc8  0001fbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbd0  0800fbd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbd0  0800fbd0  0001fbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbd4  0800fbd4  0001fbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800fbd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b574  20000074  0800fc4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b5e8  0800fc4c  0002b5e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030a83  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071aa  00000000  00000000  00050b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026b0  00000000  00000000  00057cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023c0  00000000  00000000  0005a388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ecd  00000000  00000000  0005c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003d245  00000000  00000000  0007e615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7359  00000000  00000000  000bb85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172bb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0ac  00000000  00000000  00172c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f01c 	.word	0x0800f01c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800f01c 	.word	0x0800f01c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <BtcRxVal>:
	return E_OK;

}

StdReturnType BtcRxVal()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

	if(BtcReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN && BtcReceivedDataOnBluetooth <= BTC_RX_HVAC_TEMPERATUREVALUE_MAX)
 80004e8:	4bec      	ldr	r3, [pc, #944]	; (800089c <BtcRxVal+0x3b8>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b95      	cmp	r3, #149	; 0x95
 80004ee:	d908      	bls.n	8000502 <BtcRxVal+0x1e>
 80004f0:	4bea      	ldr	r3, [pc, #936]	; (800089c <BtcRxVal+0x3b8>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2ba6      	cmp	r3, #166	; 0xa6
 80004f6:	d804      	bhi.n	8000502 <BtcRxVal+0x1e>
	{

		Btc_TemperatureValue = BtcReceivedDataOnBluetooth;
 80004f8:	4be8      	ldr	r3, [pc, #928]	; (800089c <BtcRxVal+0x3b8>)
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4be8      	ldr	r3, [pc, #928]	; (80008a0 <BtcRxVal+0x3bc>)
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	e00b      	b.n	800051a <BtcRxVal+0x36>

	}
	else if(BtcReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN && BtcReceivedDataOnBluetooth <= BTC_RX_HVAC_FANVALUE_MAX)
 8000502:	4be6      	ldr	r3, [pc, #920]	; (800089c <BtcRxVal+0x3b8>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2ba9      	cmp	r3, #169	; 0xa9
 8000508:	d907      	bls.n	800051a <BtcRxVal+0x36>
 800050a:	4be4      	ldr	r3, [pc, #912]	; (800089c <BtcRxVal+0x3b8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2bb1      	cmp	r3, #177	; 0xb1
 8000510:	d803      	bhi.n	800051a <BtcRxVal+0x36>
	{

		Btc_FanValue = BtcReceivedDataOnBluetooth;
 8000512:	4be2      	ldr	r3, [pc, #904]	; (800089c <BtcRxVal+0x3b8>)
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	4be3      	ldr	r3, [pc, #908]	; (80008a4 <BtcRxVal+0x3c0>)
 8000518:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
 800051a:	4be0      	ldr	r3, [pc, #896]	; (800089c <BtcRxVal+0x3b8>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	2bd5      	cmp	r3, #213	; 0xd5
 8000522:	f200 8268 	bhi.w	80009f6 <BtcRxVal+0x512>
 8000526:	a201      	add	r2, pc, #4	; (adr r2, 800052c <BtcRxVal+0x48>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	080008b5 	.word	0x080008b5
 8000530:	080008bd 	.word	0x080008bd
 8000534:	080008c5 	.word	0x080008c5
 8000538:	080008cd 	.word	0x080008cd
 800053c:	080008d5 	.word	0x080008d5
 8000540:	080008dd 	.word	0x080008dd
 8000544:	080008e5 	.word	0x080008e5
 8000548:	080008ed 	.word	0x080008ed
 800054c:	080008f5 	.word	0x080008f5
 8000550:	080008fd 	.word	0x080008fd
 8000554:	08000905 	.word	0x08000905
 8000558:	0800090d 	.word	0x0800090d
 800055c:	08000915 	.word	0x08000915
 8000560:	0800091d 	.word	0x0800091d
 8000564:	08000925 	.word	0x08000925
 8000568:	0800092d 	.word	0x0800092d
 800056c:	08000935 	.word	0x08000935
 8000570:	0800093d 	.word	0x0800093d
 8000574:	08000945 	.word	0x08000945
 8000578:	0800094d 	.word	0x0800094d
 800057c:	080009f7 	.word	0x080009f7
 8000580:	080009f7 	.word	0x080009f7
 8000584:	080009f7 	.word	0x080009f7
 8000588:	080009f7 	.word	0x080009f7
 800058c:	080009f7 	.word	0x080009f7
 8000590:	080009f7 	.word	0x080009f7
 8000594:	080009f7 	.word	0x080009f7
 8000598:	080009f7 	.word	0x080009f7
 800059c:	080009f7 	.word	0x080009f7
 80005a0:	080009f7 	.word	0x080009f7
 80005a4:	080009f7 	.word	0x080009f7
 80005a8:	080009f7 	.word	0x080009f7
 80005ac:	080009f7 	.word	0x080009f7
 80005b0:	080009f7 	.word	0x080009f7
 80005b4:	080009f7 	.word	0x080009f7
 80005b8:	080009f7 	.word	0x080009f7
 80005bc:	080009f7 	.word	0x080009f7
 80005c0:	080009f7 	.word	0x080009f7
 80005c4:	080009f7 	.word	0x080009f7
 80005c8:	080009f7 	.word	0x080009f7
 80005cc:	080009f7 	.word	0x080009f7
 80005d0:	080009f7 	.word	0x080009f7
 80005d4:	080009f7 	.word	0x080009f7
 80005d8:	080009f7 	.word	0x080009f7
 80005dc:	080009f7 	.word	0x080009f7
 80005e0:	080009f7 	.word	0x080009f7
 80005e4:	080009f7 	.word	0x080009f7
 80005e8:	080009f7 	.word	0x080009f7
 80005ec:	080009f7 	.word	0x080009f7
 80005f0:	080009f7 	.word	0x080009f7
 80005f4:	080009f7 	.word	0x080009f7
 80005f8:	080009f7 	.word	0x080009f7
 80005fc:	080009f7 	.word	0x080009f7
 8000600:	080009f7 	.word	0x080009f7
 8000604:	080009f7 	.word	0x080009f7
 8000608:	080009f7 	.word	0x080009f7
 800060c:	080009f7 	.word	0x080009f7
 8000610:	080009f7 	.word	0x080009f7
 8000614:	080009f7 	.word	0x080009f7
 8000618:	080009f7 	.word	0x080009f7
 800061c:	080009f7 	.word	0x080009f7
 8000620:	080009f7 	.word	0x080009f7
 8000624:	080009f7 	.word	0x080009f7
 8000628:	080009f7 	.word	0x080009f7
 800062c:	080009f7 	.word	0x080009f7
 8000630:	080009f7 	.word	0x080009f7
 8000634:	080009f7 	.word	0x080009f7
 8000638:	080009f7 	.word	0x080009f7
 800063c:	080009f7 	.word	0x080009f7
 8000640:	080009f7 	.word	0x080009f7
 8000644:	080009f7 	.word	0x080009f7
 8000648:	080009f7 	.word	0x080009f7
 800064c:	080009f7 	.word	0x080009f7
 8000650:	080009f7 	.word	0x080009f7
 8000654:	080009f7 	.word	0x080009f7
 8000658:	080009f7 	.word	0x080009f7
 800065c:	080009f7 	.word	0x080009f7
 8000660:	080009f7 	.word	0x080009f7
 8000664:	080009f7 	.word	0x080009f7
 8000668:	080009f7 	.word	0x080009f7
 800066c:	080009f7 	.word	0x080009f7
 8000670:	080009f7 	.word	0x080009f7
 8000674:	080009f7 	.word	0x080009f7
 8000678:	080009f7 	.word	0x080009f7
 800067c:	080009f7 	.word	0x080009f7
 8000680:	080009f7 	.word	0x080009f7
 8000684:	080009f7 	.word	0x080009f7
 8000688:	080009f7 	.word	0x080009f7
 800068c:	080009f7 	.word	0x080009f7
 8000690:	080009f7 	.word	0x080009f7
 8000694:	080009f7 	.word	0x080009f7
 8000698:	080009f7 	.word	0x080009f7
 800069c:	080009f7 	.word	0x080009f7
 80006a0:	080009f7 	.word	0x080009f7
 80006a4:	080009f7 	.word	0x080009f7
 80006a8:	080009f7 	.word	0x080009f7
 80006ac:	080009f7 	.word	0x080009f7
 80006b0:	080009f7 	.word	0x080009f7
 80006b4:	080009f7 	.word	0x080009f7
 80006b8:	08000885 	.word	0x08000885
 80006bc:	0800088d 	.word	0x0800088d
 80006c0:	08000895 	.word	0x08000895
 80006c4:	080008ad 	.word	0x080008ad
 80006c8:	080009f7 	.word	0x080009f7
 80006cc:	080009f7 	.word	0x080009f7
 80006d0:	080009f7 	.word	0x080009f7
 80006d4:	080009f7 	.word	0x080009f7
 80006d8:	080009f7 	.word	0x080009f7
 80006dc:	080009f7 	.word	0x080009f7
 80006e0:	080009f7 	.word	0x080009f7
 80006e4:	080009f7 	.word	0x080009f7
 80006e8:	080009f7 	.word	0x080009f7
 80006ec:	080009f7 	.word	0x080009f7
 80006f0:	080009f7 	.word	0x080009f7
 80006f4:	080009f7 	.word	0x080009f7
 80006f8:	080009f7 	.word	0x080009f7
 80006fc:	080009f7 	.word	0x080009f7
 8000700:	080009f7 	.word	0x080009f7
 8000704:	080009f7 	.word	0x080009f7
 8000708:	080009f7 	.word	0x080009f7
 800070c:	080009f7 	.word	0x080009f7
 8000710:	080009f7 	.word	0x080009f7
 8000714:	080009f7 	.word	0x080009f7
 8000718:	080009f7 	.word	0x080009f7
 800071c:	080009f7 	.word	0x080009f7
 8000720:	080009f7 	.word	0x080009f7
 8000724:	080009f7 	.word	0x080009f7
 8000728:	080009f7 	.word	0x080009f7
 800072c:	080009f7 	.word	0x080009f7
 8000730:	080009f7 	.word	0x080009f7
 8000734:	080009f7 	.word	0x080009f7
 8000738:	080009f7 	.word	0x080009f7
 800073c:	080009f7 	.word	0x080009f7
 8000740:	080009f7 	.word	0x080009f7
 8000744:	080009f7 	.word	0x080009f7
 8000748:	080009f7 	.word	0x080009f7
 800074c:	080009f7 	.word	0x080009f7
 8000750:	080009f7 	.word	0x080009f7
 8000754:	080009f7 	.word	0x080009f7
 8000758:	080009f7 	.word	0x080009f7
 800075c:	080009f7 	.word	0x080009f7
 8000760:	080009f7 	.word	0x080009f7
 8000764:	080009f7 	.word	0x080009f7
 8000768:	080009f7 	.word	0x080009f7
 800076c:	080009f7 	.word	0x080009f7
 8000770:	080009f7 	.word	0x080009f7
 8000774:	080009f7 	.word	0x080009f7
 8000778:	080009f7 	.word	0x080009f7
 800077c:	080009f7 	.word	0x080009f7
 8000780:	080009f7 	.word	0x080009f7
 8000784:	080009f7 	.word	0x080009f7
 8000788:	080009f7 	.word	0x080009f7
 800078c:	080009f7 	.word	0x080009f7
 8000790:	080009f7 	.word	0x080009f7
 8000794:	080009f7 	.word	0x080009f7
 8000798:	080009f7 	.word	0x080009f7
 800079c:	080009f7 	.word	0x080009f7
 80007a0:	080009f7 	.word	0x080009f7
 80007a4:	080009f7 	.word	0x080009f7
 80007a8:	080009f7 	.word	0x080009f7
 80007ac:	080009f7 	.word	0x080009f7
 80007b0:	080009f7 	.word	0x080009f7
 80007b4:	080009f7 	.word	0x080009f7
 80007b8:	080009f7 	.word	0x080009f7
 80007bc:	080009f7 	.word	0x080009f7
 80007c0:	080009f7 	.word	0x080009f7
 80007c4:	080009f7 	.word	0x080009f7
 80007c8:	080009f7 	.word	0x080009f7
 80007cc:	080009f7 	.word	0x080009f7
 80007d0:	080009f7 	.word	0x080009f7
 80007d4:	080009f7 	.word	0x080009f7
 80007d8:	080009f7 	.word	0x080009f7
 80007dc:	080009f7 	.word	0x080009f7
 80007e0:	080009f7 	.word	0x080009f7
 80007e4:	080009f7 	.word	0x080009f7
 80007e8:	080009f7 	.word	0x080009f7
 80007ec:	080009f7 	.word	0x080009f7
 80007f0:	080009f7 	.word	0x080009f7
 80007f4:	080009f7 	.word	0x080009f7
 80007f8:	080009f7 	.word	0x080009f7
 80007fc:	080009f7 	.word	0x080009f7
 8000800:	080009f7 	.word	0x080009f7
 8000804:	080009f7 	.word	0x080009f7
 8000808:	080009f7 	.word	0x080009f7
 800080c:	080009f7 	.word	0x080009f7
 8000810:	080009f7 	.word	0x080009f7
 8000814:	080009f7 	.word	0x080009f7
 8000818:	080009f7 	.word	0x080009f7
 800081c:	080009f7 	.word	0x080009f7
 8000820:	080009f7 	.word	0x080009f7
 8000824:	080009f7 	.word	0x080009f7
 8000828:	080009f7 	.word	0x080009f7
 800082c:	080009f7 	.word	0x080009f7
 8000830:	080009f7 	.word	0x080009f7
 8000834:	080009f7 	.word	0x080009f7
 8000838:	080009f7 	.word	0x080009f7
 800083c:	080009f7 	.word	0x080009f7
 8000840:	080009f7 	.word	0x080009f7
 8000844:	080009f7 	.word	0x080009f7
 8000848:	08000955 	.word	0x08000955
 800084c:	0800095d 	.word	0x0800095d
 8000850:	0800096b 	.word	0x0800096b
 8000854:	0800097f 	.word	0x0800097f
 8000858:	08000987 	.word	0x08000987
 800085c:	080009e1 	.word	0x080009e1
 8000860:	080009ef 	.word	0x080009ef
 8000864:	0800098f 	.word	0x0800098f
 8000868:	08000997 	.word	0x08000997
 800086c:	0800099f 	.word	0x0800099f
 8000870:	080009ad 	.word	0x080009ad
 8000874:	080009b5 	.word	0x080009b5
 8000878:	080009c3 	.word	0x080009c3
 800087c:	080009cb 	.word	0x080009cb
 8000880:	080009d9 	.word	0x080009d9
	{
		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <BtcRxVal+0x3c4>)
 8000886:	2264      	movs	r2, #100	; 0x64
 8000888:	701a      	strb	r2, [r3, #0]

			break;
 800088a:	e0b5      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <BtcRxVal+0x3c4>)
 800088e:	2265      	movs	r2, #101	; 0x65
 8000890:	701a      	strb	r2, [r3, #0]

			break;
 8000892:	e0b1      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <BtcRxVal+0x3c4>)
 8000896:	2266      	movs	r2, #102	; 0x66
 8000898:	701a      	strb	r2, [r3, #0]

			break;
 800089a:	e0ad      	b.n	80009f8 <BtcRxVal+0x514>
 800089c:	20000090 	.word	0x20000090
 80008a0:	200000ae 	.word	0x200000ae
 80008a4:	200000af 	.word	0x200000af
 80008a8:	200000a5 	.word	0x200000a5

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80008ac:	4b55      	ldr	r3, [pc, #340]	; (8000a04 <BtcRxVal+0x520>)
 80008ae:	2267      	movs	r2, #103	; 0x67
 80008b0:	701a      	strb	r2, [r3, #0]

			break;
 80008b2:	e0a1      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80008b4:	4b54      	ldr	r3, [pc, #336]	; (8000a08 <BtcRxVal+0x524>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]

			break;
 80008ba:	e09d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80008bc:	4b52      	ldr	r3, [pc, #328]	; (8000a08 <BtcRxVal+0x524>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]

			break;
 80008c2:	e099      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80008c4:	4b51      	ldr	r3, [pc, #324]	; (8000a0c <BtcRxVal+0x528>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]

			break;
 80008ca:	e095      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80008cc:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <BtcRxVal+0x528>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]

			break;
 80008d2:	e091      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80008d4:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <BtcRxVal+0x52c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]

			break;
 80008da:	e08d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 80008dc:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <BtcRxVal+0x52c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]

			break;
 80008e2:	e089      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 80008e4:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <BtcRxVal+0x530>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]

			break;
 80008ea:	e085      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 80008ec:	4b49      	ldr	r3, [pc, #292]	; (8000a14 <BtcRxVal+0x530>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]

			break;
 80008f2:	e081      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 80008f4:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <BtcRxVal+0x534>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]

			break;
 80008fa:	e07d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 80008fc:	4b46      	ldr	r3, [pc, #280]	; (8000a18 <BtcRxVal+0x534>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]

			break;
 8000902:	e079      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 8000904:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <BtcRxVal+0x538>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]

			break;
 800090a:	e075      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 800090c:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <BtcRxVal+0x538>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]

			break;
 8000912:	e071      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 8000914:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <BtcRxVal+0x53c>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]

			break;
 800091a:	e06d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 800091c:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <BtcRxVal+0x53c>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]

			break;
 8000922:	e069      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 8000924:	4b3f      	ldr	r3, [pc, #252]	; (8000a24 <BtcRxVal+0x540>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]

			break;
 800092a:	e065      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 800092c:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <BtcRxVal+0x540>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]

			break;
 8000932:	e061      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			ExtLights_BrakeLight_CurrentState = STD_HIGH;
 8000934:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <BtcRxVal+0x544>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]

			break;
 800093a:	e05d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			ExtLights_BrakeLight_CurrentState = STD_LOW;
 800093c:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <BtcRxVal+0x544>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]

			break;
 8000942:	e059      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 8000944:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <BtcRxVal+0x548>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]

			break;
 800094a:	e055      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 800094c:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <BtcRxVal+0x548>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]

			break;
 8000952:	e051      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_NORMALMODE_ON:

			Btc_NormalMode = STD_HIGH;
 8000954:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <BtcRxVal+0x54c>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]

			break;
 800095a:	e04d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_RECIRCULATIONMODE_ON:

			Btc_NormalMode = STD_LOW;
 800095c:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <BtcRxVal+0x54c>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode = STD_HIGH;
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <BtcRxVal+0x550>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]

			break;
 8000968:	e046      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AUTOMATICMODE_ON:

			Btc_NormalMode = STD_LOW;
 800096a:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <BtcRxVal+0x54c>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode = STD_LOW;
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <BtcRxVal+0x550>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_HIGH;
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <BtcRxVal+0x554>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]

			break;
 800097c:	e03c      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTON:

			Btc_BackwindowDefrost = STD_HIGH;
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <BtcRxVal+0x558>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]

			break;
 8000984:	e038      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTOFF:

			Btc_BackwindowDefrost = STD_LOW;
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <BtcRxVal+0x558>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]

			break;
 800098c:	e034      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AC_ON:

			Btc_AC = STD_HIGH;
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <BtcRxVal+0x55c>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]

			break;
 8000994:	e030      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AC_OFF:

			Btc_AC = STD_LOW;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <BtcRxVal+0x55c>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]

			break;
 800099c:	e02c      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_LEGVENT_ON:

			Btc_LegVents = STD_HIGH;
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <BtcRxVal+0x560>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <BtcRxVal+0x554>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]

			break;
 80009aa:	e025      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_LEGVENT_OFF:

			Btc_LegVents = STD_LOW;
 80009ac:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <BtcRxVal+0x560>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]

			break;
 80009b2:	e021      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_MIDVENT_ON:

			Btc_MidVents = STD_HIGH;
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <BtcRxVal+0x564>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <BtcRxVal+0x554>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]

			break;
 80009c0:	e01a      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_MIDVENT_OFF:

			Btc_MidVents = STD_LOW;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <BtcRxVal+0x564>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]

			break;
 80009c8:	e016      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDVENT_ON:

			Btc_WindshieldVents = STD_HIGH;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <BtcRxVal+0x568>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <BtcRxVal+0x554>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]

			break;
 80009d6:	e00f      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDVENT_OFF:

			Btc_WindshieldVents = STD_LOW;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <BtcRxVal+0x568>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]

			break;
 80009de:	e00b      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:

			Btc_WindshieldDefrost = STD_HIGH;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <BtcRxVal+0x56c>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <BtcRxVal+0x554>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]

			break;
 80009ec:	e004      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:

			Btc_WindshieldDefrost = STD_LOW;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <BtcRxVal+0x56c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]

			break;
 80009f4:	e000      	b.n	80009f8 <BtcRxVal+0x514>

		default:

			break;
 80009f6:	bf00      	nop

	}

	return 1;
 80009f8:	2301      	movs	r3, #1

}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200000a5 	.word	0x200000a5
 8000a08:	2000009a 	.word	0x2000009a
 8000a0c:	200000a6 	.word	0x200000a6
 8000a10:	200000a7 	.word	0x200000a7
 8000a14:	200000a9 	.word	0x200000a9
 8000a18:	200000aa 	.word	0x200000aa
 8000a1c:	200000ab 	.word	0x200000ab
 8000a20:	200000a8 	.word	0x200000a8
 8000a24:	200000ad 	.word	0x200000ad
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	200000d5 	.word	0x200000d5
 8000a30:	200000b8 	.word	0x200000b8
 8000a34:	200000b7 	.word	0x200000b7
 8000a38:	200000b6 	.word	0x200000b6
 8000a3c:	200000b4 	.word	0x200000b4
 8000a40:	200000b5 	.word	0x200000b5
 8000a44:	200000b0 	.word	0x200000b0
 8000a48:	200000b1 	.word	0x200000b1
 8000a4c:	200000b2 	.word	0x200000b2
 8000a50:	200000b3 	.word	0x200000b3

08000a54 <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	490e      	ldr	r1, [pc, #56]	; (8000a9c <BtcEnableUart+0x48>)
 8000a62:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <BtcEnableUart+0x4c>)
 8000a64:	f00a f870 	bl	800ab48 <HAL_UART_Receive_IT>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d007      	beq.n	8000a7e <BtcEnableUart+0x2a>
	{
		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	490a      	ldr	r1, [pc, #40]	; (8000a9c <BtcEnableUart+0x48>)
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <BtcEnableUart+0x4c>)
 8000a74:	f00a f868 	bl	800ab48 <HAL_UART_Receive_IT>
		status = E_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	e009      	b.n	8000a92 <BtcEnableUart+0x3e>
	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4906      	ldr	r1, [pc, #24]	; (8000a9c <BtcEnableUart+0x48>)
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <BtcEnableUart+0x4c>)
 8000a84:	f00a f860 	bl	800ab48 <HAL_UART_Receive_IT>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d101      	bne.n	8000a92 <BtcEnableUart+0x3e>
	{
		status = E_NOT_OK;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 8000a92:	79fb      	ldrb	r3, [r7, #7]

}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000090 	.word	0x20000090
 8000aa0:	200008d8 	.word	0x200008d8

08000aa4 <BtcMainFunction>:

void BtcMainFunction()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

	BtcEnableUart();
 8000aa8:	f7ff ffd4 	bl	8000a54 <BtcEnableUart>
	BtcRxVal();
 8000aac:	f7ff fd1a 	bl	80004e4 <BtcRxVal>

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <CenLocState>:

	return E_OK;
}

StdReturnType CenLocState()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <CenLocState+0x70>)
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <CenLocState+0x74>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d027      	beq.n	8000b1a <CenLocState+0x66>
	{

		CenLoc_ExtLights_LockedState 	= CenLoc_PreviousState;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <CenLocState+0x70>)
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <CenLocState+0x78>)
 8000ad0:	701a      	strb	r2, [r3, #0]
		CenLoc_ExtLights_UnlockedState 	= CenLoc_CurrentState;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <CenLocState+0x74>)
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <CenLocState+0x7c>)
 8000ad8:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 			= CenLoc_CurrentState;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <CenLocState+0x74>)
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <CenLocState+0x70>)
 8000ae0:	701a      	strb	r2, [r3, #0]
		CenLoc_LockUnlockFlag 			= !CenLoc_CurrentState;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <CenLocState+0x74>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf0c      	ite	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	2300      	movne	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <CenLocState+0x80>)
 8000af4:	701a      	strb	r2, [r3, #0]
		CenLoc_LockCounter 				= STD_LOW;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <CenLocState+0x84>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
		CenLoc_UnlockCounter 			= STD_LOW;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <CenLocState+0x88>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
		SecAlm_Counter 					= STD_LOW;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <CenLocState+0x8c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Init(&htim2);
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <CenLocState+0x90>)
 8000b0a:	f008 fe29 	bl	8009760 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <CenLocState+0x94>)
 8000b10:	f008 fe26 	bl	8009760 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <CenLocState+0x98>)
 8000b16:	f008 fe23 	bl	8009760 <HAL_TIM_Base_Init>

		/* do nothing */

	}

	return status;
 8000b1a:	79fb      	ldrb	r3, [r7, #7]

}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000092 	.word	0x20000092
 8000b28:	20000091 	.word	0x20000091
 8000b2c:	20000095 	.word	0x20000095
 8000b30:	20000094 	.word	0x20000094
 8000b34:	20000093 	.word	0x20000093
 8000b38:	20000098 	.word	0x20000098
 8000b3c:	20000099 	.word	0x20000099
 8000b40:	200000db 	.word	0x200000db
 8000b44:	200004a0 	.word	0x200004a0
 8000b48:	20000554 	.word	0x20000554
 8000b4c:	200006bc 	.word	0x200006bc

08000b50 <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <CenLocSecAlmStateToOff+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d102      	bne.n	8000b62 <CenLocSecAlmStateToOff+0x12>
	{

		SecAlm_Trigger = STD_LOW;
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <CenLocSecAlmStateToOff+0x20>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	20000091 	.word	0x20000091
 8000b70:	200000da 	.word	0x200000da

08000b74 <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

	if(Btc_CenLoc == STD_HIGH)
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <CenLocRxBtcState+0x30>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d104      	bne.n	8000b8a <CenLocRxBtcState+0x16>
	{

		CenLoc_CurrentState = Btc_CenLoc;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <CenLocRxBtcState+0x30>)
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <CenLocRxBtcState+0x34>)
 8000b86:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000b88:	e007      	b.n	8000b9a <CenLocRxBtcState+0x26>
	else if(Btc_CenLoc == STD_LOW)
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <CenLocRxBtcState+0x30>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <CenLocRxBtcState+0x26>
		CenLoc_CurrentState = Btc_CenLoc;
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <CenLocRxBtcState+0x30>)
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <CenLocRxBtcState+0x34>)
 8000b98:	701a      	strb	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	2000009a 	.word	0x2000009a
 8000ba8:	20000091 	.word	0x20000091

08000bac <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <CenLocToggleDoorLED+0x20>)
 8000bbe:	f004 fb31 	bl	8005224 <HAL_GPIO_WritePin>

}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

	ExtLightsFrontFogLight(CenLoc_FollowMeHomeState);
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <CenLocFollowMeHome+0x28>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fcd3 	bl	8001584 <ExtLightsFrontFogLight>
	ExtLightsLowBeam(CenLoc_FollowMeHomeState);
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <CenLocFollowMeHome+0x28>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fc98 	bl	8001518 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(CenLoc_FollowMeHomeState);
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <CenLocFollowMeHome+0x28>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fcff 	bl	80015f0 <ExtLightsRearPositionLight>

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000096 	.word	0x20000096

08000bfc <CenLocBlinkSignals>:

void CenLocBlinkSignals()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

	ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <CenLocBlinkSignals+0x1c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fccf 	bl	80015a8 <ExtLightsTurnSignalLeft>
	ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8000c0a:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <CenLocBlinkSignals+0x1c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fcdc 	bl	80015cc <ExtLightsTurnSignalRight>

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000097 	.word	0x20000097

08000c1c <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

	uint8 status = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000c26:	4b9b      	ldr	r3, [pc, #620]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	f040 80a6 	bne.w	8000d7c <CenLocLockUnlockStates+0x160>
 8000c30:	4b99      	ldr	r3, [pc, #612]	; (8000e98 <CenLocLockUnlockStates+0x27c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f040 80a1 	bne.w	8000d7c <CenLocLockUnlockStates+0x160>
	{

		HAL_TIM_Base_Stop(&htim3);
 8000c3a:	4898      	ldr	r0, [pc, #608]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000c3c:	f008 feec 	bl	8009a18 <HAL_TIM_Base_Stop>
		Btc_CenLoc = STD_HIGH;
 8000c40:	4b97      	ldr	r3, [pc, #604]	; (8000ea0 <CenLocLockUnlockStates+0x284>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
		IntLightsToggleIntLights(CenLoc_CurrentState);
 8000c46:	4b93      	ldr	r3, [pc, #588]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fd24 	bl	8001698 <IntLightsToggleIntLights>
		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000c50:	4b90      	ldr	r3, [pc, #576]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffa9 	bl	8000bac <CenLocToggleDoorLED>
		SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000c5a:	4b8e      	ldr	r3, [pc, #568]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf0c      	ite	eq
 8000c62:	2301      	moveq	r3, #1
 8000c64:	2300      	movne	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fe19 	bl	80018a0 <SecAlmToggleAlarmLed>

		if(CenLoc_ExtLights_UnlockedState == STD_HIGH && CenLoc_ExtLights_LockedState == STD_LOW)
 8000c6e:	4b8d      	ldr	r3, [pc, #564]	; (8000ea4 <CenLocLockUnlockStates+0x288>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d120      	bne.n	8000cb8 <CenLocLockUnlockStates+0x9c>
 8000c76:	4b8c      	ldr	r3, [pc, #560]	; (8000ea8 <CenLocLockUnlockStates+0x28c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d11c      	bne.n	8000cb8 <CenLocLockUnlockStates+0x9c>
		{

			HAL_TIM_Base_Start(&htim5);
 8000c7e:	488b      	ldr	r0, [pc, #556]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000c80:	f008 fe40 	bl	8009904 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8000c84:	4b89      	ldr	r3, [pc, #548]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	4a89      	ldr	r2, [pc, #548]	; (8000eb0 <CenLocLockUnlockStates+0x294>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d805      	bhi.n	8000c9c <CenLocLockUnlockStates+0x80>
			{

				CenLoc_FollowMeHomeState = STD_HIGH;
 8000c90:	4b88      	ldr	r3, [pc, #544]	; (8000eb4 <CenLocLockUnlockStates+0x298>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8000c96:	f7ff ff9b 	bl	8000bd0 <CenLocFollowMeHome>
 8000c9a:	e00d      	b.n	8000cb8 <CenLocLockUnlockStates+0x9c>

			}
			else
			{

				CenLoc_FollowMeHomeState 		= STD_LOW;
 8000c9c:	4b85      	ldr	r3, [pc, #532]	; (8000eb4 <CenLocLockUnlockStates+0x298>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_UnlockedState 	= STD_LOW;
 8000ca2:	4b80      	ldr	r3, [pc, #512]	; (8000ea4 <CenLocLockUnlockStates+0x288>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_LockedState 	= STD_HIGH;
 8000ca8:	4b7f      	ldr	r3, [pc, #508]	; (8000ea8 <CenLocLockUnlockStates+0x28c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8000cae:	f7ff ff8f 	bl	8000bd0 <CenLocFollowMeHome>
				HAL_TIM_Base_Stop(&htim5);
 8000cb2:	487e      	ldr	r0, [pc, #504]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000cb4:	f008 feb0 	bl	8009a18 <HAL_TIM_Base_Stop>

			/* do nothing */

		}

		if(CenLoc_LockCounter < 4)
 8000cb8:	4b7f      	ldr	r3, [pc, #508]	; (8000eb8 <CenLocLockUnlockStates+0x29c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d853      	bhi.n	8000d68 <CenLocLockUnlockStates+0x14c>
		{

			HAL_TIM_Base_Start(&htim2);
 8000cc0:	487e      	ldr	r0, [pc, #504]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000cc2:	f008 fe1f 	bl	8009904 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000cc6:	4b7d      	ldr	r3, [pc, #500]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d805      	bhi.n	8000ce0 <CenLocLockUnlockStates+0xc4>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000cd4:	4b7a      	ldr	r3, [pc, #488]	; (8000ec0 <CenLocLockUnlockStates+0x2a4>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000cda:	f7ff ff8f 	bl	8000bfc <CenLocBlinkSignals>
		if(CenLoc_LockCounter < 4)
 8000cde:	e140      	b.n	8000f62 <CenLocLockUnlockStates+0x346>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000ce0:	4b76      	ldr	r3, [pc, #472]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d90c      	bls.n	8000d08 <CenLocLockUnlockStates+0xec>
 8000cee:	4b73      	ldr	r3, [pc, #460]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	f241 3287 	movw	r2, #4999	; 0x1387
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d805      	bhi.n	8000d08 <CenLocLockUnlockStates+0xec>
			{

				CenLoc_BlinkState = STD_LOW;
 8000cfc:	4b70      	ldr	r3, [pc, #448]	; (8000ec0 <CenLocLockUnlockStates+0x2a4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000d02:	f7ff ff7b 	bl	8000bfc <CenLocBlinkSignals>
 8000d06:	e038      	b.n	8000d7a <CenLocLockUnlockStates+0x15e>

			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000d08:	4b6c      	ldr	r3, [pc, #432]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d90c      	bls.n	8000d30 <CenLocLockUnlockStates+0x114>
 8000d16:	4b69      	ldr	r3, [pc, #420]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d805      	bhi.n	8000d30 <CenLocLockUnlockStates+0x114>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000d24:	4b66      	ldr	r3, [pc, #408]	; (8000ec0 <CenLocLockUnlockStates+0x2a4>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000d2a:	f7ff ff67 	bl	8000bfc <CenLocBlinkSignals>
 8000d2e:	e024      	b.n	8000d7a <CenLocLockUnlockStates+0x15e>

			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000d30:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	f240 8111 	bls.w	8000f62 <CenLocLockUnlockStates+0x346>
 8000d40:	4b5e      	ldr	r3, [pc, #376]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d46:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	f200 8109 	bhi.w	8000f62 <CenLocLockUnlockStates+0x346>
			{

				CenLoc_BlinkState = STD_LOW;
 8000d50:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <CenLocLockUnlockStates+0x2a4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000d56:	f7ff ff51 	bl	8000bfc <CenLocBlinkSignals>
				CenLoc_LockCounter = CenLoc_LockCounter + 1;
 8000d5a:	4b57      	ldr	r3, [pc, #348]	; (8000eb8 <CenLocLockUnlockStates+0x29c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b55      	ldr	r3, [pc, #340]	; (8000eb8 <CenLocLockUnlockStates+0x29c>)
 8000d64:	701a      	strb	r2, [r3, #0]
		if(CenLoc_LockCounter < 4)
 8000d66:	e0fc      	b.n	8000f62 <CenLocLockUnlockStates+0x346>

				/* do nothing */

			}
		}
		else if(CenLoc_LockCounter >= 4)
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <CenLocLockUnlockStates+0x29c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	f240 80f8 	bls.w	8000f62 <CenLocLockUnlockStates+0x346>
		{

			HAL_TIM_Base_Stop(&htim5);
 8000d72:	484e      	ldr	r0, [pc, #312]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000d74:	f008 fe50 	bl	8009a18 <HAL_TIM_Base_Stop>
		if(CenLoc_LockCounter < 4)
 8000d78:	e0f3      	b.n	8000f62 <CenLocLockUnlockStates+0x346>
 8000d7a:	e0f2      	b.n	8000f62 <CenLocLockUnlockStates+0x346>
			/* do nothing */

		}

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000d7c:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f040 80f1 	bne.w	8000f68 <CenLocLockUnlockStates+0x34c>
 8000d86:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <CenLocLockUnlockStates+0x27c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 80ec 	bne.w	8000f68 <CenLocLockUnlockStates+0x34c>
	{

		Btc_CenLoc = STD_LOW;
 8000d90:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <CenLocLockUnlockStates+0x284>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
		IntLightsToggleIntLights(CenLoc_CurrentState);
 8000d96:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fc7c 	bl	8001698 <IntLightsToggleIntLights>
		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff01 	bl	8000bac <CenLocToggleDoorLED>

		HAL_TIM_Base_Start(&htim3);
 8000daa:	483c      	ldr	r0, [pc, #240]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000dac:	f008 fdaa 	bl	8009904 <HAL_TIM_Base_Start>

		if(CenLoc_ExtLights_UnlockedState == STD_LOW && CenLoc_ExtLights_LockedState == STD_HIGH)
 8000db0:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <CenLocLockUnlockStates+0x288>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d126      	bne.n	8000e06 <CenLocLockUnlockStates+0x1ea>
 8000db8:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <CenLocLockUnlockStates+0x28c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d122      	bne.n	8000e06 <CenLocLockUnlockStates+0x1ea>
		{

			HAL_TIM_Base_Start(&htim5);
 8000dc0:	483a      	ldr	r0, [pc, #232]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000dc2:	f008 fd9f 	bl	8009904 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	4a38      	ldr	r2, [pc, #224]	; (8000eb0 <CenLocLockUnlockStates+0x294>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d805      	bhi.n	8000dde <CenLocLockUnlockStates+0x1c2>
			{

				CenLoc_FollowMeHomeState = STD_HIGH;
 8000dd2:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <CenLocLockUnlockStates+0x298>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8000dd8:	f7ff fefa 	bl	8000bd0 <CenLocFollowMeHome>
 8000ddc:	e013      	b.n	8000e06 <CenLocLockUnlockStates+0x1ea>

			}
			else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 8000dde:	4b33      	ldr	r3, [pc, #204]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	4a37      	ldr	r2, [pc, #220]	; (8000ec4 <CenLocLockUnlockStates+0x2a8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d90d      	bls.n	8000e06 <CenLocLockUnlockStates+0x1ea>
			{

				CenLoc_FollowMeHomeState 		= STD_LOW;
 8000dea:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <CenLocLockUnlockStates+0x298>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_UnlockedState 	= STD_HIGH;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <CenLocLockUnlockStates+0x288>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_LockedState 	= STD_LOW;
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <CenLocLockUnlockStates+0x28c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8000dfc:	f7ff fee8 	bl	8000bd0 <CenLocFollowMeHome>
				HAL_TIM_Base_Stop(&htim5);
 8000e00:	482a      	ldr	r0, [pc, #168]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000e02:	f008 fe09 	bl	8009a18 <HAL_TIM_Base_Stop>

			/* do nothing */

		}

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d911      	bls.n	8000e38 <CenLocLockUnlockStates+0x21c>
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	f24a 1221 	movw	r2, #41249	; 0xa121
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d80a      	bhi.n	8000e38 <CenLocLockUnlockStates+0x21c>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf0c      	ite	eq
 8000e2a:	2301      	moveq	r3, #1
 8000e2c:	2300      	movne	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fd35 	bl	80018a0 <SecAlmToggleAlarmLed>
 8000e36:	e05a      	b.n	8000eee <CenLocLockUnlockStates+0x2d2>

		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	f24a 1222 	movw	r2, #41250	; 0xa122
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d90c      	bls.n	8000e60 <CenLocLockUnlockStates+0x244>
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	f24a 6203 	movw	r2, #42499	; 0xa603
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d805      	bhi.n	8000e60 <CenLocLockUnlockStates+0x244>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fd21 	bl	80018a0 <SecAlmToggleAlarmLed>
 8000e5e:	e046      	b.n	8000eee <CenLocLockUnlockStates+0x2d2>

		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f24a 6204 	movw	r2, #42500	; 0xa604
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d92c      	bls.n	8000ec8 <CenLocLockUnlockStates+0x2ac>
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d825      	bhi.n	8000ec8 <CenLocLockUnlockStates+0x2ac>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2301      	moveq	r3, #1
 8000e86:	2300      	movne	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fd08 	bl	80018a0 <SecAlmToggleAlarmLed>
 8000e90:	e02d      	b.n	8000eee <CenLocLockUnlockStates+0x2d2>
 8000e92:	bf00      	nop
 8000e94:	20000091 	.word	0x20000091
 8000e98:	200000da 	.word	0x200000da
 8000e9c:	20000554 	.word	0x20000554
 8000ea0:	2000009a 	.word	0x2000009a
 8000ea4:	20000094 	.word	0x20000094
 8000ea8:	20000095 	.word	0x20000095
 8000eac:	200006bc 	.word	0x200006bc
 8000eb0:	0001869f 	.word	0x0001869f
 8000eb4:	20000096 	.word	0x20000096
 8000eb8:	20000098 	.word	0x20000098
 8000ebc:	200004a0 	.word	0x200004a0
 8000ec0:	20000097 	.word	0x20000097
 8000ec4:	000186a0 	.word	0x000186a0

		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <CenLocLockUnlockStates+0x358>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d90b      	bls.n	8000eee <CenLocLockUnlockStates+0x2d2>
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <CenLocLockUnlockStates+0x358>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d804      	bhi.n	8000eee <CenLocLockUnlockStates+0x2d2>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <CenLocLockUnlockStates+0x35c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fcd9 	bl	80018a0 <SecAlmToggleAlarmLed>

			/* do nothing */

		}

		if(CenLoc_UnlockCounter < 2 && CenLoc_LockUnlockFlag == STD_HIGH)
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <CenLocLockUnlockStates+0x360>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d82d      	bhi.n	8000f52 <CenLocLockUnlockStates+0x336>
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <CenLocLockUnlockStates+0x364>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d129      	bne.n	8000f52 <CenLocLockUnlockStates+0x336>
		{

			HAL_TIM_Base_Start(&htim2);
 8000efe:	4821      	ldr	r0, [pc, #132]	; (8000f84 <CenLocLockUnlockStates+0x368>)
 8000f00:	f008 fd00 	bl	8009904 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <CenLocLockUnlockStates+0x368>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d805      	bhi.n	8000f1e <CenLocLockUnlockStates+0x302>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <CenLocLockUnlockStates+0x36c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000f18:	f7ff fe70 	bl	8000bfc <CenLocBlinkSignals>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f1c:	e023      	b.n	8000f66 <CenLocLockUnlockStates+0x34a>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <CenLocLockUnlockStates+0x368>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d91c      	bls.n	8000f66 <CenLocLockUnlockStates+0x34a>
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <CenLocLockUnlockStates+0x368>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d815      	bhi.n	8000f66 <CenLocLockUnlockStates+0x34a>
			{

				CenLoc_BlinkState = STD_LOW;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <CenLocLockUnlockStates+0x36c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000f40:	f7ff fe5c 	bl	8000bfc <CenLocBlinkSignals>
				CenLoc_UnlockCounter = CenLoc_UnlockCounter + 1;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <CenLocLockUnlockStates+0x360>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <CenLocLockUnlockStates+0x360>)
 8000f4e:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f50:	e009      	b.n	8000f66 <CenLocLockUnlockStates+0x34a>
				/* do nothing */

			}

		}
		else if(CenLoc_UnlockCounter >= 2)
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <CenLocLockUnlockStates+0x360>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d906      	bls.n	8000f68 <CenLocLockUnlockStates+0x34c>
		{

			HAL_TIM_Base_Stop(&htim2);
 8000f5a:	480a      	ldr	r0, [pc, #40]	; (8000f84 <CenLocLockUnlockStates+0x368>)
 8000f5c:	f008 fd5c 	bl	8009a18 <HAL_TIM_Base_Stop>
 8000f60:	e002      	b.n	8000f68 <CenLocLockUnlockStates+0x34c>
		if(CenLoc_LockCounter < 4)
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <CenLocLockUnlockStates+0x34c>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f66:	bf00      	nop

		/* do nothing */

	}

	return status;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000554 	.word	0x20000554
 8000f78:	20000091 	.word	0x20000091
 8000f7c:	20000099 	.word	0x20000099
 8000f80:	20000093 	.word	0x20000093
 8000f84:	200004a0 	.word	0x200004a0
 8000f88:	20000097 	.word	0x20000097

08000f8c <CenLocMainFunction>:

void CenLocMainFunction()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 8000f90:	f7ff fdf0 	bl	8000b74 <CenLocRxBtcState>
	CenLocSecAlmStateToOff();
 8000f94:	f7ff fddc 	bl	8000b50 <CenLocSecAlmStateToOff>
	CenLocState();
 8000f98:	f7ff fd8c 	bl	8000ab4 <CenLocState>
	CenLocLockUnlockStates();
 8000f9c:	f7ff fe3e 	bl	8000c1c <CenLocLockUnlockStates>

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <ExtLightsMainFunction>:
void ExtLightsLightState();
StdReturnType ExtLightsInit();
uint32 ExtLightsLightReadSensorValue();

void ExtLightsMainFunction()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

	ExtLightsRxBtcState();
 8000fa8:	f000 f9e6 	bl	8001378 <ExtLightsRxBtcState>
	ExtLightsLightState();
 8000fac:	f000 f802 	bl	8000fb4 <ExtLightsLightState>

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <ExtLightsLightState>:
	return E_OK;

}

void ExtLightsLightState()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

	uint8 lightSensorState = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	71fb      	strb	r3, [r7, #7]

	ExtLightsHighBeam(ExtLights_HighBeam_CurrentState);
 8000fbe:	4b98      	ldr	r3, [pc, #608]	; (8001220 <ExtLightsLightState+0x26c>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 faba 	bl	800153c <ExtLightsHighBeam>
	ExtLightsHighBeam(ExtLights_FlashHighBeam_CurrentState);
 8000fc8:	4b96      	ldr	r3, [pc, #600]	; (8001224 <ExtLightsLightState+0x270>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fab5 	bl	800153c <ExtLightsHighBeam>
	ExtLightsFrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8000fd2:	4b95      	ldr	r3, [pc, #596]	; (8001228 <ExtLightsLightState+0x274>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fad4 	bl	8001584 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(ExtLights_RearFogLight_CurrentState);
 8000fdc:	4b93      	ldr	r3, [pc, #588]	; (800122c <ExtLightsLightState+0x278>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fb17 	bl	8001614 <ExtLightsRearFogLight>
	ExtLightsReverseLight(ExtLights_ReverseLight_CurrentState);
 8000fe6:	4b92      	ldr	r3, [pc, #584]	; (8001230 <ExtLightsLightState+0x27c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fb24 	bl	8001638 <ExtLightsReverseLight>


	if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 8000ff0:	4b90      	ldr	r3, [pc, #576]	; (8001234 <ExtLightsLightState+0x280>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b64      	cmp	r3, #100	; 0x64
 8000ff6:	d10c      	bne.n	8001012 <ExtLightsLightState+0x5e>
	{

		ExtLightsLowBeam(STD_LOW);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 fa8d 	bl	8001518 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_LOW);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 faae 	bl	8001560 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_LOW);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 faf3 	bl	80015f0 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_LOW);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 fb26 	bl	800165c <ExtLightsLicensePlateLight>
 8001010:	e048      	b.n	80010a4 <ExtLightsLightState+0xf0>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 8001012:	4b88      	ldr	r3, [pc, #544]	; (8001234 <ExtLightsLightState+0x280>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b65      	cmp	r3, #101	; 0x65
 8001018:	d123      	bne.n	8001062 <ExtLightsLightState+0xae>
	{

		lightSensorState = ExtLightsLightReadSensorValue();
 800101a:	f000 fa6b 	bl	80014f4 <ExtLightsLightReadSensorValue>
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]

		if(lightSensorState < EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b95      	cmp	r3, #149	; 0x95
 8001026:	d80c      	bhi.n	8001042 <ExtLightsLightState+0x8e>
		{

			ExtLightsLowBeam(STD_HIGH);
 8001028:	2001      	movs	r0, #1
 800102a:	f000 fa75 	bl	8001518 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 800102e:	2001      	movs	r0, #1
 8001030:	f000 fa96 	bl	8001560 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 8001034:	2001      	movs	r0, #1
 8001036:	f000 fadb 	bl	80015f0 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 800103a:	2001      	movs	r0, #1
 800103c:	f000 fb0e 	bl	800165c <ExtLightsLicensePlateLight>
 8001040:	e030      	b.n	80010a4 <ExtLightsLightState+0xf0>

		}
		else if(lightSensorState > EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b96      	cmp	r3, #150	; 0x96
 8001046:	d92d      	bls.n	80010a4 <ExtLightsLightState+0xf0>
		{

			ExtLightsLowBeam(STD_LOW);
 8001048:	2000      	movs	r0, #0
 800104a:	f000 fa65 	bl	8001518 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fa86 	bl	8001560 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_LOW);
 8001054:	2000      	movs	r0, #0
 8001056:	f000 facb 	bl	80015f0 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_LOW);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 fafe 	bl	800165c <ExtLightsLicensePlateLight>
 8001060:	e020      	b.n	80010a4 <ExtLightsLightState+0xf0>

		}

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 8001062:	4b74      	ldr	r3, [pc, #464]	; (8001234 <ExtLightsLightState+0x280>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b66      	cmp	r3, #102	; 0x66
 8001068:	d10c      	bne.n	8001084 <ExtLightsLightState+0xd0>
	{

		ExtLightsLowBeam(STD_LOW);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 fa54 	bl	8001518 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 8001070:	2001      	movs	r0, #1
 8001072:	f000 fa75 	bl	8001560 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 8001076:	2001      	movs	r0, #1
 8001078:	f000 faba 	bl	80015f0 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 faed 	bl	800165c <ExtLightsLicensePlateLight>
 8001082:	e00f      	b.n	80010a4 <ExtLightsLightState+0xf0>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 8001084:	4b6b      	ldr	r3, [pc, #428]	; (8001234 <ExtLightsLightState+0x280>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b67      	cmp	r3, #103	; 0x67
 800108a:	d10b      	bne.n	80010a4 <ExtLightsLightState+0xf0>
	{

		ExtLightsLowBeam(STD_HIGH);
 800108c:	2001      	movs	r0, #1
 800108e:	f000 fa43 	bl	8001518 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 8001092:	2001      	movs	r0, #1
 8001094:	f000 fa64 	bl	8001560 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 8001098:	2001      	movs	r0, #1
 800109a:	f000 faa9 	bl	80015f0 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 800109e:	2001      	movs	r0, #1
 80010a0:	f000 fadc 	bl	800165c <ExtLightsLicensePlateLight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 80010a4:	4b64      	ldr	r3, [pc, #400]	; (8001238 <ExtLightsLightState+0x284>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d155      	bne.n	8001158 <ExtLightsLightState+0x1a4>
	{

		HAL_TIM_Base_Start(&htim2);
 80010ac:	4863      	ldr	r0, [pc, #396]	; (800123c <ExtLightsLightState+0x288>)
 80010ae:	f008 fc29 	bl	8009904 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 80010b2:	4b62      	ldr	r3, [pc, #392]	; (800123c <ExtLightsLightState+0x288>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80010bc:	4293      	cmp	r3, r2
 80010be:	d805      	bhi.n	80010cc <ExtLightsLightState+0x118>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 80010c0:	4b5d      	ldr	r3, [pc, #372]	; (8001238 <ExtLightsLightState+0x284>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fa6f 	bl	80015a8 <ExtLightsTurnSignalLeft>
 80010ca:	e04e      	b.n	800116a <ExtLightsLightState+0x1b6>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 80010cc:	4b5b      	ldr	r3, [pc, #364]	; (800123c <ExtLightsLightState+0x288>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d911      	bls.n	80010fe <ExtLightsLightState+0x14a>
 80010da:	4b58      	ldr	r3, [pc, #352]	; (800123c <ExtLightsLightState+0x288>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	f241 3287 	movw	r2, #4999	; 0x1387
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d80a      	bhi.n	80010fe <ExtLightsLightState+0x14a>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 80010e8:	4b53      	ldr	r3, [pc, #332]	; (8001238 <ExtLightsLightState+0x284>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bf0c      	ite	eq
 80010f0:	2301      	moveq	r3, #1
 80010f2:	2300      	movne	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fa56 	bl	80015a8 <ExtLightsTurnSignalLeft>
 80010fc:	e035      	b.n	800116a <ExtLightsLightState+0x1b6>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80010fe:	4b4f      	ldr	r3, [pc, #316]	; (800123c <ExtLightsLightState+0x288>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d90c      	bls.n	8001126 <ExtLightsLightState+0x172>
 800110c:	4b4b      	ldr	r3, [pc, #300]	; (800123c <ExtLightsLightState+0x288>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001116:	4293      	cmp	r3, r2
 8001118:	d805      	bhi.n	8001126 <ExtLightsLightState+0x172>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 800111a:	4b47      	ldr	r3, [pc, #284]	; (8001238 <ExtLightsLightState+0x284>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fa42 	bl	80015a8 <ExtLightsTurnSignalLeft>
 8001124:	e021      	b.n	800116a <ExtLightsLightState+0x1b6>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <ExtLightsLightState+0x288>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001130:	4293      	cmp	r3, r2
 8001132:	d91a      	bls.n	800116a <ExtLightsLightState+0x1b6>
 8001134:	4b41      	ldr	r3, [pc, #260]	; (800123c <ExtLightsLightState+0x288>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	f242 720f 	movw	r2, #9999	; 0x270f
 800113e:	4293      	cmp	r3, r2
 8001140:	d813      	bhi.n	800116a <ExtLightsLightState+0x1b6>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <ExtLightsLightState+0x284>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fa29 	bl	80015a8 <ExtLightsTurnSignalLeft>
 8001156:	e008      	b.n	800116a <ExtLightsLightState+0x1b6>
			/* do nothing */

		}

	}
	else if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 8001158:	4b37      	ldr	r3, [pc, #220]	; (8001238 <ExtLightsLightState+0x284>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d104      	bne.n	800116a <ExtLightsLightState+0x1b6>
	{

		ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <ExtLightsLightState+0x284>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fa1f 	bl	80015a8 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <ExtLightsLightState+0x28c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d168      	bne.n	8001244 <ExtLightsLightState+0x290>
	{

		HAL_TIM_Base_Start(&htim2);
 8001172:	4832      	ldr	r0, [pc, #200]	; (800123c <ExtLightsLightState+0x288>)
 8001174:	f008 fbc6 	bl	8009904 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <ExtLightsLightState+0x288>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001182:	4293      	cmp	r3, r2
 8001184:	d805      	bhi.n	8001192 <ExtLightsLightState+0x1de>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <ExtLightsLightState+0x28c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fa1e 	bl	80015cc <ExtLightsTurnSignalRight>
 8001190:	e061      	b.n	8001256 <ExtLightsLightState+0x2a2>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <ExtLightsLightState+0x288>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800119c:	4293      	cmp	r3, r2
 800119e:	d911      	bls.n	80011c4 <ExtLightsLightState+0x210>
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <ExtLightsLightState+0x288>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f241 3287 	movw	r2, #4999	; 0x1387
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d80a      	bhi.n	80011c4 <ExtLightsLightState+0x210>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <ExtLightsLightState+0x28c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf0c      	ite	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	2300      	movne	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fa05 	bl	80015cc <ExtLightsTurnSignalRight>
 80011c2:	e048      	b.n	8001256 <ExtLightsLightState+0x2a2>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <ExtLightsLightState+0x288>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d90c      	bls.n	80011ec <ExtLightsLightState+0x238>
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <ExtLightsLightState+0x288>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80011dc:	4293      	cmp	r3, r2
 80011de:	d805      	bhi.n	80011ec <ExtLightsLightState+0x238>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <ExtLightsLightState+0x28c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f9f1 	bl	80015cc <ExtLightsTurnSignalRight>
 80011ea:	e034      	b.n	8001256 <ExtLightsLightState+0x2a2>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <ExtLightsLightState+0x288>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d92d      	bls.n	8001256 <ExtLightsLightState+0x2a2>
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <ExtLightsLightState+0x288>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	f242 720f 	movw	r2, #9999	; 0x270f
 8001204:	4293      	cmp	r3, r2
 8001206:	d826      	bhi.n	8001256 <ExtLightsLightState+0x2a2>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <ExtLightsLightState+0x28c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f9d8 	bl	80015cc <ExtLightsTurnSignalRight>
 800121c:	e01b      	b.n	8001256 <ExtLightsLightState+0x2a2>
 800121e:	bf00      	nop
 8001220:	2000009f 	.word	0x2000009f
 8001224:	2000009d 	.word	0x2000009d
 8001228:	200000a0 	.word	0x200000a0
 800122c:	200000a4 	.word	0x200000a4
 8001230:	2000009b 	.word	0x2000009b
 8001234:	2000009e 	.word	0x2000009e
 8001238:	200000a1 	.word	0x200000a1
 800123c:	200004a0 	.word	0x200004a0
 8001240:	200000a2 	.word	0x200000a2

			/* do nothing */

		}
	}
	else if(ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 8001244:	4b49      	ldr	r3, [pc, #292]	; (800136c <ExtLightsLightState+0x3b8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d104      	bne.n	8001256 <ExtLightsLightState+0x2a2>
	{

		ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <ExtLightsLightState+0x3b8>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f9bb 	bl	80015cc <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001256:	4b46      	ldr	r3, [pc, #280]	; (8001370 <ExtLightsLightState+0x3bc>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d173      	bne.n	8001346 <ExtLightsLightState+0x392>
	{

		HAL_TIM_Base_Start(&htim2);
 800125e:	4845      	ldr	r0, [pc, #276]	; (8001374 <ExtLightsLightState+0x3c0>)
 8001260:	f008 fb50 	bl	8009904 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <ExtLightsLightState+0x3c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800126e:	4293      	cmp	r3, r2
 8001270:	d80a      	bhi.n	8001288 <ExtLightsLightState+0x2d4>
		{

			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 8001272:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <ExtLightsLightState+0x3bc>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f9a8 	bl	80015cc <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 800127c:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <ExtLightsLightState+0x3bc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f991 	bl	80015a8 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

}
 8001286:	e06d      	b.n	8001364 <ExtLightsLightState+0x3b0>
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001288:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <ExtLightsLightState+0x3c0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001292:	4293      	cmp	r3, r2
 8001294:	d91b      	bls.n	80012ce <ExtLightsLightState+0x31a>
 8001296:	4b37      	ldr	r3, [pc, #220]	; (8001374 <ExtLightsLightState+0x3c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f241 3287 	movw	r2, #4999	; 0x1387
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d814      	bhi.n	80012ce <ExtLightsLightState+0x31a>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 80012a4:	4b32      	ldr	r3, [pc, #200]	; (8001370 <ExtLightsLightState+0x3bc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f98a 	bl	80015cc <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <ExtLightsLightState+0x3bc>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf0c      	ite	eq
 80012c0:	2301      	moveq	r3, #1
 80012c2:	2300      	movne	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f96e 	bl	80015a8 <ExtLightsTurnSignalLeft>
 80012cc:	e04a      	b.n	8001364 <ExtLightsLightState+0x3b0>
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <ExtLightsLightState+0x3c0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d911      	bls.n	8001300 <ExtLightsLightState+0x34c>
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <ExtLightsLightState+0x3c0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d80a      	bhi.n	8001300 <ExtLightsLightState+0x34c>
			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <ExtLightsLightState+0x3bc>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f96c 	bl	80015cc <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <ExtLightsLightState+0x3bc>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f955 	bl	80015a8 <ExtLightsTurnSignalLeft>
 80012fe:	e031      	b.n	8001364 <ExtLightsLightState+0x3b0>
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <ExtLightsLightState+0x3c0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800130a:	4293      	cmp	r3, r2
 800130c:	d92a      	bls.n	8001364 <ExtLightsLightState+0x3b0>
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <ExtLightsLightState+0x3c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	f242 720f 	movw	r2, #9999	; 0x270f
 8001318:	4293      	cmp	r3, r2
 800131a:	d823      	bhi.n	8001364 <ExtLightsLightState+0x3b0>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <ExtLightsLightState+0x3bc>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf0c      	ite	eq
 8001324:	2301      	moveq	r3, #1
 8001326:	2300      	movne	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f94e 	bl	80015cc <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <ExtLightsLightState+0x3bc>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f932 	bl	80015a8 <ExtLightsTurnSignalLeft>
}
 8001344:	e00e      	b.n	8001364 <ExtLightsLightState+0x3b0>
	else if(ExtLights_HazardLight_CurrentState == STD_LOW)
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <ExtLightsLightState+0x3bc>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10a      	bne.n	8001364 <ExtLightsLightState+0x3b0>
		ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <ExtLightsLightState+0x3bc>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f93a 	bl	80015cc <ExtLightsTurnSignalRight>
		ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <ExtLightsLightState+0x3bc>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f923 	bl	80015a8 <ExtLightsTurnSignalLeft>
}
 8001362:	e7ff      	b.n	8001364 <ExtLightsLightState+0x3b0>
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000a2 	.word	0x200000a2
 8001370:	200000a3 	.word	0x200000a3
 8001374:	200004a0 	.word	0x200004a0

08001378 <ExtLightsRxBtcState>:

void ExtLightsRxBtcState()
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

	if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 800137c:	4b4d      	ldr	r3, [pc, #308]	; (80014b4 <ExtLightsRxBtcState+0x13c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b64      	cmp	r3, #100	; 0x64
 8001382:	d103      	bne.n	800138c <ExtLightsRxBtcState+0x14>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEZERO;
 8001384:	4b4c      	ldr	r3, [pc, #304]	; (80014b8 <ExtLightsRxBtcState+0x140>)
 8001386:	2264      	movs	r2, #100	; 0x64
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e016      	b.n	80013ba <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 800138c:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <ExtLightsRxBtcState+0x13c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b65      	cmp	r3, #101	; 0x65
 8001392:	d103      	bne.n	800139c <ExtLightsRxBtcState+0x24>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEONE;
 8001394:	4b48      	ldr	r3, [pc, #288]	; (80014b8 <ExtLightsRxBtcState+0x140>)
 8001396:	2265      	movs	r2, #101	; 0x65
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e00e      	b.n	80013ba <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 800139c:	4b45      	ldr	r3, [pc, #276]	; (80014b4 <ExtLightsRxBtcState+0x13c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b66      	cmp	r3, #102	; 0x66
 80013a2:	d103      	bne.n	80013ac <ExtLightsRxBtcState+0x34>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETWO;
 80013a4:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <ExtLightsRxBtcState+0x140>)
 80013a6:	2266      	movs	r2, #102	; 0x66
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e006      	b.n	80013ba <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 80013ac:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <ExtLightsRxBtcState+0x13c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b67      	cmp	r3, #103	; 0x67
 80013b2:	d102      	bne.n	80013ba <ExtLightsRxBtcState+0x42>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETHREE;
 80013b4:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <ExtLightsRxBtcState+0x140>)
 80013b6:	2267      	movs	r2, #103	; 0x67
 80013b8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HighBeam == STD_HIGH)
 80013ba:	4b40      	ldr	r3, [pc, #256]	; (80014bc <ExtLightsRxBtcState+0x144>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d104      	bne.n	80013cc <ExtLightsRxBtcState+0x54>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <ExtLightsRxBtcState+0x144>)
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <ExtLightsRxBtcState+0x148>)
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e007      	b.n	80013dc <ExtLightsRxBtcState+0x64>

	}
	else if(Btc_HighBeam == STD_LOW)
 80013cc:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <ExtLightsRxBtcState+0x144>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d103      	bne.n	80013dc <ExtLightsRxBtcState+0x64>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 80013d4:	4b39      	ldr	r3, [pc, #228]	; (80014bc <ExtLightsRxBtcState+0x144>)
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <ExtLightsRxBtcState+0x148>)
 80013da:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FrontFogLight == STD_HIGH)
 80013dc:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <ExtLightsRxBtcState+0x14c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d104      	bne.n	80013ee <ExtLightsRxBtcState+0x76>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 80013e4:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <ExtLightsRxBtcState+0x14c>)
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <ExtLightsRxBtcState+0x150>)
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	e007      	b.n	80013fe <ExtLightsRxBtcState+0x86>

	}
	else if(Btc_FrontFogLight == STD_LOW)
 80013ee:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <ExtLightsRxBtcState+0x14c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d103      	bne.n	80013fe <ExtLightsRxBtcState+0x86>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <ExtLightsRxBtcState+0x14c>)
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <ExtLightsRxBtcState+0x150>)
 80013fc:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_RearFogLight == STD_HIGH)
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <ExtLightsRxBtcState+0x154>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d104      	bne.n	8001410 <ExtLightsRxBtcState+0x98>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <ExtLightsRxBtcState+0x154>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <ExtLightsRxBtcState+0x158>)
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e007      	b.n	8001420 <ExtLightsRxBtcState+0xa8>

	}
	else if(Btc_RearFogLight == STD_LOW)
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <ExtLightsRxBtcState+0x154>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d103      	bne.n	8001420 <ExtLightsRxBtcState+0xa8>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <ExtLightsRxBtcState+0x154>)
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <ExtLightsRxBtcState+0x158>)
 800141e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_BrakeLight == STD_HIGH)
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <ExtLightsRxBtcState+0x15c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d104      	bne.n	8001432 <ExtLightsRxBtcState+0xba>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <ExtLightsRxBtcState+0x15c>)
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <ExtLightsRxBtcState+0x160>)
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e007      	b.n	8001442 <ExtLightsRxBtcState+0xca>

	}
	else if(Btc_BrakeLight == STD_LOW)
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <ExtLightsRxBtcState+0x15c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <ExtLightsRxBtcState+0xca>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <ExtLightsRxBtcState+0x15c>)
 800143c:	781a      	ldrb	r2, [r3, #0]
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <ExtLightsRxBtcState+0x160>)
 8001440:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalLeft == STD_HIGH)
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <ExtLightsRxBtcState+0x164>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d104      	bne.n	8001454 <ExtLightsRxBtcState+0xdc>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <ExtLightsRxBtcState+0x164>)
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <ExtLightsRxBtcState+0x168>)
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e007      	b.n	8001464 <ExtLightsRxBtcState+0xec>

	}
	else if(Btc_TurnSignalLeft == STD_LOW)
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <ExtLightsRxBtcState+0x164>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d103      	bne.n	8001464 <ExtLightsRxBtcState+0xec>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <ExtLightsRxBtcState+0x164>)
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <ExtLightsRxBtcState+0x168>)
 8001462:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalRight == STD_HIGH)
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <ExtLightsRxBtcState+0x16c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d104      	bne.n	8001476 <ExtLightsRxBtcState+0xfe>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <ExtLightsRxBtcState+0x16c>)
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <ExtLightsRxBtcState+0x170>)
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	e007      	b.n	8001486 <ExtLightsRxBtcState+0x10e>

	}
	else if(Btc_TurnSignalRight == STD_LOW)
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <ExtLightsRxBtcState+0x16c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <ExtLightsRxBtcState+0x10e>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <ExtLightsRxBtcState+0x16c>)
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <ExtLightsRxBtcState+0x170>)
 8001484:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HazardLight == STD_HIGH)
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <ExtLightsRxBtcState+0x174>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d104      	bne.n	8001498 <ExtLightsRxBtcState+0x120>
	{

		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <ExtLightsRxBtcState+0x174>)
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <ExtLightsRxBtcState+0x178>)
 8001494:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001496:	e007      	b.n	80014a8 <ExtLightsRxBtcState+0x130>
	else if(Btc_HazardLight == STD_LOW)
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <ExtLightsRxBtcState+0x174>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <ExtLightsRxBtcState+0x130>
		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <ExtLightsRxBtcState+0x174>)
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <ExtLightsRxBtcState+0x178>)
 80014a6:	701a      	strb	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200000a5 	.word	0x200000a5
 80014b8:	2000009e 	.word	0x2000009e
 80014bc:	200000a6 	.word	0x200000a6
 80014c0:	2000009f 	.word	0x2000009f
 80014c4:	200000a8 	.word	0x200000a8
 80014c8:	200000a0 	.word	0x200000a0
 80014cc:	200000ad 	.word	0x200000ad
 80014d0:	200000a4 	.word	0x200000a4
 80014d4:	200000ac 	.word	0x200000ac
 80014d8:	2000009c 	.word	0x2000009c
 80014dc:	200000a9 	.word	0x200000a9
 80014e0:	200000a1 	.word	0x200000a1
 80014e4:	200000aa 	.word	0x200000aa
 80014e8:	200000a2 	.word	0x200000a2
 80014ec:	200000ab 	.word	0x200000ab
 80014f0:	200000a3 	.word	0x200000a3

080014f4 <ExtLightsLightReadSensorValue>:

uint32 ExtLightsLightReadSensorValue()
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0

	uint8 sensorValue = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]

	sensorValue = ADC_BUFFER[2];
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <ExtLightsLightReadSensorValue+0x20>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	71fb      	strb	r3, [r7, #7]

	return sensorValue;
 8001504:	79fb      	ldrb	r3, [r7, #7]

}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200000bc 	.word	0x200000bc

08001518 <ExtLightsLowBeam>:

void ExtLightsLowBeam(uint8 PinState)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	461a      	mov	r2, r3
 8001526:	2120      	movs	r1, #32
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <ExtLightsLowBeam+0x20>)
 800152a:	f003 fe7b 	bl	8005224 <HAL_GPIO_WritePin>

}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020000 	.word	0x40020000

0800153c <ExtLightsHighBeam>:

void ExtLightsHighBeam(uint8 PinState)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	461a      	mov	r2, r3
 800154a:	2120      	movs	r1, #32
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <ExtLightsHighBeam+0x20>)
 800154e:	f003 fe69 	bl	8005224 <HAL_GPIO_WritePin>

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020000 	.word	0x40020000

08001560 <ExtLightsDayTimeRunningLight>:

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	461a      	mov	r2, r3
 800156e:	2120      	movs	r1, #32
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <ExtLightsDayTimeRunningLight+0x20>)
 8001572:	f003 fe57 	bl	8005224 <HAL_GPIO_WritePin>

}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020000 	.word	0x40020000

08001584 <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	461a      	mov	r2, r3
 8001592:	2120      	movs	r1, #32
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <ExtLightsFrontFogLight+0x20>)
 8001596:	f003 fe45 	bl	8005224 <HAL_GPIO_WritePin>

}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020000 	.word	0x40020000

080015a8 <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	461a      	mov	r2, r3
 80015b6:	2120      	movs	r1, #32
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <ExtLightsTurnSignalLeft+0x20>)
 80015ba:	f003 fe33 	bl	8005224 <HAL_GPIO_WritePin>

}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40020000 	.word	0x40020000

080015cc <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	461a      	mov	r2, r3
 80015da:	2120      	movs	r1, #32
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <ExtLightsTurnSignalRight+0x20>)
 80015de:	f003 fe21 	bl	8005224 <HAL_GPIO_WritePin>

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40020000 	.word	0x40020000

080015f0 <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	461a      	mov	r2, r3
 80015fe:	2120      	movs	r1, #32
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <ExtLightsRearPositionLight+0x20>)
 8001602:	f003 fe0f 	bl	8005224 <HAL_GPIO_WritePin>

}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40020000 	.word	0x40020000

08001614 <ExtLightsRearFogLight>:

void ExtLightsRearFogLight(uint8 PinState)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	461a      	mov	r2, r3
 8001622:	2120      	movs	r1, #32
 8001624:	4803      	ldr	r0, [pc, #12]	; (8001634 <ExtLightsRearFogLight+0x20>)
 8001626:	f003 fdfd 	bl	8005224 <HAL_GPIO_WritePin>

}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40020000 	.word	0x40020000

08001638 <ExtLightsReverseLight>:
	HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);

}

void ExtLightsReverseLight(uint8 PinState)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	461a      	mov	r2, r3
 8001646:	2120      	movs	r1, #32
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <ExtLightsReverseLight+0x20>)
 800164a:	f003 fdeb 	bl	8005224 <HAL_GPIO_WritePin>

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40020000 	.word	0x40020000

0800165c <ExtLightsLicensePlateLight>:

void ExtLightsLicensePlateLight(uint8 PinState)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	461a      	mov	r2, r3
 800166a:	2120      	movs	r1, #32
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <ExtLightsLicensePlateLight+0x20>)
 800166e:	f003 fdd9 	bl	8005224 <HAL_GPIO_WritePin>

}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40020000 	.word	0x40020000

08001680 <IntLightsMainFunction>:
	}

}

void IntLightsMainFunction()
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

	IntLightsToggleIntLights(IntLights_CurrentState);
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <IntLightsMainFunction+0x14>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f000 f805 	bl	8001698 <IntLightsToggleIntLights>

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000d4 	.word	0x200000d4

08001698 <IntLightsToggleIntLights>:
	return E_OK;

}

void IntLightsToggleIntLights(uint8 PinState)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	461a      	mov	r2, r3
 80016a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016aa:	4803      	ldr	r0, [pc, #12]	; (80016b8 <IntLightsToggleIntLights+0x20>)
 80016ac:	f003 fdba 	bl	8005224 <HAL_GPIO_WritePin>

}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40020400 	.word	0x40020400

080016bc <SecAlmVibeSenReadPin>:
void SecAlmState();
void SecAlmLightsBuzzerControl();
void SecAlmTurnOnExtLights();

StdReturnType SecAlmVibeSenReadPin()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

	uint8 PinState = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]

	PinState = HAL_GPIO_ReadPin(SECALM_VIBSEN_PORT, SECALM_VIBSEN_PIN);
 80016c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <SecAlmVibeSenReadPin+0x24>)
 80016cc:	f003 fd84 	bl	80051d8 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]

	return PinState;
 80016d4:	79fb      	ldrb	r3, [r7, #7]

}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40020400 	.word	0x40020400

080016e4 <SecAlmVibSenStatus>:

StdReturnType SecAlmVibSenStatus()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0

	SecAlm_VibSenStatusFlag = SecAlmVibeSenReadPin();
 80016e8:	f7ff ffe8 	bl	80016bc <SecAlmVibeSenReadPin>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <SecAlmVibSenStatus+0x48>)
 80016f2:	701a      	strb	r2, [r3, #0]

	if(CenLoc_CurrentState == STD_HIGH)
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <SecAlmVibSenStatus+0x4c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d103      	bne.n	8001704 <SecAlmVibSenStatus+0x20>
	{

		SecAlm_VibSenStateSetToOff = STD_HIGH;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <SecAlmVibSenStatus+0x50>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e006      	b.n	8001712 <SecAlmVibSenStatus+0x2e>

	}
	else if(CenLoc_CurrentState == STD_LOW)
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <SecAlmVibSenStatus+0x4c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <SecAlmVibSenStatus+0x2e>
	{

		SecAlm_VibSenStateSetToOff = STD_LOW;
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <SecAlmVibSenStatus+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_VibSenStateSetToOff == STD_LOW && SecAlm_VibSenStatusFlag == STD_LOW)
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <SecAlmVibSenStatus+0x50>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <SecAlmVibSenStatus+0x42>
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SecAlmVibSenStatus+0x48>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <SecAlmVibSenStatus+0x42>
	{

		return STD_HIGH;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <SecAlmVibSenStatus+0x44>

		/* do nothing */

	}

	return STD_LOW;
 8001726:	2300      	movs	r3, #0

}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200000dd 	.word	0x200000dd
 8001730:	20000091 	.word	0x20000091
 8001734:	200000de 	.word	0x200000de

08001738 <SecAlmState>:

void SecAlmState()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

	if(SecAlm_PreviousState != SecAlm_Trigger)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <SecAlmState+0x50>)
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <SecAlmState+0x54>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d006      	beq.n	8001756 <SecAlmState+0x1e>
	{

		HAL_TIM_Base_Init(&htim5);
 8001748:	4811      	ldr	r0, [pc, #68]	; (8001790 <SecAlmState+0x58>)
 800174a:	f008 f809 	bl	8009760 <HAL_TIM_Base_Init>
		SecAlm_PreviousState = SecAlm_Trigger;
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <SecAlmState+0x54>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <SecAlmState+0x50>)
 8001754:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlmVibSenStatus() == STD_HIGH)
 8001756:	f7ff ffc5 	bl	80016e4 <SecAlmVibSenStatus>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d106      	bne.n	800176e <SecAlmState+0x36>
	{

		SecAlm_Trigger = SecAlmVibSenStatus();
 8001760:	f7ff ffc0 	bl	80016e4 <SecAlmVibSenStatus>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <SecAlmState+0x54>)
 800176a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 800176c:	e00a      	b.n	8001784 <SecAlmState+0x4c>
	else if(SecAlmVibSenStatus() == STD_LOW)
 800176e:	f7ff ffb9 	bl	80016e4 <SecAlmVibSenStatus>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <SecAlmState+0x4c>
		SecAlm_Trigger = SecAlmVibSenStatus();
 8001778:	f7ff ffb4 	bl	80016e4 <SecAlmVibSenStatus>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <SecAlmState+0x54>)
 8001782:	701a      	strb	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200000dc 	.word	0x200000dc
 800178c:	200000da 	.word	0x200000da
 8001790:	200006bc 	.word	0x200006bc

08001794 <SecAlmTurnOnExtLights>:

void SecAlmTurnOnExtLights()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

	ExtLightsLowBeam(SecAlm_PinStateChange);
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <SecAlmTurnOnExtLights+0x44>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff febb 	bl	8001518 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(SecAlm_PinStateChange);
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <SecAlmTurnOnExtLights+0x44>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff22 	bl	80015f0 <ExtLightsRearPositionLight>
	ExtLightsFrontFogLight(SecAlm_PinStateChange);
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <SecAlmTurnOnExtLights+0x44>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fee7 	bl	8001584 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(SecAlm_PinStateChange);
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <SecAlmTurnOnExtLights+0x44>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff2a 	bl	8001614 <ExtLightsRearFogLight>
	ExtLightsTurnSignalRight(SecAlm_PinStateChange);
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SecAlmTurnOnExtLights+0x44>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff01 	bl	80015cc <ExtLightsTurnSignalRight>
	ExtLightsTurnSignalLeft(SecAlm_PinStateChange);
 80017ca:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <SecAlmTurnOnExtLights+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff feea 	bl	80015a8 <ExtLightsTurnSignalLeft>

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200000df 	.word	0x200000df

080017dc <SecAlmLightsBuzzerControl>:

void SecAlmLightsBuzzerControl()
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

	SecAlmState();
 80017e0:	f7ff ffaa 	bl	8001738 <SecAlmState>

	if(SecAlm_Trigger == STD_HIGH)
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <SecAlmLightsBuzzerControl+0xa0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d139      	bne.n	8001860 <SecAlmLightsBuzzerControl+0x84>
	{

		HAL_TIM_Base_Start(&htim5);
 80017ec:	4824      	ldr	r0, [pc, #144]	; (8001880 <SecAlmLightsBuzzerControl+0xa4>)
 80017ee:	f008 f889 	bl	8009904 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <SecAlmLightsBuzzerControl+0xa4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	4a22      	ldr	r2, [pc, #136]	; (8001884 <SecAlmLightsBuzzerControl+0xa8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d823      	bhi.n	8001846 <SecAlmLightsBuzzerControl+0x6a>
		{

			HAL_TIM_Base_Start(&htim4);
 80017fe:	4822      	ldr	r0, [pc, #136]	; (8001888 <SecAlmLightsBuzzerControl+0xac>)
 8001800:	f008 f880 	bl	8009904 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim4) < 5000)
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <SecAlmLightsBuzzerControl+0xac>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	f241 3287 	movw	r2, #4999	; 0x1387
 800180e:	4293      	cmp	r3, r2
 8001810:	d805      	bhi.n	800181e <SecAlmLightsBuzzerControl+0x42>
			{

				SecAlm_PinStateChange = STD_HIGH;
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <SecAlmLightsBuzzerControl+0xb0>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
				SecAlmTurnOnExtLights();
 8001818:	f7ff ffbc 	bl	8001794 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

}
 800181c:	e02c      	b.n	8001878 <SecAlmLightsBuzzerControl+0x9c>
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim4) && __HAL_TIM_GET_COUNTER(&htim4) < 10000)
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <SecAlmLightsBuzzerControl+0xac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d925      	bls.n	8001878 <SecAlmLightsBuzzerControl+0x9c>
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <SecAlmLightsBuzzerControl+0xac>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f242 720f 	movw	r2, #9999	; 0x270f
 8001836:	4293      	cmp	r3, r2
 8001838:	d81e      	bhi.n	8001878 <SecAlmLightsBuzzerControl+0x9c>
				SecAlm_PinStateChange = STD_LOW;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <SecAlmLightsBuzzerControl+0xb0>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
				SecAlmTurnOnExtLights();
 8001840:	f7ff ffa8 	bl	8001794 <SecAlmTurnOnExtLights>
}
 8001844:	e018      	b.n	8001878 <SecAlmLightsBuzzerControl+0x9c>
		else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <SecAlmLightsBuzzerControl+0xa4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	4a10      	ldr	r2, [pc, #64]	; (8001890 <SecAlmLightsBuzzerControl+0xb4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d912      	bls.n	8001878 <SecAlmLightsBuzzerControl+0x9c>
			SecAlm_Trigger = STD_LOW;
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <SecAlmLightsBuzzerControl+0xa0>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5);
 8001858:	4809      	ldr	r0, [pc, #36]	; (8001880 <SecAlmLightsBuzzerControl+0xa4>)
 800185a:	f008 f8dd 	bl	8009a18 <HAL_TIM_Base_Stop>
}
 800185e:	e00b      	b.n	8001878 <SecAlmLightsBuzzerControl+0x9c>
	else if(SecAlm_Trigger == STD_LOW)
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <SecAlmLightsBuzzerControl+0xa0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d107      	bne.n	8001878 <SecAlmLightsBuzzerControl+0x9c>
		HAL_TIM_Base_Stop(&htim4);
 8001868:	4807      	ldr	r0, [pc, #28]	; (8001888 <SecAlmLightsBuzzerControl+0xac>)
 800186a:	f008 f8d5 	bl	8009a18 <HAL_TIM_Base_Stop>
		SecAlm_PinStateChange = STD_LOW;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <SecAlmLightsBuzzerControl+0xb0>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
		SecAlmTurnOnExtLights();
 8001874:	f7ff ff8e 	bl	8001794 <SecAlmTurnOnExtLights>
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200000da 	.word	0x200000da
 8001880:	200006bc 	.word	0x200006bc
 8001884:	0001869f 	.word	0x0001869f
 8001888:	20000608 	.word	0x20000608
 800188c:	200000df 	.word	0x200000df
 8001890:	000186a0 	.word	0x000186a0

08001894 <SecAlmMainFunction>:

void SecAlmMainFunction()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

	SecAlmLightsBuzzerControl();
 8001898:	f7ff ffa0 	bl	80017dc <SecAlmLightsBuzzerControl>

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <SecAlmToggleAlarmLed>:
	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);

}

void SecAlmToggleAlarmLed(uint8 PinState)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	461a      	mov	r2, r3
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <SecAlmToggleAlarmLed+0x20>)
 80018b2:	f003 fcb7 	bl	8005224 <HAL_GPIO_WritePin>

}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40020000 	.word	0x40020000

080018c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018d6:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <MX_ADC1_Init+0x10c>)
 80018d8:	4a3e      	ldr	r2, [pc, #248]	; (80019d4 <MX_ADC1_Init+0x110>)
 80018da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018dc:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <MX_ADC1_Init+0x10c>)
 80018de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018e4:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <MX_ADC1_Init+0x10c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <MX_ADC1_Init+0x10c>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018f0:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <MX_ADC1_Init+0x10c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <MX_ADC1_Init+0x10c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018fe:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <MX_ADC1_Init+0x10c>)
 8001900:	2200      	movs	r2, #0
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <MX_ADC1_Init+0x10c>)
 8001906:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <MX_ADC1_Init+0x114>)
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <MX_ADC1_Init+0x10c>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001910:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <MX_ADC1_Init+0x10c>)
 8001912:	2205      	movs	r2, #5
 8001914:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <MX_ADC1_Init+0x10c>)
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <MX_ADC1_Init+0x10c>)
 8001920:	2201      	movs	r2, #1
 8001922:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001924:	482a      	ldr	r0, [pc, #168]	; (80019d0 <MX_ADC1_Init+0x10c>)
 8001926:	f001 fc3f 	bl	80031a8 <HAL_ADC_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001930:	f000 fd9e 	bl	8002470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001934:	2301      	movs	r3, #1
 8001936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001938:	2301      	movs	r3, #1
 800193a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001940:	463b      	mov	r3, r7
 8001942:	4619      	mov	r1, r3
 8001944:	4822      	ldr	r0, [pc, #136]	; (80019d0 <MX_ADC1_Init+0x10c>)
 8001946:	f001 ff1b 	bl	8003780 <HAL_ADC_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001950:	f000 fd8e 	bl	8002470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001954:	2302      	movs	r3, #2
 8001956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001958:	2302      	movs	r3, #2
 800195a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195c:	463b      	mov	r3, r7
 800195e:	4619      	mov	r1, r3
 8001960:	481b      	ldr	r0, [pc, #108]	; (80019d0 <MX_ADC1_Init+0x10c>)
 8001962:	f001 ff0d 	bl	8003780 <HAL_ADC_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800196c:	f000 fd80 	bl	8002470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001970:	2303      	movs	r3, #3
 8001972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001974:	2303      	movs	r3, #3
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4814      	ldr	r0, [pc, #80]	; (80019d0 <MX_ADC1_Init+0x10c>)
 800197e:	f001 feff 	bl	8003780 <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001988:	f000 fd72 	bl	8002470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800198c:	2309      	movs	r3, #9
 800198e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001990:	2304      	movs	r3, #4
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <MX_ADC1_Init+0x10c>)
 800199a:	f001 fef1 	bl	8003780 <HAL_ADC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80019a4:	f000 fd64 	bl	8002470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_ADC1_Init+0x118>)
 80019aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80019ac:	2305      	movs	r3, #5
 80019ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80019b0:	2307      	movs	r3, #7
 80019b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_ADC1_Init+0x10c>)
 80019ba:	f001 fee1 	bl	8003780 <HAL_ADC_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80019c4:	f000 fd54 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200000e0 	.word	0x200000e0
 80019d4:	40012000 	.word	0x40012000
 80019d8:	0f000001 	.word	0x0f000001
 80019dc:	10000012 	.word	0x10000012

080019e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <HAL_ADC_MspInit+0x154>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	f040 8094 	bne.w	8001b2c <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6453      	str	r3, [r2, #68]	; 0x44
 8001a14:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4a43      	ldr	r2, [pc, #268]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a30:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4a3c      	ldr	r2, [pc, #240]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	4a35      	ldr	r2, [pc, #212]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	6313      	str	r3, [r2, #48]	; 0x30
 8001a68:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a74:	2307      	movs	r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	482d      	ldr	r0, [pc, #180]	; (8001b3c <HAL_ADC_MspInit+0x15c>)
 8001a88:	f003 f90c 	bl	8004ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a8c:	230e      	movs	r3, #14
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a90:	2303      	movs	r3, #3
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4828      	ldr	r0, [pc, #160]	; (8001b40 <HAL_ADC_MspInit+0x160>)
 8001aa0:	f003 f900 	bl	8004ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4823      	ldr	r0, [pc, #140]	; (8001b44 <HAL_ADC_MspInit+0x164>)
 8001ab8:	f003 f8f4 	bl	8004ca4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001abe:	4a23      	ldr	r2, [pc, #140]	; (8001b4c <HAL_ADC_MspInit+0x16c>)
 8001ac0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ada:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ae2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b00:	4811      	ldr	r0, [pc, #68]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001b02:	f002 fa03 	bl	8003f0c <HAL_DMA_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001b0c:	f000 fcb0 	bl	8002470 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38
 8001b16:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <HAL_ADC_MspInit+0x168>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2105      	movs	r1, #5
 8001b20:	2012      	movs	r0, #18
 8001b22:	f002 f985 	bl	8003e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b26:	2012      	movs	r0, #18
 8001b28:	f002 f9ae 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3730      	adds	r7, #48	; 0x30
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40012000 	.word	0x40012000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400
 8001b48:	20000144 	.word	0x20000144
 8001b4c:	40026410 	.word	0x40026410

08001b50 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_CRC_Init+0x20>)
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <MX_CRC_Init+0x24>)
 8001b58:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_CRC_Init+0x20>)
 8001b5c:	f002 f9ac 	bl	8003eb8 <HAL_CRC_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001b66:	f000 fc83 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200001a4 	.word	0x200001a4
 8001b74:	40023000 	.word	0x40023000

08001b78 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_CRC_MspInit+0x3c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10d      	bne.n	8001ba6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_CRC_MspInit+0x40>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_CRC_MspInit+0x40>)
 8001b94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_CRC_MspInit+0x40>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023000 	.word	0x40023000
 8001bb8:	40023800 	.word	0x40023800

08001bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_DMA_Init+0x3c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <MX_DMA_Init+0x3c>)
 8001bcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_DMA_Init+0x3c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2105      	movs	r1, #5
 8001be2:	2038      	movs	r0, #56	; 0x38
 8001be4:	f002 f924 	bl	8003e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001be8:	2038      	movs	r0, #56	; 0x38
 8001bea:	f002 f94d 	bl	8003e88 <HAL_NVIC_EnableIRQ>

}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
return 0;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PdcFrontDelayTimer */
  PdcFrontDelayTimerHandle = osTimerNew(PdcFrontDelayCallback, osTimerPeriodic, NULL, &PdcFrontDelayTimer_attributes);
 8001c94:	4b65      	ldr	r3, [pc, #404]	; (8001e2c <MX_FREERTOS_Init+0x19c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4865      	ldr	r0, [pc, #404]	; (8001e30 <MX_FREERTOS_Init+0x1a0>)
 8001c9c:	f00a f874 	bl	800bd88 <osTimerNew>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a64      	ldr	r2, [pc, #400]	; (8001e34 <MX_FREERTOS_Init+0x1a4>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearDelayTimer */
  PdcRearDelayTimerHandle = osTimerNew(PdcRearDelayCallback, osTimerPeriodic, NULL, &PdcRearDelayTimer_attributes);
 8001ca6:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <MX_FREERTOS_Init+0x1a8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2101      	movs	r1, #1
 8001cac:	4863      	ldr	r0, [pc, #396]	; (8001e3c <MX_FREERTOS_Init+0x1ac>)
 8001cae:	f00a f86b 	bl	800bd88 <osTimerNew>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4a62      	ldr	r2, [pc, #392]	; (8001e40 <MX_FREERTOS_Init+0x1b0>)
 8001cb6:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondFrontDelayTimer */
  PdcSecondFrontDelayTimerHandle = osTimerNew(PdcSecondFrontDelayCallback, osTimerPeriodic, NULL, &PdcSecondFrontDelayTimer_attributes);
 8001cb8:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <MX_FREERTOS_Init+0x1b4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	4862      	ldr	r0, [pc, #392]	; (8001e48 <MX_FREERTOS_Init+0x1b8>)
 8001cc0:	f00a f862 	bl	800bd88 <osTimerNew>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4a61      	ldr	r2, [pc, #388]	; (8001e4c <MX_FREERTOS_Init+0x1bc>)
 8001cc8:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondRearDelayTimer */
  PdcSecondRearDelayTimerHandle = osTimerNew(PdcSecondRearDelayCallback, osTimerPeriodic, NULL, &PdcSecondRearDelayTimer_attributes);
 8001cca:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <MX_FREERTOS_Init+0x1c0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2101      	movs	r1, #1
 8001cd0:	4860      	ldr	r0, [pc, #384]	; (8001e54 <MX_FREERTOS_Init+0x1c4>)
 8001cd2:	f00a f859 	bl	800bd88 <osTimerNew>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a5f      	ldr	r2, [pc, #380]	; (8001e58 <MX_FREERTOS_Init+0x1c8>)
 8001cda:	6013      	str	r3, [r2, #0]

  /* creation of PdcFrontGlobalTimer */
  PdcFrontGlobalTimerHandle = osTimerNew(PdcFrontGlobalTimerCallback, osTimerPeriodic, NULL, &PdcFrontGlobalTimer_attributes);
 8001cdc:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <MX_FREERTOS_Init+0x1cc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	485f      	ldr	r0, [pc, #380]	; (8001e60 <MX_FREERTOS_Init+0x1d0>)
 8001ce4:	f00a f850 	bl	800bd88 <osTimerNew>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a5e      	ldr	r2, [pc, #376]	; (8001e64 <MX_FREERTOS_Init+0x1d4>)
 8001cec:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearGlobalTimer */
  PdcRearGlobalTimerHandle = osTimerNew(PdcRearGlobalTimerCallback, osTimerPeriodic, NULL, &PdcRearGlobalTimer_attributes);
 8001cee:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <MX_FREERTOS_Init+0x1d8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	485d      	ldr	r0, [pc, #372]	; (8001e6c <MX_FREERTOS_Init+0x1dc>)
 8001cf6:	f00a f847 	bl	800bd88 <osTimerNew>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a5c      	ldr	r2, [pc, #368]	; (8001e70 <MX_FREERTOS_Init+0x1e0>)
 8001cfe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of QM_APPL_LP */
  QM_APPL_LPHandle = osThreadNew(TASK_QM_APPL_LP, NULL, &QM_APPL_LP_attributes);
 8001d00:	4a5c      	ldr	r2, [pc, #368]	; (8001e74 <MX_FREERTOS_Init+0x1e4>)
 8001d02:	2100      	movs	r1, #0
 8001d04:	485c      	ldr	r0, [pc, #368]	; (8001e78 <MX_FREERTOS_Init+0x1e8>)
 8001d06:	f009 ff97 	bl	800bc38 <osThreadNew>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a5b      	ldr	r2, [pc, #364]	; (8001e7c <MX_FREERTOS_Init+0x1ec>)
 8001d0e:	6013      	str	r3, [r2, #0]

  /* creation of OS_StartHook */
  OS_StartHookHandle = osThreadNew(TASK_OS_StartHook, NULL, &OS_StartHook_attributes);
 8001d10:	4a5b      	ldr	r2, [pc, #364]	; (8001e80 <MX_FREERTOS_Init+0x1f0>)
 8001d12:	2100      	movs	r1, #0
 8001d14:	485b      	ldr	r0, [pc, #364]	; (8001e84 <MX_FREERTOS_Init+0x1f4>)
 8001d16:	f009 ff8f 	bl	800bc38 <osThreadNew>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a5a      	ldr	r2, [pc, #360]	; (8001e88 <MX_FREERTOS_Init+0x1f8>)
 8001d1e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of eventPOR */
  eventPORHandle = osEventFlagsNew(&eventPOR_attributes);
 8001d20:	485a      	ldr	r0, [pc, #360]	; (8001e8c <MX_FREERTOS_Init+0x1fc>)
 8001d22:	f00a f8ad 	bl	800be80 <osEventFlagsNew>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a59      	ldr	r2, [pc, #356]	; (8001e90 <MX_FREERTOS_Init+0x200>)
 8001d2a:	6013      	str	r3, [r2, #0]

  /* creation of eventHWR */
  eventHWRHandle = osEventFlagsNew(&eventHWR_attributes);
 8001d2c:	4859      	ldr	r0, [pc, #356]	; (8001e94 <MX_FREERTOS_Init+0x204>)
 8001d2e:	f00a f8a7 	bl	800be80 <osEventFlagsNew>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a58      	ldr	r2, [pc, #352]	; (8001e98 <MX_FREERTOS_Init+0x208>)
 8001d36:	6013      	str	r3, [r2, #0]

  /* creation of eventSWR */
  eventSWRHandle = osEventFlagsNew(&eventSWR_attributes);
 8001d38:	4858      	ldr	r0, [pc, #352]	; (8001e9c <MX_FREERTOS_Init+0x20c>)
 8001d3a:	f00a f8a1 	bl	800be80 <osEventFlagsNew>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a57      	ldr	r2, [pc, #348]	; (8001ea0 <MX_FREERTOS_Init+0x210>)
 8001d42:	6013      	str	r3, [r2, #0]

  /* creation of eventCoreReset */
  eventCoreResetHandle = osEventFlagsNew(&eventCoreReset_attributes);
 8001d44:	4857      	ldr	r0, [pc, #348]	; (8001ea4 <MX_FREERTOS_Init+0x214>)
 8001d46:	f00a f89b 	bl	800be80 <osEventFlagsNew>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a56      	ldr	r2, [pc, #344]	; (8001ea8 <MX_FREERTOS_Init+0x218>)
 8001d4e:	6013      	str	r3, [r2, #0]

  /* creation of eventMemManage */
  eventMemManageHandle = osEventFlagsNew(&eventMemManage_attributes);
 8001d50:	4856      	ldr	r0, [pc, #344]	; (8001eac <MX_FREERTOS_Init+0x21c>)
 8001d52:	f00a f895 	bl	800be80 <osEventFlagsNew>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a55      	ldr	r2, [pc, #340]	; (8001eb0 <MX_FREERTOS_Init+0x220>)
 8001d5a:	6013      	str	r3, [r2, #0]

  /* creation of eventNMI */
  eventNMIHandle = osEventFlagsNew(&eventNMI_attributes);
 8001d5c:	4855      	ldr	r0, [pc, #340]	; (8001eb4 <MX_FREERTOS_Init+0x224>)
 8001d5e:	f00a f88f 	bl	800be80 <osEventFlagsNew>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4a54      	ldr	r2, [pc, #336]	; (8001eb8 <MX_FREERTOS_Init+0x228>)
 8001d66:	6013      	str	r3, [r2, #0]

  /* creation of eventHardFault */
  eventHardFaultHandle = osEventFlagsNew(&eventHardFault_attributes);
 8001d68:	4854      	ldr	r0, [pc, #336]	; (8001ebc <MX_FREERTOS_Init+0x22c>)
 8001d6a:	f00a f889 	bl	800be80 <osEventFlagsNew>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4a53      	ldr	r2, [pc, #332]	; (8001ec0 <MX_FREERTOS_Init+0x230>)
 8001d72:	6013      	str	r3, [r2, #0]

  /* creation of eventBusFault */
  eventBusFaultHandle = osEventFlagsNew(&eventBusFault_attributes);
 8001d74:	4853      	ldr	r0, [pc, #332]	; (8001ec4 <MX_FREERTOS_Init+0x234>)
 8001d76:	f00a f883 	bl	800be80 <osEventFlagsNew>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <MX_FREERTOS_Init+0x238>)
 8001d7e:	6013      	str	r3, [r2, #0]

  /* creation of eventUsageFault */
  eventUsageFaultHandle = osEventFlagsNew(&eventUsageFault_attributes);
 8001d80:	4852      	ldr	r0, [pc, #328]	; (8001ecc <MX_FREERTOS_Init+0x23c>)
 8001d82:	f00a f87d 	bl	800be80 <osEventFlagsNew>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a51      	ldr	r2, [pc, #324]	; (8001ed0 <MX_FREERTOS_Init+0x240>)
 8001d8a:	6013      	str	r3, [r2, #0]

  /* creation of eventDebugMon */
  eventDebugMonHandle = osEventFlagsNew(&eventDebugMon_attributes);
 8001d8c:	4851      	ldr	r0, [pc, #324]	; (8001ed4 <MX_FREERTOS_Init+0x244>)
 8001d8e:	f00a f877 	bl	800be80 <osEventFlagsNew>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4a50      	ldr	r2, [pc, #320]	; (8001ed8 <MX_FREERTOS_Init+0x248>)
 8001d96:	6013      	str	r3, [r2, #0]

  /* creation of eventPVD_IRQ */
  eventPVD_IRQHandle = osEventFlagsNew(&eventPVD_IRQ_attributes);
 8001d98:	4850      	ldr	r0, [pc, #320]	; (8001edc <MX_FREERTOS_Init+0x24c>)
 8001d9a:	f00a f871 	bl	800be80 <osEventFlagsNew>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a4f      	ldr	r2, [pc, #316]	; (8001ee0 <MX_FREERTOS_Init+0x250>)
 8001da2:	6013      	str	r3, [r2, #0]

  /* creation of eventFlash_IRQ */
  eventFlash_IRQHandle = osEventFlagsNew(&eventFlash_IRQ_attributes);
 8001da4:	484f      	ldr	r0, [pc, #316]	; (8001ee4 <MX_FREERTOS_Init+0x254>)
 8001da6:	f00a f86b 	bl	800be80 <osEventFlagsNew>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a4e      	ldr	r2, [pc, #312]	; (8001ee8 <MX_FREERTOS_Init+0x258>)
 8001dae:	6013      	str	r3, [r2, #0]

  /* creation of eventRCC_IRQ */
  eventRCC_IRQHandle = osEventFlagsNew(&eventRCC_IRQ_attributes);
 8001db0:	484e      	ldr	r0, [pc, #312]	; (8001eec <MX_FREERTOS_Init+0x25c>)
 8001db2:	f00a f865 	bl	800be80 <osEventFlagsNew>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4a4d      	ldr	r2, [pc, #308]	; (8001ef0 <MX_FREERTOS_Init+0x260>)
 8001dba:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM1_IRQ */
  eventTIM1_IRQHandle = osEventFlagsNew(&eventTIM1_IRQ_attributes);
 8001dbc:	484d      	ldr	r0, [pc, #308]	; (8001ef4 <MX_FREERTOS_Init+0x264>)
 8001dbe:	f00a f85f 	bl	800be80 <osEventFlagsNew>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a4c      	ldr	r2, [pc, #304]	; (8001ef8 <MX_FREERTOS_Init+0x268>)
 8001dc6:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM10_IRQ */
  eventTIM10_IRQHandle = osEventFlagsNew(&eventTIM10_IRQ_attributes);
 8001dc8:	484c      	ldr	r0, [pc, #304]	; (8001efc <MX_FREERTOS_Init+0x26c>)
 8001dca:	f00a f859 	bl	800be80 <osEventFlagsNew>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <MX_FREERTOS_Init+0x270>)
 8001dd2:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM2_IRQ */
  eventTIM2_IRQHandle = osEventFlagsNew(&eventTIM2_IRQ_attributes);
 8001dd4:	484b      	ldr	r0, [pc, #300]	; (8001f04 <MX_FREERTOS_Init+0x274>)
 8001dd6:	f00a f853 	bl	800be80 <osEventFlagsNew>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a4a      	ldr	r2, [pc, #296]	; (8001f08 <MX_FREERTOS_Init+0x278>)
 8001dde:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM3_IRQ */
  eventTIM3_IRQHandle = osEventFlagsNew(&eventTIM3_IRQ_attributes);
 8001de0:	484a      	ldr	r0, [pc, #296]	; (8001f0c <MX_FREERTOS_Init+0x27c>)
 8001de2:	f00a f84d 	bl	800be80 <osEventFlagsNew>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a49      	ldr	r2, [pc, #292]	; (8001f10 <MX_FREERTOS_Init+0x280>)
 8001dea:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM4_IRQ */
  eventTIM4_IRQHandle = osEventFlagsNew(&eventTIM4_IRQ_attributes);
 8001dec:	4849      	ldr	r0, [pc, #292]	; (8001f14 <MX_FREERTOS_Init+0x284>)
 8001dee:	f00a f847 	bl	800be80 <osEventFlagsNew>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a48      	ldr	r2, [pc, #288]	; (8001f18 <MX_FREERTOS_Init+0x288>)
 8001df6:	6013      	str	r3, [r2, #0]

  /* creation of eventSPI2_IRQ */
  eventSPI2_IRQHandle = osEventFlagsNew(&eventSPI2_IRQ_attributes);
 8001df8:	4848      	ldr	r0, [pc, #288]	; (8001f1c <MX_FREERTOS_Init+0x28c>)
 8001dfa:	f00a f841 	bl	800be80 <osEventFlagsNew>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a47      	ldr	r2, [pc, #284]	; (8001f20 <MX_FREERTOS_Init+0x290>)
 8001e02:	6013      	str	r3, [r2, #0]

  /* creation of eventSPI3_IRQ */
  eventSPI3_IRQHandle = osEventFlagsNew(&eventSPI3_IRQ_attributes);
 8001e04:	4847      	ldr	r0, [pc, #284]	; (8001f24 <MX_FREERTOS_Init+0x294>)
 8001e06:	f00a f83b 	bl	800be80 <osEventFlagsNew>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <MX_FREERTOS_Init+0x298>)
 8001e0e:	6013      	str	r3, [r2, #0]

  /* creation of eventUSART1_IRQ */
  eventUSART1_IRQHandle = osEventFlagsNew(&eventUSART1_IRQ_attributes);
 8001e10:	4846      	ldr	r0, [pc, #280]	; (8001f2c <MX_FREERTOS_Init+0x29c>)
 8001e12:	f00a f835 	bl	800be80 <osEventFlagsNew>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <MX_FREERTOS_Init+0x2a0>)
 8001e1a:	6013      	str	r3, [r2, #0]

  /* creation of eventWDGR */
  eventWDGRHandle = osEventFlagsNew(&eventWDGR_attributes);
 8001e1c:	4845      	ldr	r0, [pc, #276]	; (8001f34 <MX_FREERTOS_Init+0x2a4>)
 8001e1e:	f00a f82f 	bl	800be80 <osEventFlagsNew>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4a44      	ldr	r2, [pc, #272]	; (8001f38 <MX_FREERTOS_Init+0x2a8>)
 8001e26:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	0800f988 	.word	0x0800f988
 8001e30:	08001f85 	.word	0x08001f85
 8001e34:	200001b8 	.word	0x200001b8
 8001e38:	0800f998 	.word	0x0800f998
 8001e3c:	08001fa5 	.word	0x08001fa5
 8001e40:	200001bc 	.word	0x200001bc
 8001e44:	0800f9a8 	.word	0x0800f9a8
 8001e48:	08001fc5 	.word	0x08001fc5
 8001e4c:	200001c0 	.word	0x200001c0
 8001e50:	0800f9b8 	.word	0x0800f9b8
 8001e54:	08001fe5 	.word	0x08001fe5
 8001e58:	200001c4 	.word	0x200001c4
 8001e5c:	0800f9c8 	.word	0x0800f9c8
 8001e60:	08002005 	.word	0x08002005
 8001e64:	200001c8 	.word	0x200001c8
 8001e68:	0800f9d8 	.word	0x0800f9d8
 8001e6c:	08002019 	.word	0x08002019
 8001e70:	200001cc 	.word	0x200001cc
 8001e74:	0800f940 	.word	0x0800f940
 8001e78:	08001f3d 	.word	0x08001f3d
 8001e7c:	200001b0 	.word	0x200001b0
 8001e80:	0800f964 	.word	0x0800f964
 8001e84:	08001f61 	.word	0x08001f61
 8001e88:	200001b4 	.word	0x200001b4
 8001e8c:	0800f9e8 	.word	0x0800f9e8
 8001e90:	200001d0 	.word	0x200001d0
 8001e94:	0800f9f8 	.word	0x0800f9f8
 8001e98:	200001d4 	.word	0x200001d4
 8001e9c:	0800fa08 	.word	0x0800fa08
 8001ea0:	200001d8 	.word	0x200001d8
 8001ea4:	0800fa18 	.word	0x0800fa18
 8001ea8:	200001dc 	.word	0x200001dc
 8001eac:	0800fa28 	.word	0x0800fa28
 8001eb0:	200001e0 	.word	0x200001e0
 8001eb4:	0800fa38 	.word	0x0800fa38
 8001eb8:	200001e4 	.word	0x200001e4
 8001ebc:	0800fa48 	.word	0x0800fa48
 8001ec0:	200001e8 	.word	0x200001e8
 8001ec4:	0800fa58 	.word	0x0800fa58
 8001ec8:	200001ec 	.word	0x200001ec
 8001ecc:	0800fa68 	.word	0x0800fa68
 8001ed0:	200001f0 	.word	0x200001f0
 8001ed4:	0800fa78 	.word	0x0800fa78
 8001ed8:	200001f4 	.word	0x200001f4
 8001edc:	0800fa88 	.word	0x0800fa88
 8001ee0:	200001f8 	.word	0x200001f8
 8001ee4:	0800fa98 	.word	0x0800fa98
 8001ee8:	200001fc 	.word	0x200001fc
 8001eec:	0800faa8 	.word	0x0800faa8
 8001ef0:	20000200 	.word	0x20000200
 8001ef4:	0800fab8 	.word	0x0800fab8
 8001ef8:	20000204 	.word	0x20000204
 8001efc:	0800fac8 	.word	0x0800fac8
 8001f00:	20000208 	.word	0x20000208
 8001f04:	0800fad8 	.word	0x0800fad8
 8001f08:	2000020c 	.word	0x2000020c
 8001f0c:	0800fae8 	.word	0x0800fae8
 8001f10:	20000210 	.word	0x20000210
 8001f14:	0800faf8 	.word	0x0800faf8
 8001f18:	20000214 	.word	0x20000214
 8001f1c:	0800fb08 	.word	0x0800fb08
 8001f20:	20000218 	.word	0x20000218
 8001f24:	0800fb18 	.word	0x0800fb18
 8001f28:	2000021c 	.word	0x2000021c
 8001f2c:	0800fb28 	.word	0x0800fb28
 8001f30:	20000220 	.word	0x20000220
 8001f34:	0800fb38 	.word	0x0800fb38
 8001f38:	20000224 	.word	0x20000224

08001f3c <TASK_QM_APPL_LP>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TASK_QM_APPL_LP */
void TASK_QM_APPL_LP(void *argument)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_QM_APPL_LP */
	CenLocMainFunction();
 8001f44:	f7ff f822 	bl	8000f8c <CenLocMainFunction>
	SecAlmMainFunction();
 8001f48:	f7ff fca4 	bl	8001894 <SecAlmMainFunction>
	//PdcMainFunction();
	BtcMainFunction();
 8001f4c:	f7fe fdaa 	bl	8000aa4 <BtcMainFunction>
	ExtLightsMainFunction();
 8001f50:	f7ff f828 	bl	8000fa4 <ExtLightsMainFunction>
	IntLightsMainFunction();
 8001f54:	f7ff fb94 	bl	8001680 <IntLightsMainFunction>
	//HVACMainFunction();
  /* USER CODE END TASK_QM_APPL_LP */
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <TASK_OS_StartHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_OS_StartHook */
void TASK_OS_StartHook(void *argument)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_OS_StartHook */

	OS_Counter++;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <TASK_OS_StartHook+0x20>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <TASK_OS_StartHook+0x20>)
 8001f70:	6013      	str	r3, [r2, #0]

  /* USER CODE END TASK_OS_StartHook */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200001ac 	.word	0x200001ac

08001f84 <PdcFrontDelayCallback>:

/* PdcFrontDelayCallback function */
void PdcFrontDelayCallback(void *argument)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontDelayCallback */
	Pdc_FrontGenerateDelayFlag = STD_HIGH;
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <PdcFrontDelayCallback+0x1c>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcFrontDelayCallback */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	200000d7 	.word	0x200000d7

08001fa4 <PdcRearDelayCallback>:

/* PdcRearDelayCallback function */
void PdcRearDelayCallback(void *argument)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearDelayCallback */
	Pdc_RearGenerateDelayFlag = STD_HIGH;
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <PdcRearDelayCallback+0x1c>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcRearDelayCallback */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200000d6 	.word	0x200000d6

08001fc4 <PdcSecondFrontDelayCallback>:

/* PdcSecondFrontDelayCallback function */
void PdcSecondFrontDelayCallback(void *argument)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondFrontDelayCallback */
	Pdc_SecondFrontGenerateDelayFlag = STD_HIGH;
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <PdcSecondFrontDelayCallback+0x1c>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondFrontDelayCallback */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200000d9 	.word	0x200000d9

08001fe4 <PdcSecondRearDelayCallback>:

/* PdcSecondRearDelayCallback function */
void PdcSecondRearDelayCallback(void *argument)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondRearDelayCallback */
	Pdc_SecondRearGenerateDelayFlag = STD_HIGH;
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <PdcSecondRearDelayCallback+0x1c>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondRearDelayCallback */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	200000d8 	.word	0x200000d8

08002004 <PdcFrontGlobalTimerCallback>:

/* PdcFrontGlobalTimerCallback function */
void PdcFrontGlobalTimerCallback(void *argument)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontGlobalTimerCallback */

  /* USER CODE END PdcFrontGlobalTimerCallback */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <PdcRearGlobalTimerCallback>:

/* PdcRearGlobalTimerCallback function */
void PdcRearGlobalTimerCallback(void *argument)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearGlobalTimerCallback */

  /* USER CODE END PdcRearGlobalTimerCallback */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <MX_GPIO_Init+0x84>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <MX_GPIO_Init+0x84>)
 800203c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <MX_GPIO_Init+0x84>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <MX_GPIO_Init+0x84>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <MX_GPIO_Init+0x84>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <MX_GPIO_Init+0x84>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <MX_GPIO_Init+0x84>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <MX_GPIO_Init+0x84>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <MX_GPIO_Init+0x84>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_GPIO_Init+0x84>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <MX_GPIO_Init+0x84>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <MX_GPIO_Init+0x84>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]

}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800

080020b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <MX_I2C1_Init+0x50>)
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <MX_I2C1_Init+0x54>)
 80020bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_I2C1_Init+0x50>)
 80020c0:	4a12      	ldr	r2, [pc, #72]	; (800210c <MX_I2C1_Init+0x58>)
 80020c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <MX_I2C1_Init+0x50>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_I2C1_Init+0x50>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_I2C1_Init+0x50>)
 80020d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <MX_I2C1_Init+0x50>)
 80020da:	2200      	movs	r2, #0
 80020dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_I2C1_Init+0x50>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <MX_I2C1_Init+0x50>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_I2C1_Init+0x50>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <MX_I2C1_Init+0x50>)
 80020f2:	f003 f8c9 	bl	8005288 <HAL_I2C_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020fc:	f000 f9b8 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000228 	.word	0x20000228
 8002108:	40005400 	.word	0x40005400
 800210c:	000186a0 	.word	0x000186a0

08002110 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <MX_I2C3_Init+0x50>)
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <MX_I2C3_Init+0x54>)
 8002118:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_I2C3_Init+0x50>)
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <MX_I2C3_Init+0x58>)
 800211e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <MX_I2C3_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MX_I2C3_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <MX_I2C3_Init+0x50>)
 800212e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002132:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <MX_I2C3_Init+0x50>)
 8002136:	2200      	movs	r2, #0
 8002138:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <MX_I2C3_Init+0x50>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <MX_I2C3_Init+0x50>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <MX_I2C3_Init+0x50>)
 8002148:	2200      	movs	r2, #0
 800214a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800214c:	4804      	ldr	r0, [pc, #16]	; (8002160 <MX_I2C3_Init+0x50>)
 800214e:	f003 f89b 	bl	8005288 <HAL_I2C_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002158:	f000 f98a 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200002ac 	.word	0x200002ac
 8002164:	40005c00 	.word	0x40005c00
 8002168:	000186a0 	.word	0x000186a0

0800216c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a4a      	ldr	r2, [pc, #296]	; (80022b4 <HAL_I2C_MspInit+0x148>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d13d      	bne.n	800220a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a48      	ldr	r2, [pc, #288]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80021aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b0:	2312      	movs	r3, #18
 80021b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021bc:	2304      	movs	r3, #4
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	483d      	ldr	r0, [pc, #244]	; (80022bc <HAL_I2C_MspInit+0x150>)
 80021c8:	f002 fd6c 	bl	8004ca4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	4a38      	ldr	r2, [pc, #224]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 80021d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021da:	6413      	str	r3, [r2, #64]	; 0x40
 80021dc:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2105      	movs	r1, #5
 80021ec:	201f      	movs	r0, #31
 80021ee:	f001 fe1f 	bl	8003e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80021f2:	201f      	movs	r0, #31
 80021f4:	f001 fe48 	bl	8003e88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2105      	movs	r1, #5
 80021fc:	2020      	movs	r0, #32
 80021fe:	f001 fe17 	bl	8003e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002202:	2020      	movs	r0, #32
 8002204:	f001 fe40 	bl	8003e88 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002208:	e050      	b.n	80022ac <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C3)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <HAL_I2C_MspInit+0x154>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d14b      	bne.n	80022ac <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	4a26      	ldr	r2, [pc, #152]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6313      	str	r3, [r2, #48]	; 0x30
 8002224:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800224c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002252:	2312      	movs	r3, #18
 8002254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800225e:	2304      	movs	r3, #4
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	4619      	mov	r1, r3
 8002268:	4816      	ldr	r0, [pc, #88]	; (80022c4 <HAL_I2C_MspInit+0x158>)
 800226a:	f002 fd1b 	bl	8004ca4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800226e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002274:	2312      	movs	r3, #18
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002280:	2304      	movs	r3, #4
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	480f      	ldr	r0, [pc, #60]	; (80022c8 <HAL_I2C_MspInit+0x15c>)
 800228c:	f002 fd0a 	bl	8004ca4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 800229a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_I2C_MspInit+0x14c>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
}
 80022ac:	bf00      	nop
 80022ae:	3730      	adds	r7, #48	; 0x30
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40005400 	.word	0x40005400
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40005c00 	.word	0x40005c00
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40020000 	.word	0x40020000

080022cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022d0:	f000 ff28 	bl	8003124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022d4:	f000 f82c 	bl	8002330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022d8:	f7ff fea8 	bl	800202c <MX_GPIO_Init>
  MX_DMA_Init();
 80022dc:	f7ff fc6e 	bl	8001bbc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80022e0:	f000 fdc2 	bl	8002e68 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80022e4:	f000 fb96 	bl	8002a14 <MX_TIM2_Init>
  MX_TIM3_Init();
 80022e8:	f000 fbe2 	bl	8002ab0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80022ec:	f000 fc7c 	bl	8002be8 <MX_TIM5_Init>
  MX_TIM4_Init();
 80022f0:	f000 fc2c 	bl	8002b4c <MX_TIM4_Init>
  MX_ADC1_Init();
 80022f4:	f7ff fae6 	bl	80018c4 <MX_ADC1_Init>
  MX_CRC_Init();
 80022f8:	f7ff fc2a 	bl	8001b50 <MX_CRC_Init>
  MX_RTC_Init();
 80022fc:	f000 f8c8 	bl	8002490 <MX_RTC_Init>
  MX_I2C1_Init();
 8002300:	f7ff fed8 	bl	80020b4 <MX_I2C1_Init>
  MX_TIM9_Init();
 8002304:	f000 fcbe 	bl	8002c84 <MX_TIM9_Init>
  MX_I2C3_Init();
 8002308:	f7ff ff02 	bl	8002110 <MX_I2C3_Init>
  MX_SPI1_Init();
 800230c:	f000 f9a6 	bl	800265c <MX_SPI1_Init>
  MX_MBEDTLS_Init();
 8002310:	f009 fbfc 	bl	800bb0c <MX_MBEDTLS_Init>
  MX_TIM11_Init();
 8002314:	f000 fcf0 	bl	8002cf8 <MX_TIM11_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8002318:	f009 fbf8 	bl	800bb0c <MX_MBEDTLS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800231c:	f000 f872 	bl	8002404 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002320:	f009 fc40 	bl	800bba4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002324:	f7ff fcb4 	bl	8001c90 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002328:	f009 fc60 	bl	800bbec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800232c:	e7fe      	b.n	800232c <main+0x60>
	...

08002330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b094      	sub	sp, #80	; 0x50
 8002334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002336:	f107 0320 	add.w	r3, r7, #32
 800233a:	2230      	movs	r2, #48	; 0x30
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f00c fda2 	bl	800ee88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	4b28      	ldr	r3, [pc, #160]	; (80023fc <SystemClock_Config+0xcc>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	4a27      	ldr	r2, [pc, #156]	; (80023fc <SystemClock_Config+0xcc>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002362:	6413      	str	r3, [r2, #64]	; 0x40
 8002364:	4b25      	ldr	r3, [pc, #148]	; (80023fc <SystemClock_Config+0xcc>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002370:	2300      	movs	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	4b22      	ldr	r3, [pc, #136]	; (8002400 <SystemClock_Config+0xd0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <SystemClock_Config+0xd0>)
 800237a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <SystemClock_Config+0xd0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800238c:	2309      	movs	r3, #9
 800238e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002396:	2301      	movs	r3, #1
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800239a:	2302      	movs	r3, #2
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800239e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023a4:	2304      	movs	r3, #4
 80023a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80023a8:	2364      	movs	r3, #100	; 0x64
 80023aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023ac:	2302      	movs	r3, #2
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023b0:	2304      	movs	r3, #4
 80023b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b4:	f107 0320 	add.w	r3, r7, #32
 80023b8:	4618      	mov	r0, r3
 80023ba:	f004 fe7f 	bl	80070bc <HAL_RCC_OscConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80023c4:	f000 f854 	bl	8002470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c8:	230f      	movs	r3, #15
 80023ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023cc:	2302      	movs	r3, #2
 80023ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	2103      	movs	r1, #3
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 f991 	bl	800770c <HAL_RCC_ClockConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80023f0:	f000 f83e 	bl	8002470 <Error_Handler>
  }
}
 80023f4:	bf00      	nop
 80023f6:	3750      	adds	r7, #80	; 0x50
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000

08002404 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2105      	movs	r1, #5
 800240c:	2004      	movs	r0, #4
 800240e:	f001 fd0f 	bl	8003e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002412:	2004      	movs	r0, #4
 8002414:	f001 fd38 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2105      	movs	r1, #5
 800241c:	201c      	movs	r0, #28
 800241e:	f001 fd07 	bl	8003e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002422:	201c      	movs	r0, #28
 8002424:	f001 fd30 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2105      	movs	r1, #5
 800242c:	201d      	movs	r0, #29
 800242e:	f001 fcff 	bl	8003e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002432:	201d      	movs	r0, #29
 8002434:	f001 fd28 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2105      	movs	r1, #5
 800243c:	2051      	movs	r0, #81	; 0x51
 800243e:	f001 fcf7 	bl	8003e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002442:	2051      	movs	r0, #81	; 0x51
 8002444:	f001 fd20 	bl	8003e88 <HAL_NVIC_EnableIRQ>
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d101      	bne.n	8002462 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800245e:	f000 fe83 	bl	8003168 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40010000 	.word	0x40010000

08002470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002474:	b672      	cpsid	i
}
 8002476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002478:	e7fe      	b.n	8002478 <Error_Handler+0x8>

0800247a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b090      	sub	sp, #64	; 0x40
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024a6:	2300      	movs	r3, #0
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80024aa:	463b      	mov	r3, r7
 80024ac:	2228      	movs	r2, #40	; 0x28
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f00c fce9 	bl	800ee88 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <MX_RTC_Init+0x140>)
 80024b8:	4a46      	ldr	r2, [pc, #280]	; (80025d4 <MX_RTC_Init+0x144>)
 80024ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024bc:	4b44      	ldr	r3, [pc, #272]	; (80025d0 <MX_RTC_Init+0x140>)
 80024be:	2200      	movs	r2, #0
 80024c0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80024c2:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <MX_RTC_Init+0x140>)
 80024c4:	227f      	movs	r2, #127	; 0x7f
 80024c6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80024c8:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <MX_RTC_Init+0x140>)
 80024ca:	22ff      	movs	r2, #255	; 0xff
 80024cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024ce:	4b40      	ldr	r3, [pc, #256]	; (80025d0 <MX_RTC_Init+0x140>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024d4:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <MX_RTC_Init+0x140>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <MX_RTC_Init+0x140>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024e0:	483b      	ldr	r0, [pc, #236]	; (80025d0 <MX_RTC_Init+0x140>)
 80024e2:	f005 fe23 	bl	800812c <HAL_RTC_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80024ec:	f7ff ffc0 	bl	8002470 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002502:	2300      	movs	r3, #0
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800250a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250e:	2201      	movs	r2, #1
 8002510:	4619      	mov	r1, r3
 8002512:	482f      	ldr	r0, [pc, #188]	; (80025d0 <MX_RTC_Init+0x140>)
 8002514:	f005 ff0e 	bl	8008334 <HAL_RTC_SetTime>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800251e:	f7ff ffa7 	bl	8002470 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002522:	2301      	movs	r3, #1
 8002524:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800252e:	2301      	movs	r3, #1
 8002530:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800253a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800253e:	2201      	movs	r2, #1
 8002540:	4619      	mov	r1, r3
 8002542:	4823      	ldr	r0, [pc, #140]	; (80025d0 <MX_RTC_Init+0x140>)
 8002544:	f006 f83e 	bl	80085c4 <HAL_RTC_SetDate>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800254e:	f7ff ff8f 	bl	8002470 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002552:	2300      	movs	r3, #0
 8002554:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002556:	2300      	movs	r3, #0
 8002558:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800255a:	2300      	movs	r3, #0
 800255c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800257c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002582:	463b      	mov	r3, r7
 8002584:	2201      	movs	r2, #1
 8002586:	4619      	mov	r1, r3
 8002588:	4811      	ldr	r0, [pc, #68]	; (80025d0 <MX_RTC_Init+0x140>)
 800258a:	f006 f927 	bl	80087dc <HAL_RTC_SetAlarm>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002594:	f7ff ff6c 	bl	8002470 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800259e:	463b      	mov	r3, r7
 80025a0:	2201      	movs	r2, #1
 80025a2:	4619      	mov	r1, r3
 80025a4:	480a      	ldr	r0, [pc, #40]	; (80025d0 <MX_RTC_Init+0x140>)
 80025a6:	f006 f919 	bl	80087dc <HAL_RTC_SetAlarm>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80025b0:	f7ff ff5e 	bl	8002470 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80025b4:	2200      	movs	r2, #0
 80025b6:	2100      	movs	r1, #0
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_RTC_Init+0x140>)
 80025ba:	f006 fcc9 	bl	8008f50 <HAL_RTCEx_SetWakeUpTimer>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80025c4:	f7ff ff54 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	3740      	adds	r7, #64	; 0x40
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000330 	.word	0x20000330
 80025d4:	40002800 	.word	0x40002800

080025d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
 80025f0:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <HAL_RTC_MspInit+0x50>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d111      	bne.n	8002620 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025fc:	2302      	movs	r3, #2
 80025fe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002604:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	4618      	mov	r0, r3
 800260c:	f005 fb78 	bl	8007d00 <HAL_RCCEx_PeriphCLKConfig>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002616:	f7ff ff2b 	bl	8002470 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <HAL_RTC_MspInit+0x54>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002620:	bf00      	nop
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40002800 	.word	0x40002800
 800262c:	42470e3c 	.word	0x42470e3c

08002630 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a05      	ldr	r2, [pc, #20]	; (8002654 <HAL_RTC_MspDeInit+0x24>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d102      	bne.n	8002648 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RTC_MspDeInit+0x28>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40002800 	.word	0x40002800
 8002658:	42470e3c 	.word	0x42470e3c

0800265c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <MX_SPI1_Init+0x64>)
 8002662:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <MX_SPI1_Init+0x68>)
 8002664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <MX_SPI1_Init+0x64>)
 8002668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800266c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_SPI1_Init+0x64>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <MX_SPI1_Init+0x64>)
 8002676:	2200      	movs	r2, #0
 8002678:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <MX_SPI1_Init+0x64>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_SPI1_Init+0x64>)
 8002682:	2200      	movs	r2, #0
 8002684:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <MX_SPI1_Init+0x64>)
 8002688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <MX_SPI1_Init+0x64>)
 8002690:	2200      	movs	r2, #0
 8002692:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <MX_SPI1_Init+0x64>)
 8002696:	2200      	movs	r2, #0
 8002698:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <MX_SPI1_Init+0x64>)
 800269c:	2200      	movs	r2, #0
 800269e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <MX_SPI1_Init+0x64>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <MX_SPI1_Init+0x64>)
 80026a8:	220a      	movs	r2, #10
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026ac:	4804      	ldr	r0, [pc, #16]	; (80026c0 <MX_SPI1_Init+0x64>)
 80026ae:	f006 fd23 	bl	80090f8 <HAL_SPI_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026b8:	f7ff feda 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	2000036c 	.word	0x2000036c
 80026c4:	40013000 	.word	0x40013000

080026c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	; (800275c <HAL_SPI_MspInit+0x94>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d133      	bne.n	8002752 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_SPI_MspInit+0x98>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <HAL_SPI_MspInit+0x98>)
 80026f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026f8:	6453      	str	r3, [r2, #68]	; 0x44
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_SPI_MspInit+0x98>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <HAL_SPI_MspInit+0x98>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a14      	ldr	r2, [pc, #80]	; (8002760 <HAL_SPI_MspInit+0x98>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_SPI_MspInit+0x98>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002722:	23e0      	movs	r3, #224	; 0xe0
 8002724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002732:	2305      	movs	r3, #5
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	4619      	mov	r1, r3
 800273c:	4809      	ldr	r0, [pc, #36]	; (8002764 <HAL_SPI_MspInit+0x9c>)
 800273e:	f002 fab1 	bl	8004ca4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2105      	movs	r1, #5
 8002746:	2023      	movs	r0, #35	; 0x23
 8002748:	f001 fb72 	bl	8003e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800274c:	2023      	movs	r0, #35	; 0x23
 800274e:	f001 fb9b 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	; 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40013000 	.word	0x40013000
 8002760:	40023800 	.word	0x40023800
 8002764:	40020000 	.word	0x40020000

08002768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <HAL_MspInit+0x74>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_MspInit+0x74>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_MspInit+0x74>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <HAL_MspInit+0x74>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <HAL_MspInit+0x74>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_MspInit+0x74>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	210f      	movs	r1, #15
 80027aa:	f06f 0001 	mvn.w	r0, #1
 80027ae:	f001 fb3f 	bl	8003e30 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2105      	movs	r1, #5
 80027b6:	2001      	movs	r0, #1
 80027b8:	f001 fb3a 	bl	8003e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80027bc:	2001      	movs	r0, #1
 80027be:	f001 fb63 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2105      	movs	r1, #5
 80027c6:	2005      	movs	r0, #5
 80027c8:	f001 fb32 	bl	8003e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80027cc:	2005      	movs	r0, #5
 80027ce:	f001 fb5b 	bl	8003e88 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <HAL_InitTick+0xd0>)
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	4a2d      	ldr	r2, [pc, #180]	; (80028b0 <HAL_InitTick+0xd0>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_InitTick+0xd0>)
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800280c:	f107 020c 	add.w	r2, r7, #12
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f005 fa40 	bl	8007c9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800281c:	f005 fa2a 	bl	8007c74 <HAL_RCC_GetPCLK2Freq>
 8002820:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	4a23      	ldr	r2, [pc, #140]	; (80028b4 <HAL_InitTick+0xd4>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0c9b      	lsrs	r3, r3, #18
 800282c:	3b01      	subs	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_InitTick+0xd8>)
 8002832:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_InitTick+0xdc>)
 8002834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_InitTick+0xd8>)
 8002838:	f240 32e7 	movw	r2, #999	; 0x3e7
 800283c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800283e:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_InitTick+0xd8>)
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_InitTick+0xd8>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_InitTick+0xd8>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_InitTick+0xd8>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002856:	4818      	ldr	r0, [pc, #96]	; (80028b8 <HAL_InitTick+0xd8>)
 8002858:	f006 ff82 	bl	8009760 <HAL_TIM_Base_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002866:	2b00      	cmp	r3, #0
 8002868:	d11b      	bne.n	80028a2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800286a:	4813      	ldr	r0, [pc, #76]	; (80028b8 <HAL_InitTick+0xd8>)
 800286c:	f007 f936 	bl	8009adc <HAL_TIM_Base_Start_IT>
 8002870:	4603      	mov	r3, r0
 8002872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800287a:	2b00      	cmp	r3, #0
 800287c:	d111      	bne.n	80028a2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800287e:	2019      	movs	r0, #25
 8002880:	f001 fb02 	bl	8003e88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b0f      	cmp	r3, #15
 8002888:	d808      	bhi.n	800289c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800288a:	2200      	movs	r2, #0
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	2019      	movs	r0, #25
 8002890:	f001 face 	bl	8003e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002894:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <HAL_InitTick+0xe0>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e002      	b.n	80028a2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80028a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3730      	adds	r7, #48	; 0x30
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	431bde83 	.word	0x431bde83
 80028b8:	200003ec 	.word	0x200003ec
 80028bc:	40010000 	.word	0x40010000
 80028c0:	20000004 	.word	0x20000004

080028c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <NMI_Handler+0x4>

080028ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <HardFault_Handler+0x4>

080028d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <MemManage_Handler+0x4>

080028d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028da:	e7fe      	b.n	80028da <BusFault_Handler+0x4>

080028dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <UsageFault_Handler+0x4>

080028e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80028f4:	f004 fbc8 	bl	8007088 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}

080028fc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002900:	f001 fffa 	bl	80048f8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}

08002908 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <ADC_IRQHandler+0x10>)
 800291e:	f000 fdc5 	bl	80034ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200000e0 	.word	0x200000e0

0800292c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002932:	f007 f965 	bl	8009c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200003ec 	.word	0x200003ec

08002940 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <TIM2_IRQHandler+0x10>)
 8002946:	f007 f95b 	bl	8009c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200004a0 	.word	0x200004a0

08002954 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <TIM3_IRQHandler+0x10>)
 800295a:	f007 f951 	bl	8009c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000554 	.word	0x20000554

08002968 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <TIM4_IRQHandler+0x10>)
 800296e:	f007 f947 	bl	8009c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000608 	.word	0x20000608

0800297c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <I2C1_EV_IRQHandler+0x10>)
 8002982:	f002 fe8b 	bl	800569c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000228 	.word	0x20000228

08002990 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <I2C1_ER_IRQHandler+0x10>)
 8002996:	f002 fff2 	bl	800597e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000228 	.word	0x20000228

080029a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <SPI1_IRQHandler+0x10>)
 80029aa:	f006 fd73 	bl	8009494 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2000036c 	.word	0x2000036c

080029b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <USART1_IRQHandler+0x10>)
 80029be:	f008 f8f3 	bl	800aba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200008d8 	.word	0x200008d8

080029cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <DMA2_Stream0_IRQHandler+0x10>)
 80029d2:	f001 fd47 	bl	8004464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000144 	.word	0x20000144

080029e0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <SystemInit+0x20>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <SystemInit+0x20>)
 80029fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a28:	463b      	mov	r3, r7
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <MX_TIM2_Init+0x98>)
 8002a32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <MX_TIM2_Init+0x98>)
 8002a3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <MX_TIM2_Init+0x98>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <MX_TIM2_Init+0x98>)
 8002a48:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <MX_TIM2_Init+0x98>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <MX_TIM2_Init+0x98>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a5a:	4814      	ldr	r0, [pc, #80]	; (8002aac <MX_TIM2_Init+0x98>)
 8002a5c:	f006 fe80 	bl	8009760 <HAL_TIM_Base_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002a66:	f7ff fd03 	bl	8002470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a70:	f107 0308 	add.w	r3, r7, #8
 8002a74:	4619      	mov	r1, r3
 8002a76:	480d      	ldr	r0, [pc, #52]	; (8002aac <MX_TIM2_Init+0x98>)
 8002a78:	f007 f9ea 	bl	8009e50 <HAL_TIM_ConfigClockSource>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002a82:	f7ff fcf5 	bl	8002470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a8e:	463b      	mov	r3, r7
 8002a90:	4619      	mov	r1, r3
 8002a92:	4806      	ldr	r0, [pc, #24]	; (8002aac <MX_TIM2_Init+0x98>)
 8002a94:	f007 feb8 	bl	800a808 <HAL_TIMEx_MasterConfigSynchronization>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a9e:	f7ff fce7 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200004a0 	.word	0x200004a0

08002ab0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab6:	f107 0308 	add.w	r3, r7, #8
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac4:	463b      	mov	r3, r7
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <MX_TIM3_Init+0x94>)
 8002ace:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <MX_TIM3_Init+0x98>)
 8002ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <MX_TIM3_Init+0x94>)
 8002ad4:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ad8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <MX_TIM3_Init+0x94>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <MX_TIM3_Init+0x94>)
 8002ae2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002ae6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <MX_TIM3_Init+0x94>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <MX_TIM3_Init+0x94>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002af4:	4813      	ldr	r0, [pc, #76]	; (8002b44 <MX_TIM3_Init+0x94>)
 8002af6:	f006 fe33 	bl	8009760 <HAL_TIM_Base_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002b00:	f7ff fcb6 	bl	8002470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <MX_TIM3_Init+0x94>)
 8002b12:	f007 f99d 	bl	8009e50 <HAL_TIM_ConfigClockSource>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002b1c:	f7ff fca8 	bl	8002470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b28:	463b      	mov	r3, r7
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4805      	ldr	r0, [pc, #20]	; (8002b44 <MX_TIM3_Init+0x94>)
 8002b2e:	f007 fe6b 	bl	800a808 <HAL_TIMEx_MasterConfigSynchronization>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b38:	f7ff fc9a 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000554 	.word	0x20000554
 8002b48:	40000400 	.word	0x40000400

08002b4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b60:	463b      	mov	r3, r7
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <MX_TIM4_Init+0x94>)
 8002b6a:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <MX_TIM4_Init+0x98>)
 8002b6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <MX_TIM4_Init+0x94>)
 8002b70:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_TIM4_Init+0x94>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <MX_TIM4_Init+0x94>)
 8002b7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <MX_TIM4_Init+0x94>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <MX_TIM4_Init+0x94>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b90:	4813      	ldr	r0, [pc, #76]	; (8002be0 <MX_TIM4_Init+0x94>)
 8002b92:	f006 fde5 	bl	8009760 <HAL_TIM_Base_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002b9c:	f7ff fc68 	bl	8002470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ba6:	f107 0308 	add.w	r3, r7, #8
 8002baa:	4619      	mov	r1, r3
 8002bac:	480c      	ldr	r0, [pc, #48]	; (8002be0 <MX_TIM4_Init+0x94>)
 8002bae:	f007 f94f 	bl	8009e50 <HAL_TIM_ConfigClockSource>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002bb8:	f7ff fc5a 	bl	8002470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4805      	ldr	r0, [pc, #20]	; (8002be0 <MX_TIM4_Init+0x94>)
 8002bca:	f007 fe1d 	bl	800a808 <HAL_TIMEx_MasterConfigSynchronization>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002bd4:	f7ff fc4c 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000608 	.word	0x20000608
 8002be4:	40000800 	.word	0x40000800

08002be8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bee:	f107 0308 	add.w	r3, r7, #8
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <MX_TIM5_Init+0x94>)
 8002c06:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <MX_TIM5_Init+0x98>)
 8002c08:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c0a:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <MX_TIM5_Init+0x94>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <MX_TIM5_Init+0x94>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002c16:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <MX_TIM5_Init+0x94>)
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <MX_TIM5_Init+0x94>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <MX_TIM5_Init+0x94>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c2a:	4814      	ldr	r0, [pc, #80]	; (8002c7c <MX_TIM5_Init+0x94>)
 8002c2c:	f006 fd98 	bl	8009760 <HAL_TIM_Base_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c36:	f7ff fc1b 	bl	8002470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	4619      	mov	r1, r3
 8002c46:	480d      	ldr	r0, [pc, #52]	; (8002c7c <MX_TIM5_Init+0x94>)
 8002c48:	f007 f902 	bl	8009e50 <HAL_TIM_ConfigClockSource>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002c52:	f7ff fc0d 	bl	8002470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c5e:	463b      	mov	r3, r7
 8002c60:	4619      	mov	r1, r3
 8002c62:	4806      	ldr	r0, [pc, #24]	; (8002c7c <MX_TIM5_Init+0x94>)
 8002c64:	f007 fdd0 	bl	800a808 <HAL_TIMEx_MasterConfigSynchronization>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002c6e:	f7ff fbff 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200006bc 	.word	0x200006bc
 8002c80:	40000c00 	.word	0x40000c00

08002c84 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <MX_TIM9_Init+0x6c>)
 8002c98:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <MX_TIM9_Init+0x70>)
 8002c9a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <MX_TIM9_Init+0x6c>)
 8002c9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ca2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <MX_TIM9_Init+0x6c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_TIM9_Init+0x6c>)
 8002cac:	f242 720f 	movw	r2, #9999	; 0x270f
 8002cb0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <MX_TIM9_Init+0x6c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <MX_TIM9_Init+0x6c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002cbe:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <MX_TIM9_Init+0x6c>)
 8002cc0:	f006 fd4e 	bl	8009760 <HAL_TIM_Base_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002cca:	f7ff fbd1 	bl	8002470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_TIM9_Init+0x6c>)
 8002cda:	f007 f8b9 	bl	8009e50 <HAL_TIM_ConfigClockSource>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002ce4:	f7ff fbc4 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000770 	.word	0x20000770
 8002cf4:	40014000 	.word	0x40014000

08002cf8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <MX_TIM11_Init+0x40>)
 8002cfe:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <MX_TIM11_Init+0x44>)
 8002d00:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <MX_TIM11_Init+0x40>)
 8002d04:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d08:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <MX_TIM11_Init+0x40>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <MX_TIM11_Init+0x40>)
 8002d12:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d16:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <MX_TIM11_Init+0x40>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <MX_TIM11_Init+0x40>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d24:	4804      	ldr	r0, [pc, #16]	; (8002d38 <MX_TIM11_Init+0x40>)
 8002d26:	f006 fd1b 	bl	8009760 <HAL_TIM_Base_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002d30:	f7ff fb9e 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000824 	.word	0x20000824
 8002d3c:	40014800 	.word	0x40014800

08002d40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a3d      	ldr	r2, [pc, #244]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002d6e:	e06a      	b.n	8002e46 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a37      	ldr	r2, [pc, #220]	; (8002e54 <HAL_TIM_Base_MspInit+0x114>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d10e      	bne.n	8002d98 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a33      	ldr	r2, [pc, #204]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	69bb      	ldr	r3, [r7, #24]
}
 8002d96:	e056      	b.n	8002e46 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM4)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2e      	ldr	r2, [pc, #184]	; (8002e58 <HAL_TIM_Base_MspInit+0x118>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d116      	bne.n	8002dd0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002dac:	f043 0304 	orr.w	r3, r3, #4
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2105      	movs	r1, #5
 8002dc2:	201e      	movs	r0, #30
 8002dc4:	f001 f834 	bl	8003e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dc8:	201e      	movs	r0, #30
 8002dca:	f001 f85d 	bl	8003e88 <HAL_NVIC_EnableIRQ>
}
 8002dce:	e03a      	b.n	8002e46 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM5)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_TIM_Base_MspInit+0x11c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002de4:	f043 0308 	orr.w	r3, r3, #8
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]
}
 8002df6:	e026      	b.n	8002e46 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM9)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_TIM_Base_MspInit+0x120>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d10e      	bne.n	8002e20 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
}
 8002e1e:	e012      	b.n	8002e46 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM11)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <HAL_TIM_Base_MspInit+0x124>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10d      	bne.n	8002e46 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e38:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_TIM_Base_MspInit+0x110>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
}
 8002e46:	bf00      	nop
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	40000c00 	.word	0x40000c00
 8002e60:	40014000 	.word	0x40014000
 8002e64:	40014800 	.word	0x40014800

08002e68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <MX_USART1_UART_Init+0x4c>)
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <MX_USART1_UART_Init+0x50>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <MX_USART1_UART_Init+0x4c>)
 8002e74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <MX_USART1_UART_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <MX_USART1_UART_Init+0x4c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <MX_USART1_UART_Init+0x4c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <MX_USART1_UART_Init+0x4c>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <MX_USART1_UART_Init+0x4c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <MX_USART1_UART_Init+0x4c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e9e:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <MX_USART1_UART_Init+0x4c>)
 8002ea0:	f007 fd8e 	bl	800a9c0 <HAL_UART_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002eaa:	f7ff fae1 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200008d8 	.word	0x200008d8
 8002eb8:	40011000 	.word	0x40011000

08002ebc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2c      	ldr	r2, [pc, #176]	; (8002f8c <HAL_UART_MspInit+0xd0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d152      	bne.n	8002f84 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_UART_MspInit+0xd4>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <HAL_UART_MspInit+0xd4>)
 8002ee8:	f043 0310 	orr.w	r3, r3, #16
 8002eec:	6453      	str	r3, [r2, #68]	; 0x44
 8002eee:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_UART_MspInit+0xd4>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_UART_MspInit+0xd4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a23      	ldr	r2, [pc, #140]	; (8002f90 <HAL_UART_MspInit+0xd4>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_UART_MspInit+0xd4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_UART_MspInit+0xd4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <HAL_UART_MspInit+0xd4>)
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <HAL_UART_MspInit+0xd4>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f44:	2307      	movs	r3, #7
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4811      	ldr	r0, [pc, #68]	; (8002f94 <HAL_UART_MspInit+0xd8>)
 8002f50:	f001 fea8 	bl	8004ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f60:	2303      	movs	r3, #3
 8002f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f64:	2307      	movs	r3, #7
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	480a      	ldr	r0, [pc, #40]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002f70:	f001 fe98 	bl	8004ca4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2105      	movs	r1, #5
 8002f78:	2025      	movs	r0, #37	; 0x25
 8002f7a:	f000 ff59 	bl	8003e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f7e:	2025      	movs	r0, #37	; 0x25
 8002f80:	f000 ff82 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f84:	bf00      	nop
 8002f86:	3728      	adds	r7, #40	; 0x28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40011000 	.word	0x40011000
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40020000 	.word	0x40020000
 8002f98:	40020400 	.word	0x40020400

08002f9c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <HAL_UART_RxCpltCallback+0x24>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d104      	bne.n	8002fb8 <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <HAL_UART_RxCpltCallback+0x28>)
 8002fb2:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <HAL_UART_RxCpltCallback+0x2c>)
 8002fb4:	f007 fdc8 	bl	800ab48 <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40011000 	.word	0x40011000
 8002fc4:	20000090 	.word	0x20000090
 8002fc8:	200008d8 	.word	0x200008d8

08002fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fd0:	480d      	ldr	r0, [pc, #52]	; (8003008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fd2:	490e      	ldr	r1, [pc, #56]	; (800300c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd8:	e002      	b.n	8002fe0 <LoopCopyDataInit>

08002fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fde:	3304      	adds	r3, #4

08002fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe4:	d3f9      	bcc.n	8002fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fe8:	4c0b      	ldr	r4, [pc, #44]	; (8003018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fec:	e001      	b.n	8002ff2 <LoopFillZerobss>

08002fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff0:	3204      	adds	r2, #4

08002ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff4:	d3fb      	bcc.n	8002fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ff6:	f7ff fcfb 	bl	80029f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffa:	f00b ff13 	bl	800ee24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffe:	f7ff f965 	bl	80022cc <main>
  bx  lr    
 8003002:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800300c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003010:	0800fbd8 	.word	0x0800fbd8
  ldr r2, =_sbss
 8003014:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003018:	2000b5e8 	.word	0x2000b5e8

0800301c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800301c:	e7fe      	b.n	800301c <DMA1_Stream0_IRQHandler>

0800301e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800302c:	b672      	cpsid	i
}
 800302e:	bf00      	nop
 8003030:	f7ff fa1e 	bl	8002470 <Error_Handler>
 8003034:	e7fe      	b.n	8003034 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7a1b      	ldrb	r3, [r3, #8]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d904      	bls.n	8003048 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800303e:	b672      	cpsid	i
}
 8003040:	bf00      	nop
 8003042:	f7ff fa15 	bl	8002470 <Error_Handler>
 8003046:	e7fe      	b.n	8003046 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7a1b      	ldrb	r3, [r3, #8]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	b2d1      	uxtb	r1, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	7211      	strb	r1, [r2, #8]
 8003054:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003056:	f3ef 8211 	mrs	r2, BASEPRI
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	60fa      	str	r2, [r7, #12]
 800306c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d104      	bne.n	8003096 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800308c:	b672      	cpsid	i
}
 800308e:	bf00      	nop
 8003090:	f7ff f9ee 	bl	8002470 <Error_Handler>
 8003094:	e7fe      	b.n	8003094 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7a1b      	ldrb	r3, [r3, #8]
 800309a:	3b01      	subs	r3, #1
 800309c:	b2da      	uxtb	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7a1b      	ldrb	r3, [r3, #8]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d904      	bls.n	80030b4 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80030aa:	b672      	cpsid	i
}
 80030ac:	bf00      	nop
 80030ae:	f7ff f9df 	bl	8002470 <Error_Handler>
 80030b2:	e7fe      	b.n	80030b2 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7a1b      	ldrb	r3, [r3, #8]
 80030b8:	461a      	mov	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030c8:	bf00      	nop
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80030e0:	b672      	cpsid	i
}
 80030e2:	bf00      	nop
 80030e4:	f7ff f9c4 	bl	8002470 <Error_Handler>
 80030e8:	e7fe      	b.n	80030e8 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff96 	bl	800301e <stm32_lock_acquire>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003108:	b672      	cpsid	i
}
 800310a:	bf00      	nop
 800310c:	f7ff f9b0 	bl	8002470 <Error_Handler>
 8003110:	e7fe      	b.n	8003110 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ffb2 	bl	800307e <stm32_lock_release>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003128:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <HAL_Init+0x40>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <HAL_Init+0x40>)
 800312e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_Init+0x40>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_Init+0x40>)
 800313a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003140:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_Init+0x40>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_Init+0x40>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800314c:	2003      	movs	r0, #3
 800314e:	f000 fe4f 	bl	8003df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003152:	200f      	movs	r0, #15
 8003154:	f7ff fb44 	bl	80027e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003158:	f7ff fb06 	bl	8002768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40023c00 	.word	0x40023c00

08003168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_IncTick+0x20>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_IncTick+0x24>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4413      	add	r3, r2
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <HAL_IncTick+0x24>)
 800317a:	6013      	str	r3, [r2, #0]
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000008 	.word	0x20000008
 800318c:	20000958 	.word	0x20000958

08003190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return uwTick;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_GetTick+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000958 	.word	0x20000958

080031a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e16f      	b.n	800349e <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a93      	ldr	r2, [pc, #588]	; (8003410 <HAL_ADC_Init+0x268>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_ADC_Init+0x2a>
 80031c8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80031cc:	4891      	ldr	r0, [pc, #580]	; (8003414 <HAL_ADC_Init+0x26c>)
 80031ce:	f7ff f954 	bl	800247a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d013      	beq.n	8003202 <HAL_ADC_Init+0x5a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d00e      	beq.n	8003202 <HAL_ADC_Init+0x5a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ec:	d009      	beq.n	8003202 <HAL_ADC_Init+0x5a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031f6:	d004      	beq.n	8003202 <HAL_ADC_Init+0x5a>
 80031f8:	f240 1143 	movw	r1, #323	; 0x143
 80031fc:	4885      	ldr	r0, [pc, #532]	; (8003414 <HAL_ADC_Init+0x26c>)
 80031fe:	f7ff f93c 	bl	800247a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d013      	beq.n	8003232 <HAL_ADC_Init+0x8a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003212:	d00e      	beq.n	8003232 <HAL_ADC_Init+0x8a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800321c:	d009      	beq.n	8003232 <HAL_ADC_Init+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003226:	d004      	beq.n	8003232 <HAL_ADC_Init+0x8a>
 8003228:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800322c:	4879      	ldr	r0, [pc, #484]	; (8003414 <HAL_ADC_Init+0x26c>)
 800322e:	f7ff f924 	bl	800247a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_ADC_Init+0xa4>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d004      	beq.n	800324c <HAL_ADC_Init+0xa4>
 8003242:	f240 1145 	movw	r1, #325	; 0x145
 8003246:	4873      	ldr	r0, [pc, #460]	; (8003414 <HAL_ADC_Init+0x26c>)
 8003248:	f7ff f917 	bl	800247a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7e1b      	ldrb	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_ADC_Init+0xbe>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7e1b      	ldrb	r3, [r3, #24]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d004      	beq.n	8003266 <HAL_ADC_Init+0xbe>
 800325c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003260:	486c      	ldr	r0, [pc, #432]	; (8003414 <HAL_ADC_Init+0x26c>)
 8003262:	f7ff f90a 	bl	800247a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d054      	beq.n	8003318 <HAL_ADC_Init+0x170>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003276:	d04f      	beq.n	8003318 <HAL_ADC_Init+0x170>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003280:	d04a      	beq.n	8003318 <HAL_ADC_Init+0x170>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800328a:	d045      	beq.n	8003318 <HAL_ADC_Init+0x170>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003294:	d040      	beq.n	8003318 <HAL_ADC_Init+0x170>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800329e:	d03b      	beq.n	8003318 <HAL_ADC_Init+0x170>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80032a8:	d036      	beq.n	8003318 <HAL_ADC_Init+0x170>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80032b2:	d031      	beq.n	8003318 <HAL_ADC_Init+0x170>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032bc:	d02c      	beq.n	8003318 <HAL_ADC_Init+0x170>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80032c6:	d027      	beq.n	8003318 <HAL_ADC_Init+0x170>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80032d0:	d022      	beq.n	8003318 <HAL_ADC_Init+0x170>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80032da:	d01d      	beq.n	8003318 <HAL_ADC_Init+0x170>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80032e4:	d018      	beq.n	8003318 <HAL_ADC_Init+0x170>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80032ee:	d013      	beq.n	8003318 <HAL_ADC_Init+0x170>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80032f8:	d00e      	beq.n	8003318 <HAL_ADC_Init+0x170>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003302:	d009      	beq.n	8003318 <HAL_ADC_Init+0x170>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	4a43      	ldr	r2, [pc, #268]	; (8003418 <HAL_ADC_Init+0x270>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <HAL_ADC_Init+0x170>
 800330e:	f240 1147 	movw	r1, #327	; 0x147
 8003312:	4840      	ldr	r0, [pc, #256]	; (8003414 <HAL_ADC_Init+0x26c>)
 8003314:	f7ff f8b1 	bl	800247a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_ADC_Init+0x18c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003328:	d004      	beq.n	8003334 <HAL_ADC_Init+0x18c>
 800332a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800332e:	4839      	ldr	r0, [pc, #228]	; (8003414 <HAL_ADC_Init+0x26c>)
 8003330:	f7ff f8a3 	bl	800247a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_ADC_Init+0x19c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	2b10      	cmp	r3, #16
 8003342:	d904      	bls.n	800334e <HAL_ADC_Init+0x1a6>
 8003344:	f240 1149 	movw	r1, #329	; 0x149
 8003348:	4832      	ldr	r0, [pc, #200]	; (8003414 <HAL_ADC_Init+0x26c>)
 800334a:	f7ff f896 	bl	800247a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003354:	2b00      	cmp	r3, #0
 8003356:	d009      	beq.n	800336c <HAL_ADC_Init+0x1c4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800335e:	2b01      	cmp	r3, #1
 8003360:	d004      	beq.n	800336c <HAL_ADC_Init+0x1c4>
 8003362:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003366:	482b      	ldr	r0, [pc, #172]	; (8003414 <HAL_ADC_Init+0x26c>)
 8003368:	f7ff f887 	bl	800247a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d00c      	beq.n	800338e <HAL_ADC_Init+0x1e6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_ADC_Init+0x1e6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d004      	beq.n	800338e <HAL_ADC_Init+0x1e6>
 8003384:	f240 114b 	movw	r1, #331	; 0x14b
 8003388:	4822      	ldr	r0, [pc, #136]	; (8003414 <HAL_ADC_Init+0x26c>)
 800338a:	f7ff f876 	bl	800247a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <HAL_ADC_Init+0x204>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d004      	beq.n	80033ac <HAL_ADC_Init+0x204>
 80033a2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80033a6:	481b      	ldr	r0, [pc, #108]	; (8003414 <HAL_ADC_Init+0x26c>)
 80033a8:	f7ff f867 	bl	800247a <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_ADC_Init+0x270>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d017      	beq.n	80033e6 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d013      	beq.n	80033e6 <HAL_ADC_Init+0x23e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c6:	d00e      	beq.n	80033e6 <HAL_ADC_Init+0x23e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d0:	d009      	beq.n	80033e6 <HAL_ADC_Init+0x23e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033da:	d004      	beq.n	80033e6 <HAL_ADC_Init+0x23e>
 80033dc:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80033e0:	480c      	ldr	r0, [pc, #48]	; (8003414 <HAL_ADC_Init+0x26c>)
 80033e2:	f7ff f84a 	bl	800247a <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d131      	bne.n	8003452 <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_ADC_Init+0x274>)
 80033f2:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <HAL_ADC_Init+0x278>)
 80033f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_ADC_Init+0x27c>)
 80033fe:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <HAL_ADC_Init+0x280>)
 8003404:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <HAL_ADC_Init+0x284>)
 800340a:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	e00f      	b.n	8003430 <HAL_ADC_Init+0x288>
 8003410:	40012000 	.word	0x40012000
 8003414:	0800f220 	.word	0x0800f220
 8003418:	0f000001 	.word	0x0f000001
 800341c:	08003731 	.word	0x08003731
 8003420:	08003745 	.word	0x08003745
 8003424:	08003759 	.word	0x08003759
 8003428:	0800376d 	.word	0x0800376d
 800342c:	08003c81 	.word	0x08003c81
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <HAL_ADC_Init+0x300>)
 800343a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003466:	f023 0302 	bic.w	r3, r3, #2
 800346a:	f043 0202 	orr.w	r2, r3, #2
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fafa 	bl	8003a6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
 800348e:	e001      	b.n	8003494 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	080019e1 	.word	0x080019e1

080034ac <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7e1b      	ldrb	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_ADC_IRQHandler+0x3a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7e1b      	ldrb	r3, [r3, #24]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d004      	beq.n	80034e6 <HAL_ADC_IRQHandler+0x3a>
 80034dc:	f240 41b7 	movw	r1, #1207	; 0x4b7
 80034e0:	4892      	ldr	r0, [pc, #584]	; (800372c <HAL_ADC_IRQHandler+0x280>)
 80034e2:	f7fe ffca 	bl	800247a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x4a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d904      	bls.n	8003500 <HAL_ADC_IRQHandler+0x54>
 80034f6:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 80034fa:	488c      	ldr	r0, [pc, #560]	; (800372c <HAL_ADC_IRQHandler+0x280>)
 80034fc:	f7fe ffbd 	bl	800247a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d00c      	beq.n	8003522 <HAL_ADC_IRQHandler+0x76>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_ADC_IRQHandler+0x76>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d004      	beq.n	8003522 <HAL_ADC_IRQHandler+0x76>
 8003518:	f240 41b9 	movw	r1, #1209	; 0x4b9
 800351c:	4883      	ldr	r0, [pc, #524]	; (800372c <HAL_ADC_IRQHandler+0x280>)
 800351e:	f7fe ffac 	bl	800247a <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d04a      	beq.n	80035ce <HAL_ADC_IRQHandler+0x122>
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d047      	beq.n	80035ce <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d12b      	bne.n	80035bc <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003568:	2b00      	cmp	r3, #0
 800356a:	d127      	bne.n	80035bc <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003584:	2b00      	cmp	r3, #0
 8003586:	d119      	bne.n	80035bc <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0220 	bic.w	r2, r2, #32
 8003596:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f043 0201 	orr.w	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0212 	mvn.w	r2, #18
 80035cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d058      	beq.n	8003696 <HAL_ADC_IRQHandler+0x1ea>
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d055      	beq.n	8003696 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d105      	bne.n	8003602 <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d139      	bne.n	8003684 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800361a:	2b00      	cmp	r3, #0
 800361c:	d006      	beq.n	800362c <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003628:	2b00      	cmp	r3, #0
 800362a:	d12b      	bne.n	8003684 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003636:	2b00      	cmp	r3, #0
 8003638:	d124      	bne.n	8003684 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	d11d      	bne.n	8003684 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800364c:	2b00      	cmp	r3, #0
 800364e:	d119      	bne.n	8003684 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800365e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 020c 	mvn.w	r2, #12
 8003694:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d018      	beq.n	80036de <HAL_ADC_IRQHandler+0x232>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d015      	beq.n	80036de <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10e      	bne.n	80036de <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0201 	mvn.w	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ec:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d016      	beq.n	8003722 <HAL_ADC_IRQHandler+0x276>
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d013      	beq.n	8003722 <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f043 0202 	orr.w	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f06f 0220 	mvn.w	r2, #32
 800370e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0220 	mvn.w	r2, #32
 8003720:	601a      	str	r2, [r3, #0]
  }
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	0800f220 	.word	0x0800f220

08003730 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b12      	cmp	r3, #18
 8003794:	d909      	bls.n	80037aa <HAL_ADC_ConfigChannel+0x2a>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a72      	ldr	r2, [pc, #456]	; (8003964 <HAL_ADC_ConfigChannel+0x1e4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_ADC_ConfigChannel+0x2a>
 80037a0:	f240 618b 	movw	r1, #1675	; 0x68b
 80037a4:	4870      	ldr	r0, [pc, #448]	; (8003968 <HAL_ADC_ConfigChannel+0x1e8>)
 80037a6:	f7fe fe68 	bl	800247a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_ADC_ConfigChannel+0x3a>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d904      	bls.n	80037c4 <HAL_ADC_ConfigChannel+0x44>
 80037ba:	f240 618c 	movw	r1, #1676	; 0x68c
 80037be:	486a      	ldr	r0, [pc, #424]	; (8003968 <HAL_ADC_ConfigChannel+0x1e8>)
 80037c0:	f7fe fe5b 	bl	800247a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_ADC_ConfigChannel+0x8e>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d01c      	beq.n	800380e <HAL_ADC_ConfigChannel+0x8e>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d018      	beq.n	800380e <HAL_ADC_ConfigChannel+0x8e>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d014      	beq.n	800380e <HAL_ADC_ConfigChannel+0x8e>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d010      	beq.n	800380e <HAL_ADC_ConfigChannel+0x8e>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d00c      	beq.n	800380e <HAL_ADC_ConfigChannel+0x8e>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b06      	cmp	r3, #6
 80037fa:	d008      	beq.n	800380e <HAL_ADC_ConfigChannel+0x8e>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b07      	cmp	r3, #7
 8003802:	d004      	beq.n	800380e <HAL_ADC_ConfigChannel+0x8e>
 8003804:	f240 618d 	movw	r1, #1677	; 0x68d
 8003808:	4857      	ldr	r0, [pc, #348]	; (8003968 <HAL_ADC_ConfigChannel+0x1e8>)
 800380a:	f7fe fe36 	bl	800247a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_ADC_ConfigChannel+0x9c>
 8003818:	2302      	movs	r3, #2
 800381a:	e118      	b.n	8003a4e <HAL_ADC_ConfigChannel+0x2ce>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b09      	cmp	r3, #9
 800382a:	d925      	bls.n	8003878 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68d9      	ldr	r1, [r3, #12]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	3b1e      	subs	r3, #30
 8003842:	2207      	movs	r2, #7
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43da      	mvns	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	400a      	ands	r2, r1
 8003850:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68d9      	ldr	r1, [r3, #12]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	4618      	mov	r0, r3
 8003864:	4603      	mov	r3, r0
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4403      	add	r3, r0
 800386a:	3b1e      	subs	r3, #30
 800386c:	409a      	lsls	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e022      	b.n	80038be <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6919      	ldr	r1, [r3, #16]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	2207      	movs	r2, #7
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43da      	mvns	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	400a      	ands	r2, r1
 800389a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6919      	ldr	r1, [r3, #16]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4618      	mov	r0, r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4403      	add	r3, r0
 80038b4:	409a      	lsls	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d824      	bhi.n	8003910 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	3b05      	subs	r3, #5
 80038d8:	221f      	movs	r2, #31
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	400a      	ands	r2, r1
 80038e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	4618      	mov	r0, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	3b05      	subs	r3, #5
 8003902:	fa00 f203 	lsl.w	r2, r0, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	635a      	str	r2, [r3, #52]	; 0x34
 800390e:	e051      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	d829      	bhi.n	800396c <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	3b23      	subs	r3, #35	; 0x23
 800392a:	221f      	movs	r2, #31
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43da      	mvns	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	400a      	ands	r2, r1
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	4618      	mov	r0, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	3b23      	subs	r3, #35	; 0x23
 8003954:	fa00 f203 	lsl.w	r2, r0, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
 8003960:	e028      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x234>
 8003962:	bf00      	nop
 8003964:	10000012 	.word	0x10000012
 8003968:	0800f220 	.word	0x0800f220
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	3b41      	subs	r3, #65	; 0x41
 800397e:	221f      	movs	r2, #31
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43da      	mvns	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	400a      	ands	r2, r1
 800398c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	4618      	mov	r0, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	3b41      	subs	r3, #65	; 0x41
 80039a8:	fa00 f203 	lsl.w	r2, r0, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039b4:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <HAL_ADC_ConfigChannel+0x2d8>)
 80039b6:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <HAL_ADC_ConfigChannel+0x2dc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10f      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x262>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b12      	cmp	r3, #18
 80039c8:	d10b      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_ADC_ConfigChannel+0x2dc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d12b      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x2c4>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <HAL_ADC_ConfigChannel+0x2e0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <HAL_ADC_ConfigChannel+0x27e>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b11      	cmp	r3, #17
 80039fc:	d122      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <HAL_ADC_ConfigChannel+0x2e0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d111      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_ADC_ConfigChannel+0x2e4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <HAL_ADC_ConfigChannel+0x2e8>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	0c9a      	lsrs	r2, r3, #18
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a36:	e002      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f9      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40012300 	.word	0x40012300
 8003a5c:	40012000 	.word	0x40012000
 8003a60:	10000012 	.word	0x10000012
 8003a64:	20000000 	.word	0x20000000
 8003a68:	431bde83 	.word	0x431bde83

08003a6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a74:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <ADC_Init+0x208>)
 8003a76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	021a      	lsls	r2, r3, #8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	4a5e      	ldr	r2, [pc, #376]	; (8003c78 <ADC_Init+0x20c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d022      	beq.n	8003b4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6899      	ldr	r1, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6899      	ldr	r1, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	e00f      	b.n	8003b6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0202 	bic.w	r2, r2, #2
 8003b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7e1b      	ldrb	r3, [r3, #24]
 8003b84:	005a      	lsls	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d028      	beq.n	8003bea <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <ADC_Init+0x13c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d904      	bls.n	8003bb2 <ADC_Init+0x146>
 8003ba8:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003bac:	4833      	ldr	r0, [pc, #204]	; (8003c7c <ADC_Init+0x210>)
 8003bae:	f7fe fc64 	bl	800247a <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc0:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bd0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	035a      	lsls	r2, r3, #13
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	e007      	b.n	8003bfa <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	051a      	lsls	r2, r3, #20
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c3c:	025a      	lsls	r2, r3, #9
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6899      	ldr	r1, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	029a      	lsls	r2, r3, #10
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40012300 	.word	0x40012300
 8003c78:	0f000001 	.word	0x0f000001
 8003c7c:	0800f220 	.word	0x0800f220

08003c80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4907      	ldr	r1, [pc, #28]	; (8003d30 <__NVIC_EnableIRQ+0x38>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db0a      	blt.n	8003d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	490c      	ldr	r1, [pc, #48]	; (8003d80 <__NVIC_SetPriority+0x4c>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	440b      	add	r3, r1
 8003d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d5c:	e00a      	b.n	8003d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4908      	ldr	r1, [pc, #32]	; (8003d84 <__NVIC_SetPriority+0x50>)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	440b      	add	r3, r1
 8003d72:	761a      	strb	r2, [r3, #24]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000e100 	.word	0xe000e100
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f1c3 0307 	rsb	r3, r3, #7
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf28      	it	cs
 8003da6:	2304      	movcs	r3, #4
 8003da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d902      	bls.n	8003db8 <NVIC_EncodePriority+0x30>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3b03      	subs	r3, #3
 8003db6:	e000      	b.n	8003dba <NVIC_EncodePriority+0x32>
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	401a      	ands	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43d9      	mvns	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	4313      	orrs	r3, r2
         );
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	; 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b07      	cmp	r3, #7
 8003dfc:	d00f      	beq.n	8003e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b06      	cmp	r3, #6
 8003e02:	d00c      	beq.n	8003e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d009      	beq.n	8003e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d006      	beq.n	8003e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d003      	beq.n	8003e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003e16:	2190      	movs	r1, #144	; 0x90
 8003e18:	4804      	ldr	r0, [pc, #16]	; (8003e2c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003e1a:	f7fe fb2e 	bl	800247a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff38 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	0800f294 	.word	0x0800f294

08003e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0f      	cmp	r3, #15
 8003e46:	d903      	bls.n	8003e50 <HAL_NVIC_SetPriority+0x20>
 8003e48:	21a8      	movs	r1, #168	; 0xa8
 8003e4a:	480e      	ldr	r0, [pc, #56]	; (8003e84 <HAL_NVIC_SetPriority+0x54>)
 8003e4c:	f7fe fb15 	bl	800247a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b0f      	cmp	r3, #15
 8003e54:	d903      	bls.n	8003e5e <HAL_NVIC_SetPriority+0x2e>
 8003e56:	21a9      	movs	r1, #169	; 0xa9
 8003e58:	480a      	ldr	r0, [pc, #40]	; (8003e84 <HAL_NVIC_SetPriority+0x54>)
 8003e5a:	f7fe fb0e 	bl	800247a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5e:	f7ff ff3d 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	6978      	ldr	r0, [r7, #20]
 8003e6a:	f7ff ff8d 	bl	8003d88 <NVIC_EncodePriority>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e74:	4611      	mov	r1, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff ff5c 	bl	8003d34 <__NVIC_SetPriority>
}
 8003e7c:	bf00      	nop
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	0800f294 	.word	0x0800f294

08003e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	da03      	bge.n	8003ea2 <HAL_NVIC_EnableIRQ+0x1a>
 8003e9a:	21bc      	movs	r1, #188	; 0xbc
 8003e9c:	4805      	ldr	r0, [pc, #20]	; (8003eb4 <HAL_NVIC_EnableIRQ+0x2c>)
 8003e9e:	f7fe faec 	bl	800247a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff ff26 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	0800f294 	.word	0x0800f294

08003eb8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e017      	b.n	8003efa <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a0d      	ldr	r2, [pc, #52]	; (8003f04 <HAL_CRC_Init+0x4c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <HAL_CRC_Init+0x24>
 8003ed4:	2168      	movs	r1, #104	; 0x68
 8003ed6:	480c      	ldr	r0, [pc, #48]	; (8003f08 <HAL_CRC_Init+0x50>)
 8003ed8:	f7fe facf 	bl	800247a <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	795b      	ldrb	r3, [r3, #5]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d105      	bne.n	8003ef2 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7fd fe43 	bl	8001b78 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40023000 	.word	0x40023000
 8003f08:	0800f30c 	.word	0x0800f30c

08003f0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f18:	f7ff f93a 	bl	8003190 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e203      	b.n	8004330 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a8b      	ldr	r2, [pc, #556]	; (800415c <HAL_DMA_Init+0x250>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d04e      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a8a      	ldr	r2, [pc, #552]	; (8004160 <HAL_DMA_Init+0x254>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d049      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a88      	ldr	r2, [pc, #544]	; (8004164 <HAL_DMA_Init+0x258>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d044      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a87      	ldr	r2, [pc, #540]	; (8004168 <HAL_DMA_Init+0x25c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d03f      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a85      	ldr	r2, [pc, #532]	; (800416c <HAL_DMA_Init+0x260>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d03a      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a84      	ldr	r2, [pc, #528]	; (8004170 <HAL_DMA_Init+0x264>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d035      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a82      	ldr	r2, [pc, #520]	; (8004174 <HAL_DMA_Init+0x268>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d030      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a81      	ldr	r2, [pc, #516]	; (8004178 <HAL_DMA_Init+0x26c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d02b      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a7f      	ldr	r2, [pc, #508]	; (800417c <HAL_DMA_Init+0x270>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d026      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a7e      	ldr	r2, [pc, #504]	; (8004180 <HAL_DMA_Init+0x274>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d021      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a7c      	ldr	r2, [pc, #496]	; (8004184 <HAL_DMA_Init+0x278>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01c      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7b      	ldr	r2, [pc, #492]	; (8004188 <HAL_DMA_Init+0x27c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d017      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a79      	ldr	r2, [pc, #484]	; (800418c <HAL_DMA_Init+0x280>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d012      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a78      	ldr	r2, [pc, #480]	; (8004190 <HAL_DMA_Init+0x284>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a76      	ldr	r2, [pc, #472]	; (8004194 <HAL_DMA_Init+0x288>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d008      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a75      	ldr	r2, [pc, #468]	; (8004198 <HAL_DMA_Init+0x28c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <HAL_DMA_Init+0xc4>
 8003fc8:	21b7      	movs	r1, #183	; 0xb7
 8003fca:	4874      	ldr	r0, [pc, #464]	; (800419c <HAL_DMA_Init+0x290>)
 8003fcc:	f7fe fa55 	bl	800247a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d026      	beq.n	8004026 <HAL_DMA_Init+0x11a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fe0:	d021      	beq.n	8004026 <HAL_DMA_Init+0x11a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fea:	d01c      	beq.n	8004026 <HAL_DMA_Init+0x11a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003ff4:	d017      	beq.n	8004026 <HAL_DMA_Init+0x11a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ffe:	d012      	beq.n	8004026 <HAL_DMA_Init+0x11a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004008:	d00d      	beq.n	8004026 <HAL_DMA_Init+0x11a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004012:	d008      	beq.n	8004026 <HAL_DMA_Init+0x11a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800401c:	d003      	beq.n	8004026 <HAL_DMA_Init+0x11a>
 800401e:	21b8      	movs	r1, #184	; 0xb8
 8004020:	485e      	ldr	r0, [pc, #376]	; (800419c <HAL_DMA_Init+0x290>)
 8004022:	f7fe fa2a 	bl	800247a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_DMA_Init+0x13a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	d007      	beq.n	8004046 <HAL_DMA_Init+0x13a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b80      	cmp	r3, #128	; 0x80
 800403c:	d003      	beq.n	8004046 <HAL_DMA_Init+0x13a>
 800403e:	21b9      	movs	r1, #185	; 0xb9
 8004040:	4856      	ldr	r0, [pc, #344]	; (800419c <HAL_DMA_Init+0x290>)
 8004042:	f7fe fa1a 	bl	800247a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800404e:	d007      	beq.n	8004060 <HAL_DMA_Init+0x154>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_DMA_Init+0x154>
 8004058:	21ba      	movs	r1, #186	; 0xba
 800405a:	4850      	ldr	r0, [pc, #320]	; (800419c <HAL_DMA_Init+0x290>)
 800405c:	f7fe fa0d 	bl	800247a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004068:	d007      	beq.n	800407a <HAL_DMA_Init+0x16e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_DMA_Init+0x16e>
 8004072:	21bb      	movs	r1, #187	; 0xbb
 8004074:	4849      	ldr	r0, [pc, #292]	; (800419c <HAL_DMA_Init+0x290>)
 8004076:	f7fe fa00 	bl	800247a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <HAL_DMA_Init+0x192>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	d008      	beq.n	800409e <HAL_DMA_Init+0x192>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004094:	d003      	beq.n	800409e <HAL_DMA_Init+0x192>
 8004096:	21bc      	movs	r1, #188	; 0xbc
 8004098:	4840      	ldr	r0, [pc, #256]	; (800419c <HAL_DMA_Init+0x290>)
 800409a:	f7fe f9ee 	bl	800247a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <HAL_DMA_Init+0x1b6>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ae:	d008      	beq.n	80040c2 <HAL_DMA_Init+0x1b6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b8:	d003      	beq.n	80040c2 <HAL_DMA_Init+0x1b6>
 80040ba:	21bd      	movs	r1, #189	; 0xbd
 80040bc:	4837      	ldr	r0, [pc, #220]	; (800419c <HAL_DMA_Init+0x290>)
 80040be:	f7fe f9dc 	bl	800247a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00c      	beq.n	80040e4 <HAL_DMA_Init+0x1d8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d2:	d007      	beq.n	80040e4 <HAL_DMA_Init+0x1d8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d003      	beq.n	80040e4 <HAL_DMA_Init+0x1d8>
 80040dc:	21be      	movs	r1, #190	; 0xbe
 80040de:	482f      	ldr	r0, [pc, #188]	; (800419c <HAL_DMA_Init+0x290>)
 80040e0:	f7fe f9cb 	bl	800247a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <HAL_DMA_Init+0x206>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d00d      	beq.n	8004112 <HAL_DMA_Init+0x206>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040fe:	d008      	beq.n	8004112 <HAL_DMA_Init+0x206>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004108:	d003      	beq.n	8004112 <HAL_DMA_Init+0x206>
 800410a:	21bf      	movs	r1, #191	; 0xbf
 800410c:	4823      	ldr	r0, [pc, #140]	; (800419c <HAL_DMA_Init+0x290>)
 800410e:	f7fe f9b4 	bl	800247a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_DMA_Init+0x21e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	2b04      	cmp	r3, #4
 8004120:	d003      	beq.n	800412a <HAL_DMA_Init+0x21e>
 8004122:	21c0      	movs	r1, #192	; 0xc0
 8004124:	481d      	ldr	r0, [pc, #116]	; (800419c <HAL_DMA_Init+0x290>)
 8004126:	f7fe f9a8 	bl	800247a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	2b00      	cmp	r3, #0
 8004130:	d064      	beq.n	80041fc <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	2b00      	cmp	r3, #0
 8004138:	d032      	beq.n	80041a0 <HAL_DMA_Init+0x294>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	2b01      	cmp	r3, #1
 8004140:	d02e      	beq.n	80041a0 <HAL_DMA_Init+0x294>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	2b02      	cmp	r3, #2
 8004148:	d02a      	beq.n	80041a0 <HAL_DMA_Init+0x294>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	2b03      	cmp	r3, #3
 8004150:	d026      	beq.n	80041a0 <HAL_DMA_Init+0x294>
 8004152:	21c5      	movs	r1, #197	; 0xc5
 8004154:	4811      	ldr	r0, [pc, #68]	; (800419c <HAL_DMA_Init+0x290>)
 8004156:	f7fe f990 	bl	800247a <assert_failed>
 800415a:	e021      	b.n	80041a0 <HAL_DMA_Init+0x294>
 800415c:	40026010 	.word	0x40026010
 8004160:	40026028 	.word	0x40026028
 8004164:	40026040 	.word	0x40026040
 8004168:	40026058 	.word	0x40026058
 800416c:	40026070 	.word	0x40026070
 8004170:	40026088 	.word	0x40026088
 8004174:	400260a0 	.word	0x400260a0
 8004178:	400260b8 	.word	0x400260b8
 800417c:	40026410 	.word	0x40026410
 8004180:	40026428 	.word	0x40026428
 8004184:	40026440 	.word	0x40026440
 8004188:	40026458 	.word	0x40026458
 800418c:	40026470 	.word	0x40026470
 8004190:	40026488 	.word	0x40026488
 8004194:	400264a0 	.word	0x400264a0
 8004198:	400264b8 	.word	0x400264b8
 800419c:	0800f380 	.word	0x0800f380
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d012      	beq.n	80041ce <HAL_DMA_Init+0x2c2>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041b0:	d00d      	beq.n	80041ce <HAL_DMA_Init+0x2c2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ba:	d008      	beq.n	80041ce <HAL_DMA_Init+0x2c2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041c4:	d003      	beq.n	80041ce <HAL_DMA_Init+0x2c2>
 80041c6:	21c6      	movs	r1, #198	; 0xc6
 80041c8:	485b      	ldr	r0, [pc, #364]	; (8004338 <HAL_DMA_Init+0x42c>)
 80041ca:	f7fe f956 	bl	800247a <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d012      	beq.n	80041fc <HAL_DMA_Init+0x2f0>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041de:	d00d      	beq.n	80041fc <HAL_DMA_Init+0x2f0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e8:	d008      	beq.n	80041fc <HAL_DMA_Init+0x2f0>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041f2:	d003      	beq.n	80041fc <HAL_DMA_Init+0x2f0>
 80041f4:	21c7      	movs	r1, #199	; 0xc7
 80041f6:	4850      	ldr	r0, [pc, #320]	; (8004338 <HAL_DMA_Init+0x42c>)
 80041f8:	f7fe f93f 	bl	800247a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800421c:	e00f      	b.n	800423e <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800421e:	f7fe ffb7 	bl	8003190 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b05      	cmp	r3, #5
 800422a:	d908      	bls.n	800423e <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2203      	movs	r2, #3
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e078      	b.n	8004330 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e8      	bne.n	800421e <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4b39      	ldr	r3, [pc, #228]	; (800433c <HAL_DMA_Init+0x430>)
 8004258:	4013      	ands	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800426a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2b04      	cmp	r3, #4
 8004296:	d107      	bne.n	80042a8 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	4313      	orrs	r3, r2
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0307 	bic.w	r3, r3, #7
 80042be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d117      	bne.n	8004302 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00e      	beq.n	8004302 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fa8b 	bl	8004800 <DMA_CheckFifoParam>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042fe:	2301      	movs	r3, #1
 8004300:	e016      	b.n	8004330 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fa42 	bl	8004794 <DMA_CalcBaseAndBitshift>
 8004310:	4603      	mov	r3, r0
 8004312:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	223f      	movs	r2, #63	; 0x3f
 800431a:	409a      	lsls	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	0800f380 	.word	0x0800f380
 800433c:	f010803f 	.word	0xf010803f

08004340 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800434e:	f7fe ff1f 	bl	8003190 <HAL_GetTick>
 8004352:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d008      	beq.n	8004372 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e052      	b.n	8004418 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0216 	bic.w	r2, r2, #22
 8004380:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004390:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <HAL_DMA_Abort+0x62>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0208 	bic.w	r2, r2, #8
 80043b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043c2:	e013      	b.n	80043ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043c4:	f7fe fee4 	bl	8003190 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d90c      	bls.n	80043ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2203      	movs	r2, #3
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e015      	b.n	8004418 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e4      	bne.n	80043c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fe:	223f      	movs	r2, #63	; 0x3f
 8004400:	409a      	lsls	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d004      	beq.n	800443e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e00c      	b.n	8004458 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2205      	movs	r2, #5
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004470:	4b8e      	ldr	r3, [pc, #568]	; (80046ac <HAL_DMA_IRQHandler+0x248>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a8e      	ldr	r2, [pc, #568]	; (80046b0 <HAL_DMA_IRQHandler+0x24c>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	0a9b      	lsrs	r3, r3, #10
 800447c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004482:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448e:	2208      	movs	r2, #8
 8004490:	409a      	lsls	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01a      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0204 	bic.w	r2, r2, #4
 80044b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	2208      	movs	r2, #8
 80044be:	409a      	lsls	r2, r3
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d4:	2201      	movs	r2, #1
 80044d6:	409a      	lsls	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d012      	beq.n	8004506 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f2:	2201      	movs	r2, #1
 80044f4:	409a      	lsls	r2, r3
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	f043 0202 	orr.w	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	2204      	movs	r2, #4
 800450c:	409a      	lsls	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d012      	beq.n	800453c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00b      	beq.n	800453c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004528:	2204      	movs	r2, #4
 800452a:	409a      	lsls	r2, r3
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f043 0204 	orr.w	r2, r3, #4
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	2210      	movs	r2, #16
 8004542:	409a      	lsls	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d043      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d03c      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	2210      	movs	r2, #16
 8004560:	409a      	lsls	r2, r3
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d018      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d108      	bne.n	8004594 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d024      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
 8004592:	e01f      	b.n	80045d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01b      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
 80045a4:	e016      	b.n	80045d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d107      	bne.n	80045c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0208 	bic.w	r2, r2, #8
 80045c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d8:	2220      	movs	r2, #32
 80045da:	409a      	lsls	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4013      	ands	r3, r2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 808f 	beq.w	8004704 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8087 	beq.w	8004704 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fa:	2220      	movs	r2, #32
 80045fc:	409a      	lsls	r2, r3
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b05      	cmp	r3, #5
 800460c:	d136      	bne.n	800467c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0216 	bic.w	r2, r2, #22
 800461c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800462c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <HAL_DMA_IRQHandler+0x1da>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0208 	bic.w	r2, r2, #8
 800464c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	223f      	movs	r2, #63	; 0x3f
 8004654:	409a      	lsls	r2, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466e:	2b00      	cmp	r3, #0
 8004670:	d07e      	beq.n	8004770 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
        }
        return;
 800467a:	e079      	b.n	8004770 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01d      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10d      	bne.n	80046b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469c:	2b00      	cmp	r3, #0
 800469e:	d031      	beq.n	8004704 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	4798      	blx	r3
 80046a8:	e02c      	b.n	8004704 <HAL_DMA_IRQHandler+0x2a0>
 80046aa:	bf00      	nop
 80046ac:	20000000 	.word	0x20000000
 80046b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d023      	beq.n	8004704 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	4798      	blx	r3
 80046c4:	e01e      	b.n	8004704 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10f      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0210 	bic.w	r2, r2, #16
 80046e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	2b00      	cmp	r3, #0
 800470a:	d032      	beq.n	8004772 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d022      	beq.n	800475e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2205      	movs	r2, #5
 800471c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	3301      	adds	r3, #1
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	429a      	cmp	r2, r3
 800473a:	d307      	bcc.n	800474c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f2      	bne.n	8004730 <HAL_DMA_IRQHandler+0x2cc>
 800474a:	e000      	b.n	800474e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800474c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
 800476e:	e000      	b.n	8004772 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004770:	bf00      	nop
    }
  }
}
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004786:	b2db      	uxtb	r3, r3
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	3b10      	subs	r3, #16
 80047a4:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <DMA_CalcBaseAndBitshift+0x64>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047ae:	4a13      	ldr	r2, [pc, #76]	; (80047fc <DMA_CalcBaseAndBitshift+0x68>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d909      	bls.n	80047d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047ca:	f023 0303 	bic.w	r3, r3, #3
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	659a      	str	r2, [r3, #88]	; 0x58
 80047d4:	e007      	b.n	80047e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	aaaaaaab 	.word	0xaaaaaaab
 80047fc:	0800fb60 	.word	0x0800fb60

08004800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d11f      	bne.n	800485a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d856      	bhi.n	80048ce <DMA_CheckFifoParam+0xce>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <DMA_CheckFifoParam+0x28>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	08004839 	.word	0x08004839
 800482c:	0800484b 	.word	0x0800484b
 8004830:	08004839 	.word	0x08004839
 8004834:	080048cf 	.word	0x080048cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d046      	beq.n	80048d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004848:	e043      	b.n	80048d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004852:	d140      	bne.n	80048d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004858:	e03d      	b.n	80048d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004862:	d121      	bne.n	80048a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d837      	bhi.n	80048da <DMA_CheckFifoParam+0xda>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <DMA_CheckFifoParam+0x70>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004881 	.word	0x08004881
 8004874:	08004887 	.word	0x08004887
 8004878:	08004881 	.word	0x08004881
 800487c:	08004899 	.word	0x08004899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      break;
 8004884:	e030      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d025      	beq.n	80048de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004896:	e022      	b.n	80048de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048a0:	d11f      	bne.n	80048e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048a6:	e01c      	b.n	80048e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d903      	bls.n	80048b6 <DMA_CheckFifoParam+0xb6>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d003      	beq.n	80048bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048b4:	e018      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
      break;
 80048ba:	e015      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00e      	beq.n	80048e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
      break;
 80048cc:	e00b      	b.n	80048e6 <DMA_CheckFifoParam+0xe6>
      break;
 80048ce:	bf00      	nop
 80048d0:	e00a      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;
 80048d2:	bf00      	nop
 80048d4:	e008      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;
 80048d6:	bf00      	nop
 80048d8:	e006      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;
 80048da:	bf00      	nop
 80048dc:	e004      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;
 80048e6:	bf00      	nop
    }
  } 
  
  return status; 
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop

080048f8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004902:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <HAL_FLASH_IRQHandler+0x138>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d020      	beq.n	8004950 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800490e:	4b49      	ldr	r3, [pc, #292]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d107      	bne.n	8004928 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8004918:	4b46      	ldr	r3, [pc, #280]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800491e:	4b45      	ldr	r3, [pc, #276]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 8004920:	f04f 32ff 	mov.w	r2, #4294967295
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	e00b      	b.n	8004940 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8004928:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d103      	bne.n	800493a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8004932:	4b40      	ldr	r3, [pc, #256]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	e002      	b.n	8004940 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800493a:	4b3e      	ldr	r3, [pc, #248]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8004940:	f000 f88e 	bl	8004a60 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f881 	bl	8004a4c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800494a:	4b3a      	ldr	r3, [pc, #232]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004950:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_FLASH_IRQHandler+0x138>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d04a      	beq.n	80049f2 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800495c:	4b34      	ldr	r3, [pc, #208]	; (8004a30 <HAL_FLASH_IRQHandler+0x138>)
 800495e:	2201      	movs	r2, #1
 8004960:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8004962:	4b34      	ldr	r3, [pc, #208]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d12d      	bne.n	80049c8 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800496c:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	3b01      	subs	r3, #1
 8004972:	4a30      	ldr	r2, [pc, #192]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 8004974:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8004976:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800497e:	4b2d      	ldr	r3, [pc, #180]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f857 	bl	8004a38 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800498a:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	4a28      	ldr	r2, [pc, #160]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 8004992:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800499a:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 800499c:	7a1b      	ldrb	r3, [r3, #8]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f8c2 	bl	8004b2c <FLASH_Erase_Sector>
 80049a8:	e023      	b.n	80049f2 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80049aa:	f04f 33ff 	mov.w	r3, #4294967295
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	4a20      	ldr	r2, [pc, #128]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80049b6:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80049bc:	f000 f92c 	bl	8004c18 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f839 	bl	8004a38 <HAL_FLASH_EndOfOperationCallback>
 80049c6:	e014      	b.n	80049f2 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80049c8:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d107      	bne.n	80049e2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80049d2:	f000 f921 	bl	8004c18 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80049d6:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f82c 	bl	8004a38 <HAL_FLASH_EndOfOperationCallback>
 80049e0:	e004      	b.n	80049ec <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f826 	bl	8004a38 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d114      	bne.n	8004a26 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_FLASH_IRQHandler+0x138>)
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <HAL_FLASH_IRQHandler+0x138>)
 8004a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a06:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_FLASH_IRQHandler+0x138>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <HAL_FLASH_IRQHandler+0x138>)
 8004a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a12:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_FLASH_IRQHandler+0x138>)
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <HAL_FLASH_IRQHandler+0x138>)
 8004a1a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004a20:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <HAL_FLASH_IRQHandler+0x13c>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	761a      	strb	r2, [r3, #24]
  }
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023c00 	.word	0x40023c00
 8004a34:	2000095c 	.word	0x2000095c

08004a38 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004a64:	4b2f      	ldr	r3, [pc, #188]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004a70:	4b2d      	ldr	r3, [pc, #180]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f043 0310 	orr.w	r3, r3, #16
 8004a78:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004a7a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004a7c:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004a7e:	2210      	movs	r2, #16
 8004a80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004a82:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004a8e:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f043 0308 	orr.w	r3, r3, #8
 8004a96:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004a98:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004a9a:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004aa0:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004aac:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004ab6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004ab8:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004aba:	2240      	movs	r2, #64	; 0x40
 8004abc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004abe:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004aca:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f043 0302 	orr.w	r3, r3, #2
 8004ad2:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004ad4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004ad8:	2280      	movs	r2, #128	; 0x80
 8004ada:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d009      	beq.n	8004afc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	4a0d      	ldr	r2, [pc, #52]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004af2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004afa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004b08:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f043 0320 	orr.w	r3, r3, #32
 8004b10:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <FLASH_SetErrorCode+0xc8>)
 8004b12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004b14:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <FLASH_SetErrorCode+0xc4>)
 8004b16:	2202      	movs	r2, #2
 8004b18:	60da      	str	r2, [r3, #12]
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	40023c00 	.word	0x40023c00
 8004b28:	2000095c 	.word	0x2000095c

08004b2c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d019      	beq.n	8004b76 <FLASH_Erase_Sector+0x4a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d016      	beq.n	8004b76 <FLASH_Erase_Sector+0x4a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d013      	beq.n	8004b76 <FLASH_Erase_Sector+0x4a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d010      	beq.n	8004b76 <FLASH_Erase_Sector+0x4a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d00d      	beq.n	8004b76 <FLASH_Erase_Sector+0x4a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b05      	cmp	r3, #5
 8004b5e:	d00a      	beq.n	8004b76 <FLASH_Erase_Sector+0x4a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d007      	beq.n	8004b76 <FLASH_Erase_Sector+0x4a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b07      	cmp	r3, #7
 8004b6a:	d004      	beq.n	8004b76 <FLASH_Erase_Sector+0x4a>
 8004b6c:	f240 31d9 	movw	r1, #985	; 0x3d9
 8004b70:	4827      	ldr	r0, [pc, #156]	; (8004c10 <FLASH_Erase_Sector+0xe4>)
 8004b72:	f7fd fc82 	bl	800247a <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <FLASH_Erase_Sector+0x6c>
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d00a      	beq.n	8004b98 <FLASH_Erase_Sector+0x6c>
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d007      	beq.n	8004b98 <FLASH_Erase_Sector+0x6c>
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d004      	beq.n	8004b98 <FLASH_Erase_Sector+0x6c>
 8004b8e:	f240 31da 	movw	r1, #986	; 0x3da
 8004b92:	481f      	ldr	r0, [pc, #124]	; (8004c10 <FLASH_Erase_Sector+0xe4>)
 8004b94:	f7fd fc71 	bl	800247a <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e010      	b.n	8004bc6 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d103      	bne.n	8004bb2 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e009      	b.n	8004bc6 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d103      	bne.n	8004bc0 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e002      	b.n	8004bc6 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004bc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bc6:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <FLASH_Erase_Sector+0xe8>)
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <FLASH_Erase_Sector+0xe8>)
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <FLASH_Erase_Sector+0xe8>)
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	490f      	ldr	r1, [pc, #60]	; (8004c14 <FLASH_Erase_Sector+0xe8>)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004bde:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <FLASH_Erase_Sector+0xe8>)
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <FLASH_Erase_Sector+0xe8>)
 8004be4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004be8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <FLASH_Erase_Sector+0xe8>)
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <FLASH_Erase_Sector+0xe8>)
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <FLASH_Erase_Sector+0xe8>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <FLASH_Erase_Sector+0xe8>)
 8004c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c06:	6113      	str	r3, [r2, #16]
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	0800f3f4 	.word	0x0800f3f4
 8004c14:	40023c00 	.word	0x40023c00

08004c18 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004c1c:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d017      	beq.n	8004c58 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c32:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c56:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d017      	beq.n	8004c94 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004c64:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a0d      	ldr	r2, [pc, #52]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c6e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a07      	ldr	r2, [pc, #28]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c86:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <FLASH_FlushCaches+0x88>)
 8004c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c92:	6013      	str	r3, [r2, #0]
  }
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40023c00 	.word	0x40023c00

08004ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a33      	ldr	r2, [pc, #204]	; (8004d8c <HAL_GPIO_Init+0xe8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d017      	beq.n	8004cf2 <HAL_GPIO_Init+0x4e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a32      	ldr	r2, [pc, #200]	; (8004d90 <HAL_GPIO_Init+0xec>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_GPIO_Init+0x4e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a31      	ldr	r2, [pc, #196]	; (8004d94 <HAL_GPIO_Init+0xf0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <HAL_GPIO_Init+0x4e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a30      	ldr	r2, [pc, #192]	; (8004d98 <HAL_GPIO_Init+0xf4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <HAL_GPIO_Init+0x4e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2f      	ldr	r2, [pc, #188]	; (8004d9c <HAL_GPIO_Init+0xf8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <HAL_GPIO_Init+0x4e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2e      	ldr	r2, [pc, #184]	; (8004da0 <HAL_GPIO_Init+0xfc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <HAL_GPIO_Init+0x4e>
 8004cea:	21ac      	movs	r1, #172	; 0xac
 8004cec:	482d      	ldr	r0, [pc, #180]	; (8004da4 <HAL_GPIO_Init+0x100>)
 8004cee:	f7fd fbc4 	bl	800247a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_GPIO_Init+0x64>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_GPIO_Init+0x6c>
 8004d08:	21ad      	movs	r1, #173	; 0xad
 8004d0a:	4826      	ldr	r0, [pc, #152]	; (8004da4 <HAL_GPIO_Init+0x100>)
 8004d0c:	f7fd fbb5 	bl	800247a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d035      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d031      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b11      	cmp	r3, #17
 8004d26:	d02d      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d029      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b12      	cmp	r3, #18
 8004d36:	d025      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004d40:	d020      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004d4a:	d01b      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004d54:	d016      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004d5e:	d011      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004d68:	d00c      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004d72:	d007      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d003      	beq.n	8004d84 <HAL_GPIO_Init+0xe0>
 8004d7c:	21ae      	movs	r1, #174	; 0xae
 8004d7e:	4809      	ldr	r0, [pc, #36]	; (8004da4 <HAL_GPIO_Init+0x100>)
 8004d80:	f7fd fb7b 	bl	800247a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e20c      	b.n	80051a4 <HAL_GPIO_Init+0x500>
 8004d8a:	bf00      	nop
 8004d8c:	40020000 	.word	0x40020000
 8004d90:	40020400 	.word	0x40020400
 8004d94:	40020800 	.word	0x40020800
 8004d98:	40020c00 	.word	0x40020c00
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40021c00 	.word	0x40021c00
 8004da4:	0800f46c 	.word	0x0800f46c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004da8:	2201      	movs	r2, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4013      	ands	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	f040 81ec 	bne.w	800519e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d005      	beq.n	8004dde <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d144      	bne.n	8004e68 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00f      	beq.n	8004e06 <HAL_GPIO_Init+0x162>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d00b      	beq.n	8004e06 <HAL_GPIO_Init+0x162>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d007      	beq.n	8004e06 <HAL_GPIO_Init+0x162>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d003      	beq.n	8004e06 <HAL_GPIO_Init+0x162>
 8004dfe:	21c0      	movs	r1, #192	; 0xc0
 8004e00:	4884      	ldr	r0, [pc, #528]	; (8005014 <HAL_GPIO_Init+0x370>)
 8004e02:	f7fd fb3a 	bl	800247a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	2203      	movs	r2, #3
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	43db      	mvns	r3, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f003 0201 	and.w	r2, r3, #1
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d027      	beq.n	8004ec4 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_GPIO_Init+0x1f0>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d007      	beq.n	8004e94 <HAL_GPIO_Init+0x1f0>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d003      	beq.n	8004e94 <HAL_GPIO_Init+0x1f0>
 8004e8c:	21d1      	movs	r1, #209	; 0xd1
 8004e8e:	4861      	ldr	r0, [pc, #388]	; (8005014 <HAL_GPIO_Init+0x370>)
 8004e90:	f7fd faf3 	bl	800247a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	f040 80a3 	bne.w	8005018 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d077      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b09      	cmp	r3, #9
 8004ee0:	d073      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d06f      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d06b      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d067      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d063      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d05f      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d05b      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d057      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d053      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d04f      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d04b      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d047      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d043      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b05      	cmp	r3, #5
 8004f48:	d03f      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	d03b      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b05      	cmp	r3, #5
 8004f58:	d037      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d033      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b06      	cmp	r3, #6
 8004f68:	d02f      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b05      	cmp	r3, #5
 8004f70:	d02b      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	d027      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b07      	cmp	r3, #7
 8004f80:	d023      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b07      	cmp	r3, #7
 8004f88:	d01f      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b07      	cmp	r3, #7
 8004f90:	d01b      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d017      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b0a      	cmp	r3, #10
 8004fa0:	d013      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b09      	cmp	r3, #9
 8004fa8:	d00f      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b09      	cmp	r3, #9
 8004fb0:	d00b      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d007      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b0f      	cmp	r3, #15
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x326>
 8004fc2:	21de      	movs	r1, #222	; 0xde
 8004fc4:	4813      	ldr	r0, [pc, #76]	; (8005014 <HAL_GPIO_Init+0x370>)
 8004fc6:	f7fd fa58 	bl	800247a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	08da      	lsrs	r2, r3, #3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3208      	adds	r2, #8
 8004fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	220f      	movs	r2, #15
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	08da      	lsrs	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3208      	adds	r2, #8
 800500c:	69b9      	ldr	r1, [r7, #24]
 800500e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005012:	e001      	b.n	8005018 <HAL_GPIO_Init+0x374>
 8005014:	0800f46c 	.word	0x0800f46c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	2203      	movs	r2, #3
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f003 0203 	and.w	r2, r3, #3
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4313      	orrs	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80a2 	beq.w	800519e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	4b56      	ldr	r3, [pc, #344]	; (80051b8 <HAL_GPIO_Init+0x514>)
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	4a55      	ldr	r2, [pc, #340]	; (80051b8 <HAL_GPIO_Init+0x514>)
 8005064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005068:	6453      	str	r3, [r2, #68]	; 0x44
 800506a:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <HAL_GPIO_Init+0x514>)
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005076:	4a51      	ldr	r2, [pc, #324]	; (80051bc <HAL_GPIO_Init+0x518>)
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	089b      	lsrs	r3, r3, #2
 800507c:	3302      	adds	r3, #2
 800507e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	220f      	movs	r2, #15
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43db      	mvns	r3, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4013      	ands	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a48      	ldr	r2, [pc, #288]	; (80051c0 <HAL_GPIO_Init+0x51c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d019      	beq.n	80050d6 <HAL_GPIO_Init+0x432>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a47      	ldr	r2, [pc, #284]	; (80051c4 <HAL_GPIO_Init+0x520>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_GPIO_Init+0x42e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a46      	ldr	r2, [pc, #280]	; (80051c8 <HAL_GPIO_Init+0x524>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00d      	beq.n	80050ce <HAL_GPIO_Init+0x42a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a45      	ldr	r2, [pc, #276]	; (80051cc <HAL_GPIO_Init+0x528>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d007      	beq.n	80050ca <HAL_GPIO_Init+0x426>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a44      	ldr	r2, [pc, #272]	; (80051d0 <HAL_GPIO_Init+0x52c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d101      	bne.n	80050c6 <HAL_GPIO_Init+0x422>
 80050c2:	2304      	movs	r3, #4
 80050c4:	e008      	b.n	80050d8 <HAL_GPIO_Init+0x434>
 80050c6:	2307      	movs	r3, #7
 80050c8:	e006      	b.n	80050d8 <HAL_GPIO_Init+0x434>
 80050ca:	2303      	movs	r3, #3
 80050cc:	e004      	b.n	80050d8 <HAL_GPIO_Init+0x434>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e002      	b.n	80050d8 <HAL_GPIO_Init+0x434>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <HAL_GPIO_Init+0x434>
 80050d6:	2300      	movs	r3, #0
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	f002 0203 	and.w	r2, r2, #3
 80050de:	0092      	lsls	r2, r2, #2
 80050e0:	4093      	lsls	r3, r2
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050e8:	4934      	ldr	r1, [pc, #208]	; (80051bc <HAL_GPIO_Init+0x518>)
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	089b      	lsrs	r3, r3, #2
 80050ee:	3302      	adds	r3, #2
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050f6:	4b37      	ldr	r3, [pc, #220]	; (80051d4 <HAL_GPIO_Init+0x530>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	43db      	mvns	r3, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4013      	ands	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800511a:	4a2e      	ldr	r2, [pc, #184]	; (80051d4 <HAL_GPIO_Init+0x530>)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005120:	4b2c      	ldr	r3, [pc, #176]	; (80051d4 <HAL_GPIO_Init+0x530>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	43db      	mvns	r3, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4013      	ands	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005144:	4a23      	ldr	r2, [pc, #140]	; (80051d4 <HAL_GPIO_Init+0x530>)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800514a:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <HAL_GPIO_Init+0x530>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800516e:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <HAL_GPIO_Init+0x530>)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005174:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <HAL_GPIO_Init+0x530>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005198:	4a0e      	ldr	r2, [pc, #56]	; (80051d4 <HAL_GPIO_Init+0x530>)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	3301      	adds	r3, #1
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b0f      	cmp	r3, #15
 80051a8:	f67f adfe 	bls.w	8004da8 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40013800 	.word	0x40013800
 80051c0:	40020000 	.word	0x40020000
 80051c4:	40020400 	.word	0x40020400
 80051c8:	40020800 	.word	0x40020800
 80051cc:	40020c00 	.word	0x40020c00
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40013c00 	.word	0x40013c00

080051d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80051e4:	887b      	ldrh	r3, [r7, #2]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d004      	beq.n	80051f4 <HAL_GPIO_ReadPin+0x1c>
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <HAL_GPIO_ReadPin+0x26>
 80051f4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80051f8:	4809      	ldr	r0, [pc, #36]	; (8005220 <HAL_GPIO_ReadPin+0x48>)
 80051fa:	f7fd f93e 	bl	800247a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800520a:	2301      	movs	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
 800520e:	e001      	b.n	8005214 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	0800f46c 	.word	0x0800f46c

08005224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	807b      	strh	r3, [r7, #2]
 8005230:	4613      	mov	r3, r2
 8005232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005234:	887b      	ldrh	r3, [r7, #2]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <HAL_GPIO_WritePin+0x20>
 800523a:	887b      	ldrh	r3, [r7, #2]
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	041b      	lsls	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d004      	beq.n	800524e <HAL_GPIO_WritePin+0x2a>
 8005244:	f240 119d 	movw	r1, #413	; 0x19d
 8005248:	480e      	ldr	r0, [pc, #56]	; (8005284 <HAL_GPIO_WritePin+0x60>)
 800524a:	f7fd f916 	bl	800247a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800524e:	787b      	ldrb	r3, [r7, #1]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_GPIO_WritePin+0x40>
 8005254:	787b      	ldrb	r3, [r7, #1]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d004      	beq.n	8005264 <HAL_GPIO_WritePin+0x40>
 800525a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800525e:	4809      	ldr	r0, [pc, #36]	; (8005284 <HAL_GPIO_WritePin+0x60>)
 8005260:	f7fd f90b 	bl	800247a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005264:	787b      	ldrb	r3, [r7, #1]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800526a:	887a      	ldrh	r2, [r7, #2]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005270:	e003      	b.n	800527a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005272:	887b      	ldrh	r3, [r7, #2]
 8005274:	041a      	lsls	r2, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	619a      	str	r2, [r3, #24]
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	0800f46c 	.word	0x0800f46c

08005288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e1f7      	b.n	800568a <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a81      	ldr	r2, [pc, #516]	; (80054a4 <HAL_I2C_Init+0x21c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_I2C_Init+0x3a>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a7f      	ldr	r2, [pc, #508]	; (80054a8 <HAL_I2C_Init+0x220>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_I2C_Init+0x3a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a7e      	ldr	r2, [pc, #504]	; (80054ac <HAL_I2C_Init+0x224>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_I2C_Init+0x3a>
 80052b8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80052bc:	487c      	ldr	r0, [pc, #496]	; (80054b0 <HAL_I2C_Init+0x228>)
 80052be:	f7fd f8dc 	bl	800247a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d004      	beq.n	80052d4 <HAL_I2C_Init+0x4c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4a79      	ldr	r2, [pc, #484]	; (80054b4 <HAL_I2C_Init+0x22c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d904      	bls.n	80052de <HAL_I2C_Init+0x56>
 80052d4:	f240 11bf 	movw	r1, #447	; 0x1bf
 80052d8:	4875      	ldr	r0, [pc, #468]	; (80054b0 <HAL_I2C_Init+0x228>)
 80052da:	f7fd f8ce 	bl	800247a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <HAL_I2C_Init+0x72>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ee:	d004      	beq.n	80052fa <HAL_I2C_Init+0x72>
 80052f0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80052f4:	486e      	ldr	r0, [pc, #440]	; (80054b0 <HAL_I2C_Init+0x228>)
 80052f6:	f7fd f8c0 	bl	800247a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005302:	f023 0303 	bic.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <HAL_I2C_Init+0x8c>
 800530a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800530e:	4868      	ldr	r0, [pc, #416]	; (80054b0 <HAL_I2C_Init+0x228>)
 8005310:	f7fd f8b3 	bl	800247a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800531c:	d009      	beq.n	8005332 <HAL_I2C_Init+0xaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005326:	d004      	beq.n	8005332 <HAL_I2C_Init+0xaa>
 8005328:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800532c:	4860      	ldr	r0, [pc, #384]	; (80054b0 <HAL_I2C_Init+0x228>)
 800532e:	f7fd f8a4 	bl	800247a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d008      	beq.n	800534c <HAL_I2C_Init+0xc4>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d004      	beq.n	800534c <HAL_I2C_Init+0xc4>
 8005342:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005346:	485a      	ldr	r0, [pc, #360]	; (80054b0 <HAL_I2C_Init+0x228>)
 8005348:	f7fd f897 	bl	800247a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <HAL_I2C_Init+0xda>
 8005358:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800535c:	4854      	ldr	r0, [pc, #336]	; (80054b0 <HAL_I2C_Init+0x228>)
 800535e:	f7fd f88c 	bl	800247a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HAL_I2C_Init+0xf4>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d004      	beq.n	800537c <HAL_I2C_Init+0xf4>
 8005372:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005376:	484e      	ldr	r0, [pc, #312]	; (80054b0 <HAL_I2C_Init+0x228>)
 8005378:	f7fd f87f 	bl	800247a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_I2C_Init+0x10e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d004      	beq.n	8005396 <HAL_I2C_Init+0x10e>
 800538c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005390:	4847      	ldr	r0, [pc, #284]	; (80054b0 <HAL_I2C_Init+0x228>)
 8005392:	f7fd f872 	bl	800247a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d12c      	bne.n	80053fc <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a42      	ldr	r2, [pc, #264]	; (80054b8 <HAL_I2C_Init+0x230>)
 80053ae:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a42      	ldr	r2, [pc, #264]	; (80054bc <HAL_I2C_Init+0x234>)
 80053b4:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a41      	ldr	r2, [pc, #260]	; (80054c0 <HAL_I2C_Init+0x238>)
 80053ba:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a41      	ldr	r2, [pc, #260]	; (80054c4 <HAL_I2C_Init+0x23c>)
 80053c0:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a40      	ldr	r2, [pc, #256]	; (80054c8 <HAL_I2C_Init+0x240>)
 80053c6:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a40      	ldr	r2, [pc, #256]	; (80054cc <HAL_I2C_Init+0x244>)
 80053cc:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a3f      	ldr	r2, [pc, #252]	; (80054d0 <HAL_I2C_Init+0x248>)
 80053d2:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a3f      	ldr	r2, [pc, #252]	; (80054d4 <HAL_I2C_Init+0x24c>)
 80053d8:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a3e      	ldr	r2, [pc, #248]	; (80054d8 <HAL_I2C_Init+0x250>)
 80053de:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a3e      	ldr	r2, [pc, #248]	; (80054dc <HAL_I2C_Init+0x254>)
 80053e4:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d102      	bne.n	80053f4 <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a3b      	ldr	r2, [pc, #236]	; (80054e0 <HAL_I2C_Init+0x258>)
 80053f2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005422:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005432:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005434:	f002 fc0a 	bl	8007c4c <HAL_RCC_GetPCLK1Freq>
 8005438:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4a29      	ldr	r2, [pc, #164]	; (80054e4 <HAL_I2C_Init+0x25c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d807      	bhi.n	8005454 <HAL_I2C_Init+0x1cc>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4a28      	ldr	r2, [pc, #160]	; (80054e8 <HAL_I2C_Init+0x260>)
 8005448:	4293      	cmp	r3, r2
 800544a:	bf94      	ite	ls
 800544c:	2301      	movls	r3, #1
 800544e:	2300      	movhi	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e006      	b.n	8005462 <HAL_I2C_Init+0x1da>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4a25      	ldr	r2, [pc, #148]	; (80054ec <HAL_I2C_Init+0x264>)
 8005458:	4293      	cmp	r3, r2
 800545a:	bf94      	ite	ls
 800545c:	2301      	movls	r3, #1
 800545e:	2300      	movhi	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e10f      	b.n	800568a <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a20      	ldr	r2, [pc, #128]	; (80054f0 <HAL_I2C_Init+0x268>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	0c9b      	lsrs	r3, r3, #18
 8005474:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <HAL_I2C_Init+0x25c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d82a      	bhi.n	80054f4 <HAL_I2C_Init+0x26c>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	3301      	adds	r3, #1
 80054a2:	e031      	b.n	8005508 <HAL_I2C_Init+0x280>
 80054a4:	40005400 	.word	0x40005400
 80054a8:	40005800 	.word	0x40005800
 80054ac:	40005c00 	.word	0x40005c00
 80054b0:	0800f4e0 	.word	0x0800f4e0
 80054b4:	00061a80 	.word	0x00061a80
 80054b8:	08005acd 	.word	0x08005acd
 80054bc:	08005ae1 	.word	0x08005ae1
 80054c0:	08005af5 	.word	0x08005af5
 80054c4:	08005b09 	.word	0x08005b09
 80054c8:	08005b39 	.word	0x08005b39
 80054cc:	08005b4d 	.word	0x08005b4d
 80054d0:	08005b61 	.word	0x08005b61
 80054d4:	08005b75 	.word	0x08005b75
 80054d8:	08005b89 	.word	0x08005b89
 80054dc:	08005b1d 	.word	0x08005b1d
 80054e0:	0800216d 	.word	0x0800216d
 80054e4:	000186a0 	.word	0x000186a0
 80054e8:	001e847f 	.word	0x001e847f
 80054ec:	003d08ff 	.word	0x003d08ff
 80054f0:	431bde83 	.word	0x431bde83
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054fa:	fb02 f303 	mul.w	r3, r2, r3
 80054fe:	4a65      	ldr	r2, [pc, #404]	; (8005694 <HAL_I2C_Init+0x40c>)
 8005500:	fba2 2303 	umull	r2, r3, r2, r3
 8005504:	099b      	lsrs	r3, r3, #6
 8005506:	3301      	adds	r3, #1
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	430b      	orrs	r3, r1
 800550e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800551a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	495d      	ldr	r1, [pc, #372]	; (8005698 <HAL_I2C_Init+0x410>)
 8005524:	428b      	cmp	r3, r1
 8005526:	d819      	bhi.n	800555c <HAL_I2C_Init+0x2d4>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	1e59      	subs	r1, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	fbb1 f3f3 	udiv	r3, r1, r3
 8005536:	1c59      	adds	r1, r3, #1
 8005538:	f640 73fc 	movw	r3, #4092	; 0xffc
 800553c:	400b      	ands	r3, r1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <HAL_I2C_Init+0x2d0>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1e59      	subs	r1, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005550:	3301      	adds	r3, #1
 8005552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005556:	e051      	b.n	80055fc <HAL_I2C_Init+0x374>
 8005558:	2304      	movs	r3, #4
 800555a:	e04f      	b.n	80055fc <HAL_I2C_Init+0x374>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d111      	bne.n	8005588 <HAL_I2C_Init+0x300>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1e58      	subs	r0, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	440b      	add	r3, r1
 8005572:	fbb0 f3f3 	udiv	r3, r0, r3
 8005576:	3301      	adds	r3, #1
 8005578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf0c      	ite	eq
 8005580:	2301      	moveq	r3, #1
 8005582:	2300      	movne	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e012      	b.n	80055ae <HAL_I2C_Init+0x326>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	1e58      	subs	r0, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6859      	ldr	r1, [r3, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	0099      	lsls	r1, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	fbb0 f3f3 	udiv	r3, r0, r3
 800559e:	3301      	adds	r3, #1
 80055a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_I2C_Init+0x32e>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e022      	b.n	80055fc <HAL_I2C_Init+0x374>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10e      	bne.n	80055dc <HAL_I2C_Init+0x354>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1e58      	subs	r0, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6859      	ldr	r1, [r3, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	440b      	add	r3, r1
 80055cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80055d0:	3301      	adds	r3, #1
 80055d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055da:	e00f      	b.n	80055fc <HAL_I2C_Init+0x374>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	1e58      	subs	r0, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6859      	ldr	r1, [r3, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	0099      	lsls	r1, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f2:	3301      	adds	r3, #1
 80055f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	6809      	ldr	r1, [r1, #0]
 8005600:	4313      	orrs	r3, r2
 8005602:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69da      	ldr	r2, [r3, #28]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800562a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6911      	ldr	r1, [r2, #16]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68d2      	ldr	r2, [r2, #12]
 8005636:	4311      	orrs	r1, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	430b      	orrs	r3, r1
 800563e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	10624dd3 	.word	0x10624dd3
 8005698:	000186a0 	.word	0x000186a0

0800569c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d003      	beq.n	80056d4 <HAL_I2C_EV_IRQHandler+0x38>
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	f040 80c1 	bne.w	8005856 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10d      	bne.n	800570a <HAL_I2C_EV_IRQHandler+0x6e>
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80056f4:	d003      	beq.n	80056fe <HAL_I2C_EV_IRQHandler+0x62>
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80056fc:	d101      	bne.n	8005702 <HAL_I2C_EV_IRQHandler+0x66>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <HAL_I2C_EV_IRQHandler+0x68>
 8005702:	2300      	movs	r3, #0
 8005704:	2b01      	cmp	r3, #1
 8005706:	f000 8132 	beq.w	800596e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00c      	beq.n	800572e <HAL_I2C_EV_IRQHandler+0x92>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	0a5b      	lsrs	r3, r3, #9
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d006      	beq.n	800572e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 fc95 	bl	8007050 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fd8f 	bl	800624a <I2C_Master_SB>
 800572c:	e092      	b.n	8005854 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	08db      	lsrs	r3, r3, #3
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <HAL_I2C_EV_IRQHandler+0xb2>
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	0a5b      	lsrs	r3, r3, #9
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fe05 	bl	8006356 <I2C_Master_ADD10>
 800574c:	e082      	b.n	8005854 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <HAL_I2C_EV_IRQHandler+0xd2>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	0a5b      	lsrs	r3, r3, #9
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fe1f 	bl	80063aa <I2C_Master_ADDR>
 800576c:	e072      	b.n	8005854 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	089b      	lsrs	r3, r3, #2
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d03b      	beq.n	80057f2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005788:	f000 80f3 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	09db      	lsrs	r3, r3, #7
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00f      	beq.n	80057b8 <HAL_I2C_EV_IRQHandler+0x11c>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	0a9b      	lsrs	r3, r3, #10
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <HAL_I2C_EV_IRQHandler+0x11c>
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	089b      	lsrs	r3, r3, #2
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d103      	bne.n	80057b8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f9f3 	bl	8005b9c <I2C_MasterTransmit_TXE>
 80057b6:	e04d      	b.n	8005854 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80d6 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	0a5b      	lsrs	r3, r3, #9
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80cf 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	2b21      	cmp	r3, #33	; 0x21
 80057d8:	d103      	bne.n	80057e2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa7d 	bl	8005cda <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057e0:	e0c7      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	f040 80c4 	bne.w	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 faee 	bl	8005dcc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057f0:	e0bf      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005800:	f000 80b7 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	099b      	lsrs	r3, r3, #6
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00f      	beq.n	8005830 <HAL_I2C_EV_IRQHandler+0x194>
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	0a9b      	lsrs	r3, r3, #10
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <HAL_I2C_EV_IRQHandler+0x194>
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	089b      	lsrs	r3, r3, #2
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fb64 	bl	8005ef6 <I2C_MasterReceive_RXNE>
 800582e:	e011      	b.n	8005854 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 809a 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	0a5b      	lsrs	r3, r3, #9
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8093 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fc10 	bl	8006072 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005852:	e08e      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005854:	e08d      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d004      	beq.n	8005868 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e007      	b.n	8005878 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	085b      	lsrs	r3, r3, #1
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d012      	beq.n	80058aa <HAL_I2C_EV_IRQHandler+0x20e>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	0a5b      	lsrs	r3, r3, #9
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00c      	beq.n	80058aa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80058a0:	69b9      	ldr	r1, [r7, #24]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 ffd2 	bl	800684c <I2C_Slave_ADDR>
 80058a8:	e066      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	091b      	lsrs	r3, r3, #4
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_I2C_EV_IRQHandler+0x22e>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	0a5b      	lsrs	r3, r3, #9
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 f80c 	bl	80068e0 <I2C_Slave_STOPF>
 80058c8:	e056      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058ca:	7bbb      	ldrb	r3, [r7, #14]
 80058cc:	2b21      	cmp	r3, #33	; 0x21
 80058ce:	d002      	beq.n	80058d6 <HAL_I2C_EV_IRQHandler+0x23a>
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	2b29      	cmp	r3, #41	; 0x29
 80058d4:	d125      	bne.n	8005922 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	09db      	lsrs	r3, r3, #7
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00f      	beq.n	8005902 <HAL_I2C_EV_IRQHandler+0x266>
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	0a9b      	lsrs	r3, r3, #10
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <HAL_I2C_EV_IRQHandler+0x266>
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	089b      	lsrs	r3, r3, #2
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fee6 	bl	80066cc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005900:	e039      	b.n	8005976 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	089b      	lsrs	r3, r3, #2
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d033      	beq.n	8005976 <HAL_I2C_EV_IRQHandler+0x2da>
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	0a5b      	lsrs	r3, r3, #9
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d02d      	beq.n	8005976 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 ff14 	bl	8006748 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005920:	e029      	b.n	8005976 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	099b      	lsrs	r3, r3, #6
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00f      	beq.n	800594e <HAL_I2C_EV_IRQHandler+0x2b2>
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	0a9b      	lsrs	r3, r3, #10
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_I2C_EV_IRQHandler+0x2b2>
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	089b      	lsrs	r3, r3, #2
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 ff1f 	bl	800678a <I2C_SlaveReceive_RXNE>
 800594c:	e014      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	089b      	lsrs	r3, r3, #2
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00e      	beq.n	8005978 <HAL_I2C_EV_IRQHandler+0x2dc>
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	0a5b      	lsrs	r3, r3, #9
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 ff4e 	bl	8006808 <I2C_SlaveReceive_BTF>
 800596c:	e004      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800596e:	bf00      	nop
 8005970:	e002      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005976:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005978:	3720      	adds	r7, #32
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b08a      	sub	sp, #40	; 0x28
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005996:	2300      	movs	r3, #0
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059a0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00e      	beq.n	80059cc <HAL_I2C_ER_IRQHandler+0x4e>
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	0a1b      	lsrs	r3, r3, #8
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d008      	beq.n	80059cc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	0a5b      	lsrs	r3, r3, #9
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00e      	beq.n	80059f6 <HAL_I2C_ER_IRQHandler+0x78>
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	0a1b      	lsrs	r3, r3, #8
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	f043 0302 	orr.w	r3, r3, #2
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80059f4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	0a9b      	lsrs	r3, r3, #10
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d03f      	beq.n	8005a82 <HAL_I2C_ER_IRQHandler+0x104>
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d039      	beq.n	8005a82 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005a0e:	7efb      	ldrb	r3, [r7, #27]
 8005a10:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005a28:	7ebb      	ldrb	r3, [r7, #26]
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d112      	bne.n	8005a54 <HAL_I2C_ER_IRQHandler+0xd6>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10f      	bne.n	8005a54 <HAL_I2C_ER_IRQHandler+0xd6>
 8005a34:	7cfb      	ldrb	r3, [r7, #19]
 8005a36:	2b21      	cmp	r3, #33	; 0x21
 8005a38:	d008      	beq.n	8005a4c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005a3a:	7cfb      	ldrb	r3, [r7, #19]
 8005a3c:	2b29      	cmp	r3, #41	; 0x29
 8005a3e:	d005      	beq.n	8005a4c <HAL_I2C_ER_IRQHandler+0xce>
 8005a40:	7cfb      	ldrb	r3, [r7, #19]
 8005a42:	2b28      	cmp	r3, #40	; 0x28
 8005a44:	d106      	bne.n	8005a54 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b21      	cmp	r3, #33	; 0x21
 8005a4a:	d103      	bne.n	8005a54 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 f87b 	bl	8006b48 <I2C_Slave_AF>
 8005a52:	e016      	b.n	8005a82 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a5c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f043 0304 	orr.w	r3, r3, #4
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a66:	7efb      	ldrb	r3, [r7, #27]
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d002      	beq.n	8005a72 <HAL_I2C_ER_IRQHandler+0xf4>
 8005a6c:	7efb      	ldrb	r3, [r7, #27]
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d107      	bne.n	8005a82 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a80:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	0adb      	lsrs	r3, r3, #11
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00e      	beq.n	8005aac <HAL_I2C_ER_IRQHandler+0x12e>
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d008      	beq.n	8005aac <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	f043 0308 	orr.w	r3, r3, #8
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005aaa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d008      	beq.n	8005ac4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f001 f8b4 	bl	8006c2c <I2C_ITError>
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	3728      	adds	r7, #40	; 0x28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005baa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d153      	bne.n	8005c6a <I2C_MasterTransmit_TXE+0xce>
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b21      	cmp	r3, #33	; 0x21
 8005bc6:	d150      	bne.n	8005c6a <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d01e      	beq.n	8005c0c <I2C_MasterTransmit_TXE+0x70>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d01b      	beq.n	8005c0c <I2C_MasterTransmit_TXE+0x70>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bda:	d017      	beq.n	8005c0c <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2211      	movs	r2, #17
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c0a:	e062      	b.n	8005cd2 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c1a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c2a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d108      	bne.n	8005c58 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c56:	e03c      	b.n	8005cd2 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c68:	e033      	b.n	8005cd2 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	2b21      	cmp	r3, #33	; 0x21
 8005c6e:	d005      	beq.n	8005c7c <I2C_MasterTransmit_TXE+0xe0>
 8005c70:	7bbb      	ldrb	r3, [r7, #14]
 8005c72:	2b40      	cmp	r3, #64	; 0x40
 8005c74:	d12d      	bne.n	8005cd2 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	2b22      	cmp	r3, #34	; 0x22
 8005c7a:	d12a      	bne.n	8005cd2 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c94:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c96:	e01c      	b.n	8005cd2 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d103      	bne.n	8005cac <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f891 	bl	8005dcc <I2C_MemoryTransmit_TXE_BTF>
}
 8005caa:	e012      	b.n	8005cd2 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	781a      	ldrb	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cd0:	e7ff      	b.n	8005cd2 <I2C_MasterTransmit_TXE+0x136>
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b21      	cmp	r3, #33	; 0x21
 8005cf2:	d167      	bne.n	8005dc4 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d012      	beq.n	8005d24 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	781a      	ldrb	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005d22:	e04f      	b.n	8005dc4 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d01e      	beq.n	8005d68 <I2C_MasterTransmit_BTF+0x8e>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d01b      	beq.n	8005d68 <I2C_MasterTransmit_BTF+0x8e>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d36:	d017      	beq.n	8005d68 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d46:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2211      	movs	r2, #17
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	4798      	blx	r3
}
 8005d66:	e02d      	b.n	8005dc4 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d76:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d86:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d108      	bne.n	8005db4 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
}
 8005db2:	e007      	b.n	8005dc4 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11d      	bne.n	8005e20 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d10b      	bne.n	8005e04 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	1c9a      	adds	r2, r3, #2
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005e02:	e074      	b.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	121b      	asrs	r3, r3, #8
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e1e:	e066      	b.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10b      	bne.n	8005e40 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e3e:	e056      	b.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d152      	bne.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b22      	cmp	r3, #34	; 0x22
 8005e4c:	d10d      	bne.n	8005e6a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e68:	e041      	b.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d015      	beq.n	8005ea0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b21      	cmp	r3, #33	; 0x21
 8005e78:	d112      	bne.n	8005ea0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	781a      	ldrb	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e9e:	e026      	b.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d121      	bne.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x122>
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	2b21      	cmp	r3, #33	; 0x21
 8005eae:	d11e      	bne.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ebe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ece:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b22      	cmp	r3, #34	; 0x22
 8005f08:	f040 80af 	bne.w	800606a <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d921      	bls.n	8005f5e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	f040 808f 	bne.w	800606a <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005f5c:	e085      	b.n	800606a <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d078      	beq.n	8006058 <I2C_MasterReceive_RXNE+0x162>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d002      	beq.n	8005f72 <I2C_MasterReceive_RXNE+0x7c>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d172      	bne.n	8006058 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 f83a 	bl	8006fec <I2C_WaitOnSTOPRequestThroughIT>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d144      	bne.n	8006008 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d10b      	bne.n	8005ff0 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fee:	e03c      	b.n	800606a <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2212      	movs	r2, #18
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006006:	e030      	b.n	800606a <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006016:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006056:	e008      	b.n	800606a <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006066:	605a      	str	r2, [r3, #4]
}
 8006068:	e7ff      	b.n	800606a <I2C_MasterReceive_RXNE+0x174>
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b04      	cmp	r3, #4
 8006088:	d11b      	bne.n	80060c2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006098:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80060c0:	e0bf      	b.n	8006242 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d129      	bne.n	8006120 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060da:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d00a      	beq.n	80060f8 <I2C_MasterReceive_BTF+0x86>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d007      	beq.n	80060f8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800611e:	e090      	b.n	8006242 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d178      	bne.n	800621c <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d002      	beq.n	8006136 <I2C_MasterReceive_BTF+0xc4>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b10      	cmp	r3, #16
 8006134:	d108      	bne.n	8006148 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	e019      	b.n	800617c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b04      	cmp	r3, #4
 800614c:	d002      	beq.n	8006154 <I2C_MasterReceive_BTF+0xe2>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d108      	bne.n	8006166 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e00a      	b.n	800617c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b10      	cmp	r3, #16
 800616a:	d007      	beq.n	800617c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800617a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80061d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d10b      	bne.n	8006204 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
}
 8006202:	e01e      	b.n	8006242 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2212      	movs	r2, #18
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
}
 800621a:	e012      	b.n	8006242 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d117      	bne.n	800628e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006276:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006278:	e067      	b.n	800634a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	b2da      	uxtb	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	611a      	str	r2, [r3, #16]
}
 800628c:	e05d      	b.n	800634a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006296:	d133      	bne.n	8006300 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b21      	cmp	r3, #33	; 0x21
 80062a2:	d109      	bne.n	80062b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062b4:	611a      	str	r2, [r3, #16]
 80062b6:	e008      	b.n	80062ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <I2C_Master_SB+0x92>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d108      	bne.n	80062ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d032      	beq.n	800634a <I2C_Master_SB+0x100>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d02d      	beq.n	800634a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062fc:	605a      	str	r2, [r3, #4]
}
 80062fe:	e024      	b.n	800634a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10e      	bne.n	8006326 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630c:	b29b      	uxth	r3, r3
 800630e:	11db      	asrs	r3, r3, #7
 8006310:	b2db      	uxtb	r3, r3
 8006312:	f003 0306 	and.w	r3, r3, #6
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f063 030f 	orn	r3, r3, #15
 800631c:	b2da      	uxtb	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	611a      	str	r2, [r3, #16]
}
 8006324:	e011      	b.n	800634a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632a:	2b01      	cmp	r3, #1
 800632c:	d10d      	bne.n	800634a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	b29b      	uxth	r3, r3
 8006334:	11db      	asrs	r3, r3, #7
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f003 0306 	and.w	r3, r3, #6
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f063 030e 	orn	r3, r3, #14
 8006342:	b2da      	uxtb	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	611a      	str	r2, [r3, #16]
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006362:	b2da      	uxtb	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <I2C_Master_ADD10+0x26>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d108      	bne.n	800638e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00c      	beq.n	800639e <I2C_Master_ADD10+0x48>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d007      	beq.n	800639e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800639c:	605a      	str	r2, [r3, #4]
  }
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b091      	sub	sp, #68	; 0x44
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b22      	cmp	r3, #34	; 0x22
 80063d2:	f040 8169 	bne.w	80066a8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10f      	bne.n	80063fe <I2C_Master_ADDR+0x54>
 80063de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d10b      	bne.n	80063fe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e6:	2300      	movs	r3, #0
 80063e8:	633b      	str	r3, [r7, #48]	; 0x30
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	633b      	str	r3, [r7, #48]	; 0x30
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	633b      	str	r3, [r7, #48]	; 0x30
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	e160      	b.n	80066c0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006402:	2b00      	cmp	r3, #0
 8006404:	d11d      	bne.n	8006442 <I2C_Master_ADDR+0x98>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800640e:	d118      	bne.n	8006442 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006410:	2300      	movs	r3, #0
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006434:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	651a      	str	r2, [r3, #80]	; 0x50
 8006440:	e13e      	b.n	80066c0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d113      	bne.n	8006474 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800644c:	2300      	movs	r3, #0
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e115      	b.n	80066a0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b01      	cmp	r3, #1
 800647c:	f040 808a 	bne.w	8006594 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006486:	d137      	bne.n	80064f8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006496:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a6:	d113      	bne.n	80064d0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064b8:	2300      	movs	r3, #0
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	e0e7      	b.n	80066a0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d0:	2300      	movs	r3, #0
 80064d2:	623b      	str	r3, [r7, #32]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	623b      	str	r3, [r7, #32]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	623b      	str	r3, [r7, #32]
 80064e4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e0d3      	b.n	80066a0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d02e      	beq.n	800655c <I2C_Master_ADDR+0x1b2>
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	2b20      	cmp	r3, #32
 8006502:	d02b      	beq.n	800655c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006506:	2b12      	cmp	r3, #18
 8006508:	d102      	bne.n	8006510 <I2C_Master_ADDR+0x166>
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	2b01      	cmp	r3, #1
 800650e:	d125      	bne.n	800655c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006512:	2b04      	cmp	r3, #4
 8006514:	d00e      	beq.n	8006534 <I2C_Master_ADDR+0x18a>
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	2b02      	cmp	r3, #2
 800651a:	d00b      	beq.n	8006534 <I2C_Master_ADDR+0x18a>
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	2b10      	cmp	r3, #16
 8006520:	d008      	beq.n	8006534 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	e007      	b.n	8006544 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006542:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006544:	2300      	movs	r3, #0
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	61fb      	str	r3, [r7, #28]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	61fb      	str	r3, [r7, #28]
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	e0a1      	b.n	80066a0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800656a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	61bb      	str	r3, [r7, #24]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	61bb      	str	r3, [r7, #24]
 8006580:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	e085      	b.n	80066a0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d14d      	bne.n	800663a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d016      	beq.n	80065d2 <I2C_Master_ADDR+0x228>
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d013      	beq.n	80065d2 <I2C_Master_ADDR+0x228>
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	2b10      	cmp	r3, #16
 80065ae:	d010      	beq.n	80065d2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065be:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	e007      	b.n	80065e2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065e0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f0:	d117      	bne.n	8006622 <I2C_Master_ADDR+0x278>
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065f8:	d00b      	beq.n	8006612 <I2C_Master_ADDR+0x268>
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d008      	beq.n	8006612 <I2C_Master_ADDR+0x268>
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	2b08      	cmp	r3, #8
 8006604:	d005      	beq.n	8006612 <I2C_Master_ADDR+0x268>
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	2b10      	cmp	r3, #16
 800660a:	d002      	beq.n	8006612 <I2C_Master_ADDR+0x268>
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	2b20      	cmp	r3, #32
 8006610:	d107      	bne.n	8006622 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006620:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	e032      	b.n	80066a0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006648:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006658:	d117      	bne.n	800668a <I2C_Master_ADDR+0x2e0>
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006660:	d00b      	beq.n	800667a <I2C_Master_ADDR+0x2d0>
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	2b01      	cmp	r3, #1
 8006666:	d008      	beq.n	800667a <I2C_Master_ADDR+0x2d0>
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	2b08      	cmp	r3, #8
 800666c:	d005      	beq.n	800667a <I2C_Master_ADDR+0x2d0>
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	2b10      	cmp	r3, #16
 8006672:	d002      	beq.n	800667a <I2C_Master_ADDR+0x2d0>
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	2b20      	cmp	r3, #32
 8006678:	d107      	bne.n	800668a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006688:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668a:	2300      	movs	r3, #0
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80066a6:	e00b      	b.n	80066c0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
}
 80066be:	e7ff      	b.n	80066c0 <I2C_Master_ADDR+0x316>
 80066c0:	bf00      	nop
 80066c2:	3744      	adds	r7, #68	; 0x44
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d02c      	beq.n	8006740 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	781a      	ldrb	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d115      	bne.n	8006740 <I2C_SlaveTransmit_TXE+0x74>
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2b29      	cmp	r3, #41	; 0x29
 8006718:	d112      	bne.n	8006740 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006728:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2221      	movs	r2, #33	; 0x21
 800672e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2228      	movs	r2, #40	; 0x28
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006740:	bf00      	nop
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d011      	beq.n	800677e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006798:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d02d      	beq.n	8006800 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d115      	bne.n	8006800 <I2C_SlaveReceive_RXNE+0x76>
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	2b2a      	cmp	r3, #42	; 0x2a
 80067d8:	d112      	bne.n	8006800 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2222      	movs	r2, #34	; 0x22
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2228      	movs	r2, #40	; 0x28
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d012      	beq.n	8006840 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006866:	2b28      	cmp	r3, #40	; 0x28
 8006868:	d127      	bne.n	80068ba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006878:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	089b      	lsrs	r3, r3, #2
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006886:	2301      	movs	r3, #1
 8006888:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	09db      	lsrs	r3, r3, #7
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d103      	bne.n	800689e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	81bb      	strh	r3, [r7, #12]
 800689c:	e002      	b.n	80068a4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b0:	89ba      	ldrh	r2, [r7, #12]
 80068b2:	7bf9      	ldrb	r1, [r7, #15]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80068b8:	e00e      	b.n	80068d8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ba:	2300      	movs	r3, #0
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80068d8:	bf00      	nop
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006900:	2300      	movs	r3, #0
 8006902:	60bb      	str	r3, [r7, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	60bb      	str	r3, [r7, #8]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800692c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800693c:	d172      	bne.n	8006a24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	2b22      	cmp	r3, #34	; 0x22
 8006942:	d002      	beq.n	800694a <I2C_Slave_STOPF+0x6a>
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b2a      	cmp	r3, #42	; 0x2a
 8006948:	d135      	bne.n	80069b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	b29a      	uxth	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	f043 0204 	orr.w	r2, r3, #4
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800697c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	4618      	mov	r0, r3
 8006984:	f7fd fef8 	bl	8004778 <HAL_DMA_GetState>
 8006988:	4603      	mov	r3, r0
 800698a:	2b01      	cmp	r3, #1
 800698c:	d049      	beq.n	8006a22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	4a6b      	ldr	r2, [pc, #428]	; (8006b40 <I2C_Slave_STOPF+0x260>)
 8006994:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	4618      	mov	r0, r3
 800699c:	f7fd fd40 	bl	8004420 <HAL_DMA_Abort_IT>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d03d      	beq.n	8006a22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069b0:	4610      	mov	r0, r2
 80069b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069b4:	e035      	b.n	8006a22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f043 0204 	orr.w	r2, r3, #4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fd fec2 	bl	8004778 <HAL_DMA_GetState>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d014      	beq.n	8006a24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fe:	4a50      	ldr	r2, [pc, #320]	; (8006b40 <I2C_Slave_STOPF+0x260>)
 8006a00:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fd fd0a 	bl	8004420 <HAL_DMA_Abort_IT>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4798      	blx	r3
 8006a20:	e000      	b.n	8006a24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d03e      	beq.n	8006aac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d112      	bne.n	8006a62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d112      	bne.n	8006a96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	f043 0204 	orr.w	r2, r3, #4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f8b9 	bl	8006c2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006aba:	e03c      	b.n	8006b36 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac0:	d10a      	bne.n	8006ad8 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2228      	movs	r2, #40	; 0x28
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b28      	cmp	r3, #40	; 0x28
 8006ae2:	d112      	bne.n	8006b0a <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <I2C_Slave_STOPF+0x264>)
 8006ae8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
}
 8006b08:	e015      	b.n	8006b36 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	2b22      	cmp	r3, #34	; 0x22
 8006b10:	d002      	beq.n	8006b18 <I2C_Slave_STOPF+0x238>
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b22      	cmp	r3, #34	; 0x22
 8006b16:	d10e      	bne.n	8006b36 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	08006e99 	.word	0x08006e99
 8006b44:	ffff0000 	.word	0xffff0000

08006b48 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b56:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d002      	beq.n	8006b6a <I2C_Slave_AF+0x22>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	d12a      	bne.n	8006bc0 <I2C_Slave_AF+0x78>
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b28      	cmp	r3, #40	; 0x28
 8006b6e:	d127      	bne.n	8006bc0 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a2d      	ldr	r2, [pc, #180]	; (8006c28 <I2C_Slave_AF+0xe0>)
 8006b74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b84:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b8e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b9e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006bbe:	e02f      	b.n	8006c20 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	2b21      	cmp	r3, #33	; 0x21
 8006bc4:	d127      	bne.n	8006c16 <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a17      	ldr	r2, [pc, #92]	; (8006c28 <I2C_Slave_AF+0xe0>)
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2221      	movs	r2, #33	; 0x21
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bf0:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bfa:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0a:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
}
 8006c14:	e004      	b.n	8006c20 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c1e:	615a      	str	r2, [r3, #20]
}
 8006c20:	bf00      	nop
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	ffff0000 	.word	0xffff0000

08006c2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	2b10      	cmp	r3, #16
 8006c48:	d002      	beq.n	8006c50 <I2C_ITError+0x24>
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	2b40      	cmp	r3, #64	; 0x40
 8006c4e:	d10a      	bne.n	8006c66 <I2C_ITError+0x3a>
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	2b22      	cmp	r3, #34	; 0x22
 8006c54:	d107      	bne.n	8006c66 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c6c:	2b28      	cmp	r3, #40	; 0x28
 8006c6e:	d107      	bne.n	8006c80 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2228      	movs	r2, #40	; 0x28
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c7e:	e015      	b.n	8006cac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8e:	d00a      	beq.n	8006ca6 <I2C_ITError+0x7a>
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2b60      	cmp	r3, #96	; 0x60
 8006c94:	d007      	beq.n	8006ca6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cba:	d162      	bne.n	8006d82 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d020      	beq.n	8006d1c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	4a6c      	ldr	r2, [pc, #432]	; (8006e90 <I2C_ITError+0x264>)
 8006ce0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fd fb9a 	bl	8004420 <HAL_DMA_Abort_IT>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 808b 	beq.w	8006e0a <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d16:	4610      	mov	r0, r2
 8006d18:	4798      	blx	r3
 8006d1a:	e076      	b.n	8006e0a <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	4a5b      	ldr	r2, [pc, #364]	; (8006e90 <I2C_ITError+0x264>)
 8006d22:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fd fb79 	bl	8004420 <HAL_DMA_Abort_IT>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d06a      	beq.n	8006e0a <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d10b      	bne.n	8006d5a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0201 	bic.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	e043      	b.n	8006e0a <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b60      	cmp	r3, #96	; 0x60
 8006d8c:	d126      	bne.n	8006ddc <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da6:	2b40      	cmp	r3, #64	; 0x40
 8006da8:	d10b      	bne.n	8006dc2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
 8006dda:	e016      	b.n	8006e0a <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d10b      	bne.n	8006e02 <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10e      	bne.n	8006e38 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d104      	bne.n	8006e38 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d114      	bne.n	8006e86 <I2C_ITError+0x25a>
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b28      	cmp	r3, #40	; 0x28
 8006e60:	d111      	bne.n	8006e86 <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a0b      	ldr	r2, [pc, #44]	; (8006e94 <I2C_ITError+0x268>)
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e86:	bf00      	nop
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	08006e99 	.word	0x08006e99
 8006e94:	ffff0000 	.word	0xffff0000

08006e98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006eb2:	4b4c      	ldr	r3, [pc, #304]	; (8006fe4 <I2C_DMAAbort+0x14c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	08db      	lsrs	r3, r3, #3
 8006eb8:	4a4b      	ldr	r2, [pc, #300]	; (8006fe8 <I2C_DMAAbort+0x150>)
 8006eba:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebe:	0a1a      	lsrs	r2, r3, #8
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	00da      	lsls	r2, r3, #3
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d106      	bne.n	8006ee0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	f043 0220 	orr.w	r2, r3, #32
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006ede:	e00a      	b.n	8006ef6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef4:	d0ea      	beq.n	8006ecc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f02:	2200      	movs	r2, #0
 8006f04:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	2200      	movs	r2, #0
 8006f14:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f38:	2200      	movs	r2, #0
 8006f3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	2200      	movs	r2, #0
 8006f4a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0201 	bic.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b60      	cmp	r3, #96	; 0x60
 8006f66:	d10f      	bne.n	8006f88 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f82:	6978      	ldr	r0, [r7, #20]
 8006f84:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f86:	e028      	b.n	8006fda <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f88:	7cfb      	ldrb	r3, [r7, #19]
 8006f8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f8e:	2b28      	cmp	r3, #40	; 0x28
 8006f90:	d117      	bne.n	8006fc2 <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0201 	orr.w	r2, r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fb0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2228      	movs	r2, #40	; 0x28
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fc0:	e007      	b.n	8006fd2 <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	6978      	ldr	r0, [r7, #20]
 8006fd8:	4798      	blx	r3
}
 8006fda:	bf00      	nop
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000000 	.word	0x20000000
 8006fe8:	14f8b589 	.word	0x14f8b589

08006fec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ff8:	4b13      	ldr	r3, [pc, #76]	; (8007048 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	08db      	lsrs	r3, r3, #3
 8006ffe:	4a13      	ldr	r2, [pc, #76]	; (800704c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	0a1a      	lsrs	r2, r3, #8
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3b01      	subs	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d107      	bne.n	800702a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	f043 0220 	orr.w	r2, r3, #32
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e008      	b.n	800703c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007038:	d0e9      	beq.n	800700e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	20000000 	.word	0x20000000
 800704c:	14f8b589 	.word	0x14f8b589

08007050 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007060:	d103      	bne.n	800706a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007068:	e007      	b.n	800707a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007072:	d102      	bne.n	800707a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2208      	movs	r2, #8
 8007078:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
	...

08007088 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800708c:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <HAL_PWR_PVD_IRQHandler+0x20>)
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8007098:	f000 f808 	bl	80070ac <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <HAL_PWR_PVD_IRQHandler+0x20>)
 800709e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80070a2:	615a      	str	r2, [r3, #20]
  }
}
 80070a4:	bf00      	nop
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40013c00 	.word	0x40013c00

080070ac <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80070b0:	bf00      	nop
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e314      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b0f      	cmp	r3, #15
 80070d4:	d903      	bls.n	80070de <HAL_RCC_OscConfig+0x22>
 80070d6:	21e6      	movs	r1, #230	; 0xe6
 80070d8:	4897      	ldr	r0, [pc, #604]	; (8007338 <HAL_RCC_OscConfig+0x27c>)
 80070da:	f7fb f9ce 	bl	800247a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 8088 	beq.w	80071fc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <HAL_RCC_OscConfig+0x54>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fc:	d008      	beq.n	8007110 <HAL_RCC_OscConfig+0x54>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007106:	d003      	beq.n	8007110 <HAL_RCC_OscConfig+0x54>
 8007108:	21eb      	movs	r1, #235	; 0xeb
 800710a:	488b      	ldr	r0, [pc, #556]	; (8007338 <HAL_RCC_OscConfig+0x27c>)
 800710c:	f7fb f9b5 	bl	800247a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007110:	4b8a      	ldr	r3, [pc, #552]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f003 030c 	and.w	r3, r3, #12
 8007118:	2b04      	cmp	r3, #4
 800711a:	d00c      	beq.n	8007136 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800711c:	4b87      	ldr	r3, [pc, #540]	; (800733c <HAL_RCC_OscConfig+0x280>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007124:	2b08      	cmp	r3, #8
 8007126:	d112      	bne.n	800714e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007128:	4b84      	ldr	r3, [pc, #528]	; (800733c <HAL_RCC_OscConfig+0x280>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007134:	d10b      	bne.n	800714e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007136:	4b81      	ldr	r3, [pc, #516]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d05b      	beq.n	80071fa <HAL_RCC_OscConfig+0x13e>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d157      	bne.n	80071fa <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e2d4      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007156:	d106      	bne.n	8007166 <HAL_RCC_OscConfig+0xaa>
 8007158:	4b78      	ldr	r3, [pc, #480]	; (800733c <HAL_RCC_OscConfig+0x280>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a77      	ldr	r2, [pc, #476]	; (800733c <HAL_RCC_OscConfig+0x280>)
 800715e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	e01d      	b.n	80071a2 <HAL_RCC_OscConfig+0xe6>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800716e:	d10c      	bne.n	800718a <HAL_RCC_OscConfig+0xce>
 8007170:	4b72      	ldr	r3, [pc, #456]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a71      	ldr	r2, [pc, #452]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	4b6f      	ldr	r3, [pc, #444]	; (800733c <HAL_RCC_OscConfig+0x280>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a6e      	ldr	r2, [pc, #440]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	e00b      	b.n	80071a2 <HAL_RCC_OscConfig+0xe6>
 800718a:	4b6c      	ldr	r3, [pc, #432]	; (800733c <HAL_RCC_OscConfig+0x280>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a6b      	ldr	r2, [pc, #428]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	4b69      	ldr	r3, [pc, #420]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a68      	ldr	r2, [pc, #416]	; (800733c <HAL_RCC_OscConfig+0x280>)
 800719c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d013      	beq.n	80071d2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071aa:	f7fb fff1 	bl	8003190 <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071b0:	e008      	b.n	80071c4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071b2:	f7fb ffed 	bl	8003190 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b64      	cmp	r3, #100	; 0x64
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e299      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c4:	4b5d      	ldr	r3, [pc, #372]	; (800733c <HAL_RCC_OscConfig+0x280>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f0      	beq.n	80071b2 <HAL_RCC_OscConfig+0xf6>
 80071d0:	e014      	b.n	80071fc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d2:	f7fb ffdd 	bl	8003190 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071d8:	e008      	b.n	80071ec <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071da:	f7fb ffd9 	bl	8003190 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b64      	cmp	r3, #100	; 0x64
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e285      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ec:	4b53      	ldr	r3, [pc, #332]	; (800733c <HAL_RCC_OscConfig+0x280>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1f0      	bne.n	80071da <HAL_RCC_OscConfig+0x11e>
 80071f8:	e000      	b.n	80071fc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d079      	beq.n	80072fc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <HAL_RCC_OscConfig+0x166>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d004      	beq.n	8007222 <HAL_RCC_OscConfig+0x166>
 8007218:	f240 111d 	movw	r1, #285	; 0x11d
 800721c:	4846      	ldr	r0, [pc, #280]	; (8007338 <HAL_RCC_OscConfig+0x27c>)
 800721e:	f7fb f92c 	bl	800247a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	2b1f      	cmp	r3, #31
 8007228:	d904      	bls.n	8007234 <HAL_RCC_OscConfig+0x178>
 800722a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800722e:	4842      	ldr	r0, [pc, #264]	; (8007338 <HAL_RCC_OscConfig+0x27c>)
 8007230:	f7fb f923 	bl	800247a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007234:	4b41      	ldr	r3, [pc, #260]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f003 030c 	and.w	r3, r3, #12
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007240:	4b3e      	ldr	r3, [pc, #248]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007248:	2b08      	cmp	r3, #8
 800724a:	d11c      	bne.n	8007286 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800724c:	4b3b      	ldr	r3, [pc, #236]	; (800733c <HAL_RCC_OscConfig+0x280>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d116      	bne.n	8007286 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007258:	4b38      	ldr	r3, [pc, #224]	; (800733c <HAL_RCC_OscConfig+0x280>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <HAL_RCC_OscConfig+0x1b4>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d001      	beq.n	8007270 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e243      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007270:	4b32      	ldr	r3, [pc, #200]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	492f      	ldr	r1, [pc, #188]	; (800733c <HAL_RCC_OscConfig+0x280>)
 8007280:	4313      	orrs	r3, r2
 8007282:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007284:	e03a      	b.n	80072fc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d020      	beq.n	80072d0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800728e:	4b2c      	ldr	r3, [pc, #176]	; (8007340 <HAL_RCC_OscConfig+0x284>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007294:	f7fb ff7c 	bl	8003190 <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800729c:	f7fb ff78 	bl	8003190 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e224      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ae:	4b23      	ldr	r3, [pc, #140]	; (800733c <HAL_RCC_OscConfig+0x280>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d0f0      	beq.n	800729c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ba:	4b20      	ldr	r3, [pc, #128]	; (800733c <HAL_RCC_OscConfig+0x280>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	491c      	ldr	r1, [pc, #112]	; (800733c <HAL_RCC_OscConfig+0x280>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	600b      	str	r3, [r1, #0]
 80072ce:	e015      	b.n	80072fc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072d0:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <HAL_RCC_OscConfig+0x284>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d6:	f7fb ff5b 	bl	8003190 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072dc:	e008      	b.n	80072f0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072de:	f7fb ff57 	bl	8003190 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e203      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072f0:	4b12      	ldr	r3, [pc, #72]	; (800733c <HAL_RCC_OscConfig+0x280>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1f0      	bne.n	80072de <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d045      	beq.n	8007394 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d008      	beq.n	8007322 <HAL_RCC_OscConfig+0x266>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d004      	beq.n	8007322 <HAL_RCC_OscConfig+0x266>
 8007318:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800731c:	4806      	ldr	r0, [pc, #24]	; (8007338 <HAL_RCC_OscConfig+0x27c>)
 800731e:	f7fb f8ac 	bl	800247a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01e      	beq.n	8007368 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_RCC_OscConfig+0x288>)
 800732c:	2201      	movs	r2, #1
 800732e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007330:	f7fb ff2e 	bl	8003190 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007336:	e010      	b.n	800735a <HAL_RCC_OscConfig+0x29e>
 8007338:	0800f554 	.word	0x0800f554
 800733c:	40023800 	.word	0x40023800
 8007340:	42470000 	.word	0x42470000
 8007344:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007348:	f7fb ff22 	bl	8003190 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b02      	cmp	r3, #2
 8007354:	d901      	bls.n	800735a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e1ce      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800735a:	4b5e      	ldr	r3, [pc, #376]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 800735c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0f0      	beq.n	8007348 <HAL_RCC_OscConfig+0x28c>
 8007366:	e015      	b.n	8007394 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007368:	4b5b      	ldr	r3, [pc, #364]	; (80074d8 <HAL_RCC_OscConfig+0x41c>)
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800736e:	f7fb ff0f 	bl	8003190 <HAL_GetTick>
 8007372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007374:	e008      	b.n	8007388 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007376:	f7fb ff0b 	bl	8003190 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e1b7      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007388:	4b52      	ldr	r3, [pc, #328]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 800738a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f0      	bne.n	8007376 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 80b0 	beq.w	8007502 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00c      	beq.n	80073c8 <HAL_RCC_OscConfig+0x30c>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d008      	beq.n	80073c8 <HAL_RCC_OscConfig+0x30c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	d004      	beq.n	80073c8 <HAL_RCC_OscConfig+0x30c>
 80073be:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80073c2:	4846      	ldr	r0, [pc, #280]	; (80074dc <HAL_RCC_OscConfig+0x420>)
 80073c4:	f7fb f859 	bl	800247a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073c8:	4b42      	ldr	r3, [pc, #264]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10f      	bne.n	80073f4 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d4:	2300      	movs	r3, #0
 80073d6:	60bb      	str	r3, [r7, #8]
 80073d8:	4b3e      	ldr	r3, [pc, #248]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 80073da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073dc:	4a3d      	ldr	r2, [pc, #244]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 80073de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e2:	6413      	str	r3, [r2, #64]	; 0x40
 80073e4:	4b3b      	ldr	r3, [pc, #236]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ec:	60bb      	str	r3, [r7, #8]
 80073ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073f0:	2301      	movs	r3, #1
 80073f2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073f4:	4b3a      	ldr	r3, [pc, #232]	; (80074e0 <HAL_RCC_OscConfig+0x424>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d118      	bne.n	8007432 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007400:	4b37      	ldr	r3, [pc, #220]	; (80074e0 <HAL_RCC_OscConfig+0x424>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a36      	ldr	r2, [pc, #216]	; (80074e0 <HAL_RCC_OscConfig+0x424>)
 8007406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800740a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800740c:	f7fb fec0 	bl	8003190 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007414:	f7fb febc 	bl	8003190 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e168      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007426:	4b2e      	ldr	r3, [pc, #184]	; (80074e0 <HAL_RCC_OscConfig+0x424>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0f0      	beq.n	8007414 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d106      	bne.n	8007448 <HAL_RCC_OscConfig+0x38c>
 800743a:	4b26      	ldr	r3, [pc, #152]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 800743c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743e:	4a25      	ldr	r2, [pc, #148]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 8007440:	f043 0301 	orr.w	r3, r3, #1
 8007444:	6713      	str	r3, [r2, #112]	; 0x70
 8007446:	e01c      	b.n	8007482 <HAL_RCC_OscConfig+0x3c6>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b05      	cmp	r3, #5
 800744e:	d10c      	bne.n	800746a <HAL_RCC_OscConfig+0x3ae>
 8007450:	4b20      	ldr	r3, [pc, #128]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007454:	4a1f      	ldr	r2, [pc, #124]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 8007456:	f043 0304 	orr.w	r3, r3, #4
 800745a:	6713      	str	r3, [r2, #112]	; 0x70
 800745c:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007460:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	6713      	str	r3, [r2, #112]	; 0x70
 8007468:	e00b      	b.n	8007482 <HAL_RCC_OscConfig+0x3c6>
 800746a:	4b1a      	ldr	r3, [pc, #104]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	4a19      	ldr	r2, [pc, #100]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 8007470:	f023 0301 	bic.w	r3, r3, #1
 8007474:	6713      	str	r3, [r2, #112]	; 0x70
 8007476:	4b17      	ldr	r3, [pc, #92]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	4a16      	ldr	r2, [pc, #88]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 800747c:	f023 0304 	bic.w	r3, r3, #4
 8007480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d015      	beq.n	80074b6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748a:	f7fb fe81 	bl	8003190 <HAL_GetTick>
 800748e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007490:	e00a      	b.n	80074a8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007492:	f7fb fe7d 	bl	8003190 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e127      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <HAL_RCC_OscConfig+0x418>)
 80074aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0ee      	beq.n	8007492 <HAL_RCC_OscConfig+0x3d6>
 80074b4:	e01c      	b.n	80074f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074b6:	f7fb fe6b 	bl	8003190 <HAL_GetTick>
 80074ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074bc:	e012      	b.n	80074e4 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074be:	f7fb fe67 	bl	8003190 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d909      	bls.n	80074e4 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e111      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
 80074d4:	40023800 	.word	0x40023800
 80074d8:	42470e80 	.word	0x42470e80
 80074dc:	0800f554 	.word	0x0800f554
 80074e0:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074e4:	4b86      	ldr	r3, [pc, #536]	; (8007700 <HAL_RCC_OscConfig+0x644>)
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e6      	bne.n	80074be <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d105      	bne.n	8007502 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074f6:	4b82      	ldr	r3, [pc, #520]	; (8007700 <HAL_RCC_OscConfig+0x644>)
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	4a81      	ldr	r2, [pc, #516]	; (8007700 <HAL_RCC_OscConfig+0x644>)
 80074fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00c      	beq.n	8007524 <HAL_RCC_OscConfig+0x468>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d008      	beq.n	8007524 <HAL_RCC_OscConfig+0x468>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d004      	beq.n	8007524 <HAL_RCC_OscConfig+0x468>
 800751a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800751e:	4879      	ldr	r0, [pc, #484]	; (8007704 <HAL_RCC_OscConfig+0x648>)
 8007520:	f7fa ffab 	bl	800247a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 80e4 	beq.w	80076f6 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800752e:	4b74      	ldr	r3, [pc, #464]	; (8007700 <HAL_RCC_OscConfig+0x644>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f003 030c 	and.w	r3, r3, #12
 8007536:	2b08      	cmp	r3, #8
 8007538:	f000 80a5 	beq.w	8007686 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b02      	cmp	r3, #2
 8007542:	f040 8089 	bne.w	8007658 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d009      	beq.n	8007562 <HAL_RCC_OscConfig+0x4a6>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007556:	d004      	beq.n	8007562 <HAL_RCC_OscConfig+0x4a6>
 8007558:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800755c:	4869      	ldr	r0, [pc, #420]	; (8007704 <HAL_RCC_OscConfig+0x648>)
 800755e:	f7fa ff8c 	bl	800247a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	2b3f      	cmp	r3, #63	; 0x3f
 8007568:	d904      	bls.n	8007574 <HAL_RCC_OscConfig+0x4b8>
 800756a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800756e:	4865      	ldr	r0, [pc, #404]	; (8007704 <HAL_RCC_OscConfig+0x648>)
 8007570:	f7fa ff83 	bl	800247a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	2b31      	cmp	r3, #49	; 0x31
 800757a:	d904      	bls.n	8007586 <HAL_RCC_OscConfig+0x4ca>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007584:	d904      	bls.n	8007590 <HAL_RCC_OscConfig+0x4d4>
 8007586:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800758a:	485e      	ldr	r0, [pc, #376]	; (8007704 <HAL_RCC_OscConfig+0x648>)
 800758c:	f7fa ff75 	bl	800247a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	2b02      	cmp	r3, #2
 8007596:	d010      	beq.n	80075ba <HAL_RCC_OscConfig+0x4fe>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759c:	2b04      	cmp	r3, #4
 800759e:	d00c      	beq.n	80075ba <HAL_RCC_OscConfig+0x4fe>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a4:	2b06      	cmp	r3, #6
 80075a6:	d008      	beq.n	80075ba <HAL_RCC_OscConfig+0x4fe>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d004      	beq.n	80075ba <HAL_RCC_OscConfig+0x4fe>
 80075b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075b4:	4853      	ldr	r0, [pc, #332]	; (8007704 <HAL_RCC_OscConfig+0x648>)
 80075b6:	f7fa ff60 	bl	800247a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d903      	bls.n	80075ca <HAL_RCC_OscConfig+0x50e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	2b0f      	cmp	r3, #15
 80075c8:	d904      	bls.n	80075d4 <HAL_RCC_OscConfig+0x518>
 80075ca:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80075ce:	484d      	ldr	r0, [pc, #308]	; (8007704 <HAL_RCC_OscConfig+0x648>)
 80075d0:	f7fa ff53 	bl	800247a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075d4:	4b4c      	ldr	r3, [pc, #304]	; (8007708 <HAL_RCC_OscConfig+0x64c>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075da:	f7fb fdd9 	bl	8003190 <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075e2:	f7fb fdd5 	bl	8003190 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e081      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075f4:	4b42      	ldr	r3, [pc, #264]	; (8007700 <HAL_RCC_OscConfig+0x644>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f0      	bne.n	80075e2 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	019b      	lsls	r3, r3, #6
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	3b01      	subs	r3, #1
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	061b      	lsls	r3, r3, #24
 8007624:	4936      	ldr	r1, [pc, #216]	; (8007700 <HAL_RCC_OscConfig+0x644>)
 8007626:	4313      	orrs	r3, r2
 8007628:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800762a:	4b37      	ldr	r3, [pc, #220]	; (8007708 <HAL_RCC_OscConfig+0x64c>)
 800762c:	2201      	movs	r2, #1
 800762e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007630:	f7fb fdae 	bl	8003190 <HAL_GetTick>
 8007634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007636:	e008      	b.n	800764a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007638:	f7fb fdaa 	bl	8003190 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e056      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800764a:	4b2d      	ldr	r3, [pc, #180]	; (8007700 <HAL_RCC_OscConfig+0x644>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0f0      	beq.n	8007638 <HAL_RCC_OscConfig+0x57c>
 8007656:	e04e      	b.n	80076f6 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007658:	4b2b      	ldr	r3, [pc, #172]	; (8007708 <HAL_RCC_OscConfig+0x64c>)
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800765e:	f7fb fd97 	bl	8003190 <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007664:	e008      	b.n	8007678 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007666:	f7fb fd93 	bl	8003190 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d901      	bls.n	8007678 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e03f      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007678:	4b21      	ldr	r3, [pc, #132]	; (8007700 <HAL_RCC_OscConfig+0x644>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1f0      	bne.n	8007666 <HAL_RCC_OscConfig+0x5aa>
 8007684:	e037      	b.n	80076f6 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e032      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007692:	4b1b      	ldr	r3, [pc, #108]	; (8007700 <HAL_RCC_OscConfig+0x644>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d028      	beq.n	80076f2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d121      	bne.n	80076f2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d11a      	bne.n	80076f2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076c2:	4013      	ands	r3, r2
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d111      	bne.n	80076f2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d8:	085b      	lsrs	r3, r3, #1
 80076da:	3b01      	subs	r3, #1
 80076dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076de:	429a      	cmp	r2, r3
 80076e0:	d107      	bne.n	80076f2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d001      	beq.n	80076f6 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	40023800 	.word	0x40023800
 8007704:	0800f554 	.word	0x0800f554
 8007708:	42470060 	.word	0x42470060

0800770c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e174      	b.n	8007a0a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <HAL_RCC_ClockConfig+0x24>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b0f      	cmp	r3, #15
 800772e:	d904      	bls.n	800773a <HAL_RCC_ClockConfig+0x2e>
 8007730:	f240 215a 	movw	r1, #602	; 0x25a
 8007734:	487b      	ldr	r0, [pc, #492]	; (8007924 <HAL_RCC_ClockConfig+0x218>)
 8007736:	f7fa fea0 	bl	800247a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d019      	beq.n	8007774 <HAL_RCC_ClockConfig+0x68>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d016      	beq.n	8007774 <HAL_RCC_ClockConfig+0x68>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d013      	beq.n	8007774 <HAL_RCC_ClockConfig+0x68>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b03      	cmp	r3, #3
 8007750:	d010      	beq.n	8007774 <HAL_RCC_ClockConfig+0x68>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b04      	cmp	r3, #4
 8007756:	d00d      	beq.n	8007774 <HAL_RCC_ClockConfig+0x68>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b05      	cmp	r3, #5
 800775c:	d00a      	beq.n	8007774 <HAL_RCC_ClockConfig+0x68>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b06      	cmp	r3, #6
 8007762:	d007      	beq.n	8007774 <HAL_RCC_ClockConfig+0x68>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2b07      	cmp	r3, #7
 8007768:	d004      	beq.n	8007774 <HAL_RCC_ClockConfig+0x68>
 800776a:	f240 215b 	movw	r1, #603	; 0x25b
 800776e:	486d      	ldr	r0, [pc, #436]	; (8007924 <HAL_RCC_ClockConfig+0x218>)
 8007770:	f7fa fe83 	bl	800247a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007774:	4b6c      	ldr	r3, [pc, #432]	; (8007928 <HAL_RCC_ClockConfig+0x21c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d90c      	bls.n	800779c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007782:	4b69      	ldr	r3, [pc, #420]	; (8007928 <HAL_RCC_ClockConfig+0x21c>)
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800778a:	4b67      	ldr	r3, [pc, #412]	; (8007928 <HAL_RCC_ClockConfig+0x21c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e136      	b.n	8007a0a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d049      	beq.n	800783c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077b4:	4b5d      	ldr	r3, [pc, #372]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	4a5c      	ldr	r2, [pc, #368]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 80077ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077cc:	4b57      	ldr	r3, [pc, #348]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	4a56      	ldr	r2, [pc, #344]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 80077d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d024      	beq.n	800782a <HAL_RCC_ClockConfig+0x11e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b80      	cmp	r3, #128	; 0x80
 80077e6:	d020      	beq.n	800782a <HAL_RCC_ClockConfig+0x11e>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b90      	cmp	r3, #144	; 0x90
 80077ee:	d01c      	beq.n	800782a <HAL_RCC_ClockConfig+0x11e>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2ba0      	cmp	r3, #160	; 0xa0
 80077f6:	d018      	beq.n	800782a <HAL_RCC_ClockConfig+0x11e>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	2bb0      	cmp	r3, #176	; 0xb0
 80077fe:	d014      	beq.n	800782a <HAL_RCC_ClockConfig+0x11e>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2bc0      	cmp	r3, #192	; 0xc0
 8007806:	d010      	beq.n	800782a <HAL_RCC_ClockConfig+0x11e>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2bd0      	cmp	r3, #208	; 0xd0
 800780e:	d00c      	beq.n	800782a <HAL_RCC_ClockConfig+0x11e>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2be0      	cmp	r3, #224	; 0xe0
 8007816:	d008      	beq.n	800782a <HAL_RCC_ClockConfig+0x11e>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	2bf0      	cmp	r3, #240	; 0xf0
 800781e:	d004      	beq.n	800782a <HAL_RCC_ClockConfig+0x11e>
 8007820:	f240 217e 	movw	r1, #638	; 0x27e
 8007824:	483f      	ldr	r0, [pc, #252]	; (8007924 <HAL_RCC_ClockConfig+0x218>)
 8007826:	f7fa fe28 	bl	800247a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800782a:	4b40      	ldr	r3, [pc, #256]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	493d      	ldr	r1, [pc, #244]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 8007838:	4313      	orrs	r3, r2
 800783a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d059      	beq.n	80078fc <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d010      	beq.n	8007872 <HAL_RCC_ClockConfig+0x166>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d00c      	beq.n	8007872 <HAL_RCC_ClockConfig+0x166>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2b02      	cmp	r3, #2
 800785e:	d008      	beq.n	8007872 <HAL_RCC_ClockConfig+0x166>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	2b03      	cmp	r3, #3
 8007866:	d004      	beq.n	8007872 <HAL_RCC_ClockConfig+0x166>
 8007868:	f240 2185 	movw	r1, #645	; 0x285
 800786c:	482d      	ldr	r0, [pc, #180]	; (8007924 <HAL_RCC_ClockConfig+0x218>)
 800786e:	f7fa fe04 	bl	800247a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d107      	bne.n	800788a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800787a:	4b2c      	ldr	r3, [pc, #176]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d119      	bne.n	80078ba <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e0bf      	b.n	8007a0a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d003      	beq.n	800789a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007896:	2b03      	cmp	r3, #3
 8007898:	d107      	bne.n	80078aa <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800789a:	4b24      	ldr	r3, [pc, #144]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e0af      	b.n	8007a0a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078aa:	4b20      	ldr	r3, [pc, #128]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e0a7      	b.n	8007a0a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ba:	4b1c      	ldr	r3, [pc, #112]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f023 0203 	bic.w	r2, r3, #3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	4919      	ldr	r1, [pc, #100]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078cc:	f7fb fc60 	bl	8003190 <HAL_GetTick>
 80078d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d2:	e00a      	b.n	80078ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d4:	f7fb fc5c 	bl	8003190 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e08f      	b.n	8007a0a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ea:	4b10      	ldr	r3, [pc, #64]	; (800792c <HAL_RCC_ClockConfig+0x220>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 020c 	and.w	r2, r3, #12
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d1eb      	bne.n	80078d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <HAL_RCC_ClockConfig+0x21c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d212      	bcs.n	8007930 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800790a:	4b07      	ldr	r3, [pc, #28]	; (8007928 <HAL_RCC_ClockConfig+0x21c>)
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007912:	4b05      	ldr	r3, [pc, #20]	; (8007928 <HAL_RCC_ClockConfig+0x21c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d007      	beq.n	8007930 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e072      	b.n	8007a0a <HAL_RCC_ClockConfig+0x2fe>
 8007924:	0800f554 	.word	0x0800f554
 8007928:	40023c00 	.word	0x40023c00
 800792c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b00      	cmp	r3, #0
 800793a:	d025      	beq.n	8007988 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d018      	beq.n	8007976 <HAL_RCC_ClockConfig+0x26a>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d013      	beq.n	8007976 <HAL_RCC_ClockConfig+0x26a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007956:	d00e      	beq.n	8007976 <HAL_RCC_ClockConfig+0x26a>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007960:	d009      	beq.n	8007976 <HAL_RCC_ClockConfig+0x26a>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800796a:	d004      	beq.n	8007976 <HAL_RCC_ClockConfig+0x26a>
 800796c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8007970:	4828      	ldr	r0, [pc, #160]	; (8007a14 <HAL_RCC_ClockConfig+0x308>)
 8007972:	f7fa fd82 	bl	800247a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007976:	4b28      	ldr	r3, [pc, #160]	; (8007a18 <HAL_RCC_ClockConfig+0x30c>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	4925      	ldr	r1, [pc, #148]	; (8007a18 <HAL_RCC_ClockConfig+0x30c>)
 8007984:	4313      	orrs	r3, r2
 8007986:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0308 	and.w	r3, r3, #8
 8007990:	2b00      	cmp	r3, #0
 8007992:	d026      	beq.n	80079e2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d018      	beq.n	80079ce <HAL_RCC_ClockConfig+0x2c2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a4:	d013      	beq.n	80079ce <HAL_RCC_ClockConfig+0x2c2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80079ae:	d00e      	beq.n	80079ce <HAL_RCC_ClockConfig+0x2c2>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80079b8:	d009      	beq.n	80079ce <HAL_RCC_ClockConfig+0x2c2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80079c2:	d004      	beq.n	80079ce <HAL_RCC_ClockConfig+0x2c2>
 80079c4:	f240 21ca 	movw	r1, #714	; 0x2ca
 80079c8:	4812      	ldr	r0, [pc, #72]	; (8007a14 <HAL_RCC_ClockConfig+0x308>)
 80079ca:	f7fa fd56 	bl	800247a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079ce:	4b12      	ldr	r3, [pc, #72]	; (8007a18 <HAL_RCC_ClockConfig+0x30c>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	490e      	ldr	r1, [pc, #56]	; (8007a18 <HAL_RCC_ClockConfig+0x30c>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80079e2:	f000 f821 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 80079e6:	4602      	mov	r2, r0
 80079e8:	4b0b      	ldr	r3, [pc, #44]	; (8007a18 <HAL_RCC_ClockConfig+0x30c>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	091b      	lsrs	r3, r3, #4
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	490a      	ldr	r1, [pc, #40]	; (8007a1c <HAL_RCC_ClockConfig+0x310>)
 80079f4:	5ccb      	ldrb	r3, [r1, r3]
 80079f6:	fa22 f303 	lsr.w	r3, r2, r3
 80079fa:	4a09      	ldr	r2, [pc, #36]	; (8007a20 <HAL_RCC_ClockConfig+0x314>)
 80079fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80079fe:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <HAL_RCC_ClockConfig+0x318>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fa feec 	bl	80027e0 <HAL_InitTick>

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	0800f554 	.word	0x0800f554
 8007a18:	40023800 	.word	0x40023800
 8007a1c:	0800fb48 	.word	0x0800fb48
 8007a20:	20000000 	.word	0x20000000
 8007a24:	20000004 	.word	0x20000004

08007a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a2c:	b094      	sub	sp, #80	; 0x50
 8007a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	647b      	str	r3, [r7, #68]	; 0x44
 8007a34:	2300      	movs	r3, #0
 8007a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a38:	2300      	movs	r3, #0
 8007a3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a40:	4b79      	ldr	r3, [pc, #484]	; (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 030c 	and.w	r3, r3, #12
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d00d      	beq.n	8007a68 <HAL_RCC_GetSysClockFreq+0x40>
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	f200 80e1 	bhi.w	8007c14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_RCC_GetSysClockFreq+0x34>
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d003      	beq.n	8007a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a5a:	e0db      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a5c:	4b73      	ldr	r3, [pc, #460]	; (8007c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8007a5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007a60:	e0db      	b.n	8007c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a62:	4b73      	ldr	r3, [pc, #460]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x208>)
 8007a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a66:	e0d8      	b.n	8007c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a68:	4b6f      	ldr	r3, [pc, #444]	; (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a72:	4b6d      	ldr	r3, [pc, #436]	; (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d063      	beq.n	8007b46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a7e:	4b6a      	ldr	r3, [pc, #424]	; (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	099b      	lsrs	r3, r3, #6
 8007a84:	2200      	movs	r2, #0
 8007a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a90:	633b      	str	r3, [r7, #48]	; 0x30
 8007a92:	2300      	movs	r3, #0
 8007a94:	637b      	str	r3, [r7, #52]	; 0x34
 8007a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	f04f 0000 	mov.w	r0, #0
 8007aa2:	f04f 0100 	mov.w	r1, #0
 8007aa6:	0159      	lsls	r1, r3, #5
 8007aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007aac:	0150      	lsls	r0, r2, #5
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	1a51      	subs	r1, r2, r1
 8007ab6:	6139      	str	r1, [r7, #16]
 8007ab8:	4629      	mov	r1, r5
 8007aba:	eb63 0301 	sbc.w	r3, r3, r1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	f04f 0200 	mov.w	r2, #0
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007acc:	4659      	mov	r1, fp
 8007ace:	018b      	lsls	r3, r1, #6
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ad6:	4651      	mov	r1, sl
 8007ad8:	018a      	lsls	r2, r1, #6
 8007ada:	4651      	mov	r1, sl
 8007adc:	ebb2 0801 	subs.w	r8, r2, r1
 8007ae0:	4659      	mov	r1, fp
 8007ae2:	eb63 0901 	sbc.w	r9, r3, r1
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	f04f 0300 	mov.w	r3, #0
 8007aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007afa:	4690      	mov	r8, r2
 8007afc:	4699      	mov	r9, r3
 8007afe:	4623      	mov	r3, r4
 8007b00:	eb18 0303 	adds.w	r3, r8, r3
 8007b04:	60bb      	str	r3, [r7, #8]
 8007b06:	462b      	mov	r3, r5
 8007b08:	eb49 0303 	adc.w	r3, r9, r3
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	024b      	lsls	r3, r1, #9
 8007b1e:	4621      	mov	r1, r4
 8007b20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b24:	4621      	mov	r1, r4
 8007b26:	024a      	lsls	r2, r1, #9
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b2e:	2200      	movs	r2, #0
 8007b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b38:	f7f8 fb52 	bl	80001e0 <__aeabi_uldivmod>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4613      	mov	r3, r2
 8007b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b44:	e058      	b.n	8007bf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b46:	4b38      	ldr	r3, [pc, #224]	; (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	099b      	lsrs	r3, r3, #6
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	4611      	mov	r1, r2
 8007b52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b56:	623b      	str	r3, [r7, #32]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b60:	4642      	mov	r2, r8
 8007b62:	464b      	mov	r3, r9
 8007b64:	f04f 0000 	mov.w	r0, #0
 8007b68:	f04f 0100 	mov.w	r1, #0
 8007b6c:	0159      	lsls	r1, r3, #5
 8007b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b72:	0150      	lsls	r0, r2, #5
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4641      	mov	r1, r8
 8007b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b7e:	4649      	mov	r1, r9
 8007b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b98:	ebb2 040a 	subs.w	r4, r2, sl
 8007b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	00eb      	lsls	r3, r5, #3
 8007baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bae:	00e2      	lsls	r2, r4, #3
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	461d      	mov	r5, r3
 8007bb4:	4643      	mov	r3, r8
 8007bb6:	18e3      	adds	r3, r4, r3
 8007bb8:	603b      	str	r3, [r7, #0]
 8007bba:	464b      	mov	r3, r9
 8007bbc:	eb45 0303 	adc.w	r3, r5, r3
 8007bc0:	607b      	str	r3, [r7, #4]
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bce:	4629      	mov	r1, r5
 8007bd0:	028b      	lsls	r3, r1, #10
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bd8:	4621      	mov	r1, r4
 8007bda:	028a      	lsls	r2, r1, #10
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4619      	mov	r1, r3
 8007be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be2:	2200      	movs	r2, #0
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	61fa      	str	r2, [r7, #28]
 8007be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bec:	f7f8 faf8 	bl	80001e0 <__aeabi_uldivmod>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007bf8:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	0c1b      	lsrs	r3, r3, #16
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	3301      	adds	r3, #1
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c12:	e002      	b.n	8007c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c14:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8007c16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3750      	adds	r7, #80	; 0x50
 8007c20:	46bd      	mov	sp, r7
 8007c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c26:	bf00      	nop
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	00f42400 	.word	0x00f42400
 8007c30:	007a1200 	.word	0x007a1200

08007c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c34:	b480      	push	{r7}
 8007c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c38:	4b03      	ldr	r3, [pc, #12]	; (8007c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20000000 	.word	0x20000000

08007c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c50:	f7ff fff0 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007c54:	4602      	mov	r2, r0
 8007c56:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	0a9b      	lsrs	r3, r3, #10
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	4903      	ldr	r1, [pc, #12]	; (8007c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c62:	5ccb      	ldrb	r3, [r1, r3]
 8007c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	0800fb58 	.word	0x0800fb58

08007c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c78:	f7ff ffdc 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	0b5b      	lsrs	r3, r3, #13
 8007c84:	f003 0307 	and.w	r3, r3, #7
 8007c88:	4903      	ldr	r1, [pc, #12]	; (8007c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c8a:	5ccb      	ldrb	r3, [r1, r3]
 8007c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40023800 	.word	0x40023800
 8007c98:	0800fb58 	.word	0x0800fb58

08007c9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	220f      	movs	r2, #15
 8007caa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007cac:	4b12      	ldr	r3, [pc, #72]	; (8007cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 0203 	and.w	r2, r3, #3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007cb8:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007cd0:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	08db      	lsrs	r3, r3, #3
 8007cd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007cde:	4b07      	ldr	r3, [pc, #28]	; (8007cfc <HAL_RCC_GetClockConfig+0x60>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0207 	and.w	r2, r3, #7
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	601a      	str	r2, [r3, #0]
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	40023c00 	.word	0x40023c00

08007d00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b0f      	cmp	r3, #15
 8007d1e:	d904      	bls.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8007d20:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8007d24:	4834      	ldr	r0, [pc, #208]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007d26:	f7fa fba8 	bl	800247a <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d105      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d066      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d903      	bls.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	2b07      	cmp	r3, #7
 8007d50:	d904      	bls.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007d52:	f640 11de 	movw	r1, #2526	; 0x9de
 8007d56:	4828      	ldr	r0, [pc, #160]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007d58:	f7fa fb8f 	bl	800247a <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b31      	cmp	r3, #49	; 0x31
 8007d62:	d904      	bls.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007d6c:	d904      	bls.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007d6e:	f640 11df 	movw	r1, #2527	; 0x9df
 8007d72:	4821      	ldr	r0, [pc, #132]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007d74:	f7fa fb81 	bl	800247a <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d903      	bls.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2b3f      	cmp	r3, #63	; 0x3f
 8007d86:	d904      	bls.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8007d88:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8007d8c:	481a      	ldr	r0, [pc, #104]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007d8e:	f7fa fb74 	bl	800247a <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d92:	4b1a      	ldr	r3, [pc, #104]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d98:	f7fb f9fa 	bl	8003190 <HAL_GetTick>
 8007d9c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007da0:	f7fb f9f6 	bl	8003190 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e1b3      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007db2:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f0      	bne.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	019b      	lsls	r3, r3, #6
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	071b      	lsls	r3, r3, #28
 8007dd0:	490b      	ldr	r1, [pc, #44]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007dd8:	4b08      	ldr	r3, [pc, #32]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8007dda:	2201      	movs	r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dde:	f7fb f9d7 	bl	8003190 <HAL_GetTick>
 8007de2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007de4:	e00e      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007de6:	f7fb f9d3 	bl	8003190 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d907      	bls.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e190      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007df8:	0800f5c8 	.word	0x0800f5c8
 8007dfc:	42470068 	.word	0x42470068
 8007e00:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e04:	4b88      	ldr	r3, [pc, #544]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0ea      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 8173 	beq.w	8008104 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e26:	f000 80a6 	beq.w	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e32:	f000 80a0 	beq.w	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	4a7c      	ldr	r2, [pc, #496]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	f000 809a 	beq.w	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	4a7a      	ldr	r2, [pc, #488]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	f000 8094 	beq.w	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	4a78      	ldr	r2, [pc, #480]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	f000 808e 	beq.w	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	4a76      	ldr	r2, [pc, #472]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	f000 8088 	beq.w	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	4a74      	ldr	r2, [pc, #464]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	f000 8082 	beq.w	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	4a72      	ldr	r2, [pc, #456]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d07c      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	4a70      	ldr	r2, [pc, #448]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d077      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	4a6f      	ldr	r2, [pc, #444]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d072      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	4a6d      	ldr	r2, [pc, #436]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d06d      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	4a6c      	ldr	r2, [pc, #432]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d068      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	4a6a      	ldr	r2, [pc, #424]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d063      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	4a69      	ldr	r2, [pc, #420]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d05e      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	4a67      	ldr	r2, [pc, #412]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d059      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	4a66      	ldr	r2, [pc, #408]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d054      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	4a64      	ldr	r2, [pc, #400]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d04f      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	4a63      	ldr	r2, [pc, #396]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d04a      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	4a61      	ldr	r2, [pc, #388]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d045      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	4a60      	ldr	r2, [pc, #384]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d040      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	4a5e      	ldr	r2, [pc, #376]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d03b      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	4a5d      	ldr	r2, [pc, #372]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d036      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	4a5b      	ldr	r2, [pc, #364]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d031      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	4a5a      	ldr	r2, [pc, #360]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d02c      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	4a58      	ldr	r2, [pc, #352]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d027      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	4a57      	ldr	r2, [pc, #348]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d022      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	4a55      	ldr	r2, [pc, #340]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d01d      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	4a54      	ldr	r2, [pc, #336]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d018      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	4a52      	ldr	r2, [pc, #328]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d013      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	4a51      	ldr	r2, [pc, #324]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d00e      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	4a4f      	ldr	r2, [pc, #316]	; (800809c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d009      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	4a4e      	ldr	r2, [pc, #312]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d004      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007f6c:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8007f70:	484c      	ldr	r0, [pc, #304]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8007f72:	f7fa fa82 	bl	800247a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	4b2b      	ldr	r3, [pc, #172]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	4a2a      	ldr	r2, [pc, #168]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f84:	6413      	str	r3, [r2, #64]	; 0x40
 8007f86:	4b28      	ldr	r3, [pc, #160]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007f92:	4b45      	ldr	r3, [pc, #276]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a44      	ldr	r2, [pc, #272]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f9e:	f7fb f8f7 	bl	8003190 <HAL_GetTick>
 8007fa2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007fa4:	e008      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007fa6:	f7fb f8f3 	bl	8003190 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d901      	bls.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e0b0      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007fb8:	4b3b      	ldr	r3, [pc, #236]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0f0      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fc4:	4b18      	ldr	r3, [pc, #96]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fcc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d073      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d06c      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fe2:	4b11      	ldr	r3, [pc, #68]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fec:	4b2f      	ldr	r3, [pc, #188]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ff2:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007ff8:	4a0b      	ldr	r2, [pc, #44]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ffe:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b01      	cmp	r3, #1
 8008008:	d158      	bne.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800800a:	f7fb f8c1 	bl	8003190 <HAL_GetTick>
 800800e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008010:	e04e      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008012:	f7fb f8bd 	bl	8003190 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008020:	4293      	cmp	r3, r2
 8008022:	d945      	bls.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e078      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008028:	40023800 	.word	0x40023800
 800802c:	00020300 	.word	0x00020300
 8008030:	00030300 	.word	0x00030300
 8008034:	00040300 	.word	0x00040300
 8008038:	00050300 	.word	0x00050300
 800803c:	00060300 	.word	0x00060300
 8008040:	00070300 	.word	0x00070300
 8008044:	00080300 	.word	0x00080300
 8008048:	00090300 	.word	0x00090300
 800804c:	000a0300 	.word	0x000a0300
 8008050:	000b0300 	.word	0x000b0300
 8008054:	000c0300 	.word	0x000c0300
 8008058:	000d0300 	.word	0x000d0300
 800805c:	000e0300 	.word	0x000e0300
 8008060:	000f0300 	.word	0x000f0300
 8008064:	00100300 	.word	0x00100300
 8008068:	00110300 	.word	0x00110300
 800806c:	00120300 	.word	0x00120300
 8008070:	00130300 	.word	0x00130300
 8008074:	00140300 	.word	0x00140300
 8008078:	00150300 	.word	0x00150300
 800807c:	00160300 	.word	0x00160300
 8008080:	00170300 	.word	0x00170300
 8008084:	00180300 	.word	0x00180300
 8008088:	00190300 	.word	0x00190300
 800808c:	001a0300 	.word	0x001a0300
 8008090:	001b0300 	.word	0x001b0300
 8008094:	001c0300 	.word	0x001c0300
 8008098:	001d0300 	.word	0x001d0300
 800809c:	001e0300 	.word	0x001e0300
 80080a0:	001f0300 	.word	0x001f0300
 80080a4:	0800f5c8 	.word	0x0800f5c8
 80080a8:	40007000 	.word	0x40007000
 80080ac:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080b0:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80080b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d0aa      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080c8:	d10d      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80080ca:	4b16      	ldr	r3, [pc, #88]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80080da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080de:	4911      	ldr	r1, [pc, #68]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	608b      	str	r3, [r1, #8]
 80080e4:	e005      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80080e6:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	4a0e      	ldr	r2, [pc, #56]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80080ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80080f0:	6093      	str	r3, [r2, #8]
 80080f2:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80080f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fe:	4909      	ldr	r1, [pc, #36]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008100:	4313      	orrs	r3, r2
 8008102:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7d1a      	ldrb	r2, [r3, #20]
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8008116:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	40023800 	.word	0x40023800
 8008128:	424711e0 	.word	0x424711e0

0800812c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e0e2      	b.n	8008308 <HAL_RTC_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a72      	ldr	r2, [pc, #456]	; (8008310 <HAL_RTC_Init+0x1e4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d004      	beq.n	8008156 <HAL_RTC_Init+0x2a>
 800814c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008150:	4870      	ldr	r0, [pc, #448]	; (8008314 <HAL_RTC_Init+0x1e8>)
 8008152:	f7fa f992 	bl	800247a <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	d008      	beq.n	8008170 <HAL_RTC_Init+0x44>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d004      	beq.n	8008170 <HAL_RTC_Init+0x44>
 8008166:	f240 1105 	movw	r1, #261	; 0x105
 800816a:	486a      	ldr	r0, [pc, #424]	; (8008314 <HAL_RTC_Init+0x1e8>)
 800816c:	f7fa f985 	bl	800247a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	2b7f      	cmp	r3, #127	; 0x7f
 8008176:	d904      	bls.n	8008182 <HAL_RTC_Init+0x56>
 8008178:	f44f 7183 	mov.w	r1, #262	; 0x106
 800817c:	4865      	ldr	r0, [pc, #404]	; (8008314 <HAL_RTC_Init+0x1e8>)
 800817e:	f7fa f97c 	bl	800247a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800818a:	d304      	bcc.n	8008196 <HAL_RTC_Init+0x6a>
 800818c:	f240 1107 	movw	r1, #263	; 0x107
 8008190:	4860      	ldr	r0, [pc, #384]	; (8008314 <HAL_RTC_Init+0x1e8>)
 8008192:	f7fa f972 	bl	800247a <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d013      	beq.n	80081c6 <HAL_RTC_Init+0x9a>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081a6:	d00e      	beq.n	80081c6 <HAL_RTC_Init+0x9a>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081b0:	d009      	beq.n	80081c6 <HAL_RTC_Init+0x9a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80081ba:	d004      	beq.n	80081c6 <HAL_RTC_Init+0x9a>
 80081bc:	f44f 7184 	mov.w	r1, #264	; 0x108
 80081c0:	4854      	ldr	r0, [pc, #336]	; (8008314 <HAL_RTC_Init+0x1e8>)
 80081c2:	f7fa f95a 	bl	800247a <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <HAL_RTC_Init+0xb6>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081d6:	d004      	beq.n	80081e2 <HAL_RTC_Init+0xb6>
 80081d8:	f240 1109 	movw	r1, #265	; 0x109
 80081dc:	484d      	ldr	r0, [pc, #308]	; (8008314 <HAL_RTC_Init+0x1e8>)
 80081de:	f7fa f94c 	bl	800247a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d009      	beq.n	80081fe <HAL_RTC_Init+0xd2>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081f2:	d004      	beq.n	80081fe <HAL_RTC_Init+0xd2>
 80081f4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80081f8:	4846      	ldr	r0, [pc, #280]	; (8008314 <HAL_RTC_Init+0x1e8>)
 80081fa:	f7fa f93e 	bl	800247a <assert_failed>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7f5b      	ldrb	r3, [r3, #29]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d123      	bne.n	8008250 <HAL_RTC_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a41      	ldr	r2, [pc, #260]	; (8008318 <HAL_RTC_Init+0x1ec>)
 8008212:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a41      	ldr	r2, [pc, #260]	; (800831c <HAL_RTC_Init+0x1f0>)
 8008218:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a40      	ldr	r2, [pc, #256]	; (8008320 <HAL_RTC_Init+0x1f4>)
 800821e:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a40      	ldr	r2, [pc, #256]	; (8008324 <HAL_RTC_Init+0x1f8>)
 8008224:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a3f      	ldr	r2, [pc, #252]	; (8008328 <HAL_RTC_Init+0x1fc>)
 800822a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008230:	2b00      	cmp	r3, #0
 8008232:	d102      	bne.n	800823a <HAL_RTC_Init+0x10e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a3d      	ldr	r2, [pc, #244]	; (800832c <HAL_RTC_Init+0x200>)
 8008238:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <HAL_RTC_Init+0x124>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a38      	ldr	r2, [pc, #224]	; (8008330 <HAL_RTC_Init+0x204>)
 800824e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	22ca      	movs	r2, #202	; 0xca
 800825c:	625a      	str	r2, [r3, #36]	; 0x24
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2253      	movs	r2, #83	; 0x53
 8008264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fdc8 	bl	8008dfc <RTC_EnterInitMode>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d12c      	bne.n	80082d0 <HAL_RTC_Init+0x1a4>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008288:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6899      	ldr	r1, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	68d2      	ldr	r2, [r2, #12]
 80082b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6919      	ldr	r1, [r3, #16]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	041a      	lsls	r2, r3, #16
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fdcf 	bl	8008e6a <RTC_ExitInitMode>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d113      	bne.n	80082fe <HAL_RTC_Init+0x1d2>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082e4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699a      	ldr	r2, [r3, #24]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	22ff      	movs	r2, #255	; 0xff
 8008304:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	40002800 	.word	0x40002800
 8008314:	0800f640 	.word	0x0800f640
 8008318:	08008d99 	.word	0x08008d99
 800831c:	080090e5 	.word	0x080090e5
 8008320:	08008f27 	.word	0x08008f27
 8008324:	080090d1 	.word	0x080090d1
 8008328:	08008f3b 	.word	0x08008f3b
 800832c:	080025d9 	.word	0x080025d9
 8008330:	08002631 	.word	0x08002631

08008334 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d007      	beq.n	800835a <HAL_RTC_SetTime+0x26>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d004      	beq.n	800835a <HAL_RTC_SetTime+0x26>
 8008350:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8008354:	489a      	ldr	r0, [pc, #616]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 8008356:	f7fa f890 	bl	800247a <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008362:	d00d      	beq.n	8008380 <HAL_RTC_SetTime+0x4c>
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836c:	d008      	beq.n	8008380 <HAL_RTC_SetTime+0x4c>
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d004      	beq.n	8008380 <HAL_RTC_SetTime+0x4c>
 8008376:	f240 21b5 	movw	r1, #693	; 0x2b5
 800837a:	4891      	ldr	r0, [pc, #580]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 800837c:	f7fa f87d 	bl	800247a <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d009      	beq.n	800839c <HAL_RTC_SetTime+0x68>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008390:	d004      	beq.n	800839c <HAL_RTC_SetTime+0x68>
 8008392:	f240 21b6 	movw	r1, #694	; 0x2b6
 8008396:	488a      	ldr	r0, [pc, #552]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 8008398:	f7fa f86f 	bl	800247a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	7f1b      	ldrb	r3, [r3, #28]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <HAL_RTC_SetTime+0x74>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e107      	b.n	80085b8 <HAL_RTC_SetTime+0x284>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2201      	movs	r2, #1
 80083ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2202      	movs	r2, #2
 80083b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d15c      	bne.n	8008474 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01a      	beq.n	80083fe <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <HAL_RTC_SetTime+0xa4>
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b0c      	cmp	r3, #12
 80083d6:	d904      	bls.n	80083e2 <HAL_RTC_SetTime+0xae>
 80083d8:	f240 21c1 	movw	r1, #705	; 0x2c1
 80083dc:	4878      	ldr	r0, [pc, #480]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 80083de:	f7fa f84c 	bl	800247a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	78db      	ldrb	r3, [r3, #3]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d015      	beq.n	8008416 <HAL_RTC_SetTime+0xe2>
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	78db      	ldrb	r3, [r3, #3]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d011      	beq.n	8008416 <HAL_RTC_SetTime+0xe2>
 80083f2:	f240 21c2 	movw	r1, #706	; 0x2c2
 80083f6:	4872      	ldr	r0, [pc, #456]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 80083f8:	f7fa f83f 	bl	800247a <assert_failed>
 80083fc:	e00b      	b.n	8008416 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2200      	movs	r2, #0
 8008402:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b17      	cmp	r3, #23
 800840a:	d904      	bls.n	8008416 <HAL_RTC_SetTime+0xe2>
 800840c:	f240 21c7 	movw	r1, #711	; 0x2c7
 8008410:	486b      	ldr	r0, [pc, #428]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 8008412:	f7fa f832 	bl	800247a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b3b      	cmp	r3, #59	; 0x3b
 800841c:	d904      	bls.n	8008428 <HAL_RTC_SetTime+0xf4>
 800841e:	f240 21c9 	movw	r1, #713	; 0x2c9
 8008422:	4867      	ldr	r0, [pc, #412]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 8008424:	f7fa f829 	bl	800247a <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	789b      	ldrb	r3, [r3, #2]
 800842c:	2b3b      	cmp	r3, #59	; 0x3b
 800842e:	d904      	bls.n	800843a <HAL_RTC_SetTime+0x106>
 8008430:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008434:	4862      	ldr	r0, [pc, #392]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 8008436:	f7fa f820 	bl	800247a <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 fd38 	bl	8008eb4 <RTC_ByteToBcd2>
 8008444:	4603      	mov	r3, r0
 8008446:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fd31 	bl	8008eb4 <RTC_ByteToBcd2>
 8008452:	4603      	mov	r3, r0
 8008454:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008456:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	789b      	ldrb	r3, [r3, #2]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fd29 	bl	8008eb4 <RTC_ByteToBcd2>
 8008462:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008464:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	78db      	ldrb	r3, [r3, #3]
 800846c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	e062      	b.n	800853a <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d022      	beq.n	80084c8 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fd31 	bl	8008eee <RTC_Bcd2ToByte>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <HAL_RTC_SetTime+0x16e>
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 fd29 	bl	8008eee <RTC_Bcd2ToByte>
 800849c:	4603      	mov	r3, r0
 800849e:	2b0c      	cmp	r3, #12
 80084a0:	d904      	bls.n	80084ac <HAL_RTC_SetTime+0x178>
 80084a2:	f240 21d5 	movw	r1, #725	; 0x2d5
 80084a6:	4846      	ldr	r0, [pc, #280]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 80084a8:	f7f9 ffe7 	bl	800247a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	78db      	ldrb	r3, [r3, #3]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d019      	beq.n	80084e8 <HAL_RTC_SetTime+0x1b4>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	78db      	ldrb	r3, [r3, #3]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d015      	beq.n	80084e8 <HAL_RTC_SetTime+0x1b4>
 80084bc:	f240 21d6 	movw	r1, #726	; 0x2d6
 80084c0:	483f      	ldr	r0, [pc, #252]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 80084c2:	f7f9 ffda 	bl	800247a <assert_failed>
 80084c6:	e00f      	b.n	80084e8 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2200      	movs	r2, #0
 80084cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fd0b 	bl	8008eee <RTC_Bcd2ToByte>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b17      	cmp	r3, #23
 80084dc:	d904      	bls.n	80084e8 <HAL_RTC_SetTime+0x1b4>
 80084de:	f240 21db 	movw	r1, #731	; 0x2db
 80084e2:	4837      	ldr	r0, [pc, #220]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 80084e4:	f7f9 ffc9 	bl	800247a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 fcfe 	bl	8008eee <RTC_Bcd2ToByte>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b3b      	cmp	r3, #59	; 0x3b
 80084f6:	d904      	bls.n	8008502 <HAL_RTC_SetTime+0x1ce>
 80084f8:	f240 21dd 	movw	r1, #733	; 0x2dd
 80084fc:	4830      	ldr	r0, [pc, #192]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 80084fe:	f7f9 ffbc 	bl	800247a <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	789b      	ldrb	r3, [r3, #2]
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fcf1 	bl	8008eee <RTC_Bcd2ToByte>
 800850c:	4603      	mov	r3, r0
 800850e:	2b3b      	cmp	r3, #59	; 0x3b
 8008510:	d904      	bls.n	800851c <HAL_RTC_SetTime+0x1e8>
 8008512:	f240 21de 	movw	r1, #734	; 0x2de
 8008516:	482a      	ldr	r0, [pc, #168]	; (80085c0 <HAL_RTC_SetTime+0x28c>)
 8008518:	f7f9 ffaf 	bl	800247a <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008528:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800852e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	78db      	ldrb	r3, [r3, #3]
 8008534:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008536:	4313      	orrs	r3, r2
 8008538:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	22ca      	movs	r2, #202	; 0xca
 8008540:	625a      	str	r2, [r3, #36]	; 0x24
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2253      	movs	r2, #83	; 0x53
 8008548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 fc56 	bl	8008dfc <RTC_EnterInitMode>
 8008550:	4603      	mov	r3, r0
 8008552:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008554:	7cfb      	ldrb	r3, [r7, #19]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d120      	bne.n	800859c <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008564:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008568:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008578:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6899      	ldr	r1, [r3, #8]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	431a      	orrs	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 fc69 	bl	8008e6a <RTC_ExitInitMode>
 8008598:	4603      	mov	r3, r0
 800859a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800859c:	7cfb      	ldrb	r3, [r7, #19]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	22ff      	movs	r2, #255	; 0xff
 80085ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	771a      	strb	r2, [r3, #28]

  return status;
 80085b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd90      	pop	{r4, r7, pc}
 80085c0:	0800f640 	.word	0x0800f640

080085c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80085c4:	b590      	push	{r4, r7, lr}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <HAL_RTC_SetDate+0x26>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d004      	beq.n	80085ea <HAL_RTC_SetDate+0x26>
 80085e0:	f240 3153 	movw	r1, #851	; 0x353
 80085e4:	487c      	ldr	r0, [pc, #496]	; (80087d8 <HAL_RTC_SetDate+0x214>)
 80085e6:	f7f9 ff48 	bl	800247a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	7f1b      	ldrb	r3, [r3, #28]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d101      	bne.n	80085f6 <HAL_RTC_SetDate+0x32>
 80085f2:	2302      	movs	r3, #2
 80085f4:	e0ec      	b.n	80087d0 <HAL_RTC_SetDate+0x20c>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2201      	movs	r2, #1
 80085fa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2202      	movs	r2, #2
 8008600:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10e      	bne.n	8008626 <HAL_RTC_SetDate+0x62>
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	785b      	ldrb	r3, [r3, #1]
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b00      	cmp	r3, #0
 8008612:	d008      	beq.n	8008626 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	f023 0310 	bic.w	r3, r3, #16
 800861c:	b2db      	uxtb	r3, r3
 800861e:	330a      	adds	r3, #10
 8008620:	b2da      	uxtb	r2, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d01c      	beq.n	8008668 <HAL_RTC_SetDate+0xa4>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d018      	beq.n	8008668 <HAL_RTC_SetDate+0xa4>
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b03      	cmp	r3, #3
 800863c:	d014      	beq.n	8008668 <HAL_RTC_SetDate+0xa4>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b04      	cmp	r3, #4
 8008644:	d010      	beq.n	8008668 <HAL_RTC_SetDate+0xa4>
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b05      	cmp	r3, #5
 800864c:	d00c      	beq.n	8008668 <HAL_RTC_SetDate+0xa4>
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	2b06      	cmp	r3, #6
 8008654:	d008      	beq.n	8008668 <HAL_RTC_SetDate+0xa4>
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b07      	cmp	r3, #7
 800865c:	d004      	beq.n	8008668 <HAL_RTC_SetDate+0xa4>
 800865e:	f240 315f 	movw	r1, #863	; 0x35f
 8008662:	485d      	ldr	r0, [pc, #372]	; (80087d8 <HAL_RTC_SetDate+0x214>)
 8008664:	f7f9 ff09 	bl	800247a <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d13f      	bne.n	80086ee <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	78db      	ldrb	r3, [r3, #3]
 8008672:	2b63      	cmp	r3, #99	; 0x63
 8008674:	d904      	bls.n	8008680 <HAL_RTC_SetDate+0xbc>
 8008676:	f240 3163 	movw	r1, #867	; 0x363
 800867a:	4857      	ldr	r0, [pc, #348]	; (80087d8 <HAL_RTC_SetDate+0x214>)
 800867c:	f7f9 fefd 	bl	800247a <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	785b      	ldrb	r3, [r3, #1]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <HAL_RTC_SetDate+0xcc>
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	785b      	ldrb	r3, [r3, #1]
 800868c:	2b0c      	cmp	r3, #12
 800868e:	d904      	bls.n	800869a <HAL_RTC_SetDate+0xd6>
 8008690:	f44f 7159 	mov.w	r1, #868	; 0x364
 8008694:	4850      	ldr	r0, [pc, #320]	; (80087d8 <HAL_RTC_SetDate+0x214>)
 8008696:	f7f9 fef0 	bl	800247a <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	789b      	ldrb	r3, [r3, #2]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_RTC_SetDate+0xe6>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	789b      	ldrb	r3, [r3, #2]
 80086a6:	2b1f      	cmp	r3, #31
 80086a8:	d904      	bls.n	80086b4 <HAL_RTC_SetDate+0xf0>
 80086aa:	f240 3165 	movw	r1, #869	; 0x365
 80086ae:	484a      	ldr	r0, [pc, #296]	; (80087d8 <HAL_RTC_SetDate+0x214>)
 80086b0:	f7f9 fee3 	bl	800247a <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	78db      	ldrb	r3, [r3, #3]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fbfb 	bl	8008eb4 <RTC_ByteToBcd2>
 80086be:	4603      	mov	r3, r0
 80086c0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	785b      	ldrb	r3, [r3, #1]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fbf4 	bl	8008eb4 <RTC_ByteToBcd2>
 80086cc:	4603      	mov	r3, r0
 80086ce:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80086d0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	789b      	ldrb	r3, [r3, #2]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fbec 	bl	8008eb4 <RTC_ByteToBcd2>
 80086dc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80086de:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80086e8:	4313      	orrs	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	e045      	b.n	800877a <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	78db      	ldrb	r3, [r3, #3]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fbfb 	bl	8008eee <RTC_Bcd2ToByte>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b63      	cmp	r3, #99	; 0x63
 80086fc:	d904      	bls.n	8008708 <HAL_RTC_SetDate+0x144>
 80086fe:	f240 316e 	movw	r1, #878	; 0x36e
 8008702:	4835      	ldr	r0, [pc, #212]	; (80087d8 <HAL_RTC_SetDate+0x214>)
 8008704:	f7f9 feb9 	bl	800247a <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fbee 	bl	8008eee <RTC_Bcd2ToByte>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d007      	beq.n	8008728 <HAL_RTC_SetDate+0x164>
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	4618      	mov	r0, r3
 800871e:	f000 fbe6 	bl	8008eee <RTC_Bcd2ToByte>
 8008722:	4603      	mov	r3, r0
 8008724:	2b0c      	cmp	r3, #12
 8008726:	d904      	bls.n	8008732 <HAL_RTC_SetDate+0x16e>
 8008728:	f240 316f 	movw	r1, #879	; 0x36f
 800872c:	482a      	ldr	r0, [pc, #168]	; (80087d8 <HAL_RTC_SetDate+0x214>)
 800872e:	f7f9 fea4 	bl	800247a <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	789b      	ldrb	r3, [r3, #2]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fbd9 	bl	8008eee <RTC_Bcd2ToByte>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <HAL_RTC_SetDate+0x18e>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	789b      	ldrb	r3, [r3, #2]
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fbd1 	bl	8008eee <RTC_Bcd2ToByte>
 800874c:	4603      	mov	r3, r0
 800874e:	2b1f      	cmp	r3, #31
 8008750:	d904      	bls.n	800875c <HAL_RTC_SetDate+0x198>
 8008752:	f44f 715c 	mov.w	r1, #880	; 0x370
 8008756:	4820      	ldr	r0, [pc, #128]	; (80087d8 <HAL_RTC_SetDate+0x214>)
 8008758:	f7f9 fe8f 	bl	800247a <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	78db      	ldrb	r3, [r3, #3]
 8008760:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	785b      	ldrb	r3, [r3, #1]
 8008766:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008768:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800876e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008776:	4313      	orrs	r3, r2
 8008778:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	22ca      	movs	r2, #202	; 0xca
 8008780:	625a      	str	r2, [r3, #36]	; 0x24
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2253      	movs	r2, #83	; 0x53
 8008788:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 fb36 	bl	8008dfc <RTC_EnterInitMode>
 8008790:	4603      	mov	r3, r0
 8008792:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008794:	7cfb      	ldrb	r3, [r7, #19]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10c      	bne.n	80087b4 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80087a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fb5d 	bl	8008e6a <RTC_ExitInitMode>
 80087b0:	4603      	mov	r3, r0
 80087b2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80087b4:	7cfb      	ldrb	r3, [r7, #19]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d102      	bne.n	80087c0 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	22ff      	movs	r2, #255	; 0xff
 80087c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	771a      	strb	r2, [r3, #28]

  return status;
 80087ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd90      	pop	{r4, r7, pc}
 80087d8:	0800f640 	.word	0x0800f640

080087dc <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80087dc:	b590      	push	{r4, r7, lr}
 80087de:	b089      	sub	sp, #36	; 0x24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <HAL_RTC_SetAlarm+0x2e>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d004      	beq.n	800880a <HAL_RTC_SetAlarm+0x2e>
 8008800:	f240 31e7 	movw	r1, #999	; 0x3e7
 8008804:	4876      	ldr	r0, [pc, #472]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 8008806:	f7f9 fe38 	bl	800247a <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008812:	d009      	beq.n	8008828 <HAL_RTC_SetAlarm+0x4c>
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800881c:	d004      	beq.n	8008828 <HAL_RTC_SetAlarm+0x4c>
 800881e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008822:	486f      	ldr	r0, [pc, #444]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 8008824:	f7f9 fe29 	bl	800247a <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <HAL_RTC_SetAlarm+0x62>
 8008834:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8008838:	4869      	ldr	r0, [pc, #420]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 800883a:	f7f9 fe1e 	bl	800247a <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <HAL_RTC_SetAlarm+0x7e>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800884e:	d004      	beq.n	800885a <HAL_RTC_SetAlarm+0x7e>
 8008850:	f240 31ea 	movw	r1, #1002	; 0x3ea
 8008854:	4862      	ldr	r0, [pc, #392]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 8008856:	f7f9 fe10 	bl	800247a <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008862:	d304      	bcc.n	800886e <HAL_RTC_SetAlarm+0x92>
 8008864:	f240 31eb 	movw	r1, #1003	; 0x3eb
 8008868:	485d      	ldr	r0, [pc, #372]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 800886a:	f7f9 fe06 	bl	800247a <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d04f      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800887e:	d04a      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008888:	d045      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008892:	d040      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800889c:	d03b      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80088a6:	d036      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80088b0:	d031      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80088ba:	d02c      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088c4:	d027      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80088ce:	d022      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80088d8:	d01d      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80088e2:	d018      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80088ec:	d013      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80088f6:	d00e      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8008900:	d009      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800890a:	d004      	beq.n	8008916 <HAL_RTC_SetAlarm+0x13a>
 800890c:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 8008910:	4833      	ldr	r0, [pc, #204]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 8008912:	f7f9 fdb2 	bl	800247a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	7f1b      	ldrb	r3, [r3, #28]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d101      	bne.n	8008922 <HAL_RTC_SetAlarm+0x146>
 800891e:	2302      	movs	r3, #2
 8008920:	e235      	b.n	8008d8e <HAL_RTC_SetAlarm+0x5b2>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2202      	movs	r2, #2
 800892c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 80ad 	bne.w	8008a90 <HAL_RTC_SetAlarm+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d01a      	beq.n	800897a <HAL_RTC_SetAlarm+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <HAL_RTC_SetAlarm+0x178>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b0c      	cmp	r3, #12
 8008952:	d904      	bls.n	800895e <HAL_RTC_SetAlarm+0x182>
 8008954:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8008958:	4821      	ldr	r0, [pc, #132]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 800895a:	f7f9 fd8e 	bl	800247a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	78db      	ldrb	r3, [r3, #3]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d015      	beq.n	8008992 <HAL_RTC_SetAlarm+0x1b6>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	78db      	ldrb	r3, [r3, #3]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d011      	beq.n	8008992 <HAL_RTC_SetAlarm+0x1b6>
 800896e:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8008972:	481b      	ldr	r0, [pc, #108]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 8008974:	f7f9 fd81 	bl	800247a <assert_failed>
 8008978:	e00b      	b.n	8008992 <HAL_RTC_SetAlarm+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2200      	movs	r2, #0
 800897e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b17      	cmp	r3, #23
 8008986:	d904      	bls.n	8008992 <HAL_RTC_SetAlarm+0x1b6>
 8008988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800898c:	4814      	ldr	r0, [pc, #80]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 800898e:	f7f9 fd74 	bl	800247a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	785b      	ldrb	r3, [r3, #1]
 8008996:	2b3b      	cmp	r3, #59	; 0x3b
 8008998:	d904      	bls.n	80089a4 <HAL_RTC_SetAlarm+0x1c8>
 800899a:	f240 4102 	movw	r1, #1026	; 0x402
 800899e:	4810      	ldr	r0, [pc, #64]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 80089a0:	f7f9 fd6b 	bl	800247a <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	789b      	ldrb	r3, [r3, #2]
 80089a8:	2b3b      	cmp	r3, #59	; 0x3b
 80089aa:	d904      	bls.n	80089b6 <HAL_RTC_SetAlarm+0x1da>
 80089ac:	f240 4103 	movw	r1, #1027	; 0x403
 80089b0:	480b      	ldr	r0, [pc, #44]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 80089b2:	f7f9 fd62 	bl	800247a <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d112      	bne.n	80089e4 <HAL_RTC_SetAlarm+0x208>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <HAL_RTC_SetAlarm+0x1f6>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089ce:	2b1f      	cmp	r3, #31
 80089d0:	d930      	bls.n	8008a34 <HAL_RTC_SetAlarm+0x258>
 80089d2:	f240 4107 	movw	r1, #1031	; 0x407
 80089d6:	4802      	ldr	r0, [pc, #8]	; (80089e0 <HAL_RTC_SetAlarm+0x204>)
 80089d8:	f7f9 fd4f 	bl	800247a <assert_failed>
 80089dc:	e02a      	b.n	8008a34 <HAL_RTC_SetAlarm+0x258>
 80089de:	bf00      	nop
 80089e0:	0800f640 	.word	0x0800f640
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d022      	beq.n	8008a34 <HAL_RTC_SetAlarm+0x258>
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d01d      	beq.n	8008a34 <HAL_RTC_SetAlarm+0x258>
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d018      	beq.n	8008a34 <HAL_RTC_SetAlarm+0x258>
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d013      	beq.n	8008a34 <HAL_RTC_SetAlarm+0x258>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a12:	2b05      	cmp	r3, #5
 8008a14:	d00e      	beq.n	8008a34 <HAL_RTC_SetAlarm+0x258>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a1c:	2b06      	cmp	r3, #6
 8008a1e:	d009      	beq.n	8008a34 <HAL_RTC_SetAlarm+0x258>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a26:	2b07      	cmp	r3, #7
 8008a28:	d004      	beq.n	8008a34 <HAL_RTC_SetAlarm+0x258>
 8008a2a:	f240 410b 	movw	r1, #1035	; 0x40b
 8008a2e:	48a1      	ldr	r0, [pc, #644]	; (8008cb4 <HAL_RTC_SetAlarm+0x4d8>)
 8008a30:	f7f9 fd23 	bl	800247a <assert_failed>
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fa3b 	bl	8008eb4 <RTC_ByteToBcd2>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	785b      	ldrb	r3, [r3, #1]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 fa34 	bl	8008eb4 <RTC_ByteToBcd2>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a50:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	789b      	ldrb	r3, [r3, #2]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fa2c 	bl	8008eb4 <RTC_ByteToBcd2>
 8008a5c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a5e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	78db      	ldrb	r3, [r3, #3]
 8008a66:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008a68:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fa1e 	bl	8008eb4 <RTC_ByteToBcd2>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008a7c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008a84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	61fb      	str	r3, [r7, #28]
 8008a8e:	e0cd      	b.n	8008c2c <HAL_RTC_SetAlarm+0x450>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d022      	beq.n	8008ae4 <HAL_RTC_SetAlarm+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 fa23 	bl	8008eee <RTC_Bcd2ToByte>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d007      	beq.n	8008abe <HAL_RTC_SetAlarm+0x2e2>
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fa1b 	bl	8008eee <RTC_Bcd2ToByte>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b0c      	cmp	r3, #12
 8008abc:	d904      	bls.n	8008ac8 <HAL_RTC_SetAlarm+0x2ec>
 8008abe:	f240 411a 	movw	r1, #1050	; 0x41a
 8008ac2:	487c      	ldr	r0, [pc, #496]	; (8008cb4 <HAL_RTC_SetAlarm+0x4d8>)
 8008ac4:	f7f9 fcd9 	bl	800247a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	78db      	ldrb	r3, [r3, #3]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d019      	beq.n	8008b04 <HAL_RTC_SetAlarm+0x328>
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	78db      	ldrb	r3, [r3, #3]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d015      	beq.n	8008b04 <HAL_RTC_SetAlarm+0x328>
 8008ad8:	f240 411b 	movw	r1, #1051	; 0x41b
 8008adc:	4875      	ldr	r0, [pc, #468]	; (8008cb4 <HAL_RTC_SetAlarm+0x4d8>)
 8008ade:	f7f9 fccc 	bl	800247a <assert_failed>
 8008ae2:	e00f      	b.n	8008b04 <HAL_RTC_SetAlarm+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 f9fd 	bl	8008eee <RTC_Bcd2ToByte>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b17      	cmp	r3, #23
 8008af8:	d904      	bls.n	8008b04 <HAL_RTC_SetAlarm+0x328>
 8008afa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8008afe:	486d      	ldr	r0, [pc, #436]	; (8008cb4 <HAL_RTC_SetAlarm+0x4d8>)
 8008b00:	f7f9 fcbb 	bl	800247a <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	785b      	ldrb	r3, [r3, #1]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 f9f0 	bl	8008eee <RTC_Bcd2ToByte>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b3b      	cmp	r3, #59	; 0x3b
 8008b12:	d904      	bls.n	8008b1e <HAL_RTC_SetAlarm+0x342>
 8008b14:	f240 4123 	movw	r1, #1059	; 0x423
 8008b18:	4866      	ldr	r0, [pc, #408]	; (8008cb4 <HAL_RTC_SetAlarm+0x4d8>)
 8008b1a:	f7f9 fcae 	bl	800247a <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	789b      	ldrb	r3, [r3, #2]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 f9e3 	bl	8008eee <RTC_Bcd2ToByte>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b3b      	cmp	r3, #59	; 0x3b
 8008b2c:	d904      	bls.n	8008b38 <HAL_RTC_SetAlarm+0x35c>
 8008b2e:	f240 4124 	movw	r1, #1060	; 0x424
 8008b32:	4860      	ldr	r0, [pc, #384]	; (8008cb4 <HAL_RTC_SetAlarm+0x4d8>)
 8008b34:	f7f9 fca1 	bl	800247a <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d117      	bne.n	8008b70 <HAL_RTC_SetAlarm+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f9d1 	bl	8008eee <RTC_Bcd2ToByte>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d008      	beq.n	8008b64 <HAL_RTC_SetAlarm+0x388>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 f9c8 	bl	8008eee <RTC_Bcd2ToByte>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b1f      	cmp	r3, #31
 8008b62:	d949      	bls.n	8008bf8 <HAL_RTC_SetAlarm+0x41c>
 8008b64:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8008b68:	4852      	ldr	r0, [pc, #328]	; (8008cb4 <HAL_RTC_SetAlarm+0x4d8>)
 8008b6a:	f7f9 fc86 	bl	800247a <assert_failed>
 8008b6e:	e043      	b.n	8008bf8 <HAL_RTC_SetAlarm+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 f9b9 	bl	8008eee <RTC_Bcd2ToByte>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d03a      	beq.n	8008bf8 <HAL_RTC_SetAlarm+0x41c>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 f9b0 	bl	8008eee <RTC_Bcd2ToByte>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d031      	beq.n	8008bf8 <HAL_RTC_SetAlarm+0x41c>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f9a7 	bl	8008eee <RTC_Bcd2ToByte>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d028      	beq.n	8008bf8 <HAL_RTC_SetAlarm+0x41c>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 f99e 	bl	8008eee <RTC_Bcd2ToByte>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d01f      	beq.n	8008bf8 <HAL_RTC_SetAlarm+0x41c>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 f995 	bl	8008eee <RTC_Bcd2ToByte>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	d016      	beq.n	8008bf8 <HAL_RTC_SetAlarm+0x41c>
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f98c 	bl	8008eee <RTC_Bcd2ToByte>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b06      	cmp	r3, #6
 8008bda:	d00d      	beq.n	8008bf8 <HAL_RTC_SetAlarm+0x41c>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f983 	bl	8008eee <RTC_Bcd2ToByte>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b07      	cmp	r3, #7
 8008bec:	d004      	beq.n	8008bf8 <HAL_RTC_SetAlarm+0x41c>
 8008bee:	f240 412c 	movw	r1, #1068	; 0x42c
 8008bf2:	4830      	ldr	r0, [pc, #192]	; (8008cb4 <HAL_RTC_SetAlarm+0x4d8>)
 8008bf4:	f7f9 fc41 	bl	800247a <assert_failed>
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	785b      	ldrb	r3, [r3, #1]
 8008c02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008c04:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008c0a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	78db      	ldrb	r3, [r3, #3]
 8008c10:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008c12:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c1a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008c1c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008c22:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008c34:	4313      	orrs	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	22ca      	movs	r2, #202	; 0xca
 8008c3e:	625a      	str	r2, [r3, #36]	; 0x24
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2253      	movs	r2, #83	; 0x53
 8008c46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c50:	d14a      	bne.n	8008ce8 <HAL_RTC_SetAlarm+0x50c>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c60:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c70:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008c82:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c84:	f7fa fa84 	bl	8003190 <HAL_GetTick>
 8008c88:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008c8a:	e015      	b.n	8008cb8 <HAL_RTC_SetAlarm+0x4dc>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c8c:	f7fa fa80 	bl	8003190 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c9a:	d90d      	bls.n	8008cb8 <HAL_RTC_SetAlarm+0x4dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	22ff      	movs	r2, #255	; 0xff
 8008ca2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e06c      	b.n	8008d8e <HAL_RTC_SetAlarm+0x5b2>
 8008cb4:	0800f640 	.word	0x0800f640
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0e2      	beq.n	8008c8c <HAL_RTC_SetAlarm+0x4b0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689a      	ldr	r2, [r3, #8]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ce4:	609a      	str	r2, [r3, #8]
 8008ce6:	e047      	b.n	8008d78 <HAL_RTC_SetAlarm+0x59c>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008cf6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d06:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008d18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d1a:	f7fa fa39 	bl	8003190 <HAL_GetTick>
 8008d1e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008d20:	e013      	b.n	8008d4a <HAL_RTC_SetAlarm+0x56e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d22:	f7fa fa35 	bl	8003190 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d30:	d90b      	bls.n	8008d4a <HAL_RTC_SetAlarm+0x56e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	22ff      	movs	r2, #255	; 0xff
 8008d38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2203      	movs	r2, #3
 8008d3e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e021      	b.n	8008d8e <HAL_RTC_SetAlarm+0x5b2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f003 0302 	and.w	r3, r3, #2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d0e4      	beq.n	8008d22 <HAL_RTC_SetAlarm+0x546>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689a      	ldr	r2, [r3, #8]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d76:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	22ff      	movs	r2, #255	; 0xff
 8008d7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2201      	movs	r2, #1
 8008d84:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3724      	adds	r7, #36	; 0x24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd90      	pop	{r4, r7, pc}
 8008d96:	bf00      	nop

08008d98 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68da      	ldr	r2, [r3, #12]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008dc6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008dc8:	f7fa f9e2 	bl	8003190 <HAL_GetTick>
 8008dcc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008dce:	e009      	b.n	8008de4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008dd0:	f7fa f9de 	bl	8003190 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dde:	d901      	bls.n	8008de4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008de0:	2303      	movs	r3, #3
 8008de2:	e007      	b.n	8008df4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0ee      	beq.n	8008dd0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d122      	bne.n	8008e60 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e2a:	f7fa f9b1 	bl	8003190 <HAL_GetTick>
 8008e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008e30:	e00c      	b.n	8008e4c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e32:	f7fa f9ad 	bl	8003190 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e40:	d904      	bls.n	8008e4c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2204      	movs	r2, #4
 8008e46:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d102      	bne.n	8008e60 <RTC_EnterInitMode+0x64>
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d1e8      	bne.n	8008e32 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e84:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f003 0320 	and.w	r3, r3, #32
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10a      	bne.n	8008eaa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7ff ff89 	bl	8008dac <HAL_RTC_WaitForSynchro>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2204      	movs	r2, #4
 8008ea4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008ec2:	e005      	b.n	8008ed0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	3b0a      	subs	r3, #10
 8008ece:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b09      	cmp	r3, #9
 8008ed4:	d8f6      	bhi.n	8008ec4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	011b      	lsls	r3, r3, #4
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	b2db      	uxtb	r3, r3
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008efc:	79fb      	ldrb	r3, [r7, #7]
 8008efe:	091b      	lsrs	r3, r3, #4
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	461a      	mov	r2, r3
 8008f04:	0092      	lsls	r2, r2, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	4413      	add	r3, r2
 8008f18:	b2db      	uxtb	r3, r3
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b083      	sub	sp, #12
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8008f2e:	bf00      	nop
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8008f42:	bf00      	nop
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
	...

08008f50 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d013      	beq.n	8008f8e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d010      	beq.n	8008f8e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d00d      	beq.n	8008f8e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d00a      	beq.n	8008f8e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b04      	cmp	r3, #4
 8008f7c:	d007      	beq.n	8008f8e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b06      	cmp	r3, #6
 8008f82:	d004      	beq.n	8008f8e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8008f84:	f240 3165 	movw	r1, #869	; 0x365
 8008f88:	4850      	ldr	r0, [pc, #320]	; (80090cc <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 8008f8a:	f7f9 fa76 	bl	800247a <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f94:	d304      	bcc.n	8008fa0 <HAL_RTCEx_SetWakeUpTimer+0x50>
 8008f96:	f240 3166 	movw	r1, #870	; 0x366
 8008f9a:	484c      	ldr	r0, [pc, #304]	; (80090cc <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 8008f9c:	f7f9 fa6d 	bl	800247a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	7f1b      	ldrb	r3, [r3, #28]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d101      	bne.n	8008fac <HAL_RTCEx_SetWakeUpTimer+0x5c>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	e08a      	b.n	80090c2 <HAL_RTCEx_SetWakeUpTimer+0x172>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	22ca      	movs	r2, #202	; 0xca
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2253      	movs	r2, #83	; 0x53
 8008fc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d01e      	beq.n	8009014 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    tickstart = HAL_GetTick();
 8008fd6:	f7fa f8db 	bl	8003190 <HAL_GetTick>
 8008fda:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8008fdc:	e013      	b.n	8009006 <HAL_RTCEx_SetWakeUpTimer+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008fde:	f7fa f8d7 	bl	8003190 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fec:	d90b      	bls.n	8009006 <HAL_RTCEx_SetWakeUpTimer+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	22ff      	movs	r2, #255	; 0xff
 8008ff4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2203      	movs	r2, #3
 8008ffa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e05d      	b.n	80090c2 <HAL_RTCEx_SetWakeUpTimer+0x172>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e4      	bne.n	8008fde <HAL_RTCEx_SetWakeUpTimer+0x8e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009022:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	b2da      	uxtb	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009034:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009036:	f7fa f8ab 	bl	8003190 <HAL_GetTick>
 800903a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800903c:	e013      	b.n	8009066 <HAL_RTCEx_SetWakeUpTimer+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800903e:	f7fa f8a7 	bl	8003190 <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800904c:	d90b      	bls.n	8009066 <HAL_RTCEx_SetWakeUpTimer+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	22ff      	movs	r2, #255	; 0xff
 8009054:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2203      	movs	r2, #3
 800905a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e02d      	b.n	80090c2 <HAL_RTCEx_SetWakeUpTimer+0x172>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0e4      	beq.n	800903e <HAL_RTCEx_SetWakeUpTimer+0xee>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0207 	bic.w	r2, r2, #7
 8009082:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6899      	ldr	r1, [r3, #8]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	430a      	orrs	r2, r1
 8009092:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689a      	ldr	r2, [r3, #8]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090aa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	22ff      	movs	r2, #255	; 0xff
 80090b2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2201      	movs	r2, #1
 80090b8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3718      	adds	r7, #24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	0800f6b4 	.word	0x0800f6b4

080090d0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e1ac      	b.n	8009464 <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a75      	ldr	r2, [pc, #468]	; (80092e4 <HAL_SPI_Init+0x1ec>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d018      	beq.n	8009146 <HAL_SPI_Init+0x4e>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a73      	ldr	r2, [pc, #460]	; (80092e8 <HAL_SPI_Init+0x1f0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d013      	beq.n	8009146 <HAL_SPI_Init+0x4e>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a72      	ldr	r2, [pc, #456]	; (80092ec <HAL_SPI_Init+0x1f4>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00e      	beq.n	8009146 <HAL_SPI_Init+0x4e>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a70      	ldr	r2, [pc, #448]	; (80092f0 <HAL_SPI_Init+0x1f8>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d009      	beq.n	8009146 <HAL_SPI_Init+0x4e>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a6f      	ldr	r2, [pc, #444]	; (80092f4 <HAL_SPI_Init+0x1fc>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d004      	beq.n	8009146 <HAL_SPI_Init+0x4e>
 800913c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009140:	486d      	ldr	r0, [pc, #436]	; (80092f8 <HAL_SPI_Init+0x200>)
 8009142:	f7f9 f99a 	bl	800247a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <HAL_SPI_Init+0x6a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009156:	d004      	beq.n	8009162 <HAL_SPI_Init+0x6a>
 8009158:	f240 1141 	movw	r1, #321	; 0x141
 800915c:	4866      	ldr	r0, [pc, #408]	; (80092f8 <HAL_SPI_Init+0x200>)
 800915e:	f7f9 f98c 	bl	800247a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00e      	beq.n	8009188 <HAL_SPI_Init+0x90>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009172:	d009      	beq.n	8009188 <HAL_SPI_Init+0x90>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800917c:	d004      	beq.n	8009188 <HAL_SPI_Init+0x90>
 800917e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8009182:	485d      	ldr	r0, [pc, #372]	; (80092f8 <HAL_SPI_Init+0x200>)
 8009184:	f7f9 f979 	bl	800247a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009190:	d008      	beq.n	80091a4 <HAL_SPI_Init+0xac>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <HAL_SPI_Init+0xac>
 800919a:	f240 1143 	movw	r1, #323	; 0x143
 800919e:	4856      	ldr	r0, [pc, #344]	; (80092f8 <HAL_SPI_Init+0x200>)
 80091a0:	f7f9 f96b 	bl	800247a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ac:	d00d      	beq.n	80091ca <HAL_SPI_Init+0xd2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d009      	beq.n	80091ca <HAL_SPI_Init+0xd2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091be:	d004      	beq.n	80091ca <HAL_SPI_Init+0xd2>
 80091c0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80091c4:	484c      	ldr	r0, [pc, #304]	; (80092f8 <HAL_SPI_Init+0x200>)
 80091c6:	f7f9 f958 	bl	800247a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d020      	beq.n	8009214 <HAL_SPI_Init+0x11c>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	d01c      	beq.n	8009214 <HAL_SPI_Init+0x11c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	2b10      	cmp	r3, #16
 80091e0:	d018      	beq.n	8009214 <HAL_SPI_Init+0x11c>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	2b18      	cmp	r3, #24
 80091e8:	d014      	beq.n	8009214 <HAL_SPI_Init+0x11c>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d010      	beq.n	8009214 <HAL_SPI_Init+0x11c>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	2b28      	cmp	r3, #40	; 0x28
 80091f8:	d00c      	beq.n	8009214 <HAL_SPI_Init+0x11c>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	69db      	ldr	r3, [r3, #28]
 80091fe:	2b30      	cmp	r3, #48	; 0x30
 8009200:	d008      	beq.n	8009214 <HAL_SPI_Init+0x11c>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	2b38      	cmp	r3, #56	; 0x38
 8009208:	d004      	beq.n	8009214 <HAL_SPI_Init+0x11c>
 800920a:	f240 1145 	movw	r1, #325	; 0x145
 800920e:	483a      	ldr	r0, [pc, #232]	; (80092f8 <HAL_SPI_Init+0x200>)
 8009210:	f7f9 f933 	bl	800247a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d008      	beq.n	800922e <HAL_SPI_Init+0x136>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	2b80      	cmp	r3, #128	; 0x80
 8009222:	d004      	beq.n	800922e <HAL_SPI_Init+0x136>
 8009224:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8009228:	4833      	ldr	r0, [pc, #204]	; (80092f8 <HAL_SPI_Init+0x200>)
 800922a:	f7f9 f926 	bl	800247a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	2b00      	cmp	r3, #0
 8009234:	d008      	beq.n	8009248 <HAL_SPI_Init+0x150>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	2b10      	cmp	r3, #16
 800923c:	d004      	beq.n	8009248 <HAL_SPI_Init+0x150>
 800923e:	f240 1147 	movw	r1, #327	; 0x147
 8009242:	482d      	ldr	r0, [pc, #180]	; (80092f8 <HAL_SPI_Init+0x200>)
 8009244:	f7f9 f919 	bl	800247a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d155      	bne.n	80092fc <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d008      	beq.n	800926a <HAL_SPI_Init+0x172>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	2b02      	cmp	r3, #2
 800925e:	d004      	beq.n	800926a <HAL_SPI_Init+0x172>
 8009260:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8009264:	4824      	ldr	r0, [pc, #144]	; (80092f8 <HAL_SPI_Init+0x200>)
 8009266:	f7f9 f908 	bl	800247a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d008      	beq.n	8009284 <HAL_SPI_Init+0x18c>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d004      	beq.n	8009284 <HAL_SPI_Init+0x18c>
 800927a:	f240 114b 	movw	r1, #331	; 0x14b
 800927e:	481e      	ldr	r0, [pc, #120]	; (80092f8 <HAL_SPI_Init+0x200>)
 8009280:	f7f9 f8fb 	bl	800247a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800928c:	d125      	bne.n	80092da <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d05d      	beq.n	8009352 <HAL_SPI_Init+0x25a>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	2b08      	cmp	r3, #8
 800929c:	d059      	beq.n	8009352 <HAL_SPI_Init+0x25a>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	2b10      	cmp	r3, #16
 80092a4:	d055      	beq.n	8009352 <HAL_SPI_Init+0x25a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	2b18      	cmp	r3, #24
 80092ac:	d051      	beq.n	8009352 <HAL_SPI_Init+0x25a>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	d04d      	beq.n	8009352 <HAL_SPI_Init+0x25a>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	2b28      	cmp	r3, #40	; 0x28
 80092bc:	d049      	beq.n	8009352 <HAL_SPI_Init+0x25a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	2b30      	cmp	r3, #48	; 0x30
 80092c4:	d045      	beq.n	8009352 <HAL_SPI_Init+0x25a>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	2b38      	cmp	r3, #56	; 0x38
 80092cc:	d041      	beq.n	8009352 <HAL_SPI_Init+0x25a>
 80092ce:	f240 114f 	movw	r1, #335	; 0x14f
 80092d2:	4809      	ldr	r0, [pc, #36]	; (80092f8 <HAL_SPI_Init+0x200>)
 80092d4:	f7f9 f8d1 	bl	800247a <assert_failed>
 80092d8:	e03b      	b.n	8009352 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	61da      	str	r2, [r3, #28]
 80092e0:	e037      	b.n	8009352 <HAL_SPI_Init+0x25a>
 80092e2:	bf00      	nop
 80092e4:	40013000 	.word	0x40013000
 80092e8:	40003800 	.word	0x40003800
 80092ec:	40003c00 	.word	0x40003c00
 80092f0:	40013400 	.word	0x40013400
 80092f4:	40015000 	.word	0x40015000
 80092f8:	0800f72c 	.word	0x0800f72c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d020      	beq.n	8009346 <HAL_SPI_Init+0x24e>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	2b08      	cmp	r3, #8
 800930a:	d01c      	beq.n	8009346 <HAL_SPI_Init+0x24e>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	2b10      	cmp	r3, #16
 8009312:	d018      	beq.n	8009346 <HAL_SPI_Init+0x24e>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	2b18      	cmp	r3, #24
 800931a:	d014      	beq.n	8009346 <HAL_SPI_Init+0x24e>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	2b20      	cmp	r3, #32
 8009322:	d010      	beq.n	8009346 <HAL_SPI_Init+0x24e>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	2b28      	cmp	r3, #40	; 0x28
 800932a:	d00c      	beq.n	8009346 <HAL_SPI_Init+0x24e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	2b30      	cmp	r3, #48	; 0x30
 8009332:	d008      	beq.n	8009346 <HAL_SPI_Init+0x24e>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	2b38      	cmp	r3, #56	; 0x38
 800933a:	d004      	beq.n	8009346 <HAL_SPI_Init+0x24e>
 800933c:	f240 1159 	movw	r1, #345	; 0x159
 8009340:	484a      	ldr	r0, [pc, #296]	; (800946c <HAL_SPI_Init+0x374>)
 8009342:	f7f9 f89a 	bl	800247a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d126      	bne.n	80093b2 <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a40      	ldr	r2, [pc, #256]	; (8009470 <HAL_SPI_Init+0x378>)
 8009370:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a3f      	ldr	r2, [pc, #252]	; (8009474 <HAL_SPI_Init+0x37c>)
 8009376:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a3f      	ldr	r2, [pc, #252]	; (8009478 <HAL_SPI_Init+0x380>)
 800937c:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a3e      	ldr	r2, [pc, #248]	; (800947c <HAL_SPI_Init+0x384>)
 8009382:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a3e      	ldr	r2, [pc, #248]	; (8009480 <HAL_SPI_Init+0x388>)
 8009388:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a3d      	ldr	r2, [pc, #244]	; (8009484 <HAL_SPI_Init+0x38c>)
 800938e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a3d      	ldr	r2, [pc, #244]	; (8009488 <HAL_SPI_Init+0x390>)
 8009394:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a3c      	ldr	r2, [pc, #240]	; (800948c <HAL_SPI_Init+0x394>)
 800939a:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d102      	bne.n	80093aa <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a3a      	ldr	r2, [pc, #232]	; (8009490 <HAL_SPI_Init+0x398>)
 80093a8:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2202      	movs	r2, #2
 80093b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093e4:	431a      	orrs	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	431a      	orrs	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009402:	431a      	orrs	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	69db      	ldr	r3, [r3, #28]
 8009408:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800940c:	431a      	orrs	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009416:	ea42 0103 	orr.w	r1, r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	0c1b      	lsrs	r3, r3, #16
 8009430:	f003 0104 	and.w	r1, r3, #4
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	f003 0210 	and.w	r2, r3, #16
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	69da      	ldr	r2, [r3, #28]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009452:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	0800f72c 	.word	0x0800f72c
 8009470:	08009695 	.word	0x08009695
 8009474:	080096a9 	.word	0x080096a9
 8009478:	080096bd 	.word	0x080096bd
 800947c:	080096d1 	.word	0x080096d1
 8009480:	080096e5 	.word	0x080096e5
 8009484:	080096f9 	.word	0x080096f9
 8009488:	0800970d 	.word	0x0800970d
 800948c:	08009721 	.word	0x08009721
 8009490:	080026c9 	.word	0x080026c9

08009494 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	099b      	lsrs	r3, r3, #6
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10f      	bne.n	80094d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00a      	beq.n	80094d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	099b      	lsrs	r3, r3, #6
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d004      	beq.n	80094d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	4798      	blx	r3
    return;
 80094d6:	e0d8      	b.n	800968a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	085b      	lsrs	r3, r3, #1
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00a      	beq.n	80094fa <HAL_SPI_IRQHandler+0x66>
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	09db      	lsrs	r3, r3, #7
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d004      	beq.n	80094fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	4798      	blx	r3
    return;
 80094f8:	e0c7      	b.n	800968a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	095b      	lsrs	r3, r3, #5
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10c      	bne.n	8009520 <HAL_SPI_IRQHandler+0x8c>
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	099b      	lsrs	r3, r3, #6
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	0a1b      	lsrs	r3, r3, #8
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 80b5 	beq.w	800968a <HAL_SPI_IRQHandler+0x1f6>
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	095b      	lsrs	r3, r3, #5
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 80ae 	beq.w	800968a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	099b      	lsrs	r3, r3, #6
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d023      	beq.n	8009582 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b03      	cmp	r3, #3
 8009544:	d011      	beq.n	800956a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954a:	f043 0204 	orr.w	r2, r3, #4
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009552:	2300      	movs	r3, #0
 8009554:	617b      	str	r3, [r7, #20]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	617b      	str	r3, [r7, #20]
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	e00b      	b.n	8009582 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	613b      	str	r3, [r7, #16]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	613b      	str	r3, [r7, #16]
 800957e:	693b      	ldr	r3, [r7, #16]
        return;
 8009580:	e083      	b.n	800968a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	095b      	lsrs	r3, r3, #5
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d014      	beq.n	80095b8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009592:	f043 0201 	orr.w	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	0a1b      	lsrs	r3, r3, #8
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00c      	beq.n	80095de <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c8:	f043 0208 	orr.w	r2, r3, #8
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80095d0:	2300      	movs	r3, #0
 80095d2:	60bb      	str	r3, [r7, #8]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	60bb      	str	r3, [r7, #8]
 80095dc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d050      	beq.n	8009688 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095f4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	f003 0302 	and.w	r3, r3, #2
 8009604:	2b00      	cmp	r3, #0
 8009606:	d104      	bne.n	8009612 <HAL_SPI_IRQHandler+0x17e>
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d034      	beq.n	800967c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 0203 	bic.w	r2, r2, #3
 8009620:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d011      	beq.n	800964e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962e:	4a18      	ldr	r2, [pc, #96]	; (8009690 <HAL_SPI_IRQHandler+0x1fc>)
 8009630:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009636:	4618      	mov	r0, r3
 8009638:	f7fa fef2 	bl	8004420 <HAL_DMA_Abort_IT>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d005      	beq.n	800964e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009652:	2b00      	cmp	r3, #0
 8009654:	d017      	beq.n	8009686 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800965a:	4a0d      	ldr	r2, [pc, #52]	; (8009690 <HAL_SPI_IRQHandler+0x1fc>)
 800965c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009662:	4618      	mov	r0, r3
 8009664:	f7fa fedc 	bl	8004420 <HAL_DMA_Abort_IT>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00b      	beq.n	8009686 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800967a:	e004      	b.n	8009686 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009684:	e000      	b.n	8009688 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8009686:	bf00      	nop
    return;
 8009688:	bf00      	nop
  }
}
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	08009735 	.word	0x08009735

08009694 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009740:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009756:	bf00      	nop
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
	...

08009760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e0b2      	b.n	80098d8 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a5a      	ldr	r2, [pc, #360]	; (80098e0 <HAL_TIM_Base_Init+0x180>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d027      	beq.n	80097cc <HAL_TIM_Base_Init+0x6c>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009784:	d022      	beq.n	80097cc <HAL_TIM_Base_Init+0x6c>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a56      	ldr	r2, [pc, #344]	; (80098e4 <HAL_TIM_Base_Init+0x184>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d01d      	beq.n	80097cc <HAL_TIM_Base_Init+0x6c>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a54      	ldr	r2, [pc, #336]	; (80098e8 <HAL_TIM_Base_Init+0x188>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d018      	beq.n	80097cc <HAL_TIM_Base_Init+0x6c>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a53      	ldr	r2, [pc, #332]	; (80098ec <HAL_TIM_Base_Init+0x18c>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d013      	beq.n	80097cc <HAL_TIM_Base_Init+0x6c>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a51      	ldr	r2, [pc, #324]	; (80098f0 <HAL_TIM_Base_Init+0x190>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d00e      	beq.n	80097cc <HAL_TIM_Base_Init+0x6c>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a50      	ldr	r2, [pc, #320]	; (80098f4 <HAL_TIM_Base_Init+0x194>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d009      	beq.n	80097cc <HAL_TIM_Base_Init+0x6c>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a4e      	ldr	r2, [pc, #312]	; (80098f8 <HAL_TIM_Base_Init+0x198>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d004      	beq.n	80097cc <HAL_TIM_Base_Init+0x6c>
 80097c2:	f240 1113 	movw	r1, #275	; 0x113
 80097c6:	484d      	ldr	r0, [pc, #308]	; (80098fc <HAL_TIM_Base_Init+0x19c>)
 80097c8:	f7f8 fe57 	bl	800247a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d014      	beq.n	80097fe <HAL_TIM_Base_Init+0x9e>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	2b10      	cmp	r3, #16
 80097da:	d010      	beq.n	80097fe <HAL_TIM_Base_Init+0x9e>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	2b20      	cmp	r3, #32
 80097e2:	d00c      	beq.n	80097fe <HAL_TIM_Base_Init+0x9e>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	2b40      	cmp	r3, #64	; 0x40
 80097ea:	d008      	beq.n	80097fe <HAL_TIM_Base_Init+0x9e>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b60      	cmp	r3, #96	; 0x60
 80097f2:	d004      	beq.n	80097fe <HAL_TIM_Base_Init+0x9e>
 80097f4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80097f8:	4840      	ldr	r0, [pc, #256]	; (80098fc <HAL_TIM_Base_Init+0x19c>)
 80097fa:	f7f8 fe3e 	bl	800247a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00e      	beq.n	8009824 <HAL_TIM_Base_Init+0xc4>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980e:	d009      	beq.n	8009824 <HAL_TIM_Base_Init+0xc4>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009818:	d004      	beq.n	8009824 <HAL_TIM_Base_Init+0xc4>
 800981a:	f240 1115 	movw	r1, #277	; 0x115
 800981e:	4837      	ldr	r0, [pc, #220]	; (80098fc <HAL_TIM_Base_Init+0x19c>)
 8009820:	f7f8 fe2b 	bl	800247a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d008      	beq.n	800983e <HAL_TIM_Base_Init+0xde>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	2b80      	cmp	r3, #128	; 0x80
 8009832:	d004      	beq.n	800983e <HAL_TIM_Base_Init+0xde>
 8009834:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009838:	4830      	ldr	r0, [pc, #192]	; (80098fc <HAL_TIM_Base_Init+0x19c>)
 800983a:	f7f8 fe1e 	bl	800247a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d111      	bne.n	800986e <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 ff80 	bl	800a758 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800985c:	2b00      	cmp	r3, #0
 800985e:	d102      	bne.n	8009866 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a27      	ldr	r2, [pc, #156]	; (8009900 <HAL_TIM_Base_Init+0x1a0>)
 8009864:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2202      	movs	r2, #2
 8009872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	3304      	adds	r3, #4
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f000 fe4f 	bl	800a524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	40010000 	.word	0x40010000
 80098e4:	40000400 	.word	0x40000400
 80098e8:	40000800 	.word	0x40000800
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	40014000 	.word	0x40014000
 80098f4:	40014400 	.word	0x40014400
 80098f8:	40014800 	.word	0x40014800
 80098fc:	0800f7a0 	.word	0x0800f7a0
 8009900:	08002d41 	.word	0x08002d41

08009904 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a39      	ldr	r2, [pc, #228]	; (80099f8 <HAL_TIM_Base_Start+0xf4>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d027      	beq.n	8009966 <HAL_TIM_Base_Start+0x62>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800991e:	d022      	beq.n	8009966 <HAL_TIM_Base_Start+0x62>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a35      	ldr	r2, [pc, #212]	; (80099fc <HAL_TIM_Base_Start+0xf8>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d01d      	beq.n	8009966 <HAL_TIM_Base_Start+0x62>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a34      	ldr	r2, [pc, #208]	; (8009a00 <HAL_TIM_Base_Start+0xfc>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d018      	beq.n	8009966 <HAL_TIM_Base_Start+0x62>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a32      	ldr	r2, [pc, #200]	; (8009a04 <HAL_TIM_Base_Start+0x100>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d013      	beq.n	8009966 <HAL_TIM_Base_Start+0x62>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a31      	ldr	r2, [pc, #196]	; (8009a08 <HAL_TIM_Base_Start+0x104>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d00e      	beq.n	8009966 <HAL_TIM_Base_Start+0x62>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a2f      	ldr	r2, [pc, #188]	; (8009a0c <HAL_TIM_Base_Start+0x108>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d009      	beq.n	8009966 <HAL_TIM_Base_Start+0x62>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a2e      	ldr	r2, [pc, #184]	; (8009a10 <HAL_TIM_Base_Start+0x10c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d004      	beq.n	8009966 <HAL_TIM_Base_Start+0x62>
 800995c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8009960:	482c      	ldr	r0, [pc, #176]	; (8009a14 <HAL_TIM_Base_Start+0x110>)
 8009962:	f7f8 fd8a 	bl	800247a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b01      	cmp	r3, #1
 8009970:	d001      	beq.n	8009976 <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e03c      	b.n	80099f0 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2202      	movs	r2, #2
 800997a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a1d      	ldr	r2, [pc, #116]	; (80099f8 <HAL_TIM_Base_Start+0xf4>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d018      	beq.n	80099ba <HAL_TIM_Base_Start+0xb6>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009990:	d013      	beq.n	80099ba <HAL_TIM_Base_Start+0xb6>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a19      	ldr	r2, [pc, #100]	; (80099fc <HAL_TIM_Base_Start+0xf8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d00e      	beq.n	80099ba <HAL_TIM_Base_Start+0xb6>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a17      	ldr	r2, [pc, #92]	; (8009a00 <HAL_TIM_Base_Start+0xfc>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d009      	beq.n	80099ba <HAL_TIM_Base_Start+0xb6>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a16      	ldr	r2, [pc, #88]	; (8009a04 <HAL_TIM_Base_Start+0x100>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d004      	beq.n	80099ba <HAL_TIM_Base_Start+0xb6>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a14      	ldr	r2, [pc, #80]	; (8009a08 <HAL_TIM_Base_Start+0x104>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d111      	bne.n	80099de <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f003 0307 	and.w	r3, r3, #7
 80099c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2b06      	cmp	r3, #6
 80099ca:	d010      	beq.n	80099ee <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0201 	orr.w	r2, r2, #1
 80099da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099dc:	e007      	b.n	80099ee <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0201 	orr.w	r2, r2, #1
 80099ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	40010000 	.word	0x40010000
 80099fc:	40000400 	.word	0x40000400
 8009a00:	40000800 	.word	0x40000800
 8009a04:	40000c00 	.word	0x40000c00
 8009a08:	40014000 	.word	0x40014000
 8009a0c:	40014400 	.word	0x40014400
 8009a10:	40014800 	.word	0x40014800
 8009a14:	0800f7a0 	.word	0x0800f7a0

08009a18 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a25      	ldr	r2, [pc, #148]	; (8009abc <HAL_TIM_Base_Stop+0xa4>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d027      	beq.n	8009a7a <HAL_TIM_Base_Stop+0x62>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a32:	d022      	beq.n	8009a7a <HAL_TIM_Base_Stop+0x62>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a21      	ldr	r2, [pc, #132]	; (8009ac0 <HAL_TIM_Base_Stop+0xa8>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d01d      	beq.n	8009a7a <HAL_TIM_Base_Stop+0x62>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a20      	ldr	r2, [pc, #128]	; (8009ac4 <HAL_TIM_Base_Stop+0xac>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d018      	beq.n	8009a7a <HAL_TIM_Base_Stop+0x62>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a1e      	ldr	r2, [pc, #120]	; (8009ac8 <HAL_TIM_Base_Stop+0xb0>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d013      	beq.n	8009a7a <HAL_TIM_Base_Stop+0x62>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a1d      	ldr	r2, [pc, #116]	; (8009acc <HAL_TIM_Base_Stop+0xb4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d00e      	beq.n	8009a7a <HAL_TIM_Base_Stop+0x62>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a1b      	ldr	r2, [pc, #108]	; (8009ad0 <HAL_TIM_Base_Stop+0xb8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d009      	beq.n	8009a7a <HAL_TIM_Base_Stop+0x62>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a1a      	ldr	r2, [pc, #104]	; (8009ad4 <HAL_TIM_Base_Stop+0xbc>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d004      	beq.n	8009a7a <HAL_TIM_Base_Stop+0x62>
 8009a70:	f240 11b9 	movw	r1, #441	; 0x1b9
 8009a74:	4818      	ldr	r0, [pc, #96]	; (8009ad8 <HAL_TIM_Base_Stop+0xc0>)
 8009a76:	f7f8 fd00 	bl	800247a <assert_failed>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6a1a      	ldr	r2, [r3, #32]
 8009a80:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a84:	4013      	ands	r3, r2
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10f      	bne.n	8009aaa <HAL_TIM_Base_Stop+0x92>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6a1a      	ldr	r2, [r3, #32]
 8009a90:	f240 4344 	movw	r3, #1092	; 0x444
 8009a94:	4013      	ands	r3, r2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d107      	bne.n	8009aaa <HAL_TIM_Base_Stop+0x92>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0201 	bic.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	40010000 	.word	0x40010000
 8009ac0:	40000400 	.word	0x40000400
 8009ac4:	40000800 	.word	0x40000800
 8009ac8:	40000c00 	.word	0x40000c00
 8009acc:	40014000 	.word	0x40014000
 8009ad0:	40014400 	.word	0x40014400
 8009ad4:	40014800 	.word	0x40014800
 8009ad8:	0800f7a0 	.word	0x0800f7a0

08009adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a3d      	ldr	r2, [pc, #244]	; (8009be0 <HAL_TIM_Base_Start_IT+0x104>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d027      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0x62>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009af6:	d022      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0x62>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a39      	ldr	r2, [pc, #228]	; (8009be4 <HAL_TIM_Base_Start_IT+0x108>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d01d      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0x62>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a38      	ldr	r2, [pc, #224]	; (8009be8 <HAL_TIM_Base_Start_IT+0x10c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d018      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0x62>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a36      	ldr	r2, [pc, #216]	; (8009bec <HAL_TIM_Base_Start_IT+0x110>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d013      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0x62>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a35      	ldr	r2, [pc, #212]	; (8009bf0 <HAL_TIM_Base_Start_IT+0x114>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d00e      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0x62>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a33      	ldr	r2, [pc, #204]	; (8009bf4 <HAL_TIM_Base_Start_IT+0x118>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d009      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0x62>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a32      	ldr	r2, [pc, #200]	; (8009bf8 <HAL_TIM_Base_Start_IT+0x11c>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d004      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0x62>
 8009b34:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009b38:	4830      	ldr	r0, [pc, #192]	; (8009bfc <HAL_TIM_Base_Start_IT+0x120>)
 8009b3a:	f7f8 fc9e 	bl	800247a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d001      	beq.n	8009b4e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e044      	b.n	8009bd8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2202      	movs	r2, #2
 8009b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68da      	ldr	r2, [r3, #12]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f042 0201 	orr.w	r2, r2, #1
 8009b64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a1d      	ldr	r2, [pc, #116]	; (8009be0 <HAL_TIM_Base_Start_IT+0x104>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d018      	beq.n	8009ba2 <HAL_TIM_Base_Start_IT+0xc6>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b78:	d013      	beq.n	8009ba2 <HAL_TIM_Base_Start_IT+0xc6>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a19      	ldr	r2, [pc, #100]	; (8009be4 <HAL_TIM_Base_Start_IT+0x108>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d00e      	beq.n	8009ba2 <HAL_TIM_Base_Start_IT+0xc6>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a17      	ldr	r2, [pc, #92]	; (8009be8 <HAL_TIM_Base_Start_IT+0x10c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d009      	beq.n	8009ba2 <HAL_TIM_Base_Start_IT+0xc6>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a16      	ldr	r2, [pc, #88]	; (8009bec <HAL_TIM_Base_Start_IT+0x110>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d004      	beq.n	8009ba2 <HAL_TIM_Base_Start_IT+0xc6>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a14      	ldr	r2, [pc, #80]	; (8009bf0 <HAL_TIM_Base_Start_IT+0x114>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d111      	bne.n	8009bc6 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f003 0307 	and.w	r3, r3, #7
 8009bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b06      	cmp	r3, #6
 8009bb2:	d010      	beq.n	8009bd6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f042 0201 	orr.w	r2, r2, #1
 8009bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc4:	e007      	b.n	8009bd6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f042 0201 	orr.w	r2, r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	40010000 	.word	0x40010000
 8009be4:	40000400 	.word	0x40000400
 8009be8:	40000800 	.word	0x40000800
 8009bec:	40000c00 	.word	0x40000c00
 8009bf0:	40014000 	.word	0x40014000
 8009bf4:	40014400 	.word	0x40014400
 8009bf8:	40014800 	.word	0x40014800
 8009bfc:	0800f7a0 	.word	0x0800f7a0

08009c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d128      	bne.n	8009c68 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f003 0302 	and.w	r3, r3, #2
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d121      	bne.n	8009c68 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f06f 0202 	mvn.w	r2, #2
 8009c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	f003 0303 	and.w	r3, r3, #3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d005      	beq.n	8009c4e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	4798      	blx	r3
 8009c4c:	e009      	b.n	8009c62 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	f003 0304 	and.w	r3, r3, #4
 8009c72:	2b04      	cmp	r3, #4
 8009c74:	d128      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	d121      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f06f 0204 	mvn.w	r2, #4
 8009c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2202      	movs	r2, #2
 8009c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d005      	beq.n	8009cae <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	4798      	blx	r3
 8009cac:	e009      	b.n	8009cc2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f003 0308 	and.w	r3, r3, #8
 8009cd2:	2b08      	cmp	r3, #8
 8009cd4:	d128      	bne.n	8009d28 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f003 0308 	and.w	r3, r3, #8
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d121      	bne.n	8009d28 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f06f 0208 	mvn.w	r2, #8
 8009cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2204      	movs	r2, #4
 8009cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	f003 0303 	and.w	r3, r3, #3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	4798      	blx	r3
 8009d0c:	e009      	b.n	8009d22 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	f003 0310 	and.w	r3, r3, #16
 8009d32:	2b10      	cmp	r3, #16
 8009d34:	d128      	bne.n	8009d88 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	f003 0310 	and.w	r3, r3, #16
 8009d40:	2b10      	cmp	r3, #16
 8009d42:	d121      	bne.n	8009d88 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f06f 0210 	mvn.w	r2, #16
 8009d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2208      	movs	r2, #8
 8009d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	69db      	ldr	r3, [r3, #28]
 8009d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d005      	beq.n	8009d6e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	4798      	blx	r3
 8009d6c:	e009      	b.n	8009d82 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d110      	bne.n	8009db8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d109      	bne.n	8009db8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f06f 0201 	mvn.w	r2, #1
 8009dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc2:	2b80      	cmp	r3, #128	; 0x80
 8009dc4:	d110      	bne.n	8009de8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd0:	2b80      	cmp	r3, #128	; 0x80
 8009dd2:	d109      	bne.n	8009de8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df2:	2b40      	cmp	r3, #64	; 0x40
 8009df4:	d110      	bne.n	8009e18 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e00:	2b40      	cmp	r3, #64	; 0x40
 8009e02:	d109      	bne.n	8009e18 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b20      	cmp	r3, #32
 8009e24:	d110      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f003 0320 	and.w	r3, r3, #32
 8009e30:	2b20      	cmp	r3, #32
 8009e32:	d109      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f06f 0220 	mvn.w	r2, #32
 8009e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d101      	bne.n	8009e6c <HAL_TIM_ConfigClockSource+0x1c>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e2f0      	b.n	800a44e <HAL_TIM_ConfigClockSource+0x5fe>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e84:	d029      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x8a>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b70      	cmp	r3, #112	; 0x70
 8009e8c:	d025      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x8a>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e96:	d020      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x8a>
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b40      	cmp	r3, #64	; 0x40
 8009e9e:	d01c      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x8a>
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b50      	cmp	r3, #80	; 0x50
 8009ea6:	d018      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x8a>
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b60      	cmp	r3, #96	; 0x60
 8009eae:	d014      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x8a>
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d010      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x8a>
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b10      	cmp	r3, #16
 8009ebe:	d00c      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x8a>
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	d008      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x8a>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b30      	cmp	r3, #48	; 0x30
 8009ece:	d004      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x8a>
 8009ed0:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8009ed4:	487c      	ldr	r0, [pc, #496]	; (800a0c8 <HAL_TIM_ConfigClockSource+0x278>)
 8009ed6:	f7f8 fad0 	bl	800247a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ee8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ef0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f02:	f000 80f1 	beq.w	800a0e8 <HAL_TIM_ConfigClockSource+0x298>
 8009f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f0a:	f200 8293 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x5e4>
 8009f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f12:	d02d      	beq.n	8009f70 <HAL_TIM_ConfigClockSource+0x120>
 8009f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f18:	f200 828c 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x5e4>
 8009f1c:	2b70      	cmp	r3, #112	; 0x70
 8009f1e:	d05d      	beq.n	8009fdc <HAL_TIM_ConfigClockSource+0x18c>
 8009f20:	2b70      	cmp	r3, #112	; 0x70
 8009f22:	f200 8287 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x5e4>
 8009f26:	2b60      	cmp	r3, #96	; 0x60
 8009f28:	f000 81a0 	beq.w	800a26c <HAL_TIM_ConfigClockSource+0x41c>
 8009f2c:	2b60      	cmp	r3, #96	; 0x60
 8009f2e:	f200 8281 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x5e4>
 8009f32:	2b50      	cmp	r3, #80	; 0x50
 8009f34:	f000 8144 	beq.w	800a1c0 <HAL_TIM_ConfigClockSource+0x370>
 8009f38:	2b50      	cmp	r3, #80	; 0x50
 8009f3a:	f200 827b 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x5e4>
 8009f3e:	2b40      	cmp	r3, #64	; 0x40
 8009f40:	f000 81f6 	beq.w	800a330 <HAL_TIM_ConfigClockSource+0x4e0>
 8009f44:	2b40      	cmp	r3, #64	; 0x40
 8009f46:	f200 8275 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x5e4>
 8009f4a:	2b30      	cmp	r3, #48	; 0x30
 8009f4c:	f000 8246 	beq.w	800a3dc <HAL_TIM_ConfigClockSource+0x58c>
 8009f50:	2b30      	cmp	r3, #48	; 0x30
 8009f52:	f200 826f 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x5e4>
 8009f56:	2b20      	cmp	r3, #32
 8009f58:	f000 8240 	beq.w	800a3dc <HAL_TIM_ConfigClockSource+0x58c>
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	f200 8269 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x5e4>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 823a 	beq.w	800a3dc <HAL_TIM_ConfigClockSource+0x58c>
 8009f68:	2b10      	cmp	r3, #16
 8009f6a:	f000 8237 	beq.w	800a3dc <HAL_TIM_ConfigClockSource+0x58c>
 8009f6e:	e261      	b.n	800a434 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a55      	ldr	r2, [pc, #340]	; (800a0cc <HAL_TIM_ConfigClockSource+0x27c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	f000 825f 	beq.w	800a43a <HAL_TIM_ConfigClockSource+0x5ea>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f84:	f000 8259 	beq.w	800a43a <HAL_TIM_ConfigClockSource+0x5ea>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a50      	ldr	r2, [pc, #320]	; (800a0d0 <HAL_TIM_ConfigClockSource+0x280>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	f000 8253 	beq.w	800a43a <HAL_TIM_ConfigClockSource+0x5ea>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a4e      	ldr	r2, [pc, #312]	; (800a0d4 <HAL_TIM_ConfigClockSource+0x284>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	f000 824d 	beq.w	800a43a <HAL_TIM_ConfigClockSource+0x5ea>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a4c      	ldr	r2, [pc, #304]	; (800a0d8 <HAL_TIM_ConfigClockSource+0x288>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	f000 8247 	beq.w	800a43a <HAL_TIM_ConfigClockSource+0x5ea>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a4a      	ldr	r2, [pc, #296]	; (800a0dc <HAL_TIM_ConfigClockSource+0x28c>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	f000 8241 	beq.w	800a43a <HAL_TIM_ConfigClockSource+0x5ea>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a48      	ldr	r2, [pc, #288]	; (800a0e0 <HAL_TIM_ConfigClockSource+0x290>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	f000 823b 	beq.w	800a43a <HAL_TIM_ConfigClockSource+0x5ea>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a46      	ldr	r2, [pc, #280]	; (800a0e4 <HAL_TIM_ConfigClockSource+0x294>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	f000 8235 	beq.w	800a43a <HAL_TIM_ConfigClockSource+0x5ea>
 8009fd0:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8009fd4:	483c      	ldr	r0, [pc, #240]	; (800a0c8 <HAL_TIM_ConfigClockSource+0x278>)
 8009fd6:	f7f8 fa50 	bl	800247a <assert_failed>
      break;
 8009fda:	e22e      	b.n	800a43a <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a3a      	ldr	r2, [pc, #232]	; (800a0cc <HAL_TIM_ConfigClockSource+0x27c>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d01d      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x1d2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fee:	d018      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x1d2>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a36      	ldr	r2, [pc, #216]	; (800a0d0 <HAL_TIM_ConfigClockSource+0x280>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d013      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x1d2>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a35      	ldr	r2, [pc, #212]	; (800a0d4 <HAL_TIM_ConfigClockSource+0x284>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d00e      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x1d2>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a33      	ldr	r2, [pc, #204]	; (800a0d8 <HAL_TIM_ConfigClockSource+0x288>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d009      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x1d2>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a32      	ldr	r2, [pc, #200]	; (800a0dc <HAL_TIM_ConfigClockSource+0x28c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d004      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x1d2>
 800a018:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800a01c:	482a      	ldr	r0, [pc, #168]	; (800a0c8 <HAL_TIM_ConfigClockSource+0x278>)
 800a01e:	f7f8 fa2c 	bl	800247a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d013      	beq.n	800a052 <HAL_TIM_ConfigClockSource+0x202>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a032:	d00e      	beq.n	800a052 <HAL_TIM_ConfigClockSource+0x202>
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a03c:	d009      	beq.n	800a052 <HAL_TIM_ConfigClockSource+0x202>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a046:	d004      	beq.n	800a052 <HAL_TIM_ConfigClockSource+0x202>
 800a048:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800a04c:	481e      	ldr	r0, [pc, #120]	; (800a0c8 <HAL_TIM_ConfigClockSource+0x278>)
 800a04e:	f7f8 fa14 	bl	800247a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a05a:	d014      	beq.n	800a086 <HAL_TIM_ConfigClockSource+0x236>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d010      	beq.n	800a086 <HAL_TIM_ConfigClockSource+0x236>
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00c      	beq.n	800a086 <HAL_TIM_ConfigClockSource+0x236>
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d008      	beq.n	800a086 <HAL_TIM_ConfigClockSource+0x236>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	2b0a      	cmp	r3, #10
 800a07a:	d004      	beq.n	800a086 <HAL_TIM_ConfigClockSource+0x236>
 800a07c:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800a080:	4811      	ldr	r0, [pc, #68]	; (800a0c8 <HAL_TIM_ConfigClockSource+0x278>)
 800a082:	f7f8 f9fa 	bl	800247a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	2b0f      	cmp	r3, #15
 800a08c:	d904      	bls.n	800a098 <HAL_TIM_ConfigClockSource+0x248>
 800a08e:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800a092:	480d      	ldr	r0, [pc, #52]	; (800a0c8 <HAL_TIM_ConfigClockSource+0x278>)
 800a094:	f7f8 f9f1 	bl	800247a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	6899      	ldr	r1, [r3, #8]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	f000 fb36 	bl	800a718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	609a      	str	r2, [r3, #8]
      break;
 800a0c4:	e1ba      	b.n	800a43c <HAL_TIM_ConfigClockSource+0x5ec>
 800a0c6:	bf00      	nop
 800a0c8:	0800f7a0 	.word	0x0800f7a0
 800a0cc:	40010000 	.word	0x40010000
 800a0d0:	40000400 	.word	0x40000400
 800a0d4:	40000800 	.word	0x40000800
 800a0d8:	40000c00 	.word	0x40000c00
 800a0dc:	40014000 	.word	0x40014000
 800a0e0:	40014400 	.word	0x40014400
 800a0e4:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a8a      	ldr	r2, [pc, #552]	; (800a318 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d018      	beq.n	800a124 <HAL_TIM_ConfigClockSource+0x2d4>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0fa:	d013      	beq.n	800a124 <HAL_TIM_ConfigClockSource+0x2d4>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a86      	ldr	r2, [pc, #536]	; (800a31c <HAL_TIM_ConfigClockSource+0x4cc>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d00e      	beq.n	800a124 <HAL_TIM_ConfigClockSource+0x2d4>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a85      	ldr	r2, [pc, #532]	; (800a320 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d009      	beq.n	800a124 <HAL_TIM_ConfigClockSource+0x2d4>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a83      	ldr	r2, [pc, #524]	; (800a324 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d004      	beq.n	800a124 <HAL_TIM_ConfigClockSource+0x2d4>
 800a11a:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800a11e:	4882      	ldr	r0, [pc, #520]	; (800a328 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a120:	f7f8 f9ab 	bl	800247a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d013      	beq.n	800a154 <HAL_TIM_ConfigClockSource+0x304>
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a134:	d00e      	beq.n	800a154 <HAL_TIM_ConfigClockSource+0x304>
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a13e:	d009      	beq.n	800a154 <HAL_TIM_ConfigClockSource+0x304>
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a148:	d004      	beq.n	800a154 <HAL_TIM_ConfigClockSource+0x304>
 800a14a:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800a14e:	4876      	ldr	r0, [pc, #472]	; (800a328 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a150:	f7f8 f993 	bl	800247a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a15c:	d014      	beq.n	800a188 <HAL_TIM_ConfigClockSource+0x338>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d010      	beq.n	800a188 <HAL_TIM_ConfigClockSource+0x338>
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00c      	beq.n	800a188 <HAL_TIM_ConfigClockSource+0x338>
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	2b02      	cmp	r3, #2
 800a174:	d008      	beq.n	800a188 <HAL_TIM_ConfigClockSource+0x338>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	2b0a      	cmp	r3, #10
 800a17c:	d004      	beq.n	800a188 <HAL_TIM_ConfigClockSource+0x338>
 800a17e:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800a182:	4869      	ldr	r0, [pc, #420]	; (800a328 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a184:	f7f8 f979 	bl	800247a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b0f      	cmp	r3, #15
 800a18e:	d904      	bls.n	800a19a <HAL_TIM_ConfigClockSource+0x34a>
 800a190:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800a194:	4864      	ldr	r0, [pc, #400]	; (800a328 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a196:	f7f8 f970 	bl	800247a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6818      	ldr	r0, [r3, #0]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	6899      	ldr	r1, [r3, #8]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f000 fab5 	bl	800a718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689a      	ldr	r2, [r3, #8]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1bc:	609a      	str	r2, [r3, #8]
      break;
 800a1be:	e13d      	b.n	800a43c <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a54      	ldr	r2, [pc, #336]	; (800a318 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d01d      	beq.n	800a206 <HAL_TIM_ConfigClockSource+0x3b6>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d2:	d018      	beq.n	800a206 <HAL_TIM_ConfigClockSource+0x3b6>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a50      	ldr	r2, [pc, #320]	; (800a31c <HAL_TIM_ConfigClockSource+0x4cc>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d013      	beq.n	800a206 <HAL_TIM_ConfigClockSource+0x3b6>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a4f      	ldr	r2, [pc, #316]	; (800a320 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d00e      	beq.n	800a206 <HAL_TIM_ConfigClockSource+0x3b6>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a4d      	ldr	r2, [pc, #308]	; (800a324 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d009      	beq.n	800a206 <HAL_TIM_ConfigClockSource+0x3b6>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a4d      	ldr	r2, [pc, #308]	; (800a32c <HAL_TIM_ConfigClockSource+0x4dc>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d004      	beq.n	800a206 <HAL_TIM_ConfigClockSource+0x3b6>
 800a1fc:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800a200:	4849      	ldr	r0, [pc, #292]	; (800a328 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a202:	f7f8 f93a 	bl	800247a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a20e:	d014      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x3ea>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d010      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x3ea>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00c      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x3ea>
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	2b02      	cmp	r3, #2
 800a226:	d008      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x3ea>
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	2b0a      	cmp	r3, #10
 800a22e:	d004      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x3ea>
 800a230:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800a234:	483c      	ldr	r0, [pc, #240]	; (800a328 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a236:	f7f8 f920 	bl	800247a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	2b0f      	cmp	r3, #15
 800a240:	d904      	bls.n	800a24c <HAL_TIM_ConfigClockSource+0x3fc>
 800a242:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800a246:	4838      	ldr	r0, [pc, #224]	; (800a328 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a248:	f7f8 f917 	bl	800247a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6818      	ldr	r0, [r3, #0]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	6859      	ldr	r1, [r3, #4]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	461a      	mov	r2, r3
 800a25a:	f000 f9e3 	bl	800a624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2150      	movs	r1, #80	; 0x50
 800a264:	4618      	mov	r0, r3
 800a266:	f000 fa3c 	bl	800a6e2 <TIM_ITRx_SetConfig>
      break;
 800a26a:	e0e7      	b.n	800a43c <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a29      	ldr	r2, [pc, #164]	; (800a318 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d01d      	beq.n	800a2b2 <HAL_TIM_ConfigClockSource+0x462>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a27e:	d018      	beq.n	800a2b2 <HAL_TIM_ConfigClockSource+0x462>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a25      	ldr	r2, [pc, #148]	; (800a31c <HAL_TIM_ConfigClockSource+0x4cc>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d013      	beq.n	800a2b2 <HAL_TIM_ConfigClockSource+0x462>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a24      	ldr	r2, [pc, #144]	; (800a320 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d00e      	beq.n	800a2b2 <HAL_TIM_ConfigClockSource+0x462>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a22      	ldr	r2, [pc, #136]	; (800a324 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d009      	beq.n	800a2b2 <HAL_TIM_ConfigClockSource+0x462>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a22      	ldr	r2, [pc, #136]	; (800a32c <HAL_TIM_ConfigClockSource+0x4dc>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d004      	beq.n	800a2b2 <HAL_TIM_ConfigClockSource+0x462>
 800a2a8:	f241 5106 	movw	r1, #5382	; 0x1506
 800a2ac:	481e      	ldr	r0, [pc, #120]	; (800a328 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a2ae:	f7f8 f8e4 	bl	800247a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2ba:	d014      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x496>
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d010      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x496>
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00c      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x496>
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d008      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x496>
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	2b0a      	cmp	r3, #10
 800a2da:	d004      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x496>
 800a2dc:	f241 5109 	movw	r1, #5385	; 0x1509
 800a2e0:	4811      	ldr	r0, [pc, #68]	; (800a328 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a2e2:	f7f8 f8ca 	bl	800247a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	2b0f      	cmp	r3, #15
 800a2ec:	d904      	bls.n	800a2f8 <HAL_TIM_ConfigClockSource+0x4a8>
 800a2ee:	f241 510a 	movw	r1, #5386	; 0x150a
 800a2f2:	480d      	ldr	r0, [pc, #52]	; (800a328 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a2f4:	f7f8 f8c1 	bl	800247a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6818      	ldr	r0, [r3, #0]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	6859      	ldr	r1, [r3, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	461a      	mov	r2, r3
 800a306:	f000 f9bc 	bl	800a682 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2160      	movs	r1, #96	; 0x60
 800a310:	4618      	mov	r0, r3
 800a312:	f000 f9e6 	bl	800a6e2 <TIM_ITRx_SetConfig>
      break;
 800a316:	e091      	b.n	800a43c <HAL_TIM_ConfigClockSource+0x5ec>
 800a318:	40010000 	.word	0x40010000
 800a31c:	40000400 	.word	0x40000400
 800a320:	40000800 	.word	0x40000800
 800a324:	40000c00 	.word	0x40000c00
 800a328:	0800f7a0 	.word	0x0800f7a0
 800a32c:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a48      	ldr	r2, [pc, #288]	; (800a458 <HAL_TIM_ConfigClockSource+0x608>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d01d      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0x526>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a342:	d018      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0x526>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a44      	ldr	r2, [pc, #272]	; (800a45c <HAL_TIM_ConfigClockSource+0x60c>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d013      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0x526>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a43      	ldr	r2, [pc, #268]	; (800a460 <HAL_TIM_ConfigClockSource+0x610>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d00e      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0x526>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a41      	ldr	r2, [pc, #260]	; (800a464 <HAL_TIM_ConfigClockSource+0x614>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d009      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0x526>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a40      	ldr	r2, [pc, #256]	; (800a468 <HAL_TIM_ConfigClockSource+0x618>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d004      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0x526>
 800a36c:	f241 5116 	movw	r1, #5398	; 0x1516
 800a370:	483e      	ldr	r0, [pc, #248]	; (800a46c <HAL_TIM_ConfigClockSource+0x61c>)
 800a372:	f7f8 f882 	bl	800247a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a37e:	d014      	beq.n	800a3aa <HAL_TIM_ConfigClockSource+0x55a>
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d010      	beq.n	800a3aa <HAL_TIM_ConfigClockSource+0x55a>
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00c      	beq.n	800a3aa <HAL_TIM_ConfigClockSource+0x55a>
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	2b02      	cmp	r3, #2
 800a396:	d008      	beq.n	800a3aa <HAL_TIM_ConfigClockSource+0x55a>
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	2b0a      	cmp	r3, #10
 800a39e:	d004      	beq.n	800a3aa <HAL_TIM_ConfigClockSource+0x55a>
 800a3a0:	f241 5119 	movw	r1, #5401	; 0x1519
 800a3a4:	4831      	ldr	r0, [pc, #196]	; (800a46c <HAL_TIM_ConfigClockSource+0x61c>)
 800a3a6:	f7f8 f868 	bl	800247a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	2b0f      	cmp	r3, #15
 800a3b0:	d904      	bls.n	800a3bc <HAL_TIM_ConfigClockSource+0x56c>
 800a3b2:	f241 511a 	movw	r1, #5402	; 0x151a
 800a3b6:	482d      	ldr	r0, [pc, #180]	; (800a46c <HAL_TIM_ConfigClockSource+0x61c>)
 800a3b8:	f7f8 f85f 	bl	800247a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6818      	ldr	r0, [r3, #0]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	6859      	ldr	r1, [r3, #4]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	f000 f92b 	bl	800a624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2140      	movs	r1, #64	; 0x40
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 f984 	bl	800a6e2 <TIM_ITRx_SetConfig>
      break;
 800a3da:	e02f      	b.n	800a43c <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a1d      	ldr	r2, [pc, #116]	; (800a458 <HAL_TIM_ConfigClockSource+0x608>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d01d      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0x5d2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ee:	d018      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0x5d2>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a19      	ldr	r2, [pc, #100]	; (800a45c <HAL_TIM_ConfigClockSource+0x60c>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d013      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0x5d2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a18      	ldr	r2, [pc, #96]	; (800a460 <HAL_TIM_ConfigClockSource+0x610>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d00e      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0x5d2>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a16      	ldr	r2, [pc, #88]	; (800a464 <HAL_TIM_ConfigClockSource+0x614>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d009      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0x5d2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a15      	ldr	r2, [pc, #84]	; (800a468 <HAL_TIM_ConfigClockSource+0x618>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d004      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0x5d2>
 800a418:	f241 5129 	movw	r1, #5417	; 0x1529
 800a41c:	4813      	ldr	r0, [pc, #76]	; (800a46c <HAL_TIM_ConfigClockSource+0x61c>)
 800a41e:	f7f8 f82c 	bl	800247a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4619      	mov	r1, r3
 800a42c:	4610      	mov	r0, r2
 800a42e:	f000 f958 	bl	800a6e2 <TIM_ITRx_SetConfig>
      break;
 800a432:	e003      	b.n	800a43c <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	73fb      	strb	r3, [r7, #15]
      break;
 800a438:	e000      	b.n	800a43c <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800a43a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	40010000 	.word	0x40010000
 800a45c:	40000400 	.word	0x40000400
 800a460:	40000800 	.word	0x40000800
 800a464:	40000c00 	.word	0x40000c00
 800a468:	40014000 	.word	0x40014000
 800a46c:	0800f7a0 	.word	0x0800f7a0

0800a470 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a34      	ldr	r2, [pc, #208]	; (800a608 <TIM_Base_SetConfig+0xe4>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d00f      	beq.n	800a55c <TIM_Base_SetConfig+0x38>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a542:	d00b      	beq.n	800a55c <TIM_Base_SetConfig+0x38>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a31      	ldr	r2, [pc, #196]	; (800a60c <TIM_Base_SetConfig+0xe8>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d007      	beq.n	800a55c <TIM_Base_SetConfig+0x38>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a30      	ldr	r2, [pc, #192]	; (800a610 <TIM_Base_SetConfig+0xec>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d003      	beq.n	800a55c <TIM_Base_SetConfig+0x38>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a2f      	ldr	r2, [pc, #188]	; (800a614 <TIM_Base_SetConfig+0xf0>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d108      	bne.n	800a56e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a25      	ldr	r2, [pc, #148]	; (800a608 <TIM_Base_SetConfig+0xe4>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d01b      	beq.n	800a5ae <TIM_Base_SetConfig+0x8a>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a57c:	d017      	beq.n	800a5ae <TIM_Base_SetConfig+0x8a>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a22      	ldr	r2, [pc, #136]	; (800a60c <TIM_Base_SetConfig+0xe8>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d013      	beq.n	800a5ae <TIM_Base_SetConfig+0x8a>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a21      	ldr	r2, [pc, #132]	; (800a610 <TIM_Base_SetConfig+0xec>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d00f      	beq.n	800a5ae <TIM_Base_SetConfig+0x8a>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a20      	ldr	r2, [pc, #128]	; (800a614 <TIM_Base_SetConfig+0xf0>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d00b      	beq.n	800a5ae <TIM_Base_SetConfig+0x8a>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a1f      	ldr	r2, [pc, #124]	; (800a618 <TIM_Base_SetConfig+0xf4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d007      	beq.n	800a5ae <TIM_Base_SetConfig+0x8a>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a1e      	ldr	r2, [pc, #120]	; (800a61c <TIM_Base_SetConfig+0xf8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d003      	beq.n	800a5ae <TIM_Base_SetConfig+0x8a>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a1d      	ldr	r2, [pc, #116]	; (800a620 <TIM_Base_SetConfig+0xfc>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d108      	bne.n	800a5c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a08      	ldr	r2, [pc, #32]	; (800a608 <TIM_Base_SetConfig+0xe4>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d103      	bne.n	800a5f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	691a      	ldr	r2, [r3, #16]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	615a      	str	r2, [r3, #20]
}
 800a5fa:	bf00      	nop
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	40010000 	.word	0x40010000
 800a60c:	40000400 	.word	0x40000400
 800a610:	40000800 	.word	0x40000800
 800a614:	40000c00 	.word	0x40000c00
 800a618:	40014000 	.word	0x40014000
 800a61c:	40014400 	.word	0x40014400
 800a620:	40014800 	.word	0x40014800

0800a624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	f023 0201 	bic.w	r2, r3, #1
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a64e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	011b      	lsls	r3, r3, #4
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	4313      	orrs	r3, r2
 800a658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f023 030a 	bic.w	r3, r3, #10
 800a660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	4313      	orrs	r3, r2
 800a668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	621a      	str	r2, [r3, #32]
}
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a682:	b480      	push	{r7}
 800a684:	b087      	sub	sp, #28
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6a1b      	ldr	r3, [r3, #32]
 800a692:	f023 0210 	bic.w	r2, r3, #16
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6a1b      	ldr	r3, [r3, #32]
 800a6a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	031b      	lsls	r3, r3, #12
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	011b      	lsls	r3, r3, #4
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	621a      	str	r2, [r3, #32]
}
 800a6d6:	bf00      	nop
 800a6d8:	371c      	adds	r7, #28
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b085      	sub	sp, #20
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	f043 0307 	orr.w	r3, r3, #7
 800a704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	609a      	str	r2, [r3, #8]
}
 800a70c:	bf00      	nop
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	021a      	lsls	r2, r3, #8
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	431a      	orrs	r2, r3
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	4313      	orrs	r3, r2
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	4313      	orrs	r3, r2
 800a744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	609a      	str	r2, [r3, #8]
}
 800a74c:	bf00      	nop
 800a74e:	371c      	adds	r7, #28
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a1c      	ldr	r2, [pc, #112]	; (800a7d4 <TIM_ResetCallback+0x7c>)
 800a764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a1b      	ldr	r2, [pc, #108]	; (800a7d8 <TIM_ResetCallback+0x80>)
 800a76c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a1a      	ldr	r2, [pc, #104]	; (800a7dc <TIM_ResetCallback+0x84>)
 800a774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a19      	ldr	r2, [pc, #100]	; (800a7e0 <TIM_ResetCallback+0x88>)
 800a77c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a18      	ldr	r2, [pc, #96]	; (800a7e4 <TIM_ResetCallback+0x8c>)
 800a784:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a17      	ldr	r2, [pc, #92]	; (800a7e8 <TIM_ResetCallback+0x90>)
 800a78c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a16      	ldr	r2, [pc, #88]	; (800a7ec <TIM_ResetCallback+0x94>)
 800a794:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a15      	ldr	r2, [pc, #84]	; (800a7f0 <TIM_ResetCallback+0x98>)
 800a79c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a14      	ldr	r2, [pc, #80]	; (800a7f4 <TIM_ResetCallback+0x9c>)
 800a7a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a13      	ldr	r2, [pc, #76]	; (800a7f8 <TIM_ResetCallback+0xa0>)
 800a7ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a12      	ldr	r2, [pc, #72]	; (800a7fc <TIM_ResetCallback+0xa4>)
 800a7b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a11      	ldr	r2, [pc, #68]	; (800a800 <TIM_ResetCallback+0xa8>)
 800a7bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a10      	ldr	r2, [pc, #64]	; (800a804 <TIM_ResetCallback+0xac>)
 800a7c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	0800244d 	.word	0x0800244d
 800a7d8:	0800a471 	.word	0x0800a471
 800a7dc:	0800a4e9 	.word	0x0800a4e9
 800a7e0:	0800a4fd 	.word	0x0800a4fd
 800a7e4:	0800a499 	.word	0x0800a499
 800a7e8:	0800a4ad 	.word	0x0800a4ad
 800a7ec:	0800a485 	.word	0x0800a485
 800a7f0:	0800a4c1 	.word	0x0800a4c1
 800a7f4:	0800a4d5 	.word	0x0800a4d5
 800a7f8:	0800a511 	.word	0x0800a511
 800a7fc:	0800a985 	.word	0x0800a985
 800a800:	0800a999 	.word	0x0800a999
 800a804:	0800a9ad 	.word	0x0800a9ad

0800a808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a55      	ldr	r2, [pc, #340]	; (800a96c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d018      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a824:	d013      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a51      	ldr	r2, [pc, #324]	; (800a970 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d00e      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a4f      	ldr	r2, [pc, #316]	; (800a974 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d009      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a4e      	ldr	r2, [pc, #312]	; (800a978 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d004      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a844:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800a848:	484c      	ldr	r0, [pc, #304]	; (800a97c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a84a:	f7f7 fe16 	bl	800247a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d020      	beq.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b10      	cmp	r3, #16
 800a85c:	d01c      	beq.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b20      	cmp	r3, #32
 800a864:	d018      	beq.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b30      	cmp	r3, #48	; 0x30
 800a86c:	d014      	beq.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b40      	cmp	r3, #64	; 0x40
 800a874:	d010      	beq.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b50      	cmp	r3, #80	; 0x50
 800a87c:	d00c      	beq.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b60      	cmp	r3, #96	; 0x60
 800a884:	d008      	beq.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b70      	cmp	r3, #112	; 0x70
 800a88c:	d004      	beq.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a88e:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a892:	483a      	ldr	r0, [pc, #232]	; (800a97c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a894:	f7f7 fdf1 	bl	800247a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	2b80      	cmp	r3, #128	; 0x80
 800a89e:	d008      	beq.n	800a8b2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d004      	beq.n	800a8b2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a8a8:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800a8ac:	4833      	ldr	r0, [pc, #204]	; (800a97c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a8ae:	f7f7 fde4 	bl	800247a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d101      	bne.n	800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e050      	b.n	800a962 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a1b      	ldr	r2, [pc, #108]	; (800a96c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d018      	beq.n	800a936 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a90c:	d013      	beq.n	800a936 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a17      	ldr	r2, [pc, #92]	; (800a970 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d00e      	beq.n	800a936 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a15      	ldr	r2, [pc, #84]	; (800a974 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d009      	beq.n	800a936 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a14      	ldr	r2, [pc, #80]	; (800a978 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d004      	beq.n	800a936 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a13      	ldr	r2, [pc, #76]	; (800a980 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d10c      	bne.n	800a950 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a93c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	4313      	orrs	r3, r2
 800a946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	40010000 	.word	0x40010000
 800a970:	40000400 	.word	0x40000400
 800a974:	40000800 	.word	0x40000800
 800a978:	40000c00 	.word	0x40000c00
 800a97c:	0800f814 	.word	0x0800f814
 800a980:	40014000 	.word	0x40014000

0800a984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e0ab      	b.n	800ab2a <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d02c      	beq.n	800aa34 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a55      	ldr	r2, [pc, #340]	; (800ab34 <HAL_UART_Init+0x174>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d00e      	beq.n	800aa02 <HAL_UART_Init+0x42>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a53      	ldr	r2, [pc, #332]	; (800ab38 <HAL_UART_Init+0x178>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d009      	beq.n	800aa02 <HAL_UART_Init+0x42>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a52      	ldr	r2, [pc, #328]	; (800ab3c <HAL_UART_Init+0x17c>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d004      	beq.n	800aa02 <HAL_UART_Init+0x42>
 800a9f8:	f240 1173 	movw	r1, #371	; 0x173
 800a9fc:	4850      	ldr	r0, [pc, #320]	; (800ab40 <HAL_UART_Init+0x180>)
 800a9fe:	f7f7 fd3c 	bl	800247a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d028      	beq.n	800aa5c <HAL_UART_Init+0x9c>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa12:	d023      	beq.n	800aa5c <HAL_UART_Init+0x9c>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa1c:	d01e      	beq.n	800aa5c <HAL_UART_Init+0x9c>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa26:	d019      	beq.n	800aa5c <HAL_UART_Init+0x9c>
 800aa28:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800aa2c:	4844      	ldr	r0, [pc, #272]	; (800ab40 <HAL_UART_Init+0x180>)
 800aa2e:	f7f7 fd24 	bl	800247a <assert_failed>
 800aa32:	e013      	b.n	800aa5c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a3e      	ldr	r2, [pc, #248]	; (800ab34 <HAL_UART_Init+0x174>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d00e      	beq.n	800aa5c <HAL_UART_Init+0x9c>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a3d      	ldr	r2, [pc, #244]	; (800ab38 <HAL_UART_Init+0x178>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d009      	beq.n	800aa5c <HAL_UART_Init+0x9c>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a3b      	ldr	r2, [pc, #236]	; (800ab3c <HAL_UART_Init+0x17c>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d004      	beq.n	800aa5c <HAL_UART_Init+0x9c>
 800aa52:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800aa56:	483a      	ldr	r0, [pc, #232]	; (800ab40 <HAL_UART_Init+0x180>)
 800aa58:	f7f7 fd0f 	bl	800247a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d009      	beq.n	800aa78 <HAL_UART_Init+0xb8>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa6c:	d004      	beq.n	800aa78 <HAL_UART_Init+0xb8>
 800aa6e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800aa72:	4833      	ldr	r0, [pc, #204]	; (800ab40 <HAL_UART_Init+0x180>)
 800aa74:	f7f7 fd01 	bl	800247a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d009      	beq.n	800aa94 <HAL_UART_Init+0xd4>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	69db      	ldr	r3, [r3, #28]
 800aa84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa88:	d004      	beq.n	800aa94 <HAL_UART_Init+0xd4>
 800aa8a:	f240 117b 	movw	r1, #379	; 0x17b
 800aa8e:	482c      	ldr	r0, [pc, #176]	; (800ab40 <HAL_UART_Init+0x180>)
 800aa90:	f7f7 fcf3 	bl	800247a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d111      	bne.n	800aac4 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fb61 	bl	800b170 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a22      	ldr	r2, [pc, #136]	; (800ab44 <HAL_UART_Init+0x184>)
 800aaba:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2224      	movs	r2, #36	; 0x24
 800aac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fd5b 	bl	800b598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	691a      	ldr	r2, [r3, #16]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aaf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	695a      	ldr	r2, [r3, #20]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68da      	ldr	r2, [r3, #12]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2220      	movs	r2, #32
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2220      	movs	r2, #32
 800ab24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	40011000 	.word	0x40011000
 800ab38:	40004400 	.word	0x40004400
 800ab3c:	40011400 	.word	0x40011400
 800ab40:	0800f88c 	.word	0x0800f88c
 800ab44:	08002ebd 	.word	0x08002ebd

0800ab48 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	4613      	mov	r3, r2
 800ab54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b20      	cmp	r3, #32
 800ab60:	d11d      	bne.n	800ab9e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <HAL_UART_Receive_IT+0x26>
 800ab68:	88fb      	ldrh	r3, [r7, #6]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e016      	b.n	800aba0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d101      	bne.n	800ab80 <HAL_UART_Receive_IT+0x38>
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	e00f      	b.n	800aba0 <HAL_UART_Receive_IT+0x58>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ab8e:	88fb      	ldrh	r3, [r7, #6]
 800ab90:	461a      	mov	r2, r3
 800ab92:	68b9      	ldr	r1, [r7, #8]
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 fb23 	bl	800b1e0 <UART_Start_Receive_IT>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	e000      	b.n	800aba0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ab9e:	2302      	movs	r3, #2
  }
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b0ba      	sub	sp, #232	; 0xe8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800abce:	2300      	movs	r3, #0
 800abd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800abd4:	2300      	movs	r3, #0
 800abd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800abda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abde:	f003 030f 	and.w	r3, r3, #15
 800abe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800abe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10f      	bne.n	800ac0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800abee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abf2:	f003 0320 	and.w	r3, r3, #32
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d009      	beq.n	800ac0e <HAL_UART_IRQHandler+0x66>
 800abfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d003      	beq.n	800ac0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fc09 	bl	800b41e <UART_Receive_IT>
      return;
 800ac0c:	e25b      	b.n	800b0c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ac0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 80e1 	beq.w	800adda <HAL_UART_IRQHandler+0x232>
 800ac18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac1c:	f003 0301 	and.w	r3, r3, #1
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d106      	bne.n	800ac32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ac24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 80d4 	beq.w	800adda <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ac32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00b      	beq.n	800ac56 <HAL_UART_IRQHandler+0xae>
 800ac3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d005      	beq.n	800ac56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4e:	f043 0201 	orr.w	r2, r3, #1
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac5a:	f003 0304 	and.w	r3, r3, #4
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00b      	beq.n	800ac7a <HAL_UART_IRQHandler+0xd2>
 800ac62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d005      	beq.n	800ac7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	f043 0202 	orr.w	r2, r3, #2
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac7e:	f003 0302 	and.w	r3, r3, #2
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00b      	beq.n	800ac9e <HAL_UART_IRQHandler+0xf6>
 800ac86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d005      	beq.n	800ac9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	f043 0204 	orr.w	r2, r3, #4
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ac9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aca2:	f003 0308 	and.w	r3, r3, #8
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d011      	beq.n	800acce <HAL_UART_IRQHandler+0x126>
 800acaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acae:	f003 0320 	and.w	r3, r3, #32
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d105      	bne.n	800acc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800acb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d005      	beq.n	800acce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc6:	f043 0208 	orr.w	r2, r3, #8
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 81f2 	beq.w	800b0bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acdc:	f003 0320 	and.w	r3, r3, #32
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d008      	beq.n	800acf6 <HAL_UART_IRQHandler+0x14e>
 800ace4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ace8:	f003 0320 	and.w	r3, r3, #32
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fb94 	bl	800b41e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad00:	2b40      	cmp	r3, #64	; 0x40
 800ad02:	bf0c      	ite	eq
 800ad04:	2301      	moveq	r3, #1
 800ad06:	2300      	movne	r3, #0
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad12:	f003 0308 	and.w	r3, r3, #8
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d103      	bne.n	800ad22 <HAL_UART_IRQHandler+0x17a>
 800ad1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d051      	beq.n	800adc6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fa9a 	bl	800b25c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad32:	2b40      	cmp	r3, #64	; 0x40
 800ad34:	d142      	bne.n	800adbc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3314      	adds	r3, #20
 800ad3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad44:	e853 3f00 	ldrex	r3, [r3]
 800ad48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ad4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3314      	adds	r3, #20
 800ad5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad72:	e841 2300 	strex	r3, r2, [r1]
 800ad76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1d9      	bne.n	800ad36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d013      	beq.n	800adb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8e:	4a7f      	ldr	r2, [pc, #508]	; (800af8c <HAL_UART_IRQHandler+0x3e4>)
 800ad90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7f9 fb42 	bl	8004420 <HAL_DMA_Abort_IT>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d019      	beq.n	800add6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800adac:	4610      	mov	r0, r2
 800adae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adb0:	e011      	b.n	800add6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adba:	e00c      	b.n	800add6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adc4:	e007      	b.n	800add6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800add4:	e172      	b.n	800b0bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add6:	bf00      	nop
    return;
 800add8:	e170      	b.n	800b0bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adde:	2b01      	cmp	r3, #1
 800ade0:	f040 814c 	bne.w	800b07c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ade4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade8:	f003 0310 	and.w	r3, r3, #16
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 8145 	beq.w	800b07c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800adf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adf6:	f003 0310 	and.w	r3, r3, #16
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f000 813e 	beq.w	800b07c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae00:	2300      	movs	r3, #0
 800ae02:	60bb      	str	r3, [r7, #8]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60bb      	str	r3, [r7, #8]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	60bb      	str	r3, [r7, #8]
 800ae14:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	695b      	ldr	r3, [r3, #20]
 800ae1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae20:	2b40      	cmp	r3, #64	; 0x40
 800ae22:	f040 80b5 	bne.w	800af90 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 8142 	beq.w	800b0c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae44:	429a      	cmp	r2, r3
 800ae46:	f080 813b 	bcs.w	800b0c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae50:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae5c:	f000 8088 	beq.w	800af70 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	330c      	adds	r3, #12
 800ae66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae6e:	e853 3f00 	ldrex	r3, [r3]
 800ae72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	330c      	adds	r3, #12
 800ae88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ae8c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae9c:	e841 2300 	strex	r3, r2, [r1]
 800aea0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1d9      	bne.n	800ae60 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3314      	adds	r3, #20
 800aeb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeb6:	e853 3f00 	ldrex	r3, [r3]
 800aeba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aebe:	f023 0301 	bic.w	r3, r3, #1
 800aec2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3314      	adds	r3, #20
 800aecc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aed0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aed4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aed8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aedc:	e841 2300 	strex	r3, r2, [r1]
 800aee0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e1      	bne.n	800aeac <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3314      	adds	r3, #20
 800aeee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aefa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aefe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3314      	adds	r3, #20
 800af08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800af0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800af0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800af1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e3      	bne.n	800aee8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2220      	movs	r2, #32
 800af24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	330c      	adds	r3, #12
 800af34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af38:	e853 3f00 	ldrex	r3, [r3]
 800af3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af40:	f023 0310 	bic.w	r3, r3, #16
 800af44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	330c      	adds	r3, #12
 800af4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800af52:	65ba      	str	r2, [r7, #88]	; 0x58
 800af54:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af5a:	e841 2300 	strex	r3, r2, [r1]
 800af5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1e3      	bne.n	800af2e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7f9 f9e8 	bl	8004340 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800af7c:	b292      	uxth	r2, r2
 800af7e:	1a8a      	subs	r2, r1, r2
 800af80:	b292      	uxth	r2, r2
 800af82:	4611      	mov	r1, r2
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af88:	e09a      	b.n	800b0c0 <HAL_UART_IRQHandler+0x518>
 800af8a:	bf00      	nop
 800af8c:	0800b323 	.word	0x0800b323
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af98:	b29b      	uxth	r3, r3
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 808c 	beq.w	800b0c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800afac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 8087 	beq.w	800b0c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	330c      	adds	r3, #12
 800afbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	330c      	adds	r3, #12
 800afd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800afda:	647a      	str	r2, [r7, #68]	; 0x44
 800afdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e3      	bne.n	800afb6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3314      	adds	r3, #20
 800aff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	623b      	str	r3, [r7, #32]
   return(result);
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	f023 0301 	bic.w	r3, r3, #1
 800b004:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3314      	adds	r3, #20
 800b00e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b012:	633a      	str	r2, [r7, #48]	; 0x30
 800b014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b01a:	e841 2300 	strex	r3, r2, [r1]
 800b01e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1e3      	bne.n	800afee <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2220      	movs	r2, #32
 800b02a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	330c      	adds	r3, #12
 800b03a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	e853 3f00 	ldrex	r3, [r3]
 800b042:	60fb      	str	r3, [r7, #12]
   return(result);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 0310 	bic.w	r3, r3, #16
 800b04a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	330c      	adds	r3, #12
 800b054:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b058:	61fa      	str	r2, [r7, #28]
 800b05a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05c:	69b9      	ldr	r1, [r7, #24]
 800b05e:	69fa      	ldr	r2, [r7, #28]
 800b060:	e841 2300 	strex	r3, r2, [r1]
 800b064:	617b      	str	r3, [r7, #20]
   return(result);
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1e3      	bne.n	800b034 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b070:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b074:	4611      	mov	r1, r2
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b07a:	e023      	b.n	800b0c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b084:	2b00      	cmp	r3, #0
 800b086:	d009      	beq.n	800b09c <HAL_UART_IRQHandler+0x4f4>
 800b088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b08c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b090:	2b00      	cmp	r3, #0
 800b092:	d003      	beq.n	800b09c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f959 	bl	800b34c <UART_Transmit_IT>
    return;
 800b09a:	e014      	b.n	800b0c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00e      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x51e>
 800b0a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d008      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f999 	bl	800b3ec <UART_EndTransmit_IT>
    return;
 800b0ba:	e004      	b.n	800b0c6 <HAL_UART_IRQHandler+0x51e>
    return;
 800b0bc:	bf00      	nop
 800b0be:	e002      	b.n	800b0c6 <HAL_UART_IRQHandler+0x51e>
      return;
 800b0c0:	bf00      	nop
 800b0c2:	e000      	b.n	800b0c6 <HAL_UART_IRQHandler+0x51e>
      return;
 800b0c4:	bf00      	nop
  }
}
 800b0c6:	37e8      	adds	r7, #232	; 0xe8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	460b      	mov	r3, r1
 800b162:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a10      	ldr	r2, [pc, #64]	; (800b1bc <UART_InitCallbacksToDefault+0x4c>)
 800b17c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a0f      	ldr	r2, [pc, #60]	; (800b1c0 <UART_InitCallbacksToDefault+0x50>)
 800b182:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a0f      	ldr	r2, [pc, #60]	; (800b1c4 <UART_InitCallbacksToDefault+0x54>)
 800b188:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a0e      	ldr	r2, [pc, #56]	; (800b1c8 <UART_InitCallbacksToDefault+0x58>)
 800b18e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a0e      	ldr	r2, [pc, #56]	; (800b1cc <UART_InitCallbacksToDefault+0x5c>)
 800b194:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a0d      	ldr	r2, [pc, #52]	; (800b1d0 <UART_InitCallbacksToDefault+0x60>)
 800b19a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a0d      	ldr	r2, [pc, #52]	; (800b1d4 <UART_InitCallbacksToDefault+0x64>)
 800b1a0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a0c      	ldr	r2, [pc, #48]	; (800b1d8 <UART_InitCallbacksToDefault+0x68>)
 800b1a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a0c      	ldr	r2, [pc, #48]	; (800b1dc <UART_InitCallbacksToDefault+0x6c>)
 800b1ac:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b1ae:	bf00      	nop
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	0800b0e1 	.word	0x0800b0e1
 800b1c0:	0800b0cd 	.word	0x0800b0cd
 800b1c4:	0800b0f5 	.word	0x0800b0f5
 800b1c8:	08002f9d 	.word	0x08002f9d
 800b1cc:	0800b109 	.word	0x0800b109
 800b1d0:	0800b11d 	.word	0x0800b11d
 800b1d4:	0800b131 	.word	0x0800b131
 800b1d8:	0800b145 	.word	0x0800b145
 800b1dc:	0800b159 	.word	0x0800b159

0800b1e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	88fa      	ldrh	r2, [r7, #6]
 800b1f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	88fa      	ldrh	r2, [r7, #6]
 800b1fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2222      	movs	r2, #34	; 0x22
 800b20a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d007      	beq.n	800b22e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68da      	ldr	r2, [r3, #12]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b22c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	695a      	ldr	r2, [r3, #20]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f042 0201 	orr.w	r2, r2, #1
 800b23c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68da      	ldr	r2, [r3, #12]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f042 0220 	orr.w	r2, r2, #32
 800b24c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b095      	sub	sp, #84	; 0x54
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	330c      	adds	r3, #12
 800b26a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b26e:	e853 3f00 	ldrex	r3, [r3]
 800b272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b27a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	330c      	adds	r3, #12
 800b282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b284:	643a      	str	r2, [r7, #64]	; 0x40
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b288:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b28a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b28c:	e841 2300 	strex	r3, r2, [r1]
 800b290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1e5      	bne.n	800b264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3314      	adds	r3, #20
 800b29e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	e853 3f00 	ldrex	r3, [r3]
 800b2a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	f023 0301 	bic.w	r3, r3, #1
 800b2ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3314      	adds	r3, #20
 800b2b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2c0:	e841 2300 	strex	r3, r2, [r1]
 800b2c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1e5      	bne.n	800b298 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d119      	bne.n	800b308 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	330c      	adds	r3, #12
 800b2da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	e853 3f00 	ldrex	r3, [r3]
 800b2e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	f023 0310 	bic.w	r3, r3, #16
 800b2ea:	647b      	str	r3, [r7, #68]	; 0x44
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	330c      	adds	r3, #12
 800b2f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2f4:	61ba      	str	r2, [r7, #24]
 800b2f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f8:	6979      	ldr	r1, [r7, #20]
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	e841 2300 	strex	r3, r2, [r1]
 800b300:	613b      	str	r3, [r7, #16]
   return(result);
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e5      	bne.n	800b2d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2220      	movs	r2, #32
 800b30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b316:	bf00      	nop
 800b318:	3754      	adds	r7, #84	; 0x54
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b084      	sub	sp, #16
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b344:	bf00      	nop
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b21      	cmp	r3, #33	; 0x21
 800b35e:	d13e      	bne.n	800b3de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b368:	d114      	bne.n	800b394 <UART_Transmit_IT+0x48>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d110      	bne.n	800b394 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	881b      	ldrh	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b386:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a1b      	ldr	r3, [r3, #32]
 800b38c:	1c9a      	adds	r2, r3, #2
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	621a      	str	r2, [r3, #32]
 800b392:	e008      	b.n	800b3a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	1c59      	adds	r1, r3, #1
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	6211      	str	r1, [r2, #32]
 800b39e:	781a      	ldrb	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10f      	bne.n	800b3da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68da      	ldr	r2, [r3, #12]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68da      	ldr	r2, [r3, #12]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	e000      	b.n	800b3e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b3de:	2302      	movs	r3, #2
  }
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68da      	ldr	r2, [r3, #12]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b402:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2220      	movs	r2, #32
 800b408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b08c      	sub	sp, #48	; 0x30
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b22      	cmp	r3, #34	; 0x22
 800b430:	f040 80ad 	bne.w	800b58e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b43c:	d117      	bne.n	800b46e <UART_Receive_IT+0x50>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d113      	bne.n	800b46e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b446:	2300      	movs	r3, #0
 800b448:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	b29b      	uxth	r3, r3
 800b458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b460:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b466:	1c9a      	adds	r2, r3, #2
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	629a      	str	r2, [r3, #40]	; 0x28
 800b46c:	e026      	b.n	800b4bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b472:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b474:	2300      	movs	r3, #0
 800b476:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b480:	d007      	beq.n	800b492 <UART_Receive_IT+0x74>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10a      	bne.n	800b4a0 <UART_Receive_IT+0x82>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d106      	bne.n	800b4a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	b2da      	uxtb	r2, r3
 800b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	e008      	b.n	800b4b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d15c      	bne.n	800b58a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68da      	ldr	r2, [r3, #12]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f022 0220 	bic.w	r2, r2, #32
 800b4de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68da      	ldr	r2, [r3, #12]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	695a      	ldr	r2, [r3, #20]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f022 0201 	bic.w	r2, r2, #1
 800b4fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2220      	movs	r2, #32
 800b504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d136      	bne.n	800b57e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	330c      	adds	r3, #12
 800b51c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	e853 3f00 	ldrex	r3, [r3]
 800b524:	613b      	str	r3, [r7, #16]
   return(result);
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	f023 0310 	bic.w	r3, r3, #16
 800b52c:	627b      	str	r3, [r7, #36]	; 0x24
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	330c      	adds	r3, #12
 800b534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b536:	623a      	str	r2, [r7, #32]
 800b538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53a:	69f9      	ldr	r1, [r7, #28]
 800b53c:	6a3a      	ldr	r2, [r7, #32]
 800b53e:	e841 2300 	strex	r3, r2, [r1]
 800b542:	61bb      	str	r3, [r7, #24]
   return(result);
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1e5      	bne.n	800b516 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 0310 	and.w	r3, r3, #16
 800b554:	2b10      	cmp	r3, #16
 800b556:	d10a      	bne.n	800b56e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b558:	2300      	movs	r3, #0
 800b55a:	60fb      	str	r3, [r7, #12]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	60fb      	str	r3, [r7, #12]
 800b56c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b576:	4611      	mov	r1, r2
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	4798      	blx	r3
 800b57c:	e003      	b.n	800b586 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b586:	2300      	movs	r3, #0
 800b588:	e002      	b.n	800b590 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	e000      	b.n	800b590 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b58e:	2302      	movs	r3, #2
  }
}
 800b590:	4618      	mov	r0, r3
 800b592:	3730      	adds	r7, #48	; 0x30
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b59c:	b0c0      	sub	sp, #256	; 0x100
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	4bcf      	ldr	r3, [pc, #828]	; (800b8e8 <UART_SetConfig+0x350>)
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d904      	bls.n	800b5ba <UART_SetConfig+0x22>
 800b5b0:	f640 6161 	movw	r1, #3681	; 0xe61
 800b5b4:	48cd      	ldr	r0, [pc, #820]	; (800b8ec <UART_SetConfig+0x354>)
 800b5b6:	f7f6 ff60 	bl	800247a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b5ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00a      	beq.n	800b5da <UART_SetConfig+0x42>
 800b5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ce:	d004      	beq.n	800b5da <UART_SetConfig+0x42>
 800b5d0:	f640 6162 	movw	r1, #3682	; 0xe62
 800b5d4:	48c5      	ldr	r0, [pc, #788]	; (800b8ec <UART_SetConfig+0x354>)
 800b5d6:	f7f6 ff50 	bl	800247a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b5da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d010      	beq.n	800b606 <UART_SetConfig+0x6e>
 800b5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5ee:	d00a      	beq.n	800b606 <UART_SetConfig+0x6e>
 800b5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b5fa:	d004      	beq.n	800b606 <UART_SetConfig+0x6e>
 800b5fc:	f640 6163 	movw	r1, #3683	; 0xe63
 800b600:	48ba      	ldr	r0, [pc, #744]	; (800b8ec <UART_SetConfig+0x354>)
 800b602:	f7f6 ff3a 	bl	800247a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800b606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b60a:	695a      	ldr	r2, [r3, #20]
 800b60c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800b610:	4013      	ands	r3, r2
 800b612:	2b00      	cmp	r3, #0
 800b614:	d104      	bne.n	800b620 <UART_SetConfig+0x88>
 800b616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d104      	bne.n	800b62a <UART_SetConfig+0x92>
 800b620:	f640 6164 	movw	r1, #3684	; 0xe64
 800b624:	48b1      	ldr	r0, [pc, #708]	; (800b8ec <UART_SetConfig+0x354>)
 800b626:	f7f6 ff28 	bl	800247a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b62a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b63a:	68d9      	ldr	r1, [r3, #12]
 800b63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	ea40 0301 	orr.w	r3, r0, r1
 800b646:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b64c:	689a      	ldr	r2, [r3, #8]
 800b64e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	431a      	orrs	r2, r3
 800b656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	431a      	orrs	r2, r3
 800b65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b662:	69db      	ldr	r3, [r3, #28]
 800b664:	4313      	orrs	r3, r2
 800b666:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b66a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b676:	f021 010c 	bic.w	r1, r1, #12
 800b67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b684:	430b      	orrs	r3, r1
 800b686:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b698:	6999      	ldr	r1, [r3, #24]
 800b69a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	ea40 0301 	orr.w	r3, r0, r1
 800b6a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	4b90      	ldr	r3, [pc, #576]	; (800b8f0 <UART_SetConfig+0x358>)
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d005      	beq.n	800b6be <UART_SetConfig+0x126>
 800b6b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	4b8e      	ldr	r3, [pc, #568]	; (800b8f4 <UART_SetConfig+0x35c>)
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d104      	bne.n	800b6c8 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b6be:	f7fc fad9 	bl	8007c74 <HAL_RCC_GetPCLK2Freq>
 800b6c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b6c6:	e003      	b.n	800b6d0 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b6c8:	f7fc fac0 	bl	8007c4c <HAL_RCC_GetPCLK1Freq>
 800b6cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6da:	f040 810f 	bne.w	800b8fc <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b6de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b6e8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b6ec:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b6f0:	4622      	mov	r2, r4
 800b6f2:	462b      	mov	r3, r5
 800b6f4:	1891      	adds	r1, r2, r2
 800b6f6:	65b9      	str	r1, [r7, #88]	; 0x58
 800b6f8:	415b      	adcs	r3, r3
 800b6fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b700:	4621      	mov	r1, r4
 800b702:	eb12 0801 	adds.w	r8, r2, r1
 800b706:	4629      	mov	r1, r5
 800b708:	eb43 0901 	adc.w	r9, r3, r1
 800b70c:	f04f 0200 	mov.w	r2, #0
 800b710:	f04f 0300 	mov.w	r3, #0
 800b714:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b718:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b71c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b720:	4690      	mov	r8, r2
 800b722:	4699      	mov	r9, r3
 800b724:	4623      	mov	r3, r4
 800b726:	eb18 0303 	adds.w	r3, r8, r3
 800b72a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b72e:	462b      	mov	r3, r5
 800b730:	eb49 0303 	adc.w	r3, r9, r3
 800b734:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b744:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b748:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b74c:	460b      	mov	r3, r1
 800b74e:	18db      	adds	r3, r3, r3
 800b750:	653b      	str	r3, [r7, #80]	; 0x50
 800b752:	4613      	mov	r3, r2
 800b754:	eb42 0303 	adc.w	r3, r2, r3
 800b758:	657b      	str	r3, [r7, #84]	; 0x54
 800b75a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b75e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b762:	f7f4 fd3d 	bl	80001e0 <__aeabi_uldivmod>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	4b63      	ldr	r3, [pc, #396]	; (800b8f8 <UART_SetConfig+0x360>)
 800b76c:	fba3 2302 	umull	r2, r3, r3, r2
 800b770:	095b      	lsrs	r3, r3, #5
 800b772:	011c      	lsls	r4, r3, #4
 800b774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b778:	2200      	movs	r2, #0
 800b77a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b77e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b782:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b786:	4642      	mov	r2, r8
 800b788:	464b      	mov	r3, r9
 800b78a:	1891      	adds	r1, r2, r2
 800b78c:	64b9      	str	r1, [r7, #72]	; 0x48
 800b78e:	415b      	adcs	r3, r3
 800b790:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b792:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b796:	4641      	mov	r1, r8
 800b798:	eb12 0a01 	adds.w	sl, r2, r1
 800b79c:	4649      	mov	r1, r9
 800b79e:	eb43 0b01 	adc.w	fp, r3, r1
 800b7a2:	f04f 0200 	mov.w	r2, #0
 800b7a6:	f04f 0300 	mov.w	r3, #0
 800b7aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7b6:	4692      	mov	sl, r2
 800b7b8:	469b      	mov	fp, r3
 800b7ba:	4643      	mov	r3, r8
 800b7bc:	eb1a 0303 	adds.w	r3, sl, r3
 800b7c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7c4:	464b      	mov	r3, r9
 800b7c6:	eb4b 0303 	adc.w	r3, fp, r3
 800b7ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7da:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b7de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	18db      	adds	r3, r3, r3
 800b7e6:	643b      	str	r3, [r7, #64]	; 0x40
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	eb42 0303 	adc.w	r3, r2, r3
 800b7ee:	647b      	str	r3, [r7, #68]	; 0x44
 800b7f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b7f4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b7f8:	f7f4 fcf2 	bl	80001e0 <__aeabi_uldivmod>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4611      	mov	r1, r2
 800b802:	4b3d      	ldr	r3, [pc, #244]	; (800b8f8 <UART_SetConfig+0x360>)
 800b804:	fba3 2301 	umull	r2, r3, r3, r1
 800b808:	095b      	lsrs	r3, r3, #5
 800b80a:	2264      	movs	r2, #100	; 0x64
 800b80c:	fb02 f303 	mul.w	r3, r2, r3
 800b810:	1acb      	subs	r3, r1, r3
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b818:	4b37      	ldr	r3, [pc, #220]	; (800b8f8 <UART_SetConfig+0x360>)
 800b81a:	fba3 2302 	umull	r2, r3, r3, r2
 800b81e:	095b      	lsrs	r3, r3, #5
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b826:	441c      	add	r4, r3
 800b828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b82c:	2200      	movs	r2, #0
 800b82e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b832:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b836:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b83a:	4642      	mov	r2, r8
 800b83c:	464b      	mov	r3, r9
 800b83e:	1891      	adds	r1, r2, r2
 800b840:	63b9      	str	r1, [r7, #56]	; 0x38
 800b842:	415b      	adcs	r3, r3
 800b844:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b846:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b84a:	4641      	mov	r1, r8
 800b84c:	1851      	adds	r1, r2, r1
 800b84e:	6339      	str	r1, [r7, #48]	; 0x30
 800b850:	4649      	mov	r1, r9
 800b852:	414b      	adcs	r3, r1
 800b854:	637b      	str	r3, [r7, #52]	; 0x34
 800b856:	f04f 0200 	mov.w	r2, #0
 800b85a:	f04f 0300 	mov.w	r3, #0
 800b85e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b862:	4659      	mov	r1, fp
 800b864:	00cb      	lsls	r3, r1, #3
 800b866:	4651      	mov	r1, sl
 800b868:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b86c:	4651      	mov	r1, sl
 800b86e:	00ca      	lsls	r2, r1, #3
 800b870:	4610      	mov	r0, r2
 800b872:	4619      	mov	r1, r3
 800b874:	4603      	mov	r3, r0
 800b876:	4642      	mov	r2, r8
 800b878:	189b      	adds	r3, r3, r2
 800b87a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b87e:	464b      	mov	r3, r9
 800b880:	460a      	mov	r2, r1
 800b882:	eb42 0303 	adc.w	r3, r2, r3
 800b886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b896:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b89a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b89e:	460b      	mov	r3, r1
 800b8a0:	18db      	adds	r3, r3, r3
 800b8a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	eb42 0303 	adc.w	r3, r2, r3
 800b8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8b0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b8b4:	f7f4 fc94 	bl	80001e0 <__aeabi_uldivmod>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4b0e      	ldr	r3, [pc, #56]	; (800b8f8 <UART_SetConfig+0x360>)
 800b8be:	fba3 1302 	umull	r1, r3, r3, r2
 800b8c2:	095b      	lsrs	r3, r3, #5
 800b8c4:	2164      	movs	r1, #100	; 0x64
 800b8c6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	3332      	adds	r3, #50	; 0x32
 800b8d0:	4a09      	ldr	r2, [pc, #36]	; (800b8f8 <UART_SetConfig+0x360>)
 800b8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d6:	095b      	lsrs	r3, r3, #5
 800b8d8:	f003 0207 	and.w	r2, r3, #7
 800b8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4422      	add	r2, r4
 800b8e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b8e6:	e108      	b.n	800bafa <UART_SetConfig+0x562>
 800b8e8:	00a037a0 	.word	0x00a037a0
 800b8ec:	0800f88c 	.word	0x0800f88c
 800b8f0:	40011000 	.word	0x40011000
 800b8f4:	40011400 	.word	0x40011400
 800b8f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b900:	2200      	movs	r2, #0
 800b902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b906:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b90a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b90e:	4642      	mov	r2, r8
 800b910:	464b      	mov	r3, r9
 800b912:	1891      	adds	r1, r2, r2
 800b914:	6239      	str	r1, [r7, #32]
 800b916:	415b      	adcs	r3, r3
 800b918:	627b      	str	r3, [r7, #36]	; 0x24
 800b91a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b91e:	4641      	mov	r1, r8
 800b920:	1854      	adds	r4, r2, r1
 800b922:	4649      	mov	r1, r9
 800b924:	eb43 0501 	adc.w	r5, r3, r1
 800b928:	f04f 0200 	mov.w	r2, #0
 800b92c:	f04f 0300 	mov.w	r3, #0
 800b930:	00eb      	lsls	r3, r5, #3
 800b932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b936:	00e2      	lsls	r2, r4, #3
 800b938:	4614      	mov	r4, r2
 800b93a:	461d      	mov	r5, r3
 800b93c:	4643      	mov	r3, r8
 800b93e:	18e3      	adds	r3, r4, r3
 800b940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b944:	464b      	mov	r3, r9
 800b946:	eb45 0303 	adc.w	r3, r5, r3
 800b94a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b94e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b95a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b95e:	f04f 0200 	mov.w	r2, #0
 800b962:	f04f 0300 	mov.w	r3, #0
 800b966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b96a:	4629      	mov	r1, r5
 800b96c:	008b      	lsls	r3, r1, #2
 800b96e:	4621      	mov	r1, r4
 800b970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b974:	4621      	mov	r1, r4
 800b976:	008a      	lsls	r2, r1, #2
 800b978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b97c:	f7f4 fc30 	bl	80001e0 <__aeabi_uldivmod>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	4b60      	ldr	r3, [pc, #384]	; (800bb08 <UART_SetConfig+0x570>)
 800b986:	fba3 2302 	umull	r2, r3, r3, r2
 800b98a:	095b      	lsrs	r3, r3, #5
 800b98c:	011c      	lsls	r4, r3, #4
 800b98e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b992:	2200      	movs	r2, #0
 800b994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b998:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b99c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b9a0:	4642      	mov	r2, r8
 800b9a2:	464b      	mov	r3, r9
 800b9a4:	1891      	adds	r1, r2, r2
 800b9a6:	61b9      	str	r1, [r7, #24]
 800b9a8:	415b      	adcs	r3, r3
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9b0:	4641      	mov	r1, r8
 800b9b2:	1851      	adds	r1, r2, r1
 800b9b4:	6139      	str	r1, [r7, #16]
 800b9b6:	4649      	mov	r1, r9
 800b9b8:	414b      	adcs	r3, r1
 800b9ba:	617b      	str	r3, [r7, #20]
 800b9bc:	f04f 0200 	mov.w	r2, #0
 800b9c0:	f04f 0300 	mov.w	r3, #0
 800b9c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b9c8:	4659      	mov	r1, fp
 800b9ca:	00cb      	lsls	r3, r1, #3
 800b9cc:	4651      	mov	r1, sl
 800b9ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9d2:	4651      	mov	r1, sl
 800b9d4:	00ca      	lsls	r2, r1, #3
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	4619      	mov	r1, r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4642      	mov	r2, r8
 800b9de:	189b      	adds	r3, r3, r2
 800b9e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b9e4:	464b      	mov	r3, r9
 800b9e6:	460a      	mov	r2, r1
 800b9e8:	eb42 0303 	adc.w	r3, r2, r3
 800b9ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b9fc:	f04f 0200 	mov.w	r2, #0
 800ba00:	f04f 0300 	mov.w	r3, #0
 800ba04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba08:	4649      	mov	r1, r9
 800ba0a:	008b      	lsls	r3, r1, #2
 800ba0c:	4641      	mov	r1, r8
 800ba0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba12:	4641      	mov	r1, r8
 800ba14:	008a      	lsls	r2, r1, #2
 800ba16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba1a:	f7f4 fbe1 	bl	80001e0 <__aeabi_uldivmod>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4b39      	ldr	r3, [pc, #228]	; (800bb08 <UART_SetConfig+0x570>)
 800ba24:	fba3 1302 	umull	r1, r3, r3, r2
 800ba28:	095b      	lsrs	r3, r3, #5
 800ba2a:	2164      	movs	r1, #100	; 0x64
 800ba2c:	fb01 f303 	mul.w	r3, r1, r3
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	011b      	lsls	r3, r3, #4
 800ba34:	3332      	adds	r3, #50	; 0x32
 800ba36:	4a34      	ldr	r2, [pc, #208]	; (800bb08 <UART_SetConfig+0x570>)
 800ba38:	fba2 2303 	umull	r2, r3, r2, r3
 800ba3c:	095b      	lsrs	r3, r3, #5
 800ba3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba42:	441c      	add	r4, r3
 800ba44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba48:	2200      	movs	r2, #0
 800ba4a:	673b      	str	r3, [r7, #112]	; 0x70
 800ba4c:	677a      	str	r2, [r7, #116]	; 0x74
 800ba4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ba52:	4642      	mov	r2, r8
 800ba54:	464b      	mov	r3, r9
 800ba56:	1891      	adds	r1, r2, r2
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	415b      	adcs	r3, r3
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba62:	4641      	mov	r1, r8
 800ba64:	1851      	adds	r1, r2, r1
 800ba66:	6039      	str	r1, [r7, #0]
 800ba68:	4649      	mov	r1, r9
 800ba6a:	414b      	adcs	r3, r1
 800ba6c:	607b      	str	r3, [r7, #4]
 800ba6e:	f04f 0200 	mov.w	r2, #0
 800ba72:	f04f 0300 	mov.w	r3, #0
 800ba76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba7a:	4659      	mov	r1, fp
 800ba7c:	00cb      	lsls	r3, r1, #3
 800ba7e:	4651      	mov	r1, sl
 800ba80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba84:	4651      	mov	r1, sl
 800ba86:	00ca      	lsls	r2, r1, #3
 800ba88:	4610      	mov	r0, r2
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	4642      	mov	r2, r8
 800ba90:	189b      	adds	r3, r3, r2
 800ba92:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba94:	464b      	mov	r3, r9
 800ba96:	460a      	mov	r2, r1
 800ba98:	eb42 0303 	adc.w	r3, r2, r3
 800ba9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	663b      	str	r3, [r7, #96]	; 0x60
 800baa8:	667a      	str	r2, [r7, #100]	; 0x64
 800baaa:	f04f 0200 	mov.w	r2, #0
 800baae:	f04f 0300 	mov.w	r3, #0
 800bab2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bab6:	4649      	mov	r1, r9
 800bab8:	008b      	lsls	r3, r1, #2
 800baba:	4641      	mov	r1, r8
 800babc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bac0:	4641      	mov	r1, r8
 800bac2:	008a      	lsls	r2, r1, #2
 800bac4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bac8:	f7f4 fb8a 	bl	80001e0 <__aeabi_uldivmod>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4b0d      	ldr	r3, [pc, #52]	; (800bb08 <UART_SetConfig+0x570>)
 800bad2:	fba3 1302 	umull	r1, r3, r3, r2
 800bad6:	095b      	lsrs	r3, r3, #5
 800bad8:	2164      	movs	r1, #100	; 0x64
 800bada:	fb01 f303 	mul.w	r3, r1, r3
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	011b      	lsls	r3, r3, #4
 800bae2:	3332      	adds	r3, #50	; 0x32
 800bae4:	4a08      	ldr	r2, [pc, #32]	; (800bb08 <UART_SetConfig+0x570>)
 800bae6:	fba2 2303 	umull	r2, r3, r2, r3
 800baea:	095b      	lsrs	r3, r3, #5
 800baec:	f003 020f 	and.w	r2, r3, #15
 800baf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4422      	add	r2, r4
 800baf8:	609a      	str	r2, [r3, #8]
}
 800bafa:	bf00      	nop
 800bafc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb00:	46bd      	mov	sp, r7
 800bb02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb06:	bf00      	nop
 800bb08:	51eb851f 	.word	0x51eb851f

0800bb0c <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800bb10:	bf00      	nop
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
	...

0800bb1c <__NVIC_SetPriority>:
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	4603      	mov	r3, r0
 800bb24:	6039      	str	r1, [r7, #0]
 800bb26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	db0a      	blt.n	800bb46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	490c      	ldr	r1, [pc, #48]	; (800bb68 <__NVIC_SetPriority+0x4c>)
 800bb36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb3a:	0112      	lsls	r2, r2, #4
 800bb3c:	b2d2      	uxtb	r2, r2
 800bb3e:	440b      	add	r3, r1
 800bb40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bb44:	e00a      	b.n	800bb5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	4908      	ldr	r1, [pc, #32]	; (800bb6c <__NVIC_SetPriority+0x50>)
 800bb4c:	79fb      	ldrb	r3, [r7, #7]
 800bb4e:	f003 030f 	and.w	r3, r3, #15
 800bb52:	3b04      	subs	r3, #4
 800bb54:	0112      	lsls	r2, r2, #4
 800bb56:	b2d2      	uxtb	r2, r2
 800bb58:	440b      	add	r3, r1
 800bb5a:	761a      	strb	r2, [r3, #24]
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	e000e100 	.word	0xe000e100
 800bb6c:	e000ed00 	.word	0xe000ed00

0800bb70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bb74:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <SysTick_Handler+0x1c>)
 800bb76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bb78:	f002 fc5e 	bl	800e438 <xTaskGetSchedulerState>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d001      	beq.n	800bb86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bb82:	f000 fea1 	bl	800c8c8 <xPortSysTickHandler>
  }
}
 800bb86:	bf00      	nop
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	e000e010 	.word	0xe000e010

0800bb90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bb90:	b580      	push	{r7, lr}
 800bb92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bb94:	2100      	movs	r1, #0
 800bb96:	f06f 0004 	mvn.w	r0, #4
 800bb9a:	f7ff ffbf 	bl	800bb1c <__NVIC_SetPriority>
#endif
}
 800bb9e:	bf00      	nop
 800bba0:	bd80      	pop	{r7, pc}
	...

0800bba4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbaa:	f3ef 8305 	mrs	r3, IPSR
 800bbae:	603b      	str	r3, [r7, #0]
  return(result);
 800bbb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d003      	beq.n	800bbbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bbb6:	f06f 0305 	mvn.w	r3, #5
 800bbba:	607b      	str	r3, [r7, #4]
 800bbbc:	e00c      	b.n	800bbd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bbbe:	4b0a      	ldr	r3, [pc, #40]	; (800bbe8 <osKernelInitialize+0x44>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d105      	bne.n	800bbd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bbc6:	4b08      	ldr	r3, [pc, #32]	; (800bbe8 <osKernelInitialize+0x44>)
 800bbc8:	2201      	movs	r2, #1
 800bbca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	607b      	str	r3, [r7, #4]
 800bbd0:	e002      	b.n	800bbd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bbd8:	687b      	ldr	r3, [r7, #4]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	370c      	adds	r7, #12
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	2000097c 	.word	0x2000097c

0800bbec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbf2:	f3ef 8305 	mrs	r3, IPSR
 800bbf6:	603b      	str	r3, [r7, #0]
  return(result);
 800bbf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d003      	beq.n	800bc06 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bbfe:	f06f 0305 	mvn.w	r3, #5
 800bc02:	607b      	str	r3, [r7, #4]
 800bc04:	e010      	b.n	800bc28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc06:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <osKernelStart+0x48>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d109      	bne.n	800bc22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bc0e:	f7ff ffbf 	bl	800bb90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bc12:	4b08      	ldr	r3, [pc, #32]	; (800bc34 <osKernelStart+0x48>)
 800bc14:	2202      	movs	r2, #2
 800bc16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bc18:	f001 fe88 	bl	800d92c <vTaskStartScheduler>
      stat = osOK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	607b      	str	r3, [r7, #4]
 800bc20:	e002      	b.n	800bc28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bc22:	f04f 33ff 	mov.w	r3, #4294967295
 800bc26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc28:	687b      	ldr	r3, [r7, #4]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3708      	adds	r7, #8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	2000097c 	.word	0x2000097c

0800bc38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b08e      	sub	sp, #56	; 0x38
 800bc3c:	af04      	add	r7, sp, #16
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc48:	f3ef 8305 	mrs	r3, IPSR
 800bc4c:	617b      	str	r3, [r7, #20]
  return(result);
 800bc4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d17f      	bne.n	800bd54 <osThreadNew+0x11c>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d07c      	beq.n	800bd54 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800bc5a:	2380      	movs	r3, #128	; 0x80
 800bc5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bc5e:	2318      	movs	r3, #24
 800bc60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bc62:	2300      	movs	r3, #0
 800bc64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bc66:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d046      	beq.n	800bd00 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d002      	beq.n	800bc80 <osThreadNew+0x48>
        name = attr->name;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d002      	beq.n	800bc8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d008      	beq.n	800bca6 <osThreadNew+0x6e>
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	2b38      	cmp	r3, #56	; 0x38
 800bc98:	d805      	bhi.n	800bca6 <osThreadNew+0x6e>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <osThreadNew+0x72>
        return (NULL);
 800bca6:	2300      	movs	r3, #0
 800bca8:	e055      	b.n	800bd56 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d003      	beq.n	800bcba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	695b      	ldr	r3, [r3, #20]
 800bcb6:	089b      	lsrs	r3, r3, #2
 800bcb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00f      	beq.n	800bce2 <osThreadNew+0xaa>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800bcca:	d30a      	bcc.n	800bce2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d006      	beq.n	800bce2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <osThreadNew+0xaa>
        mem = 1;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	61bb      	str	r3, [r7, #24]
 800bce0:	e010      	b.n	800bd04 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10c      	bne.n	800bd04 <osThreadNew+0xcc>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d108      	bne.n	800bd04 <osThreadNew+0xcc>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d104      	bne.n	800bd04 <osThreadNew+0xcc>
          mem = 0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	61bb      	str	r3, [r7, #24]
 800bcfe:	e001      	b.n	800bd04 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d110      	bne.n	800bd2c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd12:	9202      	str	r2, [sp, #8]
 800bd14:	9301      	str	r3, [sp, #4]
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	6a3a      	ldr	r2, [r7, #32]
 800bd1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f001 fc31 	bl	800d588 <xTaskCreateStatic>
 800bd26:	4603      	mov	r3, r0
 800bd28:	613b      	str	r3, [r7, #16]
 800bd2a:	e013      	b.n	800bd54 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d110      	bne.n	800bd54 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	f107 0310 	add.w	r3, r7, #16
 800bd3a:	9301      	str	r3, [sp, #4]
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f001 fc7e 	bl	800d646 <xTaskCreate>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d001      	beq.n	800bd54 <osThreadNew+0x11c>
            hTask = NULL;
 800bd50:	2300      	movs	r3, #0
 800bd52:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bd54:	693b      	ldr	r3, [r7, #16]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3728      	adds	r7, #40	; 0x28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b084      	sub	sp, #16
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f003 f83c 	bl	800ede4 <pvTimerGetTimerID>
 800bd6c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d005      	beq.n	800bd80 <TimerCallback+0x22>
    callb->func (callb->arg);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	6852      	ldr	r2, [r2, #4]
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	4798      	blx	r3
  }
}
 800bd80:	bf00      	nop
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08c      	sub	sp, #48	; 0x30
 800bd8c:	af02      	add	r7, sp, #8
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	607a      	str	r2, [r7, #4]
 800bd92:	603b      	str	r3, [r7, #0]
 800bd94:	460b      	mov	r3, r1
 800bd96:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd9c:	f3ef 8305 	mrs	r3, IPSR
 800bda0:	613b      	str	r3, [r7, #16]
  return(result);
 800bda2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d163      	bne.n	800be70 <osTimerNew+0xe8>
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d060      	beq.n	800be70 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800bdae:	2008      	movs	r0, #8
 800bdb0:	f000 f92c 	bl	800c00c <pvPortMalloc>
 800bdb4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d059      	beq.n	800be70 <osTimerNew+0xe8>
      callb->func = func;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800bdc8:	7afb      	ldrb	r3, [r7, #11]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d102      	bne.n	800bdd4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	61fb      	str	r3, [r7, #28]
 800bdd2:	e001      	b.n	800bdd8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800bdd8:	f04f 33ff 	mov.w	r3, #4294967295
 800bddc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d01c      	beq.n	800be22 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d002      	beq.n	800bdf6 <osTimerNew+0x6e>
          name = attr->name;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d006      	beq.n	800be0c <osTimerNew+0x84>
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	2b2b      	cmp	r3, #43	; 0x2b
 800be04:	d902      	bls.n	800be0c <osTimerNew+0x84>
          mem = 1;
 800be06:	2301      	movs	r3, #1
 800be08:	61bb      	str	r3, [r7, #24]
 800be0a:	e00c      	b.n	800be26 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d108      	bne.n	800be26 <osTimerNew+0x9e>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d104      	bne.n	800be26 <osTimerNew+0x9e>
            mem = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	61bb      	str	r3, [r7, #24]
 800be20:	e001      	b.n	800be26 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d10c      	bne.n	800be46 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	9301      	str	r3, [sp, #4]
 800be32:	4b12      	ldr	r3, [pc, #72]	; (800be7c <osTimerNew+0xf4>)
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	69fa      	ldr	r2, [r7, #28]
 800be3a:	2101      	movs	r1, #1
 800be3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be3e:	f002 fc50 	bl	800e6e2 <xTimerCreateStatic>
 800be42:	6238      	str	r0, [r7, #32]
 800be44:	e00b      	b.n	800be5e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d108      	bne.n	800be5e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800be4c:	4b0b      	ldr	r3, [pc, #44]	; (800be7c <osTimerNew+0xf4>)
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	69fa      	ldr	r2, [r7, #28]
 800be54:	2101      	movs	r1, #1
 800be56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be58:	f002 fc22 	bl	800e6a0 <xTimerCreate>
 800be5c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800be5e:	6a3b      	ldr	r3, [r7, #32]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d105      	bne.n	800be70 <osTimerNew+0xe8>
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d002      	beq.n	800be70 <osTimerNew+0xe8>
        vPortFree (callb);
 800be6a:	6978      	ldr	r0, [r7, #20]
 800be6c:	f000 f99e 	bl	800c1ac <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800be70:	6a3b      	ldr	r3, [r7, #32]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3728      	adds	r7, #40	; 0x28
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	0800bd5f 	.word	0x0800bd5f

0800be80 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800be88:	2300      	movs	r3, #0
 800be8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be8c:	f3ef 8305 	mrs	r3, IPSR
 800be90:	60fb      	str	r3, [r7, #12]
  return(result);
 800be92:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800be94:	2b00      	cmp	r3, #0
 800be96:	d12d      	bne.n	800bef4 <osEventFlagsNew+0x74>
    mem = -1;
 800be98:	f04f 33ff 	mov.w	r3, #4294967295
 800be9c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d015      	beq.n	800bed0 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d006      	beq.n	800beba <osEventFlagsNew+0x3a>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	2b1f      	cmp	r3, #31
 800beb2:	d902      	bls.n	800beba <osEventFlagsNew+0x3a>
        mem = 1;
 800beb4:	2301      	movs	r3, #1
 800beb6:	613b      	str	r3, [r7, #16]
 800beb8:	e00c      	b.n	800bed4 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d108      	bne.n	800bed4 <osEventFlagsNew+0x54>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d104      	bne.n	800bed4 <osEventFlagsNew+0x54>
          mem = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	613b      	str	r3, [r7, #16]
 800bece:	e001      	b.n	800bed4 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d106      	bne.n	800bee8 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	4618      	mov	r0, r3
 800bee0:	f000 f842 	bl	800bf68 <xEventGroupCreateStatic>
 800bee4:	6178      	str	r0, [r7, #20]
 800bee6:	e005      	b.n	800bef4 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d102      	bne.n	800bef4 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800beee:	f000 f872 	bl	800bfd6 <xEventGroupCreate>
 800bef2:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800bef4:	697b      	ldr	r3, [r7, #20]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
	...

0800bf00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4a07      	ldr	r2, [pc, #28]	; (800bf2c <vApplicationGetIdleTaskMemory+0x2c>)
 800bf10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	4a06      	ldr	r2, [pc, #24]	; (800bf30 <vApplicationGetIdleTaskMemory+0x30>)
 800bf16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2280      	movs	r2, #128	; 0x80
 800bf1c:	601a      	str	r2, [r3, #0]
}
 800bf1e:	bf00      	nop
 800bf20:	3714      	adds	r7, #20
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	20000980 	.word	0x20000980
 800bf30:	20000b3c 	.word	0x20000b3c

0800bf34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4a07      	ldr	r2, [pc, #28]	; (800bf60 <vApplicationGetTimerTaskMemory+0x2c>)
 800bf44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	4a06      	ldr	r2, [pc, #24]	; (800bf64 <vApplicationGetTimerTaskMemory+0x30>)
 800bf4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf52:	601a      	str	r2, [r3, #0]
}
 800bf54:	bf00      	nop
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	20000d3c 	.word	0x20000d3c
 800bf64:	20000ef8 	.word	0x20000ef8

0800bf68 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b086      	sub	sp, #24
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <xEventGroupCreateStatic+0x24>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	613b      	str	r3, [r7, #16]
}
 800bf88:	bf00      	nop
 800bf8a:	e7fe      	b.n	800bf8a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800bf8c:	2320      	movs	r3, #32
 800bf8e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	2b20      	cmp	r3, #32
 800bf94:	d00a      	beq.n	800bfac <xEventGroupCreateStatic+0x44>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	60fb      	str	r3, [r7, #12]
}
 800bfa8:	bf00      	nop
 800bfaa:	e7fe      	b.n	800bfaa <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00a      	beq.n	800bfcc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f000 fa11 	bl	800c3e8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800bfcc:	697b      	ldr	r3, [r7, #20]
	}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b082      	sub	sp, #8
 800bfda:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800bfdc:	2020      	movs	r0, #32
 800bfde:	f000 f815 	bl	800c00c <pvPortMalloc>
 800bfe2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d00a      	beq.n	800c000 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3304      	adds	r3, #4
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 f9f7 	bl	800c3e8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c000:	687b      	ldr	r3, [r7, #4]
	}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
	...

0800c00c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08a      	sub	sp, #40	; 0x28
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c014:	2300      	movs	r3, #0
 800c016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c018:	f001 fcfa 	bl	800da10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c01c:	4b5d      	ldr	r3, [pc, #372]	; (800c194 <pvPortMalloc+0x188>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c024:	f000 f924 	bl	800c270 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c028:	4b5b      	ldr	r3, [pc, #364]	; (800c198 <pvPortMalloc+0x18c>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4013      	ands	r3, r2
 800c030:	2b00      	cmp	r3, #0
 800c032:	f040 8093 	bne.w	800c15c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d01d      	beq.n	800c078 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c03c:	2208      	movs	r2, #8
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4413      	add	r3, r2
 800c042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f003 0307 	and.w	r3, r3, #7
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d014      	beq.n	800c078 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f023 0307 	bic.w	r3, r3, #7
 800c054:	3308      	adds	r3, #8
 800c056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f003 0307 	and.w	r3, r3, #7
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00a      	beq.n	800c078 <pvPortMalloc+0x6c>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	617b      	str	r3, [r7, #20]
}
 800c074:	bf00      	nop
 800c076:	e7fe      	b.n	800c076 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d06e      	beq.n	800c15c <pvPortMalloc+0x150>
 800c07e:	4b47      	ldr	r3, [pc, #284]	; (800c19c <pvPortMalloc+0x190>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	429a      	cmp	r2, r3
 800c086:	d869      	bhi.n	800c15c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c088:	4b45      	ldr	r3, [pc, #276]	; (800c1a0 <pvPortMalloc+0x194>)
 800c08a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c08c:	4b44      	ldr	r3, [pc, #272]	; (800c1a0 <pvPortMalloc+0x194>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c092:	e004      	b.n	800c09e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d903      	bls.n	800c0b0 <pvPortMalloc+0xa4>
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1f1      	bne.n	800c094 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0b0:	4b38      	ldr	r3, [pc, #224]	; (800c194 <pvPortMalloc+0x188>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d050      	beq.n	800c15c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0ba:	6a3b      	ldr	r3, [r7, #32]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2208      	movs	r2, #8
 800c0c0:	4413      	add	r3, r2
 800c0c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	6a3b      	ldr	r3, [r7, #32]
 800c0ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	685a      	ldr	r2, [r3, #4]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	1ad2      	subs	r2, r2, r3
 800c0d4:	2308      	movs	r3, #8
 800c0d6:	005b      	lsls	r3, r3, #1
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d91f      	bls.n	800c11c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	f003 0307 	and.w	r3, r3, #7
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00a      	beq.n	800c104 <pvPortMalloc+0xf8>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	613b      	str	r3, [r7, #16]
}
 800c100:	bf00      	nop
 800c102:	e7fe      	b.n	800c102 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	1ad2      	subs	r2, r2, r3
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c116:	69b8      	ldr	r0, [r7, #24]
 800c118:	f000 f90c 	bl	800c334 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c11c:	4b1f      	ldr	r3, [pc, #124]	; (800c19c <pvPortMalloc+0x190>)
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	4a1d      	ldr	r2, [pc, #116]	; (800c19c <pvPortMalloc+0x190>)
 800c128:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c12a:	4b1c      	ldr	r3, [pc, #112]	; (800c19c <pvPortMalloc+0x190>)
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	4b1d      	ldr	r3, [pc, #116]	; (800c1a4 <pvPortMalloc+0x198>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	429a      	cmp	r2, r3
 800c134:	d203      	bcs.n	800c13e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c136:	4b19      	ldr	r3, [pc, #100]	; (800c19c <pvPortMalloc+0x190>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a1a      	ldr	r2, [pc, #104]	; (800c1a4 <pvPortMalloc+0x198>)
 800c13c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	685a      	ldr	r2, [r3, #4]
 800c142:	4b15      	ldr	r3, [pc, #84]	; (800c198 <pvPortMalloc+0x18c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	431a      	orrs	r2, r3
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14e:	2200      	movs	r2, #0
 800c150:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c152:	4b15      	ldr	r3, [pc, #84]	; (800c1a8 <pvPortMalloc+0x19c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	3301      	adds	r3, #1
 800c158:	4a13      	ldr	r2, [pc, #76]	; (800c1a8 <pvPortMalloc+0x19c>)
 800c15a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c15c:	f001 fc9e 	bl	800da9c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d101      	bne.n	800c16a <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c166:	f7f5 fd71 	bl	8001c4c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	f003 0307 	and.w	r3, r3, #7
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00a      	beq.n	800c18a <pvPortMalloc+0x17e>
	__asm volatile
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	60fb      	str	r3, [r7, #12]
}
 800c186:	bf00      	nop
 800c188:	e7fe      	b.n	800c188 <pvPortMalloc+0x17c>
	return pvReturn;
 800c18a:	69fb      	ldr	r3, [r7, #28]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3728      	adds	r7, #40	; 0x28
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	2000af40 	.word	0x2000af40
 800c198:	2000af54 	.word	0x2000af54
 800c19c:	2000af44 	.word	0x2000af44
 800c1a0:	2000af38 	.word	0x2000af38
 800c1a4:	2000af48 	.word	0x2000af48
 800c1a8:	2000af4c 	.word	0x2000af4c

0800c1ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d04d      	beq.n	800c25a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1be:	2308      	movs	r3, #8
 800c1c0:	425b      	negs	r3, r3
 800c1c2:	697a      	ldr	r2, [r7, #20]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	4b24      	ldr	r3, [pc, #144]	; (800c264 <vPortFree+0xb8>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10a      	bne.n	800c1f0 <vPortFree+0x44>
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	60fb      	str	r3, [r7, #12]
}
 800c1ec:	bf00      	nop
 800c1ee:	e7fe      	b.n	800c1ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00a      	beq.n	800c20e <vPortFree+0x62>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	60bb      	str	r3, [r7, #8]
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	4b14      	ldr	r3, [pc, #80]	; (800c264 <vPortFree+0xb8>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4013      	ands	r3, r2
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d01e      	beq.n	800c25a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d11a      	bne.n	800c25a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	4b0e      	ldr	r3, [pc, #56]	; (800c264 <vPortFree+0xb8>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	43db      	mvns	r3, r3
 800c22e:	401a      	ands	r2, r3
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c234:	f001 fbec 	bl	800da10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <vPortFree+0xbc>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4413      	add	r3, r2
 800c242:	4a09      	ldr	r2, [pc, #36]	; (800c268 <vPortFree+0xbc>)
 800c244:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c246:	6938      	ldr	r0, [r7, #16]
 800c248:	f000 f874 	bl	800c334 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c24c:	4b07      	ldr	r3, [pc, #28]	; (800c26c <vPortFree+0xc0>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3301      	adds	r3, #1
 800c252:	4a06      	ldr	r2, [pc, #24]	; (800c26c <vPortFree+0xc0>)
 800c254:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c256:	f001 fc21 	bl	800da9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c25a:	bf00      	nop
 800c25c:	3718      	adds	r7, #24
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	2000af54 	.word	0x2000af54
 800c268:	2000af44 	.word	0x2000af44
 800c26c:	2000af50 	.word	0x2000af50

0800c270 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c276:	f649 4340 	movw	r3, #40000	; 0x9c40
 800c27a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c27c:	4b27      	ldr	r3, [pc, #156]	; (800c31c <prvHeapInit+0xac>)
 800c27e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f003 0307 	and.w	r3, r3, #7
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00c      	beq.n	800c2a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3307      	adds	r3, #7
 800c28e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f023 0307 	bic.w	r3, r3, #7
 800c296:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	4a1f      	ldr	r2, [pc, #124]	; (800c31c <prvHeapInit+0xac>)
 800c2a0:	4413      	add	r3, r2
 800c2a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2a8:	4a1d      	ldr	r2, [pc, #116]	; (800c320 <prvHeapInit+0xb0>)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2ae:	4b1c      	ldr	r3, [pc, #112]	; (800c320 <prvHeapInit+0xb0>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2bc:	2208      	movs	r2, #8
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	1a9b      	subs	r3, r3, r2
 800c2c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f023 0307 	bic.w	r3, r3, #7
 800c2ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	4a15      	ldr	r2, [pc, #84]	; (800c324 <prvHeapInit+0xb4>)
 800c2d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c2d2:	4b14      	ldr	r3, [pc, #80]	; (800c324 <prvHeapInit+0xb4>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c2da:	4b12      	ldr	r3, [pc, #72]	; (800c324 <prvHeapInit+0xb4>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	1ad2      	subs	r2, r2, r3
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2f0:	4b0c      	ldr	r3, [pc, #48]	; (800c324 <prvHeapInit+0xb4>)
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	4a0a      	ldr	r2, [pc, #40]	; (800c328 <prvHeapInit+0xb8>)
 800c2fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	4a09      	ldr	r2, [pc, #36]	; (800c32c <prvHeapInit+0xbc>)
 800c306:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c308:	4b09      	ldr	r3, [pc, #36]	; (800c330 <prvHeapInit+0xc0>)
 800c30a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c30e:	601a      	str	r2, [r3, #0]
}
 800c310:	bf00      	nop
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	200012f8 	.word	0x200012f8
 800c320:	2000af38 	.word	0x2000af38
 800c324:	2000af40 	.word	0x2000af40
 800c328:	2000af48 	.word	0x2000af48
 800c32c:	2000af44 	.word	0x2000af44
 800c330:	2000af54 	.word	0x2000af54

0800c334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c33c:	4b28      	ldr	r3, [pc, #160]	; (800c3e0 <prvInsertBlockIntoFreeList+0xac>)
 800c33e:	60fb      	str	r3, [r7, #12]
 800c340:	e002      	b.n	800c348 <prvInsertBlockIntoFreeList+0x14>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d8f7      	bhi.n	800c342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	4413      	add	r3, r2
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	429a      	cmp	r2, r3
 800c362:	d108      	bne.n	800c376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	441a      	add	r2, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	441a      	add	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	429a      	cmp	r2, r3
 800c388:	d118      	bne.n	800c3bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	4b15      	ldr	r3, [pc, #84]	; (800c3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d00d      	beq.n	800c3b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	441a      	add	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	601a      	str	r2, [r3, #0]
 800c3b0:	e008      	b.n	800c3c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3b2:	4b0c      	ldr	r3, [pc, #48]	; (800c3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	601a      	str	r2, [r3, #0]
 800c3ba:	e003      	b.n	800c3c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d002      	beq.n	800c3d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3d2:	bf00      	nop
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	2000af38 	.word	0x2000af38
 800c3e4:	2000af40 	.word	0x2000af40

0800c3e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f103 0208 	add.w	r2, r3, #8
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c400:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f103 0208 	add.w	r2, r3, #8
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f103 0208 	add.w	r2, r3, #8
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c41c:	bf00      	nop
 800c41e:	370c      	adds	r7, #12
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c436:	bf00      	nop
 800c438:	370c      	adds	r7, #12
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c442:	b480      	push	{r7}
 800c444:	b085      	sub	sp, #20
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
 800c44a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	689a      	ldr	r2, [r3, #8]
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	1c5a      	adds	r2, r3, #1
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	601a      	str	r2, [r3, #0]
}
 800c47e:	bf00      	nop
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c48a:	b480      	push	{r7}
 800c48c:	b085      	sub	sp, #20
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a0:	d103      	bne.n	800c4aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	60fb      	str	r3, [r7, #12]
 800c4a8:	e00c      	b.n	800c4c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	3308      	adds	r3, #8
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	e002      	b.n	800c4b8 <vListInsert+0x2e>
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d2f6      	bcs.n	800c4b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	685a      	ldr	r2, [r3, #4]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	1c5a      	adds	r2, r3, #1
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	601a      	str	r2, [r3, #0]
}
 800c4f0:	bf00      	nop
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	6892      	ldr	r2, [r2, #8]
 800c512:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	6852      	ldr	r2, [r2, #4]
 800c51c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	429a      	cmp	r2, r3
 800c526:	d103      	bne.n	800c530 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	689a      	ldr	r2, [r3, #8]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	1e5a      	subs	r2, r3, #1
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3b04      	subs	r3, #4
 800c560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3b04      	subs	r3, #4
 800c56e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	f023 0201 	bic.w	r2, r3, #1
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3b04      	subs	r3, #4
 800c57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c580:	4a0c      	ldr	r2, [pc, #48]	; (800c5b4 <pxPortInitialiseStack+0x64>)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3b14      	subs	r3, #20
 800c58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	3b04      	subs	r3, #4
 800c596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f06f 0202 	mvn.w	r2, #2
 800c59e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	3b20      	subs	r3, #32
 800c5a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	0800c5b9 	.word	0x0800c5b9

0800c5b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5c2:	4b12      	ldr	r3, [pc, #72]	; (800c60c <prvTaskExitError+0x54>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ca:	d00a      	beq.n	800c5e2 <prvTaskExitError+0x2a>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	60fb      	str	r3, [r7, #12]
}
 800c5de:	bf00      	nop
 800c5e0:	e7fe      	b.n	800c5e0 <prvTaskExitError+0x28>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	60bb      	str	r3, [r7, #8]
}
 800c5f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c5f6:	bf00      	nop
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d0fc      	beq.n	800c5f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c5fe:	bf00      	nop
 800c600:	bf00      	nop
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	2000000c 	.word	0x2000000c

0800c610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c610:	4b07      	ldr	r3, [pc, #28]	; (800c630 <pxCurrentTCBConst2>)
 800c612:	6819      	ldr	r1, [r3, #0]
 800c614:	6808      	ldr	r0, [r1, #0]
 800c616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61a:	f380 8809 	msr	PSP, r0
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f04f 0000 	mov.w	r0, #0
 800c626:	f380 8811 	msr	BASEPRI, r0
 800c62a:	4770      	bx	lr
 800c62c:	f3af 8000 	nop.w

0800c630 <pxCurrentTCBConst2>:
 800c630:	2000afac 	.word	0x2000afac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c634:	bf00      	nop
 800c636:	bf00      	nop

0800c638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c638:	4808      	ldr	r0, [pc, #32]	; (800c65c <prvPortStartFirstTask+0x24>)
 800c63a:	6800      	ldr	r0, [r0, #0]
 800c63c:	6800      	ldr	r0, [r0, #0]
 800c63e:	f380 8808 	msr	MSP, r0
 800c642:	f04f 0000 	mov.w	r0, #0
 800c646:	f380 8814 	msr	CONTROL, r0
 800c64a:	b662      	cpsie	i
 800c64c:	b661      	cpsie	f
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	df00      	svc	0
 800c658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c65a:	bf00      	nop
 800c65c:	e000ed08 	.word	0xe000ed08

0800c660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c666:	4b46      	ldr	r3, [pc, #280]	; (800c780 <xPortStartScheduler+0x120>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a46      	ldr	r2, [pc, #280]	; (800c784 <xPortStartScheduler+0x124>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d10a      	bne.n	800c686 <xPortStartScheduler+0x26>
	__asm volatile
 800c670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	613b      	str	r3, [r7, #16]
}
 800c682:	bf00      	nop
 800c684:	e7fe      	b.n	800c684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c686:	4b3e      	ldr	r3, [pc, #248]	; (800c780 <xPortStartScheduler+0x120>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a3f      	ldr	r2, [pc, #252]	; (800c788 <xPortStartScheduler+0x128>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d10a      	bne.n	800c6a6 <xPortStartScheduler+0x46>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	60fb      	str	r3, [r7, #12]
}
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6a6:	4b39      	ldr	r3, [pc, #228]	; (800c78c <xPortStartScheduler+0x12c>)
 800c6a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	22ff      	movs	r2, #255	; 0xff
 800c6b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	4b31      	ldr	r3, [pc, #196]	; (800c790 <xPortStartScheduler+0x130>)
 800c6cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6ce:	4b31      	ldr	r3, [pc, #196]	; (800c794 <xPortStartScheduler+0x134>)
 800c6d0:	2207      	movs	r2, #7
 800c6d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6d4:	e009      	b.n	800c6ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c6d6:	4b2f      	ldr	r3, [pc, #188]	; (800c794 <xPortStartScheduler+0x134>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	4a2d      	ldr	r2, [pc, #180]	; (800c794 <xPortStartScheduler+0x134>)
 800c6de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c6e0:	78fb      	ldrb	r3, [r7, #3]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	005b      	lsls	r3, r3, #1
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6ea:	78fb      	ldrb	r3, [r7, #3]
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6f2:	2b80      	cmp	r3, #128	; 0x80
 800c6f4:	d0ef      	beq.n	800c6d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c6f6:	4b27      	ldr	r3, [pc, #156]	; (800c794 <xPortStartScheduler+0x134>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f1c3 0307 	rsb	r3, r3, #7
 800c6fe:	2b04      	cmp	r3, #4
 800c700:	d00a      	beq.n	800c718 <xPortStartScheduler+0xb8>
	__asm volatile
 800c702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	60bb      	str	r3, [r7, #8]
}
 800c714:	bf00      	nop
 800c716:	e7fe      	b.n	800c716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c718:	4b1e      	ldr	r3, [pc, #120]	; (800c794 <xPortStartScheduler+0x134>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	021b      	lsls	r3, r3, #8
 800c71e:	4a1d      	ldr	r2, [pc, #116]	; (800c794 <xPortStartScheduler+0x134>)
 800c720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c722:	4b1c      	ldr	r3, [pc, #112]	; (800c794 <xPortStartScheduler+0x134>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c72a:	4a1a      	ldr	r2, [pc, #104]	; (800c794 <xPortStartScheduler+0x134>)
 800c72c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	b2da      	uxtb	r2, r3
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c736:	4b18      	ldr	r3, [pc, #96]	; (800c798 <xPortStartScheduler+0x138>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a17      	ldr	r2, [pc, #92]	; (800c798 <xPortStartScheduler+0x138>)
 800c73c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c742:	4b15      	ldr	r3, [pc, #84]	; (800c798 <xPortStartScheduler+0x138>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a14      	ldr	r2, [pc, #80]	; (800c798 <xPortStartScheduler+0x138>)
 800c748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c74c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c74e:	f000 f9a9 	bl	800caa4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c752:	4b12      	ldr	r3, [pc, #72]	; (800c79c <xPortStartScheduler+0x13c>)
 800c754:	2200      	movs	r2, #0
 800c756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c758:	f000 f9e0 	bl	800cb1c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c75c:	4b10      	ldr	r3, [pc, #64]	; (800c7a0 <xPortStartScheduler+0x140>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a0f      	ldr	r2, [pc, #60]	; (800c7a0 <xPortStartScheduler+0x140>)
 800c762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c768:	f7ff ff66 	bl	800c638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c76c:	f001 fb2e 	bl	800ddcc <vTaskSwitchContext>
	prvTaskExitError();
 800c770:	f7ff ff22 	bl	800c5b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	e000ed00 	.word	0xe000ed00
 800c784:	410fc271 	.word	0x410fc271
 800c788:	410fc270 	.word	0x410fc270
 800c78c:	e000e400 	.word	0xe000e400
 800c790:	2000af64 	.word	0x2000af64
 800c794:	2000af68 	.word	0x2000af68
 800c798:	e000ed20 	.word	0xe000ed20
 800c79c:	2000000c 	.word	0x2000000c
 800c7a0:	e000ef34 	.word	0xe000ef34

0800c7a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	607b      	str	r3, [r7, #4]
}
 800c7bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7be:	4b0f      	ldr	r3, [pc, #60]	; (800c7fc <vPortEnterCritical+0x58>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	4a0d      	ldr	r2, [pc, #52]	; (800c7fc <vPortEnterCritical+0x58>)
 800c7c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7c8:	4b0c      	ldr	r3, [pc, #48]	; (800c7fc <vPortEnterCritical+0x58>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d10f      	bne.n	800c7f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c7d0:	4b0b      	ldr	r3, [pc, #44]	; (800c800 <vPortEnterCritical+0x5c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	603b      	str	r3, [r7, #0]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <vPortEnterCritical+0x4a>
	}
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	2000000c 	.word	0x2000000c
 800c800:	e000ed04 	.word	0xe000ed04

0800c804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c80a:	4b12      	ldr	r3, [pc, #72]	; (800c854 <vPortExitCritical+0x50>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d10a      	bne.n	800c828 <vPortExitCritical+0x24>
	__asm volatile
 800c812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	607b      	str	r3, [r7, #4]
}
 800c824:	bf00      	nop
 800c826:	e7fe      	b.n	800c826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c828:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <vPortExitCritical+0x50>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	4a09      	ldr	r2, [pc, #36]	; (800c854 <vPortExitCritical+0x50>)
 800c830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c832:	4b08      	ldr	r3, [pc, #32]	; (800c854 <vPortExitCritical+0x50>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d105      	bne.n	800c846 <vPortExitCritical+0x42>
 800c83a:	2300      	movs	r3, #0
 800c83c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	f383 8811 	msr	BASEPRI, r3
}
 800c844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c846:	bf00      	nop
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	2000000c 	.word	0x2000000c
	...

0800c860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c860:	f3ef 8009 	mrs	r0, PSP
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	4b15      	ldr	r3, [pc, #84]	; (800c8c0 <pxCurrentTCBConst>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	f01e 0f10 	tst.w	lr, #16
 800c870:	bf08      	it	eq
 800c872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87a:	6010      	str	r0, [r2, #0]
 800c87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c880:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c884:	f380 8811 	msr	BASEPRI, r0
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f001 fa9c 	bl	800ddcc <vTaskSwitchContext>
 800c894:	f04f 0000 	mov.w	r0, #0
 800c898:	f380 8811 	msr	BASEPRI, r0
 800c89c:	bc09      	pop	{r0, r3}
 800c89e:	6819      	ldr	r1, [r3, #0]
 800c8a0:	6808      	ldr	r0, [r1, #0]
 800c8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a6:	f01e 0f10 	tst.w	lr, #16
 800c8aa:	bf08      	it	eq
 800c8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8b0:	f380 8809 	msr	PSP, r0
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	f3af 8000 	nop.w

0800c8c0 <pxCurrentTCBConst>:
 800c8c0:	2000afac 	.word	0x2000afac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop

0800c8c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	607b      	str	r3, [r7, #4]
}
 800c8e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c8e2:	f001 f9b1 	bl	800dc48 <xTaskIncrementTick>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d003      	beq.n	800c8f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c8ec:	4b06      	ldr	r3, [pc, #24]	; (800c908 <xPortSysTickHandler+0x40>)
 800c8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	f383 8811 	msr	BASEPRI, r3
}
 800c8fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c900:	bf00      	nop
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b088      	sub	sp, #32
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800c914:	4b5d      	ldr	r3, [pc, #372]	; (800ca8c <vPortSuppressTicksAndSleep+0x180>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d902      	bls.n	800c924 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800c91e:	4b5b      	ldr	r3, [pc, #364]	; (800ca8c <vPortSuppressTicksAndSleep+0x180>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800c924:	4b5a      	ldr	r3, [pc, #360]	; (800ca90 <vPortSuppressTicksAndSleep+0x184>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a59      	ldr	r2, [pc, #356]	; (800ca90 <vPortSuppressTicksAndSleep+0x184>)
 800c92a:	f023 0301 	bic.w	r3, r3, #1
 800c92e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800c930:	4b58      	ldr	r3, [pc, #352]	; (800ca94 <vPortSuppressTicksAndSleep+0x188>)
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	3b01      	subs	r3, #1
 800c938:	4957      	ldr	r1, [pc, #348]	; (800ca98 <vPortSuppressTicksAndSleep+0x18c>)
 800c93a:	6809      	ldr	r1, [r1, #0]
 800c93c:	fb01 f303 	mul.w	r3, r1, r3
 800c940:	4413      	add	r3, r2
 800c942:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800c944:	4b55      	ldr	r3, [pc, #340]	; (800ca9c <vPortSuppressTicksAndSleep+0x190>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	69fa      	ldr	r2, [r7, #28]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d904      	bls.n	800c958 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800c94e:	4b53      	ldr	r3, [pc, #332]	; (800ca9c <vPortSuppressTicksAndSleep+0x190>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	69fa      	ldr	r2, [r7, #28]
 800c954:	1ad3      	subs	r3, r2, r3
 800c956:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800c958:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800c95a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800c95e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800c962:	f001 fc77 	bl	800e254 <eTaskConfirmSleepModeStatus>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d110      	bne.n	800c98e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c96c:	4b49      	ldr	r3, [pc, #292]	; (800ca94 <vPortSuppressTicksAndSleep+0x188>)
 800c96e:	4a4c      	ldr	r2, [pc, #304]	; (800caa0 <vPortSuppressTicksAndSleep+0x194>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c974:	4b46      	ldr	r3, [pc, #280]	; (800ca90 <vPortSuppressTicksAndSleep+0x184>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a45      	ldr	r2, [pc, #276]	; (800ca90 <vPortSuppressTicksAndSleep+0x184>)
 800c97a:	f043 0301 	orr.w	r3, r3, #1
 800c97e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c980:	4b45      	ldr	r3, [pc, #276]	; (800ca98 <vPortSuppressTicksAndSleep+0x18c>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a46      	ldr	r2, [pc, #280]	; (800caa0 <vPortSuppressTicksAndSleep+0x194>)
 800c986:	3b01      	subs	r3, #1
 800c988:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800c98a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800c98c:	e079      	b.n	800ca82 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800c98e:	4a44      	ldr	r2, [pc, #272]	; (800caa0 <vPortSuppressTicksAndSleep+0x194>)
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c994:	4b3f      	ldr	r3, [pc, #252]	; (800ca94 <vPortSuppressTicksAndSleep+0x188>)
 800c996:	2200      	movs	r2, #0
 800c998:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c99a:	4b3d      	ldr	r3, [pc, #244]	; (800ca90 <vPortSuppressTicksAndSleep+0x184>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a3c      	ldr	r2, [pc, #240]	; (800ca90 <vPortSuppressTicksAndSleep+0x184>)
 800c9a0:	f043 0301 	orr.w	r3, r3, #1
 800c9a4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	613b      	str	r3, [r7, #16]
 800c9ae:	6938      	ldr	r0, [r7, #16]
 800c9b0:	f7f5 f95a 	bl	8001c68 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d004      	beq.n	800c9c4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800c9ba:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800c9be:	bf30      	wfi
				__asm volatile( "isb" );
 800c9c0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7f5 f959 	bl	8001c7c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800c9ca:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800c9cc:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c9d0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800c9d4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800c9d6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c9da:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800c9de:	4b2c      	ldr	r3, [pc, #176]	; (800ca90 <vPortSuppressTicksAndSleep+0x184>)
 800c9e0:	2206      	movs	r2, #6
 800c9e2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800c9e4:	4b2a      	ldr	r3, [pc, #168]	; (800ca90 <vPortSuppressTicksAndSleep+0x184>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d01d      	beq.n	800ca2c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800c9f0:	4b29      	ldr	r3, [pc, #164]	; (800ca98 <vPortSuppressTicksAndSleep+0x18c>)
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	4b27      	ldr	r3, [pc, #156]	; (800ca94 <vPortSuppressTicksAndSleep+0x188>)
 800c9f6:	6819      	ldr	r1, [r3, #0]
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	1acb      	subs	r3, r1, r3
 800c9fc:	4413      	add	r3, r2
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800ca02:	4b26      	ldr	r3, [pc, #152]	; (800ca9c <vPortSuppressTicksAndSleep+0x190>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d304      	bcc.n	800ca16 <vPortSuppressTicksAndSleep+0x10a>
 800ca0c:	4b22      	ldr	r3, [pc, #136]	; (800ca98 <vPortSuppressTicksAndSleep+0x18c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	697a      	ldr	r2, [r7, #20]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d903      	bls.n	800ca1e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800ca16:	4b20      	ldr	r3, [pc, #128]	; (800ca98 <vPortSuppressTicksAndSleep+0x18c>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800ca1e:	4a20      	ldr	r2, [pc, #128]	; (800caa0 <vPortSuppressTicksAndSleep+0x194>)
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	61bb      	str	r3, [r7, #24]
 800ca2a:	e018      	b.n	800ca5e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800ca2c:	4b1a      	ldr	r3, [pc, #104]	; (800ca98 <vPortSuppressTicksAndSleep+0x18c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	fb03 f202 	mul.w	r2, r3, r2
 800ca36:	4b17      	ldr	r3, [pc, #92]	; (800ca94 <vPortSuppressTicksAndSleep+0x188>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	1ad3      	subs	r3, r2, r3
 800ca3c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800ca3e:	4b16      	ldr	r3, [pc, #88]	; (800ca98 <vPortSuppressTicksAndSleep+0x18c>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca48:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	4a12      	ldr	r2, [pc, #72]	; (800ca98 <vPortSuppressTicksAndSleep+0x18c>)
 800ca50:	6812      	ldr	r2, [r2, #0]
 800ca52:	fb03 f202 	mul.w	r2, r3, r2
 800ca56:	4912      	ldr	r1, [pc, #72]	; (800caa0 <vPortSuppressTicksAndSleep+0x194>)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca5e:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <vPortSuppressTicksAndSleep+0x188>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ca64:	4b0a      	ldr	r3, [pc, #40]	; (800ca90 <vPortSuppressTicksAndSleep+0x184>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a09      	ldr	r2, [pc, #36]	; (800ca90 <vPortSuppressTicksAndSleep+0x184>)
 800ca6a:	f043 0301 	orr.w	r3, r3, #1
 800ca6e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800ca70:	69b8      	ldr	r0, [r7, #24]
 800ca72:	f001 f8c1 	bl	800dbf8 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800ca76:	4b08      	ldr	r3, [pc, #32]	; (800ca98 <vPortSuppressTicksAndSleep+0x18c>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a09      	ldr	r2, [pc, #36]	; (800caa0 <vPortSuppressTicksAndSleep+0x194>)
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800ca80:	b662      	cpsie	i
	}
 800ca82:	bf00      	nop
 800ca84:	3720      	adds	r7, #32
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	2000af5c 	.word	0x2000af5c
 800ca90:	e000e010 	.word	0xe000e010
 800ca94:	e000e018 	.word	0xe000e018
 800ca98:	2000af58 	.word	0x2000af58
 800ca9c:	2000af60 	.word	0x2000af60
 800caa0:	e000e014 	.word	0xe000e014

0800caa4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800caa4:	b480      	push	{r7}
 800caa6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800caa8:	4b14      	ldr	r3, [pc, #80]	; (800cafc <vPortSetupTimerInterrupt+0x58>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a14      	ldr	r2, [pc, #80]	; (800cb00 <vPortSetupTimerInterrupt+0x5c>)
 800caae:	fba2 2303 	umull	r2, r3, r2, r3
 800cab2:	099b      	lsrs	r3, r3, #6
 800cab4:	4a13      	ldr	r2, [pc, #76]	; (800cb04 <vPortSetupTimerInterrupt+0x60>)
 800cab6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800cab8:	4b12      	ldr	r3, [pc, #72]	; (800cb04 <vPortSetupTimerInterrupt+0x60>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800cac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cac4:	4a10      	ldr	r2, [pc, #64]	; (800cb08 <vPortSetupTimerInterrupt+0x64>)
 800cac6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800cac8:	4b10      	ldr	r3, [pc, #64]	; (800cb0c <vPortSetupTimerInterrupt+0x68>)
 800caca:	222d      	movs	r2, #45	; 0x2d
 800cacc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cace:	4b10      	ldr	r3, [pc, #64]	; (800cb10 <vPortSetupTimerInterrupt+0x6c>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cad4:	4b0f      	ldr	r3, [pc, #60]	; (800cb14 <vPortSetupTimerInterrupt+0x70>)
 800cad6:	2200      	movs	r2, #0
 800cad8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cada:	4b08      	ldr	r3, [pc, #32]	; (800cafc <vPortSetupTimerInterrupt+0x58>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a08      	ldr	r2, [pc, #32]	; (800cb00 <vPortSetupTimerInterrupt+0x5c>)
 800cae0:	fba2 2303 	umull	r2, r3, r2, r3
 800cae4:	099b      	lsrs	r3, r3, #6
 800cae6:	4a0c      	ldr	r2, [pc, #48]	; (800cb18 <vPortSetupTimerInterrupt+0x74>)
 800cae8:	3b01      	subs	r3, #1
 800caea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800caec:	4b08      	ldr	r3, [pc, #32]	; (800cb10 <vPortSetupTimerInterrupt+0x6c>)
 800caee:	2207      	movs	r2, #7
 800caf0:	601a      	str	r2, [r3, #0]
}
 800caf2:	bf00      	nop
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr
 800cafc:	20000000 	.word	0x20000000
 800cb00:	10624dd3 	.word	0x10624dd3
 800cb04:	2000af58 	.word	0x2000af58
 800cb08:	2000af5c 	.word	0x2000af5c
 800cb0c:	2000af60 	.word	0x2000af60
 800cb10:	e000e010 	.word	0xe000e010
 800cb14:	e000e018 	.word	0xe000e018
 800cb18:	e000e014 	.word	0xe000e014

0800cb1c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb1c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb2c <vPortEnableVFP+0x10>
 800cb20:	6801      	ldr	r1, [r0, #0]
 800cb22:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb26:	6001      	str	r1, [r0, #0]
 800cb28:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb2a:	bf00      	nop
 800cb2c:	e000ed88 	.word	0xe000ed88

0800cb30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb36:	f3ef 8305 	mrs	r3, IPSR
 800cb3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b0f      	cmp	r3, #15
 800cb40:	d914      	bls.n	800cb6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb42:	4a17      	ldr	r2, [pc, #92]	; (800cba0 <vPortValidateInterruptPriority+0x70>)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	4413      	add	r3, r2
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb4c:	4b15      	ldr	r3, [pc, #84]	; (800cba4 <vPortValidateInterruptPriority+0x74>)
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	7afa      	ldrb	r2, [r7, #11]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d20a      	bcs.n	800cb6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	607b      	str	r3, [r7, #4]
}
 800cb68:	bf00      	nop
 800cb6a:	e7fe      	b.n	800cb6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb6c:	4b0e      	ldr	r3, [pc, #56]	; (800cba8 <vPortValidateInterruptPriority+0x78>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb74:	4b0d      	ldr	r3, [pc, #52]	; (800cbac <vPortValidateInterruptPriority+0x7c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d90a      	bls.n	800cb92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	603b      	str	r3, [r7, #0]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <vPortValidateInterruptPriority+0x60>
	}
 800cb92:	bf00      	nop
 800cb94:	3714      	adds	r7, #20
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	e000e3f0 	.word	0xe000e3f0
 800cba4:	2000af64 	.word	0x2000af64
 800cba8:	e000ed0c 	.word	0xe000ed0c
 800cbac:	2000af68 	.word	0x2000af68

0800cbb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10a      	bne.n	800cbda <xQueueGenericReset+0x2a>
	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	60bb      	str	r3, [r7, #8]
}
 800cbd6:	bf00      	nop
 800cbd8:	e7fe      	b.n	800cbd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cbda:	f7ff fde3 	bl	800c7a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe6:	68f9      	ldr	r1, [r7, #12]
 800cbe8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbea:	fb01 f303 	mul.w	r3, r1, r3
 800cbee:	441a      	add	r2, r3
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	68f9      	ldr	r1, [r7, #12]
 800cc0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc10:	fb01 f303 	mul.w	r3, r1, r3
 800cc14:	441a      	add	r2, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	22ff      	movs	r2, #255	; 0xff
 800cc1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	22ff      	movs	r2, #255	; 0xff
 800cc26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d114      	bne.n	800cc5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d01a      	beq.n	800cc6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	3310      	adds	r3, #16
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f001 f9cd 	bl	800dfdc <xTaskRemoveFromEventList>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d012      	beq.n	800cc6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc48:	4b0c      	ldr	r3, [pc, #48]	; (800cc7c <xQueueGenericReset+0xcc>)
 800cc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc4e:	601a      	str	r2, [r3, #0]
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	e009      	b.n	800cc6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	3310      	adds	r3, #16
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff fbc2 	bl	800c3e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3324      	adds	r3, #36	; 0x24
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7ff fbbd 	bl	800c3e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc6e:	f7ff fdc9 	bl	800c804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc72:	2301      	movs	r3, #1
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	e000ed04 	.word	0xe000ed04

0800cc80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b08e      	sub	sp, #56	; 0x38
 800cc84:	af02      	add	r7, sp, #8
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10a      	bne.n	800ccaa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cca6:	bf00      	nop
 800cca8:	e7fe      	b.n	800cca8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ccb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccc2:	bf00      	nop
 800ccc4:	e7fe      	b.n	800ccc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d002      	beq.n	800ccd2 <xQueueGenericCreateStatic+0x52>
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <xQueueGenericCreateStatic+0x56>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e000      	b.n	800ccd8 <xQueueGenericCreateStatic+0x58>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10a      	bne.n	800ccf2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	623b      	str	r3, [r7, #32]
}
 800ccee:	bf00      	nop
 800ccf0:	e7fe      	b.n	800ccf0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d102      	bne.n	800ccfe <xQueueGenericCreateStatic+0x7e>
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <xQueueGenericCreateStatic+0x82>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e000      	b.n	800cd04 <xQueueGenericCreateStatic+0x84>
 800cd02:	2300      	movs	r3, #0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10a      	bne.n	800cd1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	61fb      	str	r3, [r7, #28]
}
 800cd1a:	bf00      	nop
 800cd1c:	e7fe      	b.n	800cd1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd1e:	2350      	movs	r3, #80	; 0x50
 800cd20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	2b50      	cmp	r3, #80	; 0x50
 800cd26:	d00a      	beq.n	800cd3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	61bb      	str	r3, [r7, #24]
}
 800cd3a:	bf00      	nop
 800cd3c:	e7fe      	b.n	800cd3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00d      	beq.n	800cd66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	68b9      	ldr	r1, [r7, #8]
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f000 f805 	bl	800cd70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3730      	adds	r7, #48	; 0x30
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d103      	bne.n	800cd8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	69ba      	ldr	r2, [r7, #24]
 800cd88:	601a      	str	r2, [r3, #0]
 800cd8a:	e002      	b.n	800cd92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd8c:	69bb      	ldr	r3, [r7, #24]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd9e:	2101      	movs	r1, #1
 800cda0:	69b8      	ldr	r0, [r7, #24]
 800cda2:	f7ff ff05 	bl	800cbb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	78fa      	ldrb	r2, [r7, #3]
 800cdaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cdae:	bf00      	nop
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
	...

0800cdb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b08e      	sub	sp, #56	; 0x38
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
 800cdc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10a      	bne.n	800cdea <xQueueGenericSend+0x32>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cde6:	bf00      	nop
 800cde8:	e7fe      	b.n	800cde8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d103      	bne.n	800cdf8 <xQueueGenericSend+0x40>
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d101      	bne.n	800cdfc <xQueueGenericSend+0x44>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e000      	b.n	800cdfe <xQueueGenericSend+0x46>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10a      	bne.n	800ce18 <xQueueGenericSend+0x60>
	__asm volatile
 800ce02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce06:	f383 8811 	msr	BASEPRI, r3
 800ce0a:	f3bf 8f6f 	isb	sy
 800ce0e:	f3bf 8f4f 	dsb	sy
 800ce12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce14:	bf00      	nop
 800ce16:	e7fe      	b.n	800ce16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	d103      	bne.n	800ce26 <xQueueGenericSend+0x6e>
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d101      	bne.n	800ce2a <xQueueGenericSend+0x72>
 800ce26:	2301      	movs	r3, #1
 800ce28:	e000      	b.n	800ce2c <xQueueGenericSend+0x74>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10a      	bne.n	800ce46 <xQueueGenericSend+0x8e>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	623b      	str	r3, [r7, #32]
}
 800ce42:	bf00      	nop
 800ce44:	e7fe      	b.n	800ce44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce46:	f001 faf7 	bl	800e438 <xTaskGetSchedulerState>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <xQueueGenericSend+0x9e>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <xQueueGenericSend+0xa2>
 800ce56:	2301      	movs	r3, #1
 800ce58:	e000      	b.n	800ce5c <xQueueGenericSend+0xa4>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d10a      	bne.n	800ce76 <xQueueGenericSend+0xbe>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	61fb      	str	r3, [r7, #28]
}
 800ce72:	bf00      	nop
 800ce74:	e7fe      	b.n	800ce74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce76:	f7ff fc95 	bl	800c7a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d302      	bcc.n	800ce8c <xQueueGenericSend+0xd4>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d129      	bne.n	800cee0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	68b9      	ldr	r1, [r7, #8]
 800ce90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce92:	f000 fa0b 	bl	800d2ac <prvCopyDataToQueue>
 800ce96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d010      	beq.n	800cec2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea2:	3324      	adds	r3, #36	; 0x24
 800cea4:	4618      	mov	r0, r3
 800cea6:	f001 f899 	bl	800dfdc <xTaskRemoveFromEventList>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d013      	beq.n	800ced8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ceb0:	4b3f      	ldr	r3, [pc, #252]	; (800cfb0 <xQueueGenericSend+0x1f8>)
 800ceb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	e00a      	b.n	800ced8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d007      	beq.n	800ced8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cec8:	4b39      	ldr	r3, [pc, #228]	; (800cfb0 <xQueueGenericSend+0x1f8>)
 800ceca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cece:	601a      	str	r2, [r3, #0]
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ced8:	f7ff fc94 	bl	800c804 <vPortExitCritical>
				return pdPASS;
 800cedc:	2301      	movs	r3, #1
 800cede:	e063      	b.n	800cfa8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d103      	bne.n	800ceee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cee6:	f7ff fc8d 	bl	800c804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	e05c      	b.n	800cfa8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ceee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d106      	bne.n	800cf02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cef4:	f107 0314 	add.w	r3, r7, #20
 800cef8:	4618      	mov	r0, r3
 800cefa:	f001 f8d5 	bl	800e0a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cefe:	2301      	movs	r3, #1
 800cf00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf02:	f7ff fc7f 	bl	800c804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf06:	f000 fd83 	bl	800da10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf0a:	f7ff fc4b 	bl	800c7a4 <vPortEnterCritical>
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf14:	b25b      	sxtb	r3, r3
 800cf16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf1a:	d103      	bne.n	800cf24 <xQueueGenericSend+0x16c>
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf2a:	b25b      	sxtb	r3, r3
 800cf2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf30:	d103      	bne.n	800cf3a <xQueueGenericSend+0x182>
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	2200      	movs	r2, #0
 800cf36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf3a:	f7ff fc63 	bl	800c804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf3e:	1d3a      	adds	r2, r7, #4
 800cf40:	f107 0314 	add.w	r3, r7, #20
 800cf44:	4611      	mov	r1, r2
 800cf46:	4618      	mov	r0, r3
 800cf48:	f001 f8c4 	bl	800e0d4 <xTaskCheckForTimeOut>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d124      	bne.n	800cf9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf54:	f000 faa2 	bl	800d49c <prvIsQueueFull>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d018      	beq.n	800cf90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf60:	3310      	adds	r3, #16
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	4611      	mov	r1, r2
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 ffe8 	bl	800df3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf6e:	f000 fa2d 	bl	800d3cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf72:	f000 fd93 	bl	800da9c <xTaskResumeAll>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f47f af7c 	bne.w	800ce76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cf7e:	4b0c      	ldr	r3, [pc, #48]	; (800cfb0 <xQueueGenericSend+0x1f8>)
 800cf80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	e772      	b.n	800ce76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf92:	f000 fa1b 	bl	800d3cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf96:	f000 fd81 	bl	800da9c <xTaskResumeAll>
 800cf9a:	e76c      	b.n	800ce76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf9e:	f000 fa15 	bl	800d3cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfa2:	f000 fd7b 	bl	800da9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cfa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3738      	adds	r7, #56	; 0x38
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	e000ed04 	.word	0xe000ed04

0800cfb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b090      	sub	sp, #64	; 0x40
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
 800cfc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d10a      	bne.n	800cfe2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd0:	f383 8811 	msr	BASEPRI, r3
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfde:	bf00      	nop
 800cfe0:	e7fe      	b.n	800cfe0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d103      	bne.n	800cff0 <xQueueGenericSendFromISR+0x3c>
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <xQueueGenericSendFromISR+0x40>
 800cff0:	2301      	movs	r3, #1
 800cff2:	e000      	b.n	800cff6 <xQueueGenericSendFromISR+0x42>
 800cff4:	2300      	movs	r3, #0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10a      	bne.n	800d010 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d00c:	bf00      	nop
 800d00e:	e7fe      	b.n	800d00e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	2b02      	cmp	r3, #2
 800d014:	d103      	bne.n	800d01e <xQueueGenericSendFromISR+0x6a>
 800d016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d101      	bne.n	800d022 <xQueueGenericSendFromISR+0x6e>
 800d01e:	2301      	movs	r3, #1
 800d020:	e000      	b.n	800d024 <xQueueGenericSendFromISR+0x70>
 800d022:	2300      	movs	r3, #0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10a      	bne.n	800d03e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	623b      	str	r3, [r7, #32]
}
 800d03a:	bf00      	nop
 800d03c:	e7fe      	b.n	800d03c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d03e:	f7ff fd77 	bl	800cb30 <vPortValidateInterruptPriority>
	__asm volatile
 800d042:	f3ef 8211 	mrs	r2, BASEPRI
 800d046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	61fa      	str	r2, [r7, #28]
 800d058:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d05a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d05c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d066:	429a      	cmp	r2, r3
 800d068:	d302      	bcc.n	800d070 <xQueueGenericSendFromISR+0xbc>
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d12f      	bne.n	800d0d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d080:	683a      	ldr	r2, [r7, #0]
 800d082:	68b9      	ldr	r1, [r7, #8]
 800d084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d086:	f000 f911 	bl	800d2ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d08a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	d112      	bne.n	800d0ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d016      	beq.n	800d0ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09e:	3324      	adds	r3, #36	; 0x24
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f000 ff9b 	bl	800dfdc <xTaskRemoveFromEventList>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00e      	beq.n	800d0ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00b      	beq.n	800d0ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	601a      	str	r2, [r3, #0]
 800d0b8:	e007      	b.n	800d0ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0be:	3301      	adds	r3, #1
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	b25a      	sxtb	r2, r3
 800d0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d0ce:	e001      	b.n	800d0d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f383 8811 	msr	BASEPRI, r3
}
 800d0de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3740      	adds	r7, #64	; 0x40
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
	...

0800d0ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08c      	sub	sp, #48	; 0x30
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10a      	bne.n	800d11c <xQueueReceive+0x30>
	__asm volatile
 800d106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10a:	f383 8811 	msr	BASEPRI, r3
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	623b      	str	r3, [r7, #32]
}
 800d118:	bf00      	nop
 800d11a:	e7fe      	b.n	800d11a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d103      	bne.n	800d12a <xQueueReceive+0x3e>
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <xQueueReceive+0x42>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e000      	b.n	800d130 <xQueueReceive+0x44>
 800d12e:	2300      	movs	r3, #0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10a      	bne.n	800d14a <xQueueReceive+0x5e>
	__asm volatile
 800d134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	61fb      	str	r3, [r7, #28]
}
 800d146:	bf00      	nop
 800d148:	e7fe      	b.n	800d148 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d14a:	f001 f975 	bl	800e438 <xTaskGetSchedulerState>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d102      	bne.n	800d15a <xQueueReceive+0x6e>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <xQueueReceive+0x72>
 800d15a:	2301      	movs	r3, #1
 800d15c:	e000      	b.n	800d160 <xQueueReceive+0x74>
 800d15e:	2300      	movs	r3, #0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10a      	bne.n	800d17a <xQueueReceive+0x8e>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	61bb      	str	r3, [r7, #24]
}
 800d176:	bf00      	nop
 800d178:	e7fe      	b.n	800d178 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d17a:	f7ff fb13 	bl	800c7a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d182:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d186:	2b00      	cmp	r3, #0
 800d188:	d01f      	beq.n	800d1ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d18a:	68b9      	ldr	r1, [r7, #8]
 800d18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d18e:	f000 f8f7 	bl	800d380 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	1e5a      	subs	r2, r3, #1
 800d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d198:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d00f      	beq.n	800d1c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a4:	3310      	adds	r3, #16
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f000 ff18 	bl	800dfdc <xTaskRemoveFromEventList>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d007      	beq.n	800d1c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d1b2:	4b3d      	ldr	r3, [pc, #244]	; (800d2a8 <xQueueReceive+0x1bc>)
 800d1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b8:	601a      	str	r2, [r3, #0]
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1c2:	f7ff fb1f 	bl	800c804 <vPortExitCritical>
				return pdPASS;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e069      	b.n	800d29e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d103      	bne.n	800d1d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1d0:	f7ff fb18 	bl	800c804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	e062      	b.n	800d29e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d106      	bne.n	800d1ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1de:	f107 0310 	add.w	r3, r7, #16
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f000 ff60 	bl	800e0a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1ec:	f7ff fb0a 	bl	800c804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1f0:	f000 fc0e 	bl	800da10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1f4:	f7ff fad6 	bl	800c7a4 <vPortEnterCritical>
 800d1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1fe:	b25b      	sxtb	r3, r3
 800d200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d204:	d103      	bne.n	800d20e <xQueueReceive+0x122>
 800d206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d214:	b25b      	sxtb	r3, r3
 800d216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d21a:	d103      	bne.n	800d224 <xQueueReceive+0x138>
 800d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21e:	2200      	movs	r2, #0
 800d220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d224:	f7ff faee 	bl	800c804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d228:	1d3a      	adds	r2, r7, #4
 800d22a:	f107 0310 	add.w	r3, r7, #16
 800d22e:	4611      	mov	r1, r2
 800d230:	4618      	mov	r0, r3
 800d232:	f000 ff4f 	bl	800e0d4 <xTaskCheckForTimeOut>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d123      	bne.n	800d284 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d23c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d23e:	f000 f917 	bl	800d470 <prvIsQueueEmpty>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d017      	beq.n	800d278 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24a:	3324      	adds	r3, #36	; 0x24
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	4611      	mov	r1, r2
 800d250:	4618      	mov	r0, r3
 800d252:	f000 fe73 	bl	800df3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d258:	f000 f8b8 	bl	800d3cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d25c:	f000 fc1e 	bl	800da9c <xTaskResumeAll>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d189      	bne.n	800d17a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d266:	4b10      	ldr	r3, [pc, #64]	; (800d2a8 <xQueueReceive+0x1bc>)
 800d268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	e780      	b.n	800d17a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d27a:	f000 f8a7 	bl	800d3cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d27e:	f000 fc0d 	bl	800da9c <xTaskResumeAll>
 800d282:	e77a      	b.n	800d17a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d286:	f000 f8a1 	bl	800d3cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d28a:	f000 fc07 	bl	800da9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d28e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d290:	f000 f8ee 	bl	800d470 <prvIsQueueEmpty>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	f43f af6f 	beq.w	800d17a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d29c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3730      	adds	r7, #48	; 0x30
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	e000ed04 	.word	0xe000ed04

0800d2ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10d      	bne.n	800d2e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d14d      	bne.n	800d36e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f001 f8cc 	bl	800e474 <xTaskPriorityDisinherit>
 800d2dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	609a      	str	r2, [r3, #8]
 800d2e4:	e043      	b.n	800d36e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d119      	bne.n	800d320 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6858      	ldr	r0, [r3, #4]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	68b9      	ldr	r1, [r7, #8]
 800d2f8:	f001 fdb8 	bl	800ee6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	685a      	ldr	r2, [r3, #4]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d304:	441a      	add	r2, r3
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	429a      	cmp	r2, r3
 800d314:	d32b      	bcc.n	800d36e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	605a      	str	r2, [r3, #4]
 800d31e:	e026      	b.n	800d36e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	68d8      	ldr	r0, [r3, #12]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d328:	461a      	mov	r2, r3
 800d32a:	68b9      	ldr	r1, [r7, #8]
 800d32c:	f001 fd9e 	bl	800ee6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	68da      	ldr	r2, [r3, #12]
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d338:	425b      	negs	r3, r3
 800d33a:	441a      	add	r2, r3
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	68da      	ldr	r2, [r3, #12]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d207      	bcs.n	800d35c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	689a      	ldr	r2, [r3, #8]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d354:	425b      	negs	r3, r3
 800d356:	441a      	add	r2, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d105      	bne.n	800d36e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	3b01      	subs	r3, #1
 800d36c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	1c5a      	adds	r2, r3, #1
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d376:	697b      	ldr	r3, [r7, #20]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3718      	adds	r7, #24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d018      	beq.n	800d3c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68da      	ldr	r2, [r3, #12]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39a:	441a      	add	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68da      	ldr	r2, [r3, #12]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d303      	bcc.n	800d3b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68d9      	ldr	r1, [r3, #12]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3bc:	461a      	mov	r2, r3
 800d3be:	6838      	ldr	r0, [r7, #0]
 800d3c0:	f001 fd54 	bl	800ee6c <memcpy>
	}
}
 800d3c4:	bf00      	nop
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3d4:	f7ff f9e6 	bl	800c7a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3e0:	e011      	b.n	800d406 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d012      	beq.n	800d410 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	3324      	adds	r3, #36	; 0x24
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f000 fdf4 	bl	800dfdc <xTaskRemoveFromEventList>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d3fa:	f000 fedd 	bl	800e1b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3fe:	7bfb      	ldrb	r3, [r7, #15]
 800d400:	3b01      	subs	r3, #1
 800d402:	b2db      	uxtb	r3, r3
 800d404:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	dce9      	bgt.n	800d3e2 <prvUnlockQueue+0x16>
 800d40e:	e000      	b.n	800d412 <prvUnlockQueue+0x46>
					break;
 800d410:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	22ff      	movs	r2, #255	; 0xff
 800d416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d41a:	f7ff f9f3 	bl	800c804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d41e:	f7ff f9c1 	bl	800c7a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d428:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d42a:	e011      	b.n	800d450 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	691b      	ldr	r3, [r3, #16]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d012      	beq.n	800d45a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	3310      	adds	r3, #16
 800d438:	4618      	mov	r0, r3
 800d43a:	f000 fdcf 	bl	800dfdc <xTaskRemoveFromEventList>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d444:	f000 feb8 	bl	800e1b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d448:	7bbb      	ldrb	r3, [r7, #14]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d454:	2b00      	cmp	r3, #0
 800d456:	dce9      	bgt.n	800d42c <prvUnlockQueue+0x60>
 800d458:	e000      	b.n	800d45c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d45a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	22ff      	movs	r2, #255	; 0xff
 800d460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d464:	f7ff f9ce 	bl	800c804 <vPortExitCritical>
}
 800d468:	bf00      	nop
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d478:	f7ff f994 	bl	800c7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d480:	2b00      	cmp	r3, #0
 800d482:	d102      	bne.n	800d48a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d484:	2301      	movs	r3, #1
 800d486:	60fb      	str	r3, [r7, #12]
 800d488:	e001      	b.n	800d48e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d48a:	2300      	movs	r3, #0
 800d48c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d48e:	f7ff f9b9 	bl	800c804 <vPortExitCritical>

	return xReturn;
 800d492:	68fb      	ldr	r3, [r7, #12]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4a4:	f7ff f97e 	bl	800c7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d102      	bne.n	800d4ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	60fb      	str	r3, [r7, #12]
 800d4b8:	e001      	b.n	800d4be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4be:	f7ff f9a1 	bl	800c804 <vPortExitCritical>

	return xReturn;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	60fb      	str	r3, [r7, #12]
 800d4da:	e014      	b.n	800d506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d4dc:	4a0f      	ldr	r2, [pc, #60]	; (800d51c <vQueueAddToRegistry+0x50>)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d10b      	bne.n	800d500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d4e8:	490c      	ldr	r1, [pc, #48]	; (800d51c <vQueueAddToRegistry+0x50>)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	683a      	ldr	r2, [r7, #0]
 800d4ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d4f2:	4a0a      	ldr	r2, [pc, #40]	; (800d51c <vQueueAddToRegistry+0x50>)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	4413      	add	r3, r2
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d4fe:	e006      	b.n	800d50e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	3301      	adds	r3, #1
 800d504:	60fb      	str	r3, [r7, #12]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2b07      	cmp	r3, #7
 800d50a:	d9e7      	bls.n	800d4dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d50c:	bf00      	nop
 800d50e:	bf00      	nop
 800d510:	3714      	adds	r7, #20
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	2000af6c 	.word	0x2000af6c

0800d520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d530:	f7ff f938 	bl	800c7a4 <vPortEnterCritical>
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d53a:	b25b      	sxtb	r3, r3
 800d53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d540:	d103      	bne.n	800d54a <vQueueWaitForMessageRestricted+0x2a>
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2200      	movs	r2, #0
 800d546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d550:	b25b      	sxtb	r3, r3
 800d552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d556:	d103      	bne.n	800d560 <vQueueWaitForMessageRestricted+0x40>
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d560:	f7ff f950 	bl	800c804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d106      	bne.n	800d57a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	3324      	adds	r3, #36	; 0x24
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	68b9      	ldr	r1, [r7, #8]
 800d574:	4618      	mov	r0, r3
 800d576:	f000 fd05 	bl	800df84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d57a:	6978      	ldr	r0, [r7, #20]
 800d57c:	f7ff ff26 	bl	800d3cc <prvUnlockQueue>
	}
 800d580:	bf00      	nop
 800d582:	3718      	adds	r7, #24
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08e      	sub	sp, #56	; 0x38
 800d58c:	af04      	add	r7, sp, #16
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10a      	bne.n	800d5b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a0:	f383 8811 	msr	BASEPRI, r3
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	623b      	str	r3, [r7, #32]
}
 800d5ae:	bf00      	nop
 800d5b0:	e7fe      	b.n	800d5b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d10a      	bne.n	800d5ce <xTaskCreateStatic+0x46>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	61fb      	str	r3, [r7, #28]
}
 800d5ca:	bf00      	nop
 800d5cc:	e7fe      	b.n	800d5cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d5ce:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800d5d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800d5da:	d00a      	beq.n	800d5f2 <xTaskCreateStatic+0x6a>
	__asm volatile
 800d5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e0:	f383 8811 	msr	BASEPRI, r3
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	61bb      	str	r3, [r7, #24]
}
 800d5ee:	bf00      	nop
 800d5f0:	e7fe      	b.n	800d5f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d01e      	beq.n	800d638 <xTaskCreateStatic+0xb0>
 800d5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d01b      	beq.n	800d638 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d602:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d608:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	2202      	movs	r2, #2
 800d60e:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d612:	2300      	movs	r3, #0
 800d614:	9303      	str	r3, [sp, #12]
 800d616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d618:	9302      	str	r3, [sp, #8]
 800d61a:	f107 0314 	add.w	r3, r7, #20
 800d61e:	9301      	str	r3, [sp, #4]
 800d620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	68b9      	ldr	r1, [r7, #8]
 800d62a:	68f8      	ldr	r0, [r7, #12]
 800d62c:	f000 f852 	bl	800d6d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d632:	f000 f90b 	bl	800d84c <prvAddNewTaskToReadyList>
 800d636:	e001      	b.n	800d63c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800d638:	2300      	movs	r3, #0
 800d63a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d63c:	697b      	ldr	r3, [r7, #20]
	}
 800d63e:	4618      	mov	r0, r3
 800d640:	3728      	adds	r7, #40	; 0x28
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d646:	b580      	push	{r7, lr}
 800d648:	b08c      	sub	sp, #48	; 0x30
 800d64a:	af04      	add	r7, sp, #16
 800d64c:	60f8      	str	r0, [r7, #12]
 800d64e:	60b9      	str	r1, [r7, #8]
 800d650:	603b      	str	r3, [r7, #0]
 800d652:	4613      	mov	r3, r2
 800d654:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d656:	88fb      	ldrh	r3, [r7, #6]
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fe fcd6 	bl	800c00c <pvPortMalloc>
 800d660:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00f      	beq.n	800d688 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d668:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800d66c:	f7fe fcce 	bl	800c00c <pvPortMalloc>
 800d670:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d003      	beq.n	800d680 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	697a      	ldr	r2, [r7, #20]
 800d67c:	631a      	str	r2, [r3, #48]	; 0x30
 800d67e:	e005      	b.n	800d68c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d680:	6978      	ldr	r0, [r7, #20]
 800d682:	f7fe fd93 	bl	800c1ac <vPortFree>
 800d686:	e001      	b.n	800d68c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d688:	2300      	movs	r3, #0
 800d68a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d017      	beq.n	800d6c2 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	2200      	movs	r2, #0
 800d696:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d69a:	88fa      	ldrh	r2, [r7, #6]
 800d69c:	2300      	movs	r3, #0
 800d69e:	9303      	str	r3, [sp, #12]
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	9302      	str	r3, [sp, #8]
 800d6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a6:	9301      	str	r3, [sp, #4]
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	68b9      	ldr	r1, [r7, #8]
 800d6b0:	68f8      	ldr	r0, [r7, #12]
 800d6b2:	f000 f80f 	bl	800d6d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6b6:	69f8      	ldr	r0, [r7, #28]
 800d6b8:	f000 f8c8 	bl	800d84c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	61bb      	str	r3, [r7, #24]
 800d6c0:	e002      	b.n	800d6c8 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d6c8:	69bb      	ldr	r3, [r7, #24]
	}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3720      	adds	r7, #32
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
	...

0800d6d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	21a5      	movs	r1, #165	; 0xa5
 800d6ee:	f001 fbcb 	bl	800ee88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	4413      	add	r3, r2
 800d702:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	f023 0307 	bic.w	r3, r3, #7
 800d70a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	f003 0307 	and.w	r3, r3, #7
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00a      	beq.n	800d72c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	617b      	str	r3, [r7, #20]
}
 800d728:	bf00      	nop
 800d72a:	e7fe      	b.n	800d72a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800d72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72e:	69ba      	ldr	r2, [r7, #24]
 800d730:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d01f      	beq.n	800d77a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d73a:	2300      	movs	r3, #0
 800d73c:	61fb      	str	r3, [r7, #28]
 800d73e:	e012      	b.n	800d766 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	4413      	add	r3, r2
 800d746:	7819      	ldrb	r1, [r3, #0]
 800d748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	4413      	add	r3, r2
 800d74e:	3334      	adds	r3, #52	; 0x34
 800d750:	460a      	mov	r2, r1
 800d752:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	4413      	add	r3, r2
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d006      	beq.n	800d76e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	3301      	adds	r3, #1
 800d764:	61fb      	str	r3, [r7, #28]
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	2bfe      	cmp	r3, #254	; 0xfe
 800d76a:	d9e9      	bls.n	800d740 <prvInitialiseNewTask+0x6c>
 800d76c:	e000      	b.n	800d770 <prvInitialiseNewTask+0x9c>
			{
				break;
 800d76e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d772:	2200      	movs	r2, #0
 800d774:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800d778:	e003      	b.n	800d782 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77c:	2200      	movs	r2, #0
 800d77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d784:	2b37      	cmp	r3, #55	; 0x37
 800d786:	d901      	bls.n	800d78c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d788:	2337      	movs	r3, #55	; 0x37
 800d78a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d790:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d796:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	2200      	movs	r2, #0
 800d79e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fe fe3e 	bl	800c428 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	3318      	adds	r3, #24
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fe fe39 	bl	800c428 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d7f2:	2260      	movs	r2, #96	; 0x60
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f001 fb46 	bl	800ee88 <memset>
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fe:	4a10      	ldr	r2, [pc, #64]	; (800d840 <prvInitialiseNewTask+0x16c>)
 800d800:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	4a0f      	ldr	r2, [pc, #60]	; (800d844 <prvInitialiseNewTask+0x170>)
 800d808:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800d80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80e:	4a0e      	ldr	r2, [pc, #56]	; (800d848 <prvInitialiseNewTask+0x174>)
 800d810:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800d814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d816:	2200      	movs	r2, #0
 800d818:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	68f9      	ldr	r1, [r7, #12]
 800d820:	69b8      	ldr	r0, [r7, #24]
 800d822:	f7fe fe95 	bl	800c550 <pxPortInitialiseStack>
 800d826:	4602      	mov	r2, r0
 800d828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d002      	beq.n	800d838 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d836:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d838:	bf00      	nop
 800d83a:	3720      	adds	r7, #32
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	0800fb88 	.word	0x0800fb88
 800d844:	0800fba8 	.word	0x0800fba8
 800d848:	0800fb68 	.word	0x0800fb68

0800d84c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d854:	f7fe ffa6 	bl	800c7a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d858:	4b2d      	ldr	r3, [pc, #180]	; (800d910 <prvAddNewTaskToReadyList+0xc4>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	3301      	adds	r3, #1
 800d85e:	4a2c      	ldr	r2, [pc, #176]	; (800d910 <prvAddNewTaskToReadyList+0xc4>)
 800d860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d862:	4b2c      	ldr	r3, [pc, #176]	; (800d914 <prvAddNewTaskToReadyList+0xc8>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d109      	bne.n	800d87e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d86a:	4a2a      	ldr	r2, [pc, #168]	; (800d914 <prvAddNewTaskToReadyList+0xc8>)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d870:	4b27      	ldr	r3, [pc, #156]	; (800d910 <prvAddNewTaskToReadyList+0xc4>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d110      	bne.n	800d89a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d878:	f000 fd1a 	bl	800e2b0 <prvInitialiseTaskLists>
 800d87c:	e00d      	b.n	800d89a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d87e:	4b26      	ldr	r3, [pc, #152]	; (800d918 <prvAddNewTaskToReadyList+0xcc>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d109      	bne.n	800d89a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d886:	4b23      	ldr	r3, [pc, #140]	; (800d914 <prvAddNewTaskToReadyList+0xc8>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d890:	429a      	cmp	r2, r3
 800d892:	d802      	bhi.n	800d89a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d894:	4a1f      	ldr	r2, [pc, #124]	; (800d914 <prvAddNewTaskToReadyList+0xc8>)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d89a:	4b20      	ldr	r3, [pc, #128]	; (800d91c <prvAddNewTaskToReadyList+0xd0>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	4a1e      	ldr	r2, [pc, #120]	; (800d91c <prvAddNewTaskToReadyList+0xd0>)
 800d8a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d8a4:	4b1d      	ldr	r3, [pc, #116]	; (800d91c <prvAddNewTaskToReadyList+0xd0>)
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b2:	4b1b      	ldr	r3, [pc, #108]	; (800d920 <prvAddNewTaskToReadyList+0xd4>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d903      	bls.n	800d8c2 <prvAddNewTaskToReadyList+0x76>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8be:	4a18      	ldr	r2, [pc, #96]	; (800d920 <prvAddNewTaskToReadyList+0xd4>)
 800d8c0:	6013      	str	r3, [r2, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4413      	add	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4a15      	ldr	r2, [pc, #84]	; (800d924 <prvAddNewTaskToReadyList+0xd8>)
 800d8d0:	441a      	add	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	4610      	mov	r0, r2
 800d8da:	f7fe fdb2 	bl	800c442 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d8de:	f7fe ff91 	bl	800c804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d8e2:	4b0d      	ldr	r3, [pc, #52]	; (800d918 <prvAddNewTaskToReadyList+0xcc>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00e      	beq.n	800d908 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d8ea:	4b0a      	ldr	r3, [pc, #40]	; (800d914 <prvAddNewTaskToReadyList+0xc8>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d207      	bcs.n	800d908 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8f8:	4b0b      	ldr	r3, [pc, #44]	; (800d928 <prvAddNewTaskToReadyList+0xdc>)
 800d8fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8fe:	601a      	str	r2, [r3, #0]
 800d900:	f3bf 8f4f 	dsb	sy
 800d904:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d908:	bf00      	nop
 800d90a:	3708      	adds	r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	2000b484 	.word	0x2000b484
 800d914:	2000afac 	.word	0x2000afac
 800d918:	2000b490 	.word	0x2000b490
 800d91c:	2000b4a0 	.word	0x2000b4a0
 800d920:	2000b48c 	.word	0x2000b48c
 800d924:	2000afb0 	.word	0x2000afb0
 800d928:	e000ed04 	.word	0xe000ed04

0800d92c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b08a      	sub	sp, #40	; 0x28
 800d930:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d932:	2300      	movs	r3, #0
 800d934:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d936:	2300      	movs	r3, #0
 800d938:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d93a:	463a      	mov	r2, r7
 800d93c:	1d39      	adds	r1, r7, #4
 800d93e:	f107 0308 	add.w	r3, r7, #8
 800d942:	4618      	mov	r0, r3
 800d944:	f7fe fadc 	bl	800bf00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d948:	6839      	ldr	r1, [r7, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	68ba      	ldr	r2, [r7, #8]
 800d94e:	9202      	str	r2, [sp, #8]
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	2300      	movs	r3, #0
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	2300      	movs	r3, #0
 800d958:	460a      	mov	r2, r1
 800d95a:	4925      	ldr	r1, [pc, #148]	; (800d9f0 <vTaskStartScheduler+0xc4>)
 800d95c:	4825      	ldr	r0, [pc, #148]	; (800d9f4 <vTaskStartScheduler+0xc8>)
 800d95e:	f7ff fe13 	bl	800d588 <xTaskCreateStatic>
 800d962:	4603      	mov	r3, r0
 800d964:	4a24      	ldr	r2, [pc, #144]	; (800d9f8 <vTaskStartScheduler+0xcc>)
 800d966:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d968:	4b23      	ldr	r3, [pc, #140]	; (800d9f8 <vTaskStartScheduler+0xcc>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d002      	beq.n	800d976 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d970:	2301      	movs	r3, #1
 800d972:	617b      	str	r3, [r7, #20]
 800d974:	e001      	b.n	800d97a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d976:	2300      	movs	r3, #0
 800d978:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d102      	bne.n	800d986 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d980:	f000 fe46 	bl	800e610 <xTimerCreateTimerTask>
 800d984:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d11e      	bne.n	800d9ca <vTaskStartScheduler+0x9e>
	__asm volatile
 800d98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	613b      	str	r3, [r7, #16]
}
 800d99e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9a0:	4b16      	ldr	r3, [pc, #88]	; (800d9fc <vTaskStartScheduler+0xd0>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d9a8:	4a15      	ldr	r2, [pc, #84]	; (800da00 <vTaskStartScheduler+0xd4>)
 800d9aa:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d9ac:	4b15      	ldr	r3, [pc, #84]	; (800da04 <vTaskStartScheduler+0xd8>)
 800d9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d9b4:	4b14      	ldr	r3, [pc, #80]	; (800da08 <vTaskStartScheduler+0xdc>)
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9ba:	4b14      	ldr	r3, [pc, #80]	; (800da0c <vTaskStartScheduler+0xe0>)
 800d9bc:	2200      	movs	r2, #0
 800d9be:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d9c0:	f7f4 f91c 	bl	8001bfc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9c4:	f7fe fe4c 	bl	800c660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9c8:	e00e      	b.n	800d9e8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d0:	d10a      	bne.n	800d9e8 <vTaskStartScheduler+0xbc>
	__asm volatile
 800d9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	60fb      	str	r3, [r7, #12]
}
 800d9e4:	bf00      	nop
 800d9e6:	e7fe      	b.n	800d9e6 <vTaskStartScheduler+0xba>
}
 800d9e8:	bf00      	nop
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	0800f900 	.word	0x0800f900
 800d9f4:	0800e1d1 	.word	0x0800e1d1
 800d9f8:	2000b4a8 	.word	0x2000b4a8
 800d9fc:	2000afac 	.word	0x2000afac
 800da00:	20000010 	.word	0x20000010
 800da04:	2000b4a4 	.word	0x2000b4a4
 800da08:	2000b490 	.word	0x2000b490
 800da0c:	2000b488 	.word	0x2000b488

0800da10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da10:	b480      	push	{r7}
 800da12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da14:	4b04      	ldr	r3, [pc, #16]	; (800da28 <vTaskSuspendAll+0x18>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3301      	adds	r3, #1
 800da1a:	4a03      	ldr	r2, [pc, #12]	; (800da28 <vTaskSuspendAll+0x18>)
 800da1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da1e:	bf00      	nop
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	2000b4ac 	.word	0x2000b4ac

0800da2c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800da32:	2300      	movs	r3, #0
 800da34:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800da36:	4b14      	ldr	r3, [pc, #80]	; (800da88 <prvGetExpectedIdleTime+0x5c>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d001      	beq.n	800da42 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800da3e:	2301      	movs	r3, #1
 800da40:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800da42:	4b12      	ldr	r3, [pc, #72]	; (800da8c <prvGetExpectedIdleTime+0x60>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800da4c:	2300      	movs	r3, #0
 800da4e:	607b      	str	r3, [r7, #4]
 800da50:	e012      	b.n	800da78 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800da52:	4b0f      	ldr	r3, [pc, #60]	; (800da90 <prvGetExpectedIdleTime+0x64>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b01      	cmp	r3, #1
 800da58:	d902      	bls.n	800da60 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800da5a:	2300      	movs	r3, #0
 800da5c:	607b      	str	r3, [r7, #4]
 800da5e:	e00b      	b.n	800da78 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d002      	beq.n	800da6c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800da66:	2300      	movs	r3, #0
 800da68:	607b      	str	r3, [r7, #4]
 800da6a:	e005      	b.n	800da78 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800da6c:	4b09      	ldr	r3, [pc, #36]	; (800da94 <prvGetExpectedIdleTime+0x68>)
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	4b09      	ldr	r3, [pc, #36]	; (800da98 <prvGetExpectedIdleTime+0x6c>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	1ad3      	subs	r3, r2, r3
 800da76:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800da78:	687b      	ldr	r3, [r7, #4]
	}
 800da7a:	4618      	mov	r0, r3
 800da7c:	370c      	adds	r7, #12
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	2000b48c 	.word	0x2000b48c
 800da8c:	2000afac 	.word	0x2000afac
 800da90:	2000afb0 	.word	0x2000afb0
 800da94:	2000b4a4 	.word	0x2000b4a4
 800da98:	2000b488 	.word	0x2000b488

0800da9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800daa2:	2300      	movs	r3, #0
 800daa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800daa6:	2300      	movs	r3, #0
 800daa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800daaa:	4b42      	ldr	r3, [pc, #264]	; (800dbb4 <xTaskResumeAll+0x118>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d10a      	bne.n	800dac8 <xTaskResumeAll+0x2c>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	603b      	str	r3, [r7, #0]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dac8:	f7fe fe6c 	bl	800c7a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dacc:	4b39      	ldr	r3, [pc, #228]	; (800dbb4 <xTaskResumeAll+0x118>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	3b01      	subs	r3, #1
 800dad2:	4a38      	ldr	r2, [pc, #224]	; (800dbb4 <xTaskResumeAll+0x118>)
 800dad4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dad6:	4b37      	ldr	r3, [pc, #220]	; (800dbb4 <xTaskResumeAll+0x118>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d162      	bne.n	800dba4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dade:	4b36      	ldr	r3, [pc, #216]	; (800dbb8 <xTaskResumeAll+0x11c>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d05e      	beq.n	800dba4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dae6:	e02f      	b.n	800db48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae8:	4b34      	ldr	r3, [pc, #208]	; (800dbbc <xTaskResumeAll+0x120>)
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	3318      	adds	r3, #24
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fe fd01 	bl	800c4fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	3304      	adds	r3, #4
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fe fcfc 	bl	800c4fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db08:	4b2d      	ldr	r3, [pc, #180]	; (800dbc0 <xTaskResumeAll+0x124>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d903      	bls.n	800db18 <xTaskResumeAll+0x7c>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db14:	4a2a      	ldr	r2, [pc, #168]	; (800dbc0 <xTaskResumeAll+0x124>)
 800db16:	6013      	str	r3, [r2, #0]
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db1c:	4613      	mov	r3, r2
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	4413      	add	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4a27      	ldr	r2, [pc, #156]	; (800dbc4 <xTaskResumeAll+0x128>)
 800db26:	441a      	add	r2, r3
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	3304      	adds	r3, #4
 800db2c:	4619      	mov	r1, r3
 800db2e:	4610      	mov	r0, r2
 800db30:	f7fe fc87 	bl	800c442 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db38:	4b23      	ldr	r3, [pc, #140]	; (800dbc8 <xTaskResumeAll+0x12c>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db3e:	429a      	cmp	r2, r3
 800db40:	d302      	bcc.n	800db48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800db42:	4b22      	ldr	r3, [pc, #136]	; (800dbcc <xTaskResumeAll+0x130>)
 800db44:	2201      	movs	r2, #1
 800db46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db48:	4b1c      	ldr	r3, [pc, #112]	; (800dbbc <xTaskResumeAll+0x120>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1cb      	bne.n	800dae8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d001      	beq.n	800db5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db56:	f000 fc4f 	bl	800e3f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db5a:	4b1d      	ldr	r3, [pc, #116]	; (800dbd0 <xTaskResumeAll+0x134>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d010      	beq.n	800db88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db66:	f000 f86f 	bl	800dc48 <xTaskIncrementTick>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d002      	beq.n	800db76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800db70:	4b16      	ldr	r3, [pc, #88]	; (800dbcc <xTaskResumeAll+0x130>)
 800db72:	2201      	movs	r2, #1
 800db74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	3b01      	subs	r3, #1
 800db7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1f1      	bne.n	800db66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800db82:	4b13      	ldr	r3, [pc, #76]	; (800dbd0 <xTaskResumeAll+0x134>)
 800db84:	2200      	movs	r2, #0
 800db86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db88:	4b10      	ldr	r3, [pc, #64]	; (800dbcc <xTaskResumeAll+0x130>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d009      	beq.n	800dba4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db90:	2301      	movs	r3, #1
 800db92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db94:	4b0f      	ldr	r3, [pc, #60]	; (800dbd4 <xTaskResumeAll+0x138>)
 800db96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db9a:	601a      	str	r2, [r3, #0]
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dba4:	f7fe fe2e 	bl	800c804 <vPortExitCritical>

	return xAlreadyYielded;
 800dba8:	68bb      	ldr	r3, [r7, #8]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	2000b4ac 	.word	0x2000b4ac
 800dbb8:	2000b484 	.word	0x2000b484
 800dbbc:	2000b440 	.word	0x2000b440
 800dbc0:	2000b48c 	.word	0x2000b48c
 800dbc4:	2000afb0 	.word	0x2000afb0
 800dbc8:	2000afac 	.word	0x2000afac
 800dbcc:	2000b498 	.word	0x2000b498
 800dbd0:	2000b494 	.word	0x2000b494
 800dbd4:	e000ed04 	.word	0xe000ed04

0800dbd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dbde:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <xTaskGetTickCount+0x1c>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dbe4:	687b      	ldr	r3, [r7, #4]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	370c      	adds	r7, #12
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	2000b488 	.word	0x2000b488

0800dbf8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800dc00:	4b0f      	ldr	r3, [pc, #60]	; (800dc40 <vTaskStepTick+0x48>)
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	441a      	add	r2, r3
 800dc08:	4b0e      	ldr	r3, [pc, #56]	; (800dc44 <vTaskStepTick+0x4c>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d90a      	bls.n	800dc26 <vTaskStepTick+0x2e>
	__asm volatile
 800dc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc14:	f383 8811 	msr	BASEPRI, r3
 800dc18:	f3bf 8f6f 	isb	sy
 800dc1c:	f3bf 8f4f 	dsb	sy
 800dc20:	60fb      	str	r3, [r7, #12]
}
 800dc22:	bf00      	nop
 800dc24:	e7fe      	b.n	800dc24 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800dc26:	4b06      	ldr	r3, [pc, #24]	; (800dc40 <vTaskStepTick+0x48>)
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	4a04      	ldr	r2, [pc, #16]	; (800dc40 <vTaskStepTick+0x48>)
 800dc30:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800dc32:	bf00      	nop
 800dc34:	3714      	adds	r7, #20
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	2000b488 	.word	0x2000b488
 800dc44:	2000b4a4 	.word	0x2000b4a4

0800dc48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc52:	4b53      	ldr	r3, [pc, #332]	; (800dda0 <xTaskIncrementTick+0x158>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f040 8095 	bne.w	800dd86 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc5c:	4b51      	ldr	r3, [pc, #324]	; (800dda4 <xTaskIncrementTick+0x15c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	3301      	adds	r3, #1
 800dc62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc64:	4a4f      	ldr	r2, [pc, #316]	; (800dda4 <xTaskIncrementTick+0x15c>)
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d120      	bne.n	800dcb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc70:	4b4d      	ldr	r3, [pc, #308]	; (800dda8 <xTaskIncrementTick+0x160>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00a      	beq.n	800dc90 <xTaskIncrementTick+0x48>
	__asm volatile
 800dc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7e:	f383 8811 	msr	BASEPRI, r3
 800dc82:	f3bf 8f6f 	isb	sy
 800dc86:	f3bf 8f4f 	dsb	sy
 800dc8a:	603b      	str	r3, [r7, #0]
}
 800dc8c:	bf00      	nop
 800dc8e:	e7fe      	b.n	800dc8e <xTaskIncrementTick+0x46>
 800dc90:	4b45      	ldr	r3, [pc, #276]	; (800dda8 <xTaskIncrementTick+0x160>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	60fb      	str	r3, [r7, #12]
 800dc96:	4b45      	ldr	r3, [pc, #276]	; (800ddac <xTaskIncrementTick+0x164>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a43      	ldr	r2, [pc, #268]	; (800dda8 <xTaskIncrementTick+0x160>)
 800dc9c:	6013      	str	r3, [r2, #0]
 800dc9e:	4a43      	ldr	r2, [pc, #268]	; (800ddac <xTaskIncrementTick+0x164>)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6013      	str	r3, [r2, #0]
 800dca4:	4b42      	ldr	r3, [pc, #264]	; (800ddb0 <xTaskIncrementTick+0x168>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	4a41      	ldr	r2, [pc, #260]	; (800ddb0 <xTaskIncrementTick+0x168>)
 800dcac:	6013      	str	r3, [r2, #0]
 800dcae:	f000 fba3 	bl	800e3f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dcb2:	4b40      	ldr	r3, [pc, #256]	; (800ddb4 <xTaskIncrementTick+0x16c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	693a      	ldr	r2, [r7, #16]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d349      	bcc.n	800dd50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcbc:	4b3a      	ldr	r3, [pc, #232]	; (800dda8 <xTaskIncrementTick+0x160>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d104      	bne.n	800dcd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcc6:	4b3b      	ldr	r3, [pc, #236]	; (800ddb4 <xTaskIncrementTick+0x16c>)
 800dcc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dccc:	601a      	str	r2, [r3, #0]
					break;
 800dcce:	e03f      	b.n	800dd50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcd0:	4b35      	ldr	r3, [pc, #212]	; (800dda8 <xTaskIncrementTick+0x160>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	68db      	ldr	r3, [r3, #12]
 800dcd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d203      	bcs.n	800dcf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dce8:	4a32      	ldr	r2, [pc, #200]	; (800ddb4 <xTaskIncrementTick+0x16c>)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dcee:	e02f      	b.n	800dd50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7fe fc01 	bl	800c4fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d004      	beq.n	800dd0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	3318      	adds	r3, #24
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fe fbf8 	bl	800c4fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd10:	4b29      	ldr	r3, [pc, #164]	; (800ddb8 <xTaskIncrementTick+0x170>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d903      	bls.n	800dd20 <xTaskIncrementTick+0xd8>
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd1c:	4a26      	ldr	r2, [pc, #152]	; (800ddb8 <xTaskIncrementTick+0x170>)
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd24:	4613      	mov	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4a23      	ldr	r2, [pc, #140]	; (800ddbc <xTaskIncrementTick+0x174>)
 800dd2e:	441a      	add	r2, r3
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	3304      	adds	r3, #4
 800dd34:	4619      	mov	r1, r3
 800dd36:	4610      	mov	r0, r2
 800dd38:	f7fe fb83 	bl	800c442 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd40:	4b1f      	ldr	r3, [pc, #124]	; (800ddc0 <xTaskIncrementTick+0x178>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d3b8      	bcc.n	800dcbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd4e:	e7b5      	b.n	800dcbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd50:	4b1b      	ldr	r3, [pc, #108]	; (800ddc0 <xTaskIncrementTick+0x178>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd56:	4919      	ldr	r1, [pc, #100]	; (800ddbc <xTaskIncrementTick+0x174>)
 800dd58:	4613      	mov	r3, r2
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	4413      	add	r3, r2
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	440b      	add	r3, r1
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d901      	bls.n	800dd6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800dd6c:	4b15      	ldr	r3, [pc, #84]	; (800ddc4 <xTaskIncrementTick+0x17c>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d101      	bne.n	800dd78 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800dd74:	f7f3 ff58 	bl	8001c28 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dd78:	4b13      	ldr	r3, [pc, #76]	; (800ddc8 <xTaskIncrementTick+0x180>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d009      	beq.n	800dd94 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800dd80:	2301      	movs	r3, #1
 800dd82:	617b      	str	r3, [r7, #20]
 800dd84:	e006      	b.n	800dd94 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dd86:	4b0f      	ldr	r3, [pc, #60]	; (800ddc4 <xTaskIncrementTick+0x17c>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	4a0d      	ldr	r2, [pc, #52]	; (800ddc4 <xTaskIncrementTick+0x17c>)
 800dd8e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800dd90:	f7f3 ff4a 	bl	8001c28 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800dd94:	697b      	ldr	r3, [r7, #20]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3718      	adds	r7, #24
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	2000b4ac 	.word	0x2000b4ac
 800dda4:	2000b488 	.word	0x2000b488
 800dda8:	2000b438 	.word	0x2000b438
 800ddac:	2000b43c 	.word	0x2000b43c
 800ddb0:	2000b49c 	.word	0x2000b49c
 800ddb4:	2000b4a4 	.word	0x2000b4a4
 800ddb8:	2000b48c 	.word	0x2000b48c
 800ddbc:	2000afb0 	.word	0x2000afb0
 800ddc0:	2000afac 	.word	0x2000afac
 800ddc4:	2000b494 	.word	0x2000b494
 800ddc8:	2000b498 	.word	0x2000b498

0800ddcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ddd2:	4b51      	ldr	r3, [pc, #324]	; (800df18 <vTaskSwitchContext+0x14c>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d003      	beq.n	800dde2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ddda:	4b50      	ldr	r3, [pc, #320]	; (800df1c <vTaskSwitchContext+0x150>)
 800dddc:	2201      	movs	r2, #1
 800ddde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dde0:	e095      	b.n	800df0e <vTaskSwitchContext+0x142>
		xYieldPending = pdFALSE;
 800dde2:	4b4e      	ldr	r3, [pc, #312]	; (800df1c <vTaskSwitchContext+0x150>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800dde8:	f7f3 ff0f 	bl	8001c0a <getRunTimeCounterValue>
 800ddec:	4603      	mov	r3, r0
 800ddee:	4a4c      	ldr	r2, [pc, #304]	; (800df20 <vTaskSwitchContext+0x154>)
 800ddf0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ddf2:	4b4b      	ldr	r3, [pc, #300]	; (800df20 <vTaskSwitchContext+0x154>)
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	4b4b      	ldr	r3, [pc, #300]	; (800df24 <vTaskSwitchContext+0x158>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d90b      	bls.n	800de16 <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ddfe:	4b4a      	ldr	r3, [pc, #296]	; (800df28 <vTaskSwitchContext+0x15c>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800de06:	4a46      	ldr	r2, [pc, #280]	; (800df20 <vTaskSwitchContext+0x154>)
 800de08:	6810      	ldr	r0, [r2, #0]
 800de0a:	4a46      	ldr	r2, [pc, #280]	; (800df24 <vTaskSwitchContext+0x158>)
 800de0c:	6812      	ldr	r2, [r2, #0]
 800de0e:	1a82      	subs	r2, r0, r2
 800de10:	440a      	add	r2, r1
 800de12:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800de16:	4b42      	ldr	r3, [pc, #264]	; (800df20 <vTaskSwitchContext+0x154>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a42      	ldr	r2, [pc, #264]	; (800df24 <vTaskSwitchContext+0x158>)
 800de1c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800de1e:	4b42      	ldr	r3, [pc, #264]	; (800df28 <vTaskSwitchContext+0x15c>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de24:	613b      	str	r3, [r7, #16]
 800de26:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800de2a:	60fb      	str	r3, [r7, #12]
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	429a      	cmp	r2, r3
 800de34:	d111      	bne.n	800de5a <vTaskSwitchContext+0x8e>
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	3304      	adds	r3, #4
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d10b      	bne.n	800de5a <vTaskSwitchContext+0x8e>
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	3308      	adds	r3, #8
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	68fa      	ldr	r2, [r7, #12]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d105      	bne.n	800de5a <vTaskSwitchContext+0x8e>
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	330c      	adds	r3, #12
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	429a      	cmp	r2, r3
 800de58:	d008      	beq.n	800de6c <vTaskSwitchContext+0xa0>
 800de5a:	4b33      	ldr	r3, [pc, #204]	; (800df28 <vTaskSwitchContext+0x15c>)
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	4b32      	ldr	r3, [pc, #200]	; (800df28 <vTaskSwitchContext+0x15c>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	3334      	adds	r3, #52	; 0x34
 800de64:	4619      	mov	r1, r3
 800de66:	4610      	mov	r0, r2
 800de68:	f7f3 fee5 	bl	8001c36 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800de6c:	4b2e      	ldr	r3, [pc, #184]	; (800df28 <vTaskSwitchContext+0x15c>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a2e      	ldr	r2, [pc, #184]	; (800df2c <vTaskSwitchContext+0x160>)
 800de72:	6812      	ldr	r2, [r2, #0]
 800de74:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de78:	4b2d      	ldr	r3, [pc, #180]	; (800df30 <vTaskSwitchContext+0x164>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	617b      	str	r3, [r7, #20]
 800de7e:	e010      	b.n	800dea2 <vTaskSwitchContext+0xd6>
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d10a      	bne.n	800de9c <vTaskSwitchContext+0xd0>
	__asm volatile
 800de86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8a:	f383 8811 	msr	BASEPRI, r3
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	607b      	str	r3, [r7, #4]
}
 800de98:	bf00      	nop
 800de9a:	e7fe      	b.n	800de9a <vTaskSwitchContext+0xce>
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	617b      	str	r3, [r7, #20]
 800dea2:	4924      	ldr	r1, [pc, #144]	; (800df34 <vTaskSwitchContext+0x168>)
 800dea4:	697a      	ldr	r2, [r7, #20]
 800dea6:	4613      	mov	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	4413      	add	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	440b      	add	r3, r1
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d0e4      	beq.n	800de80 <vTaskSwitchContext+0xb4>
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	4613      	mov	r3, r2
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	4413      	add	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	4a1c      	ldr	r2, [pc, #112]	; (800df34 <vTaskSwitchContext+0x168>)
 800dec2:	4413      	add	r3, r2
 800dec4:	60bb      	str	r3, [r7, #8]
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	685a      	ldr	r2, [r3, #4]
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	605a      	str	r2, [r3, #4]
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	685a      	ldr	r2, [r3, #4]
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	3308      	adds	r3, #8
 800ded8:	429a      	cmp	r2, r3
 800deda:	d104      	bne.n	800dee6 <vTaskSwitchContext+0x11a>
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	605a      	str	r2, [r3, #4]
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	4a0e      	ldr	r2, [pc, #56]	; (800df28 <vTaskSwitchContext+0x15c>)
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	4a0f      	ldr	r2, [pc, #60]	; (800df30 <vTaskSwitchContext+0x164>)
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800def6:	4b0c      	ldr	r3, [pc, #48]	; (800df28 <vTaskSwitchContext+0x15c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800defe:	4a0b      	ldr	r2, [pc, #44]	; (800df2c <vTaskSwitchContext+0x160>)
 800df00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df02:	4b09      	ldr	r3, [pc, #36]	; (800df28 <vTaskSwitchContext+0x15c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df0a:	4a0b      	ldr	r2, [pc, #44]	; (800df38 <vTaskSwitchContext+0x16c>)
 800df0c:	6013      	str	r3, [r2, #0]
}
 800df0e:	bf00      	nop
 800df10:	3718      	adds	r7, #24
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	2000b4ac 	.word	0x2000b4ac
 800df1c:	2000b498 	.word	0x2000b498
 800df20:	2000b4b4 	.word	0x2000b4b4
 800df24:	2000b4b0 	.word	0x2000b4b0
 800df28:	2000afac 	.word	0x2000afac
 800df2c:	2000b480 	.word	0x2000b480
 800df30:	2000b48c 	.word	0x2000b48c
 800df34:	2000afb0 	.word	0x2000afb0
 800df38:	20000010 	.word	0x20000010

0800df3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d10a      	bne.n	800df62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800df4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df50:	f383 8811 	msr	BASEPRI, r3
 800df54:	f3bf 8f6f 	isb	sy
 800df58:	f3bf 8f4f 	dsb	sy
 800df5c:	60fb      	str	r3, [r7, #12]
}
 800df5e:	bf00      	nop
 800df60:	e7fe      	b.n	800df60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df62:	4b07      	ldr	r3, [pc, #28]	; (800df80 <vTaskPlaceOnEventList+0x44>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	3318      	adds	r3, #24
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7fe fa8d 	bl	800c48a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df70:	2101      	movs	r1, #1
 800df72:	6838      	ldr	r0, [r7, #0]
 800df74:	f000 faf2 	bl	800e55c <prvAddCurrentTaskToDelayedList>
}
 800df78:	bf00      	nop
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	2000afac 	.word	0x2000afac

0800df84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df84:	b580      	push	{r7, lr}
 800df86:	b086      	sub	sp, #24
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d10a      	bne.n	800dfac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800df96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	617b      	str	r3, [r7, #20]
}
 800dfa8:	bf00      	nop
 800dfaa:	e7fe      	b.n	800dfaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfac:	4b0a      	ldr	r3, [pc, #40]	; (800dfd8 <vTaskPlaceOnEventListRestricted+0x54>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	3318      	adds	r3, #24
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f7fe fa44 	bl	800c442 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dfc6:	6879      	ldr	r1, [r7, #4]
 800dfc8:	68b8      	ldr	r0, [r7, #8]
 800dfca:	f000 fac7 	bl	800e55c <prvAddCurrentTaskToDelayedList>
	}
 800dfce:	bf00      	nop
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	2000afac 	.word	0x2000afac

0800dfdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d10a      	bne.n	800e008 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff6:	f383 8811 	msr	BASEPRI, r3
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	60fb      	str	r3, [r7, #12]
}
 800e004:	bf00      	nop
 800e006:	e7fe      	b.n	800e006 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	3318      	adds	r3, #24
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe fa75 	bl	800c4fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e012:	4b1f      	ldr	r3, [pc, #124]	; (800e090 <xTaskRemoveFromEventList+0xb4>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d11f      	bne.n	800e05a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fe fa6c 	bl	800c4fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e028:	4b1a      	ldr	r3, [pc, #104]	; (800e094 <xTaskRemoveFromEventList+0xb8>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d903      	bls.n	800e038 <xTaskRemoveFromEventList+0x5c>
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e034:	4a17      	ldr	r2, [pc, #92]	; (800e094 <xTaskRemoveFromEventList+0xb8>)
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e03c:	4613      	mov	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	4413      	add	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4a14      	ldr	r2, [pc, #80]	; (800e098 <xTaskRemoveFromEventList+0xbc>)
 800e046:	441a      	add	r2, r3
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	3304      	adds	r3, #4
 800e04c:	4619      	mov	r1, r3
 800e04e:	4610      	mov	r0, r2
 800e050:	f7fe f9f7 	bl	800c442 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800e054:	f000 f9d0 	bl	800e3f8 <prvResetNextTaskUnblockTime>
 800e058:	e005      	b.n	800e066 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	3318      	adds	r3, #24
 800e05e:	4619      	mov	r1, r3
 800e060:	480e      	ldr	r0, [pc, #56]	; (800e09c <xTaskRemoveFromEventList+0xc0>)
 800e062:	f7fe f9ee 	bl	800c442 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06a:	4b0d      	ldr	r3, [pc, #52]	; (800e0a0 <xTaskRemoveFromEventList+0xc4>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e070:	429a      	cmp	r2, r3
 800e072:	d905      	bls.n	800e080 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e074:	2301      	movs	r3, #1
 800e076:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e078:	4b0a      	ldr	r3, [pc, #40]	; (800e0a4 <xTaskRemoveFromEventList+0xc8>)
 800e07a:	2201      	movs	r2, #1
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	e001      	b.n	800e084 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e080:	2300      	movs	r3, #0
 800e082:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e084:	697b      	ldr	r3, [r7, #20]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3718      	adds	r7, #24
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	2000b4ac 	.word	0x2000b4ac
 800e094:	2000b48c 	.word	0x2000b48c
 800e098:	2000afb0 	.word	0x2000afb0
 800e09c:	2000b440 	.word	0x2000b440
 800e0a0:	2000afac 	.word	0x2000afac
 800e0a4:	2000b498 	.word	0x2000b498

0800e0a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0b0:	4b06      	ldr	r3, [pc, #24]	; (800e0cc <vTaskInternalSetTimeOutState+0x24>)
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0b8:	4b05      	ldr	r3, [pc, #20]	; (800e0d0 <vTaskInternalSetTimeOutState+0x28>)
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	605a      	str	r2, [r3, #4]
}
 800e0c0:	bf00      	nop
 800e0c2:	370c      	adds	r7, #12
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr
 800e0cc:	2000b49c 	.word	0x2000b49c
 800e0d0:	2000b488 	.word	0x2000b488

0800e0d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b088      	sub	sp, #32
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d10a      	bne.n	800e0fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e8:	f383 8811 	msr	BASEPRI, r3
 800e0ec:	f3bf 8f6f 	isb	sy
 800e0f0:	f3bf 8f4f 	dsb	sy
 800e0f4:	613b      	str	r3, [r7, #16]
}
 800e0f6:	bf00      	nop
 800e0f8:	e7fe      	b.n	800e0f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10a      	bne.n	800e116 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	60fb      	str	r3, [r7, #12]
}
 800e112:	bf00      	nop
 800e114:	e7fe      	b.n	800e114 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e116:	f7fe fb45 	bl	800c7a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e11a:	4b24      	ldr	r3, [pc, #144]	; (800e1ac <xTaskCheckForTimeOut+0xd8>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	69ba      	ldr	r2, [r7, #24]
 800e126:	1ad3      	subs	r3, r2, r3
 800e128:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800e12a:	4b21      	ldr	r3, [pc, #132]	; (800e1b0 <xTaskCheckForTimeOut+0xdc>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800e132:	2b00      	cmp	r3, #0
 800e134:	d007      	beq.n	800e146 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e136:	4b1e      	ldr	r3, [pc, #120]	; (800e1b0 <xTaskCheckForTimeOut+0xdc>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800e140:	2301      	movs	r3, #1
 800e142:	61fb      	str	r3, [r7, #28]
 800e144:	e02b      	b.n	800e19e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14e:	d102      	bne.n	800e156 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e150:	2300      	movs	r3, #0
 800e152:	61fb      	str	r3, [r7, #28]
 800e154:	e023      	b.n	800e19e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	4b16      	ldr	r3, [pc, #88]	; (800e1b4 <xTaskCheckForTimeOut+0xe0>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d007      	beq.n	800e172 <xTaskCheckForTimeOut+0x9e>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	69ba      	ldr	r2, [r7, #24]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d302      	bcc.n	800e172 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e16c:	2301      	movs	r3, #1
 800e16e:	61fb      	str	r3, [r7, #28]
 800e170:	e015      	b.n	800e19e <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	697a      	ldr	r2, [r7, #20]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d20b      	bcs.n	800e194 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	1ad2      	subs	r2, r2, r3
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f7ff ff8d 	bl	800e0a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e18e:	2300      	movs	r3, #0
 800e190:	61fb      	str	r3, [r7, #28]
 800e192:	e004      	b.n	800e19e <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	2200      	movs	r2, #0
 800e198:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e19a:	2301      	movs	r3, #1
 800e19c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e19e:	f7fe fb31 	bl	800c804 <vPortExitCritical>

	return xReturn;
 800e1a2:	69fb      	ldr	r3, [r7, #28]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3720      	adds	r7, #32
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	2000b488 	.word	0x2000b488
 800e1b0:	2000afac 	.word	0x2000afac
 800e1b4:	2000b49c 	.word	0x2000b49c

0800e1b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1bc:	4b03      	ldr	r3, [pc, #12]	; (800e1cc <vTaskMissedYield+0x14>)
 800e1be:	2201      	movs	r2, #1
 800e1c0:	601a      	str	r2, [r3, #0]
}
 800e1c2:	bf00      	nop
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr
 800e1cc:	2000b498 	.word	0x2000b498

0800e1d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1d8:	f000 f8aa 	bl	800e330 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e1dc:	4b19      	ldr	r3, [pc, #100]	; (800e244 <prvIdleTask+0x74>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d907      	bls.n	800e1f4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e1e4:	4b18      	ldr	r3, [pc, #96]	; (800e248 <prvIdleTask+0x78>)
 800e1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ea:	601a      	str	r2, [r3, #0]
 800e1ec:	f3bf 8f4f 	dsb	sy
 800e1f0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e1f4:	f7f3 fd11 	bl	8001c1a <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800e1f8:	f7ff fc18 	bl	800da2c <prvGetExpectedIdleTime>
 800e1fc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d9e9      	bls.n	800e1d8 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800e204:	f7ff fc04 	bl	800da10 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e208:	4b10      	ldr	r3, [pc, #64]	; (800e24c <prvIdleTask+0x7c>)
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	4b10      	ldr	r3, [pc, #64]	; (800e250 <prvIdleTask+0x80>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	429a      	cmp	r2, r3
 800e212:	d20a      	bcs.n	800e22a <prvIdleTask+0x5a>
	__asm volatile
 800e214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e218:	f383 8811 	msr	BASEPRI, r3
 800e21c:	f3bf 8f6f 	isb	sy
 800e220:	f3bf 8f4f 	dsb	sy
 800e224:	60bb      	str	r3, [r7, #8]
}
 800e226:	bf00      	nop
 800e228:	e7fe      	b.n	800e228 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800e22a:	f7ff fbff 	bl	800da2c <prvGetExpectedIdleTime>
 800e22e:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2b01      	cmp	r3, #1
 800e234:	d902      	bls.n	800e23c <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f7fe fb68 	bl	800c90c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800e23c:	f7ff fc2e 	bl	800da9c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800e240:	e7ca      	b.n	800e1d8 <prvIdleTask+0x8>
 800e242:	bf00      	nop
 800e244:	2000afb0 	.word	0x2000afb0
 800e248:	e000ed04 	.word	0xe000ed04
 800e24c:	2000b4a4 	.word	0x2000b4a4
 800e250:	2000b488 	.word	0x2000b488

0800e254 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800e25a:	2301      	movs	r3, #1
 800e25c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800e25e:	2301      	movs	r3, #1
 800e260:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800e262:	4b0f      	ldr	r3, [pc, #60]	; (800e2a0 <eTaskConfirmSleepModeStatus+0x4c>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d002      	beq.n	800e270 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e26a:	2300      	movs	r3, #0
 800e26c:	71fb      	strb	r3, [r7, #7]
 800e26e:	e010      	b.n	800e292 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800e270:	4b0c      	ldr	r3, [pc, #48]	; (800e2a4 <eTaskConfirmSleepModeStatus+0x50>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d002      	beq.n	800e27e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e278:	2300      	movs	r3, #0
 800e27a:	71fb      	strb	r3, [r7, #7]
 800e27c:	e009      	b.n	800e292 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800e27e:	4b0a      	ldr	r3, [pc, #40]	; (800e2a8 <eTaskConfirmSleepModeStatus+0x54>)
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	4b0a      	ldr	r3, [pc, #40]	; (800e2ac <eTaskConfirmSleepModeStatus+0x58>)
 800e284:	6819      	ldr	r1, [r3, #0]
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	1acb      	subs	r3, r1, r3
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d101      	bne.n	800e292 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800e28e:	2302      	movs	r3, #2
 800e290:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800e292:	79fb      	ldrb	r3, [r7, #7]
	}
 800e294:	4618      	mov	r0, r3
 800e296:	370c      	adds	r7, #12
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr
 800e2a0:	2000b440 	.word	0x2000b440
 800e2a4:	2000b498 	.word	0x2000b498
 800e2a8:	2000b46c 	.word	0x2000b46c
 800e2ac:	2000b484 	.word	0x2000b484

0800e2b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	607b      	str	r3, [r7, #4]
 800e2ba:	e00c      	b.n	800e2d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	4613      	mov	r3, r2
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	4413      	add	r3, r2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4a12      	ldr	r2, [pc, #72]	; (800e310 <prvInitialiseTaskLists+0x60>)
 800e2c8:	4413      	add	r3, r2
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fe f88c 	bl	800c3e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	607b      	str	r3, [r7, #4]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2b37      	cmp	r3, #55	; 0x37
 800e2da:	d9ef      	bls.n	800e2bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e2dc:	480d      	ldr	r0, [pc, #52]	; (800e314 <prvInitialiseTaskLists+0x64>)
 800e2de:	f7fe f883 	bl	800c3e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e2e2:	480d      	ldr	r0, [pc, #52]	; (800e318 <prvInitialiseTaskLists+0x68>)
 800e2e4:	f7fe f880 	bl	800c3e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e2e8:	480c      	ldr	r0, [pc, #48]	; (800e31c <prvInitialiseTaskLists+0x6c>)
 800e2ea:	f7fe f87d 	bl	800c3e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e2ee:	480c      	ldr	r0, [pc, #48]	; (800e320 <prvInitialiseTaskLists+0x70>)
 800e2f0:	f7fe f87a 	bl	800c3e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e2f4:	480b      	ldr	r0, [pc, #44]	; (800e324 <prvInitialiseTaskLists+0x74>)
 800e2f6:	f7fe f877 	bl	800c3e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e2fa:	4b0b      	ldr	r3, [pc, #44]	; (800e328 <prvInitialiseTaskLists+0x78>)
 800e2fc:	4a05      	ldr	r2, [pc, #20]	; (800e314 <prvInitialiseTaskLists+0x64>)
 800e2fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e300:	4b0a      	ldr	r3, [pc, #40]	; (800e32c <prvInitialiseTaskLists+0x7c>)
 800e302:	4a05      	ldr	r2, [pc, #20]	; (800e318 <prvInitialiseTaskLists+0x68>)
 800e304:	601a      	str	r2, [r3, #0]
}
 800e306:	bf00      	nop
 800e308:	3708      	adds	r7, #8
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	2000afb0 	.word	0x2000afb0
 800e314:	2000b410 	.word	0x2000b410
 800e318:	2000b424 	.word	0x2000b424
 800e31c:	2000b440 	.word	0x2000b440
 800e320:	2000b454 	.word	0x2000b454
 800e324:	2000b46c 	.word	0x2000b46c
 800e328:	2000b438 	.word	0x2000b438
 800e32c:	2000b43c 	.word	0x2000b43c

0800e330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e336:	e019      	b.n	800e36c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e338:	f7fe fa34 	bl	800c7a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e33c:	4b10      	ldr	r3, [pc, #64]	; (800e380 <prvCheckTasksWaitingTermination+0x50>)
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	3304      	adds	r3, #4
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fe f8d7 	bl	800c4fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e34e:	4b0d      	ldr	r3, [pc, #52]	; (800e384 <prvCheckTasksWaitingTermination+0x54>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	3b01      	subs	r3, #1
 800e354:	4a0b      	ldr	r2, [pc, #44]	; (800e384 <prvCheckTasksWaitingTermination+0x54>)
 800e356:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e358:	4b0b      	ldr	r3, [pc, #44]	; (800e388 <prvCheckTasksWaitingTermination+0x58>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	3b01      	subs	r3, #1
 800e35e:	4a0a      	ldr	r2, [pc, #40]	; (800e388 <prvCheckTasksWaitingTermination+0x58>)
 800e360:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e362:	f7fe fa4f 	bl	800c804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 f810 	bl	800e38c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e36c:	4b06      	ldr	r3, [pc, #24]	; (800e388 <prvCheckTasksWaitingTermination+0x58>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d1e1      	bne.n	800e338 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e374:	bf00      	nop
 800e376:	bf00      	nop
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	2000b454 	.word	0x2000b454
 800e384:	2000b484 	.word	0x2000b484
 800e388:	2000b468 	.word	0x2000b468

0800e38c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e39a:	4618      	mov	r0, r3
 800e39c:	f000 fdd6 	bl	800ef4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d108      	bne.n	800e3bc <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fd fefc 	bl	800c1ac <vPortFree>
				vPortFree( pxTCB );
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7fd fef9 	bl	800c1ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e3ba:	e018      	b.n	800e3ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d103      	bne.n	800e3ce <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7fd fef0 	bl	800c1ac <vPortFree>
	}
 800e3cc:	e00f      	b.n	800e3ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d00a      	beq.n	800e3ee <prvDeleteTCB+0x62>
	__asm volatile
 800e3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3dc:	f383 8811 	msr	BASEPRI, r3
 800e3e0:	f3bf 8f6f 	isb	sy
 800e3e4:	f3bf 8f4f 	dsb	sy
 800e3e8:	60fb      	str	r3, [r7, #12]
}
 800e3ea:	bf00      	nop
 800e3ec:	e7fe      	b.n	800e3ec <prvDeleteTCB+0x60>
	}
 800e3ee:	bf00      	nop
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
	...

0800e3f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3fe:	4b0c      	ldr	r3, [pc, #48]	; (800e430 <prvResetNextTaskUnblockTime+0x38>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d104      	bne.n	800e412 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e408:	4b0a      	ldr	r3, [pc, #40]	; (800e434 <prvResetNextTaskUnblockTime+0x3c>)
 800e40a:	f04f 32ff 	mov.w	r2, #4294967295
 800e40e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e410:	e008      	b.n	800e424 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e412:	4b07      	ldr	r3, [pc, #28]	; (800e430 <prvResetNextTaskUnblockTime+0x38>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	4a04      	ldr	r2, [pc, #16]	; (800e434 <prvResetNextTaskUnblockTime+0x3c>)
 800e422:	6013      	str	r3, [r2, #0]
}
 800e424:	bf00      	nop
 800e426:	370c      	adds	r7, #12
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr
 800e430:	2000b438 	.word	0x2000b438
 800e434:	2000b4a4 	.word	0x2000b4a4

0800e438 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e43e:	4b0b      	ldr	r3, [pc, #44]	; (800e46c <xTaskGetSchedulerState+0x34>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d102      	bne.n	800e44c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e446:	2301      	movs	r3, #1
 800e448:	607b      	str	r3, [r7, #4]
 800e44a:	e008      	b.n	800e45e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e44c:	4b08      	ldr	r3, [pc, #32]	; (800e470 <xTaskGetSchedulerState+0x38>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d102      	bne.n	800e45a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e454:	2302      	movs	r3, #2
 800e456:	607b      	str	r3, [r7, #4]
 800e458:	e001      	b.n	800e45e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e45a:	2300      	movs	r3, #0
 800e45c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e45e:	687b      	ldr	r3, [r7, #4]
	}
 800e460:	4618      	mov	r0, r3
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	2000b490 	.word	0x2000b490
 800e470:	2000b4ac 	.word	0x2000b4ac

0800e474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e480:	2300      	movs	r3, #0
 800e482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d05c      	beq.n	800e544 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e48a:	4b31      	ldr	r3, [pc, #196]	; (800e550 <xTaskPriorityDisinherit+0xdc>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	693a      	ldr	r2, [r7, #16]
 800e490:	429a      	cmp	r2, r3
 800e492:	d00a      	beq.n	800e4aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e498:	f383 8811 	msr	BASEPRI, r3
 800e49c:	f3bf 8f6f 	isb	sy
 800e4a0:	f3bf 8f4f 	dsb	sy
 800e4a4:	60fb      	str	r3, [r7, #12]
}
 800e4a6:	bf00      	nop
 800e4a8:	e7fe      	b.n	800e4a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10a      	bne.n	800e4ca <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	60bb      	str	r3, [r7, #8]
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e4d0:	1e5a      	subs	r2, r3, #1
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d02e      	beq.n	800e544 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d129      	bne.n	800e544 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fe f801 	bl	800c4fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e508:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e514:	4b0f      	ldr	r3, [pc, #60]	; (800e554 <xTaskPriorityDisinherit+0xe0>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d903      	bls.n	800e524 <xTaskPriorityDisinherit+0xb0>
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e520:	4a0c      	ldr	r2, [pc, #48]	; (800e554 <xTaskPriorityDisinherit+0xe0>)
 800e522:	6013      	str	r3, [r2, #0]
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e528:	4613      	mov	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4413      	add	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4a09      	ldr	r2, [pc, #36]	; (800e558 <xTaskPriorityDisinherit+0xe4>)
 800e532:	441a      	add	r2, r3
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	3304      	adds	r3, #4
 800e538:	4619      	mov	r1, r3
 800e53a:	4610      	mov	r0, r2
 800e53c:	f7fd ff81 	bl	800c442 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e540:	2301      	movs	r3, #1
 800e542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e544:	697b      	ldr	r3, [r7, #20]
	}
 800e546:	4618      	mov	r0, r3
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	2000afac 	.word	0x2000afac
 800e554:	2000b48c 	.word	0x2000b48c
 800e558:	2000afb0 	.word	0x2000afb0

0800e55c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e566:	4b24      	ldr	r3, [pc, #144]	; (800e5f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e56c:	4b23      	ldr	r3, [pc, #140]	; (800e5fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2200      	movs	r2, #0
 800e572:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e576:	4b21      	ldr	r3, [pc, #132]	; (800e5fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	3304      	adds	r3, #4
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7fd ffbd 	bl	800c4fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e588:	d10a      	bne.n	800e5a0 <prvAddCurrentTaskToDelayedList+0x44>
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d007      	beq.n	800e5a0 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e590:	4b1a      	ldr	r3, [pc, #104]	; (800e5fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	3304      	adds	r3, #4
 800e596:	4619      	mov	r1, r3
 800e598:	4819      	ldr	r0, [pc, #100]	; (800e600 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e59a:	f7fd ff52 	bl	800c442 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e59e:	e026      	b.n	800e5ee <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5a8:	4b14      	ldr	r3, [pc, #80]	; (800e5fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	68ba      	ldr	r2, [r7, #8]
 800e5ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d209      	bcs.n	800e5cc <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5b8:	4b12      	ldr	r3, [pc, #72]	; (800e604 <prvAddCurrentTaskToDelayedList+0xa8>)
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	4b0f      	ldr	r3, [pc, #60]	; (800e5fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	4610      	mov	r0, r2
 800e5c6:	f7fd ff60 	bl	800c48a <vListInsert>
}
 800e5ca:	e010      	b.n	800e5ee <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5cc:	4b0e      	ldr	r3, [pc, #56]	; (800e608 <prvAddCurrentTaskToDelayedList+0xac>)
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	4b0a      	ldr	r3, [pc, #40]	; (800e5fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	4610      	mov	r0, r2
 800e5da:	f7fd ff56 	bl	800c48a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5de:	4b0b      	ldr	r3, [pc, #44]	; (800e60c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68ba      	ldr	r2, [r7, #8]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d202      	bcs.n	800e5ee <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800e5e8:	4a08      	ldr	r2, [pc, #32]	; (800e60c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	6013      	str	r3, [r2, #0]
}
 800e5ee:	bf00      	nop
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	2000b488 	.word	0x2000b488
 800e5fc:	2000afac 	.word	0x2000afac
 800e600:	2000b46c 	.word	0x2000b46c
 800e604:	2000b43c 	.word	0x2000b43c
 800e608:	2000b438 	.word	0x2000b438
 800e60c:	2000b4a4 	.word	0x2000b4a4

0800e610 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b08a      	sub	sp, #40	; 0x28
 800e614:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e616:	2300      	movs	r3, #0
 800e618:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e61a:	f000 fba3 	bl	800ed64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e61e:	4b1c      	ldr	r3, [pc, #112]	; (800e690 <xTimerCreateTimerTask+0x80>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d021      	beq.n	800e66a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e626:	2300      	movs	r3, #0
 800e628:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e62a:	2300      	movs	r3, #0
 800e62c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e62e:	1d3a      	adds	r2, r7, #4
 800e630:	f107 0108 	add.w	r1, r7, #8
 800e634:	f107 030c 	add.w	r3, r7, #12
 800e638:	4618      	mov	r0, r3
 800e63a:	f7fd fc7b 	bl	800bf34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e63e:	6879      	ldr	r1, [r7, #4]
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	68fa      	ldr	r2, [r7, #12]
 800e644:	9202      	str	r2, [sp, #8]
 800e646:	9301      	str	r3, [sp, #4]
 800e648:	2302      	movs	r3, #2
 800e64a:	9300      	str	r3, [sp, #0]
 800e64c:	2300      	movs	r3, #0
 800e64e:	460a      	mov	r2, r1
 800e650:	4910      	ldr	r1, [pc, #64]	; (800e694 <xTimerCreateTimerTask+0x84>)
 800e652:	4811      	ldr	r0, [pc, #68]	; (800e698 <xTimerCreateTimerTask+0x88>)
 800e654:	f7fe ff98 	bl	800d588 <xTaskCreateStatic>
 800e658:	4603      	mov	r3, r0
 800e65a:	4a10      	ldr	r2, [pc, #64]	; (800e69c <xTimerCreateTimerTask+0x8c>)
 800e65c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e65e:	4b0f      	ldr	r3, [pc, #60]	; (800e69c <xTimerCreateTimerTask+0x8c>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d001      	beq.n	800e66a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e666:	2301      	movs	r3, #1
 800e668:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10a      	bne.n	800e686 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	613b      	str	r3, [r7, #16]
}
 800e682:	bf00      	nop
 800e684:	e7fe      	b.n	800e684 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e686:	697b      	ldr	r3, [r7, #20]
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3718      	adds	r7, #24
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	2000b4e8 	.word	0x2000b4e8
 800e694:	0800f930 	.word	0x0800f930
 800e698:	0800e909 	.word	0x0800e909
 800e69c:	2000b4ec 	.word	0x2000b4ec

0800e6a0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af02      	add	r7, sp, #8
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	607a      	str	r2, [r7, #4]
 800e6ac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e6ae:	202c      	movs	r0, #44	; 0x2c
 800e6b0:	f7fd fcac 	bl	800c00c <pvPortMalloc>
 800e6b4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d00d      	beq.n	800e6d8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	9301      	str	r3, [sp, #4]
 800e6c8:	6a3b      	ldr	r3, [r7, #32]
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	68b9      	ldr	r1, [r7, #8]
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f000 f843 	bl	800e75e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e6d8:	697b      	ldr	r3, [r7, #20]
	}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3718      	adds	r7, #24
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b08a      	sub	sp, #40	; 0x28
 800e6e6:	af02      	add	r7, sp, #8
 800e6e8:	60f8      	str	r0, [r7, #12]
 800e6ea:	60b9      	str	r1, [r7, #8]
 800e6ec:	607a      	str	r2, [r7, #4]
 800e6ee:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e6f0:	232c      	movs	r3, #44	; 0x2c
 800e6f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	2b2c      	cmp	r3, #44	; 0x2c
 800e6f8:	d00a      	beq.n	800e710 <xTimerCreateStatic+0x2e>
	__asm volatile
 800e6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fe:	f383 8811 	msr	BASEPRI, r3
 800e702:	f3bf 8f6f 	isb	sy
 800e706:	f3bf 8f4f 	dsb	sy
 800e70a:	61bb      	str	r3, [r7, #24]
}
 800e70c:	bf00      	nop
 800e70e:	e7fe      	b.n	800e70e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e710:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e714:	2b00      	cmp	r3, #0
 800e716:	d10a      	bne.n	800e72e <xTimerCreateStatic+0x4c>
	__asm volatile
 800e718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71c:	f383 8811 	msr	BASEPRI, r3
 800e720:	f3bf 8f6f 	isb	sy
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	617b      	str	r3, [r7, #20]
}
 800e72a:	bf00      	nop
 800e72c:	e7fe      	b.n	800e72c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e730:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00d      	beq.n	800e754 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	2202      	movs	r2, #2
 800e73c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	68b9      	ldr	r1, [r7, #8]
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	f000 f805 	bl	800e75e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e754:	69fb      	ldr	r3, [r7, #28]
	}
 800e756:	4618      	mov	r0, r3
 800e758:	3720      	adds	r7, #32
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b086      	sub	sp, #24
 800e762:	af00      	add	r7, sp, #0
 800e764:	60f8      	str	r0, [r7, #12]
 800e766:	60b9      	str	r1, [r7, #8]
 800e768:	607a      	str	r2, [r7, #4]
 800e76a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10a      	bne.n	800e788 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e776:	f383 8811 	msr	BASEPRI, r3
 800e77a:	f3bf 8f6f 	isb	sy
 800e77e:	f3bf 8f4f 	dsb	sy
 800e782:	617b      	str	r3, [r7, #20]
}
 800e784:	bf00      	nop
 800e786:	e7fe      	b.n	800e786 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d01e      	beq.n	800e7cc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e78e:	f000 fae9 	bl	800ed64 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a0:	683a      	ldr	r2, [r7, #0]
 800e7a2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	6a3a      	ldr	r2, [r7, #32]
 800e7a8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	3304      	adds	r3, #4
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fd fe3a 	bl	800c428 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d008      	beq.n	800e7cc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7c0:	f043 0304 	orr.w	r3, r3, #4
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e7cc:	bf00      	nop
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b08a      	sub	sp, #40	; 0x28
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	607a      	str	r2, [r7, #4]
 800e7e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10a      	bne.n	800e802 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	623b      	str	r3, [r7, #32]
}
 800e7fe:	bf00      	nop
 800e800:	e7fe      	b.n	800e800 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e802:	4b1a      	ldr	r3, [pc, #104]	; (800e86c <xTimerGenericCommand+0x98>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d02a      	beq.n	800e860 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	2b05      	cmp	r3, #5
 800e81a:	dc18      	bgt.n	800e84e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e81c:	f7ff fe0c 	bl	800e438 <xTaskGetSchedulerState>
 800e820:	4603      	mov	r3, r0
 800e822:	2b02      	cmp	r3, #2
 800e824:	d109      	bne.n	800e83a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e826:	4b11      	ldr	r3, [pc, #68]	; (800e86c <xTimerGenericCommand+0x98>)
 800e828:	6818      	ldr	r0, [r3, #0]
 800e82a:	f107 0110 	add.w	r1, r7, #16
 800e82e:	2300      	movs	r3, #0
 800e830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e832:	f7fe fac1 	bl	800cdb8 <xQueueGenericSend>
 800e836:	6278      	str	r0, [r7, #36]	; 0x24
 800e838:	e012      	b.n	800e860 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e83a:	4b0c      	ldr	r3, [pc, #48]	; (800e86c <xTimerGenericCommand+0x98>)
 800e83c:	6818      	ldr	r0, [r3, #0]
 800e83e:	f107 0110 	add.w	r1, r7, #16
 800e842:	2300      	movs	r3, #0
 800e844:	2200      	movs	r2, #0
 800e846:	f7fe fab7 	bl	800cdb8 <xQueueGenericSend>
 800e84a:	6278      	str	r0, [r7, #36]	; 0x24
 800e84c:	e008      	b.n	800e860 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e84e:	4b07      	ldr	r3, [pc, #28]	; (800e86c <xTimerGenericCommand+0x98>)
 800e850:	6818      	ldr	r0, [r3, #0]
 800e852:	f107 0110 	add.w	r1, r7, #16
 800e856:	2300      	movs	r3, #0
 800e858:	683a      	ldr	r2, [r7, #0]
 800e85a:	f7fe fbab 	bl	800cfb4 <xQueueGenericSendFromISR>
 800e85e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e862:	4618      	mov	r0, r3
 800e864:	3728      	adds	r7, #40	; 0x28
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	2000b4e8 	.word	0x2000b4e8

0800e870 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b088      	sub	sp, #32
 800e874:	af02      	add	r7, sp, #8
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e87a:	4b22      	ldr	r3, [pc, #136]	; (800e904 <prvProcessExpiredTimer+0x94>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	3304      	adds	r3, #4
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fd fe37 	bl	800c4fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e894:	f003 0304 	and.w	r3, r3, #4
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d022      	beq.n	800e8e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	699a      	ldr	r2, [r3, #24]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	18d1      	adds	r1, r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	683a      	ldr	r2, [r7, #0]
 800e8a8:	6978      	ldr	r0, [r7, #20]
 800e8aa:	f000 f8d3 	bl	800ea54 <prvInsertTimerInActiveList>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d01f      	beq.n	800e8f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	2100      	movs	r1, #0
 800e8be:	6978      	ldr	r0, [r7, #20]
 800e8c0:	f7ff ff88 	bl	800e7d4 <xTimerGenericCommand>
 800e8c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d113      	bne.n	800e8f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d0:	f383 8811 	msr	BASEPRI, r3
 800e8d4:	f3bf 8f6f 	isb	sy
 800e8d8:	f3bf 8f4f 	dsb	sy
 800e8dc:	60fb      	str	r3, [r7, #12]
}
 800e8de:	bf00      	nop
 800e8e0:	e7fe      	b.n	800e8e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8e8:	f023 0301 	bic.w	r3, r3, #1
 800e8ec:	b2da      	uxtb	r2, r3
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	6a1b      	ldr	r3, [r3, #32]
 800e8f8:	6978      	ldr	r0, [r7, #20]
 800e8fa:	4798      	blx	r3
}
 800e8fc:	bf00      	nop
 800e8fe:	3718      	adds	r7, #24
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	2000b4e0 	.word	0x2000b4e0

0800e908 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800e910:	f7f3 f9a3 	bl	8001c5a <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e914:	f107 0308 	add.w	r3, r7, #8
 800e918:	4618      	mov	r0, r3
 800e91a:	f000 f857 	bl	800e9cc <prvGetNextExpireTime>
 800e91e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	4619      	mov	r1, r3
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f000 f803 	bl	800e930 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e92a:	f000 f8d5 	bl	800ead8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e92e:	e7f1      	b.n	800e914 <prvTimerTask+0xc>

0800e930 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e93a:	f7ff f869 	bl	800da10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e93e:	f107 0308 	add.w	r3, r7, #8
 800e942:	4618      	mov	r0, r3
 800e944:	f000 f866 	bl	800ea14 <prvSampleTimeNow>
 800e948:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d130      	bne.n	800e9b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d10a      	bne.n	800e96c <prvProcessTimerOrBlockTask+0x3c>
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d806      	bhi.n	800e96c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e95e:	f7ff f89d 	bl	800da9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e962:	68f9      	ldr	r1, [r7, #12]
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f7ff ff83 	bl	800e870 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e96a:	e024      	b.n	800e9b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d008      	beq.n	800e984 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e972:	4b13      	ldr	r3, [pc, #76]	; (800e9c0 <prvProcessTimerOrBlockTask+0x90>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d101      	bne.n	800e980 <prvProcessTimerOrBlockTask+0x50>
 800e97c:	2301      	movs	r3, #1
 800e97e:	e000      	b.n	800e982 <prvProcessTimerOrBlockTask+0x52>
 800e980:	2300      	movs	r3, #0
 800e982:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e984:	4b0f      	ldr	r3, [pc, #60]	; (800e9c4 <prvProcessTimerOrBlockTask+0x94>)
 800e986:	6818      	ldr	r0, [r3, #0]
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	4619      	mov	r1, r3
 800e992:	f7fe fdc5 	bl	800d520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e996:	f7ff f881 	bl	800da9c <xTaskResumeAll>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d10a      	bne.n	800e9b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e9a0:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <prvProcessTimerOrBlockTask+0x98>)
 800e9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a6:	601a      	str	r2, [r3, #0]
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	f3bf 8f6f 	isb	sy
}
 800e9b0:	e001      	b.n	800e9b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e9b2:	f7ff f873 	bl	800da9c <xTaskResumeAll>
}
 800e9b6:	bf00      	nop
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	2000b4e4 	.word	0x2000b4e4
 800e9c4:	2000b4e8 	.word	0x2000b4e8
 800e9c8:	e000ed04 	.word	0xe000ed04

0800e9cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e9d4:	4b0e      	ldr	r3, [pc, #56]	; (800ea10 <prvGetNextExpireTime+0x44>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d101      	bne.n	800e9e2 <prvGetNextExpireTime+0x16>
 800e9de:	2201      	movs	r2, #1
 800e9e0:	e000      	b.n	800e9e4 <prvGetNextExpireTime+0x18>
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d105      	bne.n	800e9fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e9f0:	4b07      	ldr	r3, [pc, #28]	; (800ea10 <prvGetNextExpireTime+0x44>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	68db      	ldr	r3, [r3, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	60fb      	str	r3, [r7, #12]
 800e9fa:	e001      	b.n	800ea00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ea00:	68fb      	ldr	r3, [r7, #12]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3714      	adds	r7, #20
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop
 800ea10:	2000b4e0 	.word	0x2000b4e0

0800ea14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ea1c:	f7ff f8dc 	bl	800dbd8 <xTaskGetTickCount>
 800ea20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ea22:	4b0b      	ldr	r3, [pc, #44]	; (800ea50 <prvSampleTimeNow+0x3c>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d205      	bcs.n	800ea38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ea2c:	f000 f936 	bl	800ec9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	601a      	str	r2, [r3, #0]
 800ea36:	e002      	b.n	800ea3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ea3e:	4a04      	ldr	r2, [pc, #16]	; (800ea50 <prvSampleTimeNow+0x3c>)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ea44:	68fb      	ldr	r3, [r7, #12]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	2000b4f0 	.word	0x2000b4f0

0800ea54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
 800ea60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ea62:	2300      	movs	r3, #0
 800ea64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	68ba      	ldr	r2, [r7, #8]
 800ea6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d812      	bhi.n	800eaa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	1ad2      	subs	r2, r2, r3
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	699b      	ldr	r3, [r3, #24]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d302      	bcc.n	800ea8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	617b      	str	r3, [r7, #20]
 800ea8c:	e01b      	b.n	800eac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ea8e:	4b10      	ldr	r3, [pc, #64]	; (800ead0 <prvInsertTimerInActiveList+0x7c>)
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	3304      	adds	r3, #4
 800ea96:	4619      	mov	r1, r3
 800ea98:	4610      	mov	r0, r2
 800ea9a:	f7fd fcf6 	bl	800c48a <vListInsert>
 800ea9e:	e012      	b.n	800eac6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d206      	bcs.n	800eab6 <prvInsertTimerInActiveList+0x62>
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d302      	bcc.n	800eab6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eab0:	2301      	movs	r3, #1
 800eab2:	617b      	str	r3, [r7, #20]
 800eab4:	e007      	b.n	800eac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eab6:	4b07      	ldr	r3, [pc, #28]	; (800ead4 <prvInsertTimerInActiveList+0x80>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	3304      	adds	r3, #4
 800eabe:	4619      	mov	r1, r3
 800eac0:	4610      	mov	r0, r2
 800eac2:	f7fd fce2 	bl	800c48a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eac6:	697b      	ldr	r3, [r7, #20]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3718      	adds	r7, #24
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	2000b4e4 	.word	0x2000b4e4
 800ead4:	2000b4e0 	.word	0x2000b4e0

0800ead8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b08e      	sub	sp, #56	; 0x38
 800eadc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eade:	e0ca      	b.n	800ec76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	da18      	bge.n	800eb18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eae6:	1d3b      	adds	r3, r7, #4
 800eae8:	3304      	adds	r3, #4
 800eaea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d10a      	bne.n	800eb08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800eaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf6:	f383 8811 	msr	BASEPRI, r3
 800eafa:	f3bf 8f6f 	isb	sy
 800eafe:	f3bf 8f4f 	dsb	sy
 800eb02:	61fb      	str	r3, [r7, #28]
}
 800eb04:	bf00      	nop
 800eb06:	e7fe      	b.n	800eb06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb0e:	6850      	ldr	r0, [r2, #4]
 800eb10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb12:	6892      	ldr	r2, [r2, #8]
 800eb14:	4611      	mov	r1, r2
 800eb16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	f2c0 80aa 	blt.w	800ec74 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb26:	695b      	ldr	r3, [r3, #20]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d004      	beq.n	800eb36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2e:	3304      	adds	r3, #4
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fd fce3 	bl	800c4fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb36:	463b      	mov	r3, r7
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff ff6b 	bl	800ea14 <prvSampleTimeNow>
 800eb3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2b09      	cmp	r3, #9
 800eb44:	f200 8097 	bhi.w	800ec76 <prvProcessReceivedCommands+0x19e>
 800eb48:	a201      	add	r2, pc, #4	; (adr r2, 800eb50 <prvProcessReceivedCommands+0x78>)
 800eb4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb4e:	bf00      	nop
 800eb50:	0800eb79 	.word	0x0800eb79
 800eb54:	0800eb79 	.word	0x0800eb79
 800eb58:	0800eb79 	.word	0x0800eb79
 800eb5c:	0800ebed 	.word	0x0800ebed
 800eb60:	0800ec01 	.word	0x0800ec01
 800eb64:	0800ec4b 	.word	0x0800ec4b
 800eb68:	0800eb79 	.word	0x0800eb79
 800eb6c:	0800eb79 	.word	0x0800eb79
 800eb70:	0800ebed 	.word	0x0800ebed
 800eb74:	0800ec01 	.word	0x0800ec01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb7e:	f043 0301 	orr.w	r3, r3, #1
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eb8a:	68ba      	ldr	r2, [r7, #8]
 800eb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8e:	699b      	ldr	r3, [r3, #24]
 800eb90:	18d1      	adds	r1, r2, r3
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb98:	f7ff ff5c 	bl	800ea54 <prvInsertTimerInActiveList>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d069      	beq.n	800ec76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba4:	6a1b      	ldr	r3, [r3, #32]
 800eba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eba8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebb0:	f003 0304 	and.w	r3, r3, #4
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d05e      	beq.n	800ec76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ebb8:	68ba      	ldr	r2, [r7, #8]
 800ebba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbc:	699b      	ldr	r3, [r3, #24]
 800ebbe:	441a      	add	r2, r3
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebca:	f7ff fe03 	bl	800e7d4 <xTimerGenericCommand>
 800ebce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ebd0:	6a3b      	ldr	r3, [r7, #32]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d14f      	bne.n	800ec76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ebd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebda:	f383 8811 	msr	BASEPRI, r3
 800ebde:	f3bf 8f6f 	isb	sy
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	61bb      	str	r3, [r7, #24]
}
 800ebe8:	bf00      	nop
 800ebea:	e7fe      	b.n	800ebea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebf2:	f023 0301 	bic.w	r3, r3, #1
 800ebf6:	b2da      	uxtb	r2, r3
 800ebf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ebfe:	e03a      	b.n	800ec76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec06:	f043 0301 	orr.w	r3, r3, #1
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ec12:	68ba      	ldr	r2, [r7, #8]
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ec18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1a:	699b      	ldr	r3, [r3, #24]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10a      	bne.n	800ec36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ec20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec24:	f383 8811 	msr	BASEPRI, r3
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	f3bf 8f4f 	dsb	sy
 800ec30:	617b      	str	r3, [r7, #20]
}
 800ec32:	bf00      	nop
 800ec34:	e7fe      	b.n	800ec34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ec36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec38:	699a      	ldr	r2, [r3, #24]
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	18d1      	adds	r1, r2, r3
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec44:	f7ff ff06 	bl	800ea54 <prvInsertTimerInActiveList>
					break;
 800ec48:	e015      	b.n	800ec76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ec4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec50:	f003 0302 	and.w	r3, r3, #2
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d103      	bne.n	800ec60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ec58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec5a:	f7fd faa7 	bl	800c1ac <vPortFree>
 800ec5e:	e00a      	b.n	800ec76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec66:	f023 0301 	bic.w	r3, r3, #1
 800ec6a:	b2da      	uxtb	r2, r3
 800ec6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ec72:	e000      	b.n	800ec76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ec74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec76:	4b08      	ldr	r3, [pc, #32]	; (800ec98 <prvProcessReceivedCommands+0x1c0>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	1d39      	adds	r1, r7, #4
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fe fa34 	bl	800d0ec <xQueueReceive>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f47f af2a 	bne.w	800eae0 <prvProcessReceivedCommands+0x8>
	}
}
 800ec8c:	bf00      	nop
 800ec8e:	bf00      	nop
 800ec90:	3730      	adds	r7, #48	; 0x30
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	2000b4e8 	.word	0x2000b4e8

0800ec9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b088      	sub	sp, #32
 800eca0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eca2:	e048      	b.n	800ed36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eca4:	4b2d      	ldr	r3, [pc, #180]	; (800ed5c <prvSwitchTimerLists+0xc0>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68db      	ldr	r3, [r3, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecae:	4b2b      	ldr	r3, [pc, #172]	; (800ed5c <prvSwitchTimerLists+0xc0>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	3304      	adds	r3, #4
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fd fc1d 	bl	800c4fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	6a1b      	ldr	r3, [r3, #32]
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecd0:	f003 0304 	and.w	r3, r3, #4
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d02e      	beq.n	800ed36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	699b      	ldr	r3, [r3, #24]
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	4413      	add	r3, r2
 800ece0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ece2:	68ba      	ldr	r2, [r7, #8]
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d90e      	bls.n	800ed08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	68ba      	ldr	r2, [r7, #8]
 800ecee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ecf6:	4b19      	ldr	r3, [pc, #100]	; (800ed5c <prvSwitchTimerLists+0xc0>)
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	3304      	adds	r3, #4
 800ecfe:	4619      	mov	r1, r3
 800ed00:	4610      	mov	r0, r2
 800ed02:	f7fd fbc2 	bl	800c48a <vListInsert>
 800ed06:	e016      	b.n	800ed36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed08:	2300      	movs	r3, #0
 800ed0a:	9300      	str	r3, [sp, #0]
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	693a      	ldr	r2, [r7, #16]
 800ed10:	2100      	movs	r1, #0
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f7ff fd5e 	bl	800e7d4 <xTimerGenericCommand>
 800ed18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10a      	bne.n	800ed36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ed20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	603b      	str	r3, [r7, #0]
}
 800ed32:	bf00      	nop
 800ed34:	e7fe      	b.n	800ed34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed36:	4b09      	ldr	r3, [pc, #36]	; (800ed5c <prvSwitchTimerLists+0xc0>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1b1      	bne.n	800eca4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ed40:	4b06      	ldr	r3, [pc, #24]	; (800ed5c <prvSwitchTimerLists+0xc0>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ed46:	4b06      	ldr	r3, [pc, #24]	; (800ed60 <prvSwitchTimerLists+0xc4>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a04      	ldr	r2, [pc, #16]	; (800ed5c <prvSwitchTimerLists+0xc0>)
 800ed4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ed4e:	4a04      	ldr	r2, [pc, #16]	; (800ed60 <prvSwitchTimerLists+0xc4>)
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	6013      	str	r3, [r2, #0]
}
 800ed54:	bf00      	nop
 800ed56:	3718      	adds	r7, #24
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	2000b4e0 	.word	0x2000b4e0
 800ed60:	2000b4e4 	.word	0x2000b4e4

0800ed64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ed6a:	f7fd fd1b 	bl	800c7a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ed6e:	4b15      	ldr	r3, [pc, #84]	; (800edc4 <prvCheckForValidListAndQueue+0x60>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d120      	bne.n	800edb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ed76:	4814      	ldr	r0, [pc, #80]	; (800edc8 <prvCheckForValidListAndQueue+0x64>)
 800ed78:	f7fd fb36 	bl	800c3e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ed7c:	4813      	ldr	r0, [pc, #76]	; (800edcc <prvCheckForValidListAndQueue+0x68>)
 800ed7e:	f7fd fb33 	bl	800c3e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ed82:	4b13      	ldr	r3, [pc, #76]	; (800edd0 <prvCheckForValidListAndQueue+0x6c>)
 800ed84:	4a10      	ldr	r2, [pc, #64]	; (800edc8 <prvCheckForValidListAndQueue+0x64>)
 800ed86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ed88:	4b12      	ldr	r3, [pc, #72]	; (800edd4 <prvCheckForValidListAndQueue+0x70>)
 800ed8a:	4a10      	ldr	r2, [pc, #64]	; (800edcc <prvCheckForValidListAndQueue+0x68>)
 800ed8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed8e:	2300      	movs	r3, #0
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	4b11      	ldr	r3, [pc, #68]	; (800edd8 <prvCheckForValidListAndQueue+0x74>)
 800ed94:	4a11      	ldr	r2, [pc, #68]	; (800eddc <prvCheckForValidListAndQueue+0x78>)
 800ed96:	2110      	movs	r1, #16
 800ed98:	200a      	movs	r0, #10
 800ed9a:	f7fd ff71 	bl	800cc80 <xQueueGenericCreateStatic>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	4a08      	ldr	r2, [pc, #32]	; (800edc4 <prvCheckForValidListAndQueue+0x60>)
 800eda2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eda4:	4b07      	ldr	r3, [pc, #28]	; (800edc4 <prvCheckForValidListAndQueue+0x60>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d005      	beq.n	800edb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800edac:	4b05      	ldr	r3, [pc, #20]	; (800edc4 <prvCheckForValidListAndQueue+0x60>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	490b      	ldr	r1, [pc, #44]	; (800ede0 <prvCheckForValidListAndQueue+0x7c>)
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fe fb8a 	bl	800d4cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800edb8:	f7fd fd24 	bl	800c804 <vPortExitCritical>
}
 800edbc:	bf00      	nop
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	2000b4e8 	.word	0x2000b4e8
 800edc8:	2000b4b8 	.word	0x2000b4b8
 800edcc:	2000b4cc 	.word	0x2000b4cc
 800edd0:	2000b4e0 	.word	0x2000b4e0
 800edd4:	2000b4e4 	.word	0x2000b4e4
 800edd8:	2000b594 	.word	0x2000b594
 800eddc:	2000b4f4 	.word	0x2000b4f4
 800ede0:	0800f938 	.word	0x0800f938

0800ede4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b086      	sub	sp, #24
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d10a      	bne.n	800ee0c <pvTimerGetTimerID+0x28>
	__asm volatile
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	60fb      	str	r3, [r7, #12]
}
 800ee08:	bf00      	nop
 800ee0a:	e7fe      	b.n	800ee0a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ee0c:	f7fd fcca 	bl	800c7a4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	69db      	ldr	r3, [r3, #28]
 800ee14:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ee16:	f7fd fcf5 	bl	800c804 <vPortExitCritical>

	return pvReturn;
 800ee1a:	693b      	ldr	r3, [r7, #16]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3718      	adds	r7, #24
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <__libc_init_array>:
 800ee24:	b570      	push	{r4, r5, r6, lr}
 800ee26:	4d0d      	ldr	r5, [pc, #52]	; (800ee5c <__libc_init_array+0x38>)
 800ee28:	4c0d      	ldr	r4, [pc, #52]	; (800ee60 <__libc_init_array+0x3c>)
 800ee2a:	1b64      	subs	r4, r4, r5
 800ee2c:	10a4      	asrs	r4, r4, #2
 800ee2e:	2600      	movs	r6, #0
 800ee30:	42a6      	cmp	r6, r4
 800ee32:	d109      	bne.n	800ee48 <__libc_init_array+0x24>
 800ee34:	4d0b      	ldr	r5, [pc, #44]	; (800ee64 <__libc_init_array+0x40>)
 800ee36:	4c0c      	ldr	r4, [pc, #48]	; (800ee68 <__libc_init_array+0x44>)
 800ee38:	f000 f8f0 	bl	800f01c <_init>
 800ee3c:	1b64      	subs	r4, r4, r5
 800ee3e:	10a4      	asrs	r4, r4, #2
 800ee40:	2600      	movs	r6, #0
 800ee42:	42a6      	cmp	r6, r4
 800ee44:	d105      	bne.n	800ee52 <__libc_init_array+0x2e>
 800ee46:	bd70      	pop	{r4, r5, r6, pc}
 800ee48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee4c:	4798      	blx	r3
 800ee4e:	3601      	adds	r6, #1
 800ee50:	e7ee      	b.n	800ee30 <__libc_init_array+0xc>
 800ee52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee56:	4798      	blx	r3
 800ee58:	3601      	adds	r6, #1
 800ee5a:	e7f2      	b.n	800ee42 <__libc_init_array+0x1e>
 800ee5c:	0800fbd0 	.word	0x0800fbd0
 800ee60:	0800fbd0 	.word	0x0800fbd0
 800ee64:	0800fbd0 	.word	0x0800fbd0
 800ee68:	0800fbd4 	.word	0x0800fbd4

0800ee6c <memcpy>:
 800ee6c:	440a      	add	r2, r1
 800ee6e:	4291      	cmp	r1, r2
 800ee70:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee74:	d100      	bne.n	800ee78 <memcpy+0xc>
 800ee76:	4770      	bx	lr
 800ee78:	b510      	push	{r4, lr}
 800ee7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee82:	4291      	cmp	r1, r2
 800ee84:	d1f9      	bne.n	800ee7a <memcpy+0xe>
 800ee86:	bd10      	pop	{r4, pc}

0800ee88 <memset>:
 800ee88:	4402      	add	r2, r0
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d100      	bne.n	800ee92 <memset+0xa>
 800ee90:	4770      	bx	lr
 800ee92:	f803 1b01 	strb.w	r1, [r3], #1
 800ee96:	e7f9      	b.n	800ee8c <memset+0x4>

0800ee98 <_free_r>:
 800ee98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee9a:	2900      	cmp	r1, #0
 800ee9c:	d044      	beq.n	800ef28 <_free_r+0x90>
 800ee9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eea2:	9001      	str	r0, [sp, #4]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f1a1 0404 	sub.w	r4, r1, #4
 800eeaa:	bfb8      	it	lt
 800eeac:	18e4      	addlt	r4, r4, r3
 800eeae:	f000 f8a9 	bl	800f004 <__malloc_lock>
 800eeb2:	4a1e      	ldr	r2, [pc, #120]	; (800ef2c <_free_r+0x94>)
 800eeb4:	9801      	ldr	r0, [sp, #4]
 800eeb6:	6813      	ldr	r3, [r2, #0]
 800eeb8:	b933      	cbnz	r3, 800eec8 <_free_r+0x30>
 800eeba:	6063      	str	r3, [r4, #4]
 800eebc:	6014      	str	r4, [r2, #0]
 800eebe:	b003      	add	sp, #12
 800eec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eec4:	f000 b8a4 	b.w	800f010 <__malloc_unlock>
 800eec8:	42a3      	cmp	r3, r4
 800eeca:	d908      	bls.n	800eede <_free_r+0x46>
 800eecc:	6825      	ldr	r5, [r4, #0]
 800eece:	1961      	adds	r1, r4, r5
 800eed0:	428b      	cmp	r3, r1
 800eed2:	bf01      	itttt	eq
 800eed4:	6819      	ldreq	r1, [r3, #0]
 800eed6:	685b      	ldreq	r3, [r3, #4]
 800eed8:	1949      	addeq	r1, r1, r5
 800eeda:	6021      	streq	r1, [r4, #0]
 800eedc:	e7ed      	b.n	800eeba <_free_r+0x22>
 800eede:	461a      	mov	r2, r3
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	b10b      	cbz	r3, 800eee8 <_free_r+0x50>
 800eee4:	42a3      	cmp	r3, r4
 800eee6:	d9fa      	bls.n	800eede <_free_r+0x46>
 800eee8:	6811      	ldr	r1, [r2, #0]
 800eeea:	1855      	adds	r5, r2, r1
 800eeec:	42a5      	cmp	r5, r4
 800eeee:	d10b      	bne.n	800ef08 <_free_r+0x70>
 800eef0:	6824      	ldr	r4, [r4, #0]
 800eef2:	4421      	add	r1, r4
 800eef4:	1854      	adds	r4, r2, r1
 800eef6:	42a3      	cmp	r3, r4
 800eef8:	6011      	str	r1, [r2, #0]
 800eefa:	d1e0      	bne.n	800eebe <_free_r+0x26>
 800eefc:	681c      	ldr	r4, [r3, #0]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	6053      	str	r3, [r2, #4]
 800ef02:	4421      	add	r1, r4
 800ef04:	6011      	str	r1, [r2, #0]
 800ef06:	e7da      	b.n	800eebe <_free_r+0x26>
 800ef08:	d902      	bls.n	800ef10 <_free_r+0x78>
 800ef0a:	230c      	movs	r3, #12
 800ef0c:	6003      	str	r3, [r0, #0]
 800ef0e:	e7d6      	b.n	800eebe <_free_r+0x26>
 800ef10:	6825      	ldr	r5, [r4, #0]
 800ef12:	1961      	adds	r1, r4, r5
 800ef14:	428b      	cmp	r3, r1
 800ef16:	bf04      	itt	eq
 800ef18:	6819      	ldreq	r1, [r3, #0]
 800ef1a:	685b      	ldreq	r3, [r3, #4]
 800ef1c:	6063      	str	r3, [r4, #4]
 800ef1e:	bf04      	itt	eq
 800ef20:	1949      	addeq	r1, r1, r5
 800ef22:	6021      	streq	r1, [r4, #0]
 800ef24:	6054      	str	r4, [r2, #4]
 800ef26:	e7ca      	b.n	800eebe <_free_r+0x26>
 800ef28:	b003      	add	sp, #12
 800ef2a:	bd30      	pop	{r4, r5, pc}
 800ef2c:	2000b5e4 	.word	0x2000b5e4

0800ef30 <cleanup_glue>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	460c      	mov	r4, r1
 800ef34:	6809      	ldr	r1, [r1, #0]
 800ef36:	4605      	mov	r5, r0
 800ef38:	b109      	cbz	r1, 800ef3e <cleanup_glue+0xe>
 800ef3a:	f7ff fff9 	bl	800ef30 <cleanup_glue>
 800ef3e:	4621      	mov	r1, r4
 800ef40:	4628      	mov	r0, r5
 800ef42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef46:	f7ff bfa7 	b.w	800ee98 <_free_r>
	...

0800ef4c <_reclaim_reent>:
 800ef4c:	4b2c      	ldr	r3, [pc, #176]	; (800f000 <_reclaim_reent+0xb4>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4283      	cmp	r3, r0
 800ef52:	b570      	push	{r4, r5, r6, lr}
 800ef54:	4604      	mov	r4, r0
 800ef56:	d051      	beq.n	800effc <_reclaim_reent+0xb0>
 800ef58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ef5a:	b143      	cbz	r3, 800ef6e <_reclaim_reent+0x22>
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d14a      	bne.n	800eff8 <_reclaim_reent+0xac>
 800ef62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef64:	6819      	ldr	r1, [r3, #0]
 800ef66:	b111      	cbz	r1, 800ef6e <_reclaim_reent+0x22>
 800ef68:	4620      	mov	r0, r4
 800ef6a:	f7ff ff95 	bl	800ee98 <_free_r>
 800ef6e:	6961      	ldr	r1, [r4, #20]
 800ef70:	b111      	cbz	r1, 800ef78 <_reclaim_reent+0x2c>
 800ef72:	4620      	mov	r0, r4
 800ef74:	f7ff ff90 	bl	800ee98 <_free_r>
 800ef78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ef7a:	b111      	cbz	r1, 800ef82 <_reclaim_reent+0x36>
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f7ff ff8b 	bl	800ee98 <_free_r>
 800ef82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef84:	b111      	cbz	r1, 800ef8c <_reclaim_reent+0x40>
 800ef86:	4620      	mov	r0, r4
 800ef88:	f7ff ff86 	bl	800ee98 <_free_r>
 800ef8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ef8e:	b111      	cbz	r1, 800ef96 <_reclaim_reent+0x4a>
 800ef90:	4620      	mov	r0, r4
 800ef92:	f7ff ff81 	bl	800ee98 <_free_r>
 800ef96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef98:	b111      	cbz	r1, 800efa0 <_reclaim_reent+0x54>
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f7ff ff7c 	bl	800ee98 <_free_r>
 800efa0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800efa2:	b111      	cbz	r1, 800efaa <_reclaim_reent+0x5e>
 800efa4:	4620      	mov	r0, r4
 800efa6:	f7ff ff77 	bl	800ee98 <_free_r>
 800efaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800efac:	b111      	cbz	r1, 800efb4 <_reclaim_reent+0x68>
 800efae:	4620      	mov	r0, r4
 800efb0:	f7ff ff72 	bl	800ee98 <_free_r>
 800efb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efb6:	b111      	cbz	r1, 800efbe <_reclaim_reent+0x72>
 800efb8:	4620      	mov	r0, r4
 800efba:	f7ff ff6d 	bl	800ee98 <_free_r>
 800efbe:	69a3      	ldr	r3, [r4, #24]
 800efc0:	b1e3      	cbz	r3, 800effc <_reclaim_reent+0xb0>
 800efc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800efc4:	4620      	mov	r0, r4
 800efc6:	4798      	blx	r3
 800efc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800efca:	b1b9      	cbz	r1, 800effc <_reclaim_reent+0xb0>
 800efcc:	4620      	mov	r0, r4
 800efce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efd2:	f7ff bfad 	b.w	800ef30 <cleanup_glue>
 800efd6:	5949      	ldr	r1, [r1, r5]
 800efd8:	b941      	cbnz	r1, 800efec <_reclaim_reent+0xa0>
 800efda:	3504      	adds	r5, #4
 800efdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efde:	2d80      	cmp	r5, #128	; 0x80
 800efe0:	68d9      	ldr	r1, [r3, #12]
 800efe2:	d1f8      	bne.n	800efd6 <_reclaim_reent+0x8a>
 800efe4:	4620      	mov	r0, r4
 800efe6:	f7ff ff57 	bl	800ee98 <_free_r>
 800efea:	e7ba      	b.n	800ef62 <_reclaim_reent+0x16>
 800efec:	680e      	ldr	r6, [r1, #0]
 800efee:	4620      	mov	r0, r4
 800eff0:	f7ff ff52 	bl	800ee98 <_free_r>
 800eff4:	4631      	mov	r1, r6
 800eff6:	e7ef      	b.n	800efd8 <_reclaim_reent+0x8c>
 800eff8:	2500      	movs	r5, #0
 800effa:	e7ef      	b.n	800efdc <_reclaim_reent+0x90>
 800effc:	bd70      	pop	{r4, r5, r6, pc}
 800effe:	bf00      	nop
 800f000:	20000010 	.word	0x20000010

0800f004 <__malloc_lock>:
 800f004:	4801      	ldr	r0, [pc, #4]	; (800f00c <__malloc_lock+0x8>)
 800f006:	f7f4 b864 	b.w	80030d2 <__retarget_lock_acquire_recursive>
 800f00a:	bf00      	nop
 800f00c:	2000094c 	.word	0x2000094c

0800f010 <__malloc_unlock>:
 800f010:	4801      	ldr	r0, [pc, #4]	; (800f018 <__malloc_unlock+0x8>)
 800f012:	f7f4 b872 	b.w	80030fa <__retarget_lock_release_recursive>
 800f016:	bf00      	nop
 800f018:	2000094c 	.word	0x2000094c

0800f01c <_init>:
 800f01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f01e:	bf00      	nop
 800f020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f022:	bc08      	pop	{r3}
 800f024:	469e      	mov	lr, r3
 800f026:	4770      	bx	lr

0800f028 <_fini>:
 800f028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f02a:	bf00      	nop
 800f02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f02e:	bc08      	pop	{r3}
 800f030:	469e      	mov	lr, r3
 800f032:	4770      	bx	lr
